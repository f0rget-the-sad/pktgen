cscope 15 $HOME/pktgen-dpdk               0002265804
	@app/cli-functions.c

9 
	~"˛i-fun˘i⁄s.h
"

11 
	~<°dio.h
>

12 
	~<ãrmios.h
>

13 
	~<°rög.h
>

14 
	~<uni°d.h
>

15 
	~<sys/ty≥s.h
>

16 
	~<sig«l.h
>

18 
	~<πe_vîsi⁄.h
>

19 
	~<πe_©omic.h
>

20 
	~<πe_dev¨gs.h
>

21 
	~<πe_ëhî.h
>

22 
	~<πe_°rög_‚s.h
>

23 
	~<˛i_°rög_‚s.h
>

24 
	~<πe_hexdump.h
>

25 
	~<πe_cy˛es.h
>

26 
	~<πe_mÆloc.h
>

28 
	~"pktgí.h
"

30 
	~<˛i.h
>

31 
	~<˛i_m≠.h
>

33 
	~"c›yright_öfo.h
"

34 
	~"pktgí-cmds.h
"

35 
	~"pktgí-maö.h
"

36 
	~"Õktgílib.h
"

37 
	~"pktgí-di•œy.h
"

38 
	~"pktgí-øndom.h
"

39 
	~"pktgí-log.h
"

40 
	~"pg_ëhî.h
"

42 
ölöe
 
uöt16_t


43 
	$vÆid_pkt_size
(
p‹t_öfo_t
 *
öfo
, *
vÆ
)

45 
uöt16_t
 
pkt_size
;

47 i‡(!
vÆ
)

48  (
MIN_PKT_SIZE
 + 
FCS_SIZE
);

50 
pkt_size
 = 
	`©oi
(
vÆ
);

51 i‡(!(
	`πe_©omic32_ªad
(&
öfo
->
p‹t_Êags
Ë& 
SEND_SHORT_PACKETS
)) {

52 i‡(
pkt_size
 < (
MIN_PKT_SIZE
 + 
FCS_SIZE
))

53 
pkt_size
 = (
MIN_PKT_SIZE
 + 
FCS_SIZE
);

56 i‡(
pkt_size
 > (
MAX_PKT_SIZE
 + 
FCS_SIZE
))

57 
pkt_size
 = 
MAX_PKT_SIZE
 + 
FCS_SIZE
;

59  
pkt_size
;

60 
	}
}

63 c⁄° *
	gtôÀ_hñp
[] = {

66 
NULL
,

69 c⁄° *
	g°©us_hñp
[] = {

94 
CLI_HELP_PAUSE
,

95 
NULL


98 
	#SMMI
 "%|°¨t|möimum|maximum|ö¸emít|mö|max|öc"

	)

99 
˛i_m≠
 
	gønge_m≠
[] = {

100 { 20, "øngê%P d° ma¯"
SMMI
" %m" },

101 { 21, "øngê%P sr¯ma¯"
SMMI
" %m" },

104 { 30, "øngê%P d° i∞"
SMMI
" %4" },

105 { 31, "øngê%P sr¯ù "
SMMI
" %4" },

109 { 50, "øngê%P d°Ö‹à"
SMMI
" %d" },

110 { 51, "øngê%P sr¯p‹à"
SMMI
" %d" },

113 { 60, "øngê%P vœ¿"
SMMI
" %d" },

115 { 70, "øngê%P sizê"
SMMI
" %d" },

120 { 160, "øngê%P co†"
SMMI
" %d" },

122 { 170, "øngê%PÅo†"
SMMI
" %d" },

124 { -1, 
NULL
 }

127 c⁄° *
	gønge_hñp
[] = {

155 
CLI_HELP_PAUSE
,

156 
NULL


160 
	$ønge_cmd
(
¨gc
, **
¨gv
)

162 
˛i_m≠
 *
m
;

163 
p‹éi°_t
 
p‹éi°
;

164 
pg_ùaddr
 
ù
;

165 *
wh©
, *
p
;

166 c⁄° *
vÆ
;

168 
m
 = 
	`˛i_m≠pög
(
ønge_m≠
, 
¨gc
, 
¨gv
);

169 i‡(!
m
)

170  
	`˛i_cmd_îr‹
("R™gêcomm™dÉº‹", "R™ge", 
¨gc
, 
¨gv
);

172 
	`πe_∑r£_p‹éi°
(
¨gv
[1], &
p‹éi°
);

174 
wh©
 = 
¨gv
[4];

175 
vÆ
 = (c⁄° *)
¨gv
[5];

176 
m
->
ödex
) {

178 
	`f‹óch_p‹t
(
p‹éi°
,

179 
	`ønge_£t_de°_mac
(
öfo
, 
wh©
, 
	`πe_ëhî_©⁄
(
vÆ
, 
NULL
)));

182 
	`f‹óch_p‹t
(
p‹éi°
,

183 
	`ønge_£t_§c_mac
(
öfo
, 
wh©
, 
	`πe_ëhî_©⁄
(
vÆ
, 
NULL
)));

186 
	`f‹óch_p‹t
(
p‹éi°
,

187 
	`ønge_£t_de°_mac
(
öfo
, "°¨t", 
	`πe_ëhî_©⁄
((c⁄° *)
¨gv
[4], 
NULL
));

188 
	`ønge_£t_de°_mac
(
öfo
, "mö", 
	`πe_ëhî_©⁄
((c⁄° *)
¨gv
[5], 
NULL
));

189 
	`ønge_£t_de°_mac
(
öfo
, "max", 
	`πe_ëhî_©⁄
((c⁄° *)
¨gv
[6], 
NULL
));

190 
	`ønge_£t_de°_mac
(
öfo
, "öc", 
	`πe_ëhî_©⁄
((c⁄° *)
¨gv
[7], 
NULL
))

194 
	`f‹óch_p‹t
(
p‹éi°
,

195 
	`ønge_£t_§c_mac
(
öfo
, "°¨t", 
	`πe_ëhî_©⁄
((c⁄° *)
¨gv
[4], 
NULL
));

196 
	`ønge_£t_§c_mac
(
öfo
, "mö", 
	`πe_ëhî_©⁄
((c⁄° *)
¨gv
[5], 
NULL
));

197 
	`ønge_£t_§c_mac
(
öfo
, "max", 
	`πe_ëhî_©⁄
((c⁄° *)
¨gv
[6], 
NULL
));

198 
	`ønge_£t_§c_mac
(
öfo
, "öc", 
	`πe_ëhî_©⁄
((c⁄° *)
¨gv
[7], 
NULL
))

203 
p
 = 
	`°rchr
(
¨gv
[4], '/');

204 i‡(
p
)

205 *
p
 = '\0';

206 
	`πe_©où
(
vÆ
, 
PG_IPADDR_V4
, &
ù
, (ip));

207 
	`f‹óch_p‹t
(
p‹éi°
,

208 
	`ønge_£t_d°_ù
(
öfo
, 
wh©
, &
ù
));

212 
p
 = 
	`°rchr
(
¨gv
[4], '/');

213 i‡(
p
)

214 *
p
 = '\0';

215 
	`πe_©où
(
¨gv
[5], 
PG_IPADDR_V4
, &
ù
, (ip));

216 
	`f‹óch_p‹t
(
p‹éi°
,

217 
	`ønge_£t_§c_ù
(
öfo
, 
wh©
, &
ù
));

220 
	`f‹óch_p‹t
(
p‹éi°
,

221 
	`πe_©où
(
¨gv
[4], 
PG_IPADDR_V4
, &
ù
, (ip));

222 
	`ønge_£t_d°_ù
(
öfo
, (*)(
uöçå_t
)"°¨t", &
ù
);

223 
	`πe_©où
(
¨gv
[5], 
PG_IPADDR_V4
, &
ù
, (ip));

224 
	`ønge_£t_d°_ù
(
öfo
, (*)(
uöçå_t
)"mö", &
ù
);

225 
	`πe_©où
(
¨gv
[6], 
PG_IPADDR_V4
, &
ù
, (ip));

226 
	`ønge_£t_d°_ù
(
öfo
, (*)(
uöçå_t
)"max", &
ù
);

227 
	`πe_©où
(
¨gv
[7], 
PG_IPADDR_V4
, &
ù
, (ip));

228 
	`ønge_£t_d°_ù
(
öfo
, (*)(
uöçå_t
)"öc", &
ù
)

232 
	`f‹óch_p‹t
(
p‹éi°
,

233 
	`πe_©où
(
¨gv
[4], 
PG_IPADDR_V4
, &
ù
, (ip));

234 
	`ønge_£t_§c_ù
(
öfo
, (*)(
uöçå_t
)"°¨t", &
ù
);

235 
	`πe_©où
(
¨gv
[5], 
PG_IPADDR_V4
, &
ù
, (ip));

236 
	`ønge_£t_§c_ù
(
öfo
, (*)(
uöçå_t
)"mö", &
ù
);

237 
	`πe_©où
(
¨gv
[6], 
PG_IPADDR_V4
, &
ù
, (ip));

238 
	`ønge_£t_§c_ù
(
öfo
, (*)(
uöçå_t
)"max", &
ù
);

239 
	`πe_©où
(
¨gv
[7], 
PG_IPADDR_V4
, &
ù
, (ip));

240 
	`ønge_£t_§c_ù
(
öfo
, (*)(
uöçå_t
)"öc", &
ù
)

244 
	`f‹óch_p‹t
(
p‹éi°
,

245 
	`ønge_£t_¥Ÿo
(
öfo
, 
¨gv
[3]) );

248 
	`f‹óch_p‹t
(
p‹éi°
,

249 
	`ønge_£t_d°_p‹t
(
öfo
, 
wh©
, 
	`©oi
(
vÆ
)) );

252 
	`f‹óch_p‹t
(
p‹éi°
,

253 
	`ønge_£t_§c_p‹t
(
öfo
, 
wh©
, 
	`©oi
(
vÆ
)) );

256 
	`f‹óch_p‹t
(
p‹éi°
,

257 
	`ønge_£t_d°_p‹t
(
öfo
, (*)(
uöçå_t
)"°¨t", 
	`©oi
(
¨gv
[4]));

258 
	`ønge_£t_d°_p‹t
(
öfo
, (*)(
uöçå_t
)"mö", 
	`©oi
(
¨gv
[5]));

259 
	`ønge_£t_d°_p‹t
(
öfo
, (*)(
uöçå_t
)"max", 
	`©oi
(
¨gv
[6]));

260 
	`ønge_£t_d°_p‹t
(
öfo
, (*)(
uöçå_t
)"öc", 
	`©oi
(
¨gv
[7]))

264 
	`f‹óch_p‹t
(
p‹éi°
,

265 
	`ønge_£t_§c_p‹t
(
öfo
, (*)(
uöçå_t
)"°¨t", 
	`©oi
(
¨gv
[4]));

266 
	`ønge_£t_§c_p‹t
(
öfo
, (*)(
uöçå_t
)"mö", 
	`©oi
(
¨gv
[5]));

267 
	`ønge_£t_§c_p‹t
(
öfo
, (*)(
uöçå_t
)"max", 
	`©oi
(
¨gv
[6]));

268 
	`ønge_£t_§c_p‹t
(
öfo
, (*)(
uöçå_t
)"öc", 
	`©oi
(
¨gv
[7]))

272 
	`f‹óch_p‹t
(
p‹éi°
,

273 
	`ønge_£t_vœn_id
(
öfo
, 
¨gv
[3], 
	`©oi
(
wh©
)) );

276 
	`f‹óch_p‹t
(
p‹éi°
,

277 
	`ønge_£t_vœn_id
(
öfo
, (*)(
uöçå_t
)"°¨t", 
	`©oi
(
¨gv
[3]));

278 
	`ønge_£t_vœn_id
(
öfo
, (*)(
uöçå_t
)"mö", 
	`©oi
(
¨gv
[4]));

279 
	`ønge_£t_vœn_id
(
öfo
, (*)(
uöçå_t
)"max", 
	`©oi
(
¨gv
[5]));

280 
	`ønge_£t_vœn_id
(
öfo
, (*)(
uöçå_t
)"öc", 
	`©oi
(
¨gv
[6]))

284 
	`f‹óch_p‹t
(
p‹éi°
,

285 
	`ønge_£t_pkt_size
(
öfo
, 
¨gv
[3], 
	`vÆid_pkt_size
(öfo, 
wh©
)));

288 
	`f‹óch_p‹t
(
p‹éi°
,

289 
	`ønge_£t_pkt_size
(
öfo
, (*)(
uöçå_t
)"°¨t", 
	`vÆid_pkt_size
(öfo, 
¨gv
[3]));

290 
	`ønge_£t_pkt_size
(
öfo
, (*)(
uöçå_t
)"mö", 
	`vÆid_pkt_size
(öfo, 
¨gv
[4]));

291 
	`ønge_£t_pkt_size
(
öfo
, (*)(
uöçå_t
)"max", 
	`vÆid_pkt_size
(öfo, 
¨gv
[5]));

292 
	`ønge_£t_pkt_size
(
öfo
, (*)(
uöçå_t
)"öc", 
	`vÆid_pkt_size
(öfo, 
¨gv
[6]));

296 
	`f‹óch_p‹t
(
p‹éi°
,

297 
	`ønge_£t_m∂s_íåy
(
öfo
, 
	`°πoul
(
wh©
, 
NULL
, 16)) );

300 
	`f‹óch_p‹t
(
p‹éi°
,

301 
	`ønge_£t_qöqids
(
öfo
, 
	`©oi
(
wh©
),átoi(
vÆ
)) );

304 
	`f‹óch_p‹t
(
p‹éi°
,

305 
	`ønge_£t_gª_key
(
öfo
, 
	`°πoul
(
wh©
, 
NULL
, 10)) );

308 
	`f‹óch_p‹t
(
p‹éi°
,

309 
	`ønge_£t_cos_id
(
öfo
, 
¨gv
[3], 
	`©oi
(
wh©
)) );

312 
	`f‹óch_p‹t
(
p‹éi°
,

313 
	`ønge_£t_cos_id
(
öfo
, (*)(
uöçå_t
)"°¨t", 
	`©oi
(
¨gv
[3]));

314 
	`ønge_£t_cos_id
(
öfo
, (*)(
uöçå_t
)"mö", 
	`©oi
(
¨gv
[4]));

315 
	`ønge_£t_cos_id
(
öfo
, (*)(
uöçå_t
)"max", 
	`©oi
(
¨gv
[5]));

316 
	`ønge_£t_cos_id
(
öfo
, (*)(
uöçå_t
)"öc", 
	`©oi
(
¨gv
[6]));

320 
	`f‹óch_p‹t
(
p‹éi°
,

321 
	`ønge_£t_tos_id
(
öfo
, 
¨gv
[3], 
	`©oi
(
wh©
)) );

324 
	`f‹óch_p‹t
(
p‹éi°
,

325 
	`ønge_£t_tos_id
(
öfo
, (*)(
uöçå_t
)"°¨t", 
	`©oi
(
¨gv
[3]));

326 
	`ønge_£t_tos_id
(
öfo
, (*)(
uöçå_t
)"mö", 
	`©oi
(
¨gv
[4]));

327 
	`ønge_£t_tos_id
(
öfo
, (*)(
uöçå_t
)"max", 
	`©oi
(
¨gv
[5]));

328 
	`ønge_£t_tos_id
(
öfo
, (*)(
uöçå_t
)"öc", 
	`©oi
(
¨gv
[6]))

332  
	`˛i_cmd_îr‹
("R™gêcomm™dÉº‹", "R™ge", 
¨gc
, 
¨gv
);

334 
	`pktgí_upd©e_di•œy
();

336 
	}
}

338 
	#£t_ty≥s
 "count|" \

349 "£qC¡"

	)

351 
˛i_m≠
 
	g£t_m≠
[] = {

352 { 10, "£à%P %|" 
£t_ty≥s
 " %d" },

367 { -1, 
NULL
 }

370 c⁄° *
	g£t_hñp
[] = {

410 
CLI_HELP_PAUSE
,

411 
NULL


415 
	$£t_cmd
(
¨gc
, **
¨gv
)

417 
p‹éi°_t
 
p‹éi°
;

418 *
wh©
, *
p
;

419 
vÆue
, 
n
;

420 
˛i_m≠
 *
m
;

421 
pg_ùaddr
 
ù
;

422 
uöt16_t
 
id1
, 
id2
;

424 
m
 = 
	`˛i_m≠pög
(
£t_m≠
, 
¨gc
, 
¨gv
);

425 i‡(!
m
)

426  
	`˛i_cmd_îr‹
("Së comm™d i†övÆid", "Së", 
¨gc
, 
¨gv
);

428 
	`πe_∑r£_p‹éi°
(
¨gv
[1], &
p‹éi°
);

430 
wh©
 = 
¨gv
[2];

431 
vÆue
 = 
	`©oi
(
¨gv
[3]);

433 
m
->
ödex
) {

435 
n
 = 
	`˛i_m≠_li°_£¨ch
(
m
->
fmt
, 
¨gv
[2], 2);

436 
	`f‹óch_p‹t
(
p‹éi°
, 
	`_do
(

437 
n
) {

438 0: 
	`sögÀ_£t_tx_cou¡
(
öfo
, 
vÆue
); ;

439 1: 
	`sögÀ_£t_pkt_size
(
öfo
, 
	`vÆid_pkt_size
(öfo, 
¨gv
[3])); ;

440 2: 
	`sögÀ_£t_tx_øã
(
öfo
, 
¨gv
[3]); ;

441 3: 
	`sögÀ_£t_tx_bur°
(
öfo
, 
vÆue
); ;

442 4: 
	`debug_£t_tx_cy˛es
(
öfo
, 
vÆue
); ;

443 5: 
	`sögÀ_£t_p‹t_vÆue
(
öfo
, 
wh©
[0], 
vÆue
); ;

444 6: 
	`sögÀ_£t_p‹t_vÆue
(
öfo
, 
wh©
[0], 
vÆue
); ;

445 7: 
	`pktgí_£t_p‹t_£qC¡
(
öfo
, 
vÆue
); ;

446 8: 
	`pktgí_£t_p‹t_¥ime
(
öfo
, 
vÆue
); ;

447 9: 
	`debug_£t_p‹t_dump
(
öfo
, 
vÆue
); ;

448 10: 
	`sögÀ_£t_vœn_id
(
öfo
, 
vÆue
); ;

449 11: 
	`pktgí_£t_p‹t_£qC¡
(
öfo
, 
vÆue
); ;

451  
	`˛i_cmd_îr‹
("Së comm™d i†övÆid", "Së", 
¨gc
, 
¨gv
);

455 
	`f‹óch_p‹t
(
p‹éi°
, 
	`sögÀ_£t_jôãr
(
öfo
,

456 
	`°πouŒ
(
¨gv
[3], 
NULL
, 0)));

459 
	`f‹óch_p‹t
(
p‹éi°
, 
	`sögÀ_£t_pkt_ty≥
(
öfo
, 
¨gv
[3]));

462 
	`f‹óch_p‹t
(
p‹éi°
, 
	`sögÀ_£t_¥Ÿo
(
öfo
, 
¨gv
[3]));

465 
	`f‹óch_p‹t
(
p‹éi°
,

466 
	`sögÀ_£t_§c_mac
(
öfo
, 
	`πe_ëhî_©⁄
(
¨gv
[4], 
NULL
)));

469 
	`f‹óch_p‹t
(
p‹éi°
,

470 
	`sögÀ_£t_d°_mac
(
öfo
, 
	`πe_ëhî_©⁄
(
¨gv
[4], 
NULL
)));

473 
	`f‹óch_p‹t
(
p‹éi°
, 
	`∑âîn_£t_ty≥
(
öfo
, 
¨gv
[3]));

476 
	`f‹óch_p‹t
(
p‹éi°
,

477 
	`∑âîn_£t_u£r_∑âîn
(
öfo
, 
¨gv
[3]));

480 
p
 = 
	`°rchr
(
¨gv
[4], '/');

481 i‡(!
p
) {

482 
buf
[32];

483 
	`¢¥ötf
(
buf
, (buf), "%s/32", 
¨gv
[4]);

484 
	`˛i_¥ötf
("src IPáddress should contain /NN subnet value, default /32\n");

485 
	`πe_©où
(
buf
, 
PG_IPADDR_V4
 | 
PG_IPADDR_NETWORK
, &
ù
, (ip));

487 
	`πe_©où
(
¨gv
[4], 
PG_IPADDR_V4
 | 
PG_IPADDR_NETWORK
, &
ù
, (ip));

488 
	`f‹óch_p‹t
(
p‹éi°
, 
	`sögÀ_£t_ùaddr
(
öfo
, 's', &
ù
));

492 
p
 = 
	`°rchr
(
¨gv
[4], '/');

493 i‡(
p
) {

494 
	`˛i_¥ötf
("Subnet maskÇotÑequired,Ñemoving subnet mask value\n");

495 *
p
 = '\0';

497 
	`πe_©où
(
¨gv
[4], 
PG_IPADDR_V4
, &
ù
, (ip));

498 
	`f‹óch_p‹t
(
p‹éi°
, 
	`sögÀ_£t_ùaddr
(
öfo
, 'd', &
ù
));

501 
	`pktgí_£t_∑ge_size
(
	`©oi
(
¨gv
[2]));

504 
id1
 = 
	`°πﬁ
(
¨gv
[3], 
NULL
, 0);

505 
id2
 = 
	`°πﬁ
(
¨gv
[4], 
NULL
, 0);

506 
	`f‹óch_p‹t
(
p‹éi°
, 
	`sögÀ_£t_qöqids
(
öfo
, 
id1
, 
id2
));

509 
mask
[34] = { 0 }, *
m
;

510 
cb
;

512 
id1
 = 
	`°πﬁ
(
¨gv
[3], 
NULL
, 0);

513 
id2
 = 
	`°πﬁ
(
¨gv
[4], 
NULL
, 0);

514 
m
 = 
¨gv
[5];

515 i‡(
	`°rcmp
(
m
, "off")) {

516 
idx
;

520 
n
 = 0, 
idx
 = 0; (idx < 32Ë&& ((
cb
 = 
m
[n]) != '\0');Ç++)

521 i‡((
cb
 == '0') || (cb == '1') || (cb == '.') || (cb == 'X') || (cb == 'x'))

522 
mask
[
idx
++] = 
cb
;

524 
	`f‹óch_p‹t
(
p‹éi°
,

525 
	`íabÀ_øndom
(
öfo
, 
	`pktgí_£t_øndom_bôfõld
(öfo->
∫d_bôfõlds
,

526 
id1
, 
id2
, 
mask
Ë? 
ENABLE_STATE
 : 
DISABLE_STATE
));

530 
id1
 = 
	`°πﬁ
(
¨gv
[3], 
NULL
, 0);

531 
	`f‹óch_p‹t
(
p‹éi°
, 
	`sögÀ_£t_cos
(
öfo
, 
id1
));

534 
id1
 = 
	`°πﬁ
(
¨gv
[3], 
NULL
, 0);

535 
	`f‹óch_p‹t
(
p‹éi°
, 
	`sögÀ_£t_tos
(
öfo
, 
id1
));

538  
	`˛i_cmd_îr‹
("Comm™d invÆid", "Së", 
¨gc
, 
¨gv
);

541 
	`pktgí_upd©e_di•œy
();

543 
	}
}

545 
˛i_m≠
 
	gpˇp_m≠
[] = {

550 { -1, 
NULL
 }

553 c⁄° *
	gpˇp_hñp
[] = {

558 
NULL


562 
	$pˇp_cmd
(
¨gc
, **
¨gv
)

564 
˛i_m≠
 *
m
;

565 
pˇp_öfo_t
 *
pˇp
;

566 
uöt32_t
 
max_˙t
;

567 
uöt32_t
 
vÆue
;

568 
p‹éi°_t
 
p‹éi°
;

570 
m
 = 
	`˛i_m≠pög
(
pˇp_m≠
, 
¨gc
, 
¨gv
);

571 i‡(!
m
)

572  
	`˛i_cmd_îr‹
("PCAP comm™d invÆid", "PCAP", 
¨gc
, 
¨gv
);

574 
m
->
ödex
) {

576 
pˇp
 = 
pktgí
.
öfo
[pktgí.
p‹tNum
].pcap;

577 
max_˙t
 = 
pˇp
->
pkt_cou¡
;

578 
vÆue
 = 
	`°πoul
(
¨gv
[2], 
NULL
, 10);

579 i‡(
pˇp
) {

580 i‡(
vÆue
 >
max_˙t
)

581 
pˇp
->
pkt_idx
 = 
max_˙t
 - 
	`RTE_MIN
(
PCAP_PAGE_SIZE
, ()max_cnt);

583 
pˇp
->
pkt_idx
 = 
vÆue
;

584 
pktgí
.
Êags
 |
PRINT_LABELS_FLAG
;

586 
	`pktgí_log_îr‹
(" ** PCAP file isÇotÜoaded onÖort %d",

587 
pktgí
.
p‹tNum
);

590 i‡(
pktgí
.
öfo
[pktgí.
p‹tNum
].
pˇp
)

591 
	`_pˇp_öfo
(
pktgí
.
öfo
[pktgí.
p‹tNum
].
pˇp
,Öktgen.portNum, 1);

593 
	`pktgí_log_îr‹
(" ** PCAP file isÇotÜoaded onÖort %d",

594 
pktgí
.
p‹tNum
);

597 
	`πe_∑r£_p‹éi°
(
¨gv
[2], &
p‹éi°
);

598 
	`f‹óch_p‹t
(
p‹éi°
,

599 
	`pˇp_fûãr
(
öfo
, 
¨gv
[3]) );

602 
pˇp
 = 
pktgí
.
öfo
[pktgí.
p‹tNum
].pcap;

603 
	`pktgí_log_îr‹
("Pˇ∞fûêödex %d,\¿Pˇ∞fûêcou¡ %d", 
pˇp
->
pkt_idx
,Öˇp->
pkt_cou¡
);

605  
	`˛i_cmd_îr‹
("PCAP comm™d invÆid", "PCAP", 
¨gc
, 
¨gv
);

607 
	`pktgí_upd©e_di•œy
();

609 
	}
}

611 
˛i_m≠
 
	g°¨t_m≠
[] = {

616 { -1, 
NULL
 }

619 c⁄° *
	g°¨t_hñp
[] = {

628 
CLI_HELP_PAUSE
,

629 
NULL


633 
	$°¨t_°›_cmd
(
¨gc
, **
¨gv
)

635 
˛i_m≠
 *
m
;

636 
p‹éi°_t
 
p‹éi°
;

638 
m
 = 
	`˛i_m≠pög
(
°¨t_m≠
, 
¨gc
, 
¨gv
);

639 i‡(!
m
)

640  
	`˛i_cmd_îr‹
("Sèπ/St› comm™d invÆid", "Sèπ", 
¨gc
, 
¨gv
);

642 
	`πe_∑r£_p‹éi°
(
¨gv
[1], &
p‹éi°
);

644 
m
->
ödex
) {

646 
	`f‹óch_p‹t
(
p‹éi°
, 
	`pktgí_°¨t_å™smôtög
(
öfo
));

649 
	`f‹óch_p‹t
(
p‹éi°
, 
	`pktgí_°›_å™smôtög
(
öfo
));

652 
	`f‹óch_p‹t
(
p‹éi°
, 
	`pktgí_¥ime_p‹ts
(
öfo
));

655 i‡(
¨gv
[3][0] == 'g')

656 
	`f‹óch_p‹t
(
p‹éi°
,

657 
	`pktgí_£nd_¨p_ªque°s
(
öfo
, 
GRATUITOUS_ARP
) );

659 
	`f‹óch_p‹t
(
p‹éi°
,

660 
	`pktgí_£nd_¨p_ªque°s
(
öfo
, 0) );

663  
	`˛i_cmd_îr‹
("Sèπ/St› comm™d invÆid", "Sèπ", 
¨gc
, 
¨gv
);

665 
	`pktgí_upd©e_di•œy
();

667 
	}
}

669 
˛i_m≠
 
	gtheme_m≠
[] = {

674 { -1, 
NULL
 }

677 c⁄° *
	gtheme_hñp
[] = {

681 
CLI_HELP_PAUSE
,

682 
NULL


686 
	$theme_cmd
(
¨gc
, **
¨gv
)

688 
˛i_m≠
 *
m
;

690 
m
 = 
	`˛i_m≠pög
(
theme_m≠
, 
¨gc
, 
¨gv
);

691 i‡(!
m
)

692  
	`˛i_cmd_îr‹
("Themêcomm™d invÆid", "Theme", 
¨gc
, 
¨gv
);

694 
m
->
ödex
) {

695 0: 
	`pktgí_theme_show
(); ;

696 10: 
	`pktgí_theme_°©e
(
¨gv
[1]); 
	`pktgí_˛ór_di•œy
(); ;

697 20: 
	`pktgí_£t_theme_ôem
(
¨gv
[1],árgv[2],árgv[3],árgv[4]); ;

698 30: 
	`pktgí_theme_ßve
(
¨gv
[2]); ;

699 :  
	`˛i_hñp_show_group
("Theme");

702 
	}
}

704 
	#ed_ty≥
 "process|" \

721 "sh‹t"

	)

723 
˛i_m≠
 
	gíabÀ_m≠
[] = {

724 { 10, "íabÀ %P %|" 
ed_ty≥
 },

725 { 20, "dißbÀ %P %|" 
ed_ty≥
 },

728 { -1, 
NULL
 }

731 c⁄° *
	gíabÀ_hñp
[] = {

756 
CLI_HELP_PAUSE
,

757 
NULL


761 
	$í_dis_cmd
(
¨gc
, **
¨gv
)

763 
˛i_m≠
 *
m
;

764 
p‹éi°_t
 
p‹éi°
;

765 
n
, 
°©e
;

767 
m
 = 
	`˛i_m≠pög
(
íabÀ_m≠
, 
¨gc
, 
¨gv
);

768 i‡(!
m
)

769  
	`˛i_cmd_îr‹
("E«bÀ/DißbÀ invÆid comm™d", "E«bÀ", 
¨gc
, 
¨gv
);

771 
	`πe_∑r£_p‹éi°
(
¨gv
[1], &
p‹éi°
);

773 
m
->
ödex
) {

776 
n
 = 
	`˛i_m≠_li°_£¨ch
(
m
->
fmt
, 
¨gv
[2], 2);

778 
°©e
 = 
	`e°©e
(
¨gv
[0]);

780 
n
) {

782 
	`f‹óch_p‹t
(
p‹éi°
, 
	`íabÀ_¥o˚ss
(
öfo
, 
°©e
));

785 
	`f‹óch_p‹t
(
p‹éi°
, 
	`íabÀ_m∂s
(
öfo
, 
°©e
) );

788 
	`f‹óch_p‹t
(
p‹éi°
, 
	`íabÀ_qöq
(
öfo
, 
°©e
) );

791 
	`f‹óch_p‹t
(
p‹éi°
, 
	`íabÀ_gª
(
öfo
, 
°©e
) );

794 
	`f‹óch_p‹t
(
p‹éi°
, 
	`íabÀ_gª_ëh
(
öfo
, 
°©e
));

797 
	`f‹óch_p‹t
(
p‹éi°
, 
	`íabÀ_vœn
(
öfo
, 
°©e
) );

800 
	`f‹óch_p‹t
(
p‹éi°
, 
	`íabÀ_g¨p
(
öfo
, 
°©e
) );

803 
	`f‹óch_p‹t
(
p‹éi°
, 
	`íabÀ_øndom
(
öfo
, 
°©e
) );

806 
	`f‹óch_p‹t
(
p‹éi°
, 
	`íabÀ_œãncy
(
öfo
, 
°©e
) );

809 
	`f‹óch_p‹t
(
p‹éi°
, 
	`íabÀ_pˇp
(
öfo
, 
°©e
) );

812 
	`f‹óch_p‹t
(
p‹éi°
, 
	`debug_blök
(
öfo
, 
°©e
));

814 i‡(
pktgí
.
blökli°
)

815 
pktgí
.
Êags
 |
BLINK_PORTS_FLAG
;

817 
pktgí
.
Êags
 &~
BLINK_PORTS_FLAG
;

820 
	`f‹óch_p‹t
(
p‹éi°
, 
	`íabÀ_rx_èp
(
öfo
, 
°©e
));

823 
	`f‹óch_p‹t
(
p‹éi°
, 
	`íabÀ_tx_èp
(
öfo
, 
°©e
));

826 
	`f‹óch_p‹t
(
p‹éi°
, 
	`íabÀ_icmp_echo
(
öfo
, 
°©e
));

829 
	`f‹óch_p‹t
(
p‹éi°
, 
	`íabÀ_ønge
(
öfo
, 
°©e
));

832 
	`f‹óch_p‹t
(
p‹éi°
, 
	`pktgí_£t_ˇ±uª
(
öfo
, 
°©e
));

835 
	`f‹óch_p‹t
(
p‹éi°
, 
	`íabÀ_b⁄dög
(
öfo
, 
°©e
));

838 
	`f‹óch_p‹t
(
p‹éi°
, 
	`íabÀ_sh‹t_pkts
(
öfo
, 
°©e
));

841  
	`˛i_cmd_îr‹
("E«bÀ/DißbÀ invÆid comm™d", "E«bÀ", 
¨gc
, 
¨gv
);

847 
°©e
 = 
	`e°©e
(
¨gv
[0]);

849 i‡(
¨gv
[1][0] == 'm')

850 
	`íabÀ_mac_‰om_¨p
(
°©e
);

852 
	`pktgí_s¸ìn
(
°©e
);

855  
	`˛i_cmd_îr‹
("E«bÀ/DißbÀ invÆid comm™d", "E«bÀ", 
¨gc
, 
¨gv
);

857 
	`pktgí_upd©e_di•œy
();

859 
	}
}

861 #ifde‡
RTE_LIBRTE_SMEM


862 
	~<πe_smem.h
>

865 
˛i_m≠
 
	gdbg_m≠
[] = {

874 #ifde‡
RTE_LIBRTE_SMEM


880 { -1, 
NULL
 }

883 c⁄° *
	gdbg_hñp
[] = {

891 #ifde‡
RTE_LIBRTE_SMEM


897 
NULL


901 
	$πe_mem˝y_≥rf
(
˙t
, 
kb
, 
Êag
)

903 *
buf
[2], *
§c
, *
d°
;

904 
uöt64_t
 
°¨t_time
, 
tŸÆ_time
;

905 
uöt64_t
 
tŸÆ_bôs
, 
bôs_≥r_tick
;

906 
i
;

907 *(*
˝y
)(*, c⁄° *, 
size_t
);

909 
kb
 *= 1024;

911 
buf
[0] = 
	`mÆloc
(
kb
 + 
RTE_CACHE_LINE_SIZE
);

912 
buf
[1] = 
	`mÆloc
(
kb
 + 
RTE_CACHE_LINE_SIZE
);

914 
§c
 = 
	`RTE_PTR_ALIGN
(
buf
[0], 
RTE_CACHE_LINE_SIZE
);

915 
d°
 = 
	`RTE_PTR_ALIGN
(
buf
[1], 
RTE_CACHE_LINE_SIZE
);

917 
˝y
 = (
Êag
)? 
πe_mem˝y
 : 
mem˝y
;

919 
°¨t_time
 = 
	`πe_gë_tsc_cy˛es
();

920 
i
 = 0; i < 
˙t
; i++)

921 
	`˝y
(
d°
, 
§c
, 
kb
);

922 
tŸÆ_time
 = 
	`πe_gë_tsc_cy˛es
(Ë- 
°¨t_time
;

924 
tŸÆ_bôs
 = ((
uöt64_t
)
˙t
 * (uöt64_t)
kb
) * 8L;

926 
bôs_≥r_tick
 = 
tŸÆ_bôs
/
tŸÆ_time
;

928 
	`‰ì
(
buf
[0]);

929 
	`‰ì
(
buf
[1]);

931 
	#MEGA
 (
uöt64_t
)(1024 * 1024)

	)

932 
	`¥ötf
("%3d Kbyã†f‹ %8dÜo›s, ", (
kb
/1024), 
˙t
);

933 
	`¥ötf
("%3ld bôs/tick, ", 
bôs_≥r_tick
);

934 
	`¥ötf
("%6ld Mbits/sec with %s\n",

935 (
bôs_≥r_tick
 * 
	`πe_gë_timî_hz
())/
MEGA
,

936 (
Êag
)? "rte_memcpy" : "memcpy");

937 
	}
}

940 
	$dbg_cmd
(
¨gc
, **
¨gv
)

942 
˛i_m≠
 *
m
;

943 
p‹éi°_t
 
p‹éi°
;

944 
Àn
, 
˙t
;

945 c⁄° *
addr
;

947 
m
 = 
	`˛i_m≠pög
(
dbg_m≠
, 
¨gc
, 
¨gv
);

948 i‡(!
m
)

949  
	`˛i_cmd_îr‹
("Debug invÆid comm™d", "Debug", 
¨gc
, 
¨gv
);

951 
Àn
 = 32;

952 
˙t
 = 100000;

953 
m
->
ödex
) {

955 
	`pktgí_l2p_dump
();

958 i‡–(
pktgí
.
Êags
 & 
TX_DEBUG_FLAG
) == 0)

959 
pktgí
.
Êags
 |
TX_DEBUG_FLAG
;

961 
pktgí
.
Êags
 &~
TX_DEBUG_FLAG
;

962 
	`pktgí_˛ór_di•œy
();

965 
	`πe_∑r£_p‹éi°
(
¨gv
[2], &
p‹éi°
);

966 
	`f‹óch_p‹t
(
p‹éi°
,

967 
	`debug_mempoﬁ_dump
(
öfo
, 
¨gv
[3]) );

970 
	`πe_∑r£_p‹éi°
(
¨gv
[2], &
p‹éi°
);

971 
	`f‹óch_p‹t
(
p‹éi°
, 
	`debug_pdump
(
öfo
));

972 
	`pktgí_upd©e_di•œy
();

975 
	`πe_memz⁄e_dump
(
°dout
);

978 
	`πe_dump_physmem_œyout
(
°dout
);

982 
addr
 = (*)(
uöçå_t
)
	`°πouŒ
(
¨gv
[2], 
NULL
, 0);

983 i‡(
¨gc
 == 3)

984 
Àn
 = 64;

986 
Àn
 = 
	`°πoul
(
¨gv
[3], 
NULL
, 0);

987 
	`πe_hexdump
(
°dout
, "", 
addr
, 
Àn
);

989 #ifde‡
RTE_LIBRTE_SMEM


991 
	`πe_smem_li°_dump
(
°dout
);

995 
	`kûl
(
	`gëpid
(), 
SIGINT
);

998 
˙t
 = 
	`©oi
(
¨gv
[2]);

999 
Àn
 = 
	`©oi
(
¨gv
[3]);

1002 
	`πe_mem˝y_≥rf
(
˙t
, 
Àn
, 0);

1003 
	`πe_mem˝y_≥rf
(
˙t
, 
Àn
, 1);

1006  
	`˛i_cmd_îr‹
("Debug invÆid comm™d", "Debug", 
¨gc
, 
¨gv
);

1009 
	}
}

1025 
	$£q_1_£t_cmd
(
¨gc
 
__πe_unu£d
, **
¨gv
)

1027 *
¥Ÿo
 = 
¨gv
[10], *
p
;

1028 *
ëh
 = 
¨gv
[9];

1029 
£qnum
 = 
	`©oi
(
¨gv
[1]);

1030 
p‹éi°_t
 
p‹éi°
;

1031 
pg_ùaddr
 
d°
, 
§c
;

1032 
ëhî_addr
 
dmac
, 
smac
;

1033 
uöt32_t
 
ãid
;

1035 i‡–(
¥Ÿo
[0] ='i'Ë&& (
ëh
[3] == '6') ) {

1036 
	`˛i_¥ötf
("Must use IPv4 with ICMPÅypeÖackets\n");

1040 i‡(
£qnum
 >
NUM_SEQ_PKTS
) {

1041 
	`˛i_¥ötf
("sequenceÇumberÅooÜarge\n");

1045 
ãid
 = (
¨gc
 =14)? 
	`°πoul
(
¨gv
[13], 
NULL
, 10) : 0;

1046 
p
 = 
	`°rchr
(
¨gv
[5], '/');

1047 i‡(
p
)

1048 *
p
 = '\0';

1049 
	`πe_©où
(
¨gv
[5], 
PG_IPADDR_V4
, &
d°
, (dst));

1050 
p
 = 
	`°rchr
(
¨gv
[6], '/');

1051 i‡(!
p
) {

1052 
buf
[32];

1053 
	`˛i_¥ötf
("src IPáddress should contain /NN subnet value, default /32\n");

1054 
	`¢¥ötf
(
buf
, (buf), "%s/32", 
¨gv
[6]);

1055 
	`πe_©où
(
buf
, 
PG_IPADDR_V4
 | 
PG_IPADDR_NETWORK
, &
§c
, (src));

1057 
	`πe_©où
(
¨gv
[6], 
PG_IPADDR_V4
 | 
PG_IPADDR_NETWORK
, &
§c
, (src));

1058 
	`πe_∑r£_p‹éi°
(
¨gv
[2], &
p‹éi°
);

1059 
	`πe_ëhî_©⁄
(
¨gv
[3], &
dmac
);

1060 
	`πe_ëhî_©⁄
(
¨gv
[4], &
smac
);

1061 
	`f‹óch_p‹t
(
p‹éi°
,

1062 
	`pktgí_£t_£q
(
öfo
, 
£qnum
,

1063 &
dmac
, &
smac
,

1064 &
d°
, &
§c
,

1065 
	`©oi
(
¨gv
[7]),átoi(argv[8]),

1066 
ëh
[3], 
¥Ÿo
[0],

1067 
	`©oi
(
¨gv
[11]),átoi(argv[12]),

1068 
ãid
) );

1070 
	`pktgí_upd©e_di•œy
();

1072 
	}
}

1088 
	$£q_2_£t_cmd
(
¨gc
 
__πe_unu£d
, **
¨gv
)

1090 *
¥Ÿo
 = 
¨gv
[16], *
p
;

1091 *
ëh
 = 
¨gv
[15];

1092 
£qnum
 = 
	`©oi
(
¨gv
[1]);

1093 
p‹éi°_t
 
p‹éi°
;

1094 
pg_ùaddr
 
d°
, 
§c
;

1095 
ëhî_addr
 
dmac
, 
smac
;

1096 
uöt32_t
 
ãid
;

1098 i‡–(
¥Ÿo
[0] ='i'Ë&& (
ëh
[3] == '6') ) {

1099 
	`˛i_¥ötf
("Must use IPv4 with ICMPÅypeÖackets\n");

1103 i‡(
£qnum
 >
NUM_SEQ_PKTS
) {

1104 
	`˛i_¥ötf
("SequenceÇumberÅooÜarge\n");

1108 
ãid
 = (
¨gc
 =23)? 
	`°πoul
(
¨gv
[22], 
NULL
, 10) : 0;

1109 
p
 = 
	`°rchr
(
¨gv
[8], '/');

1110 i‡(
p
)

1111 *
p
 = '\0';

1112 
	`πe_©où
(
¨gv
[8], 
PG_IPADDR_V4
, &
d°
, (dst));

1113 
p
 = 
	`°rchr
(
¨gv
[10], '/');

1114 i‡(
p
 =
NULL
) {

1115 
buf
[32];

1116 
	`¢¥ötf
(
buf
, (buf), "%s/32", 
¨gv
[10]);

1117 
	`˛i_¥ötf
("src IPáddress should contain /NN subnet value, default /32");

1118 
	`πe_©où
(
buf
, 
PG_IPADDR_V4
 | 
PG_IPADDR_NETWORK
, &
§c
, (src));

1120 
	`πe_©où
(
¨gv
[10], 
PG_IPADDR_V4
 | 
PG_IPADDR_NETWORK
, &
§c
, (src));

1121 
	`πe_∑r£_p‹éi°
(
¨gv
[2], &
p‹éi°
);

1122 
	`πe_ëhî_©⁄
(
¨gv
[4], &
dmac
);

1123 
	`πe_ëhî_©⁄
(
¨gv
[6], &
smac
);

1124 
	`f‹óch_p‹t
(
p‹éi°
,

1125 
	`pktgí_£t_£q
(
öfo
, 
£qnum
,

1126 &
dmac
, &
smac
,

1127 &
d°
, &
§c
,

1128 
	`©oi
(
¨gv
[12]),átoi◊rgv[14]), 
ëh
[3],

1129 
¥Ÿo
[0],

1130 
	`©oi
(
¨gv
[18]),átoi(argv[20]),

1131 
ãid
) );

1133 
	`pktgí_upd©e_di•œy
();

1135 
	}
}

1151 
	$£q_3_£t_cmd
(
¨gc
 
__πe_unu£d
, **
¨gv
)

1153 
£qnum
 = 
	`©oi
(
¨gv
[1]);

1154 
p‹éi°_t
 
p‹éi°
;

1155 
uöt32_t
 
cos
, 
tos
;

1157 i‡(
£qnum
 >
NUM_SEQ_PKTS
) {

1158 
	`˛i_¥ötf
("SequenceÇumberÅooÜarge\n");

1162 
cos
 = 
	`°πoul
(
¨gv
[4], 
NULL
, 10);

1163 
tos
 = 
	`°πoul
(
¨gv
[6], 
NULL
, 10);

1165 
	`πe_∑r£_p‹éi°
(
¨gv
[2], &
p‹éi°
);

1167 
	`f‹óch_p‹t
(
p‹éi°
,

1168 
	`pktgí_£t_cos_tos_£q
(
öfo
, 
£qnum
, 
cos
, 
tos
) );

1170 
	`pktgí_upd©e_di•œy
();

1172 
	}
}

1174 
˛i_m≠
 
	g£q_m≠
[] = {

1180 { -1, 
NULL
 }

1183 c⁄° *
	g£q_hñp
[] = {

1190 
NULL


1194 
	$£q_cmd
(
¨gc
, **
¨gv
)

1196 
˛i_m≠
 *
m
;

1198 
m
 = 
	`˛i_m≠pög
(
£q_m≠
, 
¨gc
, 
¨gv
);

1199 i‡(!
m
)

1200  
	`˛i_cmd_îr‹
("Sequí˚ invÆid comm™d", "Seq", 
¨gc
, 
¨gv
);

1202 
m
->
ödex
) {

1204 11: 
	`£q_1_£t_cmd
(
¨gc
, 
¨gv
); ;

1206 13: 
	`£q_2_£t_cmd
(
¨gc
, 
¨gv
); ;

1207 15: 
	`£q_3_£t_cmd
(
¨gc
, 
¨gv
); ;

1209  
	`˛i_cmd_îr‹
("Sequí˚ invÆid comm™d", "Seq", 
¨gc
, 
¨gv
);

1212 
	}
}

1227 
	$s¸ùt_cmd
(
¨gc
 
__πe_unu£d
, **
¨gv
)

1229 
lua_Sèã
 *
L
 = 
pktgí
.L;

1231 i‡(
L
 =
NULL
) {

1232 
	`pktgí_log_îr‹
("Lua isÇot initialized!");

1236 i‡(
	`is_hñp
(
¨gc
, 
¨gv
)) {

1237 
	`˛i_¥ötf
("\nUßge: %†<s¸ùt-°rög>\n", 
¨gv
[0]);

1241 i‡(
	`luaL_dofûe
(
L
, 
¨gv
[1]) != 0)

1242 
	`pktgí_log_îr‹
("%s", 
	`lua_to°rög
(
L
, -1));

1244 
	}
}

1259 
	$exec_lua_cmd
(
¨gc
 
__πe_unu£d
, **
¨gv
 __rte_unused)

1261 
lua_Sèã
 *
L
 = 
pktgí
.L;

1262 
buff
[512], *
p
;

1263 
i
;

1264 
size_t
 
n
, 
sz
;

1266 i‡(
L
 =
NULL
) {

1267 
	`pktgí_log_îr‹
("Lua isÇot initialized!");

1271 i‡(
	`is_hñp
(
¨gc
, 
¨gv
)) {

1272 
	`˛i_¥ötf
("\nUßge: %†<s¸ùt-°rög>\n", 
¨gv
[0]);

1276 
	`mem£t
(
buff
, 0, (buff));

1277 
sz
 = (
buff
) - 1;

1278 
n
 = 0;

1279 
i
 = 1, 
p
 = 
buff
; i < 
¨gc
; i++) {

1280 i‡((
	`°æí
(
¨gv
[
i
]Ë+ 1Ë> (
sz
 - 
n
)) {

1281 
	`˛i_¥ötf
("InputÜineÅooÜong > 512 bytes\n");

1284 
n
 +
	`¢¥ötf
(&
p
[n], 
sz
 -Ç, "%†", 
¨gv
[
i
]);

1287 i‡(
	`luaL_do°rög
(
L
, 
buff
) != 0)

1288 
	`pktgí_log_îr‹
("%s", 
	`lua_to°rög
(
L
, -1));

1290 
	}
}

1292 
˛i_m≠
 
	gmisc_m≠
[] = {

1306 #ifde‡
INCLUDE_PING6


1309 { -1, 
NULL
 }

1312 c⁄° *
	gmisc_hñp
[] = {

1326 #ifde‡
INCLUDE_PING6


1329 
CLI_HELP_PAUSE
,

1330 
NULL


1334 
	$misc_cmd
(
¨gc
, **
¨gv
)

1336 
˛i_m≠
 *
m
;

1337 
p‹éi°_t
 
p‹éi°
;

1338 
uöt16_t
 
rows
, 
cﬁs
;

1339 *
p
;

1341 
m
 = 
	`˛i_m≠pög
(
misc_m≠
, 
¨gc
, 
¨gv
);

1342 i‡(!
m
)

1343  
	`˛i_cmd_îr‹
("Mis¯övÆid comm™d", "Misc", 
¨gc
, 
¨gv
);

1345 
m
->
ödex
) {

1347 
	`πe_∑r£_p‹éi°
(
¨gv
[1], &
p‹éi°
);

1348 
	`f‹óch_p‹t
(
p‹éi°
,

1349 
	`pktgí_˛ór_°©s
(
öfo
) );

1350 
	`pktgí_˛ór_di•œy
();

1353 
p
 = 
	`°rchr
(
¨gv
[1], 'x');

1354 i‡(
p
) {

1355 
rows
 = 
	`°πﬁ
(++
p
, 
NULL
, 10);

1356 
cﬁs
 = 
	`°πﬁ
(
¨gv
[1], 
NULL
, 10);

1358 
	`pktgí_di•œy_£t_geomëry
(
rows
, 
cﬁs
);

1359 
	`pktgí_˛ór_di•œy
();

1361  
	`˛i_cmd_îr‹
("Mis¯övÆid comm™d", "Misc", 
¨gc
, 
¨gv
);

1364 
	`pktgí_di•œy_gë_geomëry
(&
rows
, &
cﬁs
);

1367 i‡(
	`˛i_execuã_cmdfûe
(
¨gv
[1]) )

1368 
	`˛i_¥ötf
("lﬂd comm™d faûed f‹ %s\n", 
¨gv
[1]);

1369 i‡(!
	`s¸n_is_∑u£d
() )

1370 
	`pktgí_f‹˚_upd©e
();

1372 40: 
	`s¸ùt_cmd
(
¨gc
, 
¨gv
); ;

1373 50: 
	`exec_lua_cmd
(
¨gc
, 
¨gv
); ;

1374 60: 
	`pktgí_ßve
(
¨gv
[1]); ;

1375 70: 
	`pktgí_˛ór_di•œy
(); ;

1377 
	`πe_∑r£_p‹éi°
(
¨gv
[1], &
p‹éi°
);

1378 
	`f‹óch_p‹t
(
p‹éi°
,

1379 
	`pktgí_ª£t
(
öfo
) );

1382 
	`πe_∑r£_p‹éi°
(
¨gv
[1], &
p‹éi°
);

1383 
	`f‹óch_p‹t
(
p‹éi°
,

1384 
	`pktgí_p‹t_ª°¨t
(
öfo
) );

1387 130: 
	`pktgí_£t_p‹t_numbî
(
	`©oi
(
¨gv
[1])); ;

1389 
	`πe_∑r£_p‹éi°
(
¨gv
[1], &
p‹éi°
);

1390 
	`f‹óch_p‹t
(
p‹éi°
, 
	`pktgí_pög4
(
öfo
));

1391 
	`pktgí_f‹˚_upd©e
();

1393 #ifde‡
INCLUDE_PING6


1395 
	`πe_∑r£_p‹éi°
(
¨gv
[1], &
p‹éi°
);

1396 
	`f‹óch_p‹t
(
p‹éi°
, 
	`pktgí_pög6
(
öfo
));

1397 
	`pktgí_upd©e_di•œy
();

1401  
	`˛i_cmd_îr‹
("Mis¯övÆid comm™d", "Misc", 
¨gc
, 
¨gv
);

1404 
	}
}

1406 
˛i_m≠
 
	g∑ge_m≠
[] = {

1409 { -1, 
NULL
 }

1412 c⁄° *
	g∑ge_hñp
[] = {

1428 
CLI_HELP_PAUSE
,

1429 
NULL


1433 
	$∑ge_cmd
(
¨gc
, **
¨gv
)

1435 
˛i_m≠
 *
m
;

1437 
m
 = 
	`˛i_m≠pög
(
∑ge_m≠
, 
¨gc
, 
¨gv
);

1438 i‡(!
m
)

1439  
	`˛i_cmd_îr‹
("PagêövÆid comm™d", "Page", 
¨gc
, 
¨gv
);

1441 
m
->
ödex
) {

1443 11: 
	`pktgí_£t_∑ge
(
¨gv
[1]); ;

1445  
	`˛i_cmd_îr‹
("PagêövÆid comm™d", "Page", 
¨gc
, 
¨gv
);

1448 
	}
}

1454 
hñp_cmd
(
¨gc
, **
¨gv
);

1456 
˛i_åì
 
	gdeÁu…_åì
[] = {

1457 
c_dú
("/pktgen/bin"),

1458 
c_cmd
("hñp", 
hñp_cmd
, "help command"),

1460 
c_cmd
("˛ór", 
misc_cmd
, "clear stats, ..."),

1461 
c_Æüs
("clr", "clearáll stats", "clearállÖort stats"),

1462 
c_cmd
("geomëry", 
misc_cmd
, "setÅhe screen geometry"),

1463 
c_Æüs
("geom", "geometry", "set or show screen geometry"),

1464 
c_cmd
("lﬂd", 
misc_cmd
, "load command file"),

1465 
c_cmd
("s¸ùt", 
misc_cmd
, "runá Lua script"),

1466 
c_cmd
("lua", 
misc_cmd
, "executeá Lua string"),

1467 
c_cmd
("ßve", 
misc_cmd
, "saveÅhe current state"),

1468 
c_cmd
("ªdi•œy", 
misc_cmd
, "redisplayÅhe screen"),

1469 
c_Æüs
("cls", "redisplay", "redraw screen"),

1470 
c_cmd
("ª£t", 
misc_cmd
, "resetÖktgen configuration"),

1471 
c_Æüs
("rst", "resetáll", "resetállÖorts"),

1472 
c_cmd
("ª°¨t", 
misc_cmd
, "restartÖort"),

1473 
c_cmd
("p‹t", 
misc_cmd
, "Switch betweenÖorts"),

1474 
c_cmd
("pög4", 
misc_cmd
, "SendáÖingÖacket for IPv4"),

1475 #ifde‡
INCLUDE_PING6


1476 
c_cmd
("pög6", 
misc_cmd
, "SendáÖingÖacket for IPv6"),

1479 
c_cmd
("£quí˚", 
£q_cmd
, "sequence command"),

1480 
c_Æüs
("seq", "sequence", "sequence command"),

1482 
c_cmd
("∑ge", 
∑ge_cmd
, "changeÖage displays"),

1483 
c_cmd
("theme", 
theme_cmd
, "Set, save, showÅheÅheme"),

1484 
c_cmd
("ønge", 
ønge_cmd
, "Range commands"),

1485 
c_cmd
("íabÀ", 
í_dis_cmd
, "enable features"),

1486 
c_cmd
("dißbÀ", 
í_dis_cmd
, "disable features"),

1487 
c_cmd
("°¨t", 
°¨t_°›_cmd
, "start features"),

1488 
c_cmd
("°›", 
°¨t_°›_cmd
, "stop features"),

1489 
c_Æüs
("str", "startáll", "startállÖorts sendingÖackets"),

1490 
c_Æüs
("stp", "stopáll", "stopállÖorts sendingÖackets"),

1491 
c_cmd
("pˇp", 
pˇp_cmd
, "pcap commands"),

1492 
c_cmd
("£t", 
£t_cmd
, "setáÇumber of options"),

1493 
c_cmd
("dbg", 
dbg_cmd
, "debug commands"),

1495 
c_Æüs
("on", "enable screen","Enable screen updates"),

1496 
c_Æüs
("off", "disable screen", "Disable screen updates"),

1498 
c_íd
()

1502 
	$öô_åì
()

1505 i‡(
	`˛i_deÁu…_åì_öô
())

1509 i‡(
	`˛i_add_åì
(
	`˛i_roŸ_node
(), 
deÁu…_åì
))

1512 
	`˛i_hñp_add
("TôÀ", 
NULL
, 
tôÀ_hñp
);

1513 
	`˛i_hñp_add
("Page", 
∑ge_m≠
, 
∑ge_hñp
);

1514 
	`˛i_hñp_add
("E«bÀ", 
íabÀ_m≠
, 
íabÀ_hñp
);

1515 
	`˛i_hñp_add
("Së", 
£t_m≠
, 
£t_hñp
);

1516 
	`˛i_hñp_add
("R™ge", 
ønge_m≠
, 
ønge_hñp
);

1517 
	`˛i_hñp_add
("Sequí˚", 
£q_m≠
, 
£q_hñp
);

1518 
	`˛i_hñp_add
("PCAP", 
pˇp_m≠
, 
pˇp_hñp
);

1519 
	`˛i_hñp_add
("Sèπ", 
°¨t_m≠
, 
°¨t_hñp
);

1520 
	`˛i_hñp_add
("DBG", 
dbg_m≠
, 
dbg_hñp
);

1521 
	`˛i_hñp_add
("Misc", 
misc_m≠
, 
misc_hñp
);

1522 
	`˛i_hñp_add
("Theme", 
theme_m≠
, 
theme_hñp
);

1523 
	`˛i_hñp_add
("Sètus", 
NULL
, 
°©us_hñp
);

1526 i‡(
	`˛i_add_bö_∑th
("/pktgen/bin"))

1530 
	}
}

1533 
	$my_¥om±
(
c⁄t
 
__πe_unu£d
)

1535  
	`˛i_¥ötf
("Pktgí:%s> ", 
	`˛i_∑th_°rög
(
NULL
, NULL));

1536 
	}
}

1539 
	$pktgí_˛i_¸óã
()

1541 
ªt
 = -1;

1543 i‡(!
	`˛i_¸óã
()) {

1544 i‡(!
	`˛i_£tup_wôh_åì
(
öô_åì
)) {

1545 
	`˛i_£t_¥om±
(
my_¥om±
);

1546 
ªt
 = 0;

1549  
ªt
;

1550 
	}
}

1553 
	$pktgí_˛i_°¨t
()

1555 
	`˛i_°¨t_wôh_timîs
(
NULL
);

1557 
	`˛i_de°roy
();

1558 
	}
}

1573 
	$hñp_cmd
(
¨gc
 
__πe_unu£d
, **
¨gv
 __rte_unused)

1575 
∑u£d
;

1577 
∑u£d
 = 
	`s¸n_is_∑u£d
();

1579 i‡(!
∑u£d
)

1580 
	`s¸n_∑u£
();

1582 
	`s¸n_£tw
(1);

1583 
	`s¸n_˛s
();

1584 
	`s¸n_pos
(1, 1);

1586 
	`˛i_hñp_show_Æl
("** Pktgen Help Information **");

1588 i‡(!
∑u£d
) {

1589 
	`s¸n_£tw
(
pktgí
.
œ°_row
 + 1);

1590 
	`s¸n_ªsume
();

1591 
	`pktgí_˛ór_di•œy
();

1594 
	}
}

	@app/cli-functions.h

9 #i‚de‡
_CLI_COMMANDS_H_


10 
	#_CLI_COMMANDS_H_


	)

12 #ifde‡
__˝lu•lus


16 
pktgí_˛i_¸óã
();

18 
pktgí_˛i_°¨t
();

20 #ifde‡
__˝lu•lus


	@app/lpktgenlib.c

9 
	#Õktgílib_c


	)

10 
	#LUA_LIB


	)

11 
	#lua_c


	)

13 
	~<pg_ëhî.h
>

14 
	~<pg_öë.h
>

15 
	~"Õktgílib.h
"

17 
	~<°döt.h
>

18 
	~<√töë/ö.h
>

20 
	~"pktgí-cmds.h
"

21 
	~<˛i.h
>

22 
	~<πe_√t.h
>

23 
	~<luac⁄f.h
>

24 
	~<lua-sockë.h
>

25 
	~<luÆib.h
>

27 
	~<˛i_hñp.h
>

29 #i‚de‡
__INTEL_COMPILER


30 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wcast-qual"

34 
execuã_lua_°rög
(
lua_Sèã
 *
L
, *
°r
);

35 
dﬁibøry
(
lua_Sèã
 *
L
, c⁄° *
«me
);

37 
pktgí_quô
();

40 
	$pktgí_exô
(
lua_Sèã
 *
L
 
__πe_unu£d
)

42 
	`pktgí_quô
();

44 
	}
}

58 
__ölöe__
 

59 
	$£tf_öãgî
(
lua_Sèã
 *
L
, c⁄° *
«me
, 
lua_I¡egî
 
vÆue
)

61 
	`lua_pushöãgî
(
L
, 
vÆue
);

62 
	`lua_£tfõld
(
L
, -2, 
«me
);

63 
	}
}

78 
__ölöe__
 

79 
	$£tf_fun˘i⁄
(
lua_Sèã
 *
L
, c⁄° *
«me
, 
lua_CFun˘i⁄
 
‚
)

81 
	`lua_pushc˛osuª
(
L
, 
‚
, 0);

82 
	`lua_£tfõld
(
L
, -2, 
«me
);

83 
	}
}

98 
__ölöe__
 

99 
	$£tf_°rög
(
lua_Sèã
 *
L
, c⁄° *
«me
, c⁄° *
vÆue
)

101 
	`lua_push°rög
(
L
, 
vÆue
);

102 
	`lua_£tfõld
(
L
, -2, 
«me
);

103 
	}
}

118 
__ölöe__
 

119 
	$£tf_°rögLí
(
lua_Sèã
 *
L
, c⁄° *
«me
, *
vÆue
, 
Àn
)

121 
	`lua_pushl°rög
(
L
, 
vÆue
, 
Àn
);

122 
	`lua_£tfõld
(
L
, -2, 
«me
);

123 
	}
}

137 
__ölöe__
 

138 
	$£tf_ud©a
(
lua_Sèã
 *
L
, c⁄° *
«me
, *
vÆue
)

140 
	`lua_pushlightu£rd©a
(
L
, 
vÆue
);

141 
	`lua_£tfõld
(
L
, -2, 
«me
);

142 
	}
}

146 
__ölöe__
 

147 
	$gëf_ëhîaddr
(
lua_Sèã
 *
L
, c⁄° *
fõld
, 
ëhî_addr
 *
vÆue
)

149 
	`lua_gëfõld
(
L
, 3, 
fõld
);

150 i‡(
	`lua_is°rög
(
L
, 1) )

151 
	`πe_ëhî_©⁄
(
	`luaL_check°rög
(
L
, -1), 
vÆue
);

152 
	`lua_p›
(
L
, 1);

153 
	}
}

155 
__ölöe__
 

156 
	$gëf_ùaddr
(
lua_Sèã
 *
L
, c⁄° *
fõld
, *
vÆue
, 
uöt32_t
 
Êags
)

158 
	`lua_gëfõld
(
L
, 3, 
fõld
);

159 i‡(
	`lua_is°rög
(
L
, 1) ) {

160 
	`πe_©où
((*)(
uöçå_t
)
	`luaL_check°rög
(
L
, -1), 
Êags
, 
vÆue
,

161 (
pg_ùaddr
));

163 
	`lua_p›
(
L
, 1);

164 
	}
}

166 
__ölöe__
 
uöt32_t


167 
	$gëf_öãgî
(
lua_Sèã
 *
L
, c⁄° *
fõld
)

169 
uöt32_t
 
vÆue
 = 0;

171 
	`lua_gëfõld
(
L
, 3, 
fõld
);

172 i‡(
	`lua_isöãgî
(
L
, 1) )

173 
vÆue
 = 
	`luaL_checköãgî
(
L
, -1);

174 
	`lua_p›
(
L
, 1);

176  
vÆue
;

177 
	}
}

179 
__ölöe__
 *

180 
	$gëf_°rög
(
lua_Sèã
 *
L
, c⁄° *
fõld
)

182 *
vÆue
 = 
NULL
;

184 
	`lua_gëfõld
(
L
, 3, 
fõld
);

185 i‡(
	`lua_is°rög
(
L
, 1) )

186 
vÆue
 = (*)
	`luaL_check°rög
(
L
, -1);

187 
	`lua_p›
(
L
, 1);

189  
vÆue
;

190 
	}
}

205 
	$pktgí_£t
(
lua_Sèã
 *
L
) {

206 
uöt32_t
 
vÆue
;

207 
p‹éi°_t
 
p‹éi°
;

208 *
wh©
;

210 
	`lua_gët›
(
L
) ) {

211 :  
	`luaL_îr‹
(
L
, "set, wrongÇumber ofárguments");

215 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

216 
wh©
 = (*)
	`luaL_check°rög
(
L
, 2);

217 
vÆue
 = 
	`luaL_checknumbî
(
L
, 3);

219 
	`f‹óch_p‹t
(
p‹éi°
, 
	`_do
(

220 i‡(!
	`°rˇ£cmp
(
wh©
, "count"))

221 
	`sögÀ_£t_tx_cou¡
(
öfo
, 
vÆue
);

222 i‡(!
	`°rˇ£cmp
(
wh©
, "size"))

223 
	`sögÀ_£t_pkt_size
(
öfo
, 
vÆue
);

224 i‡(!
	`°rˇ£cmp
(
wh©
, "rate"))

225 
	`sögÀ_£t_tx_øã
(
öfo
, 
	`luaL_check°rög
(
L
, 3));

226 i‡(!
	`°rˇ£cmp
(
wh©
, "burst"))

227 
	`sögÀ_£t_tx_bur°
(
öfo
, 
vÆue
);

228 i‡(!
	`°rˇ£cmp
(
wh©
, "cycles"))

229 
	`debug_£t_tx_cy˛es
(
öfo
, 
vÆue
);

230 i‡(!
	`°rˇ£cmp
(
wh©
, "sport"))

231 
	`sögÀ_£t_p‹t_vÆue
(
öfo
, 
wh©
[0], 
vÆue
);

232 i‡(!
	`°rˇ£cmp
(
wh©
, "dport"))

233 
	`sögÀ_£t_p‹t_vÆue
(
öfo
, 
wh©
[0], 
vÆue
);

234 i‡(!
	`°rˇ£cmp
(
wh©
, "seq_cnt"))

235 
	`pktgí_£t_p‹t_£qC¡
(
öfo
, 
vÆue
);

236 i‡(!
	`°rˇ£cmp
(
wh©
, "seqCnt"))

237 
	`pktgí_£t_p‹t_£qC¡
(
öfo
, 
vÆue
);

238 i‡(!
	`°rˇ£cmp
(
wh©
, "prime"))

239 
	`pktgí_£t_p‹t_¥ime
(
öfo
, 
vÆue
);

240 i‡(!
	`°rˇ£cmp
(
wh©
, "dump"))

241 
	`debug_£t_p‹t_dump
(
öfo
, 
vÆue
);

243  
	`luaL_îr‹
(
L
,

245 
wh©
);

248 
	`pktgí_upd©e_di•œy
();

250 
	}
}

265 
	$£t_£q
(
lua_Sèã
 *
L
, 
uöt32_t
 
£qnum
)

267 
p‹éi°_t
 
p‹éi°
;

268 
uöt32_t
 
pktsize
, 
•‹t
, 
dp‹t
, 
gçu_ãid
;

269 
uöt16_t
 
vœnid
;

270 
uöt8_t
 
cos
, 
tos
;

271 
ëhî_addr
 
daddr
;

272 
ëhî_addr
 
ßddr
;

273 
pg_ùaddr
 
ù_daddr
;

274 
pg_ùaddr
 
ù_ßddr
;

275 *
¥Ÿo
, *
ù
;

277 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 2), &
p‹éi°
);

278 
	`πe_ëhî_©⁄
(
	`luaL_check°rög
(
L
, 3), &
daddr
);

279 
	`πe_ëhî_©⁄
(
	`luaL_check°rög
(
L
, 4), &
ßddr
);

281 
•‹t
 = 
	`luaL_checköãgî
(
L
, 7);

282 
dp‹t
 = 
	`luaL_checköãgî
(
L
, 8);

284 
ù
 = (*)
	`luaL_check°rög
(
L
, 9);

285 i‡(
ù
[3] == '6') {

286 
	`πe_©où
(
	`luaL_check°rög
(
L
, 5), 
PG_IPADDR_V6
,

287 &
ù_daddr
, (
pg_ùaddr
));

288 
	`πe_©où
(
	`luaL_check°rög
(
L
, 6),

289 
PG_IPADDR_NETWORK
 | 
PG_IPADDR_V6
,

290 &
ù_ßddr
, (
pg_ùaddr
));

292 
	`πe_©où
(
	`luaL_check°rög
(
L
, 5), 
PG_IPADDR_V4
,

293 &
ù_daddr
, (
pg_ùaddr
));

294 
	`πe_©où
(
	`luaL_check°rög
(
L
, 6),

295 
PG_IPADDR_NETWORK
 | 
PG_IPADDR_V4
,

296 &
ù_ßddr
, (
pg_ùaddr
));

298 
¥Ÿo
 = (*)
	`luaL_check°rög
(
L
, 10);

299 
vœnid
 = 
	`luaL_checköãgî
(
L
, 11);

300 
pktsize
 = 
	`luaL_checköãgî
(
L
, 12);

301 i‡(
	`lua_gët›
(
L
) == 13)

302 
gçu_ãid
 = 
	`luaL_checköãgî
(
L
, 13);

304 
gçu_ãid
 = 0;

306 
cos
 = 
	`luaL_checköãgî
(
L
, 14);

307 
tos
 = 
	`luaL_checköãgî
(
L
, 15);

309 i‡–(
¥Ÿo
[0] ='i'Ë&& (
ù
[3] == '6') ) {

310 
	`lua_put°rög
("Must use IPv4 with ICMPÅypeÖackets\n");

314 
	`f‹óch_p‹t
(
p‹éi°
,

315 
	`pktgí_£t_£q
(
öfo
, 
£qnum
, &
daddr
, &
ßddr
, &
ù_daddr
,

316 &
ù_ßddr
,

317 
•‹t
, 
dp‹t
, 
ù
[3], 
¥Ÿo
[0], 
vœnid
,

318 
pktsize
, 
gçu_ãid
);

319 
	`pktgí_£t_cos_tos_£q
(
öfo
, 
£qnum
, 
cos
, 
tos
));

321 
	`pktgí_upd©e_di•œy
();

324 
	}
}

339 
	$pktgí_£q
(
lua_Sèã
 *
L
) {

340 
uöt32_t
 
£qnum
;

342 
	`lua_gët›
(
L
) ) {

343 :  
	`luaL_îr‹
(
L
, "seq, wrongÇumber ofárguments");

349 
£qnum
 = 
	`luaL_checköãgî
(
L
, 1);

350 i‡(
£qnum
 >
NUM_SEQ_PKTS
)

353  
	`£t_£q
(
L
, 
£qnum
);

354 
	}
}

369 
	$£t_£qTabÀ
(
lua_Sèã
 *
L
, 
uöt32_t
 
£qnum
)

371 
p‹éi°_t
 
p‹éi°
;

372 
uöt32_t
 
pktSize
, 
•‹t
, 
dp‹t
, 
gçu_ãid
;

373 
uöt16_t
 
vœnid
;

374 
uöt8_t
 
cos
, 
tos
;

375 
ëhî_addr
 
daddr
;

376 
ëhî_addr
 
ßddr
;

377 
pg_ùaddr
 
ù_daddr
;

378 
pg_ùaddr
 
ù_ßddr
;

379 *
ùPrŸo
, *
ëhTy≥
;

381 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 2), &
p‹éi°
);

383 
	`gëf_ëhîaddr
(
L
, "ëh_d°_addr", &
daddr
);

384 
	`gëf_ëhîaddr
(
L
, "ëh_§c_addr", &
ßddr
);

385 
	`gëf_ùaddr
(
L
, "ù_d°_addr", &
ù_daddr
, 
PG_IPADDR_V4
);

386 
	`gëf_ùaddr
(
L
, "ù_§c_addr", &
ù_ßddr
,

387 
PG_IPADDR_NETWORK
 | 
PG_IPADDR_V4
);

389 
•‹t
 = 
	`gëf_öãgî
(
L
, "sport");

390 
dp‹t
 = 
	`gëf_öãgî
(
L
, "dport");

391 
ùPrŸo
 = 
	`gëf_°rög
(
L
, "ipProto");

392 
ëhTy≥
 = 
	`gëf_°rög
(
L
, "ethType");

393 
vœnid
 = 
	`gëf_öãgî
(
L
, "vlanid");

394 
pktSize
 = 
	`gëf_öãgî
(
L
, "pktSize");

395 
cos
 = 
	`gëf_öãgî
(
L
, "cos");

396 
tos
 = 
	`gëf_öãgî
(
L
, "tos");

398 
	`lua_gëfõld
(
L
, 3, "gtpu_teid");

399 i‡(
	`lua_isöãgî
(
L
, -1))

400 
gçu_ãid
 = 
	`luaL_checköãgî
(
L
, -1);

402 
gçu_ãid
 = 0;

403 
	`lua_p›
(
L
, 1);

405 i‡–(
ùPrŸo
[0] ='i'Ë&& (
ëhTy≥
[3] == '6') ) {

406 
	`lua_put°rög
("Must use IPv4 with ICMPÅypeÖackets\n");

410 
	`f‹óch_p‹t
(
p‹éi°
,

411 
	`pktgí_£t_£q
(
öfo
, 
£qnum
, &
daddr
, &
ßddr
, &
ù_daddr
,

412 &
ù_ßddr
,

413 
•‹t
, 
dp‹t
, 
ëhTy≥
[3], 
ùPrŸo
[0],

414 
vœnid
, 
pktSize
, 
gçu_ãid
);

415 
	`pktgí_£t_cos_tos_£q
(
öfo
, 
£qnum
, 
cos
, 
tos
) );

417 
	`pktgí_upd©e_di•œy
();

420 
	}
}

435 
	$pktgí_£qTabÀ
(
lua_Sèã
 *
L
) {

436 
uöt32_t
 
£qnum
;

438 
	`lua_gët›
(
L
) ) {

439 :  
	`luaL_îr‹
(
L
, "seqTable, wrongÇumber ofárguments");

443 
£qnum
 = 
	`luaL_checköãgî
(
L
, 1);

444 i‡(
£qnum
 >
NUM_SEQ_PKTS
)

447  
	`£t_£qTabÀ
(
L
, 
£qnum
);

448 
	}
}

463 
	$pktgí_p‹ts_≥r_∑ge
(
lua_Sèã
 *
L
) {

464 
	`lua_gët›
(
L
) ) {

465 :  
	`luaL_îr‹
(
L
,

470 
	`pktgí_£t_∑ge_size
(
	`luaL_checköãgî
(
L
, 1));

472 
	}
}

487 
	$pktgí_icmp
(
lua_Sèã
 *
L
) {

488 
p‹éi°_t
 
p‹éi°
;

490 
	`lua_gët›
(
L
) ) {

491 :  
	`luaL_îr‹
(
L
, "icmp, wrongÇumber ofárguments");

495 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

496 
	`f‹óch_p‹t
(
p‹éi°
,

497 
	`íabÀ_icmp_echo
(
öfo
,

498 
	`e°©e
((*)
	`luaL_check°rög
(
L
,

501 
	}
}

516 
	$pktgí_£ndARP
(
lua_Sèã
 *
L
) {

517 
p‹éi°_t
 
p‹éi°
;

518 *
wh©
;

520 
	`lua_gët›
(
L
) ) {

521 :  
	`luaL_îr‹
(
L
, "sendARP, wrongÇumber ofárguments");

525 
wh©
 = (*)
	`luaL_check°rög
(
L
, 2);

526 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

527 
	`f‹óch_p‹t
(
p‹éi°
,

528 
	`pktgí_£nd_¨p_ªque°s
(
öfo
,

529 (
wh©
[0] ='g'Ë? 
GRATUITOUS_ARP
 : 0) );

531 
	}
}

546 
	$pktgí_£t_mac
(
lua_Sèã
 *
L
)

548 
p‹éi°_t
 
p‹éi°
;

549 
ëhî_addr
 
mac
;

551 
	`lua_gët›
(
L
) ) {

552 :  
	`luaL_îr‹
(
L
, "set_mac, wrongÇumber ofárguments");

556 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

557 
	`πe_ëhî_©⁄
(
	`luaL_check°rög
(
L
, 2), &
mac
);

559 
	`f‹óch_p‹t
(
p‹éi°
,

560 
	`sögÀ_£t_d°_mac
(
öfo
, &
mac
) );

562 
	`pktgí_upd©e_di•œy
();

564 
	}
}

579 
	$pktgí_macFromAΩ
(
lua_Sèã
 *
L
)

581 *
°©e
;

582 
uöt32_t
 
⁄Off
;

584 
	`lua_gët›
(
L
) ) {

585 :  
	`luaL_îr‹
(
L
,

590 
°©e
 = (*)
	`luaL_check°rög
(
L
, 1);

592 
⁄Off
 = 
	`e°©e
(
°©e
);

594 
	`íabÀ_mac_‰om_¨p
(
⁄Off
);

597 
	}
}

612 
	$pktgí_¥ŸŸy≥
(
lua_Sèã
 *
L
)

614 *
ty≥
;

615 
p‹éi°_t
 
p‹éi°
;

617 
	`lua_gët›
(
L
) ) {

618 :  
	`luaL_îr‹
(
L
, "set_proto, wrongÇumber ofárguments");

622 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

623 
ty≥
 = (*)
	`luaL_check°rög
(
L
, 2);

625 
	`f‹óch_p‹t
(
p‹éi°
,

626 
	`sögÀ_£t_¥Ÿo
(
öfo
, 
ty≥
) );

629 
	}
}

644 
	$pktgí_£t_ù_addr
(
lua_Sèã
 *
L
) {

645 
p‹éi°_t
 
p‹éi°
;

646 
pg_ùaddr
 
ùaddr
;

647 
Êags
;

648 *
ty≥
;

650 
	`lua_gët›
(
L
) ) {

651 :  
	`luaL_îr‹
(
L
, "set_ipaddr, wrongÇumber ofárguments");

655 
ty≥
 = (*)
	`luaL_check°rög
(
L
, 2);

656 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

657 
Êags
 = 
PG_IPADDR_V4
;

658 i‡(
ty≥
[0] == 's')

659 
Êags
 |
PG_IPADDR_NETWORK
;

660 
	`πe_©où
(
	`luaL_check°rög
(
L
, 3), 
Êags
,

661 &
ùaddr
, (
pg_ùaddr
));

663 
	`f‹óch_p‹t
(
p‹éi°
,

664 
	`sögÀ_£t_ùaddr
(
öfo
, 
ty≥
[0], &
ùaddr
) );

666 
	`pktgí_upd©e_di•œy
();

668 
	}
}

683 
	$pktgí_£t_ty≥
(
lua_Sèã
 *
L
)

685 *
ty≥
;

686 
p‹éi°_t
 
p‹éi°
;

688 
	`lua_gët›
(
L
) ) {

689 :  
	`luaL_îr‹
(
L
, "set_type, wrongÇumber ofárguments");

693 
ty≥
 = (*)
	`luaL_check°rög
(
L
, 2);

694 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

696 
	`f‹óch_p‹t
(
p‹éi°
,

697 
	`sögÀ_£t_pkt_ty≥
(
öfo
, 
ty≥
) );

699 
	`pktgí_upd©e_di•œy
();

701 
	}
}

716 
	$pktgí_£nd_pög4
(
lua_Sèã
 *
L
)

718 
p‹éi°_t
 
p‹éi°
;

720 
	`lua_gët›
(
L
) ) {

721 :  
	`luaL_îr‹
(
L
, "ping4, wrongÇumber ofárguments");

725 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

727 
	`f‹óch_p‹t
(
p‹éi°
,

728 
	`pktgí_pög4
(
öfo
) );

731 
	}
}

733 #ifde‡
INCLUDE_PING6


747 
	$pktgí_£nd_pög6
(
lua_Sèã
 *
L
)

749 
p‹éi°_t
 
p‹éi°
;

751 
	`lua_gët›
(
L
) ) {

752 :  
	`luaL_îr‹
(
L
, "ping6, wrongÇumber ofárguments");

756 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

758 
	`f‹óch_p‹t
(
p‹éi°
,

759 
	`pktgí_pög6
(
öfo
) );

762 
	}
}

779 
	$pktgí_pˇp
(
lua_Sèã
 *
L
)

781 
p‹éi°_t
 
p‹éi°
;

782 *
wh©
;

784 
	`lua_gët›
(
L
) ) {

785 :  
	`luaL_îr‹
(
L
, "pcap, wrongÇumber ofárguments");

789 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

790 
wh©
 = (*)
	`luaL_check°rög
(
L
, 2);

792 
	`f‹óch_p‹t
(
p‹éi°
,

793 
	`íabÀ_pˇp
(
öfo
, 
	`e°©e
(
wh©
)) );

796 
	}
}

811 
	$pktgí_°¨t
(
lua_Sèã
 *
L
)

813 
p‹éi°_t
 
p‹éi°
;

815 
	`lua_gët›
(
L
) ) {

816 :  
	`luaL_îr‹
(
L
, "start, wrongÇumber ofárguments");

820 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

822 
	`f‹óch_p‹t
(
p‹éi°
,

823 
	`pktgí_°¨t_å™smôtög
(
öfo
) );

826 
	}
}

841 
	$pktgí_°›
(
lua_Sèã
 *
L
) {

842 
p‹éi°_t
 
p‹éi°
;

844 
	`lua_gët›
(
L
) ) {

845 :  
	`luaL_îr‹
(
L
, "stop, wrongÇumber ofárguments");

849 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

851 
	`f‹óch_p‹t
(
p‹éi°
,

852 
	`pktgí_°›_å™smôtög
(
öfo
) );

854 
	}
}

869 
	$pktgí_s¸n
(
lua_Sèã
 *
L
)

871 
	`lua_gët›
(
L
) ) {

872 :  
	`luaL_îr‹
(
L
, "screen, wrongÇumber ofárguments");

876 
	`pktgí_s¸ìn
(
	`e°©e
((c⁄° *)
	`luaL_check°rög
(
L
, 1)));

878 
	}
}

893 
	$pktgí_¥ime
(
lua_Sèã
 *
L
)

895 
p‹éi°_t
 
p‹éi°
;

897 
	`lua_gët›
(
L
) ) {

898 :  
	`luaL_îr‹
(
L
, "prime, wrongÇumber ofárguments");

902 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

904 
	`f‹óch_p‹t
(
p‹éi°
,

905 
	`pktgí_¥ime_p‹ts
(
öfo
) );

907 
	}
}

909 
__ölöe__
 

910 
	$__dñay
(
öt32_t
 
t
)

912 
öt32_t
 
n
;

914 
t
 > 0) {

915 i‡(
	`˛i_u£_timîs
())

916 
	`πe_timî_m™age
();

917 
n
 = (
t
 > 10) ? 10 :Å;

918 
	`πe_dñay_ms
(
n
);

919 
t
 -
n
;

921 
	}
}

936 
	$pktgí_dñay
(
lua_Sèã
 *
L
)

938 
	`lua_gët›
(
L
) ) {

939 :  
	`luaL_îr‹
(
L
, "delay, wrongÇumber ofárguments");

944 
	`__dñay
(
	`luaL_checköãgî
(
L
, 1));

947 
	}
}

962 
	$pktgí_∑u£
(
lua_Sèã
 *
L
)

964 *
°r
;

966 
	`lua_gët›
(
L
) ) {

967 :  
	`luaL_îr‹
(
L
, "pause, wrongÇumber ofárguments");

971 
°r
 = (*)
	`luaL_check°rög
(
L
, 1);

972 i‡(
	`°æí
(
°r
) > 0)

973 
	`lua_put°rög
(
°r
);

975 
	`__dñay
(
	`luaL_checköãgî
(
L
, 2));

977 
	}
}

992 
	$pktgí_c⁄töue
(
lua_Sèã
 *
L
)

994 
buf
[4], *
°r
;

995 
n
;

997 
	`lua_gët›
(
L
) ) {

998 :  
	`luaL_îr‹
(
L
, "continue, wrongÇumber ofárguments");

1002 
°r
 = (*)
	`luaL_check°rög
(
L
, 1);

1004 i‡(
	`°æí
(
°r
) > 0)

1005 
	`lua_put°rög
(
°r
);

1007 
buf
[0] = '\0';

1008 
n
 = 
	`‰ód
(
buf
, 1, 1, (
FILE
 *)
	`_gë_°dö
(
L
));

1009 i‡(
n
 > 0)

1010 
buf
[
n
] = '\0';

1012 
	`lua_push°rög
(
L
, 
buf
);

1014 
	}
}

1029 
	$pktgí_öput
(
lua_Sèã
 *
L
)

1031 
buf
[256], 
c
, *
°r
;

1032 
uöt32_t
 
n
, 
idx
;

1034 
	`lua_gët›
(
L
) ) {

1035 :  
	`luaL_îr‹
(
L
, "input, wrongÇumber ofárguments");

1039 
°r
 = (*)
	`luaL_check°rög
(
L
, 1);

1041 i‡(
	`°æí
(
°r
) > 0)

1042 
	`lua_put°rög
(
°r
);

1044 
idx
 = 0;

1045 
buf
[
idx
] = '\0';

1046 
idx
 < ((
buf
) - 2) ) {

1047 
n
 = 
	`‰ód
(&
c
, 1, 1, (
FILE
 *)
	`_gë_°dö
(
L
));

1048 i‡–(
n
 <0Ë|| (
c
 == '\r') || (c == '\n') )

1050 
buf
[
idx
++] = 
c
;

1052 
buf
[
idx
] = '\0';

1054 
	`lua_push°rög
(
L
, 
buf
);

1056 
	}
}

1071 
	$pktgí_¶ìp
(
lua_Sèã
 *
L
)

1073 
	`lua_gët›
(
L
) ) {

1074 :  
	`luaL_îr‹
(
L
, "sleep, wrongÇumber ofárguments");

1078 
	`πe_dñay_ms
(
	`luaL_checköãgî
(
L
, 1) * 1000);

1080 
	}
}

1095 
	$pktgí_lﬂd
(
lua_Sèã
 *
L
)

1097 *
∑th
;

1099 
	`lua_gët›
(
L
) ) {

1100 :  
	`luaL_îr‹
(
L
, "load, wrongÇumber ofárguments");

1104 
∑th
 = (*)
	`luaL_check°rög
(
L
, 1);

1106 i‡(
	`˛i_execuã_cmdfûe
(
∑th
) )

1107  
	`luaL_îr‹
(
L
, "lﬂd comm™d faûed f‹ %s\n", 
∑th
);

1109 
	}
}

1124 
	$pktgí_c⁄fig_ßve
(
lua_Sèã
 *
L
)

1126 *
∑th
;

1128 
	`lua_gët›
(
L
) ) {

1129 :  
	`luaL_îr‹
(
L
, "save, wrongÇumber ofárguments");

1133 
∑th
 = (*)
	`luaL_check°rög
(
L
, 1);

1135 i‡(
	`pktgí_ßve
(
∑th
) )

1136  
	`luaL_îr‹
(
L
, "ßvêcomm™d faûed f‹ %s\n", 
∑th
);

1138 
	}
}

1153 
	$pktgí_˛ór
(
lua_Sèã
 *
L
)

1155 
p‹éi°_t
 
p‹éi°
;

1157 
	`lua_gët›
(
L
) ) {

1158 :  
	`luaL_îr‹
(
L
, "clear, wrongÇumber ofárguments");

1162 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

1164 
	`f‹óch_p‹t
(
p‹éi°
,

1165 
	`pktgí_˛ór_°©s
(
öfo
) );

1166 
	`pktgí_upd©e_di•œy
();

1169 
	}
}

1184 
	$pktgí_˛ór_Æl
(
lua_Sèã
 *
L
 
__πe_unu£d
)

1186 
	`f‹Æl_p‹ts
(
	`pktgí_˛ór_°©s
(
öfo
) );

1187 
	`pktgí_upd©e_di•œy
();

1190 
	}
}

1205 
	$pktgí_˛s_s¸ìn
(
lua_Sèã
 *
L
 
__πe_unu£d
)

1207 
	`pktgí_˛ór_di•œy
();

1210 
	}
}

1225 
	$pktgí_upd©e_s¸ìn
(
lua_Sèã
 *
L
 
__πe_unu£d
)

1227 
	`pktgí_upd©e_di•œy
();

1230 
	}
}

1245 
	$pktgí_ª£t_c⁄fig
(
lua_Sèã
 *
L
)

1247 
p‹éi°_t
 
p‹éi°
;

1249 
	`lua_gët›
(
L
) ) {

1250 :  
	`luaL_îr‹
(
L
, "reset, wrongÇumber ofárguments");

1254 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

1256 
	`f‹óch_p‹t
(
p‹éi°
,

1257 
	`pktgí_ª£t
(
öfo
) );

1260 
	}
}

1275 
	$pktgí_ª°¨t
(
lua_Sèã
 *
L
)

1277 
p‹éi°_t
 
p‹éi°
;

1279 
	`lua_gët›
(
L
) ) {

1280 :  
	`luaL_îr‹
(
L
, "reset, wrongÇumber ofárguments");

1284 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

1286 
	`f‹óch_p‹t
(
p‹éi°
,

1287 
	`pktgí_p‹t_ª°¨t
(
öfo
) );

1290 
	}
}

1305 
	$ønge_d°_mac
(
lua_Sèã
 *
L
)

1307 
p‹éi°_t
 
p‹éi°
;

1308 
ëhî_addr
 
mac
;

1310 
	`lua_gët›
(
L
) ) {

1311 :  
	`luaL_îr‹
(
L
, "dst_mac, wrongÇumber ofárguments");

1315 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

1316 
	`πe_ëhî_©⁄
(
	`luaL_check°rög
(
L
, 3), &
mac
);

1318 
	`f‹óch_p‹t
(
p‹éi°
,

1319 
	`ønge_£t_de°_mac
(
öfo
, 
	`luaL_check°rög
(
L
, 2), &
mac
) );

1321 
	`pktgí_upd©e_di•œy
();

1323 
	}
}

1338 
	$ønge_§c_mac
(
lua_Sèã
 *
L
)

1340 
p‹éi°_t
 
p‹éi°
;

1341 
ëhî_addr
 
mac
;

1343 
	`lua_gët›
(
L
) ) {

1344 :  
	`luaL_îr‹
(
L
, "src_mac, wrongÇumber ofárguments");

1348 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

1349 
	`πe_ëhî_©⁄
(
	`luaL_check°rög
(
L
, 3), &
mac
);

1351 
	`f‹óch_p‹t
(
p‹éi°
,

1352 
	`ønge_£t_§c_mac
(
öfo
, 
	`luaL_check°rög
(
L
, 2), &
mac
) );

1354 
	`pktgí_upd©e_di•œy
();

1356 
	}
}

1371 
	$ønge_d°_ù
(
lua_Sèã
 *
L
)

1373 
p‹éi°_t
 
p‹éi°
;

1374 
pg_ùaddr
 
ùaddr
;

1375 *
ty≥
;

1377 
	`lua_gët›
(
L
) ) {

1378 :  
	`luaL_îr‹
(
L
, "dst_ip, wrongÇumber ofárguments");

1382 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

1383 
	`πe_©où
(
	`luaL_check°rög
(
L
, 3), 
PG_IPADDR_V4
,

1384 &
ùaddr
, (
pg_ùaddr
));

1386 
ty≥
 = (*)
	`luaL_check°rög
(
L
, 2);

1387 
	`f‹óch_p‹t
(
p‹éi°
,

1388 
	`ønge_£t_d°_ù
(
öfo
, 
ty≥
, &
ùaddr
) );

1390 
	`pktgí_upd©e_di•œy
();

1392 
	}
}

1407 
	$ønge_§c_ù
(
lua_Sèã
 *
L
)

1409 
p‹éi°_t
 
p‹éi°
;

1410 
pg_ùaddr
 
ùaddr
;

1411 *
ty≥
;

1413 
	`lua_gët›
(
L
) ) {

1414 :  
	`luaL_îr‹
(
L
, "src_ip, wrongÇumber ofárguments");

1418 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

1419 
	`πe_©où
(
	`luaL_check°rög
(
L
, 3), 
PG_IPADDR_V4
,

1420 &
ùaddr
, (ipaddr));

1422 
ty≥
 = (*)
	`luaL_check°rög
(
L
, 2);

1423 
	`f‹óch_p‹t
(
p‹éi°
,

1424 
	`ønge_£t_§c_ù
(
öfo
, 
ty≥
, &
ùaddr
) );

1426 
	`pktgí_upd©e_di•œy
();

1428 
	}
}

1443 
	$ønge_d°_p‹t
(
lua_Sèã
 *
L
)

1445 
p‹éi°_t
 
p‹éi°
;

1447 
	`lua_gët›
(
L
) ) {

1448 :  
	`luaL_îr‹
(
L
, "dst_port, wrongÇumber ofárguments");

1452 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

1454 
	`f‹óch_p‹t
(
p‹éi°
,

1455 
	`ønge_£t_d°_p‹t
(
öfo
, (*)
	`luaL_check°rög
(
L
, 2),

1456 
	`luaL_checköãgî
(
L
, 3)) );

1458 
	`pktgí_upd©e_di•œy
();

1460 
	}
}

1475 
	$ønge_ù_¥Ÿo
(
lua_Sèã
 *
L
)

1477 
p‹éi°_t
 
p‹éi°
;

1478 c⁄° *
ù
;

1480 
	`lua_gët›
(
L
) ) {

1481 :  
	`luaL_îr‹
(
L
, "ip_proto, wrongÇumber ofárguments");

1485 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

1487 
ù
 = 
	`luaL_check°rög
(
L
, 2);

1488 
	`f‹óch_p‹t
(
p‹éi°
,

1489 
	`ønge_£t_¥Ÿo
(
öfo
, 
ù
));

1491 
	`pktgí_upd©e_di•œy
();

1493 
	}
}

1508 
	$ønge_§c_p‹t
(
lua_Sèã
 *
L
)

1510 
p‹éi°_t
 
p‹éi°
;

1512 
	`lua_gët›
(
L
) ) {

1513 :  
	`luaL_îr‹
(
L
, "src_port, wrongÇumber ofárguments");

1517 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

1519 
	`f‹óch_p‹t
(
p‹éi°
,

1520 
	`ønge_£t_§c_p‹t
(
öfo
, (*)
	`luaL_check°rög
(
L
, 2),

1521 
	`luaL_checköãgî
(
L
, 3)));

1523 
	`pktgí_upd©e_di•œy
();

1525 
	}
}

1540 
	$ønge_gçu_ãid
(
lua_Sèã
 *
L
)

1542 
p‹éi°_t
 
p‹éi°
;

1544 
	`lua_gët›
(
L
) ) {

1545 :  
	`luaL_îr‹
(
L
, "GTP-U TEID, wrongÇumber ofárguments");

1549 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

1551 
	`f‹óch_p‹t
(
p‹éi°
,

1552 
	`ønge_£t_gçu_ãid
(
öfo
, (*)
	`luaL_check°rög
(
L
, 2),

1553 
	`luaL_checköãgî
(
L
, 3)));

1555 
	`pktgí_upd©e_di•œy
();

1557 
	}
}

1572 
	$ønge_vœn_id
(
lua_Sèã
 *
L
)

1574 
p‹éi°_t
 
p‹éi°
;

1575 
uöt32_t
 
vœn_id
;

1577 
	`lua_gët›
(
L
) ) {

1578 :  
	`luaL_îr‹
(
L
, "vlan_id, wrongÇumber ofárguments");

1582 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

1583 
vœn_id
 = 
	`luaL_checköãgî
(
L
, 3);

1585 
	`f‹óch_p‹t
(
p‹éi°
,

1586 
	`ønge_£t_vœn_id
(
öfo
, (*)
	`luaL_check°rög
(
L
, 2),

1587 
vœn_id
) );

1589 
	`pktgí_upd©e_di•œy
();

1591 
	}
}

1606 
	$sögÀ_vœn_id
(
lua_Sèã
 *
L
)

1608 
p‹éi°_t
 
p‹éi°
;

1609 
uöt32_t
 
vœnid
;

1611 
	`lua_gët›
(
L
) ) {

1612 :  
	`luaL_îr‹
(
L
, "vlanid, wrongÇumber ofárguments");

1616 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

1617 
vœnid
 = 
	`luaL_checköãgî
(
L
, 2);

1618 i‡–(
vœnid
 < 
MIN_VLAN_ID
Ë|| (vœnid > 
MAX_VLAN_ID
) )

1619 
vœnid
 = 1;

1621 
	`f‹óch_p‹t
(
p‹éi°
,

1622 
	`sögÀ_£t_vœn_id
(
öfo
, 
vœnid
) );

1624 
	`pktgí_upd©e_di•œy
();

1626 
	}
}

1641 
	$sögÀ_cos
(
lua_Sèã
 *
L
) {

1642 
p‹éi°_t
 
p‹éi°
;

1643 
uöt8_t
 
cos
;

1645 
	`lua_gët›
(
L
) ) {

1646 :  
	`luaL_îr‹
(
L
, "cos, wrongÇumber ofárguments");

1650 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

1651 
cos
 = 
	`luaL_checköãgî
(
L
, 2);

1652 i‡(
cos
 > 
MAX_COS
)

1653 
cos
 = 0;

1655 
	`f‹óch_p‹t
(
p‹éi°
,

1656 
	`sögÀ_£t_cos
(
öfo
, 
cos
) );

1658 
	`pktgí_upd©e_di•œy
();

1660 
	}
}

1676 
	$sögÀ_tos
(
lua_Sèã
 *
L
) {

1677 
p‹éi°_t
 
p‹éi°
;

1678 
uöt8_t
 
tos
;

1680 
	`lua_gët›
(
L
) ) {

1681 :  
	`luaL_îr‹
(
L
, "tos, wrongÇumber ofárguments");

1685 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

1686 
tos
 = 
	`luaL_checköãgî
(
L
, 2);

1688 
	`f‹óch_p‹t
(
p‹éi°
,

1689 
	`sögÀ_£t_tos
(
öfo
, 
tos
) );

1691 
	`pktgí_upd©e_di•œy
();

1693 
	}
}

1708 
	$sögÀ_vœn
(
lua_Sèã
 *
L
)

1710 
p‹éi°_t
 
p‹éi°
;

1712 
	`lua_gët›
(
L
) ) {

1713 :  
	`luaL_îr‹
(
L
, "process, wrongÇumber ofárguments");

1717 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

1719 
	`f‹óch_p‹t
(
p‹éi°
,

1720 
	`íabÀ_vœn
(
öfo
,

1721 
	`e°©e
(
	`luaL_check°rög
(
L
, 2))) );

1723 
	`pktgí_upd©e_di•œy
();

1725 
	}
}

1740 
	$ønge_m∂s_íåy
(
lua_Sèã
 *
L
)

1742 
p‹éi°_t
 
p‹éi°
;

1743 
uöt32_t
 
m∂s_íåy
;

1745 
	`lua_gët›
(
L
) ) {

1746 :  
	`luaL_îr‹
(
L
, "mpls_entry, wrongÇumber ofárguments");

1750 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

1751 
m∂s_íåy
 = 
	`°πoul
(
	`luaL_check°rög
(
L
, 2), 
NULL
, 16);

1753 
	`f‹óch_p‹t
(
p‹éi°
,

1754 
	`ønge_£t_m∂s_íåy
(
öfo
, 
m∂s_íåy
) );

1756 
	`pktgí_upd©e_di•œy
();

1758 
	}
}

1773 
	$pktgí_m∂s
(
lua_Sèã
 *
L
)

1775 
p‹éi°_t
 
p‹éi°
;

1777 
	`lua_gët›
(
L
) ) {

1778 :  
	`luaL_îr‹
(
L
, "mpls, wrongÇumber ofárguments");

1782 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

1784 
	`f‹óch_p‹t
(
p‹éi°
,

1785 
	`íabÀ_m∂s
(
öfo
,

1786 
	`e°©e
(
	`luaL_check°rög
(
L
, 2))) );

1788 
	`pktgí_upd©e_di•œy
();

1790 
	}
}

1805 
	$ønge_qöqids
(
lua_Sèã
 *
L
)

1807 
p‹éi°_t
 
p‹éi°
;

1808 
uöt32_t
 
qöq_id1
, 
qöq_id2
;

1810 
	`lua_gët›
(
L
) ) {

1811 :  
	`luaL_îr‹
(
L
, "qinqids, wrongÇumber ofárguments");

1815 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

1816 
qöq_id1
 = 
	`luaL_checköãgî
(
L
, 2);

1817 i‡–(
qöq_id1
 < 
MIN_VLAN_ID
Ë|| (qöq_id1 > 
MAX_VLAN_ID
) )

1818 
qöq_id1
 = 1;

1820 
qöq_id2
 = 
	`luaL_checköãgî
(
L
, 3);

1821 i‡–(
qöq_id2
 < 
MIN_VLAN_ID
Ë|| (qöq_id2 > 
MAX_VLAN_ID
) )

1822 
qöq_id2
 = 1;

1824 
	`f‹óch_p‹t
(
p‹éi°
,

1825 
	`sögÀ_£t_qöqids
(
öfo
, 
qöq_id1
, 
qöq_id2
) );

1827 
	`pktgí_upd©e_di•œy
();

1829 
	}
}

1844 
	$pktgí_qöq
(
lua_Sèã
 *
L
)

1846 
p‹éi°_t
 
p‹éi°
;

1848 
	`lua_gët›
(
L
) ) {

1849 :  
	`luaL_îr‹
(
L
, "qinq, wrongÇumber ofárguments");

1853 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

1855 
	`f‹óch_p‹t
(
p‹éi°
,

1856 
	`íabÀ_qöq
(
öfo
,

1857 
	`e°©e
(
	`luaL_check°rög
(
L
, 2))) );

1859 
	`pktgí_upd©e_di•œy
();

1861 
	}
}

1876 
	$ønge_gª_key
(
lua_Sèã
 *
L
)

1878 
p‹éi°_t
 
p‹éi°
;

1879 
uöt32_t
 
gª_key
;

1881 
	`lua_gët›
(
L
) ) {

1882 :  
	`luaL_îr‹
(
L
, "gre_key, wrongÇumber ofárguments");

1886 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

1887 
gª_key
 = 
	`luaL_checköãgî
(
L
, 2);

1889 
	`f‹óch_p‹t
(
p‹éi°
,

1890 
	`ønge_£t_gª_key
(
öfo
, 
gª_key
) );

1892 
	`pktgí_upd©e_di•œy
();

1894 
	}
}

1909 
	$pktgí_gª
(
lua_Sèã
 *
L
) {

1910 
p‹éi°_t
 
p‹éi°
;

1912 
	`lua_gët›
(
L
) ) {

1913 :  
	`luaL_îr‹
(
L
, "gre, wrongÇumber ofárguments");

1917 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

1919 
	`f‹óch_p‹t
(
p‹éi°
,

1920 
	`íabÀ_gª
(
öfo
, 
	`e°©e
(
	`luaL_check°rög
(
L
, 2))) );

1922 
	`pktgí_upd©e_di•œy
();

1924 
	}
}

1939 
	$pktgí_gª_ëh
(
lua_Sèã
 *
L
)

1941 
p‹éi°_t
 
p‹éi°
;

1943 
	`lua_gët›
(
L
) ) {

1944 :  
	`luaL_îr‹
(
L
, "gre_eth, wrongÇumber ofárguments");

1948 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

1950 
	`f‹óch_p‹t
(
p‹éi°
,

1951 
	`íabÀ_gª_ëh
(
öfo
, 
	`e°©e
(
	`luaL_check°rög
(
L
,

1954 
	`pktgí_upd©e_di•œy
();

1956 
	}
}

1971 
	$ønge_pkt_size
(
lua_Sèã
 *
L
)

1973 
p‹éi°_t
 
p‹éi°
;

1974 
uöt32_t
 
size
;

1975 *
ty≥
;

1977 
	`lua_gët›
(
L
) ) {

1978 :  
	`luaL_îr‹
(
L
, "pkt_size, wrongÇumber ofárguments");

1982 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

1983 
ty≥
 = (*)
	`luaL_check°rög
(
L
, 2);

1984 
size
 = 
	`luaL_checköãgî
(
L
, 3);

1986 
	`f‹óch_p‹t
(
p‹éi°
,

1987 
	`ønge_£t_pkt_size
(
öfo
, 
ty≥
, 
size
) );

1989 
	`pktgí_upd©e_di•œy
();

1991 
	}
}

2006 
	$ønge
(
lua_Sèã
 *
L
)

2008 
p‹éi°_t
 
p‹éi°
;

2010 
	`lua_gët›
(
L
) ) {

2011 :  
	`luaL_îr‹
(
L
, "range, wrongÇumber ofárguments");

2015 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

2017 
	`f‹óch_p‹t
(
p‹éi°
,

2018 
	`íabÀ_ønge
(
öfo
, 
	`e°©e
((c⁄° *)
	`luaL_check°rög
(
L
, 2))));

2020 
	`pktgí_upd©e_di•œy
();

2022 
	}
}

2037 
	$pktgí_œãncy
(
lua_Sèã
 *
L
)

2039 
p‹éi°_t
 
p‹éi°
;

2041 
	`lua_gët›
(
L
) ) {

2042 :  
	`luaL_îr‹
(
L
, "latency, wrongÇumber ofárguments");

2046 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

2048 
	`f‹óch_p‹t
(
p‹éi°
,

2049 
	`íabÀ_œãncy
(
öfo
, 
	`e°©e
((c⁄° *)
	`luaL_check°rög
(
L
, 2))));

2051 
	`pktgí_upd©e_di•œy
();

2053 
	}
}

2068 
	$pktgí_jôãr
(
lua_Sèã
 *
L
)

2070 
p‹éi°_t
 
p‹éi°
;

2072 
	`lua_gët›
(
L
) ) {

2073 :  
	`luaL_îr‹
(
L
, "jitter, wrongÇumber ofárguments");

2077 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

2079 
	`f‹óch_p‹t
(
p‹éi°
,

2080 
	`sögÀ_£t_jôãr
(
öfo
, 
	`luaL_checköãgî
(
L
, 2)) );

2082 
	`pktgí_upd©e_di•œy
();

2084 
	}
}

2099 
	$pktgí_∑âîn
(
lua_Sèã
 *
L
)

2101 
p‹éi°_t
 
p‹éi°
;

2103 
	`lua_gët›
(
L
) ) {

2104 :  
	`luaL_îr‹
(
L
, "pattern, wrongÇumber ofárguments");

2108 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

2110 
	`f‹óch_p‹t
(
p‹éi°
,

2111 
	`∑âîn_£t_ty≥
(
öfo
,

2112 (*)
	`luaL_check°rög
(
L
, 2)) );

2114 
	`pktgí_upd©e_di•œy
();

2116 
	}
}

2131 
	$pktgí_u£r_∑âîn
(
lua_Sèã
 *
L
)

2133 
p‹éi°_t
 
p‹éi°
;

2135 
	`lua_gët›
(
L
) ) {

2136 :  
	`luaL_îr‹
(
L
,

2141 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

2143 
	`f‹óch_p‹t
(
p‹éi°
,

2144 
	`∑âîn_£t_u£r_∑âîn
(
öfo
, (*)
	`luaL_check°rög
(
L
, 2)) );

2146 
	`pktgí_upd©e_di•œy
();

2148 
	}
}

2163 
	$pktgí_∑ge
(
lua_Sèã
 *
L
)

2165 
	`lua_gët›
(
L
) ) {

2166 :  
	`luaL_îr‹
(
L
, "page, wrongÇumber ofárguments");

2170 
	`pktgí_£t_∑ge
((*)
	`luaL_check°rög
(
L
, 1));

2172 
	}
}

2187 
	$pktgí_p‹t
(
lua_Sèã
 *
L
)

2189 
	`lua_gët›
(
L
) ) {

2190 :  
	`luaL_îr‹
(
L
, "port, wrongÇumber ofárguments");

2194 
	`pktgí_£t_p‹t_numbî
(
	`luaL_checköãgî
(
L
, 1));

2196 
	}
}

2211 
	$pktgí_¥o˚ss
(
lua_Sèã
 *
L
)

2213 
p‹éi°_t
 
p‹éi°
;

2215 
	`lua_gët›
(
L
) ) {

2216 :  
	`luaL_îr‹
(
L
, "process, wrongÇumber ofárguments");

2220 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

2222 
	`f‹óch_p‹t
(
p‹éi°
,

2223 
	`íabÀ_¥o˚ss
(
öfo
, 
	`e°©e
((c⁄° *)
	`luaL_check°rög
(
L
, 2))));

2225 
	`pktgí_upd©e_di•œy
();

2227 
	}
}

2242 
	$pktgí_ˇ±uª
(
lua_Sèã
 *
L
)

2244 
p‹éi°_t
 
p‹éi°
;

2246 
	`lua_gët›
(
L
) ) {

2247 :  
	`luaL_îr‹
(
L
, "capture, wrongÇumber ofárguments");

2251 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

2253 
	`f‹óch_p‹t
(
p‹éi°
,

2254 
	`íabÀ_ˇ±uª
(
öfo
, 
	`e°©e
((c⁄° *)
	`luaL_check°rög
(
L
, 2))) );

2256 
	`pktgí_upd©e_di•œy
();

2258 
	}
}

2273 
	$pktgí_b⁄dög
(
lua_Sèã
 *
L
)

2275 
p‹éi°_t
 
p‹éi°
;

2277 
	`lua_gët›
(
L
) ) {

2278 :  
	`luaL_îr‹
(
L
, "bonding, wrongÇumber ofárguments");

2282 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

2284 
	`f‹óch_p‹t
(
p‹éi°
,

2285 
	`íabÀ_b⁄dög
(
öfo
, 
	`e°©e
((c⁄° *)
	`luaL_check°rög
(
L
, 2))) );

2287 
	`pktgí_upd©e_di•œy
();

2289 
	}
}

2304 
	$pktgí_rxèp
(
lua_Sèã
 *
L
)

2306 
p‹éi°_t
 
p‹éi°
;

2308 
	`lua_gët›
(
L
) ) {

2309 :  
	`luaL_îr‹
(
L
, "rxtap, wrongÇumber ofárguments");

2313 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

2315 
	`f‹óch_p‹t
(
p‹éi°
,

2316 
	`íabÀ_rx_èp
(
öfo
, 
	`e°©e
((*)
	`luaL_check°rög
(
L
, 2))));

2318 
	`pktgí_upd©e_di•œy
();

2320 
	}
}

2335 
	$pktgí_txèp
(
lua_Sèã
 *
L
)

2337 
p‹éi°_t
 
p‹éi°
;

2339 
	`lua_gët›
(
L
) ) {

2340 :  
	`luaL_îr‹
(
L
, "txtap, wrongÇumber ofárguments");

2344 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

2346 
	`f‹óch_p‹t
(
p‹éi°
,

2347 
	`íabÀ_tx_èp
(
öfo
, 
	`e°©e
((*)
	`luaL_check°rög
(
L
, 2))));

2349 
	`pktgí_upd©e_di•œy
();

2351 
	}
}

2366 
	$pktgí_g¨p
(
lua_Sèã
 *
L
)

2368 
p‹éi°_t
 
p‹éi°
;

2370 
	`lua_gët›
(
L
) ) {

2371 :  
	`luaL_îr‹
(
L
, "process, wrongÇumber ofárguments");

2375 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

2377 
	`f‹óch_p‹t
(
p‹éi°
,

2378 
	`íabÀ_g¨p
(
öfo
, 
	`e°©e
((c⁄° *)
	`luaL_check°rög
(
L
, 2))));

2380 
	`pktgí_upd©e_di•œy
();

2382 
	}
}

2397 
	$pktgí_blök
(
lua_Sèã
 *
L
)

2399 
p‹éi°_t
 
p‹éi°
;

2401 
	`lua_gët›
(
L
) ) {

2402 :  
	`luaL_îr‹
(
L
, "blink, wrongÇumber ofárguments");

2406 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

2408 
	`f‹óch_p‹t
(
p‹éi°
,

2409 
	`debug_blök
(
öfo
, 
	`e°©e
((c⁄° *)
	`luaL_check°rög
(
L
, 2))));

2411 i‡(
pktgí
.
blökli°
)

2412 
pktgí
.
Êags
 |
BLINK_PORTS_FLAG
;

2414 
pktgí
.
Êags
 &~
BLINK_PORTS_FLAG
;

2415 
	`pktgí_upd©e_di•œy
();

2418 
	}
}

2433 
	$isSídög
(
lua_Sèã
 *
L
, 
p‹t_öfo_t
 *
öfo
)

2435 
	`lua_pushöãgî
(
L
, 
öfo
->
pid
);

2436 
	`lua_push°rög
(
L
, 
	`pktgí_p‹t_å™smôtög
(
öfo
->
pid
) ? "y" : "n");

2439 
	`lua_øw£t
(
L
, -3);

2440 
	}
}

2455 
	$pktgí_isSídög
(
lua_Sèã
 *
L
)

2457 
p‹éi°_t
 
p‹éi°
;

2458 
uöt32_t
 
n
;

2460 
	`lua_gët›
(
L
) ) {

2461 :  
	`luaL_îr‹
(
L
, "isSending, wrongÇumber ofárguments");

2465 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

2467 
	`lua_√wèbÀ
(
L
);

2469 
n
 = 0;

2470 
	`f‹óch_p‹t
(
p‹éi°
,

2471 
	`_do
(
	`isSídög
(
L
, 
öfo
); 
n
++) );

2473 
	`£tf_öãgî
(
L
, "n", 
n
);

2476 
	}
}

2491 
	$lök_°©e
(
lua_Sèã
 *
L
, 
p‹t_öfo_t
 *
öfo
)

2493 
buff
[32];

2495 
	`lua_pushöãgî
(
L
, 
öfo
->
pid
);

2496 
	`lua_push°rög
(
L
, 
	`pktgí_lök_°©e
(
öfo
->
pid
, 
buff
, (buff)));

2499 
	`lua_øw£t
(
L
, -3);

2500 
	}
}

2515 
	$pktgí_lökSèã
(
lua_Sèã
 *
L
)

2517 
p‹éi°_t
 
p‹éi°
;

2518 
uöt32_t
 
n
;

2520 
	`lua_gët›
(
L
) ) {

2521 :  
	`luaL_îr‹
(
L
, "linkState, wrongÇumber ofárguments");

2525 
p‹éi°
 = 0;

2526 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

2528 
	`lua_√wèbÀ
(
L
);

2530 
n
 = 0;

2531 
	`f‹óch_p‹t
(
p‹éi°
,

2532 
	`_do
(
	`lök_°©e
(
L
, 
öfo
); 
n
++) );

2534 
	`£tf_öãgî
(
L
, "n", 
n
);

2537 
	}
}

2552 
	$p‹t_sizes
(
lua_Sèã
 *
L
, 
p‹t_öfo_t
 *
öfo
)

2554 
p‹t_sizes_t
 
sizes
;

2556 
	`pktgí_p‹t_sizes
(
öfo
->
pid
, &
sizes
);

2558 
	`lua_pushöãgî
(
L
, 
öfo
->
pid
);

2559 
	`lua_√wèbÀ
(
L
);

2561 
	`£tf_öãgî
(
L
, "ru¡", 
sizes
.
ru¡
);

2562 
	`£tf_öãgî
(
L
, "_64", 
sizes
.
_64
);

2563 
	`£tf_öãgî
(
L
, "_65_127", 
sizes
.
_65_127
);

2564 
	`£tf_öãgî
(
L
, "_128_255", 
sizes
.
_128_255
);

2565 
	`£tf_öãgî
(
L
, "_256_511", 
sizes
.
_256_511
);

2566 
	`£tf_öãgî
(
L
, "_512_1023", 
sizes
.
_512_1023
);

2567 
	`£tf_öãgî
(
L
, "_1024_1518", 
sizes
.
_1024_1518
);

2568 
	`£tf_öãgî
(
L
, "jumbo", 
sizes
.
jumbo
);

2569 
	`£tf_öãgî
(
L
, "brﬂdˇ°", 
sizes
.
brﬂdˇ°
);

2570 
	`£tf_öãgî
(
L
, "mu…iˇ°", 
sizes
.
mu…iˇ°
);

2573 
	`lua_øw£t
(
L
, -3);

2574 
	}
}

2589 
	$pktgí_p‹tSizes
(
lua_Sèã
 *
L
)

2591 
p‹éi°_t
 
p‹éi°
;

2592 
uöt32_t
 
n
;

2594 
	`lua_gët›
(
L
) ) {

2595 :  
	`luaL_îr‹
(
L
, "portSizes, wrongÇumber ofárguments");

2599 
p‹éi°
 = 0;

2600 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

2602 
	`lua_√wèbÀ
(
L
);

2604 
n
 = 0;

2605 
	`f‹óch_p‹t
(
p‹éi°
,

2606 
	`_do
(
	`p‹t_sizes
(
L
, 
öfo
); 
n
++) );

2608 
	`£tf_öãgî
(
L
, "n", 
n
);

2611 
	}
}

2626 
	$pkt_°©s
(
lua_Sèã
 *
L
, 
p‹t_öfo_t
 *
öfo
)

2628 
ëhî_addr
 
ëhaddr
;

2629 
mac_buf
[32];

2630 
pkt_°©s_t
 
°©s
;

2631 
uöt64_t
 
avg_œt
, 
ticks
, 
jôãr
;

2632 
uöt32_t
 
Êags
 = 
	`πe_©omic32_ªad
(&
öfo
->
p‹t_Êags
);

2634 
	`pktgí_pkt_°©s
(
öfo
->
pid
, &
°©s
);

2636 
	`lua_pushöãgî
(
L
, 
öfo
->
pid
);

2637 
	`lua_√wèbÀ
(
L
);

2639 
	`£tf_öãgî
(
L
, "¨p_pkts", 
°©s
.
¨p_pkts
);

2640 
	`£tf_öãgî
(
L
, "echo_pkts", 
°©s
.
echo_pkts
);

2641 
	`£tf_öãgî
(
L
, "ù_pkts", 
°©s
.
ù_pkts
);

2642 
	`£tf_öãgî
(
L
, "ùv6_pkts", 
°©s
.
ùv6_pkts
);

2643 
	`£tf_öãgî
(
L
, "vœn_pkts", 
°©s
.
vœn_pkts
);

2644 
	`£tf_öãgî
(
L
, "dr›≥d_pkts", 
°©s
.
dr›≥d_pkts
);

2645 
	`£tf_öãgî
(
L
, "unknown_pkts", 
°©s
.
unknown_pkts
);

2646 
	`£tf_öãgî
(
L
, "tx_Áûed", 
°©s
.
tx_Áûed
);

2648 
	`πe_ëh_maˇddr_gë
(
öfo
->
pid
, &
ëhaddr
);

2650 
	`ëhî_f‹m©_addr
(
mac_buf
, (mac_buf), &
ëhaddr
);

2651 
	`£tf_°rög
(
L
, "mac_addr", 
mac_buf
);

2653 
avg_œt
 = 0;

2654 
jôãr
 = 0;

2655 i‡(
Êags
 & 
SEND_LATENCY_PKTS
) {

2656 
ticks
 = 
	`πe_gë_timî_hz
() / 1000000;

2657 i‡(
ticks
 == 0)

2658 
	`¥ötf
("Tick†%lu\n", 
ticks
);

2659 i‡(
öfo
->
œãncy_nb_pkts
 > 0) {

2660 
avg_œt
 = (
öfo
->
avg_œãncy
 / info->
œãncy_nb_pkts
Ë/ 
ticks
;

2661 i‡(
avg_œt
 > 
öfo
->
max_œãncy
)

2662 
öfo
->
max_œãncy
 = 
avg_œt
;

2663 i‡(
öfo
->
mö_œãncy
 == 0)

2664 
öfo
->
mö_œãncy
 = 
avg_œt
;

2665 i‡(
avg_œt
 < 
öfo
->
mö_œãncy
)

2666 
öfo
->
mö_œãncy
 = 
avg_œt
;

2667 
jôãr
 = (
öfo
->
jôãr_cou¡
 * 100Ë/ info->
œãncy_nb_pkts
;

2668 
öfo
->
œãncy_nb_pkts
 = 0;

2669 
öfo
->
avg_œãncy
 = 0;

2670 
öfo
->
jôãr_cou¡
 = 0;

2672 
	`¥ötf
("L©ícyÖkàcou¡ = %d\n", 
öfo
->
œãncy_nb_pkts
);

2675 
	`£tf_öãgî
(
L
, "avg_œãncy", 
avg_œt
);

2676 
	`£tf_öãgî
(
L
, "max_œãncy", 
öfo
->
max_œãncy
);

2677 
	`£tf_öãgî
(
L
, "mö_œãncy", 
öfo
->
mö_œãncy
);

2678 
	`£tf_öãgî
(
L
, "jôãr_cou¡", 
jôãr
);

2682 
	`lua_øw£t
(
L
, -3);

2683 
	}
}

2698 
	$pktgí_pktSèts
(
lua_Sèã
 *
L
)

2700 
p‹éi°_t
 
p‹éi°
;

2701 
uöt32_t
 
n
;

2703 
	`lua_gët›
(
L
) ) {

2704 :  
	`luaL_îr‹
(
L
, "pktStats, wrongÇumber ofárguments");

2708 
p‹éi°
 = 0;

2709 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

2711 
	`lua_√wèbÀ
(
L
);

2713 
n
 = 0;

2714 
	`f‹óch_p‹t
(
p‹éi°
,

2715 
	`_do
(
	`pkt_°©s
(
L
, 
öfo
); 
n
++) );

2717 
	`£tf_öãgî
(
L
, "n", 
n
);

2720 
	}
}

2735 
	$p‹t_°©s
(
lua_Sèã
 *
L
, 
p‹t_öfo_t
 *
öfo
, *
ty≥
)

2737 
ëh_°©s_t
 
°©s
;

2739 
	`pktgí_p‹t_°©s
(
öfo
->
pid
, 
ty≥
, &
°©s
);

2741 
	`lua_pushöãgî
(
L
, 
öfo
->
pid
);

2742 
	`lua_√wèbÀ
(
L
);

2744 
	`£tf_öãgî
(
L
, "ùackës", 
°©s
.
ùackës
);

2745 
	`£tf_öãgî
(
L
, "›ackës", 
°©s
.
›ackës
);

2746 
	`£tf_öãgî
(
L
, "ibyãs", 
°©s
.
ibyãs
);

2747 
	`£tf_öãgî
(
L
, "obyãs", 
°©s
.
obyãs
);

2748 
	`£tf_öãgî
(
L
, "õº‹s", 
°©s
.
õº‹s
);

2749 
	`£tf_öãgî
(
L
, "€º‹s", 
°©s
.
€º‹s
);

2750 
	`£tf_öãgî
(
L
, "rx_nombuf", 
°©s
.
rx_nombuf
);

2752 i‡(
	`°rcmp
(
ty≥
, "rate") == 0) {

2753 
	`£tf_öãgî
(
L
, "pkts_rx", 
°©s
.
ùackës
);

2754 
	`£tf_öãgî
(
L
, "pkts_tx", 
°©s
.
›ackës
);

2755 
	`£tf_öãgî
(
L
, "mbôs_rx", 
	`iBôsTŸÆ
(
°©s
Ë/ 
Mûli⁄
);

2756 
	`£tf_öãgî
(
L
, "mbôs_tx", 
	`oBôsTŸÆ
(
°©s
Ë/ 
Mûli⁄
);

2760 
	`lua_øw£t
(
L
, -3);

2761 
	}
}

2776 
	$pktgí_p‹tSèts
(
lua_Sèã
 *
L
)

2778 
p‹éi°_t
 
p‹éi°
;

2779 
uöt32_t
 
n
;

2780 *
ty≥
;

2782 
	`lua_gët›
(
L
) ) {

2783 :  
	`luaL_îr‹
(
L
, "portStats, wrongÇumber ofárguments");

2788 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

2789 
ty≥
 = (*)
	`luaL_check°rög
(
L
, 2);

2791 
	`lua_√wèbÀ
(
L
);

2793 
n
 = 0;

2794 
	`f‹óch_p‹t
(
p‹éi°
,

2795 
	`_do
(
	`p‹t_°©s
(
L
, 
öfo
, 
ty≥
); 
n
++) );

2797 
	`£tf_öãgî
(
L
, "n", 
n
);

2800 
	}
}

2803 
	$_pktgí_push_löe
(*
¨g
, c⁄° **
h
)

2805 
lua_Sèã
 *
L
 = 
¨g
;

2806 
j
;

2808 
j
 = 0; 
h
[j] !
NULL
; j++) {

2809 i‡(
	`°rcmp
(
h
[
j
], 
CLI_HELP_PAUSE
)) {

2810 
	`lua_push°rög
(
L
, 
h
[
j
]);

2811 
	`lua_c⁄ˇt
(
L
, 2);

2814 
	}
}

2829 
	$pktgí_hñp
(
lua_Sèã
 *
L
)

2831 
	`lua_c⁄ˇt
(
L
, 0);

2833 
	`˛i_hñp_f‹óch
(
_pktgí_push_löe
, 
L
);

2836 
	}
}

2851 
	$pktgí_compûe
(
lua_Sèã
 *
L
)

2853 
uöt32_t
 
£qnum
;

2855 
	`lua_gët›
(
L
) ) {

2856 :  
	`luaL_îr‹
(
L
, "compile, wrongÇumber ofárguments");

2860 
£qnum
 = 
	`luaL_checköãgî
(
L
, 1);

2861 i‡(
£qnum
 >
NUM_SEQ_PKTS
)

2864  
	`£t_£qTabÀ
(
L
, 
£qnum
);

2865 
	}
}

2880 
	$decompûe_pkt
(
lua_Sèã
 *
L
, 
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
£qnum
)

2882 
buff
[128];

2883 
pkt_£q_t
 *
p
;

2885 
p
 = &
öfo
->
£q_pkt
[
£qnum
];

2887 
	`lua_pushöãgî
(
L
, 
öfo
->
pid
);

2888 
	`lua_√wèbÀ
(
L
);

2891 
	`£tf_°rög
(
L
, "eth_dst_addr",

2892 
	`öë_mtﬂ
(
buff
, (buff), &
p
->
ëh_d°_addr
));

2893 
	`£tf_°rög
(
L
, "eth_src_addr",

2894 
	`öë_mtﬂ
(
buff
, (buff), &
p
->
ëh_§c_addr
));

2895 i‡(
p
->
ëhTy≥
 =
ETHER_TYPE_IPv4
) {

2896 
	`£tf_°rög
(
L
, "ip_dst_addr",

2897 
	`öë_¡›4
(
buff
, (buff),

2898 
	`ht⁄l
(
p
->
ù_d°_addr
.
addr
.
ùv4
.
s_addr
),

2900 
	`£tf_°rög
(
L
, "ip_src_addr",

2901 
	`öë_¡›4
(
buff
, (buff),

2902 
	`ht⁄l
(
p
->
ù_d°_addr
.
addr
.
ùv4
.
s_addr
),

2903 
p
->
ù_mask
));

2905 
	`£tf_°rög
(
L
, "ip_dst_addr",

2906 
	`öë_¡›6
(
buff
, (buff),

2907 
p
->
ù_d°_addr
.
addr
.
ùv6
.
s6_addr
));

2908 
	`£tf_°rög
(
L
, "ip_src_addr",

2909 
	`öë_¡›6
(
buff
, (buff),

2910 
p
->
ù_d°_addr
.
addr
.
ùv6
.
s6_addr
));

2912 
	`£tf_öãgî
(
L
, "dp‹t", 
p
->
dp‹t
);

2913 
	`£tf_öãgî
(
L
, "•‹t", 
p
->
•‹t
);

2914 
	`£tf_öãgî
(
L
, "vœnid", 
p
->
vœnid
);

2915 
	`£tf_öãgî
(
L
, "cos", 
p
->
cos
);

2916 
	`£tf_öãgî
(
L
, "tos", 
p
->
tos
);

2917 
	`£tf_°rög
(
L
,

2920 (
p
->
ëhTy≥
 =
ETHER_TYPE_IPv4
) ? "ipv4" :

2921 (
p
->
ëhTy≥
 =
ETHER_TYPE_IPv6
) ? "ipv6" :

2922 (
p
->
ëhTy≥
 ==

2923 
ETHER_TYPE_VLAN
) ? "vlan" : "unknown"));

2924 
	`£tf_°rög
(
L
, "ipProto", (*)(

2925 (
p
->
ùPrŸo
 =
PG_IPPROTO_TCP
) ? "tcp" :

2926 (
p
->
ùPrŸo
 =
PG_IPPROTO_ICMP
) ? "icmp" : "udp"));

2928 
	`£tf_öãgî
(
L
, "pktSize", 
p
->
pktSize
 + 
FCS_SIZE
);

2929 
	`£tf_öãgî
(
L
, "gçu_ãid", 
p
->
gçu_ãid
);

2932 
	`lua_øw£t
(
L
, -3);

2933 
	}
}

2948 
	$pktgí_decompûe
(
lua_Sèã
 *
L
)

2950 
p‹éi°_t
 
p‹éi°
;

2951 
uöt32_t
 
£qnum
, 
n
;

2953 
	`lua_gët›
(
L
) ) {

2954 :  
	`luaL_îr‹
(
L
, "decompile, wrongÇumber ofárguments");

2958 
£qnum
 = 
	`luaL_checköãgî
(
L
, 1);

2959 i‡(
£qnum
 >
NUM_SEQ_PKTS
)

2961 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 2), &
p‹éi°
);

2963 
	`lua_√wèbÀ
(
L
);

2965 
n
 = 0;

2966 
	`f‹óch_p‹t
(
p‹éi°
,

2967 
	`_do
(
	`decompûe_pkt
(
L
, 
öfo
, 
£qnum
); 
n
++) );

2969 
	`£tf_öãgî
(
L
, "n", 
n
);

2972 
	}
}

2987 
	$pktgí_£ndPkt
(
lua_Sèã
 *
L
)

2989 
p‹éi°_t
 
p‹éi°
;

2990 
uöt32_t
 
£qnum
;

2992 
	`lua_gët›
(
L
) ) {

2993 :  
	`luaL_îr‹
(
L
, "sendPkt, wrongÇumber ofárguments");

2997 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

2999 
£qnum
 = 
	`luaL_checköãgî
(
L
, 2);

3000 i‡–(
£qnum
 >
NUM_EXTRA_TX_PKTS
Ë|| (
p‹éi°
 == 0) )

3003 
	`f‹óch_p‹t
(
p‹éi°
,

3004 
	`pktgí_£nd_pkt
(
öfo
, 
£qnum
) );

3007 
	}
}

3022 
	$pktgí_p‹tCou¡
(
lua_Sèã
 *
L
)

3024 
	`lua_pushöãgî
(
L
, 
pktgí
.
p‹t_˙t
);

3027 
	}
}

3042 
	$pktgí_tŸÆP‹ts
(
lua_Sèã
 *
L
)

3044 
	`lua_pushöãgî
(
L
, 
pktgí
.
nb_p‹ts
);

3047 
	}
}

3062 
	$pktgí_ªcvPkt
(
lua_Sèã
 *
L
)

3064 
p‹éi°_t
 
p‹éi°
;

3066 
	`lua_gët›
(
L
) ) {

3067 :  
	`luaL_îr‹
(
L
, "recvPkt, wrongÇumber ofárguments");

3071 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

3072 i‡(
p‹éi°
 == 0)

3075 
	`f‹óch_p‹t
(
p‹éi°
,

3076 
	`pktgí_ªcv_pkt
(
öfo
) );

3079 
	}
}

3094 
	$pktgí_∫d
(
lua_Sèã
 *
L
)

3096 
p‹éi°_t
 
p‹éi°
;

3097 
mask
[33] = { 0 };

3098 c⁄° * 
msk
;

3099 
i
, 
mask_idx
 = 0;

3100 
cuº_bô
;

3102 
	`lua_gët›
(
L
) ) {

3103 :  
	`luaL_îr‹
(
L
, "rnd, wrongÇumber ofárguments");

3107 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

3108 i‡(
p‹éi°
 == 0)

3111 
msk
 = 
	`luaL_check°rög
(
L
, 4);

3112 i‡(
	`°rcmp
(
msk
, "off"))

3116 
i
 = 0; (
mask_idx
 < 32Ë&& ((
cuº_bô
 = 
msk
[i]) != '\0'); i++)

3117 i‡((
cuº_bô
 == '0') || (curr_bit == '1') ||

3118 (
cuº_bô
 == '.') || (curr_bit == 'X') || (curr_bit == 'x'))

3119 
mask
[
mask_idx
++] = 
cuº_bô
;

3121 
	`f‹óch_p‹t
(
p‹éi°
,

3122 
	`íabÀ_øndom
(
öfo
, 
	`pktgí_£t_øndom_bôfõld
(öfo->
∫d_bôfõlds
,

3123 
	`luaL_checköãgî
(
L
, 2),

3124 
	`luaL_checköãgî
(
L
, 3), 
mask
) ?

3125 
ENABLE_STATE
 : 
DISABLE_STATE
));

3128 
	}
}

3131 
	$add_∫d_∑âîn
(
lua_Sèã
 *
L
, 
p‹t_öfo_t
 *
öfo
)

3133 
uöt32_t
 
i
, 
cuº_bô
, 
idx
;

3134 
mask
[36];

3135 
bf_•ec_t
 *
cuº_•ec
;

3136 
∫d_bôs_t
 *
∫d_bôs
 = 
öfo
->
∫d_bôfõlds
;

3138 
	`lua_pushöãgî
(
L
, 
öfo
->
pid
);

3139 
	`lua_√wèbÀ
(
L
);

3141 
idx
 = 0; idx < 
MAX_RND_BITFIELDS
; idx++) {

3142 
cuº_•ec
 = &
∫d_bôs
->
•ecs
[
idx
];

3144 
	`mem£t
(
mask
, 0, (mask));

3145 
	`mem£t
(
mask
, ' ', (mask) - 1);

3147 
i
 = 0; i < 
MAX_BITFIELD_SIZE
; ++i) {

3148 
cuº_bô
 = (
uöt32_t
)1 << (
MAX_BITFIELD_SIZE
 - 
i
 - 1);

3153 
mask
[
i
 + (i >> 3)] =

3154 ((
	`¡ohl
(
cuº_•ec
->
∫dMask
Ë& 
cuº_bô
) != 0) ? 'X' :

3155 ((
	`¡ohl
(
cuº_•ec
->
™dMask
Ë& 
cuº_bô
) == 0) ? '0' :

3156 ((
	`¡ohl
(
cuº_•ec
->
‹Mask
Ë& 
cuº_bô
) != 0) ? '1' : '.';

3159 
	`lua_pushöãgî
(
L
, 
idx
);

3160 
	`lua_√wèbÀ
(
L
);

3161 
	`£tf_öãgî
(
L
, "off£t", 
cuº_•ec
->
off£t
);

3162 
	`£tf_°rög
(
L
, "mask", 
mask
);

3163 
	`£tf_°rög
(
L
, "a˘ive", (
∫d_bôs
->
a˘ive_•ecs
 & (1 << 
idx
)) ? "Yes" : "No");

3164 
	`lua_øw£t
(
L
, -3);

3167 
	`lua_øw£t
(
L
, -3);

3168 
	}
}

3183 
	$pktgí_∫d_li°
(
lua_Sèã
 *
L
) {

3184 
p‹éi°_t
 
p‹éi°
;

3185 
n
;

3187 
	`lua_gët›
(
L
) ) {

3188 :  
	`luaL_îr‹
(
L
, "rnd_list, wrongÇumber ofárguments");

3193 i‡(
	`lua_gët›
(
L
) == 1)

3194 
	`πe_∑r£_p‹éi°
(
	`luaL_check°rög
(
L
, 1), &
p‹éi°
);

3196 
p‹éi°
 = -1;

3198 
	`lua_√wèbÀ
(
L
);

3200 
n
 = 0;

3201 
	`f‹óch_p‹t
(
p‹éi°
,

3202 
	`_do
(
	`add_∫d_∑âîn
(
L
, 
öfo
); 
n
++));

3204 
	`£tf_öãgî
(
L
, "n", 
n
);

3207 
	}
}

3222 
	$pktgí_run
(
lua_Sèã
 *
L
)

3224 
	`lua_gët›
(
L
) ) {

3225 :  
	`luaL_îr‹
(

3226 
L
,

3233 i‡(
	`°rˇ£cmp
("cmd", 
	`luaL_check°rög
(
L
, 1)) == 0)

3234 
	`˛i_execuã_cmdfûe
(
	`luaL_check°rög
(
L
, 2));

3235 i‡(
	`°rˇ£cmp
("lua", 
	`luaL_check°rög
(
L
, 1)) == 0)

3236 
	`execuã_lua_°rög
(
L
, (*)
	`luaL_check°rög
(L, 2));

3238  
	`luaL_îr‹
(
L
, "run( ['cmd'|'lua'], <string>),árguments wrong.");

3241 
	}
}

3243 c⁄° *
	glua_hñp_öfo
[] = {

3259 #ifde‡
INCLUDE_PING6


3370 
NULL


3386 
	$pktgí_lua_hñp
(
lua_Sèã
 *
L
)

3388 
i
;

3390 
	`lua_c⁄ˇt
(
L
, 0);

3391 
i
 = 1; 
lua_hñp_öfo
[i] !
NULL
; i++) {

3392 
	`lua_push°rög
(
L
, 
lua_hñp_öfo
[
i
]);

3393 
	`lua_c⁄ˇt
(
L
, 2);

3397 
	}
}

3399 c⁄° 
luaL_Reg
 
	gpktgílib_ønge
[] = {

3401 {"d°_mac", 
ønge_d°_mac
},

3402 {"§c_mac", 
ønge_§c_mac
},

3403 {"§c_ù", 
ønge_§c_ù
},

3404 {"d°_ù", 
ønge_d°_ù
},

3405 {"ù_¥Ÿo", 
ønge_ù_¥Ÿo
},

3406 {"§c_p‹t", 
ønge_§c_p‹t
},

3407 {"d°_p‹t", 
ønge_d°_p‹t
},

3408 {"vœn_id", 
ønge_vœn_id
},

3409 {"m∂s_íåy", 
ønge_m∂s_íåy
},

3410 {"qöqids", 
ønge_qöqids
},

3411 {"gª_key", 
ønge_gª_key
},

3412 {"pkt_size", 
ønge_pkt_size
},

3413 {
NULL
, NULL}

3416 c⁄° 
luaL_Reg
 
	gpktgílib
[] = {

3417 {"quô", 
pktgí_exô
},

3418 {"£t", 
pktgí_£t
},

3420 {"°¨t", 
pktgí_°¨t
},

3421 {"°›", 
pktgí_°›
},

3424 {"£t_mac", 
pktgí_£t_mac
},

3425 {"£t_ùaddr", 
pktgí_£t_ù_addr
},

3426 {"mac_‰om_¨p", 
pktgí_macFromAΩ
},

3427 {"£t_¥Ÿo", 
pktgí_¥ŸŸy≥
},

3428 {"£t_ty≥", 
pktgí_£t_ty≥
},

3430 {"pög4", 
pktgí_£nd_pög4
},

3431 #ifde‡
INCLUDE_PING6


3432 {"pög6", 
pktgí_£nd_pög6
},

3435 {"pˇp", 
pktgí_pˇp
},

3436 {"icmp_echo", 
pktgí_icmp
},

3437 {"£nd_¨p", 
pktgí_£ndARP
},

3440 {"£q", 
pktgí_£q
},

3441 {"£qTabÀ", 
pktgí_£qTabÀ
},

3443 {"s¸ìn", 
pktgí_s¸n
},

3444 {"¥ime", 
pktgí_¥ime
},

3445 {"dñay", 
pktgí_dñay
},

3446 {"∑u£", 
pktgí_∑u£
},

3447 {"¶ìp", 
pktgí_¶ìp
},

3448 {"lﬂd", 
pktgí_lﬂd
},

3449 {"ßve", 
pktgí_c⁄fig_ßve
},

3450 {"˛ór", 
pktgí_˛ór
},

3451 {"˛r", 
pktgí_˛ór_Æl
},

3452 {"˛s", 
pktgí_˛s_s¸ìn
},

3453 {"upd©e", 
pktgí_upd©e_s¸ìn
},

3454 {"ª£t", 
pktgí_ª£t_c⁄fig
},

3455 {"p‹t_ª°¨t", 
pktgí_ª°¨t
},

3456 {"p‹tCou¡", 
pktgí_p‹tCou¡
},

3457 {"tŸÆP‹ts", 
pktgí_tŸÆP‹ts
},

3459 {"vœn", 
sögÀ_vœn
},

3460 {"vœnid", 
sögÀ_vœn_id
},

3462 {"cos", 
sögÀ_cos
},

3463 {"tos", 
sögÀ_tos
},

3466 {"m∂s", 
pktgí_m∂s
},

3467 {"qöq", 
pktgí_qöq
},

3468 {"gª", 
pktgí_gª
},

3469 {"gª_ëh", 
pktgí_gª_ëh
},

3472 {"d°_mac", 
ønge_d°_mac
},

3473 {"§c_mac", 
ønge_§c_mac
},

3474 {"§c_ù", 
ønge_§c_ù
},

3475 {"d°_ù", 
ønge_d°_ù
},

3476 {"ù_¥Ÿo", 
ønge_ù_¥Ÿo
},

3477 {"§c_p‹t", 
ønge_§c_p‹t
},

3478 {"d°_p‹t", 
ønge_d°_p‹t
},

3479 {"vœn_id", 
ønge_vœn_id
},

3480 {"m∂s_íåy", 
ønge_m∂s_íåy
},

3481 {"qöqids", 
ønge_qöqids
},

3482 {"gª_key", 
ønge_gª_key
},

3483 {"pkt_size", 
ønge_pkt_size
},

3484 {"£t_ønge", 
ønge
},

3486 {"p‹ts_≥r_∑ge", 
pktgí_p‹ts_≥r_∑ge
},

3487 {"∑ge", 
pktgí_∑ge
},

3488 {"p‹t", 
pktgí_p‹t
},

3489 {"¥o˚ss", 
pktgí_¥o˚ss
},

3490 {"ˇ±uª", 
pktgí_ˇ±uª
},

3491 {"b⁄dög", 
pktgí_b⁄dög
},

3492 {"g¨p", 
pktgí_g¨p
},

3493 {"blök", 
pktgí_blök
},

3494 {"hñp", 
pktgí_hñp
},

3495 {"Lua.hñp", 
pktgí_lua_hñp
},

3497 {"isSídög", 
pktgí_isSídög
},

3498 {"lökSèã", 
pktgí_lökSèã
},

3500 {"p‹tSizes", 
pktgí_p‹tSizes
},

3501 {"pktSèts", 
pktgí_pktSèts
},

3502 {"p‹tSèts", 
pktgí_p‹tSèts
},

3504 {"compûe", 
pktgí_compûe
},

3505 {"decompûe", 
pktgí_decompûe
},

3506 {"£ndPkt", 
pktgí_£ndPkt
},

3507 {"ªcvPkt", 
pktgí_ªcvPkt
},

3509 {"run", 
pktgí_run
},

3510 {"c⁄töue", 
pktgí_c⁄töue
},

3511 {"öput", 
pktgí_öput
},

3513 {"∑âîn", 
pktgí_∑âîn
},

3514 {"u£rP©ã∫", 
pktgí_u£r_∑âîn
},

3515 {"œãncy", 
pktgí_œãncy
},

3516 {"jôãr", 
pktgí_jôãr
},

3517 {"gçu_ãid", 
ønge_gçu_ãid
},

3519 {"∫d", 
pktgí_∫d
},

3520 {"∫d_li°", 
pktgí_∫d_li°
},

3522 {"rxèp", 
pktgí_rxèp
},

3523 {"txèp", 
pktgí_txèp
},

3525 {
NULL
, NULL}

3542 
LUALIB_API
 

3543 
	$lua›í_pktgí
(
lua_Sèã
 *
L
)

3545 
	`luaL_√wlib
(
L
, 
pktgílib
);

3547 
	`lua_push°rög
(
L
, "info");

3548 
	`lua_√wèbÀ
(
L
);

3550 
	`£tf_°rög
(
L
, "Lua_Vîsi⁄", (*)
LUA_VERSION
);

3551 
	`£tf_°rög
(
L
, "Lua_Rñó£", (*)
LUA_RELEASE
);

3552 
	`£tf_°rög
(
L
, "Lua_C›yright", (*)
LUA_COPYRIGHT
);

3553 
	`£tf_°rög
(
L
, "Lua_Auth‹s", (*)
LUA_AUTHORS
);

3555 
	`£tf_°rög
(
L
, "Pktgí_Vîsi⁄", (*)
PKTGEN_VERSION
);

3556 
	`£tf_°rög
(
L
, "Pktgí_C›yright", (*)
	`c›yright_msg
());

3557 
	`£tf_°rög
(
L
, "Pktgen_Authors", (*)"Keith Wiles @ Intel Corp");

3558 
	`£tf_°rög
(
L
, "DPDK_Vîsi⁄", (*)
	`πe_vîsi⁄
());

3559 
	`£tf_°rög
(
L
, "DPDK_C›yright", (*)
	`powîed_by
());

3561 
	`£tf_öãgî
(
L
, "°¨tSeqIdx", 
FIRST_SEQ_PKT
);

3562 
	`£tf_öãgî
(
L
, "sögÀPktIdx", 
SINGLE_PKT
);

3563 
	`£tf_öãgî
(
L
, "øngePktIdx", 
RANGE_PKT
);

3564 
	`£tf_öãgî
(
L
, "pögPktIdx", 
PING_PKT
);

3565 
	`£tf_öãgî
(
L
, "°¨tExåaTxIdx", 
EXTRA_TX_PKT
);

3567 
	`£tf_öãgî
(
L
, "numSeqPkts", 
NUM_SEQ_PKTS
);

3568 
	`£tf_öãgî
(
L
, "numExåaTxPkts", 
NUM_EXTRA_TX_PKTS
);

3569 
	`£tf_öãgî
(
L
, "numTŸÆPkts", 
NUM_TOTAL_PKTS
);

3571 
	`£tf_öãgî
(
L
, "möPktSize", 
MIN_PKT_SIZE
 + 
FCS_SIZE
);

3572 
	`£tf_öãgî
(
L
, "maxPktSize", 
MAX_PKT_SIZE
 + 
FCS_SIZE
);

3573 
	`£tf_öãgî
(
L
, "möVœnID", 
MIN_VLAN_ID
);

3574 
	`£tf_öãgî
(
L
, "maxVœnID", 
MAX_VLAN_ID
);

3575 
	`£tf_öãgî
(
L
, "vœnTagSize", 
VLAN_TAG_SIZE
);

3576 
	`£tf_öãgî
(
L
, "mbufCacheSize", 
MBUF_CACHE_SIZE
);

3578 
	`£tf_öãgî
(
L
, "möCos", 
MIN_COS
);

3579 
	`£tf_öãgî
(
L
, "maxCos", 
MAX_COS
);

3580 
	`£tf_öãgî
(
L
, "möTOS", 
MIN_TOS
);

3581 
	`£tf_öãgî
(
L
, "maxTOS", 
MAX_TOS
);

3583 
	`£tf_öãgî
(
L
, "deÁu…PktBur°", 
DEFAULT_PKT_BURST
);

3584 
	`£tf_öãgî
(
L
, "deÁu…BuffSize", 
MBUF_SIZE
);

3585 
	`£tf_öãgî
(
L
, "maxMbufsPîP‹t", 
MAX_MBUFS_PER_PORT
);

3586 
	`£tf_öãgî
(
L
, "maxPrimeCou¡", 
MAX_PRIME_COUNT
);

3589 
	`lua_øw£t
(
L
, -3);

3591 
	`lua_push°rög
(
L
, "range");

3592 
	`lua_√wèbÀ
(
L
);

3594 
	`luaL_£tfuncs
(
L
, 
pktgílib_ønge
, 0);

3596 
	`lua_øw£t
(
L
, -3);

3599 
	}
}

3614 
	$_lua_›ílib
(
lua_Sèã
 *
L
)

3616 
	`lua_gc
(
L
, 
LUA_GCSTOP
, 0);

3618 
	`luaL_›ílibs
(
L
);

3620 
	`luaL_ªquúef
(
L
, 
LUA_PKTGENLIBNAME
, 
lua›í_pktgí
, 1);

3621 
	`lua_p›
(
L
, 1);

3623 
	`lua_gc
(
L
, 
LUA_GCRESTART
, 0);

3625 
	`as£π
(
	`dﬁibøry
(
L
, 
PKTGEN_SHORTCUTS
Ë=
LUA_OK
);

3626 
	}
}

	@app/lpktgenlib.h

8 #i‚de‡
LPKTGENLIB_H_


9 
	#LPKTGENLIB_H_


	)

11 
	#lua_c


	)

12 
	~<lua.h
>

13 
	~<œuxlib.h
>

15 #ifde‡
__˝lu•lus


19 
	#LUA_PKTGENLIBNAME
 "pktgí"

	)

20 
	#PKTGEN_SHORTCUTS
 "Pktgí"

	)

22 
LUALIB_API
 
lua›í_pktgí
(
lua_Sèã
 *
L
);

23 
pktgí_lua_›ílib
(
lua_Sèã
 *
L
);

25 
_lua_›ílib
(
lua_Sèã
 *
L
);

27 #ifde‡
__˝lu•lus


	@app/pktgen-arp.c

9 
	~<˛i_s¸n.h
>

10 
	~"pktgí-¨p.h
"

12 
	~"pktgí.h
"

13 
	~"pktgí-cmds.h
"

14 
	~"pktgí-log.h
"

29 
	$pktgí_£nd_¨p
(
uöt32_t
 
pid
, uöt32_à
ty≥
, 
uöt8_t
 
£q_idx
)

31 
p‹t_öfo_t
 *
öfo
 = &
pktgí
.öfo[
pid
];

32 
pkt_£q_t
 *
pkt
;

33 
πe_mbuf
 *
m
;

34 
ëhî_hdr
 *
ëh
;

35 
¨pPkt_t
 *
¨p
;

36 
uöt32_t
 
addr
;

37 
uöt8_t
 
qid
 = 0;

39 
pkt
 = &
öfo
->
£q_pkt
[
£q_idx
];

40 
m
 = 
	`πe_pktmbuf_Æloc
(
öfo
->
q
[
qid
].
•ecül_mp
);

41 i‡(
	`u∆ikñy
(
m
 =
NULL
) ) {

42 
	`pktgí_log_w¨nög
("NoÖacket buffers found");

45 
ëh
 = 
	`πe_pktmbuf_mtod
(
m
, 
ëhî_hdr
 *);

46 
¨p
 = (
¨pPkt_t
 *)&
ëh
[1];

49 
	`mem£t
(&
ëh
->
d_addr
, 0xFF, 6);

50 
	`ëhî_addr_c›y
(&
pkt
->
ëh_§c_addr
, &
ëh
->
s_addr
);

51 
ëh
->
ëhî_ty≥
 = 
	`ht⁄s
(
ETHER_TYPE_ARP
);

53 
	`mem£t
(
¨p
, 0, (
¨pPkt_t
));

55 
	`πe_mem˝y
(&
¨p
->
sha
, &
pkt
->
ëh_§c_addr
, 6);

56 
addr
 = 
	`ht⁄l
(
pkt
->
ù_§c_addr
.addr.
ùv4
.
s_addr
);

57 
	`öëAddrC›y
(&
¨p
->
•a
, &
addr
);

59 i‡(
	`likñy
(
ty≥
 =
GRATUITOUS_ARP
) ) {

60 
	`πe_mem˝y
(&
¨p
->
tha
, &
pkt
->
ëh_§c_addr
, 6);

61 
addr
 = 
	`ht⁄l
(
pkt
->
ù_§c_addr
.addr.
ùv4
.
s_addr
);

62 
	`öëAddrC›y
(&
¨p
->
ça
, &
addr
);

64 
	`mem£t
(&
¨p
->
tha
, 0, 6);

65 
addr
 = 
	`ht⁄l
(
pkt
->
ù_d°_addr
.addr.
ùv4
.
s_addr
);

66 
	`öëAddrC›y
(&
¨p
->
ça
, &
addr
);

70 
¨p
->
hrd
 = 
	`ht⁄s
(
ETH_HW_TYPE
);

71 
¨p
->
¥o
 = 
	`ht⁄s
(
ETHER_TYPE_IPv4
);

72 
¨p
->
h 
 = 6;

73 
¨p
->
∂n
 = 4;

74 
¨p
->
›
 = 
	`ht⁄s
(
ARP_REQUEST
);

76 
m
->
pkt_Àn
 = 60;

77 
m
->
d©a_Àn
 = 60;

79 
	`pktgí_£nd_mbuf
(
m
, 
pid
, 
qid
);

81 
	`pktgí_£t_q_Êags
(
öfo
, 
qid
, 
DO_TX_FLUSH
);

82 
	}
}

97 
	$pktgí_¥o˚ss_¨p
(
πe_mbuf
 *
m
, 
uöt32_t
 
pid
, uöt32_à
vœn
)

99 
p‹t_öfo_t
 *
öfo
 = &
pktgí
.öfo[
pid
];

100 
pkt_£q_t
 *
pkt
;

101 
ëhî_hdr
 *
ëh
 = 
	`πe_pktmbuf_mtod
(
m
, ether_hdr *);

102 
¨pPkt_t
 *
¨p
 = (¨pPkt_à*)&
ëh
[1];

105 i‡(
vœn
)

106 
¨p
 = (
¨pPkt_t
 *)((*ÔΩ + (
vœn_hdr
));

109 i‡(
¨p
->
›
 =
	`ht⁄s
(
ARP_REQUEST
) ) {

110 i‡((
	`πe_©omic32_ªad
(&
öfo
->
p‹t_Êags
) &

111 
PROCESS_GARP_PKTS
) &&

112 (
¨p
->
ça
.
_32
 =¨p->
•a
._32) ) {

113 
pkt
 = 
	`pktgí_föd_m©chög_ùd°
(
öfo
, 
¨p
->
•a
.
_32
);

116 i‡(
pkt
) {

117 
	`πe_mem˝y
(&
pkt
->
ëh_d°_addr
, &
¨p
->
sha
, 6);

118 
	`pktgí_£t_q_Êags
(
öfo
,

119 
	`gë_txque
(
pktgí
.
l2p
, 
	`πe_lc‹e_id
(), 
pid
), 
DO_TX_FLUSH
);

120 
	`pktgí_˛ór_di•œy
();

125 
pkt
 = 
	`pktgí_föd_m©chög_ù§c
(
öfo
, 
¨p
->
ça
.
_32
);

128 i‡(
	`likñy
(
pkt
 !
NULL
) ) {

130 i‡(
	`u∆ikñy
(
pktgí
.
Êags
 & 
MAC_FROM_ARP_FLAG
) ) {

131 
uöt32_t
 
i
;

133 
	`πe_mem˝y
(&
pkt
->
ëh_d°_addr
, &
¨p
->
sha
, 6);

134 
i
 = 0; i < 
öfo
->
£qC¡
; i++)

135 
	`pktgí_∑ckë_˘‹
(
öfo
, 
i
, -1);

139 
	`ëhAddrSw≠
(&
¨p
->
sha
, &¨p->
tha
);

142 
	`öëAddrSw≠
(&
¨p
->
ça
.
_32
, &¨p->
•a
._32);

145 
¨p
->
›
 = 
	`ht⁄s
(
ARP_REPLY
);

148 
	`ëhAddrSw≠
(&
ëh
->
d_addr
, &ëh->
s_addr
);

151 
	`πe_mem˝y
(&
¨p
->
sha
, &
pkt
->
ëh_§c_addr
, 6);

152 
	`πe_mem˝y
(&
ëh
->
s_addr
, &
pkt
->
ëh_§c_addr
, 6);

154 
	`pktgí_£nd_mbuf
(
m
, 
pid
, 0);

157 
	`pktgí_£t_q_Êags
(
öfo
, 0, 
DO_TX_FLUSH
);

162 } i‡(
¨p
->
›
 =
	`ht⁄s
(
ARP_REPLY
) ) {

163 
pkt
 = 
	`pktgí_föd_m©chög_ù§c
(
öfo
, 
¨p
->
ça
.
_32
);

166 i‡(
	`likñy
(
pkt
 !
NULL
) ) {

168 i‡(
pkt
->
ù_d°_addr
.
addr
.
ùv4
.
s_addr
 ==

169 
	`¡ohl
(
¨p
->
•a
.
_32
) )

170 
	`πe_mem˝y
(&
pkt
->
ëh_d°_addr
, &
¨p
->
sha
, 6);

172 
pktgí
.
Êags
 |
PRINT_LABELS_FLAG
;

175 
	}
}

	@app/pktgen-arp.h

8 #i‚de‡
_PKTGEN_ARP_H_


9 
	#_PKTGEN_ARP_H_


	)

11 
	~<°döt.h
>

13 
	~<πe_mbuf.h
>

15 #ifde‡
__˝lu•lus


19 
pktgí_£nd_¨p
(
uöt32_t
 
pid
, uöt32_à
ty≥
, 
uöt8_t
 
£q_idx
);

20 
pktgí_¥o˚ss_¨p
(
πe_mbuf
 *
m
, 
uöt32_t
 
pid
, uöt32_à
vœn
);

22 #ifde‡
__˝lu•lus


	@app/pktgen-capture.c

8 
	~"pktgí-ˇ±uª.h
"

9 
	~<time.h
>

11 
	~<πe_mem˝y.h
>

12 
	~<πe_memz⁄e.h
>

13 
	~<πe_°rög_‚s.h
>

14 
	~<˛i_°rög_‚s.h
>

16 
	~"pktgí-cmds.h
"

17 
	~"pktgí-log.h
"

18 
	~"pktgí-di•œy.h
"

20 
	#CAPTURE_BUFF_SIZE
 (4 * (1024 * 1024))

	)

40 
	$pktgí_∑ckë_ˇ±uª_öô
(
ˇ±uª_t
 *
ˇ±uª
, 
sockë_id
)

42 
memz⁄e_«me
[
RTE_MEMZONE_NAMESIZE
];

44 i‡(!
ˇ±uª
)

47 
ˇ±uª
->
lc‹e
 = 
RTE_MAX_LCORE
;

48 
ˇ±uª
->
p‹t
 = 
RTE_MAX_ETHPORTS
;

49 
ˇ±uª
->
u£d
 = 0;

51 
	`¢¥ötf
(
memz⁄e_«me
, (memzone_name), "Capture_MZ_%d",

52 
sockë_id
);

53 
ˇ±uª
->
mz
 = 
	`πe_memz⁄e_ª£rve
(
memz⁄e_«me
, 
CAPTURE_BUFF_SIZE
,

54 
sockë_id
, 
RTE_MEMZONE_1GB
 | 
RTE_MEMZONE_SIZE_HINT_ONLY
);

55 
	}
}

75 
	$pktgí_£t_ˇ±uª
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
⁄Off
)

77 
ˇ±uª_t
 *
ˇp
;

79 i‡(
⁄Off
 =
ENABLE_STATE
) {

81 i‡(
	`πe_©omic32_ªad
(&
öfo
->
p‹t_Êags
Ë& 
CAPTURE_PKTS
)

84 i‡(
	`gë_p‹t_rx˙t
(
pktgí
.
l2p
, 
öfo
->
pid
) == 0) {

85 
	`pktgí_log_w¨nög
(

87 
öfo
->
pid
);

92 
uöt16_t
 
lid_idx
, 
lid
, 
rxid
;

93 
lid_idx
 = 0;

94 
lid_idx
 < 
	`gë_p‹t_nb_lids
(
pktgí
.
l2p
, 
öfo
->
pid
);

95 ++
lid_idx
) {

96 
lid
 = 
	`gë_p‹t_lid
(
pktgí
.
l2p
, 
öfo
->
pid
, 
lid_idx
);

97 
rxid
 = 0;

98 
rxid
 < 
	`gë_lc‹e_rx˙t
(
pktgí
.
l2p
, 
lid
); ++rxid)

99 i‡(
	`gë_rx_pid
(
pktgí
.
l2p
, 
lid
,

100 
rxid
Ë=
öfo
->
pid
)

101 
found_rx_lid
;

103 
lid
 = 
RTE_MAX_LCORE
;

105 
found_rx_lid
:

106 i‡(
lid
 =
RTE_MAX_LCORE
) {

107 
	`pktgí_log_w¨nög
(

109 
öfo
->
pid
);

114 
uöt16_t
 
sid
 = 
pktgí
.
c‹e_öfo
[
lid
].
s
.
sockë_id
;

116 
ˇp
 = &
pktgí
.
ˇ±uª
[
sid
];

118 i‡(
ˇp
->
mz
 =
NULL
) {

119 
	`pktgí_log_w¨nög
(

121 "áŒoˇãd o¿thi†sockë?", 
sid
);

125 i‡(
ˇp
->
lc‹e
 !
RTE_MAX_LCORE
) {

126 
	`pktgí_log_w¨nög
(

129 "assocüãd wôhÅhi†lc‹êfú°.", 
ˇp
->
lc‹e
, 
sid
);

134 
ˇp
->
u£d
 = 0;

135 
ˇp
->
lc‹e
 = 
lid
;

136 
ˇp
->
p‹t
 = 
öfo
->
pid
;

137 
ˇp
->
èû
 = (
ˇp_hdr_t
 *)ˇp->
mz
->
addr
;

138 
ˇp
->
íd
 = (
ˇp_hdr_t
 *)((*)ˇp->
mz
->
addr
 +

139 (
ˇp
->
mz
->
Àn
 - (
ˇp_hdr_t
)));

143 
	`mem£t
(
ˇp
->
èû
, 0, (
ˇp_hdr_t
));

144 
	`mem£t
(
ˇp
->
íd
, 0, (
ˇp_hdr_t
));

146 
	`pktgí_£t_p‹t_Êags
(
öfo
, 
CAPTURE_PKTS
);

148 
	`pktgí_log_öfo
(

151 
öfo
->
pid
,

152 
lid
,

153 
sid
,

154 ()
ˇp
->
mz
->
Àn
 / (1024 * 1024),

155 ()
ˇp
->
mz
->
Àn
 /

158 * (()
öfo
->
lök
.
lök_•ìd
 * 1000 *

164 i‡(!(
	`πe_©omic32_ªad
(&
öfo
->
p‹t_Êags
Ë& 
CAPTURE_PKTS
))

169 i‡(
	`gë_p‹t_rx˙t
(
pktgí
.
l2p
, 
öfo
->
pid
) == 0) {

170 
	`pktgí_log_w¨nög
(

172 
öfo
->
pid
);

176 
sid
;

177 
sid
 = 0; sid < 
RTE_MAX_NUMA_NODES
; ++sid) {

178 
ˇp
 = &
pktgí
.
ˇ±uª
[
sid
];

179 i‡(
ˇp
->
mz
 && (ˇp->
p‹t
 =
öfo
->
pid
))

184 i‡(
sid
 =
RTE_MAX_NUMA_NODES
) {

185 
	`pktgí_log_îr‹
("CouldÇot find socket forÖort %d",

186 
öfo
->
pid
);

191 i‡(
ˇp
->
u£d
 > 0) {

192 
pˇp_t
 *
pˇp
;

193 
pˇp_dum≥r_t
 *
pˇp_dum≥r
;

194 
pˇp_pkthdr
 
pˇp_hdr
;

195 
ˇp_hdr_t
 *
hdr
;

196 
time_t
 
t
;

197 
fûíame
[64];

198 
°r_time
[64];

199 
size_t
 
mem_dum≥d
 = 0;

200 
p˘
 = 0;

202 
°©us
[256];

203 
	`•rötf
(

204 
°©us
,

206 ()
ˇp
->
u£d
 / (1024 * 1024));

207 
	`s¸n_¥ötf
(0, 0, "\n%s", 
°©us
);

209 
pˇp
 = 
	`pˇp_›í_dód
(
DLT_EN10MB
, 65535);

211 
t
 = 
	`time
(
NULL
);

212 
	`°r·ime
(
°r_time
,

213 (
°r_time
),

215 
	`loˇ…ime
(&
t
));

216 
	`¢¥ötf
(
fûíame
,

217 (
fûíame
),

219 
°r_time
,

220 
ˇp
->
p‹t
);

221 
pˇp_dum≥r
 = 
	`pˇp_dump_›í
(
pˇp
, 
fûíame
);

223 
hdr
 = (
ˇp_hdr_t
 *)
ˇp
->
mz
->
addr
;

225 
hdr
->
pkt_Àn
) {

226 
pˇp_hdr
.
ts
.
tv_£c
 = 0;

227 
pˇp_hdr
.
ts
.
tv_u£c
 = 0;

228 
pˇp_hdr
.
Àn
 = 
hdr
->
pkt_Àn
;

229 
pˇp_hdr
.
ˇ∂í
 = 
hdr
->
d©a_Àn
;

231 
	`pˇp_dump
((
u_ch¨
 *)
pˇp_dum≥r
, &
pˇp_hdr
,

232 (c⁄° 
u_ch¨
 *)
hdr
->
pkt
);

234 
hdr
 = (
ˇp_hdr_t
 *)(hdr->
pkt
 + hdr->
d©a_Àn
);

236 
mem_dum≥d
 = 
hdr
->
pkt
 -

237 (*)
ˇp
->
mz
->
addr
;

241 i‡(
p˘
 < ((
mem_dum≥d
 * 100Ë/ 
ˇp
->
u£d
) ) {

242 
p˘
 = (
mem_dum≥d
 * 100Ë/ 
ˇp
->
u£d
;

244 i‡(
p˘
 % 10 == 0)

245 
	`°∫ˇtf
(
°©us
, "%d%%", 
p˘
);

246 i‡(
p˘
 % 2 == 0)

247 
	`°∫ˇtf
(
°©us
, ".");

249 
	`s¸n_¥ötf
(0, 0,"%s", 
°©us
);

252 
	`s¸n_¥ötf
(0, 0, "\r");

253 
	`s¸n_¥ötf
(0, 0, "\n");

255 
	`pˇp_dump_˛o£
(
pˇp_dum≥r
);

256 
	`pˇp_˛o£
(
pˇp
);

259 
ˇp
->
u£d
 = 0;

260 
ˇp
->
èû
 = (
ˇp_hdr_t
 *)ˇp->
mz
->
addr
;

261 
ˇp
->
lc‹e
 = 
RTE_MAX_LCORE
;

262 
ˇp
->
p‹t
 = 
RTE_MAX_ETHPORTS
;

264 
	`pktgí_˛r_p‹t_Êags
(
öfo
, 
CAPTURE_PKTS
);

266 
	}
}

287 
	$pktgí_∑ckë_ˇ±uª_bulk
(
πe_mbuf
 **
pkts
,

288 
uöt32_t
 
nb_dump
,

289 
ˇ±uª_t
 *
ˇp
)

291 
uöt32_t
 
∂í
, 
i
;

292 
πe_mbuf
 *
pkt
;

295 i‡(
ˇp
->
èû
 =ˇp->
íd
)

298 
i
 = 0; i < 
nb_dump
; i++) {

299 
pkt
 = 
pkts
[
i
];

305 
∂í
 = (
pkt
->
d©a_Àn
 + 1) & ~1;

313 i‡((
ˇp_hdr_t
 *)(
ˇp
->
èû
->
pkt
 + 
∂í
Ë> c≠->
íd
)

318 
ˇp
->
èû
->
pkt_Àn
 = 
pkt
->pkt_len;

319 
ˇp
->
èû
->
d©a_Àn
 = 
∂í
;

321 
	`πe_mem˝y
(
ˇp
->
èû
->
pkt
,

322 (
uöt8_t
 *)
pkt
->
buf_addr
 +Ökt->
d©a_off
,

323 
pkt
->
pkt_Àn
);

324 
ˇp
->
èû
 = (
ˇp_hdr_t
 *)(ˇp->èû->
pkt
 + 
∂í
);

328 
ˇp
->
èû
->
pkt_Àn
 = 0;

329 
ˇp
->
u£d
 = (*)ˇp->
èû
 - (*)ˇp->
mz
->
addr
;

330 
	}
}

	@app/pktgen-capture.h

8 #i‚de‡
_PKTGEN_CAPTURE_H_


9 
	#_PKTGEN_CAPTURE_H_


	)

11 
	~<°ddef.h
>

12 
	~<öây≥s.h
>

14 
	~<πe_memz⁄e.h
>

15 
	~<πe_mbuf.h
>

17 
	~"pktgí-p‹t-cfg.h
"

19 #ifde‡
__˝lu•lus


23 
	sˇp_hdr_s
 {

24 
uöt16_t
 
pkt_Àn
;

25 
uöt16_t
 
d©a_Àn
;

26 
uöt8_t
 
pkt
[0];

27 } 
	tˇp_hdr_t
;

30 
	sˇ±uª_s
 {

31 c⁄° 
πe_memz⁄e
 *
mz
;

32 
ˇp_hdr_t
 *
èû
;

33 
ˇp_hdr_t
 *
íd
;

34 
size_t
 
u£d
;

35 
uöt16_t
 
lc‹e
;

36 
uöt16_t
 
p‹t
;

37 } 
	tˇ±uª_t
;

40 
pktgí_∑ckë_ˇ±uª_öô
(
ˇ±uª_t
 *
ˇ±uª
, 
sockë_id
);

43 
pktgí_£t_ˇ±uª
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
⁄Off
);

46 
pktgí_∑ckë_ˇ±uª_bulk
(
πe_mbuf
 **
pkts
,

47 
uöt32_t
 
nb_dump
,

48 
ˇ±uª_t
 *
ˇ±uª
);

50 #ifde‡
__˝lu•lus


	@app/pktgen-cfg.c

8 
	~"pktgí-di•œy.h
"

9 
	~"pktgí-˝u.h
"

10 
	~"pktgí-cfg.h
"

30 
	$pktgí_∑ge_c⁄fig
()

32 
uöt32_t
 
i
, 
row
, 
cﬁ
, 
˙t
, 
nb_sockës
, 
nb_c‹es
, 
nb_thªads
;

33 
cou¡î
 = 0;

34 
buff
[2048];

36 
	`di•œy_t›löe
("<CPU Page>");

38 i‡–(
pktgí
.
c‹e_˙t
 =0Ë|| (pktgí.
ls˝u
 =
NULL
) )

39 
	`pktgí_˝u_öô
();

41 
˙t
 = 
pktgí
.
c‹e_˙t
;

42 
nb_sockës
 = 
	`c‹em≠_˙t
(
pktgí
.
c‹e_öfo
, 
˙t
, 0);

43 
nb_c‹es
 = 
	`c‹em≠_˙t
(
pktgí
.
c‹e_öfo
, 
˙t
, 1);

44 
nb_thªads
 = 
	`c‹em≠_˙t
(
pktgí
.
c‹e_öfo
, 
˙t
, 2);

46 i‡–(
cou¡î
++ & 3) != 0)

49 
row
 = 2;

50 
cﬁ
 = 1;

51 
	`s¸n_¥ötf
(

52 
row
++,

55 
nb_sockës
,

56 
nb_c‹es
,

57 
nb_thªads
);

59 
	`•rötf
(
buff
, "Socket : ");

60 
i
 = 0; i < 
nb_sockës
; i++)

61 
	`°∫ˇtf
(
buff
, "%4d ", 
i
);

62 
	`s¸n_¥ötf
(
row
, 
cﬁ
 + 2, "%s", 
buff
);

63 
	`s¸n_¥ötf
(0, 0, "Port description");

65 
row
++;

66 
buff
[0] = '\0';

67 
i
 = 0; i < 
nb_c‹es
; i++) {

68 
	`°∫ˇtf
(
buff
, " Core %3d : [%2d,%2d] ",

69 
i
, 
	`s˘
(0, i, 0), sct(0, i, 1));

70 i‡(
nb_sockës
 > 1)

71 
	`°∫ˇtf
(
buff
, "[%2d,%2d] ",

72 
	`s˘
(1, 
i
, 0), sct(1, i, 1));

73 i‡(
nb_sockës
 > 2)

74 
	`°∫ˇtf
(
buff
, "[%2d,%2d] ",

75 
	`s˘
(2, 
i
, 0), sct(2, i, 1));

76 i‡(
nb_sockës
 > 3)

77 
	`°∫ˇtf
(
buff
, "[%2d,%2d] ",

78 
	`s˘
(3, 
i
, 0), sct(3, i, 1));

79 
	`°∫ˇtf
(
buff
, "\n");

81 
	`s¸n_¥ötf
(
row
, 1, "%s", 
buff
);

83 
cﬁ
 = 13 + (
nb_sockës
 * 10) + 1;

84 
i
 = 0; i < 
pktgí
.
p‹tdesc_˙t
; i++)

85 
	`s¸n_¥ötf
(
row
 + 
i
, 
cﬁ
, "%s", 
pktgí
.
p‹tdesc
[i]);

87 
row
 +
	`RTE_MAX
(
nb_c‹es
, 
pktgí
.
p‹tdesc_˙t
) + 2;

88 i‡(
pktgí
.
Êags
 & 
PRINT_LABELS_FLAG
) {

89 
pktgí
.
œ°_row
 = 
row
;

90 
	`di•œy_dashlöe
(
pktgí
.
œ°_row
);

92 
	`s¸n_£tw
(
pktgí
.
œ°_row
);

93 
	`s¸n_¥ötf
(100, 1, "");

95 
pktgí
.
Êags
 &~
PRINT_LABELS_FLAG
;

96 
	}
}

	@app/pktgen-cfg.h

9 #i‚de‡
_PKTGEN_CFG_H_


10 
	#_PKTGEN_CFG_H_


	)

12 #ifde‡
__˝lu•lus


16 
pktgí_∑ge_c⁄fig
();

18 #ifde‡
__˝lu•lus


	@app/pktgen-cmds.c

9 
	#_GNU_SOURCE


	)

10 
	~<°rög.h
>

11 
	~<sys/°©.h
>

13 
	~"pktgí.h
"

15 
	~"pktgí-cmds.h
"

17 
	~"pktgí-di•œy.h
"

19 
	~<πe_vîsi⁄.h
>

21 #i‡
RTE_VERSION
 >
RTE_VERSION_NUM
(17,2,0,0)

22 
	~<πe_√t.h
>

25 
	ghash_löe
[] = "#######################################################################";

28 
	$c⁄vît_bôfõld
(
bf_•ec_t
 *
bf
)

30 
uöt32_t
 
mask
;

31 *
p
;

32 
uöt32_t
 
i
;

33 
∫d_bômask
[33];

35 
	`mem£t
(
∫d_bômask
, 0, (rnd_bitmask));

36 
	`mem£t
(
∫d_bômask
, '.', (rnd_bitmask) - 1);

38 
p
 = 
∫d_bômask
;

39 
i
 = 0; i < 
MAX_BITFIELD_SIZE
; i++) {

40 
mask
 = (
uöt32_t
)(1 << (
MAX_BITFIELD_SIZE
 - 
i
 - 1));

44 
p
[
i
] =

45 ((
	`¡ohl
(
bf
->
∫dMask
Ë& 
mask
) != 0) ? 'X' :

46 ((
	`¡ohl
(
bf
->
™dMask
Ë& 
mask
) == 0) ? '0' :

47 ((
	`¡ohl
(
bf
->
‹Mask
Ë& 
mask
) != 0) ? '1' : '.';

50  
∫d_bômask
;

51 
	}
}

66 
	$pktgí_s¸ùt_ßve
(*
∑th
)

68 
p‹t_öfo_t
 *
öfo
;

69 
pkt_£q_t
 *
pkt
;

70 
ønge_öfo_t
 *
ønge
;

71 
uöt32_t
 
Êags
;

72 
buff
[64];

73 
FILE
 *
fd
;

74 
i
, 
j
;

75 
uöt64_t
 
lc‹e
;

76 
ëhî_addr
 
óddr
;

78 
fd
 = 
	`f›í
(
∑th
, "w");

79 i‡(
fd
 =
NULL
)

82 
i
 = 0, 
lc‹e
 = 0; i < 
RTE_MAX_LCORE
; i++)

83 i‡(
	`πe_lc‹e_is_íabÀd
(
i
) )

84 
lc‹e
 |(1 << 
i
);

86 
	`Ârötf
(
fd
, "#\n# Pktgí - %s\n", 
	`pktgí_vîsi⁄
());

87 
	`Ârötf
(
fd
, "# %s, %s\n\n", 
	`c›yright_msg
(), 
	`powîed_by
());

90 
	`Ârötf
(
fd
, "# CommandÜineárguments: (DPDKárgsáre defaults)\n");

91 
	`Ârötf
(
fd
, "# %†-¯%" 
PRIx64
 " -n 3 -m 512 --proc-type %s -- ",

92 
pktgí
.
¨gv
[0],

93 
lc‹e
,

94 (
	`πe_ól_¥o˚ss_ty≥
() ==

95 
RTE_PROC_PRIMARY
) ? "primary" : "secondary");

96 
i
 = 1; i < 
pktgí
.
¨gc
; i++)

97 
	`Ârötf
(
fd
, "%†", 
pktgí
.
¨gv
[
i
]);

98 
	`Ârötf
(
fd
, "\n\n%s\n", 
hash_löe
);

100 
	`Ârötf
(
fd
, "# Pktgen Configuration script information:\n");

101 
	`Ârötf
(
fd
, "# GUI socket is %s\n",

102 (
pktgí
.
Êags
 & 
ENABLE_GUI_FLAG
) ? "Enabled" : "Not Enabled");

103 
	`Ârötf
(
fd
, "# Fœg†%08x\n", 
pktgí
.
Êags
);

104 
	`Ârötf
(
fd
, "# Numbî o‡p‹ts: %d\n", 
pktgí
.
nb_p‹ts
);

105 
	`Ârötf
(
fd
, "# NumberÖortsÖerÖage: %d\n",

106 
pktgí
.
nb_p‹ts_≥r_∑ge
);

107 
	`Ârötf
(
fd
, "# Number descriptors: RX %d TX: %d\n",

108 
pktgí
.
nb_rxd
,Öktgí.
nb_txd
);

109 
	`Ârötf
(
fd
, "# Promiscuous mode is %s\n\n",

110 (
pktgí
.
Êags
 & 
PROMISCUOUS_ON_FLAG
) ? "Enabled" : "Disabled");

113 
	`Ârötf
(
fd
, "# Port Descriptions (-- = blacklistedÖort):\n");

114 
i
 = 0; i < 
RTE_MAX_ETHPORTS
; i++)

115 i‡(
pktgí
.
p‹tdesc
[
i
] &&

116 
	`°æí
((*)
pktgí
.
p‹tdesc
[
i
]) ) {

117 i‡–(
pktgí
.
íabÀd_p‹t_mask
 & (1 << 
i
)) == 0)

118 
	`°r˝y
(
buff
, "--");

120 
	`°r˝y
(
buff
, "++");

122 
	`Ârötf
(
fd
, "# %†%s\n", 
buff
, 
pktgí
.
p‹tdesc
[
i
]);

126 
	`Ârötf
(
fd
, "\n# Global configuration:\n");

127 
uöt16_t
 
rows
, 
cﬁs
;

128 
	`pktgí_di•œy_gë_geomëry
(&
rows
, &
cﬁs
);

129 
	`Ârötf
(
fd
, "geomëry %dx%d\n", 
cﬁs
, 
rows
);

130 
	`Ârötf
(
fd
, "%s mac_from_arp\n\n",

131 (
pktgí
.
Êags
 & 
MAC_FROM_ARP_FLAG
) ? "enable" : "disable");

133 
i
 = 0; i < 
RTE_MAX_ETHPORTS
; i++) {

134 
öfo
 = &
pktgí
.öfo[
i
];

135 
pkt
 = &
öfo
->
£q_pkt
[
SINGLE_PKT
];

136 
ønge
 = &
öfo
->range;

138 i‡(
öfo
->
tx_bur°
 == 0)

141 
	`Ârötf
(
fd
,

142 "######################### P‹à%2d ##################################\n", 
i
);

143 i‡(
	`πe_©omic64_ªad
(&
öfo
->
å™smô_cou¡
) == 0)

144 
	`°r˝y
(
buff
, "Forever");

146 
	`¢¥ötf
(
buff
, (buff), "%" 
PRIu64
,

147 
	`πe_©omic64_ªad
(&
öfo
->
å™smô_cou¡
));

148 
	`Ârötf
(
fd
, "#\n");

149 
Êags
 = 
	`πe_©omic32_ªad
(&
öfo
->
p‹t_Êags
);

150 
	`Ârötf
(
fd
, "# Port: %2d, Burst:%3d, Rate:%g%%, Flags:%08x, TX Count:%s\n",

151 
öfo
->
pid
, info->
tx_bur°
, info->
tx_øã
, 
Êags
, 
buff
);

152 
	`Ârötf
(
fd
, "# Sequence count:%d, Prime:%d VLAN ID:%04x, ",

153 
öfo
->
£qC¡
, info->
¥ime_˙t
, info->
vœnid
);

154 
	`pktgí_lök_°©e
(
öfo
->
pid
, 
buff
, (buff));

155 
	`Ârötf
(
fd
, "Lök: %s\n", 
buff
);

157 
	`Ârötf
(
fd
, "#\n# Set upÅheÖrimaryÖort information:\n");

158 
	`Ârötf
(
fd
, "£à%d cou¡ %" 
PRIu64
 "\n", 
öfo
->
pid
,

159 
	`πe_©omic64_ªad
(&
öfo
->
å™smô_cou¡
));

160 
	`Ârötf
(
fd
, "£à%d sizê%d\n", 
öfo
->
pid
, 
pkt
->
pktSize
 + 
FCS_SIZE
);

161 
	`Ârötf
(
fd
, "£à%dÑ©ê%g\n", 
öfo
->
pid
, info->
tx_øã
);

162 
	`Ârötf
(
fd
, "£à%d bur° %d\n", 
öfo
->
pid
, info->
tx_bur°
);

163 
	`Ârötf
(
fd
, "£à%d sp‹à%d\n", 
öfo
->
pid
, 
pkt
->
•‹t
);

164 
	`Ârötf
(
fd
, "£à%d dp‹à%d\n", 
öfo
->
pid
, 
pkt
->
dp‹t
);

165 
	`Ârötf
(
fd
, "£à%dÖrimê%d\n", 
öfo
->
pid
, info->
¥ime_˙t
);

166 
	`Ârötf
(
fd
, "£à%dÅy≥ %s\n", 
i
,

167 (
pkt
->
ëhTy≥
 =
ETHER_TYPE_IPv4
) ? "ipv4" :

168 (
pkt
->
ëhTy≥
 =
ETHER_TYPE_IPv6
) ? "ipv6" :

169 (
pkt
->
ëhTy≥
 =
ETHER_TYPE_VLAN
) ? "vlan" :

170 (
pkt
->
ëhTy≥
 =
ETHER_TYPE_ARP
) ? "arp" : "unknown");

171 
	`Ârötf
(
fd
, "£à%dÖrŸÿ%s\n", 
i
,

172 (
pkt
->
ùPrŸo
 =
PG_IPPROTO_TCP
) ? "tcp" :

173 (
pkt
->
ùPrŸo
 =
PG_IPPROTO_ICMP
) ? "icmp" : "udp");

174 
	`Ârötf
(
fd
, "£à%d d° i∞%s\n", 
i
,

175 
	`öë_¡›4
(
buff
, (buff),

176 
	`¡ohl
(
pkt
->
ù_d°_addr
.
addr
.
ùv4
.
s_addr
),

178 
	`Ârötf
(
fd
, "£à%d sr¯ù %s\n", 
i
,

179 
	`öë_¡›4
(
buff
, (buff),

180 
	`¡ohl
(
pkt
->
ù_§c_addr
.
addr
.
ùv4
.
s_addr
),

181 
pkt
->
ù_mask
));

182 
	`Ârötf
(
fd
, "£à%d d° ma¯%s\n", 
öfo
->
pid
,

183 
	`öë_mtﬂ
(
buff
, (buff), &
pkt
->
ëh_d°_addr
));

184 
	`Ârötf
(
fd
, "£à%d sr¯ma¯%s\n", 
öfo
->
pid
,

185 
	`öë_mtﬂ
(
buff
, (buff), &
pkt
->
ëh_§c_addr
));

186 
	`Ârötf
(
fd
, "£à%d vœnid %d\n\n", 
i
, 
pkt
->
vœnid
);

188 
	`Ârötf
(
fd
, "£à%dÖ©ã∫ %s\n", 
i
,

189 (
öfo
->
fûl_∑âîn_ty≥
 =
ABC_FILL_PATTERN
) ? "abc" :

190 (
öfo
->
fûl_∑âîn_ty≥
 =
NO_FILL_PATTERN
) ? "none" :

191 (
öfo
->
fûl_∑âîn_ty≥
 ==

192 
ZERO_FILL_PATTERN
) ? "zero" : "user");

193 i‡((
öfo
->
fûl_∑âîn_ty≥
 =
USER_FILL_PATTERN
Ë&& 
	`°æí
(öfo->
u£r_∑âîn
)) {

194 
buff
[32];

195 
	`mem£t
(
buff
, 0, (buff));

196 
	`°∫˝y
(
buff
, 
öfo
->
u£r_∑âîn
, (info->user_pattern));

197 
	`Ârötf
(
fd
, "£à%d u£∏∑âî¿%s\n", 
i
, 
buff
);

199 
	`Ârötf
(
fd
, "\n");

201 
	`Ârötf
(
fd
, "£à%d jôã∏%" 
PRIu64
 "\n", 
i
, 
öfo
->
jôãr_thªshﬁd
);

202 
	`Ârötf
(
fd
, "%sable %d mpls\n",

203 (
Êags
 & 
SEND_MPLS_LABEL
Ë? "í" : "dis", 
i
);

204 
	`•rötf
(
buff
, "%x", 
pkt
->
m∂s_íåy
);

205 
	`Ârötf
(
fd
, "£à%d m∂s_íåy %s\n", 
i
, 
buff
);

207 
	`Ârötf
(
fd
, "%sable %d qinq\n",

208 (
Êags
 & 
SEND_Q_IN_Q_IDS
Ë? "í" : "dis", 
i
);

209 
	`Ârötf
(
fd
, "£à%d qöqid†%d %d\n", 
i
,

210 
pkt
->
qöq_ouãrid
,Ökt->
qöq_ö√rid
);

212 
	`Ârötf
(
fd
, "%sable %d gre\n",

213 (
Êags
 & 
SEND_GRE_IPv4_HEADER
Ë? "í" : "dis", 
i
);

214 
	`Ârötf
(
fd
, "%sable %d gre_eth\n",

215 (
Êags
 & 
SEND_GRE_ETHER_HEADER
Ë? "í" : "dis", 
i
);

216 
	`Ârötf
(
fd
, "£à%d gª_key %d\n", 
i
, 
pkt
->
gª_key
);

218 
	`Ârötf
(
fd
, "#\n# Port flag values:\n");

219 
	`Ârötf
(
fd
, "%sable %d icmp\n",

220 (
Êags
 & 
ICMP_ECHO_ENABLE_FLAG
Ë? "í" : "dis", 
i
);

221 
	`Ârötf
(
fd
, "%sable %dÖcap\n",

222 (
Êags
 & 
SEND_PCAP_PKTS
Ë? "í" : "dis", 
i
);

223 
	`Ârötf
(
fd
, "%sable %dÑange\n",

224 (
Êags
 & 
SEND_RANGE_PKTS
Ë? "í" : "dis", 
i
);

225 
	`Ârötf
(
fd
, "%sable %dÜatency\n",

226 (
Êags
 & 
SEND_LATENCY_PKTS
Ë? "í" : "dis", 
i
);

227 
	`Ârötf
(
fd
, "%sable %dÖrocess\n",

228 (
Êags
 & 
PROCESS_INPUT_PKTS
Ë? "í" : "dis", 
i
);

229 
	`Ârötf
(
fd
, "%sable %d capture\n",

230 (
Êags
 & 
CAPTURE_PKTS
Ë? "í" : "dis", 
i
);

231 
	`Ârötf
(
fd
, "%sable %dÑx_tap\n",

232 (
Êags
 & 
PROCESS_RX_TAP_PKTS
Ë? "í" : "dis", 
i
);

233 
	`Ârötf
(
fd
, "%sable %dÅx_tap\n",

234 (
Êags
 & 
PROCESS_TX_TAP_PKTS
Ë? "í" : "dis", 
i
);

235 
	`Ârötf
(
fd
, "%sable %d vlan\n\n",

236 (
Êags
 & 
SEND_VLAN_ID
Ë? "í" : "dis", 
i
);

238 
	`Ârötf
(
fd
, "#\n# RangeÖacket information:\n");

239 
	`Ârötf
(
fd
, "øngê%d ma¯§¯°¨à%s\n", 
i
,

240 
	`öë_mtﬂ
(
buff
, (buff),

241 
	`öë_h64tom
(
ønge
->
§c_mac
, &
óddr
)));

242 
	`Ârötf
(
fd
, "øngê%d ma¯§¯mö %s\n", 
i
,

243 
	`öë_mtﬂ
(
buff
, (buff),

244 
	`öë_h64tom
(
ønge
->
§c_mac_mö
, &
óddr
)));

245 
	`Ârötf
(
fd
, "øngê%d ma¯§¯max %s\n", 
i
,

246 
	`öë_mtﬂ
(
buff
, (buff),

247 
	`öë_h64tom
(
ønge
->
§c_mac_max
, &
óddr
)));

248 
	`Ârötf
(
fd
, "øngê%d ma¯§¯ö¯%s\n", 
i
,

249 
	`öë_mtﬂ
(
buff
, (buff),

250 
	`öë_h64tom
(
ønge
->
§c_mac_öc
, &
óddr
)));

252 
	`Ârötf
(
fd
, "øngê%d ma¯d° sèπ %s\n", 
i
,

253 
	`öë_mtﬂ
(
buff
, (buff),

254 
	`öë_h64tom
(
ønge
->
d°_mac
, &
óddr
)));

255 
	`Ârötf
(
fd
, "øngê%d ma¯d° mö %s\n", 
i
,

256 
	`öë_mtﬂ
(
buff
, (buff),

257 
	`öë_h64tom
(
ønge
->
d°_mac_mö
, &
óddr
)));

258 
	`Ârötf
(
fd
, "øngê%d ma¯d° max %s\n", 
i
,

259 
	`öë_mtﬂ
(
buff
, (buff),

260 
	`öë_h64tom
(
ønge
->
d°_mac_max
, &
óddr
)));

261 
	`Ârötf
(
fd
, "øngê%d ma¯d° in¯%s\n", 
i
,

262 
	`öë_mtﬂ
(
buff
, (buff),

263 
	`öë_h64tom
(
ønge
->
d°_mac_öc
, &
óddr
)));

265 
	`Ârötf
(
fd
, "\n");

266 
	`Ârötf
(
fd
, "øngê%d sr¯ù sèπ %s\n", 
i
,

267 
	`öë_¡›4
(
buff
, (buff), 
	`¡ohl
(
ønge
->
§c_ù
),

269 
	`Ârötf
(
fd
, "øngê%d sr¯ù mö %s\n", 
i
,

270 
	`öë_¡›4
(
buff
, (buff), 
	`¡ohl
(
ønge
->
§c_ù_mö
),

272 
	`Ârötf
(
fd
, "øngê%d sr¯ù max %s\n", 
i
,

273 
	`öë_¡›4
(
buff
, (buff), 
	`¡ohl
(
ønge
->
§c_ù_max
),

275 
	`Ârötf
(
fd
, "øngê%d sr¯ù in¯%s\n", 
i
,

276 
	`öë_¡›4
(
buff
, (buff), 
	`¡ohl
(
ønge
->
§c_ù_öc
),

279 
	`Ârötf
(
fd
, "\n");

280 
	`Ârötf
(
fd
, "øngê%d d° i∞°¨à%s\n", 
i
,

281 
	`öë_¡›4
(
buff
, (buff), 
	`¡ohl
(
ønge
->
d°_ù
),

283 
	`Ârötf
(
fd
, "øngê%d d° i∞mö %s\n", 
i
,

284 
	`öë_¡›4
(
buff
, (buff), 
	`¡ohl
(
ønge
->
d°_ù_mö
),

286 
	`Ârötf
(
fd
, "øngê%d d° i∞max %s\n", 
i
,

287 
	`öë_¡›4
(
buff
, (buff), 
	`¡ohl
(
ønge
->
d°_ù_max
),

289 
	`Ârötf
(
fd
, "øngê%d d° i∞ö¯%s\n", 
i
,

290 
	`öë_¡›4
(
buff
, (buff), 
	`¡ohl
(
ønge
->
d°_ù_öc
),

293 
	`Ârötf
(
fd
, "\n");

294 
	`Ârötf
(
fd
, "øngê%dÖrŸÿ%s\n", 
i
,

295 (
ønge
->
ù_¥Ÿo
 =
PG_IPPROTO_UDP
) ? "udp" :

296 (
ønge
->
ù_¥Ÿo
 =
PG_IPPROTO_ICMP
) ? "icmp" : "tcp");

298 
	`Ârötf
(
fd
, "\n");

299 
	`Ârötf
(
fd
, "øngê%d sp‹à°¨à%d\n", 
i
, 
ønge
->
§c_p‹t
);

300 
	`Ârötf
(
fd
, "øngê%d sp‹àmö %d\n", 
i
, 
ønge
->
§c_p‹t_mö
);

301 
	`Ârötf
(
fd
, "øngê%d sp‹àmax %d\n", 
i
, 
ønge
->
§c_p‹t_max
);

302 
	`Ârötf
(
fd
, "øngê%d sp‹àö¯%d\n", 
i
, 
ønge
->
§c_p‹t_öc
);

304 
	`Ârötf
(
fd
, "\n");

305 
	`Ârötf
(
fd
, "øngê%d dp‹à°¨à%d\n", 
i
, 
ønge
->
d°_p‹t
);

306 
	`Ârötf
(
fd
, "øngê%d dp‹àmö %d\n", 
i
, 
ønge
->
d°_p‹t_mö
);

307 
	`Ârötf
(
fd
, "øngê%d dp‹àmax %d\n", 
i
, 
ønge
->
d°_p‹t_max
);

308 
	`Ârötf
(
fd
, "øngê%d dp‹àö¯%d\n", 
i
, 
ønge
->
d°_p‹t_öc
);

310 
	`Ârötf
(
fd
, "\n");

311 
	`Ârötf
(
fd
, "øngê%d vœ¿°¨à%d\n", 
i
, 
ønge
->
vœn_id
);

312 
	`Ârötf
(
fd
, "øngê%d vœ¿mö %d\n", 
i
, 
ønge
->
vœn_id_mö
);

313 
	`Ârötf
(
fd
, "øngê%d vœ¿max %d\n", 
i
, 
ønge
->
vœn_id_max
);

314 
	`Ârötf
(
fd
, "øngê%d vœ¿ö¯%d\n", 
i
, 
ønge
->
vœn_id_öc
);

316 
	`Ârötf
(
fd
, "\n");

317 
	`Ârötf
(
fd
, "øngê%d co†°¨à%d\n", 
i
, 
ønge
->
cos
);

318 
	`Ârötf
(
fd
, "øngê%d co†mö %d\n", 
i
, 
ønge
->
cos_mö
);

319 
	`Ârötf
(
fd
, "øngê%d co†max %d\n", 
i
, 
ønge
->
cos_max
);

320 
	`Ârötf
(
fd
, "øngê%d co†ö¯%d\n", 
i
, 
ønge
->
cos_öc
);

322 
	`Ârötf
(
fd
, "\n");

323 
	`Ârötf
(
fd
, "øngê%dÅo†°¨à%d\n", 
i
, 
ønge
->
tos
);

324 
	`Ârötf
(
fd
, "øngê%dÅo†mö %d\n", 
i
, 
ønge
->
tos_mö
);

325 
	`Ârötf
(
fd
, "øngê%dÅo†max %d\n", 
i
, 
ønge
->
tos_max
);

326 
	`Ârötf
(
fd
, "øngê%dÅo†ö¯%d\n", 
i
, 
ønge
->
tos_öc
);

329 
	`Ârötf
(
fd
, "\n");

330 
	`Ârötf
(
fd
, "øngê%d sizê°¨à%d\n", 
i
,

331 
ønge
->
pkt_size
 + 
FCS_SIZE
);

332 
	`Ârötf
(
fd
, "øngê%d sizêmö %d\n", 
i
,

333 
ønge
->
pkt_size_mö
 + 
FCS_SIZE
);

334 
	`Ârötf
(
fd
, "øngê%d sizêmax %d\n", 
i
,

335 
ønge
->
pkt_size_max
 + 
FCS_SIZE
);

336 
	`Ârötf
(
fd
, "øngê%d sizêö¯%d\n\n", 
i
, 
ønge
->
pkt_size_öc
);

338 
	`Ârötf
(
fd
, "#\n# Set upÅhe sequence data forÅheÖort.\n");

339 
	`Ârötf
(
fd
, "£à%d seq_˙à%d\n", 
öfo
->
pid
, info->
£qC¡
);

340 
j
 = 0; j < 
öfo
->
£qC¡
; j++) {

341 
pkt
 = &
öfo
->
£q_pkt
[
j
];

342 
	`Ârötf
(
fd
, "£q %d %d %†", 
j
, 
i
,

343 
	`öë_mtﬂ
(
buff
,

344 (
buff
),

345 &
pkt
->
ëh_d°_addr
));

346 
	`Ârötf
(
fd
, "%s ",

347 
	`öë_mtﬂ
(
buff
,

348 (
buff
),

349 &
pkt
->
ëh_§c_addr
));

350 
	`Ârötf
(
fd
, "%s ",

351 
	`öë_¡›4
(
buff
, (buff),

352 
	`ht⁄l
(
pkt
->
ù_d°_addr
.
addr
.
ùv4
.

353 
s_addr
),

355 
	`Ârötf
(
fd
, "%s ",

356 
	`öë_¡›4
(
buff
, (buff),

357 
	`ht⁄l
(
pkt
->
ù_§c_addr
.
addr
.
ùv4
.

358 
s_addr
),

359 
pkt
->
ù_mask
));

360 
	`Ârötf
(
fd
, "%d %d %s %s %d %d %d\n",

361 
pkt
->
•‹t
,

362 
pkt
->
dp‹t
,

363 (
pkt
->
ëhTy≥
 =
ETHER_TYPE_IPv4
) ? "ipv4" :

364 (
pkt
->
ëhTy≥
 =
ETHER_TYPE_IPv6
) ? "ipv6" :

365 (
pkt
->
ëhTy≥
 ==

366 
ETHER_TYPE_VLAN
) ? "vlan" : "Other",

367 (
pkt
->
ùPrŸo
 =
PG_IPPROTO_TCP
) ? "tcp" :

368 (
pkt
->
ùPrŸo
 ==

369 
PG_IPPROTO_ICMP
) ? "icmp" : "udp",

370 
pkt
->
vœnid
,

371 
pkt
->
pktSize
 + 
FCS_SIZE
,

372 
pkt
->
gçu_ãid
);

375 i‡(
pktgí
.
öfo
[
i
].
pˇp
) {

376 
	`Ârötf
(
fd
, "#\n# PCAPÖ‹à%d\n", 
i
);

377 
	`Ârötf
(
fd
, "# Packet count: %d\n",

378 
pktgí
.
öfo
[
i
].
pˇp
->
pkt_cou¡
);

379 
	`Ârötf
(
fd
, "# Filename : %s\n",

380 
pktgí
.
öfo
[
i
].
pˇp
->
fûíame
);

382 
	`Ârötf
(
fd
, "\n");

384 i‡(
öfo
->
∫d_bôfõlds
 && info->∫d_bôfõlds->
a˘ive_•ecs
) {

385 
uöt32_t
 
a˘ive
 = 
öfo
->
∫d_bôfõlds
->
a˘ive_•ecs
;

386 
bf_•ec_t
 *
bf
;

387 
	`Ârötf
(
fd
, "\n-- Rnd bitfeilds\n");

388 
j
 = 0; j < 
MAX_RND_BITFIELDS
; j++) {

389 i‡((
a˘ive
 & (1 << 
j
)) == 0)

391 
bf
 = &
öfo
->
∫d_bôfõlds
->
•ecs
[
j
];

392 
	`Ârötf
(
fd
, "set %dÑnd %d %d %s\n",

393 
i
, 
j
, 
bf
->
off£t
, 
	`c⁄vît_bôfõld
(bf));

395 
	`Ârötf
(
fd
, "\n");

397 
	`Ârötf
(
fd
, "################################ Done #################################\n");

399 
	`fchmod
(
	`fûío
(
fd
), 0666);

400 
	`f˛o£
(
fd
);

402 
	}
}

417 
	$pktgí_lua_ßve
(*
∑th
)

419 
p‹t_öfo_t
 *
öfo
;

420 
pkt_£q_t
 *
pkt
;

421 
ønge_öfo_t
 *
ønge
;

422 
uöt32_t
 
Êags
;

423 
buff
[64];

424 
FILE
 *
fd
;

425 
i
, 
j
;

426 
uöt64_t
 
lc‹e
;

427 
ëhî_addr
 
óddr
;

429 
fd
 = 
	`f›í
(
∑th
, "w");

430 i‡(
fd
 =
NULL
)

433 
i
 = 0, 
lc‹e
 = 0; i < 
RTE_MAX_LCORE
; i++)

434 i‡(
	`πe_lc‹e_is_íabÀd
(
i
) )

435 
lc‹e
 |(1 << 
i
);

437 
	`Ârötf
(
fd
, "--\n-- Pktgí - %s\n", 
	`pktgí_vîsi⁄
());

438 
	`Ârötf
(
fd
, "-- %s, %s\n\n", 
	`c›yright_msg
(), 
	`powîed_by
());

441 
	`Ârötf
(
fd
, "-- CommandÜineárguments: (DPDKárgsáre defaults)\n");

442 
	`Ârötf
(
fd
, "-- %†-¯%" 
PRIx64
 " -n 3 -m 512 --proc-type %s -- ",

443 
pktgí
.
¨gv
[0],

444 
lc‹e
,

445 (
	`πe_ól_¥o˚ss_ty≥
() ==

446 
RTE_PROC_PRIMARY
) ? "primary" : "secondary");

447 
i
 = 1; i < 
pktgí
.
¨gc
; i++)

448 
	`Ârötf
(
fd
, "%†", 
pktgí
.
¨gv
[
i
]);

449 
	`Ârötf
(
fd
, "\n\n-- %s\n", 
hash_löe
);

451 
	`Ârötf
(
fd
, "-- Pktgen Configuration script information:\n");

452 
	`Ârötf
(
fd
, "-- GUI socket is %s\n",

453 (
pktgí
.
Êags
 & 
ENABLE_GUI_FLAG
) ? "Enabled" : "Not Enabled");

454 
	`Ârötf
(
fd
, "-- Fœg†%08x\n", 
pktgí
.
Êags
);

455 
	`Ârötf
(
fd
, "-- Numbî o‡p‹ts: %d\n", 
pktgí
.
nb_p‹ts
);

456 
	`Ârötf
(
fd
, "-- NumberÖortsÖerÖage: %d\n",

457 
pktgí
.
nb_p‹ts_≥r_∑ge
);

458 
	`Ârötf
(
fd
, "-- Number descriptors: RX %d TX: %d\n",

459 
pktgí
.
nb_rxd
,Öktgí.
nb_txd
);

460 
	`Ârötf
(
fd
, "-- Promiscuous mode is %s\n\n",

461 (
pktgí
.
Êags
 & 
PROMISCUOUS_ON_FLAG
) ? "Enabled" : "Disabled");

463 
	`Ârötf
(
fd
, "\n--%s\n", 
hash_löe
);

465 
	`Ârötf
(
fd
, "-- Global configuration:\n");

466 
uöt16_t
 
rows
, 
cﬁs
;

467 
	`pktgí_di•œy_gë_geomëry
(&
rows
, &
cﬁs
);

468 
	`Ârötf
(
fd
, "-- geomëry %dx%d\n", 
cﬁs
, 
rows
);

469 
	`Ârötf
(
fd
, "pktgen.mac_from_arp(\"%s\");\n\n",

470 (
pktgí
.
Êags
 & 
MAC_FROM_ARP_FLAG
) ? "enable" : "disable");

472 
i
 = 0; i < 
RTE_MAX_ETHPORTS
; i++) {

473 
öfo
 = &
pktgí
.öfo[
i
];

474 
pkt
 = &
öfo
->
£q_pkt
[
SINGLE_PKT
];

475 
ønge
 = &
öfo
->range;

477 i‡(
öfo
->
tx_bur°
 == 0)

480 
	`Ârötf
(
fd
,

481 "-- ######################### P‹à%2d ##################################\n", 
i
);

482 i‡(
	`πe_©omic64_ªad
(&
öfo
->
å™smô_cou¡
) == 0)

483 
	`°r˝y
(
buff
, "Forever");

485 
	`¢¥ötf
(
buff
, (buff), "%" 
PRIu64
,

486 
	`πe_©omic64_ªad
(&
öfo
->
å™smô_cou¡
));

487 
	`Ârötf
(
fd
, "-- \n");

488 
Êags
 = 
	`πe_©omic32_ªad
(&
öfo
->
p‹t_Êags
);

489 
	`Ârötf
(
fd
, "-- Port: %2d, Burst:%3d, Rate:%g%%, Flags:%08x, TX Count:%s\n",

490 
öfo
->
pid
, info->
tx_bur°
, info->
tx_øã
, 
Êags
, 
buff
);

491 
	`Ârötf
(
fd
, "-- Sequence Count:%d, Prime:%d VLAN ID:%04x, ",

492 
öfo
->
£qC¡
, info->
¥ime_˙t
, info->
vœnid
);

493 
	`pktgí_lök_°©e
(
öfo
->
pid
, 
buff
, (buff));

494 
	`Ârötf
(
fd
, "Lök: %s\n", 
buff
);

496 
	`Ârötf
(
fd
, "--\n-- Set upÅheÖrimaryÖort information:\n");

497 
	`Ârötf
(
fd
, "pktgí.£t('%d', 'cou¡', %" 
PRIu64
 ");\n", 
öfo
->
pid
,

498 
	`πe_©omic64_ªad
(&
öfo
->
å™smô_cou¡
));

499 
	`Ârötf
(
fd
, "pktgí.£t('%d', 'size', %d);\n", 
öfo
->
pid
, 
pkt
->
pktSize
 + 
FCS_SIZE
);

500 
	`Ârötf
(
fd
, "pktgí.£t('%d', 'øã', %g);\n", 
öfo
->
pid
, info->
tx_øã
);

501 
	`Ârötf
(
fd
, "pktgí.£t('%d', 'bur°', %d);\n", 
öfo
->
pid
, info->
tx_bur°
);

502 
	`Ârötf
(
fd
, "pktgí.£t('%d', '•‹t', %d);\n", 
öfo
->
pid
, 
pkt
->
•‹t
);

503 
	`Ârötf
(
fd
, "pktgí.£t('%d', 'dp‹t', %d);\n", 
öfo
->
pid
, 
pkt
->
dp‹t
);

504 
	`Ârötf
(
fd
, "pktgí.£t('%d', '¥ime', %d);\n", 
öfo
->
pid
, info->
¥ime_˙t
);

505 
	`Ârötf
(
fd
, "pktgí.£t_ty≥('%d', '%s');\n", 
i
,

506 (
pkt
->
ëhTy≥
 =
ETHER_TYPE_IPv4
) ? "ipv4" :

507 (
pkt
->
ëhTy≥
 =
ETHER_TYPE_IPv6
) ? "ipv6" :

508 (
pkt
->
ëhTy≥
 =
ETHER_TYPE_VLAN
) ? "vlan" :

509 (
pkt
->
ëhTy≥
 =
ETHER_TYPE_ARP
) ? "arp" : "unknown");

510 
	`Ârötf
(
fd
, "pktgí.£t_¥Ÿo('%d', '%s');\n", 
i
,

511 (
pkt
->
ùPrŸo
 =
PG_IPPROTO_TCP
) ? "tcp" :

512 (
pkt
->
ùPrŸo
 =
PG_IPPROTO_ICMP
) ? "icmp" : "udp");

513 
	`Ârötf
(
fd
, "pktgí.£t_ùaddr('%d', 'd°', '%s');\n", 
i
,

514 
	`öë_¡›4
(
buff
, (buff),

515 
	`¡ohl
(
pkt
->
ù_d°_addr
.
addr
.
ùv4
.
s_addr
),

517 
	`Ârötf
(
fd
, "pktgí.£t_ùaddr('%d', '§c','%s');\n", 
i
,

518 
	`öë_¡›4
(
buff
, (buff),

519 
	`¡ohl
(
pkt
->
ù_§c_addr
.
addr
.
ùv4
.
s_addr
),

520 
pkt
->
ù_mask
));

521 
	`Ârötf
(
fd
, "pktgí.£t_mac('%d', '%s');\n", 
öfo
->
pid
,

522 
	`öë_mtﬂ
(
buff
, (buff), &
pkt
->
ëh_d°_addr
));

523 
	`Ârötf
(
fd
, "pktgí.vœnid('%d', %d);\n\n", 
i
, 
pkt
->
vœnid
);

525 
	`Ârötf
(
fd
, "pktgí.∑âîn('%d', '%s');\n", 
i
,

526 (
öfo
->
fûl_∑âîn_ty≥
 =
ABC_FILL_PATTERN
) ? "abc" :

527 (
öfo
->
fûl_∑âîn_ty≥
 =
NO_FILL_PATTERN
) ? "none" :

528 (
öfo
->
fûl_∑âîn_ty≥
 ==

529 
ZERO_FILL_PATTERN
) ? "zero" : "user");

530 i‡((
öfo
->
fûl_∑âîn_ty≥
 =
USER_FILL_PATTERN
Ë&& 
	`°æí
(öfo->
u£r_∑âîn
)) {

531 
buff
[32];

532 
	`mem£t
(
buff
, 0, (buff));

533 
	`°∫˝y
(
buff
, 
öfo
->
u£r_∑âîn
, (info->user_pattern));

534 
	`Ârötf
(
fd
, "pktgí.u£rP©ã∫('%d', '%s');\n", 
i
, 
buff
);

536 
	`Ârötf
(
fd
, "\n");

538 
	`fÊush
(
fd
);

539 
	`Ârötf
(
fd
, "pktgí.jôãr('%d', %lu);\n", 
i
, 
öfo
->
jôãr_thªshﬁd
);

540 
	`Ârötf
(
fd
, "pktgí.m∂s('%d', '%ßbÀ');\n", 
i
,

541 (
Êags
 & 
SEND_MPLS_LABEL
) ? "en" : "dis");

542 
	`•rötf
(
buff
, "%x", 
pkt
->
m∂s_íåy
);

543 
	`Ârötf
(
fd
, "pktgí.m∂s_íåy('%d', '%s');\n", 
i
, 
buff
);

545 
	`Ârötf
(
fd
, "pktgí.qöq('%d', '%ßbÀ');\n", 
i
,

546 (
Êags
 & 
SEND_Q_IN_Q_IDS
) ? "en" : "dis");

547 
	`Ârötf
(
fd
, "pktgí.qöqids('%d', %d, %d);\n", 
i
,

548 
pkt
->
qöq_ouãrid
,Ökt->
qöq_ö√rid
);

550 
	`Ârötf
(
fd
, "pktgí.gª('%d', '%ßbÀ');\n", 
i
,

551 (
Êags
 & 
SEND_GRE_IPv4_HEADER
) ? "en" : "dis");

552 
	`Ârötf
(
fd
, "pktgí.gª_ëh('%d', '%ßbÀ');\n", 
i
,

553 (
Êags
 & 
SEND_GRE_ETHER_HEADER
) ? "en" : "dis");

554 
	`Ârötf
(
fd
, "pktgí.gª_key('%d', %d);\n", 
i
, 
pkt
->
gª_key
);

556 
	`Ârötf
(
fd
, "--\n-- Port flag values:\n");

557 
	`Ârötf
(
fd
, "pktgí.icmp_echo('%d', '%ßbÀ');\n", 
i
,

558 (
Êags
 & 
ICMP_ECHO_ENABLE_FLAG
) ? "en" : "dis");

559 
	`Ârötf
(
fd
, "pktgí.pˇp('%d', '%ßbÀ');\n", 
i
,

560 (
Êags
 & 
SEND_PCAP_PKTS
) ? "en" : "dis");

561 
	`Ârötf
(
fd
, "pktgí.£t_ønge('%d', '%ßbÀ');\n", 
i
,

562 (
Êags
 & 
SEND_RANGE_PKTS
) ? "en" : "dis");

563 
	`Ârötf
(
fd
, "pktgí.œãncy('%d', '%ßbÀ');\n", 
i
,

564 (
Êags
 & 
SEND_LATENCY_PKTS
) ? "en" : "dis");

565 
	`Ârötf
(
fd
, "pktgí.¥o˚ss('%d', '%ßbÀ');\n", 
i
,

566 (
Êags
 & 
PROCESS_INPUT_PKTS
) ? "en" : "dis");

567 
	`Ârötf
(
fd
, "pktgí.ˇ±uª('%d', '%ßbÀ');\n", 
i
,

568 (
Êags
 & 
CAPTURE_PKTS
) ? "en" : "dis");

569 
	`Ârötf
(
fd
, "pktgí.rxèp('%d', '%ßbÀ');\n", 
i
,

570 (
Êags
 & 
PROCESS_RX_TAP_PKTS
) ? "en" : "dis");

571 
	`Ârötf
(
fd
, "pktgí.txèp('%d', '%ßbÀ');\n", 
i
,

572 (
Êags
 & 
PROCESS_TX_TAP_PKTS
) ? "en" : "dis");

573 
	`Ârötf
(
fd
, "pktgí.vœn('%d', '%ßbÀ');\n\n", 
i
,

574 (
Êags
 & 
SEND_VLAN_ID
) ? "en" : "dis");

575 
	`fÊush
(
fd
);

576 
	`Ârötf
(
fd
, "--\n-- RangeÖacket information:\n");

577 
	`Ârötf
(
fd
, "pktgí.§c_mac('%d', '°¨t', '%s');\n", 
i
,

578 
	`öë_mtﬂ
(
buff
, (buff),

579 
	`öë_h64tom
(
ønge
->
§c_mac
, &
óddr
)));

580 
	`Ârötf
(
fd
, "pktgí.§c_mac('%d', 'mö', '%s');\n", 
i
,

581 
	`öë_mtﬂ
(
buff
, (buff),

582 
	`öë_h64tom
(
ønge
->
§c_mac_mö
, &
óddr
)));

583 
	`Ârötf
(
fd
, "pktgí.§c_mac('%d', 'max', '%s');\n", 
i
,

584 
	`öë_mtﬂ
(
buff
, (buff),

585 
	`öë_h64tom
(
ønge
->
§c_mac_max
, &
óddr
)));

586 
	`Ârötf
(
fd
, "pktgí.§c_mac('%d', 'öc', '%s');\n", 
i
,

587 
	`öë_mtﬂ
(
buff
, (buff),

588 
	`öë_h64tom
(
ønge
->
§c_mac_öc
, &
óddr
)));

590 
	`Ârötf
(
fd
, "pktgí.d°_mac('%d', '°¨t', '%s');\n", 
i
,

591 
	`öë_mtﬂ
(
buff
, (buff),

592 
	`öë_h64tom
(
ønge
->
d°_mac
, &
óddr
)));

593 
	`Ârötf
(
fd
, "pktgí.d°_mac('%d', 'mö', '%s');\n", 
i
,

594 
	`öë_mtﬂ
(
buff
, (buff),

595 
	`öë_h64tom
(
ønge
->
d°_mac_mö
, &
óddr
)));

596 
	`Ârötf
(
fd
, "pktgí.d°_mac('%d', 'max', '%s');\n", 
i
,

597 
	`öë_mtﬂ
(
buff
, (buff),

598 
	`öë_h64tom
(
ønge
->
d°_mac_max
, &
óddr
)));

599 
	`Ârötf
(
fd
, "pktgí.d°_mac('%d', 'öc', '%s');\n", 
i
,

600 
	`öë_mtﬂ
(
buff
, (buff),

601 
	`öë_h64tom
(
ønge
->
d°_mac_öc
, &
óddr
)));

603 
	`Ârötf
(
fd
, "\n");

604 
	`Ârötf
(
fd
, "pktgí.§c_ù('%d', '°¨t', '%s');\n", 
i
,

605 
	`öë_¡›4
(
buff
, (buff), 
	`¡ohl
(
ønge
->
§c_ù
),

607 
	`Ârötf
(
fd
, "pktgí.§c_ù('%d', 'mö', '%s');\n", 
i
,

608 
	`öë_¡›4
(
buff
, (buff), 
	`¡ohl
(
ønge
->
§c_ù_mö
),

610 
	`Ârötf
(
fd
, "pktgí.§c_ù('%d', 'max', '%s');\n", 
i
,

611 
	`öë_¡›4
(
buff
, (buff), 
	`¡ohl
(
ønge
->
§c_ù_max
),

613 
	`Ârötf
(
fd
, "pktgí.§c_ù(';%d', 'öc', '%s');\n", 
i
,

614 
	`öë_¡›4
(
buff
, (buff), 
	`¡ohl
(
ønge
->
§c_ù_öc
),

617 
	`Ârötf
(
fd
, "\n");

618 
	`Ârötf
(
fd
, "pktgí.d°_ù('%d', '°¨t', '%s');\n", 
i
,

619 
	`öë_¡›4
(
buff
, (buff), 
	`¡ohl
(
ønge
->
d°_ù
),

621 
	`Ârötf
(
fd
, "pktgí.d°_ù('%d', 'mö', '%s');\n", 
i
,

622 
	`öë_¡›4
(
buff
, (buff), 
	`¡ohl
(
ønge
->
d°_ù_mö
),

624 
	`Ârötf
(
fd
, "pktgí.d°_ù('%d', 'max', '%s');\n", 
i
,

625 
	`öë_¡›4
(
buff
, (buff), 
	`¡ohl
(
ønge
->
d°_ù_max
),

627 
	`Ârötf
(
fd
, "pktgí.d°_ù('%d', 'öc', '%s');\n", 
i
,

628 
	`öë_¡›4
(
buff
, (buff), 
	`¡ohl
(
ønge
->
d°_ù_öc
),

631 
	`Ârötf
(
fd
, "\n");

632 
	`Ârötf
(
fd
, "pktgí.ù_¥Ÿo('%d', '%s');\n", 
i
,

633 (
ønge
->
ù_¥Ÿo
 =
PG_IPPROTO_UDP
) ? "udp" :

634 (
ønge
->
ù_¥Ÿo
 =
PG_IPPROTO_ICMP
) ? "icmp" : "tcp");

636 
	`Ârötf
(
fd
, "\n");

637 
	`Ârötf
(
fd
, "pktgí.§c_p‹t('%d', '°¨t', %d);\n", 
i
, 
ønge
->
§c_p‹t
);

638 
	`Ârötf
(
fd
, "pktgí.§c_p‹t('%d', 'mö', %d);\n", 
i
, 
ønge
->
§c_p‹t_mö
);

639 
	`Ârötf
(
fd
, "pktgí.§c_p‹t('%d', 'max', %d);\n", 
i
, 
ønge
->
§c_p‹t_max
);

640 
	`Ârötf
(
fd
, "pktgí.§c_p‹t('%d', 'öc', %d);\n", 
i
, 
ønge
->
§c_p‹t_öc
);

642 
	`Ârötf
(
fd
, "\n");

643 
	`Ârötf
(
fd
, "pktgí.d°_p‹t('%d', '°¨t', %d);\n", 
i
, 
ønge
->
d°_p‹t
);

644 
	`Ârötf
(
fd
, "pktgí.d°_p‹t('%d', 'mö', %d);\n", 
i
, 
ønge
->
d°_p‹t_mö
);

645 
	`Ârötf
(
fd
, "pktgí.d°_p‹t('%d', 'max', %d);\n", 
i
, 
ønge
->
d°_p‹t_max
);

646 
	`Ârötf
(
fd
, "pktgí.d°_p‹t('%d', 'öc', %d);\n", 
i
, 
ønge
->
d°_p‹t_öc
);

648 
	`Ârötf
(
fd
, "\n");

649 
	`Ârötf
(
fd
, "pktgí.vœn_id('%d', '°¨t', %d);\n", 
i
, 
ønge
->
vœn_id
);

650 
	`Ârötf
(
fd
, "pktgí.vœn_id('%d', 'mö', %d);\n", 
i
, 
ønge
->
vœn_id_mö
);

651 
	`Ârötf
(
fd
, "pktgí.vœn_id('%d', 'max', %d);\n", 
i
, 
ønge
->
vœn_id_max
);

652 
	`Ârötf
(
fd
, "pktgí.vœn_id('%d', 'öc', %d);\n", 
i
, 
ønge
->
vœn_id_öc
);

654 
	`Ârötf
(
fd
, "\n");

655 
	`Ârötf
(
fd
, "pktgí.cos('%d', '°¨t', %d);\n", 
i
, 
ønge
->
cos
);

656 
	`Ârötf
(
fd
, "pktgí.cos('%d', 'mö', %d);\n", 
i
, 
ønge
->
cos_mö
);

657 
	`Ârötf
(
fd
, "pktgí.cos('%d', 'max', %d);\n", 
i
, 
ønge
->
cos_max
);

658 
	`Ârötf
(
fd
, "pktgí.cos('%d', 'öc', %d);\n", 
i
, 
ønge
->
cos_öc
);

660 
	`Ârötf
(
fd
, "\n");

661 
	`Ârötf
(
fd
, "pktgí.tos('%d', '°¨t', %d);\n", 
i
, 
ønge
->
tos
);

662 
	`Ârötf
(
fd
, "pktgí.tos('%d', 'mö', %d);\n", 
i
, 
ønge
->
tos_mö
);

663 
	`Ârötf
(
fd
, "pktgí.tos('%d', 'max', %d);\n", 
i
, 
ønge
->
tos_max
);

664 
	`Ârötf
(
fd
, "pktgí.tos('%d', 'öc', %d);\n", 
i
, 
ønge
->
tos_öc
);

667 
	`Ârötf
(
fd
, "\n");

668 
	`Ârötf
(
fd
, "pktgí.pkt_size('%d', '°¨t', %d);\n", 
i
,

669 
ønge
->
pkt_size
 + 
FCS_SIZE
);

670 
	`Ârötf
(
fd
, "pktgí.pkt_size('%d', 'mö', %d);\n", 
i
,

671 
ønge
->
pkt_size_mö
 + 
FCS_SIZE
);

672 
	`Ârötf
(
fd
, "pktgí.pkt_size('%d', 'max', %d);\n", 
i
,

673 
ønge
->
pkt_size_max
 + 
FCS_SIZE
);

674 
	`Ârötf
(
fd
, "pktgí.pkt_size('%d', 'öc', %d);\n\n", 
i
, 
ønge
->
pkt_size_öc
);

676 
	`Ârötf
(
fd
, "--\n-- Set upÅhe sequence data forÅheÖort.\n");

677 
	`Ârötf
(
fd
, "pktgí.£t('%d', '£q_˙t', %d);\n\n", 
öfo
->
pid
, info->
£qC¡
);

678 
	`fÊush
(
fd
);

679 i‡(
öfo
->
£qC¡
) {

680 
	`Ârötf
(

681 
fd
,

683 
j
 = 0; j < 
öfo
->
£qC¡
; j++) {

684 
pkt
 = &
öfo
->
£q_pkt
[
j
];

685 
	`Ârötf
(
fd
, "--Öktgí.£q(%d, '%d', '%s' ", 
j
, 
i
,

686 
	`öë_mtﬂ
(
buff
,

687 (
buff
),

688 &
pkt
->
ëh_d°_addr
));

689 
	`Ârötf
(
fd
, "'%s', ",

690 
	`öë_mtﬂ
(
buff
,

691 (
buff
),

692 &
pkt
->
ëh_§c_addr
));

693 
	`Ârötf
(
fd
, "'%s', ",

694 
	`öë_¡›4
(
buff
, (buff),

695 
	`ht⁄l
(
pkt
->
ù_d°_addr
.
addr
.
ùv4
.

696 
s_addr
),

698 
	`Ârötf
(
fd
, "'%s', ",

699 
	`öë_¡›4
(
buff
, (buff),

700 
	`ht⁄l
(
pkt
->
ù_§c_addr
.
addr
.
ùv4
.

701 
s_addr
),

702 
pkt
->
ù_mask
));

703 
	`Ârötf
(
fd
, "%d, %d, '%s', '%s', %d, %d, %d);\n",

704 
pkt
->
•‹t
,

705 
pkt
->
dp‹t
,

706 (
pkt
->
ëhTy≥
 =
ETHER_TYPE_IPv4
) ? "ipv4" :

707 (
pkt
->
ëhTy≥
 =
ETHER_TYPE_IPv6
) ? "ipv6" :

708 (
pkt
->
ëhTy≥
 ==

709 
ETHER_TYPE_VLAN
) ? "vlan" : "Other",

710 (
pkt
->
ùPrŸo
 =
PG_IPPROTO_TCP
) ? "tcp" :

711 (
pkt
->
ùPrŸo
 ==

712 
PG_IPPROTO_ICMP
) ? "icmp" : "udp",

713 
pkt
->
vœnid
,

714 
pkt
->
pktSize
 + 
FCS_SIZE
,

715 
pkt
->
gçu_ãid
);

717 
	`fÊush
(
fd
);

718 
	`Ârötf
(
fd
, "local seq_table = {}\n");

719 
j
 = 0; j < 
öfo
->
£qC¡
; j++) {

720 
pkt
 = &
öfo
->
£q_pkt
[
j
];

721 
	`Ârötf
(
fd
, "£q_èbÀ[%d] = {\n", 
j
);

722 
	`Ârötf
(
fd
, " ['eth_dst_addr'] = '%s',\n",

723 
	`öë_mtﬂ
(
buff
, (buff), &
pkt
->
ëh_d°_addr
));

724 
	`Ârötf
(
fd
, " ['eth_src_addr'] = '%s',\n",

725 
	`öë_mtﬂ
(
buff
, (buff), &
pkt
->
ëh_§c_addr
));

726 
	`Ârötf
(
fd
, " ['ip_dst_addr'] = '%s',\n",

727 
	`öë_¡›4
(
buff
, (buff),

728 
	`ht⁄l
(
pkt
->
ù_d°_addr
.
addr
.
ùv4
.
s_addr
),

730 
	`Ârötf
(
fd
, " ['ip_src_addr'] = '%s',\n",

731 
	`öë_¡›4
(
buff
, (buff),

732 
	`ht⁄l
(
pkt
->
ù_§c_addr
.
addr
.
ùv4
.
s_addr
),

734 
	`Ârötf
(
fd
, " ['•‹t'] = %d,\n", 
pkt
->
•‹t
);

735 
	`Ârötf
(
fd
, " ['dp‹t'] = %d,\n", 
pkt
->
dp‹t
);

736 
	`Ârötf
(
fd
, " ['ethType'] = '%s',\n",

737 (
pkt
->
ëhTy≥
 =
ETHER_TYPE_IPv4
) ? "ipv4" :

738 (
pkt
->
ëhTy≥
 =
ETHER_TYPE_IPv6
) ? "ipv6" :

739 (
pkt
->
ëhTy≥
 =
ETHER_TYPE_VLAN
) ? "vlan" : "Other");

740 
	`Ârötf
(
fd
, " ['ipProto'] = '%s',\n",

741 (
pkt
->
ùPrŸo
 =
PG_IPPROTO_TCP
) ? "tcp" :

742 (
pkt
->
ùPrŸo
 =
PG_IPPROTO_ICMP
) ? "icmp" : "udp");

743 
	`Ârötf
(
fd
, " ['vœnid'] = %d,\n", 
pkt
->
vœnid
);

744 
	`Ârötf
(
fd
, " ['pktSize'] = %d,\n", 
pkt
->
pktSize
);

745 
	`Ârötf
(
fd
, " ['gçu_ãid'] = %d\n", 
pkt
->
gçu_ãid
);

746 
	`Ârötf
(
fd
, "}\n");

748 
	`fÊush
(
fd
);

749 
j
 = 0; j < 
öfo
->
£qC¡
; j++)

750 
	`Ârötf
(
fd
, "pktgí.£qTabÀ(%d, '%d', seq_èbÀ[%d]);\n", 
j
, 
i
, j);

752 
	`fÊush
(
fd
);

753 i‡(
pktgí
.
öfo
[
i
].
pˇp
) {

754 
	`Ârötf
(
fd
, "--\n-- PCAPÖ‹à%d\n", 
i
);

755 
	`Ârötf
(
fd
, "-- Packet count: %d\n",

756 
pktgí
.
öfo
[
i
].
pˇp
->
pkt_cou¡
);

757 
	`Ârötf
(
fd
, "-- Filename : %s\n",

758 
pktgí
.
öfo
[
i
].
pˇp
->
fûíame
);

760 
	`Ârötf
(
fd
, "\n");

761 
	`fÊush
(
fd
);

762 i‡(
öfo
->
∫d_bôfõlds
 && info->∫d_bôfõlds->
a˘ive_•ecs
) {

763 
uöt32_t
 
a˘ive
 = 
öfo
->
∫d_bôfõlds
->
a˘ive_•ecs
;

764 
bf_•ec_t
 *
bf
;

765 
	`Ârötf
(
fd
, "\n-- Rnd bô„ûds\n"); 
	`fÊush
(fd);

766 
j
 = 0; j < 
MAX_RND_BITFIELDS
; j++) {

767 i‡((
a˘ive
 & (1 << 
j
)) == 0)

769 
bf
 = &
öfo
->
∫d_bôfõlds
->
•ecs
[
j
];

770 
	`Ârötf
(
fd
, "pktgen.rnd('%d', %d, %d, '%s');\n",

771 
i
, 
j
, 
bf
->
off£t
, 
	`c⁄vît_bôfõld
(bf));

773 
	`Ârötf
(
fd
, "\n");

776 
	`Ârötf
(
fd
, "-- ################################ Done #################################\n");

777 
	`fÊush
(
fd
);

779 
	`fchmod
(
	`fûío
(
fd
), 0666);

780 
	`f˛o£
(
fd
);

782 
	}
}

797 
	$pktgí_ßve
(*
∑th
)

799 i‡(
	`°rˇ£°r
(
∑th
, ".lua"Ë!
NULL
)

800  
	`pktgí_lua_ßve
(
∑th
);

802  
	`pktgí_s¸ùt_ßve
(
∑th
);

803 
	}
}

818 
	$pktgí_p‹t_å™smôtög
(
p‹t
)

820  
	`πe_©omic32_ªad
(&
pktgí
.
öfo
[
p‹t
].
p‹t_Êags
) &

821 
SENDING_PACKETS
;

822 
	}
}

837 
	$pktgí_lök_°©e
(
p‹t
, *
buff
, 
Àn
)

839 
p‹t_öfo_t
 *
öfo
 = &
pktgí
.öfo[
p‹t
];

841 i‡(
öfo
->
lök
.
lök_°©us
)

842 
	`¢¥ötf
(
buff
, 
Àn
, "<UP-%u-%s>",

843 (
uöt32_t
)
öfo
->
lök
.
lök_•ìd
,

844 (
öfo
->
lök
.
lök_du∂ex
 ==

845 
ETH_LINK_FULL_DUPLEX
) ? ("FD") : ("HD"));

847 
	`¢¥ötf
(
buff
, 
Àn
, "<--Down-->");

849  
buff
;

850 
	}
}

865 
	$pktgí_å™smô_cou¡_øã
(
p‹t
, *
buff
, 
Àn
)

867 
p‹t_öfo_t
 *
öfo
 = &
pktgí
.öfo[
p‹t
];

869 i‡(
	`πe_©omic64_ªad
(&
öfo
->
å™smô_cou¡
) == 0)

870 
	`¢¥ötf
(
buff
, 
Àn
, "F‹evî /%g%%", 
öfo
->
tx_øã
);

872 
	`¢¥ötf
(
buff
, 
Àn
, "%" 
PRIu64
 " /%g%%",

873 
	`πe_©omic64_ªad
(&
öfo
->
å™smô_cou¡
),

874 
öfo
->
tx_øã
);

876  
buff
;

877 
	}
}

892 
	$pktgí_p‹t_sizes
(
p‹t
, 
p‹t_sizes_t
 *
psizes
)

894 
p‹t_öfo_t
 *
öfo
 = &
pktgí
.öfo[
p‹t
];

896 *
psizes
 = 
öfo
->
sizes
;

898 
	}
}

913 
	$pktgí_pkt_°©s
(
p‹t
, 
pkt_°©s_t
 *
p°©s
)

915 
p‹t_öfo_t
 *
öfo
 = &
pktgí
.öfo[
p‹t
];

917 *
p°©s
 = 
öfo
->
°©s
;

919 
	}
}

934 
	$pktgí_p‹t_°©s
(
p‹t
, c⁄° *
«me
, 
ëh_°©s_t
 *
p°©s
)

936 
p‹t_öfo_t
 *
öfo
 = &
pktgí
.öfo[
p‹t
];

938 i‡(
	`°rcmp
(
«me
, "port") == 0)

939 *
p°©s
 = 
öfo
->
¥ev_°©s
;

940 i‡(
	`°rcmp
(
«me
, "rate") == 0)

941 *
p°©s
 = 
öfo
->
øã_°©s
;

944 
	}
}

959 
	$pktgí_Êags_°rög
(
p‹t_öfo_t
 *
öfo
)

961 
buff
[32];

962 
uöt32_t
 
Êags
 = 
	`πe_©omic32_ªad
(&
öfo
->
p‹t_Êags
);

964 
	`¢¥ötf
(
buff
, (buff), "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c",

965 (
pktgí
.
Êags
 & 
PROMISCUOUS_ON_FLAG
) ? 'P' : '-',

966 (
Êags
 & 
ICMP_ECHO_ENABLE_FLAG
) ? 'E' : '-',

967 (
Êags
 & 
SEND_ARP_REQUEST
) ? 'A' : '-',

968 (
Êags
 & 
SEND_GRATUITOUS_ARP
) ? 'G' : '-',

969 (
Êags
 & 
SEND_PCAP_PKTS
) ? 'p' : '-',

970 (
Êags
 & 
SEND_SEQ_PKTS
) ? 'S' : '-',

971 (
Êags
 & 
SEND_RANGE_PKTS
) ? 'R' : '-',

972 (
Êags
 & 
PROCESS_INPUT_PKTS
) ? 'I' : '-',

973 "-π*"[(
Êags
 & (
PROCESS_RX_TAP_PKTS
 | 
PROCESS_TX_TAP_PKTS
)) >> 9],

974 (
Êags
 & 
SEND_LATENCY_PKTS
) ? 'L' : '-',

975 (
Êags
 & 
SEND_VLAN_ID
) ? 'V' :

976 (
Êags
 & 
SEND_MPLS_LABEL
) ? 'M' :

977 (
Êags
 & 
SEND_Q_IN_Q_IDS
) ? 'Q' : '-',

978 (
Êags
 & 
PROCESS_GARP_PKTS
) ? 'g' : '-',

979 (
Êags
 & 
SEND_GRE_IPv4_HEADER
) ? 'g' :

980 (
Êags
 & 
SEND_GRE_ETHER_HEADER
) ? 'G' : '-',

981 (
Êags
 & 
CAPTURE_PKTS
) ? 'C' : '-',

982 (
Êags
 & 
SEND_RANDOM_PKTS
) ? 'r' : '-');

984  
buff
;

985 
	}
}

997 
	$pktgí_upd©e_di•œy
()

999 
pktgí
.
Êags
 |
PRINT_LABELS_FLAG
;

1000 
pktgí
.
Êags
 |
UPDATE_DISPLAY_FLAG
;

1001 
	}
}

1016 
	$pktgí_˛ór_di•œy
()

1018 i‡(!
	`s¸n_is_∑u£d
()) {

1019 
	`s¸n_∑u£
();

1021 
	`s¸n_˛s
();

1022 
	`s¸n_pos
(100, 1);

1024 
	`pktgí_upd©e_di•œy
();

1026 
	`s¸n_ªsume
();

1028 
	`pktgí_∑ge_di•œy
(
NULL
, NULL);

1030 
	}
}

1042 
	$pktgí_f‹˚_upd©e
()

1044 
pktgí
.
Êags
 |
UPDATE_DISPLAY_FLAG
;

1046 i‡(!
	`s¸n_is_∑u£d
())

1047 
	`pktgí_∑ge_di•œy
(
NULL
, NULL);

1048 
	}
}

1063 
	$pktgí_£t_∑ge_size
(
uöt32_t
 
∑ge_size
)

1065 i‡–(
∑ge_size
 > 0Ë&& (∑ge_sizê<
pktgí
.
nb_p‹ts
) &&

1066 (
∑ge_size
 <= 6) ) {

1067 
pktgí
.
nb_p‹ts_≥r_∑ge
 = 
∑ge_size
;

1068 
pktgí
.
ídög_p‹t
 =Öktgí.
°¨tög_p‹t
 + 
∑ge_size
;

1069 i‡(
pktgí
.
ídög_p‹t
 >=

1070 (
pktgí
.
°¨tög_p‹t
 +Öktgí.
nb_p‹ts
) )

1071 
pktgí
.
ídög_p‹t
 =

1072 (
pktgí
.
°¨tög_p‹t
 +Öktgí.
nb_p‹ts
);

1073 
	`pktgí_˛ór_di•œy
();

1075 
	}
}

1090 
	$pktgí_s¸ìn
(
°©e
)

1092 
uöt16_t
 
rows
;

1094 
	`pktgí_di•œy_gë_geomëry
(&
rows
, 
NULL
);

1096 i‡(
°©e
 =
DISABLE_STATE
) {

1097 i‡(!
	`s¸n_is_∑u£d
() ) {

1098 
	`s¸n_∑u£
();

1099 
	`s¸n_˛s
();

1100 
	`s¸n_£tw
(1);

1101 
	`s¸n_pos
(100, 1);

1104 
	`s¸n_˛s
();

1105 
	`s¸n_£tw
(
pktgí
.
œ°_row
 + 1);

1106 
	`s¸n_ªsume
();

1107 
	`s¸n_pos
(100, 1);

1108 
	`pktgí_f‹˚_upd©e
();

1110 
	}
}

1125 
	$pktgí_£t_p‹t_numbî
(
uöt32_t
 
p‹t_numbî
)

1127 i‡(
p‹t_numbî
 <
pktgí
.
nb_p‹ts
) {

1128 
pktgí
.
p‹tNum
 = 
p‹t_numbî
;

1129 
	`pktgí_˛ór_di•œy
();

1131 
	}
}

1146 
	$íabÀ_icmp_echo
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
⁄Off
)

1148 i‡(
⁄Off
 =
ENABLE_STATE
)

1149 
	`pktgí_£t_p‹t_Êags
(
öfo
, 
ICMP_ECHO_ENABLE_FLAG
);

1151 
	`pktgí_˛r_p‹t_Êags
(
öfo
, 
ICMP_ECHO_ENABLE_FLAG
);

1152 
	}
}

1167 
	$íabÀ_rx_èp
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
⁄Off
)

1169 i‡(
⁄Off
 =
ENABLE_STATE
) {

1170 
i‰eq
 
i‰
;

1171 
sockfd
, 
i
;

1172 c⁄° *
èpdevs
[] =

1173 { "/dev/√t/tun", "/dev/tun", 
NULL
 };

1175 
i
 = 0; 
èpdevs
[i]; i++)

1176 i‡–(
öfo
->
rx_èpfd
 = 
	`›í
(
èpdevs
[
i
], 
O_RDWR
)) >= 0)

1178 i‡(
èpdevs
[
i
] =
NULL
) {

1179 
	`pktgí_log_îr‹
("UnableÅo create TUN/TAP interface");

1182 
	`mem£t
(&
i‰
, 0, (
i‰eq
));

1184 
i‰
.
i‰_Êags
 = 
IFF_TAP
 | 
IFF_NO_PI
;

1186 
	`¢¥ötf
(
i‰
.
i‰_«me
, 
IFNAMSIZ
, "%s%d", "pg_rxèp", 
öfo
->
pid
);

1187 i‡(
	`io˘l
(
öfo
->
rx_èpfd
, 
TUNSETIFF
, (*)&
i‰
) < 0) {

1188 
	`pktgí_log_îr‹
("UnableÅo set TUNSETIFF for %s",

1189 
i‰
.
i‰_«me
);

1190 
	`˛o£
(
öfo
->
rx_èpfd
);

1191 
öfo
->
rx_èpfd
 = 0;

1195 
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

1197 
i‰
.
i‰_Êags
 = 
IFF_UP
 | 
IFF_RUNNING
;

1198 i‡(
	`io˘l
(
sockfd
, 
SIOCSIFFLAGS
, (*)&
i‰
) < 0) {

1199 
	`pktgí_log_îr‹
("UnableÅo set SIOCSIFFLAGS for %s",

1200 
i‰
.
i‰_«me
);

1201 
	`˛o£
(
sockfd
);

1202 
	`˛o£
(
öfo
->
rx_èpfd
);

1203 
öfo
->
rx_èpfd
 = 0;

1206 
	`˛o£
(
sockfd
);

1207 
	`pktgí_£t_p‹t_Êags
(
öfo
, 
PROCESS_RX_TAP_PKTS
);

1209 i‡(
	`πe_©omic32_ªad
(&
öfo
->
p‹t_Êags
) &

1210 
PROCESS_RX_TAP_PKTS
) {

1211 
	`˛o£
(
öfo
->
rx_èpfd
);

1212 
öfo
->
rx_èpfd
 = 0;

1214 
	`pktgí_˛r_p‹t_Êags
(
öfo
, 
PROCESS_RX_TAP_PKTS
);

1216 
	}
}

1231 
	$íabÀ_tx_èp
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
⁄Off
)

1233 i‡(
⁄Off
 =
ENABLE_STATE
) {

1234 
i‰eq
 
i‰
;

1235 
sockfd
, 
i
;

1236 c⁄° *
èpdevs
[] =

1237 { "/dev/√t/tun", "/dev/tun", 
NULL
 };

1239 
i
 = 0; 
èpdevs
[i]; i++)

1240 i‡–(
öfo
->
tx_èpfd
 = 
	`›í
(
èpdevs
[
i
], 
O_RDWR
)) >= 0)

1242 i‡(
èpdevs
[
i
] =
NULL
) {

1243 
	`pktgí_log_îr‹
("UnableÅo create TUN/TAP interface.");

1246 
	`mem£t
(&
i‰
, 0, (
i‰eq
));

1248 
i‰
.
i‰_Êags
 = 
IFF_TAP
 | 
IFF_NO_PI
;

1250 
	`¢¥ötf
(
i‰
.
i‰_«me
, 
IFNAMSIZ
, "%s%d", "pg_txèp", 
öfo
->
pid
);

1251 i‡(
	`io˘l
(
öfo
->
tx_èpfd
, 
TUNSETIFF
, (*)&
i‰
) < 0) {

1252 
	`pktgí_log_îr‹
("UnableÅo set TUNSETIFF for %s",

1253 
i‰
.
i‰_«me
);

1254 
	`˛o£
(
öfo
->
tx_èpfd
);

1255 
öfo
->
tx_èpfd
 = 0;

1259 
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

1261 
i‰
.
i‰_Êags
 = 
IFF_UP
 | 
IFF_RUNNING
;

1262 i‡(
	`io˘l
(
sockfd
, 
SIOCSIFFLAGS
, (*)&
i‰
) < 0) {

1263 
	`pktgí_log_îr‹
("UnableÅo set SIOCSIFFLAGS for %s",

1264 
i‰
.
i‰_«me
);

1265 
	`˛o£
(
sockfd
);

1266 
	`˛o£
(
öfo
->
tx_èpfd
);

1267 
öfo
->
tx_èpfd
 = 0;

1270 
	`˛o£
(
sockfd
);

1271 
	`pktgí_£t_p‹t_Êags
(
öfo
, 
PROCESS_TX_TAP_PKTS
);

1273 i‡(
	`πe_©omic32_ªad
(&
öfo
->
p‹t_Êags
) &

1274 
PROCESS_TX_TAP_PKTS
) {

1275 
	`˛o£
(
öfo
->
tx_èpfd
);

1276 
öfo
->
tx_èpfd
 = 0;

1278 
	`pktgí_˛r_p‹t_Êags
(
öfo
, 
PROCESS_TX_TAP_PKTS
);

1280 
	}
}

1295 
	$íabÀ_mac_‰om_¨p
(
uöt32_t
 
⁄Off
)

1297 i‡(
⁄Off
 =
ENABLE_STATE
)

1298 
pktgí
.
Êags
 |
MAC_FROM_ARP_FLAG
;

1300 
pktgí
.
Êags
 &~
MAC_FROM_ARP_FLAG
;

1301 
	}
}

1316 
	$íabÀ_øndom
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
⁄Off
)

1318 i‡(
⁄Off
 =
ENABLE_STATE
)

1319 
	`pktgí_£t_p‹t_Êags
(
öfo
, 
SEND_RANDOM_PKTS
);

1321 
	`pktgí_˛r_p‹t_Êags
(
öfo
, 
SEND_RANDOM_PKTS
);

1322 
	}
}

1329 
	$__mempoﬁ_dump
(
FILE
 *
f
, 
πe_mempoﬁ
 *
mp
) {

1330 i‡(
mp
 =
NULL
)

1332 
	`πe_mempoﬁ_dump
(
f
, 
mp
);

1333 
	}
}

1348 
	$debug_mempoﬁ_dump
(
p‹t_öfo_t
 *
öfo
, *
«me
)

1350 
Æl
;

1351 
uöt16_t
 
q
;

1353 
Æl
 = !
	`°rcmp
(
«me
, "all");

1355 i‡(
öfo
->
q
[0].
tx_mp
 =
NULL
)

1358 
q
 = 0; q < 
	`gë_p‹t_rx˙t
(
pktgí
.
l2p
, 
öfo
->
pid
); q++)

1359 i‡(
Æl
 || !
	`°rcmp
(
«me
, "rx") )

1360 
	`πe_mempoﬁ_dump
(
°dout
, 
öfo
->
q
[q].
rx_mp
);

1361 
q
 = 0; q < 
	`gë_p‹t_tx˙t
(
pktgí
.
l2p
, 
öfo
->
pid
); q++) {

1362 i‡(
Æl
 || (!
	`°rcmp
(
«me
,"tx") &&

1363 (
q
 < 
	`gë_p‹t_tx˙t
(
pktgí
.
l2p
, 
öfo
->
pid
))) )

1364 
	`__mempoﬁ_dump
(
°dout
, 
öfo
->
q
[q].
tx_mp
);

1365 i‡(
Æl
 || !
	`°rcmp
(
«me
, "range") )

1366 
	`__mempoﬁ_dump
(
°dout
, 
öfo
->
q
[q].
ønge_mp
);

1367 i‡(
Æl
 || !
	`°rcmp
(
«me
, "seq") )

1368 
	`__mempoﬁ_dump
(
°dout
, 
öfo
->
q
[q].
£q_mp
);

1369 i‡(
Æl
 || !
	`°rcmp
(
«me
, "arp") )

1370 
	`__mempoﬁ_dump
(
°dout
, 
öfo
->
q
[q].
•ecül_mp
);

1371 i‡(
Æl
 || !
	`°rcmp
(
«me
, "pcap") )

1372 
	`__mempoﬁ_dump
(
°dout
, 
öfo
->
q
[q].
pˇp_mp
);

1374 
	}
}

1389 
	$pktgí_°¨t_å™smôtög
(
p‹t_öfo_t
 *
öfo
)

1391 
uöt8_t
 
q
;

1393 i‡(!(
	`πe_©omic32_ªad
(&
öfo
->
p‹t_Êags
Ë& 
SENDING_PACKETS
) ) {

1394 
q
 = 0; q < 
	`gë_p‹t_tx˙t
(
pktgí
.
l2p
, 
öfo
->
pid
); q++)

1395 
	`pktgí_£t_q_Êags
(
öfo
, 
q
, 
CLEAR_FAST_ALLOC_FLAG
);

1397 
	`πe_©omic64_£t
(&
öfo
->
cuºít_tx_cou¡
,

1398 
	`πe_©omic64_ªad
(&
öfo
->
å™smô_cou¡
));

1400 
	`pktgí_£t_p‹t_Êags
(
öfo
, 
SENDING_PACKETS
);

1402 i‡(
	`πe_©omic64_ªad
(&
öfo
->
cuºít_tx_cou¡
) == 0)

1403 
	`pktgí_£t_p‹t_Êags
(
öfo
, 
SEND_FOREVER
);

1405 
	}
}

1420 
	$pktgí_°›_å™smôtög
(
p‹t_öfo_t
 *
öfo
)

1422 
uöt8_t
 
q
;

1424 i‡(
	`πe_©omic32_ªad
(&
öfo
->
p‹t_Êags
Ë& 
SENDING_PACKETS
) {

1425 
	`pktgí_˛r_p‹t_Êags
(
öfo
, (
SENDING_PACKETS
 | 
SEND_FOREVER
));

1426 
q
 = 0; q < 
	`gë_p‹t_tx˙t
(
pktgí
.
l2p
, 
öfo
->
pid
); q++)

1427 
	`pktgí_£t_q_Êags
(
öfo
, 
q
, 
DO_TX_FLUSH
);

1429 
	}
}

1445 
	$pktgí_¥ime_p‹ts
(
p‹t_öfo_t
 *
öfo
)

1447 
uöt8_t
 
q
;

1449 
q
 = 0; q < 
	`gë_p‹t_tx˙t
(
pktgí
.
l2p
, 
öfo
->
pid
); q++)

1450 
	`pktgí_£t_q_Êags
(
öfo
, 
q
, 
CLEAR_FAST_ALLOC_FLAG
);

1451 
	`πe_©omic64_£t
(&
öfo
->
cuºít_tx_cou¡
, info->
¥ime_˙t
);

1452 
	`pktgí_£t_p‹t_Êags
(
öfo
, 
SENDING_PACKETS
);

1453 
	`πe_dñay_ms
(300);

1454 
q
 = 0; q < 
	`gë_p‹t_tx˙t
(
pktgí
.
l2p
, 
öfo
->
pid
); q++)

1455 
	`pktgí_£t_q_Êags
(
öfo
, 
q
, 
DO_TX_FLUSH
);

1456 
	}
}

1471 
	$sögÀ_£t_¥Ÿo
(
p‹t_öfo_t
 *
öfo
, *
ty≥
)

1473 
öfo
->
£q_pkt
[
SINGLE_PKT
].
ùPrŸo
 = (
ty≥
[0] ='u'Ë? 
PG_IPPROTO_UDP
 :

1474 (
ty≥
[0] ='i'Ë? 
PG_IPPROTO_ICMP
 :

1475 (
ty≥
[0] ='t'Ë? 
PG_IPPROTO_TCP
 :

1476  
PG_IPPROTO_TCP
;

1479 i‡(
ty≥
[0] == 'i')

1480 
öfo
->
£q_pkt
[
SINGLE_PKT
].
ëhTy≥
 = 
ETHER_TYPE_IPv4
;

1482 
	`pktgí_∑ckë_˘‹
(
öfo
, 
SINGLE_PKT
, -1);

1483 
	}
}

1498 
	$ønge_£t_¥Ÿo
(
p‹t_öfo_t
 *
öfo
, c⁄° *
ty≥
)

1500 
öfo
->
£q_pkt
[
RANGE_PKT
].
ùPrŸo
 = (
ty≥
[0] ='u'Ë? 
PG_IPPROTO_UDP
 :

1501 (
ty≥
[0] ='i'Ë? 
PG_IPPROTO_ICMP
 :

1502 (
ty≥
[0] ='t'Ë? 
PG_IPPROTO_TCP
 :

1503  
PG_IPPROTO_TCP
;

1504 
öfo
->
ønge
.
ù_¥Ÿo
 = info->
£q_pkt
[
RANGE_PKT
].
ùPrŸo
;

1507 i‡(
ty≥
[0] == 'i')

1508 
öfo
->
£q_pkt
[
RANGE_PKT
].
ëhTy≥
 = 
ETHER_TYPE_IPv4
;

1509 
	}
}

1524 
	$íabÀ_pˇp
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
°©e
)

1526 i‡–(
öfo
->
pˇp
 !
NULL
Ë&& (öfo->pˇp->
pkt_cou¡
 != 0) ) {

1527 i‡(
°©e
 =
ENABLE_STATE
) {

1528 
	`pktgí_˛r_p‹t_Êags
(
öfo
, 
SEND_RANGE_PKTS
);

1529 
	`pktgí_˛r_p‹t_Êags
(
öfo
, 
SEND_SEQ_PKTS
);

1530 
	`pktgí_£t_p‹t_Êags
(
öfo
, 
SEND_PCAP_PKTS
);

1532 
	`pktgí_˛r_p‹t_Êags
(
öfo
, 
SEND_PCAP_PKTS
);

1533 
	`pktgí_∑ckë_øã
(
öfo
);

1535 
	}
}

1550 
	$pˇp_fûãr
(
p‹t_öfo_t
 *
öfo
, *
°r
)

1552 
pˇp_t
 *
pc
 = 
	`pˇp_›í_dód
(
DLT_EN10MB
, 65535);

1554 
öfo
->
pˇp_ªsu…
 = 
	`pˇp_compûe
(
pc
,

1555 &
öfo
->
pˇp_¥ogøm
,

1556 
°r
,

1558 
PCAP_NETMASK_UNKNOWN
);

1560 
	`pˇp_˛o£
(
pc
);

1561 
	}
}

1576 
	$debug_blök
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
°©e
)

1578 i‡(
°©e
 =
ENABLE_STATE
)

1579 
pktgí
.
blökli°
 |(1 << 
öfo
->
pid
);

1581 
pktgí
.
blökli°
 &~(1 << 
öfo
->
pid
);

1582 
	`πe_ëh_Àd_⁄
(
öfo
->
pid
);

1584 
	}
}

1599 
	$íabÀ_¥o˚ss
(
p‹t_öfo_t
 *
öfo
, 
°©e
)

1601 i‡(
°©e
 =
ENABLE_STATE
)

1602 
	`pktgí_£t_p‹t_Êags
(
öfo
, 
PROCESS_INPUT_PKTS
);

1604 
	`pktgí_˛r_p‹t_Êags
(
öfo
, 
PROCESS_INPUT_PKTS
);

1605 
	}
}

1620 
	$íabÀ_ˇ±uª
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
°©e
)

1622 
	`pktgí_£t_ˇ±uª
(
öfo
, 
°©e
);

1623 
	}
}

1638 
	$íabÀ_b⁄dög
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
°©e
)

1640 i‡(
°©e
 =
ENABLE_STATE
)

1641 
	`pktgí_£t_p‹t_Êags
(
öfo
, 
BONDING_TX_PACKETS
);

1643 
	`pktgí_˛r_p‹t_Êags
(
öfo
, 
BONDING_TX_PACKETS
);

1644 
	}
}

1659 
	$íabÀ_sh‹t_pkts
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
°©e
)

1661 i‡(
°©e
 =
ENABLE_STATE
)

1662 
	`pktgí_£t_p‹t_Êags
(
öfo
, 
SEND_SHORT_PACKETS
);

1664 
	`pktgí_˛r_p‹t_Êags
(
öfo
, 
SEND_SHORT_PACKETS
);

1665 
	}
}

1680 
	$íabÀ_g¨p
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
°©e
)

1682 i‡(
°©e
 =
ENABLE_STATE
)

1683 
	`pktgí_£t_p‹t_Êags
(
öfo
,

1684 
PROCESS_GARP_PKTS
 | 
PROCESS_INPUT_PKTS
);

1686 
	`pktgí_˛r_p‹t_Êags
(
öfo
,

1687 
PROCESS_GARP_PKTS
 | 
PROCESS_INPUT_PKTS
);

1688 
	}
}

1703 
	$ønge_£t_pkt_ty≥
(
p‹t_öfo_t
 *
öfo
, c⁄° *
ty≥
)

1705 
öfo
->
£q_pkt
[
RANGE_PKT
].
ëhTy≥
 = (
ty≥
[0] ='a'Ë? 
ETHER_TYPE_ARP
 :

1706 (
ty≥
[3] ='4'Ë? 
ETHER_TYPE_IPv4
 :

1707 (
ty≥
[3] ='6'Ë? 
ETHER_TYPE_IPv6
 :

1708  
ETHER_TYPE_IPv4
;

1709 
	}
}

1724 
	$sögÀ_£t_pkt_ty≥
(
p‹t_öfo_t
 *
öfo
, c⁄° *
ty≥
)

1726 
pkt_£q_t
 *
pkt
 = &
öfo
->
£q_pkt
[
SINGLE_PKT
];

1727 
uöt16_t
 
ëhty≥
 = 
pkt
->
ëhTy≥
;

1729 
pkt
->
ëhTy≥
 =

1730 (
ty≥
[0] ='a'Ë? 
ETHER_TYPE_ARP
 :

1731 (
ty≥
[3] ='4'Ë? 
ETHER_TYPE_IPv4
 :

1732 (
ty≥
[3] ='6'Ë? 
ETHER_TYPE_IPv6
 :

1733 (
ty≥
[2] ='4'Ë? 
ETHER_TYPE_IPv4
 :

1734 (
ty≥
[2] ='6'Ë? 
ETHER_TYPE_IPv6
 :

1735  
ETHER_TYPE_IPv4
;

1737 i‡((
ëhty≥
 =
ETHER_TYPE_IPv6
Ë&& (
pkt
->
ëhTy≥
 =
ETHER_TYPE_IPv4
)) {

1738 i‡(
pkt
->
pktSize
 >
MIN_v6_PKT_SIZE
)

1739 
pkt
->
pktSize
 = 
MIN_PKT_SIZE
 + (pkt->pktSizê- 
MIN_v6_PKT_SIZE
);

1741 i‡((
ëhty≥
 =
ETHER_TYPE_IPv4
Ë&& (
pkt
->
ëhTy≥
 =
ETHER_TYPE_IPv6
)) {

1742 i‡(
pkt
->
pktSize
 < 
MIN_v6_PKT_SIZE
)

1743 
pkt
->
pktSize
 = 
MIN_v6_PKT_SIZE
 + (pkt->pktSizê- 
MIN_PKT_SIZE
);

1746 
	`pktgí_∑ckë_˘‹
(
öfo
, 
SINGLE_PKT
, -1);

1747 
	}
}

1762 
	$íabÀ_vœn
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
⁄Off
)

1764 i‡(
⁄Off
 =
ENABLE_STATE
) {

1765 
	`pktgí_˛r_p‹t_Êags
(
öfo
, 
SEND_MPLS_LABEL
);

1766 
	`pktgí_˛r_p‹t_Êags
(
öfo
, 
SEND_Q_IN_Q_IDS
);

1767 
	`pktgí_£t_p‹t_Êags
(
öfo
, 
SEND_VLAN_ID
);

1769 
	`pktgí_˛r_p‹t_Êags
(
öfo
, 
SEND_VLAN_ID
);

1770 
	`pktgí_∑ckë_˘‹
(
öfo
, 
SINGLE_PKT
, -1);

1771 
	}
}

1786 
	$sögÀ_£t_vœn_id
(
p‹t_öfo_t
 *
öfo
, 
uöt16_t
 
vœnid
)

1788 
öfo
->
vœnid
 = vlanid;

1789 
öfo
->
£q_pkt
[
SINGLE_PKT
].
vœnid
 = info->vlanid;

1790 
	`pktgí_∑ckë_˘‹
(
öfo
, 
SINGLE_PKT
, -1);

1791 
	}
}

1808 
	$sögÀ_£t_cos
(
p‹t_öfo_t
 *
öfo
, 
uöt8_t
 
cos
)

1810 
öfo
->
cos
 = cos;

1811 
öfo
->
£q_pkt
[
SINGLE_PKT
].
cos
 = info->cos;

1812 
	`pktgí_∑ckë_˘‹
(
öfo
, 
SINGLE_PKT
, -1);

1813 
	}
}

1829 
	$sögÀ_£t_tos
(
p‹t_öfo_t
 *
öfo
, 
uöt8_t
 
tos
)

1831 
öfo
->
tos
 =Åos;

1832 
öfo
->
£q_pkt
[
SINGLE_PKT
].
tos
 = info->tos;

1833 
	`pktgí_∑ckë_˘‹
(
öfo
, 
SINGLE_PKT
, -1);

1834 
	}
}

1854 
	$íabÀ_m∂s
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
⁄Off
)

1856 i‡(
⁄Off
 =
ENABLE_STATE
) {

1857 
	`pktgí_˛r_p‹t_Êags
(
öfo
, 
SEND_VLAN_ID
);

1858 
	`pktgí_˛r_p‹t_Êags
(
öfo
, 
SEND_Q_IN_Q_IDS
);

1859 
	`pktgí_£t_p‹t_Êags
(
öfo
, 
SEND_MPLS_LABEL
);

1861 
	`pktgí_˛r_p‹t_Êags
(
öfo
, 
SEND_MPLS_LABEL
);

1862 
	`pktgí_∑ckë_˘‹
(
öfo
, 
SINGLE_PKT
, -1);

1863 
	}
}

1878 
	$ønge_£t_m∂s_íåy
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
m∂s_íåy
)

1880 
öfo
->
m∂s_íåy
 = mpls_entry;

1881 
öfo
->
£q_pkt
[
SINGLE_PKT
].
m∂s_íåy
 = info->mpls_entry;

1882 
	`pktgí_∑ckë_˘‹
(
öfo
, 
SINGLE_PKT
, -1);

1883 
	}
}

1898 
	$íabÀ_qöq
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
⁄Off
)

1900 i‡(
⁄Off
 =
ENABLE_STATE
) {

1901 
	`pktgí_˛r_p‹t_Êags
(
öfo
, 
SEND_VLAN_ID
);

1902 
	`pktgí_˛r_p‹t_Êags
(
öfo
, 
SEND_MPLS_LABEL
);

1903 
	`pktgí_£t_p‹t_Êags
(
öfo
, 
SEND_Q_IN_Q_IDS
);

1905 
	`pktgí_˛r_p‹t_Êags
(
öfo
, 
SEND_Q_IN_Q_IDS
);

1906 
	`pktgí_∑ckë_˘‹
(
öfo
, 
SINGLE_PKT
, -1);

1907 
	}
}

1922 
	$sögÀ_£t_qöqids
(
p‹t_öfo_t
 *
öfo
, 
uöt16_t
 
ouãrid
, uöt16_à
ö√rid
)

1924 
öfo
->
£q_pkt
[
SINGLE_PKT
].
qöq_ouãrid
 = 
ouãrid
;

1925 
öfo
->
£q_pkt
[
SINGLE_PKT
].
qöq_ö√rid
 = 
ö√rid
;

1927 
	`pktgí_∑ckë_˘‹
(
öfo
, 
SINGLE_PKT
, -1);

1928 
	}
}

1943 
	$ønge_£t_qöqids
(
p‹t_öfo_t
 *
öfo
, 
uöt16_t
 
ouãrid
, uöt16_à
ö√rid
)

1945 
öfo
->
£q_pkt
[
RANGE_PKT
].
qöq_ouãrid
 = 
ouãrid
;

1946 
öfo
->
£q_pkt
[
RANGE_PKT
].
qöq_ö√rid
 = 
ö√rid
;

1948 
	`pktgí_∑ckë_˘‹
(
öfo
, 
RANGE_PKT
, -1);

1949 
	}
}

1964 
	$íabÀ_gª
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
⁄Off
)

1966 i‡(
⁄Off
 =
ENABLE_STATE
) {

1967 
	`pktgí_˛r_p‹t_Êags
(
öfo
, 
SEND_GRE_ETHER_HEADER
);

1968 
	`pktgí_£t_p‹t_Êags
(
öfo
, 
SEND_GRE_IPv4_HEADER
);

1970 
	`pktgí_˛r_p‹t_Êags
(
öfo
, 
SEND_GRE_IPv4_HEADER
);

1971 
	`pktgí_∑ckë_˘‹
(
öfo
, 
SINGLE_PKT
, -1);

1972 
	}
}

1988 
	$íabÀ_gª_ëh
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
⁄Off
)

1990 i‡(
⁄Off
 =
ENABLE_STATE
) {

1991 
	`pktgí_˛r_p‹t_Êags
(
öfo
, 
SEND_GRE_IPv4_HEADER
);

1992 
	`pktgí_£t_p‹t_Êags
(
öfo
, 
SEND_GRE_ETHER_HEADER
);

1994 
	`pktgí_˛r_p‹t_Êags
(
öfo
, 
SEND_GRE_ETHER_HEADER
);

1995 
	`pktgí_∑ckë_˘‹
(
öfo
, 
SINGLE_PKT
, -1);

1996 
	}
}

2011 
	$ønge_£t_gª_key
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
gª_key
)

2013 
öfo
->
gª_key
 = gre_key;

2014 
öfo
->
£q_pkt
[
SINGLE_PKT
].
gª_key
 = info->gre_key;

2015 
	`pktgí_∑ckë_˘‹
(
öfo
, 
SINGLE_PKT
, -1);

2016 
	}
}

2031 
	$pktgí_˛ór_°©s
(
p‹t_öfo_t
 *
öfo
)

2033 
	`mem£t
(&
öfo
->
sizes
, 0, (
p‹t_sizes_t
));

2034 
	`mem£t
(&
öfo
->
¥ev_°©s
, 0, (
ëh_°©s_t
));

2035 
	`mem£t
(&
öfo
->
øã_°©s
, 0, (
ëh_°©s_t
));

2037 
	`πe_ëh_°©s_gë
(
öfo
->
pid
, &öfo->
öô_°©s
);

2038 
pktgí
.
max_tŸÆ_ùackës
 = 0;

2039 
pktgí
.
max_tŸÆ_›ackës
 = 0;

2040 
öfo
->
max_ùackës
 = 0;

2041 
öfo
->
max_›ackës
 = 0;

2042 
öfo
->
°©s
.
dr›≥d_pkts
 = 0;

2043 
öfo
->
°©s
.
¨p_pkts
 = 0;

2044 
öfo
->
°©s
.
echo_pkts
 = 0;

2045 
öfo
->
°©s
.
ù_pkts
 = 0;

2046 
öfo
->
°©s
.
ùv6_pkts
 = 0;

2047 
öfo
->
°©s
.
vœn_pkts
 = 0;

2048 
öfo
->
°©s
.
unknown_pkts
 = 0;

2049 
öfo
->
°©s
.
tx_Áûed
 = 0;

2050 
öfo
->
mö_œãncy
 = 0;

2051 
öfo
->
max_œãncy
 = 0;

2052 
öfo
->
avg_œãncy
 = 0;

2053 
öfo
->
jôãr_cou¡
 = 0;

2054 
öfo
->
max_mis£d
 = 0;

2056 
	`mem£t
(&
pktgí
.
cumm_øã_tŸÆs
, 0, (
ëh_°©s_t
));

2057 
	}
}

2072 
	$pktgí_p‹t_deÁu…s
(
uöt32_t
 
pid
, 
uöt8_t
 
£q
)

2074 
p‹t_öfo_t
 *
öfo
 = &
pktgí
.öfo[
pid
];

2075 
pkt_£q_t
 *
pkt
 = &
öfo
->
£q_pkt
[
£q
];

2076 
p‹t_öfo_t
 *
d°_öfo
;

2078 
pkt
->
pktSize
 = 
MIN_PKT_SIZE
;

2079 
pkt
->
•‹t
 = 
DEFAULT_SRC_PORT
;

2080 
pkt
->
dp‹t
 = 
DEFAULT_DST_PORT
;

2081 
pkt
->
ùPrŸo
 = 
PG_IPPROTO_TCP
;

2082 
pkt
->
ëhTy≥
 = 
ETHER_TYPE_IPv4
;

2083 
pkt
->
vœnid
 = 
DEFAULT_VLAN_ID
;

2084 
pkt
->
cos
 = 
DEFAULT_COS
;

2085 
pkt
->
tos
 = 
DEFAULT_TOS
;

2087 
	`πe_©omic64_£t
(&
öfo
->
å™smô_cou¡
, 
DEFAULT_TX_COUNT
);

2088 
	`πe_©omic64_öô
(&
öfo
->
cuºít_tx_cou¡
);

2089 
öfo
->
tx_øã
 = 
DEFAULT_TX_RATE
;

2090 
öfo
->
tx_bur°
 = 
DEFAULT_PKT_BURST
;

2091 
öfo
->
vœnid
 = 
DEFAULT_VLAN_ID
;

2092 
öfo
->
cos
 = 
DEFAULT_COS
;

2093 
öfo
->
tos
 = 
DEFAULT_TOS
;

2094 
öfo
->
£qC¡
 = 0;

2095 
öfo
->
£qIdx
 = 0;

2096 
öfo
->
¥ime_˙t
 = 
DEFAULT_PRIME_COUNT
;

2097 
öfo
->
dñè
 = 0;

2099 
	`pktgí_∑ckë_øã
(
öfo
);

2101 
pkt
->
ù_mask
 = 
DEFAULT_NETMASK
;

2102 i‡–(
pid
 & 1) == 0) {

2103 
pkt
->
ù_§c_addr
.
addr
.
ùv4
.
s_addr
 = 
DEFAULT_IP_ADDR
 |

2104 (
pid
 << 8) | 1;

2105 
pkt
->
ù_d°_addr
.
addr
.
ùv4
.
s_addr
 = 
DEFAULT_IP_ADDR
 |

2106 ((
pid
 + 1) << 8) | 1;

2107 
d°_öfo
 = 
öfo
 + 1;

2109 
pkt
->
ù_§c_addr
.
addr
.
ùv4
.
s_addr
 = 
DEFAULT_IP_ADDR
 |

2110 (
pid
 << 8) | 1;

2111 
pkt
->
ù_d°_addr
.
addr
.
ùv4
.
s_addr
 = 
DEFAULT_IP_ADDR
 |

2112 ((
pid
 - 1) << 8) | 1;

2113 
d°_öfo
 = 
öfo
 - 1;

2116 i‡(
d°_öfo
->
£q_pkt
 !
NULL
)

2117 
	`ëhî_addr_c›y
(&
d°_öfo
->
£q_pkt
[
SINGLE_PKT
].
ëh_§c_addr
,

2118 &
pkt
->
ëh_d°_addr
);

2120 
	`mem£t
(&
pkt
->
ëh_d°_addr
, 0, (pkt->eth_dst_addr));

2122 
	`pktgí_∑ckë_˘‹
(
öfo
, 
£q
, -1);

2124 
pktgí
.
Êags
 |
PRINT_LABELS_FLAG
;

2125 
	}
}

2140 
	$pktgí_pög4
(
p‹t_öfo_t
 *
öfo
)

2142 
	`mem˝y
(&
öfo
->
£q_pkt
[
PING_PKT
],

2143 &
öfo
->
£q_pkt
[
SINGLE_PKT
], (
pkt_£q_t
));

2144 
öfo
->
£q_pkt
[
PING_PKT
].
ùPrŸo
 = 
PG_IPPROTO_ICMP
;

2145 
	`pktgí_∑ckë_˘‹
(
öfo
, 
PING_PKT
, 
ICMP4_ECHO
);

2146 
	`pktgí_£t_p‹t_Êags
(
öfo
, 
SEND_PING4_REQUEST
);

2147 
	}
}

2162 
	$debug_pdump
(
p‹t_öfo_t
 *
öfo
)

2164 
pkt_£q_t
 *
µkt
 = &
öfo
->
£q_pkt
[
DUMP_PKT
];

2165 
pkt_£q_t
 *
•kt
 = &
öfo
->
£q_pkt
[
SINGLE_PKT
];

2166 
πe_mbuf
 *
m
;

2167 
uöt8_t
 
qid
 = 0;

2169 
m
 = 
	`πe_pktmbuf_Æloc
(
öfo
->
q
[
qid
].
•ecül_mp
);

2170 i‡(
	`u∆ikñy
(
m
 =
NULL
) ) {

2171 
	`pktgí_log_w¨nög
("NoÖacket buffers found");

2174 *
µkt
 = *
•kt
;

2175 
	`pktgí_∑ckë_˘‹
(
öfo
, 
DUMP_PKT
, -1);

2176 
	`πe_mem˝y
((
uöt8_t
 *)
m
->
buf_addr
 + m->
d©a_off
,

2177 (
uöt8_t
 *)&
µkt
->
hdr
,Öpkt->
pktSize
);

2179 
m
->
pkt_Àn
 = 
µkt
->
pktSize
;

2180 
m
->
d©a_Àn
 = 
µkt
->
pktSize
;

2182 
	`πe_pktmbuf_dump
(
°dout
, 
m
, m->
pkt_Àn
);

2183 
	`πe_pktmbuf_‰ì
(
m
);

2184 
	}
}

2186 #ifde‡
INCLUDE_PING6


2200 
	$pktgí_pög6
(
p‹t_öfo_t
 *
öfo
)

2202 
	`mem˝y
(&
öfo
->
pkt
[
PING_PKT
],

2203 &
öfo
->
pkt
[
SINGLE_PKT
], (
pkt_£q_t
));

2204 
öfo
->
pkt
[
PING_PKT
].
ùPrŸo
 = 
PG_IPPROTO_ICMP
;

2205 
	`pktgí_∑ckë_˘‹
(
öfo
, 
PING_PKT
, 
ICMP6_ECHO
);

2206 
	`pktgí_£t_p‹t_Êags
(
öfo
, 
SEND_PING6_REQUEST
);

2207 
	}
}

2224 
	$pktgí_ª£t
(
p‹t_öfo_t
 *
öfo
)

2226 
uöt32_t
 
s
;

2227 
off
[8];

2229 i‡(
öfo
 =
NULL
)

2230 
öfo
 = &
pktgí
.info[0];

2232 
	`°r˝y
(
off
, "off");

2233 
	`pktgí_°›_å™smôtög
(
öfo
);

2235 
pktgí
.
Êags
 &~
MAC_FROM_ARP_FLAG
;

2238 i‡(
öfo
->
£q_pkt
) {

2239 
öfo
->
£q_pkt
[
SINGLE_PKT
].
pktSize
 = 
MIN_PKT_SIZE
;

2241 
s
 = 0; s < 
NUM_TOTAL_PKTS
; s++)

2242 
	`pktgí_p‹t_deÁu…s
(
öfo
->
pid
, 
s
);

2244 
	`pktgí_ønge_£tup
(
öfo
);

2245 
	`pktgí_˛ór_°©s
(
öfo
);

2247 
	`íabÀ_ønge
(
öfo
, 
	`e°©e
(
off
));

2248 
	`mem£t
(
öfo
->
∫d_bôfõlds
, 0, (
∫d_bôs_s
));

2249 
	`pktgí_∫d_bôs_öô
(&
öfo
->
∫d_bôfõlds
);

2250 
	`pktgí_£t_p‹t_£qC¡
(
öfo
, 0);

2253 
	`pktgí_upd©e_di•œy
();

2254 
	}
}

2269 
	$pktgí_p‹t_ª°¨t
(
p‹t_öfo_t
 *
öfo
)

2271 i‡(
öfo
 =
NULL
)

2272 
öfo
 = &
pktgí
.info[0];

2274 
	`pktgí_°›_å™smôtög
(
öfo
);

2276 
	`πe_dñay_ms
(10);

2279 
	`πe_ëh_dev_°›
(
öfo
->
pid
);

2281 
	`πe_dñay_us
(250);

2283 
	`πe_ëh_dev_°¨t
(
öfo
->
pid
);

2285 
	`pktgí_upd©e_di•œy
();

2286 
	}
}

2301 
	$sögÀ_£t_tx_cou¡
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
˙t
)

2303 
	`πe_©omic64_£t
(&
öfo
->
å™smô_cou¡
, 
˙t
);

2304 
	}
}

2319 
	$pktgí_£t_p‹t_£qC¡
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
˙t
)

2321 i‡(
˙t
 > 
NUM_SEQ_PKTS
)

2322 
˙t
 = 
NUM_SEQ_PKTS
;

2324 
öfo
->
£qC¡
 = 
˙t
;

2325 i‡(
˙t
) {

2326 
	`pktgí_˛r_p‹t_Êags
(
öfo
, 
SEND_RANGE_PKTS
);

2327 
	`pktgí_˛r_p‹t_Êags
(
öfo
, 
SEND_PCAP_PKTS
);

2328 
	`pktgí_£t_p‹t_Êags
(
öfo
, 
SEND_SEQ_PKTS
);

2330 
	`pktgí_˛r_p‹t_Êags
(
öfo
, 
SEND_SEQ_PKTS
);

2331 
	`pktgí_∑ckë_øã
(
öfo
);

2332 
	}
}

2347 
	$pktgí_£t_p‹t_¥ime
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
˙t
)

2349 i‡(
˙t
 > 
MAX_PRIME_COUNT
)

2350 
˙t
 = 
MAX_PRIME_COUNT
;

2351 i‡(
˙t
 == 0)

2352 
˙t
 = 
DEFAULT_PRIME_COUNT
;

2354 
öfo
->
¥ime_˙t
 = 
˙t
;

2355 
	}
}

2370 
	$debug_£t_p‹t_dump
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
˙t
)

2372 
i
;

2374 i‡(
˙t
 > 
MAX_DUMP_PACKETS
)

2375 
˙t
 = 
MAX_DUMP_PACKETS
;

2378 
öfo
->
dump_cou¡
 = 0;

2379 
öfo
->
dump_èû
 = 0;

2380 
öfo
->
dump_hód
 = 0;

2382 
i
 = 0; i < 
MAX_DUMP_PACKETS
; ++i)

2383 i‡(
öfo
->
dump_li°
->
d©a
 !
NULL
) {

2384 
	`πe_‰ì
(
öfo
->
dump_li°
->
d©a
);

2385 
öfo
->
dump_li°
->
d©a
 = 
NULL
;

2388 
öfo
->
dump_cou¡
 = 
˙t
;

2389 
	}
}

2404 
	$sögÀ_£t_tx_bur°
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
bur°
)

2406 i‡(
bur°
 == 0)

2407 
bur°
 = 1;

2408 i‡(
bur°
 > 
DEFAULT_PKT_BURST
)

2409 
bur°
 = 
DEFAULT_PKT_BURST
;

2410 
öfo
->
tx_bur°
 = 
bur°
;

2411 
	`pktgí_∑ckë_øã
(
öfo
);

2412 
	}
}

2427 
	$debug_£t_tx_cy˛es
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
cy˛es
)

2429 
öfo
->
tx_cy˛es
 = 
cy˛es
;

2430 
	}
}

2445 
	$sögÀ_£t_pkt_size
(
p‹t_öfo_t
 *
öfo
, 
uöt16_t
 
size
)

2447 
pkt_£q_t
 * 
pkt
 = &
öfo
->
£q_pkt
[
SINGLE_PKT
];

2449 i‡(
size
 < 
FCS_SIZE
)

2450 
size
 = 
FCS_SIZE
;

2452 i‡(!(
	`πe_©omic32_ªad
(&
öfo
->
p‹t_Êags
Ë& 
SEND_SHORT_PACKETS
)) {

2453 i‡–(
size
 - 
FCS_SIZE
Ë< 
MIN_PKT_SIZE
)

2454 
size
 = (
MIN_PKT_SIZE
 + 
FCS_SIZE
);

2456 i‡–(
size
 - 
FCS_SIZE
Ë> 
MAX_PKT_SIZE
)

2457 
size
 = 
MAX_PKT_SIZE
 + 
FCS_SIZE
;

2459 i‡((
pkt
->
ëhTy≥
 =
ETHER_TYPE_IPv6
Ë&& (
size
 < (
MIN_v6_PKT_SIZE
 + 
FCS_SIZE
)))

2460 
size
 = 
MIN_v6_PKT_SIZE
 + 
FCS_SIZE
;

2462 
pkt
->
pktSize
 = (
size
 - 
FCS_SIZE
);

2464 
	`pktgí_∑ckë_˘‹
(
öfo
, 
SINGLE_PKT
, -1);

2465 
	`pktgí_∑ckë_øã
(
öfo
);

2466 
	}
}

2481 
	$sögÀ_£t_p‹t_vÆue
(
p‹t_öfo_t
 *
öfo
, 
ty≥
, 
uöt32_t
 
p‹tVÆue
)

2483 i‡(
ty≥
 == 'd')

2484 
öfo
->
£q_pkt
[
SINGLE_PKT
].
dp‹t
 = (
uöt16_t
)
p‹tVÆue
;

2486 
öfo
->
£q_pkt
[
SINGLE_PKT
].
•‹t
 = (
uöt16_t
)
p‹tVÆue
;

2487 
	`pktgí_∑ckë_˘‹
(
öfo
, 
SINGLE_PKT
, -1);

2488 
	}
}

2503 
	$sögÀ_£t_tx_øã
(
p‹t_öfo_t
 *
öfo
, c⁄° *
r
)

2505 
øã
 = 
	`°πod
(
r
, 
NULL
);

2507 i‡(
øã
 == 0)

2508 
øã
 = 0.01;

2509 i‡(
øã
 > 100.00)

2510 
øã
 = 100.00;

2511 
öfo
->
tx_øã
 = 
øã
;

2513 
	`pktgí_∑ckë_øã
(
öfo
);

2514 
	}
}

2529 
	$sögÀ_£t_ùaddr
(
p‹t_öfo_t
 *
öfo
, 
ty≥
, 
pg_ùaddr
 *
ù
)

2531 i‡(
ty≥
 == 's') {

2532 
öfo
->
£q_pkt
[
SINGLE_PKT
].
ù_mask
 = 
	`size_to_mask
(
ù
->
¥efixÀn
);

2533 
öfo
->
£q_pkt
[
SINGLE_PKT
].
ù_§c_addr
.
addr
.
ùv4
.
s_addr
 = 
	`¡ohl
(

2534 
ù
->
ùv4
.
s_addr
);

2536 
öfo
->
£q_pkt
[
SINGLE_PKT
].
ù_d°_addr
.
addr
.
ùv4
.
s_addr
 = 
	`¡ohl
(

2537 
ù
->
ùv4
.
s_addr
);

2538 
	`pktgí_∑ckë_˘‹
(
öfo
, 
SINGLE_PKT
, -1);

2539 
	}
}

2554 
	$sögÀ_£t_d°_mac
(
p‹t_öfo_t
 *
öfo
, 
ëhî_addr
 *
mac
)

2556 
	`mem˝y
(&
öfo
->
£q_pkt
[
SINGLE_PKT
].
ëh_d°_addr
, 
mac
, 6);

2557 
	`pktgí_∑ckë_˘‹
(
öfo
, 
SINGLE_PKT
, -1);

2558 
	}
}

2573 
	$sögÀ_£t_§c_mac
(
p‹t_öfo_t
 *
öfo
, 
ëhî_addr
 *
mac
)

2575 
	`mem˝y
(&
öfo
->
£q_pkt
[
SINGLE_PKT
].
ëh_§c_addr
, 
mac
, 6);

2576 
	`pktgí_∑ckë_˘‹
(
öfo
, 
SINGLE_PKT
, -1);

2577 
	}
}

2592 
	$íabÀ_ønge
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
°©e
)

2594 i‡(
°©e
 =
ENABLE_STATE
) {

2595 
	`pktgí_˛r_p‹t_Êags
(
öfo
, 
SEND_SEQ_PKTS
);

2596 
	`pktgí_˛r_p‹t_Êags
(
öfo
, 
SEND_PCAP_PKTS
);

2597 
	`pktgí_£t_p‹t_Êags
(
öfo
, 
SEND_RANGE_PKTS
);

2599 
	`pktgí_˛r_p‹t_Êags
(
öfo
, 
SEND_RANGE_PKTS
);

2600 
	`pktgí_∑ckë_øã
(
öfo
);

2601 
	}
}

2616 
	$íabÀ_œãncy
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
°©e
)

2618 i‡(
°©e
 =
ENABLE_STATE
)

2619 
	`pktgí_£t_p‹t_Êags
(
öfo
, 
SEND_LATENCY_PKTS
);

2621 
	`pktgí_˛r_p‹t_Êags
(
öfo
, 
SEND_LATENCY_PKTS
);

2622 
	}
}

2637 
	$sögÀ_£t_jôãr
(
p‹t_öfo_t
 *
öfo
, 
uöt64_t
 
thªshﬁd
)

2639 
uöt64_t
 
ticks
;

2641 
öfo
->
jôãr_thªshﬁd
 = 
thªshﬁd
;

2642 
öfo
->
jôãr_cou¡
 = 0;

2643 
ticks
 = 
	`πe_gë_timî_hz
() / 1000000;

2644 
öfo
->
jôãr_thªshﬁd_˛ks
 = info->
jôãr_thªshﬁd
 * 
ticks
;

2645 
	}
}

2660 
	$∑âîn_£t_ty≥
(
p‹t_öfo_t
 *
öfo
, *
°r
)

2662 i‡(
	`°∫cmp
(
°r
, "abc", 3) == 0)

2663 
öfo
->
fûl_∑âîn_ty≥
 = 
ABC_FILL_PATTERN
;

2664 i‡(
	`°∫cmp
(
°r
, "none", 4) == 0)

2665 
öfo
->
fûl_∑âîn_ty≥
 = 
NO_FILL_PATTERN
;

2666 i‡(
	`°∫cmp
(
°r
, "user", 4) == 0)

2667 
öfo
->
fûl_∑âîn_ty≥
 = 
USER_FILL_PATTERN
;

2668 i‡(
	`°∫cmp
(
°r
, "zero", 4) == 0)

2669 
öfo
->
fûl_∑âîn_ty≥
 = 
ZERO_FILL_PATTERN
;

2670 
	}
}

2685 
	$∑âîn_£t_u£r_∑âîn
(
p‹t_öfo_t
 *
öfo
, *
°r
)

2687 
c›y
[
USER_PATTERN_SIZE
 + 1], *
˝
;

2689 
	`mem£t
(
c›y
, 0, (copy));

2690 
	`°r˝y
(
c›y
, 
°r
);

2691 
˝
 = &
c›y
[0];

2692 i‡–(
˝
[0] == '"') || (cp[0] == '\'') ) {

2693 
˝
[
	`°æí
(cp) - 1] = 0;

2694 
˝
++;

2696 
	`mem£t
(
öfo
->
u£r_∑âîn
, 0, 
USER_PATTERN_SIZE
);

2697 
	`°∫˝y
(
öfo
->
u£r_∑âîn
, 
˝
, 
USER_PATTERN_SIZE
);

2698 
öfo
->
fûl_∑âîn_ty≥
 = 
USER_FILL_PATTERN
;

2699 
	}
}

2714 
	$ønge_£t_de°_mac
(
p‹t_öfo_t
 *
öfo
,

2715 c⁄° *
wh©
,

2716 
ëhî_addr
 *
mac
)

2718 i‡(!
	`°rcmp
(
wh©
, "min") || !strcmp(what, "minimum"))

2719 
	`öë_mtoh64
(
mac
, &
öfo
->
ønge
.
d°_mac_mö
);

2720 i‡(!
	`°rcmp
(
wh©
, "max") || !strcmp(what, "maximum"))

2721 
	`öë_mtoh64
(
mac
, &
öfo
->
ønge
.
d°_mac_max
);

2722 i‡(!
	`°rcmp
(
wh©
, "inc") || !strcmp(what, "increment"))

2723 
	`öë_mtoh64
(
mac
, &
öfo
->
ønge
.
d°_mac_öc
);

2724 i‡(!
	`°rcmp
(
wh©
, "start") ) {

2725 
	`öë_mtoh64
(
mac
, &
öfo
->
ønge
.
d°_mac
);

2727 
	`mem˝y
(&
öfo
->
£q_pkt
[
RANGE_PKT
].
ëh_d°_addr
, 
mac
, 6);

2729 
	}
}

2744 
	$ønge_£t_§c_mac
(
p‹t_öfo_t
 *
öfo
, c⁄° *
wh©
,

2745 
ëhî_addr
 *
mac
)

2747 i‡(!
	`°rcmp
(
wh©
, "min") || !strcmp(what, "minimum"))

2748 
	`öë_mtoh64
(
mac
, &
öfo
->
ønge
.
§c_mac_mö
);

2749 i‡(!
	`°rcmp
(
wh©
, "max") || !strcmp(what, "maximum"))

2750 
	`öë_mtoh64
(
mac
, &
öfo
->
ønge
.
§c_mac_max
);

2751 i‡(!
	`°rcmp
(
wh©
, "inc") || !strcmp(what, "increment"))

2752 
	`öë_mtoh64
(
mac
, &
öfo
->
ønge
.
§c_mac_öc
);

2753 i‡(!
	`°rcmp
(
wh©
, "start") ) {

2754 
	`öë_mtoh64
(
mac
, &
öfo
->
ønge
.
§c_mac
);

2756 
	`mem˝y
(&
öfo
->
£q_pkt
[
RANGE_PKT
].
ëh_§c_addr
, 
mac
, 6);

2758 
	}
}

2773 
	$ønge_£t_§c_ù
(
p‹t_öfo_t
 *
öfo
, *
wh©
, 
pg_ùaddr
 *
ù
)

2775 i‡(!
	`°rcmp
(
wh©
, "min") || !strcmp(what, "minimum"))

2776 
öfo
->
ønge
.
§c_ù_mö
 = 
	`¡ohl
(
ù
->
ùv4
.
s_addr
);

2777 i‡(!
	`°rcmp
(
wh©
, "max") || !strcmp(what, "maximum"))

2778 
öfo
->
ønge
.
§c_ù_max
 = 
	`¡ohl
(
ù
->
ùv4
.
s_addr
);

2779 i‡(!
	`°rcmp
(
wh©
, "inc") || !strcmp(what, "increment"))

2780 
öfo
->
ønge
.
§c_ù_öc
 = 
	`¡ohl
(
ù
->
ùv4
.
s_addr
);

2781 i‡(!
	`°rcmp
(
wh©
, "start") )

2782 
öfo
->
ønge
.
§c_ù
 = 
	`¡ohl
(
ù
->
ùv4
.
s_addr
);

2783 
	}
}

2798 
	$ønge_£t_d°_ù
(
p‹t_öfo_t
 *
öfo
, *
wh©
, 
pg_ùaddr
 *
ù
)

2800 i‡(!
	`°rcmp
(
wh©
, "min") || !strcmp(what, "minimum"))

2801 
öfo
->
ønge
.
d°_ù_mö
 = 
	`¡ohl
(
ù
->
ùv4
.
s_addr
);

2802 i‡(!
	`°rcmp
(
wh©
, "max") || !strcmp(what, "maximum"))

2803 
öfo
->
ønge
.
d°_ù_max
 = 
	`¡ohl
(
ù
->
ùv4
.
s_addr
);

2804 i‡(!
	`°rcmp
(
wh©
, "inc") || !strcmp(what, "increment"))

2805 
öfo
->
ønge
.
d°_ù_öc
 = 
	`¡ohl
(
ù
->
ùv4
.
s_addr
);

2806 i‡(!
	`°rcmp
(
wh©
, "start") )

2807 
öfo
->
ønge
.
d°_ù
 = 
	`¡ohl
(
ù
->
ùv4
.
s_addr
);

2808 
	}
}

2823 
	$ønge_£t_§c_p‹t
(
p‹t_öfo_t
 *
öfo
, *
wh©
, 
uöt16_t
 
p‹t
)

2825 i‡(!
	`°rcmp
(
wh©
, "inc") || !strcmp(what, "increment")) {

2826 i‡(
p‹t
 > 64)

2827 
p‹t
 = 64;

2828 
öfo
->
ønge
.
§c_p‹t_öc
 = 
p‹t
;

2830 i‡(!
	`°rcmp
(
wh©
, "min") || !strcmp(what, "minimum"))

2831 
öfo
->
ønge
.
§c_p‹t_mö
 = 
p‹t
;

2832 i‡(!
	`°rcmp
(
wh©
, "max") || !strcmp(what, "maximum"))

2833 
öfo
->
ønge
.
§c_p‹t_max
 = 
p‹t
;

2834 i‡(!
	`°rcmp
(
wh©
, "start") )

2835 
öfo
->
ønge
.
§c_p‹t
 = 
p‹t
;

2837 
	}
}

2852 
	$ønge_£t_gçu_ãid
(
p‹t_öfo_t
 *
öfo
, *
wh©
, 
uöt32_t
 
ãid
)

2854 i‡(!
	`°rcmp
(
wh©
, "inc") || !strcmp(what, "increment")) {

2855 i‡(
ãid
 != 0)

2856 
öfo
->
ønge
.
gçu_ãid_öc
 = 
ãid
;

2858 i‡(!
	`°rcmp
(
wh©
, "min") || !strcmp(what, "minimum"))

2859 
öfo
->
ønge
.
gçu_ãid_mö
 = 
ãid
;

2860 i‡(!
	`°rcmp
(
wh©
, "max") || !strcmp(what, "maximum"))

2861 
öfo
->
ønge
.
gçu_ãid_max
 = 
ãid
;

2862 i‡(!
	`°rcmp
(
wh©
, "start") ) {

2863 
öfo
->
ønge
.
gçu_ãid
 = 
ãid
;

2864 
öfo
->
£q_pkt
[
RANGE_PKT
].
gçu_ãid
 = 
ãid
;

2867 
	}
}

2882 
	$ønge_£t_d°_p‹t
(
p‹t_öfo_t
 *
öfo
, *
wh©
, 
uöt16_t
 
p‹t
)

2884 i‡(!
	`°rcmp
(
wh©
, "inc") || !strcmp(what, "increment")) {

2885 i‡(
p‹t
 > 64)

2886 
p‹t
 = 64;

2887 
öfo
->
ønge
.
d°_p‹t_öc
 = 
p‹t
;

2889 i‡(!
	`°rcmp
(
wh©
, "min") || !strcmp(what, "minimum"))

2890 
öfo
->
ønge
.
d°_p‹t_mö
 = 
p‹t
;

2891 i‡(!
	`°rcmp
(
wh©
, "max") || !strcmp(what, "maximum"))

2892 
öfo
->
ønge
.
d°_p‹t_max
 = 
p‹t
;

2893 i‡(!
	`°rcmp
(
wh©
, "start") )

2894 
öfo
->
ønge
.
d°_p‹t
 = 
p‹t
;

2896 
	}
}

2911 
	$ønge_£t_vœn_id
(
p‹t_öfo_t
 *
öfo
, *
wh©
, 
uöt16_t
 
id
)

2913 i‡(!
	`°rcmp
(
wh©
, "inc") || !strcmp(what, "increment")) {

2914 i‡(
id
 > 64)

2915 
id
 = 64;

2916 
öfo
->
ønge
.
vœn_id_öc
 = 
id
;

2918 i‡–(
id
 < 
MIN_VLAN_ID
Ë|| (id > 
MAX_VLAN_ID
) )

2919 
id
 = 
MIN_VLAN_ID
;

2921 i‡(!
	`°rcmp
(
wh©
, "min") || !strcmp(what, "minimum"))

2922 
öfo
->
ønge
.
vœn_id_mö
 = 
id
;

2923 i‡(!
	`°rcmp
(
wh©
, "max") || !strcmp(what, "maximum"))

2924 
öfo
->
ønge
.
vœn_id_max
 = 
id
;

2925 i‡(!
	`°rcmp
(
wh©
, "start") )

2926 
öfo
->
ønge
.
vœn_id
 = 
id
;

2928 
	}
}

2944 
	$ønge_£t_tos_id
(
p‹t_öfo_t
 *
öfo
, *
wh©
, 
uöt8_t
 
id
)

2947 i‡(!
	`°rcmp
(
wh©
, "inc") || !strcmp(what, "increment")) {

2950 
öfo
->
ønge
.
tos_öc
 = 
id
;

2955 i‡(!
	`°rcmp
(
wh©
, "min") || !strcmp(what, "minimum"))

2956 
öfo
->
ønge
.
tos_mö
 = 
id
;

2957 i‡(!
	`°rcmp
(
wh©
, "max") || !strcmp(what, "maximum"))

2958 
öfo
->
ønge
.
tos_max
 = 
id
;

2959 i‡(!
	`°rcmp
(
wh©
, "start") )

2960 
öfo
->
ønge
.
tos
 = 
id
;

2962 
	}
}

2977 
	$ønge_£t_cos_id
(
p‹t_öfo_t
 *
öfo
, *
wh©
, 
uöt8_t
 
id
)

2979 i‡(!
	`°rcmp
(
wh©
, "inc") || !strcmp(what, "increment")) {

2980 i‡(
id
 > 7)

2981 
id
 = 7;

2982 
öfo
->
ønge
.
cos_öc
 = 
id
;

2987 i‡(!
	`°rcmp
(
wh©
, "min") || !strcmp(what, "minimum"))

2988 
öfo
->
ønge
.
cos_mö
 = 
id
;

2989 i‡(!
	`°rcmp
(
wh©
, "max") || !strcmp(what, "maximum"))

2990 
öfo
->
ønge
.
cos_max
 = 
id
;

2991 i‡(!
	`°rcmp
(
wh©
, "start") )

2992 
öfo
->
ønge
.
cos
 = 
id
;

2994 
	}
}

3009 
	$ønge_£t_pkt_size
(
p‹t_öfo_t
 *
öfo
, *
wh©
, 
uöt16_t
 
size
)

3011 i‡(!
	`°rcmp
(
wh©
, "inc") || !strcmp(what, "increment")) {

3012 i‡(
size
 > 
ETHER_MIN_LEN
)

3013 
size
 = 
ETHER_MIN_LEN
;

3015 
öfo
->
ønge
.
pkt_size_öc
 = 
size
;

3017 i‡(
size
 < 
ETHER_MIN_LEN
)

3018 
size
 = 
MIN_PKT_SIZE
;

3019 i‡(
size
 > 
ETHER_MAX_LEN
)

3020 
size
 = 
MAX_PKT_SIZE
;

3022 
size
 -
FCS_SIZE
;

3024 i‡(!
	`°rcmp
(
wh©
, "start") )

3025 
öfo
->
ønge
.
pkt_size
 = 
size
;

3026 i‡(!
	`°rcmp
(
wh©
, "min") || !strcmp(what, "minimum"))

3027 
öfo
->
ønge
.
pkt_size_mö
 = 
size
;

3028 i‡(!
	`°rcmp
(
wh©
, "max") || !strcmp(what, "maximum"))

3029 
öfo
->
ønge
.
pkt_size_max
 = 
size
;

3031 
	}
}

3046 
	$pktgí_£nd_¨p_ªque°s
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
ty≥
)

3048 i‡(
ty≥
 =
GRATUITOUS_ARP
)

3049 
	`pktgí_£t_p‹t_Êags
(
öfo
, 
SEND_GRATUITOUS_ARP
);

3051 
	`pktgí_£t_p‹t_Êags
(
öfo
, 
SEND_ARP_REQUEST
);

3052 
	}
}

3054 
	#_˝
(
s
Ë(
	`°rcmp
(
°r
, sË=0)

	)

3069 
	$pktgí_£t_∑ge
(*
°r
)

3071 
uöt16_t
 
∑ge
 = 0;

3073 i‡(
°r
 =
NULL
)

3076 i‡((
°r
[0] >= '0') && (str[0] <= '9')) {

3077 
∑ge
 = 
	`©oi
(
°r
);

3078 i‡(
∑ge
 > 
pktgí
.
nb_p‹ts
)

3083 i‡(
	`_˝
("next")) {

3084 
pˇp_öfo_t
 *
pˇp
 = 
pktgí
.
öfo
[pktgí.
p‹tNum
].pcap;

3086 i‡(
pˇp
) {

3087 i‡–(
pˇp
->
pkt_idx
 + 
PCAP_PAGE_SIZE
Ë<Öˇp->
pkt_cou¡
)

3088 
pˇp
->
pkt_idx
 +
PCAP_PAGE_SIZE
;

3090 
pˇp
->
pkt_idx
 = 0;

3092 
pktgí
.
Êags
 |
PRINT_LABELS_FLAG
;

3093 } i‡(
	`_˝
("cpu")) {

3094 
pktgí
.
Êags
 &~
PAGE_MASK_BITS
;

3095 
pktgí
.
Êags
 |
CPU_PAGE_FLAG
;

3096 } i‡(
	`_˝
("pcap")) {

3097 
pktgí
.
Êags
 &~
PAGE_MASK_BITS
;

3098 
pktgí
.
Êags
 |
PCAP_PAGE_FLAG
;

3099 i‡(
pktgí
.
öfo
[pktgí.
p‹tNum
].
pˇp
)

3100 
pktgí
.
öfo
[pktgí.
p‹tNum
].
pˇp
->
pkt_idx
 = 0;

3101 } i‡(
	`_˝
("range")) {

3102 
pktgí
.
Êags
 &~
PAGE_MASK_BITS
;

3103 
pktgí
.
Êags
 |
RANGE_PAGE_FLAG
;

3104 } i‡(
	`_˝
("config") || _cp("cfg")) {

3105 
pktgí
.
Êags
 &~
PAGE_MASK_BITS
;

3106 
pktgí
.
Êags
 |
CONFIG_PAGE_FLAG
;

3107 } i‡(
	`_˝
("stats")) {

3108 
pktgí
.
Êags
 &~
PAGE_MASK_BITS
;

3109 
pktgí
.
Êags
 |
STATS_PAGE_FLAG
;

3110 } i‡(
	`_˝
("sequence") || _cp("seq")) {

3111 
pktgí
.
Êags
 &~
PAGE_MASK_BITS
;

3112 
pktgí
.
Êags
 |
SEQUENCE_PAGE_FLAG
;

3113 } i‡(
	`_˝
("random") || _cp("rnd")) {

3114 
pktgí
.
Êags
 &~
PAGE_MASK_BITS
;

3115 
pktgí
.
Êags
 |
RND_BITFIELD_PAGE_FLAG
;

3116 } i‡(
	`_˝
("log")) {

3117 
pktgí
.
Êags
 &~
PAGE_MASK_BITS
;

3118 
pktgí
.
Êags
 |
LOG_PAGE_FLAG
;

3119 } i‡(
	`_˝
("latency") || _cp("lat")) {

3120 
pktgí
.
Êags
 &~
PAGE_MASK_BITS
;

3121 
pktgí
.
Êags
 |
LATENCY_PAGE_FLAG
;

3123 
uöt16_t
 
°¨t_p‹t
;

3124 i‡(
	`_˝
("main"))

3125 
∑ge
 = 0;

3126 
°¨t_p‹t
 = (
∑ge
 * 
pktgí
.
nb_p‹ts_≥r_∑ge
);

3127 i‡–(
pktgí
.
°¨tög_p‹t
 !
°¨t_p‹t
) &&

3128 (
°¨t_p‹t
 < 
pktgí
.
nb_p‹ts
) ) {

3129 
pktgí
.
°¨tög_p‹t
 = 
°¨t_p‹t
;

3130 
pktgí
.
ídög_p‹t
 = 
°¨t_p‹t
 +

3131 
pktgí
.
nb_p‹ts_≥r_∑ge
;

3132 i‡(
pktgí
.
ídög_p‹t
 >

3133 (
pktgí
.
°¨tög_p‹t
 +Öktgí.
nb_p‹ts
) )

3134 
pktgí
.
ídög_p‹t
 =

3135 (
pktgí
.
°¨tög_p‹t
 +

3136 
pktgí
.
nb_p‹ts
);

3138 i‡(
pktgí
.
Êags
 & 
PAGE_MASK_BITS
) {

3139 
pktgí
.
Êags
 &~
PAGE_MASK_BITS
;

3140 
pktgí
.
Êags
 |
PRINT_LABELS_FLAG
;

3143 
	`pktgí_˛ór_di•œy
();

3144 
	}
}

3159 
	$pktgí_£t_£q
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
£qnum
,

3160 
ëhî_addr
 *
daddr
, ëhî_add∏*
ßddr
,

3161 
pg_ùaddr
 *
ù_daddr
, pg_ùadd∏*
ù_ßddr
,

3162 
uöt32_t
 
•‹t
, uöt32_à
dp‹t
, 
ty≥
, 
¥Ÿo
,

3163 
uöt16_t
 
vœnid
, 
uöt32_t
 
pktsize
, uöt32_à
gçu_ãid
)

3165 
pkt_£q_t
 *
pkt
;

3167 
pkt
 = &
öfo
->
£q_pkt
[
£qnum
];

3168 
	`mem˝y
(&
pkt
->
ëh_d°_addr
, 
daddr
, 6);

3169 
	`mem˝y
(&
pkt
->
ëh_§c_addr
, 
ßddr
, 6);

3170 
pkt
->
ù_mask
 = 
	`size_to_mask
(
ù_ßddr
->
¥efixÀn
);

3171 i‡(
ty≥
 == '4') {

3172 
pkt
->
ù_§c_addr
.
addr
.
ùv4
.
s_addr
 = 
	`ht⁄l
(

3173 
ù_ßddr
->
ùv4
.
s_addr
);

3174 
pkt
->
ù_d°_addr
.
addr
.
ùv4
.
s_addr
 = 
	`ht⁄l
(

3175 
ù_daddr
->
ùv4
.
s_addr
);

3177 
	`mem˝y
(&
pkt
->
ù_§c_addr
.
addr
.
ùv6
.
s6_addr
,

3178 
ù_ßddr
->
ùv6
.
s6_addr
,

3179 (
ö6_addr
));

3180 
	`mem˝y
(&
pkt
->
ù_d°_addr
.
addr
.
ùv6
.
s6_addr
,

3181 
ù_daddr
->
ùv6
.
s6_addr
,

3182 (
ö6_addr
));

3184 
pkt
->
dp‹t
 = dport;

3185 
pkt
->
•‹t
 = sport;

3186 
pkt
->
pktSize
 = 
pktsize
 - 
FCS_SIZE
;

3187 
pkt
->
ùPrŸo
 = (
¥Ÿo
 ='u'Ë? 
PG_IPPROTO_UDP
 :

3188 (
¥Ÿo
 ='i'Ë? 
PG_IPPROTO_ICMP
 : 
PG_IPPROTO_TCP
;

3190 i‡(
¥Ÿo
 == 'i')

3191 
ty≥
 = '4';

3192 
pkt
->
ëhTy≥
 = (
ty≥
 ='6'Ë? 
ETHER_TYPE_IPv6
 : 
ETHER_TYPE_IPv4
;

3193 
pkt
->
vœnid
 = vlanid;

3194 
pkt
->
gçu_ãid
 = gtpu_teid;

3195 
	`pktgí_∑ckë_˘‹
(
öfo
, 
£qnum
, -1);

3196 
	}
}

3199 
	$pktgí_£t_cos_tos_£q
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
£qnum
, uöt32_à
cos
, uöt32_à
tos
)

3201 
pkt_£q_t
 *
pkt
;

3203 
pkt
 = &
öfo
->
£q_pkt
[
£qnum
];

3204 
pkt
->
cos
 = cos;

3205 
pkt
->
tos
 =Åos;

3206 
	`pktgí_∑ckë_˘‹
(
öfo
, 
£qnum
, -1);

3207 
	}
}

3222 
	$pktgí_compûe_pkt
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
£qnum
,

3223 
ëhî_addr
 *
daddr
, ëhî_add∏*
ßddr
,

3224 
pg_ùaddr
 *
ù_daddr
, pg_ùadd∏*
ù_ßddr
,

3225 
uöt32_t
 
•‹t
, uöt32_à
dp‹t
, 
ty≥
, 
¥Ÿo
,

3226 
uöt16_t
 
vœnid
, 
uöt32_t
 
pktsize
, uöt32_à
gçu_ãid
)

3228 
pkt_£q_t
 *
pkt
;

3230 i‡(
£qnum
 >
NUM_EXTRA_TX_PKTS
)

3233 
pkt
 = &
öfo
->
£q_pkt
[
£qnum
 + 
EXTRA_TX_PKT
];

3235 
	`mem˝y
(&
pkt
->
ëh_d°_addr
, 
daddr
, 6);

3236 
	`mem˝y
(&
pkt
->
ëh_§c_addr
, 
ßddr
, 6);

3237 
pkt
->
ù_mask
 = 
	`size_to_mask
(
ù_ßddr
->
¥efixÀn
);

3238 
pkt
->
ù_§c_addr
.
addr
.
ùv4
.
s_addr
 = 
	`ht⁄l
(
ù_ßddr
->ipv4.s_addr);

3239 
pkt
->
ù_d°_addr
.
addr
.
ùv4
.
s_addr
 = 
	`ht⁄l
(
ù_daddr
->ipv4.s_addr);

3240 
pkt
->
dp‹t
 = dport;

3241 
pkt
->
•‹t
 = sport;

3242 
pkt
->
pktSize
 = 
pktsize
 - 
FCS_SIZE
;

3243 
pkt
->
ùPrŸo
 = (
¥Ÿo
 ='u'Ë? 
PG_IPPROTO_UDP
 :

3244 (
¥Ÿo
 ='i'Ë? 
PG_IPPROTO_ICMP
 : 
PG_IPPROTO_TCP
;

3246 i‡(
¥Ÿo
 == 'i')

3247 
ty≥
 = '4';

3248 
pkt
->
ëhTy≥
 = (
ty≥
 ='4'Ë? 
ETHER_TYPE_IPv4
 :

3249 (
ty≥
 ='6'Ë? 
ETHER_TYPE_IPv6
 :

3250 (
ty≥
 ='n'Ë? 
ETHER_TYPE_VLAN
 : 
ETHER_TYPE_IPv4
;

3251 
pkt
->
vœnid
 = vlanid;

3252 
pkt
->
gçu_ãid
 = gtpu_teid;

3253 
	`pktgí_∑ckë_˘‹
(
öfo
, 
£qnum
, -1);

3254 
	}
}

3257 
	$pktgí_add_cos_tos
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
£qnum
, uöt32_à
cos
, uöt32_à
tos
)

3259 
pkt_£q_t
 *
pkt
;

3261 i‡(
£qnum
 >
NUM_EXTRA_TX_PKTS
)

3264 
pkt
 = &
öfo
->
£q_pkt
[
£qnum
 + 
EXTRA_TX_PKT
];

3266 
pkt
->
cos
 = cos;

3267 
pkt
->
tos
 =Åos;

3268 
	`pktgí_∑ckë_˘‹
(
öfo
, 
£qnum
, -1);

3269 
	}
}

3285 
	$pktgí_£nd_pkt
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
£qnum
)

3287 
	`pktgí_£nd_£q_pkt
(
öfo
, 
£qnum
 + 
EXTRA_TX_PKT
);

3288 
	}
}

3303 
	$pktgí_ªcv_pkt
(
p‹t_öfo_t
 *
öfo
 
__πe_unu£d
)

3305 
	`pktgí_log_w¨nög
("Not working yet!");

3306 
	}
}

3321 
	$pktgí_quô
()

3323 
	`˛i_quô
();

3324 
	}
}

	@app/pktgen-cmds.h

8 #i‚de‡
_PKTGEN_CMDS_H_


9 
	#_PKTGEN_CMDS_H_


	)

11 
	~<öây≥s.h
>

12 
	~<πe_vîsi⁄.h
>

14 #i‡
RTE_VERSION
 >
RTE_VERSION_NUM
(17,2,0,0)

15 
	~<πe_√t.h
>

18 
	~"pktgí.h
"

19 
	~<πe_°rög_‚s.h
>

20 
	~<˛i_°rög_‚s.h
>

22 #ifde‡
__˝lu•lus


27 *
pktgí_Êags_°rög
(
p‹t_öfo_t
 *
öfo
);

28 *
pktgí_å™smô_cou¡_øã
(
p‹t
, *
buff
, 
Àn
);

29 
pktgí_upd©e_di•œy
();

30 
pktgí_upd©e
();

31 *
pktgí_lök_°©e
(
p‹t
, *
buff
, 
Àn
);

32 *
pktgí_å™smô_cou¡
(
p‹t
, *
buff
, 
Àn
);

33 *
pktgí_å™smô_øã
(
p‹t
, *
buff
, 
Àn
);

34 
pktgí_pkt_°©s
(
p‹t
, 
pkt_°©s_t
 *
p°©s
);

35 
pktgí_p‹t_°©s
(
p‹t
, c⁄° *
«me
, 
ëh_°©s_t
 *
p°©s
);

36 
pktgí_p‹t_sizes
(
p‹t
, 
p‹t_sizes_t
 *
psizes
);

39 
pktgí_£nd_¨p_ªque°s
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
ty≥
);

40 
pktgí_°¨t_å™smôtög
(
p‹t_öfo_t
 *
öfo
);

41 
pktgí_°›_å™smôtög
(
p‹t_öfo_t
 *
öfo
);

42 
pktgí_p‹t_å™smôtög
(
p‹t
);

43 
pktgí_£t_∑ge
(*
°r
);

44 
pktgí_s¸ìn
(
°©e
);

45 
pktgí_f‹˚_upd©e
();

46 
pktgí_upd©e_di•œy
();

47 
pktgí_˛ór_di•œy
();

49 
pktgí_ßve
(*
∑th
);

50 
pktgí_˛s
();

51 
pktgí_pög4
(
p‹t_öfo_t
 *
öfo
);

52 #ifde‡
INCLUDE_PING6


53 
pktgí_pög6
(
p‹t_öfo_t
 *
öfo
);

55 
pktgí_˛ór_°©s
(
p‹t_öfo_t
 *
öfo
);

56 
pktgí_ª£t
(
p‹t_öfo_t
 *
öfo
);

57 
pktgí_p‹t_ª°¨t
(
p‹t_öfo_t
 *
öfo
);

58 
pktgí_mac_‰om_¨p
(
°©e
);

59 
pktgí_¥ime_p‹ts
(
p‹t_öfo_t
 *
öfo
);

60 
pktgí_quô
();

61 
pktgí_£t_∑ge_size
(
uöt32_t
 
∑ge_size
);

62 
pktgí_£t_p‹t_numbî
(
uöt32_t
 
p‹t_numbî
);

63 
pktgí_£t_p‹t_¥ime
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
˙t
);

64 
pktgí_p‹t_deÁu…s
(
uöt32_t
 
pid
, 
uöt8_t
 
£q
);

66 
	gpg_ùaddr
;

69 
sögÀ_£t_ùaddr
(
p‹t_öfo_t
 *
öfo
, 
ty≥
, 
pg_ùaddr
 *
ù
);

70 
sögÀ_£t_¥Ÿo
(
p‹t_öfo_t
 *
öfo
, *
ty≥
);

71 
sögÀ_£t_vœn_id
(
p‹t_öfo_t
 *
öfo
, 
uöt16_t
 
vœnid
);

72 
sögÀ_£t_cos
(
p‹t_öfo_t
 *
öfo
, 
uöt8_t
 
cos
);

73 
sögÀ_£t_tos
(
p‹t_öfo_t
 *
öfo
, 
uöt8_t
 
tos
);

74 
sögÀ_£t_d°_mac
(
p‹t_öfo_t
 *
öfo
, 
ëhî_addr
 *
mac
);

75 
sögÀ_£t_§c_mac
(
p‹t_öfo_t
 *
öfo
, 
ëhî_addr
 *
mac
);

76 
sögÀ_£t_pkt_ty≥
(
p‹t_öfo_t
 *
öfo
, c⁄° *
ty≥
);

77 
sögÀ_£t_tx_cou¡
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
˙t
);

78 
sögÀ_£t_tx_bur°
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
bur°
);

79 
sögÀ_£t_pkt_size
(
p‹t_öfo_t
 *
öfo
, 
uöt16_t
 
size
);

80 
sögÀ_£t_tx_øã
(
p‹t_öfo_t
 *
öfo
, c⁄° *
øã
);

81 
sögÀ_£t_jôãr
(
p‹t_öfo_t
 *
öfo
, 
uöt64_t
 
thªshﬁd
);

82 
sögÀ_£t_p‹t_vÆue
(
p‹t_öfo_t
 *
öfo
,

83 
ty≥
, 
uöt32_t
 
p‹tVÆue
);

84 
sögÀ_£t_qöqids
(
p‹t_öfo_t
 *
öfo
,

85 
uöt16_t
 
ouãrid
,

86 
uöt16_t
 
ö√rid
);

89 
debug_dump
(
p‹t_öfo_t
 *
öfo
, *
°r
);

90 
debug_blök
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
°©e
);

91 
debug_pdump
(
p‹t_öfo_t
 *
öfo
);

92 
debug_£t_tx_cy˛es
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
cy˛es
);

93 
debug_£t_rx_cy˛es
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
cy˛es
);

94 
debug_m©rix_dump
();

95 
debug_mempoﬁ_dump
(
p‹t_öfo_t
 *
öfo
, *
«me
);

96 
debug_£t_p‹t_dump
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
˙t
);

99 
íabÀ_rx_èp
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
°©e
);

100 
íabÀ_tx_èp
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
°©e
);

101 
íabÀ_vœn
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
°©e
);

102 
íabÀ_qöq
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
°©e
);

103 
íabÀ_m∂s
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
°©e
);

104 
íabÀ_gª
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
°©e
);

105 
íabÀ_gª_ëh
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
°©e
);

106 
íabÀ_icmp_echo
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
°©e
);

107 
íabÀ_øndom
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
°©e
);

108 
íabÀ_œãncy
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
°©e
);

109 
íabÀ_g¨p
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
°©e
);

110 
íabÀ_mac_‰om_¨p
(
uöt32_t
 
°©e
);

111 
íabÀ_¥o˚ss
(
p‹t_öfo_t
 *
öfo
, 
°©e
);

112 
íabÀ_ˇ±uª
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
°©e
);

113 
íabÀ_b⁄dög
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
°©e
);

114 
íabÀ_ønge
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
°©e
);

115 
íabÀ_pˇp
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
°©e
);

116 
íabÀ_sh‹t_pkts
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
°©e
);

119 
pˇp_fûãr
(
p‹t_öfo_t
 *
öfo
, *
°r
);

122 
ønge_£t_de°_mac
(
p‹t_öfo_t
 *
öfo
,

123 c⁄° *
wh©
,

124 
ëhî_addr
 *
mac
);

125 
ønge_£t_§c_mac
(
p‹t_öfo_t
 *
öfo
,

126 c⁄° *
wh©
,

127 
ëhî_addr
 *
mac
);

128 
ønge_£t_§c_ù
(
p‹t_öfo_t
 *
öfo
,

129 *
wh©
,

130 
pg_ùaddr
 *
ù
);

131 
ønge_£t_d°_ù
(
p‹t_öfo_t
 *
öfo
,

132 *
wh©
,

133 
pg_ùaddr
 *
ù
);

134 
ønge_£t_§c_p‹t
(
p‹t_öfo_t
 *
öfo
, *
wh©
, 
uöt16_t
 
p‹t
);

135 
ønge_£t_d°_p‹t
(
p‹t_öfo_t
 *
öfo
, *
wh©
, 
uöt16_t
 
p‹t
);

136 
ønge_£t_¥Ÿo
(
p‹t_öfo_t
 *
öfo
, c⁄° *
ty≥
);

137 
ønge_£t_pkt_ty≥
(
p‹t_öfo_t
 *
öfo
, c⁄° *
ty≥
);

138 
ønge_£t_pkt_size
(
p‹t_öfo_t
 *
öfo
,

139 *
wh©
,

140 
uöt16_t
 
size
);

141 
ønge_£t_gçu_ãid
(
p‹t_öfo_t
 *
öfo
, *
wh©
, 
uöt32_t
 
ãid
);

142 
ønge_£t_vœn_id
(
p‹t_öfo_t
 *
öfo
, *
wh©
, 
uöt16_t
 
id
);

143 
ønge_£t_tos_id
(
p‹t_öfo_t
 *
öfo
, *
wh©
, 
uöt8_t
 
id
);

144 
ønge_£t_cos_id
(
p‹t_öfo_t
 *
öfo
, *
wh©
, 
uöt8_t
 
id
);

145 
ønge_£t_m∂s_íåy
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
m∂s_íåy
);

146 
ønge_£t_qöqids
(
p‹t_öfo_t
 *
öfo
,

147 
uöt16_t
 
ouãrid
,

148 
uöt16_t
 
ö√rid
);

149 
ønge_£t_gª_key
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
gª_key
);

152 
pktgí_£t_p‹t_£qC¡
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
˙t
);

153 
pktgí_£t_£q
(
p‹t_öfo_t
 *
öfo
,

154 
uöt32_t
 
£qnum
,

155 
ëhî_addr
 *
daddr
,

156 
ëhî_addr
 *
ßddr
,

157 
pg_ùaddr
 *
ù_daddr
,

158 
pg_ùaddr
 *
ù_ßddr
,

159 
uöt32_t
 
•‹t
,

160 
uöt32_t
 
dp‹t
,

161 
ù
,

162 
¥Ÿo
,

163 
uöt16_t
 
vœnid
,

164 
uöt32_t
 
pktsize
,

165 
uöt32_t
 
gçu_ãid
);

166 
pktgí_£t_cos_tos_£q
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
£qnum
,

167 
uöt32_t
 
cos
, uöt32_à
tos
);

171 
pktgí_£nd_pkt
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
£qnum
);

172 
pktgí_ªcv_pkt
(
p‹t_öfo_t
 *
öfo
);

174 
pktgí_compûe_pkt
(
p‹t_öfo_t
 *
öfo
,

175 
uöt32_t
 
£qnum
,

176 
ëhî_addr
 *
daddr
,

177 
ëhî_addr
 *
ßddr
,

178 
pg_ùaddr
 *
ù_daddr
,

179 
pg_ùaddr
 *
ù_ßddr
,

180 
uöt32_t
 
•‹t
,

181 
uöt32_t
 
dp‹t
,

182 
ty≥
,

183 
¥Ÿo
,

184 
uöt16_t
 
vœnid
,

185 
uöt32_t
 
pktsize
,

186 
uöt32_t
 
gçu_ãid
);

187 
pktgí_add_cos_tos
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
£qnum
,

188 
uöt32_t
 
cos
, uöt32_à
tos
);

192 
∑âîn_£t_ty≥
(
p‹t_öfo_t
 *
öfo
, *
°r
);

193 
∑âîn_£t_u£r_∑âîn
(
p‹t_öfo_t
 *
öfo
, *
°r
);

195 #ifde‡
__˝lu•lus


	@app/pktgen-constants.h

8 #i‚de‡
_PKTGEN_CONSTANTS_H_


9 
	#_PKTGEN_CONSTANTS_H_


	)

11 
	~<πe_mbuf.h
>

13 #ifde‡
__˝lu•lus


18 
DEFAULT_PKT_BURST
 = 64,

19 #ifde‡
RTE_LIBRTE_VMXNET3_PMD


20 
DEFAULT_RX_DESC
 = (
DEFAULT_PKT_BURST
 * 8 * 2),

21 
DEFAULT_TX_DESC
 = 
DEFAULT_RX_DESC
 * 2,

23 
DEFAULT_RX_DESC
 = (
DEFAULT_PKT_BURST
 * 8),

24 
DEFAULT_TX_DESC
 = 
DEFAULT_RX_DESC
 * 2,

27 
MAX_MBUFS_PER_PORT
 = (
DEFAULT_TX_DESC
 * 8),

28 
MAX_SPECIAL_MBUFS
 = 64,

29 
MBUF_CACHE_SIZE
 = (
MAX_MBUFS_PER_PORT
 / 8),

31 
DEFAULT_PRIV_SIZE
 = 2048,

32 
MBUF_SIZE
 = 
RTE_MBUF_DEFAULT_BUF_SIZE
 + 
DEFAULT_PRIV_SIZE
,

34 
NUM_Q
 = 8,

37 #ifde‡
__˝lu•lus


	@app/pktgen-cpu.c

9 
	~"pktgí-di•œy.h
"

10 
	~"pktgí-˝u.h
"

11 
	~"pktgí-log.h
"

13 
	~"pktgí.h
"

16 
	$ßve_u«me
(*
löe
, 
i
 
__πe_unu£d
) {

17 
pktgí
.
u«me
 = 
	`pg_°rdupf
’ktgí.u«me, 
löe
);

19 
	}
}

22 
	$pktgí_gë_u«me
()

24 
	`do_comm™d
("u«mê-a", 
ßve_u«me
);

25 
	}
}

40 
	$pktgí_∑ge_˝u
()

42 
uöt32_t
 
i
, 
row
, 
˙t
, 
nb_sockës
, 
nb_c‹es
, 
nb_thªads
;

43 
cou¡î
 = 0;

44 
buff
[1024];

46 
	`di•œy_t›löe
("<CPU Page>");

48 i‡–(
pktgí
.
c‹e_˙t
 =0Ë|| (pktgí.
ls˝u
 =
NULL
) )

49 
	`pktgí_˝u_öô
();

51 
˙t
 = 
pktgí
.
c‹e_˙t
;

52 
nb_sockës
 = 
	`c‹em≠_˙t
(
pktgí
.
c‹e_öfo
, 
˙t
, 0);

53 
nb_c‹es
 = 
	`c‹em≠_˙t
(
pktgí
.
c‹e_öfo
, 
˙t
, 1);

54 
nb_thªads
 = 
	`c‹em≠_˙t
(
pktgí
.
c‹e_öfo
, 
˙t
, 2);

56 i‡–(
cou¡î
++ & 3) != 0)

59 
row
 = 3;

60 
	`s¸n_¥ötf
(
row
++, 1, "Kî√l: %s", 
pktgí
.
u«me
);

61 
row
++;

62 
	`s¸n_¥ötf
(
row
++, 1, "Modñ Name: %s", 
pktgí
.
ls˝u
->
modñ_«me
);

63 
	`s¸n_¥ötf
(
row
++, 1, "CPU S≥ed : %s", 
pktgí
.
ls˝u
->
˝u_mhz
);

64 
	`s¸n_¥ötf
(
row
++, 1, "CachêSize: %s", 
pktgí
.
ls˝u
->
ˇche_size
);

65 
row
++;

66 
	`s¸n_¥ötf
(
row
++, 1, "CPU Fœg†: %s", 
pktgí
.
ls˝u
->
˝u_Êags
);

67 
row
 += 4;

69 
	`s¸n_¥ötf
(
row
++, 5,

71 
nb_sockës
,

72 
nb_c‹es
,

73 
nb_thªads
);

75 
	`•rötf
(
buff
, "Socket : ");

76 
i
 = 0; i < 
nb_sockës
; i++)

77 
	`°∫ˇtf
(
buff
, "%4d ", 
i
);

78 
	`s¸n_¥ötf
(
row
++, 3, "%s", 
buff
);

80 
buff
[0] = '\0';

81 
i
 = 0; i < 
nb_c‹es
; i++) {

82 
	`°∫ˇtf
(
buff
, " Core %3d : [%2d,%2d] ",

83 
i
, 
	`s˘
(0, i, 0), sct(0, i, 1));

84 i‡(
nb_sockës
 > 1)

85 
	`°∫ˇtf
(
buff
, "[%2d,%2d] ",

86 
	`s˘
(1, 
i
, 0), sct(1, i, 1));

87 i‡(
nb_sockës
 > 2)

88 
	`°∫ˇtf
(
buff
, "[%2d,%2d] ",

89 
	`s˘
(2, 
i
, 0), sct(2, i, 1));

90 i‡(
nb_sockës
 > 3)

91 
	`°∫ˇtf
(
buff
, "[%2d,%2d] ",

92 
	`s˘
(3, 
i
, 0), sct(3, i, 1));

93 
	`°∫ˇtf
(
buff
, "\n");

95 
	`s¸n_¥ötf
(
row
++, 1, "%s", 
buff
);

97 
	`pg_p‹t_m©rix_dump
(
pktgí
.
l2p
);

99 i‡(
pktgí
.
Êags
 & 
PRINT_LABELS_FLAG
) {

100 
pktgí
.
œ°_row
 = 36;

101 
	`di•œy_dashlöe
(
pktgí
.
œ°_row
);

103 
	`s¸n_£tw
(
pktgí
.
œ°_row
);

104 
	`s¸n_¥ötf
(100, 1, "");

106 
pktgí
.
Êags
 &~
PRINT_LABELS_FLAG
;

107 
	}
}

122 
	$pktgí_˝u_öô
()

124 
	`pktgí_gë_u«me
();

125 
	`mem£t
(&
pktgí
.
c‹e_öfo
, 0xff, ((
lc_öfo_t
Ë* 
RTE_MAX_LCORE
));

126 
pktgí
.
c‹e_˙t
 = 
	`c‹em≠
("array",

127 
pktgí
.
c‹e_öfo
,

128 
RTE_MAX_LCORE
,

129 
NULL
);

130 
pktgí
.
ls˝u
 = 
	`ls˝u_öfo
(
NULL
, NULL);

131 
	}
}

	@app/pktgen-cpu.h

8 #i‚de‡
_PKTGEN_CPU_H_


9 
	#_PKTGEN_CPU_H_


	)

11 #ifde‡
__˝lu•lus


27 
pktgí_˝u_öô
();

41 
pktgí_∑ge_˝u
();

43 
ölöe
 
uöt8_t


44 
s˘
(
uöt8_t
 
s
, uöt8_à
c
, uöt8_à
t
) {

45 
lc_öfo_t
 *
lc
 = &
pktgí
.
c‹e_öfo
[0];

46 
uöt8_t
 
i
;

48 
i
 = 0; i < 
pktgí
.
c‹e_˙t
; i++, 
lc
++)

49 i‡(
lc
->
s
.
sockë_id
 =†&&Üc->s.
c‹e_id
 =
c
 &&

50 
lc
->
s
.
thªad_id
 =
t
)

51  
lc
->
s
.
id
;

56 #ifde‡
__˝lu•lus


	@app/pktgen-display.c

9 
	~<sys/°©.h
>

10 
	~"pktgí-di•œy.h
"

11 
	~"pktgí-cmds.h
"

13 
	#MAX_COLOR_NAME_SIZE
 64

	)

14 
	#MAX_PROMPT_STRING_SIZE
 64

	)

16 
	g¥om±_°r
[
MAX_PROMPT_STRING_SIZE
] = { 0 };

19 
	s°rög_cﬁ‹_m≠_s
 {

20 c⁄° *
	m«me
;

21 
s¸n_cﬁ‹_e
 
	mcﬁ‹
;

22 } 
	t°rög_cﬁ‹_m≠_t
;

24 
°rög_cﬁ‹_m≠_t
 
	g°rög_cﬁ‹_m≠
[] = {

25 { "bœck", 
SCRN_BLACK
 },

26 { "bœck", 
SCRN_DEFAULT_FG
 },

27 { "ªd", 
SCRN_RED
 },

28 { "gªí", 
SCRN_GREEN
 },

29 { "yñlow", 
SCRN_YELLOW
 },

30 { "blue", 
SCRN_BLUE
 },

31 { "magíè", 
SCRN_MAGENTA
 },

32 { "cy™", 
SCRN_CYAN
 },

33 { "whôe", 
SCRN_WHITE
 },

34 { "whôe", 
SCRN_DEFAULT_BG
 },

35 { "deÁu…", 
SCRN_WHITE
 },

37 { "n⁄e", 
SCRN_NO_CHANGE
 },

38 { "deÁu…_fg", 
SCRN_NO_CHANGE
 },

39 { "deÁu…_bg", 
SCRN_NO_CHANGE
 },

40 { 
NULL
, 0 }

44 
	s°rög_©å_m≠_s
 {

45 c⁄° *
	m«me
;

46 
s¸n_©å_e
 
	m©å
;

47 } 
	t°rög_©å_m≠_t
;

49 
°rög_©å_m≠_t
 
	g°rög_©å_m≠
[] = {

50 { "off", 
SCRN_OFF
 },

51 { "deÁu…", 
SCRN_OFF
 },

52 { "bﬁd", 
SCRN_BOLD
 },

53 { "bright", 
SCRN_BOLD
 },

54 { "undîsc‹e", 
SCRN_UNDERSCORE
 },

55 { "undîlöe", 
SCRN_UNDERSCORE
 },

56 { "blök", 
SCRN_BLINK
 },

57 { "ªvî£", 
SCRN_REVERSE
 },

58 { "c⁄˚Æed", 
SCRN_CONCEALED
 },

59 { 
NULL
, 0 }

63 
	stheme_cﬁ‹_m≠_s
 {

64 c⁄° *
	m«me
;

65 
s¸n_cﬁ‹_e
 
	mfg_cﬁ‹
;

66 
s¸n_cﬁ‹_e
 
	mbg_cﬁ‹
;

67 
s¸n_©å_e
 
	m©å
;

68 } 
	ttheme_cﬁ‹_m≠_t
;

70 
theme_cﬁ‹_m≠_t
 
	gtheme_cﬁ‹_m≠
[] = {

72 { "deÁu…", 
SCRN_DEFAULT_FG
, 
SCRN_DEFAULT_BG
, 
SCRN_OFF
 },

77 { "t›.•ö√r", 
SCRN_CYAN
, 
SCRN_NO_CHANGE
, 
SCRN_BOLD
 },

78 { "t›.p‹ts", 
SCRN_GREEN
, 
SCRN_NO_CHANGE
, 
SCRN_BOLD
 },

79 { "t›.∑ge", 
SCRN_WHITE
, 
SCRN_NO_CHANGE
, 
SCRN_BOLD
 },

80 { "t›.c›yright", 
SCRN_YELLOW
, 
SCRN_NO_CHANGE
, 
SCRN_OFF
 },

81 { "t›.powîedby", 
SCRN_BLUE
, 
SCRN_NO_CHANGE
, 
SCRN_BOLD
 },

86 { "£p.dash", 
SCRN_BLUE
, 
SCRN_NO_CHANGE
, 
SCRN_OFF
 },

87 { "£p.ãxt", 
SCRN_WHITE
, 
SCRN_NO_CHANGE
, 
SCRN_OFF
 },

93 { "°©s.p‹t.œbñ", 
SCRN_BLUE
, 
SCRN_NO_CHANGE
, 
SCRN_BOLD
 },

94 { "°©s.p‹t.Êags", 
SCRN_BLUE
, 
SCRN_NO_CHANGE
, 
SCRN_BOLD
 },

95 { "°©s.p‹t.°©us", 
SCRN_YELLOW
, 
SCRN_NO_CHANGE
, 
SCRN_BOLD
 },

96 { "°©s.p‹t.d©a", 
SCRN_WHITE
, 
SCRN_NO_CHANGE
, 
SCRN_OFF
 },

99 { "°©s.dyn.œbñ", 
SCRN_YELLOW
, 
SCRN_NO_CHANGE
, 
SCRN_OFF
 },

100 { "°©s.dyn.vÆues", 
SCRN_YELLOW
, 
SCRN_NO_CHANGE
, 
SCRN_OFF
 },

103 { "°©s.°©.œbñ", 
SCRN_MAGENTA
, 
SCRN_NO_CHANGE
, 
SCRN_OFF
 },

104 { "°©s.°©.vÆues", 
SCRN_WHITE
, 
SCRN_NO_CHANGE
, 
SCRN_BOLD
 },

107 { "°©s.tŸÆ.œbñ", 
SCRN_RED
, 
SCRN_NO_CHANGE
, 
SCRN_BOLD
 },

108 { "°©s.tŸÆ.d©a", 
SCRN_RED
, 
SCRN_NO_CHANGE
, 
SCRN_BOLD
 },

111 { "°©s.cﬁ⁄", 
SCRN_BLUE
, 
SCRN_NO_CHANGE
, 
SCRN_BOLD
 },

116 { "pktgí.¥om±", 
SCRN_GREEN
, 
SCRN_NO_CHANGE
, 
SCRN_OFF
 },

117 { 
NULL
, 0, 0, 0 }

123 
	$di•œy_t›löe
(c⁄° *
msg
)

125 
	`s¸n_¥ötf
(1, 20, "%s", 
msg
);

126 
	`pktgí_di•œy_£t_cﬁ‹
("top.copyright");

127 
	`s¸n_puts
(" %s", 
	`c›yright_msg_sh‹t
());

128 
	`pktgí_di•œy_£t_cﬁ‹
(
NULL
);

129 
	}
}

133 
	$di•œy_dashlöe
(
œ°_row
)

135 
i
;

137 
	`s¸n_£tw
(
œ°_row
);

138 
œ°_row
--;

139 
	`s¸n_pos
(
œ°_row
, 1);

140 
	`pktgí_di•œy_£t_cﬁ‹
("sep.dash");

141 
i
 = 0; i < 79; i++)

142 
	`s¸n_Ârötf
(0, 0, 
°dout
, "-");

143 
	`pktgí_di•œy_£t_cﬁ‹
("sep.text");

144 
	`s¸n_¥ötf
(
œ°_row
, 3, " Pktgí %†", 
	`pktgí_vîsi⁄
());

145 
	`pktgí_di•œy_£t_cﬁ‹
("top.poweredby");

146 
	`s¸n_puts
(" %†", 
	`powîed_by
());

147 
	`pktgí_di•œy_£t_cﬁ‹
(
NULL
);

148 
	}
}

152 
	$pktgí_di•œy_£t_geomëry
(
uöt16_t
 
rows
, uöt16_à
cﬁs
)

154 
this_s¸n
->
ƒows
 = 
rows
;

155 
this_s¸n
->
ncﬁs
 = 
cﬁs
;

156 
	}
}

160 
	$pktgí_di•œy_gë_geomëry
(
uöt16_t
 *
rows
, uöt16_à*
cﬁs
)

162 i‡(
rows
 !
NULL
)

163 *
rows
 = 
this_s¸n
->
ƒows
;

165 i‡(
cﬁs
 !
NULL
)

166 *
cﬁs
 = 
this_s¸n
->
ncﬁs
;

167 
	}
}

170 
theme_cﬁ‹_m≠_t
 *

171 
	$lookup_ôem
(c⁄° *
ñem
)

173 
theme_cﬁ‹_m≠_t
 *
ªsu…
;

175 i‡(
ñem
 =
NULL
)

176 
ñem
 = "default";

179 
ªsu…
 = 
theme_cﬁ‹_m≠
;Ñesu…->
«me
 !
NULL
; ++result)

180 i‡(
	`°∫ˇ£cmp
(
ªsu…
->
«me
, 
ñem
, 
MAX_COLOR_NAME_SIZE
) == 0)

184 i‡(
ªsu…
->
«me
 =
NULL
)

185 
ªsu…
 = 
NULL
;

187  
ªsu…
;

188 
	}
}

192 
	$pktgí_di•œy_£t_cﬁ‹
(c⁄° *
ñem
) {

193 
theme_cﬁ‹_m≠_t
 *
theme_cﬁ‹
;

195 i‡(
this_s¸n
->
theme
 =
SCRN_THEME_OFF
)

198 
theme_cﬁ‹
 = 
	`lookup_ôem
(
ñem
);

199 i‡(
theme_cﬁ‹
 =
NULL
) {

200 
	`pktgí_log_îr‹
("Unknow¿cﬁ‹ '%s'", 
ñem
);

204 
	`s¸n_cﬁ‹
(
theme_cﬁ‹
->
fg_cﬁ‹
,

205 
theme_cﬁ‹
->
bg_cﬁ‹
,

206 
theme_cﬁ‹
->
©å
);

207 
	}
}

211 
	$__£t_¥om±
()

213 
theme_cﬁ‹_m≠_t
 *
def
, *
¥om±
;

216 
	`¢¥ötf
(
¥om±_°r
, ’rom±_°r), "%s> ", 
PKTGEN_APP_NAME
);

218 i‡–(
this_s¸n
->
theme
 =
SCRN_THEME_ON
Ë&& !
	`s¸n_is_∑u£d
() ) {

220 
def
 = 
	`lookup_ôem
(
NULL
);

221 
¥om±
 = 
	`lookup_ôem
("pktgen.prompt");

223 i‡–(
def
 =
NULL
Ë|| (
¥om±
 == NULL) )

224 
	`pktgí_log_îr‹
(

228 
	`¢¥ötf
(
¥om±_°r
,

229 (
¥om±_°r
),

231 
¥om±
->
©å
,

232 30 + 
¥om±
->
fg_cﬁ‹
,

233 40 + 
¥om±
->
bg_cﬁ‹
,

234 
PKTGEN_APP_NAME
,

235 
def
->
©å
,

236 30 + 
def
->
fg_cﬁ‹
,

237 40 + 
def
->
bg_cﬁ‹
);

239 
	}
}

242 
	$gë_«me_by_cﬁ‹
(
s¸n_cﬁ‹_e
 
cﬁ‹
)

244 
i
;

246 
i
 = 0; 
°rög_cﬁ‹_m≠
[i].
«me
; i++)

247 i‡(
cﬁ‹
 =
°rög_cﬁ‹_m≠
[
i
].color)

248  
°rög_cﬁ‹_m≠
[
i
].
«me
;

249  
NULL
;

250 
	}
}

253 
	$gë_«me_by_©å
(
s¸n_©å_e
 
©å
)

255 
i
;

257 
i
 = 0; 
°rög_©å_m≠
[i].
«me
; i++)

258 i‡(
©å
 =
°rög_©å_m≠
[
i
].attr)

259  
°rög_©å_m≠
[
i
].
«me
;

260  
NULL
;

261 
	}
}

263 
s¸n_cﬁ‹_e


264 
	$gë_cﬁ‹_by_«me
(*
«me
)

266 
i
;

268 
i
 = 0; 
°rög_cﬁ‹_m≠
[i].
«me
; i++)

269 i‡(
	`°rcmp
(
«me
, 
°rög_cﬁ‹_m≠
[
i
].name) == 0)

270  
°rög_cﬁ‹_m≠
[
i
].
cﬁ‹
;

271  
SCRN_UNKNOWN_COLOR
;

272 
	}
}

274 
s¸n_©å_e


275 
	$gë_©å_by_«me
(*
«me
)

277 
i
;

279 
i
 = 0; 
°rög_©å_m≠
[i].
«me
; i++)

280 i‡(
	`°rcmp
(
«me
, 
°rög_©å_m≠
[
i
].name) == 0)

281  
°rög_©å_m≠
[
i
].
©å
;

282  
SCRN_UNKNOWN_ATTR
;

283 
	}
}

286 
	$pktgí_theme_show
()

288 
i
;

290 
	`¥ötf
("*** Theme Color Map Names (%s) ***\n",

291 
this_s¸n
->
theme
 ? "Enabled" : "Disabled");

292 
	`¥ötf
(" %-30s %-10s %-10s %s\n",

297 
i
 = 0; 
theme_cﬁ‹_m≠
[i].
«me
; i++) {

298 
	`¥ötf
(" %-32s %-10s %-10s %-6s",

299 
theme_cﬁ‹_m≠
[
i
].
«me
,

300 
	`gë_«me_by_cﬁ‹
(
theme_cﬁ‹_m≠
[
i
].
fg_cﬁ‹
),

301 
	`gë_«me_by_cﬁ‹
(
theme_cﬁ‹_m≠
[
i
].
bg_cﬁ‹
),

302 
	`gë_«me_by_©å
(
theme_cﬁ‹_m≠
[
i
].
©å
));

303 
	`¥ötf
(" ");

304 
	`pktgí_di•œy_£t_cﬁ‹
(
theme_cﬁ‹_m≠
[
i
].
«me
);

305 
	`¥ötf
("%-s", 
theme_cﬁ‹_m≠
[
i
].
«me
);

306 
	`pktgí_di•œy_£t_cﬁ‹
(
NULL
);

307 
	`¥ötf
("\n");

309 
	}
}

312 
	$pktgí_theme_°©e
(c⁄° *
°©e
)

314 i‡(
	`e°©e
(
°©e
Ë=
DISABLE_STATE
)

315 
this_s¸n
->
theme
 = 
SCRN_THEME_OFF
;

317 
this_s¸n
->
theme
 = 
SCRN_THEME_ON
;

318 
	`__£t_¥om±
();

319 
	}
}

322 
	$pktgí_£t_theme_ôem
(*
ôem
, *
fg_cﬁ‹
, *
bg_cﬁ‹
, *
©å
)

324 
theme_cﬁ‹_m≠_t
 *
ñem
;

325 
s¸n_cﬁ‹_e
 
fg
, 
bg
;

326 
s¸n_©å_e
 
©
;

328 
ñem
 = 
	`lookup_ôem
(
ôem
);

330 i‡(
ñem
 =
NULL
) {

331 
	`pktgí_log_îr‹
("Unknow¿ôemÇamê(%s)\n", 
ôem
);

335 
fg
 = 
	`gë_cﬁ‹_by_«me
(
fg_cﬁ‹
);

336 
bg
 = 
	`gë_cﬁ‹_by_«me
(
bg_cﬁ‹
);

337 
©
 = 
	`gë_©å_by_«me
(
©å
);

339 i‡–(
fg
 =
SCRN_UNKNOWN_COLOR
Ë|| (
bg
 == SCRN_UNKNOWN_COLOR) ||

340 (
©
 =
SCRN_UNKNOWN_ATTR
) ) {

341 
	`pktgí_log_îr‹
("Unknown color oráttribute (%s, %s, %s)\n",

342 
fg_cﬁ‹
,

343 
bg_cﬁ‹
,

344 
©å
);

348 
ñem
->
fg_cﬁ‹
 = 
fg
;

349 
ñem
->
bg_cﬁ‹
 = 
bg
;

350 
ñem
->
©å
 = 
©
;

351 
	}
}

354 
	$pktgí_theme_ßve
(*
fûíame
)

356 
FILE
 *
f
;

357 
i
;

359 
f
 = 
	`f›í
(
fûíame
, "w+");

360 i‡(
f
 =
NULL
) {

361 
	`pktgí_log_îr‹
("U«bÀÅÿ›í fûê%s\n", 
fûíame
);

365 
i
 = 0; 
theme_cﬁ‹_m≠
[i].
«me
; i++)

366 
	`Ârötf
(
f
, "theme %s %s %s %s\n",

367 
theme_cﬁ‹_m≠
[
i
].
«me
,

368 
	`gë_«me_by_cﬁ‹
(
theme_cﬁ‹_m≠
[
i
].
fg_cﬁ‹
),

369 
	`gë_«me_by_cﬁ‹
(
theme_cﬁ‹_m≠
[
i
].
bg_cﬁ‹
),

370 
	`gë_«me_by_©å
(
theme_cﬁ‹_m≠
[
i
].
©å
));

371 
	`Ârötf
(
f
, "cls\n");

373 
	`fchmod
(
	`fûío
(
f
), 0666);

374 
	`f˛o£
(
f
);

375 
	}
}

	@app/pktgen-display.h

9 #i‚de‡
_PKTGEN_DISPLAY_H_


10 
	#_PKTGEN_DISPLAY_H_


	)

13 
	~<˛i_s¸n.h
>

15 
	~<c›yright_öfo.h
>

17 
	~"pktgí.h
"

19 #ifde‡
__˝lu•lus


24 
pktgí_öô_s¸ìn
(
theme
);

37 
di•œy_t›löe
(c⁄° *
msg
);

50 
di•œy_dashlöe
(
œ°_row
);

63 
pktgí_di•œy_£t_geomëry
(
uöt16_t
 
rows
, uöt16_à
cﬁs
);

76 
pktgí_di•œy_gë_geomëry
(
uöt16_t
 *
rows
, uöt16_à*
cﬁs
);

89 
pktgí_di•œy_£t_cﬁ‹
(c⁄° *
ñem
);

104 
pktgí_£t_¥om±
();

117 
pktgí_show_theme
();

130 
pktgí_£t_theme_ôem
(*
ôem
,

131 *
fg_cﬁ‹
,

132 *
bg_cﬁ‹
,

133 *
©å
);

146 
pktgí_theme_ßve
(*
fûíame
);

159 
pktgí_theme_°©e
(c⁄° *
°©e
);

172 
pktgí_theme_show
();

174 #ifde‡
__˝lu•lus


	@app/pktgen-dump.c

9 
	~<˛i_s¸n.h
>

10 
	~"pktgí.h
"

11 
	~"pktgí-log.h
"

26 
	$pktgí_∑ckë_dump
(
πe_mbuf
 *
m
, 
pid
)

28 
p‹t_öfo_t
 *
öfo
 = &
pktgí
.öfo[
pid
];

29 
∂í
 = (
m
->
pkt_Àn
 + 
FCS_SIZE
);

30 *
cuº_d©a
;

31 
πe_mbuf
 *
cuº_mbuf
;

34 i‡(
öfo
->
dump_li°
[öfo->
dump_èû
].
d©a
 !
NULL
)

35 
	`πe_‰ì
(
öfo
->
dump_li°
[öfo->
dump_èû
].
d©a
);

37 
öfo
->
dump_li°
[öfo->
dump_èû
].
d©a
 = 
	`πe_zmÆloc_sockë
("Packë d©a", 
∂í
, 0, 
	`πe_sockë_id
());

38 
öfo
->
dump_li°
[öfo->
dump_èû
].
Àn
 = 
∂í
;

40 
cuº_d©a
 = 
öfo
->
dump_li°
[öfo->
dump_èû
].
d©a
, 
cuº_mbuf
 = 
m
;

41 
cuº_mbuf
 !
NULL
;

42 
cuº_d©a
 +
cuº_mbuf
->
d©a_Àn
, cuº_mbu‡cuº_mbuf->
√xt
)

43 
	`πe_mem˝y
(
cuº_d©a
,

44 (
uöt8_t
 *)
cuº_mbuf
->
buf_addr
 + 
m
->
d©a_off
,

45 
cuº_mbuf
->
d©a_Àn
);

47 ++
öfo
->
dump_èû
;

48 
	}
}

63 
	$pktgí_∑ckë_dump_bulk
(
πe_mbuf
 **
pkts
, 
nb_dump
, 
pid
)

65 
p‹t_öfo_t
 *
öfo
 = &
pktgí
.öfo[
pid
];

66 
i
;

69 i‡(
nb_dump
 > 
öfo
->
dump_cou¡
)

70 
nb_dump
 = 
öfo
->
dump_cou¡
;

73 i‡(
nb_dump
 > 
MAX_DUMP_PACKETS
 - 
öfo
->
dump_èû
)

74 
nb_dump
 = 
MAX_DUMP_PACKETS
 - 
öfo
->
dump_èû
;

76 i‡(
nb_dump
 == 0)

79 
i
 = 0; i < 
nb_dump
; i++)

80 
	`pktgí_∑ckë_dump
(
pkts
[
i
], 
pid
);

82 
öfo
->
dump_cou¡
 -
nb_dump
;

83 
	}
}

99 
	$pktgí_¥öt_∑ckë_dump
()

101 
p‹t_öfo_t
 *
öfo
;

103 
pid
;

104 
i
, 
j
;

105 *
pd©a
;

106 
uöt32_t
 
∂í
;

107 
buff
[4096];

109 
pid
 = 0;Öid < 
RTE_MAX_ETHPORTS
;Öid++) {

110 i‡(
	`gë_m≠
(
pktgí
.
l2p
, 
pid
, 
RTE_MAX_LCORE
) == 0)

113 
öfo
 = &
pktgí
.öfo[
pid
];

114 ; 
öfo
->
dump_hód
 < info->
dump_èû
; ++info->dump_head) {

115 
pd©a
 = (*)
öfo
->
dump_li°
[öfo->
dump_hód
].
d©a
;

116 
∂í
 = 
öfo
->
dump_li°
[öfo->
dump_hód
].
Àn
;

118 
	`¢¥ötf
(
buff
, (buff),

119 "P‹à%d,Öackë wôhÜígth %d:", 
pid
, 
∂í
);

121 
i
 = 0; i < 
∂í
; i += 16) {

122 
	`°∫ˇtf
(
buff
, "\n\t");

125 
	`°∫ˇtf
(
buff
, "%06x: ", 
i
);

127 
j
 = 0; j < 16; ++j) {

129 i‡(
i
 + 
j
 < 
∂í
)

130 
	`°∫ˇtf
(
buff
, "%02x ",

131 
pd©a
[
i
 + 
j
]);

133 
	`°∫ˇtf
(
buff
, " ");

136 i‡((
j
 + 1) % 8 == 0)

137 
	`°∫ˇtf
(
buff
, " ");

141 
	`°∫ˇtf
(
buff
, "\t");

143 
j
 = 0; j < 16; ++j)

144 i‡(
i
 + 
j
 < 
∂í
)

145 
	`°∫ˇtf
(
buff
, "%c",

146 
	`i•röt
(
pd©a
[
i
 +

147 
j
]) ?

148 
pd©a
[

149 
i
 + 
j
] : '.');

151 
	`pktgí_log_öfo
("%s", 
buff
);

153 
	`πe_‰ì
(
öfo
->
dump_li°
[öfo->
dump_hód
].
d©a
);

154 
öfo
->
dump_li°
[öfo->
dump_hód
].
d©a
 = 
NULL
;

157 
	}
}

	@app/pktgen-dump.h

8 #i‚de‡
_PKTGEN_DUMP_H_


9 
	#_PKTGEN_DUMP_H_


	)

11 
	~<πe_mbuf.h
>

13 #ifde‡
__˝lu•lus


17 
	#MAX_DUMP_PACKETS
 32

	)

19 
pktgí_∑ckë_dump
(
πe_mbuf
 *
m
, 
pid
);

20 
pktgí_∑ckë_dump_bulk
(
πe_mbuf
 **
pkts
, 
nb_dump
,

21 
pid
);

23 
pktgí_¥öt_∑ckë_dump
();

25 #ifde‡
__˝lu•lus


	@app/pktgen-ether.c

8 
	~"pktgí-ëhî.h
"

9 
	~"pktgí-£q.h
"

10 
	~"pktgí-p‹t-cfg.h
"

25 
	$pktgí_ëhî_hdr_˘‹
(
p‹t_öfo_t
 *
öfo
, 
pkt_£q_t
 *
pkt
, 
ëhî_hdr
 *
ëh
)

27 
uöt32_t
 
Êags
;

28 
uöt16_t
 
vœn_id
;

30 
	`ëhî_addr_c›y
(&
pkt
->
ëh_§c_addr
, &
ëh
->
s_addr
);

31 
	`ëhî_addr_c›y
(&
pkt
->
ëh_d°_addr
, &
ëh
->
d_addr
);

33 
Êags
 = 
	`πe_©omic32_ªad
(&
öfo
->
p‹t_Êags
);

34 i‡(
Êags
 & 
SEND_VLAN_ID
) {

36 
ëh
->
ëhî_ty≥
 = 
	`ht⁄s
(
ETHER_TYPE_VLAN
);

39 
vœn_hdr
 *vœn_hd∏(vœn_hd∏*)(
ëh
 + 1);

40 
vœn_id
 = (
pkt
->
vœnid
 | (pkt->
cos
 << 13));

41 
vœn_hdr
->
vœn_tci
 = 
	`ht⁄s
(
vœn_id
);

42 
vœn_hdr
->
ëh_¥Ÿo
 = 
	`ht⁄s
(
pkt
->
ëhTy≥
);

45 
pkt
->
ëhî_hdr_size
 = (
ëhî_hdr
) +

46 (
vœn_hdr
);

48  (*)(
vœn_hdr
 + 1);

49 } i‡(
Êags
 & 
SEND_MPLS_LABEL
) {

51 
ëh
->
ëhî_ty≥
 = 
	`ht⁄s
(
ETHER_TYPE_MPLS_UNICAST
);

53 
m∂sHdr_t
 *
m∂s_hdr
 = (m∂sHdr_à*)(
ëh
 + 1);

57 
uöt32_t
 
m∂s_œbñ
 = 
pkt
->
m∂s_íåy
;

58 
	`MPLS_SET_BOS
(
m∂s_œbñ
);

60 
m∂s_hdr
->
œbñ
 = 
	`ht⁄l
(
m∂s_œbñ
);

63 
pkt
->
ëhî_hdr_size
 = (
ëhî_hdr
) +

64 (
m∂sHdr_t
);

66  (*)(
m∂s_hdr
 + 1);

67 } i‡(
Êags
 & 
SEND_Q_IN_Q_IDS
) {

69 
ëh
->
ëhî_ty≥
 = 
	`ht⁄s
(
ETHER_TYPE_Q_IN_Q
);

71 
qöqHdr_t
 *
qöq_hdr
 = (qöqHdr_à*)(
ëh
 + 1);

74 
qöq_hdr
->
qöq_tci
 = 
	`ht⁄s
(
pkt
->
qöq_ouãrid
);

76 
qöq_hdr
->
vœn_çid
 = 
	`ht⁄s
(
ETHER_TYPE_VLAN
);

77 
qöq_hdr
->
vœn_tci
 = 
	`ht⁄s
(
pkt
->
qöq_ö√rid
);

79 
qöq_hdr
->
ëh_¥Ÿo
 = 
	`ht⁄s
(
pkt
->
ëhTy≥
);

82 
pkt
->
ëhî_hdr_size
 = (
ëhî_hdr
) +

83 (
qöqHdr_t
);

85  (*)(
qöq_hdr
 + 1);

88 
ëh
->
ëhî_ty≥
 = 
	`ht⁄s
(
pkt
->
ëhTy≥
);

89 
pkt
->
ëhî_hdr_size
 = (
ëhî_hdr
);

92  (*)(
ëh
 + 1);

93 
	}
}

	@app/pktgen-ether.h

8 #i‚de‡
_PKTGEN_ETHER_H_


9 
	#_PKTGEN_ETHER_H_


	)

11 
	~<πe_ëhdev.h
>

13 
	~"pktgí-£q.h
"

15 #ifde‡
__˝lu•lus


19 
πe_ëh_°©s
 
	tëh_°©s_t
;

21 
p‹t_öfo_s
;

23 *
pktgí_ëhî_hdr_˘‹
(
p‹t_öfo_s
 *
öfo
,

24 
pkt_£q_t
 *
pkt
,

25 
ëhî_hdr
 *
ëh
);

27 #ifde‡
__˝lu•lus


	@app/pktgen-gre.c

9 
	~<˛i_s¸n.h
>

10 
	~"pktgí-gª.h
"

11 
	~"pktgí.h
"

26 
	$pktgí_gª_hdr_˘‹
(
p‹t_öfo_t
 *
öfo
 
__πe_unu£d
, 
pkt_£q_t
 *
pkt
,

27 
gªIp_t
 *
gª
)

30 
	`mem£t
((*)
gª
, 0, (
gªIp_t
));

33 
gª
->
ù
.
vl
 = (
IPv4_VERSION
 << 4Ë| ((
ùHdr_t
) / 4);

34 
gª
->
ù
.
tos
 = 0;

35 
gª
->
ù
.
éí
 = 
	`ht⁄s
(
pkt
->
pktSize
 -Ökt->
ëhî_hdr_size
);

37 
pktgí
.
idít
 += 27;

38 
gª
->
ù
.
idít
 = 
	`ht⁄s
(
pktgí
.ident);

39 
gª
->
ù
.
f‰ag
 = 0;

40 
gª
->
ù
.
âl
 = 64;

41 
gª
->
ù
.
¥Ÿo
 = 
PG_IPPROTO_GRE
;

44 
	#GRE_SRC_ADDR
 (10 << 24Ë| (10 << 16Ë| (1 << 8Ë| 1

	)

45 
	#GRE_DST_ADDR
 (10 << 24Ë| (10 << 16Ë| (1 << 8Ë| 2

	)

46 
gª
->
ù
.
§c
 = 
	`ht⁄l
(
GRE_SRC_ADDR
);

47 
gª
->
ù
.
d°
 = 
	`ht⁄l
(
GRE_DST_ADDR
);

48 #unde‡
GRE_SRC_ADDR


49 #unde‡
GRE_DST_ADDR


51 
gª
->
ù
.
cksum
 = 
	`cksum
(gª, (
ùHdr_t
), 0);

54 
gª
->gª.
chk_¥e£¡
 = 0;

55 
gª
->gª.
unu£d
 = 0;

56 
gª
->gª.
key_¥e£¡
 = 1;

57 
gª
->gª.
£q_¥e£¡
 = 0;

59 
gª
->gª.
ª£rved0_0
 = 0;

60 
gª
->gª.
ª£rved0_1
 = 0;

62 
gª
->gª.
vîsi⁄
 = 0;

63 
gª
->gª.
ëh_ty≥
 = 
	`ht⁄s
(
ETHER_TYPE_IPv4
);

66 
exåa_cou¡
 = 0;

67 i‡(
gª
->gª.
chk_¥e£¡
)

73 ++
exåa_cou¡
;

75 i‡(
gª
->gª.
key_¥e£¡
) {

76 
gª
->gª.
exåa_fõlds
[
exåa_cou¡
] = 
	`ht⁄l
(
pkt
->
gª_key
);

77 ++
exåa_cou¡
;

80 i‡(
gª
->gª.
£q_¥e£¡
)

83 ++
exåa_cou¡
;

87 
pkt
->
ëhî_hdr_size
 +(
gªIp_t
Ë- 4 * (3 - 
exåa_cou¡
);

88  (*)(
gª
 + 1Ë- 4 * (3 - 
exåa_cou¡
);

89 
	}
}

104 
	$pktgí_gª_ëhî_hdr_˘‹
(
p‹t_öfo_t
 *
öfo
 
__πe_unu£d
,

105 
pkt_£q_t
 *
pkt
,

106 
gªEthî_t
 *
gª
)

109 
	`mem£t
((*)
gª
, 0, (
gªEthî_t
));

112 
gª
->
ù
.
vl
 = (
IPv4_VERSION
 << 4Ë| ((
ùHdr_t
) / 4);

113 
gª
->
ù
.
tos
 = 0;

114 
gª
->
ù
.
éí
 = 
	`ht⁄s
(
pkt
->
pktSize
 -Ökt->
ëhî_hdr_size
);

116 
pktgí
.
idít
 += 27;

117 
gª
->
ù
.
idít
 = 
	`ht⁄s
(
pktgí
.ident);

118 
gª
->
ù
.
f‰ag
 = 0;

119 
gª
->
ù
.
âl
 = 64;

120 
gª
->
ù
.
¥Ÿo
 = 
PG_IPPROTO_GRE
;

123 
	#GRE_SRC_ADDR
 (10 << 24Ë| (10 << 16Ë| (1 << 8Ë| 1

	)

124 
	#GRE_DST_ADDR
 (10 << 24Ë| (10 << 16Ë| (1 << 8Ë| 2

	)

125 
gª
->
ù
.
§c
 = 
	`ht⁄l
(
GRE_SRC_ADDR
);

126 
gª
->
ù
.
d°
 = 
	`ht⁄l
(
GRE_DST_ADDR
);

127 #unde‡
GRE_SRC_ADDR


128 #unde‡
GRE_DST_ADDR


130 
gª
->
ù
.
cksum
 = 
	`cksum
(gª, (
ùHdr_t
), 0);

133 
gª
->gª.
chk_¥e£¡
 = 0;

134 
gª
->gª.
unu£d
 = 0;

135 
gª
->gª.
key_¥e£¡
 = 1;

136 
gª
->gª.
£q_¥e£¡
 = 0;

138 
gª
->gª.
ª£rved0_0
 = 0;

139 
gª
->gª.
ª£rved0_1
 = 0;

141 
gª
->gª.
vîsi⁄
 = 0;

142 
gª
->gª.
ëh_ty≥
 = 
	`ht⁄s
(
ETHER_TYPE_TRANSP_ETH_BR
);

144 
exåa_cou¡
 = 0;

145 i‡(
gª
->gª.
chk_¥e£¡
)

151 ++
exåa_cou¡
;

153 i‡(
gª
->gª.
key_¥e£¡
) {

154 
gª
->gª.
exåa_fõlds
[
exåa_cou¡
] = 
	`ht⁄l
(
pkt
->
gª_key
);

155 ++
exåa_cou¡
;

158 i‡(
gª
->gª.
£q_¥e£¡
)

161 ++
exåa_cou¡
;

165 
ëhî_hdr
 *
ëh_hdr
 = (ëhî_hd∏*)((*)&
gª
->gre

168 + 4 * 
exåa_cou¡
);

169 
	`ëhî_addr_c›y
(&
pkt
->
ëh_§c_addr
, &
ëh_hdr
->
s_addr
);

170 
	`ëhî_addr_c›y
(&
pkt
->
ëh_d°_addr
, &
ëh_hdr
->
d_addr
);

171 
ëh_hdr
->
ëhî_ty≥
 = 
	`ht⁄s
(
ETHER_TYPE_IPv4
);

176 
pkt
->
ëhî_hdr_size
 +(
gªEthî_t
Ë- 4 * (3 - 
exåa_cou¡
);

177  (*)(
gª
 + 1Ë- 4 * (3 - 
exåa_cou¡
);

178 
	}
}

	@app/pktgen-gre.h

8 #i‚de‡
_PKTGEN_GRE_H_


9 
	#_PKTGEN_GRE_H_


	)

11 
	~<pg_öë.h
>

13 
	~"pktgí-p‹t-cfg.h
"

14 
	~"pktgí-£q.h
"

16 #ifde‡
__˝lu•lus


20 *
pktgí_gª_hdr_˘‹
(
p‹t_öfo_t
 *
öfo
, 
pkt_£q_t
 *
pkt
,

21 
gªIp_t
 *
gª
);

22 *
pktgí_gª_ëhî_hdr_˘‹
(
p‹t_öfo_t
 *
öfo
,

23 
pkt_£q_t
 *
pkt
,

24 
gªEthî_t
 *
gª
);

26 #ifde‡
__˝lu•lus


	@app/pktgen-gtpu.c

9 
	~<˛i_s¸n.h
>

10 
	~"pktgí.h
"

12 
	~"pktgí-gçu.h
"

27 
	$pktgí_gçu_hdr_˘‹
(
pkt_£q_t
 *
pkt
, *
hdr
, 
uöt16_t
 
ùPrŸo
,

28 
uöt8_t
 
Êags
, 
uöt16_t
 
£q_no
, uöt8_à
≈du_no
,

29 
uöt8_t
 
√xt_ext_hdr_ty≥
)

31 
l4HdrSize
;

32 
›ti⁄s
 = 0;

33 
gçuHdr_t
 *
gçpHdr
;

34 *
p
;

36 i‡(
ùPrŸo
 =
PG_IPPROTO_UDP
)

37 
l4HdrSize
 = (
udpHdr_t
);

39 
l4HdrSize
 = (
t˝Hdr_t
);

41 
gçpHdr
 = (
gçuHdr_t
 *)
	`RTE_PTR_ADD
(
hdr
, (
ùHdr_t
Ë+ 
l4HdrSize
);

44 
	`mem£t
((*)
gçpHdr
, 0, (
gçuHdr_t
));

47 
gçpHdr
->
vîsi⁄_Êags
 = 
Êags
;

52 
gçpHdr
->
msg_ty≥
 = 0xff;

58 
gçpHdr
->
ãid
 = 
	`ht⁄l
(
pkt
->
gçu_ãid
);

60 
p
 = (*)
gçpHdr
;

62 i‡(
gçpHdr
->
vîsi⁄_Êags
 & 
GTPu_S_FLAG
) {

67 *(
uöt16_t
 *)
p
 = 
£q_no
;

68 
p
 = 
	`RTE_PTR_ADD
(p, 2);

69 
gçpHdr
->
tŸ_Àn
 += 2;

70 
›ti⁄s
 += 2;

73 i‡(
gçpHdr
->
vîsi⁄_Êags
 & 
GTPu_PN_FLAG
) {

78 *(
uöt8_t
 *)
p
 = 
≈du_no
;

79 
p
 = 
	`RTE_PTR_ADD
(p, 1);

80 
gçpHdr
->
tŸ_Àn
++;

81 
›ti⁄s
++;

84 i‡(
gçpHdr
->
vîsi⁄_Êags
 & 
GTPu_E_FLAG
) {

89 *(
uöt8_t
 *)
p
 = 
√xt_ext_hdr_ty≥
;

90 
p
 = 
	`RTE_PTR_ADD
(p, 1);

91 
gçpHdr
->
tŸ_Àn
++;

92 
›ti⁄s
++;

99 
gçpHdr
->
tŸ_Àn
 = 
	`ht⁄s
(
pkt
->
pktSize
 - (
l4HdrSize
 + (
gçuHdr_t
) +

100 
pkt
->
ëhî_hdr_size
));

101 
	}
}

	@app/pktgen-gtpu.h

8 #i‚de‡
_PKTGEN_GTPU_H_


9 
	#_PKTGEN_GTPU_H_


	)

11 
	~<pg_öë.h
>

13 
	~"pktgí-£q.h
"

15 #ifde‡
__˝lu•lus


32 
pktgí_gçu_hdr_˘‹
(
pkt_£q_t
 *
pkt
, *
hdr
, 
uöt16_t
 
ùPrŸo
,

33 
uöt8_t
 
Êags
, 
uöt16_t
 
£q_no
, uöt8_à
≈du_no
,

34 
uöt8_t
 
√xt_ext_hdr_ty≥
);

36 #ifde‡
__˝lu•lus


	@app/pktgen-ipv4.c

9 
	~<¨∑/öë.h
>

11 
	~<˛i_s¸n.h
>

12 
	~"pktgí.h
"

13 
	~"pktgí-log.h
"

14 
	~"pktgí-ùv4.h
"

29 
	$pktgí_ùv4_˘‹
(
pkt_£q_t
 *
pkt
, *
hdr
)

31 
ùHdr_t
 *
ù
 = 
hdr
;

32 
uöt16_t
 
éí
;

35 
éí
 = 
pkt
->
pktSize
 -Ökt->
ëhî_hdr_size
;

38 
	`mem£t
((*)
ù
, 0, (
ùHdr_t
));

40 
ù
->
vl
 = (
IPv4_VERSION
 << 4Ë| ((
ùHdr_t
) / 4);

42 
ù
->
éí
 = 
	`ht⁄s
(tlen);

43 
ù
->
âl
 = 4;

44 
ù
->
tos
 = 
pkt
->tos;

46 
pktgí
.
idít
 += 27;

47 
ù
->
idít
 = 
	`ht⁄s
(
pktgí
.ident);

48 
ù
->
f‰ag
 = 0;

49 
ù
->
¥Ÿo
 = 
pkt
->
ùPrŸo
;

50 
ù
->
§c
 = 
	`ht⁄l
(
pkt
->
ù_§c_addr
.
addr
.
ùv4
.
s_addr
);

51 
ù
->
d°
 = 
	`ht⁄l
(
pkt
->
ù_d°_addr
.
addr
.
ùv4
.
s_addr
);

52 
ù
->
cksum
 = 
	`cksum
(ù, (
ùHdr_t
), 0);

53 
	}
}

68 
	$pktgí_£nd_pög4
(
uöt32_t
 
pid
, 
uöt8_t
 
£q_idx
)

70 
p‹t_öfo_t
 *
öfo
 = &
pktgí
.öfo[
pid
];

71 
pkt_£q_t
 *
µkt
 = &
öfo
->
£q_pkt
[
PING_PKT
];

72 
pkt_£q_t
 *
•kt
 = &
öfo
->
£q_pkt
[
£q_idx
];

73 
πe_mbuf
 *
m
;

74 
uöt8_t
 
qid
 = 0;

76 
m
 = 
	`πe_pktmbuf_Æloc
(
öfo
->
q
[
qid
].
•ecül_mp
);

77 i‡(
	`u∆ikñy
(
m
 =
NULL
) ) {

78 
	`pktgí_log_w¨nög
("NoÖacket buffers found");

81 *
µkt
 = *
•kt
;

82 
	`pktgí_∑ckë_˘‹
(
öfo
, 
PING_PKT
, 
ICMP4_ECHO
);

83 
	`πe_mem˝y
((
uöt8_t
 *)
m
->
buf_addr
 + m->
d©a_off
,

84 (
uöt8_t
 *)&
µkt
->
hdr
,Öpkt->
pktSize
);

86 
m
->
pkt_Àn
 = 
µkt
->
pktSize
;

87 
m
->
d©a_Àn
 = 
µkt
->
pktSize
;

89 
	`pktgí_£nd_mbuf
(
m
, 
pid
, 
qid
);

91 
	`pktgí_£t_q_Êags
(
öfo
, 
qid
, 
DO_TX_FLUSH
);

92 
	}
}

107 
	$pktgí_¥o˚ss_pög4
(
πe_mbuf
 *
m
, 
uöt32_t
 
pid
, uöt32_à
vœn
)

109 
p‹t_öfo_t
 *
öfo
 = &
pktgí
.öfo[
pid
];

110 
pkt_£q_t
 *
pkt
;

111 
ëhî_hdr
 *
ëh
 = 
	`πe_pktmbuf_mtod
(
m
, ether_hdr *);

112 
ùHdr_t
 *
ù
 = (ùHdr_à*)&
ëh
[1];

113 
buff
[24];

116 i‡(
vœn
)

117 
ù
 = (
ùHdr_t
 *)((*)ù + (
vœn_hdr
));

120 i‡–(
	`πe_©omic32_ªad
(&
öfo
->
p‹t_Êags
Ë& 
ICMP_ECHO_ENABLE_FLAG
) &&

121 (
ù
->
¥Ÿo
 =
PG_IPPROTO_ICMP
) ) {

122 
icmpv4Hdr_t
 *
icmp
 =

123 (
icmpv4Hdr_t
 *)((
uöçå_t
)
ù
 + (
ùHdr_t
));

126 i‡(
	`u∆ikñy
(
	`cksum
(
icmp
,

127 (
m
->
d©a_Àn
 - (
ëhî_hdr
) -

128 (
ùHdr_t
)),

130 
	`pktgí_log_îr‹
("ICMP checksum failed");

134 i‡(
	`u∆ikñy
(
icmp
->
ty≥
 =
ICMP4_ECHO
) ) {

135 i‡(
	`¡ohl
(
ù
->
d°
Ë=
INADDR_BROADCAST
) {

136 
	`pktgí_log_w¨nög
(

138 
	`öë_¡›4
(
buff
,

139 (
buff
), 
ù
->
d°
,

140 
INADDR_BROADCAST
));

145 
pkt
 = 
	`pktgí_föd_m©chög_ù§c
(
öfo
, 
ù
->
d°
);

148 i‡(
	`u∆ikñy
(
pkt
 =
NULL
) ) {

149 
	`pktgí_log_w¨nög
("IPáddress %sÇot found",

150 
	`öë_¡›4
(
buff
,

151 (
buff
),

152 
ù
->
d°
,

153 
INADDR_BROADCAST
));

157 
öfo
->
°©s
.
echo_pkts
++;

159 
icmp
->
ty≥
 = 
ICMP4_ECHO_REPLY
;

162 
icmp
->
cksum
 = 0;

163 
icmp
->
cksum
 =

164 
	`cksum
(
icmp
,

165 (
m
->
d©a_Àn
 - (
ëhî_hdr
) -

166 (
ùHdr_t
)), 0);

169 
	`öëAddrSw≠
(&
ù
->
§c
, &ù->
d°
);

172 
ù
->
idít
 = 
	`ht⁄s
(
	`¡ohs
(ù->idítË+ 
m
->
d©a_Àn
);

175 
ù
->
cksum
 = 0;

176 
ù
->
cksum
 = 
	`cksum
(ù, (
ùHdr_t
), 0);

179 
	`ëhAddrSw≠
(&
ëh
->
d_addr
, &ëh->
s_addr
);

181 
	`pktgí_£nd_mbuf
(
m
, 
pid
, 0);

183 
	`pktgí_£t_q_Êags
(
öfo
, 0, 
DO_TX_FLUSH
);

187 } i‡(
	`u∆ikñy
(
icmp
->
ty≥
 =
ICMP4_ECHO_REPLY
) )

188 
öfo
->
°©s
.
echo_pkts
++;

190 
	}
}

	@app/pktgen-ipv4.h

8 #i‚de‡
_PKTGEN_IPV4_H_


9 
	#_PKTGEN_IPV4_H_


	)

11 
	~"pktgí-£q.h
"

13 #ifde‡
__˝lu•lus


17 
pktgí_ùv4_˘‹
(
pkt_£q_t
 *
pkt
, *
hdr
);

18 
pktgí_£nd_pög4
(
uöt32_t
 
pid
, 
uöt8_t
 
£q_idx
);

19 
pktgí_¥o˚ss_pög4
(
πe_mbuf
 *
m
, 
uöt32_t
 
pid
, uöt32_à
vœn
);

21 #ifde‡
__˝lu•lus


	@app/pktgen-ipv6.c

9 
	~<˛i_s¸n.h
>

10 
	~"pktgí.h
"

12 
	~"pktgí-ùv6.h
"

27 
	$pktgí_ùv6_˘‹
(
pkt_£q_t
 *
pkt
, *
hdr
)

29 
ùv6Hdr_t
 *
ù
 = 
hdr
;

30 
uöt16_t
 
éí
;

33 
	`mem£t
(
ù
, 0, (
ùv6Hdr_t
));

35 
ù
->
vî_tc_Ê
 = 
	`ht⁄l
(
IPv6_VERSION
 << 28);

36 
éí
 = 
pkt
->
pktSize
 -

37 (
pkt
->
ëhî_hdr_size
 + (
ùv6Hdr_t
));

39 
ù
->
∑ylﬂd_Àngth
 = 
	`ht⁄s
(
éí
);

40 
ù
->
h›_limô
 = 4;

41 
ù
->
√xt_hódî
 = 
pkt
->
ùPrŸo
;

43 
	`πe_mem˝y
(&
ù
->
daddr
[8],

44 
pkt
->
ù_d°_addr
.
addr
.
ùv6
.
s6_addr
,

45 (
ö6_addr
));

46 
	`πe_mem˝y
(&
ù
->
ßddr
[8],

47 
pkt
->
ù_d°_addr
.
addr
.
ùv6
.
s6_addr
,

48 (
ö6_addr
));

49 
	}
}

64 
	$pktgí_¥o˚ss_pög6
(
πe_mbuf
 *
m
 
__πe_unu£d
,

65 
uöt32_t
 
pid
 
__πe_unu£d
, uöt32_à
vœn
 __rte_unused)

68 
p‹t_öfo_t
 *
öfo
 = &
pktgí
.öfo[
pid
];

69 
ëhî_hdr
 *
ëh
 = 
	`πe_pktmbuf_mtod
(
m
, ether_hdr *);

70 
ùv6Hdr_t
 *
ù
 = (ùv6Hdr_à*)&
ëh
[1];

73 i‡(
vœn
)

74 
ù
 = (
ùv6Hdr_t
 *)((*)ù + (
vœn_hdr
));

77 i‡–(
	`πe_©omic32_ªad
(&
öfo
->
p‹t_Êags
Ë& 
ICMP_ECHO_ENABLE_FLAG
) &&

78 (
ù
->
√xt_hódî
 =
PG_IPPROTO_ICMPV6
) ) {

79 #i‡!
	`deföed
(
RTE_ARCH_X86_64
)

80 
icmpv4Hdr_t
 *
icmp
 =

81 (
icmpv4Hdr_t
 *)((
uöt32_t
)
ù
 + (
ùHdr_t
));

83 
icmpv4Hdr_t
 *
icmp
 =

84 (
icmpv4Hdr_t
 *)((
uöt64_t
)
ù
 + (
ùHdr_t
));

87 i‡(
	`cksum
(
icmp
,

88 (
m
->
pkt
.
d©a_Àn
 - (
ëhî_hdr
) -

89 (
ùHdr_t
)),

91 
	`πe_¥ötf_°©us
("ICMP checksum failed\n");

92 
Àave
 :

95 i‡(
icmp
->
ty≥
 =
ICMP4_ECHO
) {

97 i‡–(
ù
->
d°
 =
INADDR_BROADCAST
) ||

98 (
ù
->
d°
 !
öfo
->
ù_§c_addr
) ) {

99 
buff
[24];

100 
	`πe_¥ötf_°©us
("IPáddress %s != ",

101 
	`öë_¡›4
(
buff
, (buff),

102 
ù
->
d°
,

103 
INADDR_BROADCAST
));

104 
	`πe_¥ötf_°©us
("%s\n",

105 
	`öë_¡›4
(
buff
, (buff),

106 
	`ht⁄l
(
öfo
->

107 
ù_§c_addr
),

108 
INADDR_BROADCAST
));

109 
Àave
;

112 
öfo
->
echo_pkts
++;

114 
icmp
->
ty≥
 = 
ICMP4_ECHO_REPLY
;

117 
icmp
->
cksum
 = 0;

118 
icmp
->
cksum
 =

119 
	`cksum
(
icmp
,

120 (
m
->
pkt
.
d©a_Àn
 -

121 (
ëhî_hdr
) -

122 (
ùHdr_t
)), 0);

125 
	`öëAddrSw≠
(&
ù
->
§c
, &ù->
d°
);

128 
ù
->
idít
 = 
	`ht⁄s
(
	`¡ohs
(ù->idítË+ 
m
->
pkt
.
d©a_Àn
);

131 
ù
->
cksum
 = 0;

132 
ù
->
cksum
 = 
	`cksum
(ù, (
ùHdr_t
), 0);

135 
	`ëhAddrSw≠
(&
ëh
->
d_addr
, &ëh->
s_addr
);

137 
	`pktgí_£nd_mbuf
(
m
, 
pid
, 0);

139 
	`pktgí_£t_q_Êags
(
öfo
, 0, 
DO_TX_FLUSH
);

145 
Àave
:

148 
	}
}

	@app/pktgen-ipv6.h

8 #i‚de‡
_PKTGEN_IPV6_H_


9 
	#_PKTGEN_IPV6_H_


	)

11 
	~"pktgí.h
"

13 #ifde‡
__˝lu•lus


29 
pktgí_ùv6_˘‹
(
pkt_£q_t
 *
pkt
, *
hdr
);

31 
pktgí_¥o˚ss_pög6
(
πe_mbuf
 *
m
, 
uöt32_t
 
pid
,

32 
uöt32_t
 
vœn
);

34 #ifde‡
__˝lu•lus


	@app/pktgen-latency.c

9 
	~<°dio.h
>

11 
	~"pktgí-cmds.h
"

12 
	~"pktgí-di•œy.h
"

14 
	~"pktgí.h
"

16 #i‡
RTE_VERSION
 >
RTE_VERSION_NUM
(17, 11, 0, 0)

17 
	~<πe_bus_pci.h
>

33 
	$pktgí_¥öt_°©ic_d©a
()

35 
p‹t_öfo_t
 *
öfo
;

36 
πe_ëh_dev_öfo
 
dev
;

37 
uöt32_t
 
pid
, 
cﬁ
, 
row
, 
•
, 
ù_row
;

38 
pkt_£q_t
 *
pkt
;

39 
buff
[32];

40 
di•œy_˙t
;

42 
	`pktgí_di•œy_£t_cﬁ‹
("top.page");

43 
	`di•œy_t›löe
("<Main Page>");

45 
	`pktgí_di•œy_£t_cﬁ‹
("top.ports");

46 
	`s¸n_¥ötf
(1, 3, "P‹t†%d-%d o‡%d", 
pktgí
.
°¨tög_p‹t
,

47 (
pktgí
.
ídög_p‹t
 - 1),Öktgí.
nb_p‹ts
);

49 
row
 = 
PORT_STATE_ROW
;

50 
	`pktgí_di•œy_£t_cﬁ‹
("stats.port.label");

51 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, " Flags:Port");

54 
	`pktgí_di•œy_£t_cﬁ‹
("stats.dyn.label");

55 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "Link State");

56 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "Pkts/s Max/Rx");

57 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, " Max/Tx");

58 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "MBits/s Rx/Tx");

60 
row
++;

61 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "Latency usec");

62 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "Jitter Threshold");

63 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "Jitter count");

64 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "Total RxÖkts");

65 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "JitterÖercent");

68 
	`pktgí_di•œy_£t_cﬁ‹
("stats.stat.label");

69 
ù_row
 = ++
row
;

70 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "Pattern Type");

71 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "Tx Count/% Rate");

72 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "PktSize/Tx Burst");

73 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "Src/Dest Port");

74 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "Pkt Type:VLAN ID");

75 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "Dst IP Address");

76 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "Src IP Address");

77 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "Dst MAC Address");

78 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "Src MAC Address");

79 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "VendID/PCI Addr");

80 
row
++;

83 
pktgí
.
œ°_row
 = ++
row
;

84 
	`di•œy_dashlöe
(
pktgí
.
œ°_row
);

87 
	`pktgí_di•œy_£t_cﬁ‹
("stats.colon");

88 
row
 = 
PORT_STATE_ROW
;Ñow < ((
ù_row
 + 
IP_ADDR_ROWS
) - 2);Ñow++)

89 
	`s¸n_¥ötf
(
row
, 
COLUMN_WIDTH_0
 - 1, ":");

91 
	`pktgí_di•œy_£t_cﬁ‹
("stats.stat.values");

92 
•
 = 
pktgí
.
°¨tög_p‹t
;

93 
di•œy_˙t
 = 0;

94 
pid
 = 0;Öid < 
pktgí
.
nb_p‹ts_≥r_∑ge
;Öid++) {

95 i‡(
	`gë_m≠
(
pktgí
.
l2p
, 
pid
 + 
•
, 
RTE_MAX_LCORE
) == 0)

98 
öfo
 = &
pktgí
.öfo[
pid
 + 
•
];

100 
pkt
 = &
öfo
->
£q_pkt
[
SINGLE_PKT
];

103 
cﬁ
 = (
COLUMN_WIDTH_1
 * 
pid
Ë+ 
COLUMN_WIDTH_0
;

104 
row
 = 
ù_row
;

106 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
,

107 (
öfo
->
fûl_∑âîn_ty≥
 =
ABC_FILL_PATTERN
) ? "abcd..." :

108 (
öfo
->
fûl_∑âîn_ty≥
 =
NO_FILL_PATTERN
) ? "None" :

109 (
öfo
->
fûl_∑âîn_ty≥
 =
ZERO_FILL_PATTERN
) ? "Zero" :

110 
öfo
->
u£r_∑âîn
);

111 
	`pktgí_å™smô_cou¡_øã
(
pid
, 
buff
, (buff));

112 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
buff
);

114 
	`¢¥ötf
(
buff
, (buff), "%d /%5d", 
pkt
->
pktSize
 + 
FCS_SIZE
, 
öfo
->
tx_bur°
);

115 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
buff
);

116 
	`¢¥ötf
(
buff
, (buff), "%d /%5d", 
pkt
->
•‹t
,Ökt->
dp‹t
);

117 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
buff
);

118 
	`¢¥ötf
(
buff
, (buff), "%s / %s:%04x",

119 (
pkt
->
ëhTy≥
 =
ETHER_TYPE_IPv4
) ? "IPv4" :

120 (
pkt
->
ëhTy≥
 =
ETHER_TYPE_IPv6
) ? "IPv6" :

121 (
pkt
->
ëhTy≥
 =
ETHER_TYPE_ARP
) ? "ARP" : "Other",

122 (
pkt
->
ùPrŸo
 =
PG_IPPROTO_TCP
) ? "TCP" :

123 (
pkt
->
ùPrŸo
 =
PG_IPPROTO_ICMP
) ? "ICMP" : "UDP",

124 
pkt
->
vœnid
);

125 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
buff
);

127 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
,

128 
	`öë_¡›4
(
buff
, (buff),

129 
	`ht⁄l
(
pkt
->
ù_d°_addr
.
addr
.
ùv4
.
s_addr
), 0xFFFFFFFF));

130 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
,

131 
	`öë_¡›4
(
buff
, (buff),

132 
	`ht⁄l
(
pkt
->
ù_§c_addr
.
addr
.
ùv4
.
s_addr
),Ökt->
ù_mask
));

133 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
,

134 
	`öë_mtﬂ
(
buff
, (buff), &
pkt
->
ëh_d°_addr
));

135 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
,

136 
	`öë_mtﬂ
(
buff
, (buff), &
pkt
->
ëh_§c_addr
));

137 
	`πe_ëh_dev_öfo_gë
(
pid
, &
dev
);

138 
	`¢¥ötf
(
buff
, (buff), "%04x:%04x/%02x:%02d.%d",

139 
dev
.
pci_dev
->
id
.
víd‹_id
,

140 
dev
.
pci_dev
->
id
.
devi˚_id
,

141 
dev
.
pci_dev
->
addr
.
bus
,

142 
dev
.
pci_dev
->
addr
.
devid
,

143 
dev
.
pci_dev
->
addr
.
fun˘i⁄
);

144 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
buff
);

146 
di•œy_˙t
++;

150 
cﬁ
 = (
COLUMN_WIDTH_1
 * 
di•œy_˙t
Ë+ 
COLUMN_WIDTH_0
;

151 
	`pktgí_di•œy_£t_cﬁ‹
("stats.total.label");

152 
	`s¸n_¥ötf
(
LINK_STATE_ROW
, 
cﬁ
, "%*s", 
COLUMN_WIDTH_3
, "----TotalRate----");

153 
	`s¸n_eﬁ
();

154 
	`pktgí_di•œy_£t_cﬁ‹
(
NULL
);

156 
pktgí
.
Êags
 &~
PRINT_LABELS_FLAG
;

157 
	}
}

172 
	$pktgí_∑ge_œãncy
()

174 
p‹t_öfo_t
 *
öfo
;

175 
pid
, 
cﬁ
, 
row
;

176 
•
;

177 
buff
[32];

178 
di•œy_˙t
;

179 
uöt64_t
 
avg_œt
, 
ticks
;

181 i‡(
pktgí
.
Êags
 & 
PRINT_LABELS_FLAG
)

182 
	`pktgí_¥öt_°©ic_d©a
();

184 
	`mem£t
(&
pktgí
.
cumm_øã_tŸÆs
, 0, (
ëh_°©s_t
));

186 
•
 = 
pktgí
.
°¨tög_p‹t
;

187 
di•œy_˙t
 = 0;

188 
pid
 = 0;Öid < 
pktgí
.
nb_p‹ts_≥r_∑ge
;Öid++) {

189 i‡(
	`gë_m≠
(
pktgí
.
l2p
, 
pid
 + 
•
, 
RTE_MAX_LCORE
) == 0)

192 
öfo
 = &
pktgí
.öfo[
pid
 + 
•
];

195 
cﬁ
 = (
COLUMN_WIDTH_1
 * 
pid
Ë+ 
COLUMN_WIDTH_0
;

196 
row
 = 
PORT_STATE_ROW
;

199 
	`¢¥ötf
(
buff
, (buff), "%s:%d", 
	`pktgí_Êags_°rög
(

200 
öfo
), 
pid
 + 
•
);

201 
	`pktgí_di•œy_£t_cﬁ‹
("stats.port.flags");

202 
	`s¸n_¥ötf
(
row
, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
buff
);

203 
	`pktgí_di•œy_£t_cﬁ‹
(
NULL
);

205 
row
 = 
LINK_STATE_ROW
;

208 
	`pktgí_gë_lök_°©us
(
öfo
, 
pid
, 0);

210 
	`pktgí_lök_°©e
(
pid
, 
buff
, (buff));

211 
	`pktgí_di•œy_£t_cﬁ‹
("stats.port.status");

212 
	`s¸n_¥ötf
(
row
, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
buff
);

213 
	`pktgí_di•œy_£t_cﬁ‹
(
NULL
);

216 
row
 = 
LINK_STATE_ROW
 + 1;

217 
	`¢¥ötf
(
buff
, (buff), "%" 
PRIu64
 "/%" PRIu64,

218 
öfo
->
max_ùackës
, info->
øã_°©s
.
ùackës
);

219 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
buff
);

221 
	`¢¥ötf
(
buff
, (buff), "%" 
PRIu64
 "/%" PRIu64,

222 
öfo
->
max_›ackës
, info->
øã_°©s
.
›ackës
);

223 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
buff
);

225 
	`¢¥ötf
(
buff
, (buff), "%" 
PRIu64
 "/%" PRIu64,

226 
	`iBôsTŸÆ
(
öfo
->
øã_°©s
Ë/ 
Mûli⁄
,

227 
	`oBôsTŸÆ
(
öfo
->
øã_°©s
Ë/ 
Mûli⁄
);

228 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
buff
);

230 
pktgí
.
cumm_øã_tŸÆs
.
ùackës
 +
öfo
->
øã_°©s
.ipackets;

231 
pktgí
.
cumm_øã_tŸÆs
.
›ackës
 +
öfo
->
øã_°©s
.opackets;

232 
pktgí
.
cumm_øã_tŸÆs
.
ibyãs
 +
öfo
->
øã_°©s
.ibytes;

233 
pktgí
.
cumm_øã_tŸÆs
.
obyãs
 +
öfo
->
øã_°©s
.obytes;

234 
pktgí
.
cumm_øã_tŸÆs
.
õº‹s
 +
öfo
->
øã_°©s
.ierrors;

235 
pktgí
.
cumm_øã_tŸÆs
.
€º‹s
 +
öfo
->
øã_°©s
.oerrors;

237 i‡(
pktgí
.
cumm_øã_tŸÆs
.
ùackës
 >Öktgí.
max_tŸÆ_ùackës
)

238 
pktgí
.
max_tŸÆ_ùackës
 =Öktgí.
cumm_øã_tŸÆs
.
ùackës
;

239 i‡(
pktgí
.
cumm_øã_tŸÆs
.
›ackës
 >Öktgí.
max_tŸÆ_›ackës
)

240 
pktgí
.
max_tŸÆ_›ackës
 =Öktgí.
cumm_øã_tŸÆs
.
›ackës
;

242 
pktgí
.
cumm_øã_tŸÆs
.
imis£d
 +
öfo
->
øã_°©s
.imissed;

243 #i‡
RTE_VERSION
 < 
	`RTE_VERSION_NUM
(2, 2, 0, 0)

244 
pktgí
.
cumm_øã_tŸÆs
.
ibad¸c
 +
öfo
->
øã_°©s
.ibadcrc;

245 
pktgí
.
cumm_øã_tŸÆs
.
ibadÀn
 +
öfo
->
øã_°©s
.ibadlen;

247 #i‡
RTE_VERSION
 < 
	`RTE_VERSION_NUM
(16, 4, 0, 0)

248 
pktgí
.
cumm_øã_tŸÆs
.
imˇ°s
 +
öfo
->
øã_°©s
.imcasts;

250 
pktgí
.
cumm_øã_tŸÆs
.
rx_nombuf
 +
öfo
->
øã_°©s
.rx_nombuf;

252 
row
++;

253 
ticks
 = 
	`πe_gë_timî_hz
() / 1000000;

254 
avg_œt
 = 0;

255 i‡(
öfo
->
œãncy_nb_pkts
) {

256 
avg_œt
 = (
öfo
->
avg_œãncy
 / info->
œãncy_nb_pkts
Ë/ 
ticks
;

257 i‡(
avg_œt
 > 
öfo
->
max_œãncy
)

258 
öfo
->
max_œãncy
 = 
avg_œt
;

259 i‡(
öfo
->
mö_œãncy
 == 0)

260 
öfo
->
mö_œãncy
 = 
avg_œt
;

261 i‡(
avg_œt
 < 
öfo
->
mö_œãncy
)

262 
öfo
->
mö_œãncy
 = 
avg_œt
;

263 
öfo
->
œãncy_nb_pkts
 = 0;

264 
öfo
->
avg_œãncy
 = 0;

266 
	`¢¥ötf
(
buff
, (buff), "%" 
PRIu64
, 
avg_œt
);

267 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
buff
);

269 
	`¢¥ötf
(
buff
, (buff), "%" 
PRIu64
, 
öfo
->
jôãr_thªshﬁd
);

270 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
buff
);

272 
	`¢¥ötf
(
buff
, (buff), "%" 
PRIu64
, 
öfo
->
jôãr_cou¡
);

273 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
buff
);

275 
	`¢¥ötf
(
buff
, (buff), "%" 
PRIu64
, 
öfo
->
¥ev_°©s
.
ùackës
);

276 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
buff
);

278 
avg_œt
 = 0;

279 i‡(
öfo
->
¥ev_°©s
.
ùackës
)

280 
	`¢¥ötf
(
buff
, (buff), "%" 
PRIu64
,

281 (
öfo
->
jôãr_cou¡
 * 100Ë/ info->
¥ev_°©s
.
ùackës
);

283 
	`¢¥ötf
(
buff
, (buff), "%" 
PRIu64
, 
avg_œt
);

285 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
buff
);

287 
di•œy_˙t
++;

291 
cﬁ
 = (
COLUMN_WIDTH_1
 * 
di•œy_˙t
Ë+ 
COLUMN_WIDTH_0
;

292 
row
 = 
LINK_STATE_ROW
 + 1;

293 
	`¢¥ötf
(
buff
, (buff), "%lu/%lu",

294 
pktgí
.
max_tŸÆ_ùackës
,Öktgí.
cumm_øã_tŸÆs
.
ùackës
);

295 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_3
, 
buff
);

296 
	`s¸n_eﬁ
();

297 
	`¢¥ötf
(
buff
, (buff), "%lu/%lu",

298 
pktgí
.
max_tŸÆ_›ackës
,Öktgí.
cumm_øã_tŸÆs
.
›ackës
);

299 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_3
, 
buff
);

300 
	`s¸n_eﬁ
();

301 
	`¢¥ötf
(
buff
, (buff), "%lu/%lu",

302 
	`iBôsTŸÆ
(
pktgí
.
cumm_øã_tŸÆs
Ë/ 
Mûli⁄
,

303 
	`oBôsTŸÆ
(
pktgí
.
cumm_øã_tŸÆs
Ë/ 
Mûli⁄
);

304 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_3
, 
buff
);

305 
	`s¸n_eﬁ
();

306 
	}
}

	@app/pktgen-latency.h

9 #i‚de‡
_PKTGEN_LATENCY_H_


10 
	#_PKTGEN_LATENCY_H_


	)

12 
	~<πe_timî.h
>

14 #ifde‡
__˝lu•lus


19 
uöt64_t
 
time°amp
;

20 
uöt16_t
 
magic
;

21 } 
	tœãncy_t
;

23 
	#LATENCY_MAGIC
 (('L' << 8Ë+ 'y')

	)

24 
	#DEFAULT_JITTER_THRESHOLD
 (50Ë

	)

26 
pktgí_∑ge_œãncy
();

28 #ifde‡
__˝lu•lus


	@app/pktgen-log.c

8 
	~"pktgí-log.h
"

10 
	~<°dio.h
>

11 
	~<°rög.h
>

12 
	~<°dlib.h
>

13 
	~<time.h
>

14 
	~<sys/time.h
>

15 
	~<°d¨g.h
>

16 
	~<libgí.h
>

17 
	~<sys/°©.h
>

19 
	~"pktgí-di•œy.h
"

20 
	~<πe_rwlock.h
>

23 
	#LOG_HISTORY
 64

	)

24 
	#LOG_MAX_LINE
 1024

	)

27 
	slog_msg_s
 {

28 
timevÆ
 
	mtv
;

29 
	mÀvñ
;

30 *
	mfûe
;

31 
	mlöe
;

32 *
	mfunc
;

33 
	mmsg
[
LOG_MAX_LINE
];

34 } 
	tlog_msg_t
;

37 
	slog_s
 {

38 
log_msg_t
 
	mmsg
[
LOG_HISTORY
];

39 
uöt16_t
 
	mhód
;

40 
uöt16_t
 
	mèû
;

41 
uöt8_t
 
	m√ed_ª‰esh
;

42 
πe_rwlock_t
 
	mlock
;

43 } 
	tlog_t
;

45 
log_t
 
	glog_hi°‹y
;

47 
FILE
 *
	glog_fûe
 = 
NULL
;

48 
	glog_Àvñ_s¸ìn
 = 
LOG_LEVEL_INFO
;

51 c⁄° *
pktgí_f‹m©_msg_∑ge
(c⁄° 
log_msg_t
 *
log_msg
);

52 c⁄° *
pktgí_f‹m©_msg_fûe
(c⁄° 
log_msg_t
 *
log_msg
);

53 c⁄° *
pktgí_f‹m©_msg_°dout
(c⁄° 
log_msg_t
 *
log_msg
);

57 
	$pktgí_öô_log
()

59 
	`mem£t
(&
log_hi°‹y
, 0, (log_history));

60 
log_hi°‹y
.
hód
 = 0;

61 
log_hi°‹y
.
èû
 = 0;

62 
log_hi°‹y
.
√ed_ª‰esh
 = 0;

63 
	}
}

67 
	$pktgí_log_£t_s¸ìn_Àvñ
(
Àvñ
)

69 
log_Àvñ_s¸ìn
 = 
Àvñ
;

70 
	}
}

74 
__©åibuã__
((
	$f‹m©
(
¥ötf
, 5, 6)))

75 
	$pktgí_log
(
Àvñ
, c⁄° *
fûe
, 
löe
,

76 c⁄° *
func
, c⁄° *
fmt
, ...)

78 
log_msg_t
 *
cuº_msg
;

79 
va_li°
 
¨gs
;

81 
	`πe_rwlock_wrôe_lock
(&
log_hi°‹y
.
lock
);

83 
cuº_msg
 = &
log_hi°‹y
.
msg
[log_hi°‹y.
hód
];

86 
	`gëtimeofday
(&
cuº_msg
->
tv
, 
NULL
);

88 
cuº_msg
->
Àvñ
 =Üevel;

90 i‡(
cuº_msg
->
fûe
 !
NULL
)

91 
	`‰ì
(
cuº_msg
->
fûe
);

92 
cuº_msg
->
fûe
 = 
	`°rdup
(file);

94 
cuº_msg
->
löe
 =Üine;

96 i‡(
cuº_msg
->
func
 !
NULL
)

97 
	`‰ì
(
cuº_msg
->
func
);

98 
cuº_msg
->
func
 = 
	`°rdup
(func);

101 
	`va_°¨t
(
¨gs
, 
fmt
);

102 
	`v¢¥ötf
(
cuº_msg
->
msg
, 
LOG_MAX_LINE
, 
fmt
, 
¨gs
);

103 
	`va_íd
(
¨gs
);

110 
log_hi°‹y
.
hód
 = (log_hi°‹y.hód + 1Ë% 
LOG_HISTORY
;

112 i‡(
log_hi°‹y
.
hód
 =log_hi°‹y.
èû
)

113 
log_hi°‹y
.
èû
 = (log_hi°‹y.èû + 1Ë% 
LOG_HISTORY
;

116 i‡(
log_fûe
 !
NULL
)

117 
	`Ârötf
(
log_fûe
, "%s\n", 
	`pktgí_f‹m©_msg_fûe
(
cuº_msg
));

120 i‡(
Àvñ
 >
log_Àvñ_s¸ìn
)

121 
	`Ârötf
(
°dout
, "%s\n", 
	`pktgí_f‹m©_msg_°dout
(
cuº_msg
));

123 
log_hi°‹y
.
√ed_ª‰esh
 = 1;

125 
	`πe_rwlock_wrôe_u∆ock
(&
log_hi°‹y
.
lock
);

126 
	}
}

130 
	$pktgí_log_£t_fûe
(c⁄° *
fûíame
)

132 
FILE
 *
Â
;

135 i‡(
log_fûe
 !
NULL
) {

136 
	`fchmod
(
	`fûío
(
log_fûe
), 0666);

137 
	`f˛o£
(
log_fûe
);

138 
log_fûe
 = 
NULL
;

142 i‡(
fûíame
 =
NULL
)

145 
Â
 = 
	`f›í
(
fûíame
, "w");

147 i‡(
Â
 =
NULL
)

148 
	`pktgí_log_w¨nög
("UnableÅo openÜog file '%s' for writing",

149 
fûíame
);

152 i‡(
Â
 !
NULL
)

153 
	`£tbuf
(
Â
, 
NULL
);

155 
log_fûe
 = 
Â
;

156 
	}
}

160 
	$pktgí_∑ge_log
(
uöt32_t
 
¥öt_œbñs
)

163 
	#MAX_PAGE_LINES
 28

	)

165 
uöt32_t
 
row
, 
cuº_msg
, 
ouçut_löes
, 
cuº_ch¨
;

166 
cuº_löe
;

167 
löes
[
MAX_PAGE_LINES
][
LOG_MAX_LINE
];

169 i‡(!
¥öt_œbñs
 && !
log_hi°‹y
.
√ed_ª‰esh
)

172 
	`di•œy_t›löe
("<Logged messages>");

173 
row
 = 2;

176 
	`s¸n_¥ötf
(
row
++, 1, "%1s %8s %-32s %s",

179 
cuº_löe
 = 
ouçut_löes
 = 0;

180 
cuº_msg
 = 
log_hi°‹y
.
hód
;

181 (
cuº_msg
 !
log_hi°‹y
.
èû
) &&

182 (
ouçut_löes
 < 
MAX_PAGE_LINES
)) {

184 
cuº_msg
 = (cuº_msg + 
LOG_HISTORY
 - 1) % LOG_HISTORY;

186 
	`¢¥ötf
(
löes
[
cuº_löe
], 
LOG_MAX_LINE
, "%s",

187 
	`pktgí_f‹m©_msg_∑ge
(&
log_hi°‹y
.
msg
[
cuº_msg
]));

193 
cuº_ch¨
 = 0; 
löes
[
cuº_löe
][curr_char] != '\0';

194 ++
cuº_ch¨
)

195 i‡(
löes
[
cuº_löe
][
cuº_ch¨
] == '\n')

196 ++
ouçut_löes
;

198 ++
ouçut_löes
;

200 ++
cuº_löe
;

208 --
cuº_löe
; curr_line >= 0; --curr_line) {

209 
	`s¸n_¥ötf
(
row
++, 1, "%s", 
löes
[
cuº_löe
]);

212 
cuº_ch¨
 = 0; 
löes
[
cuº_löe
][curr_char] != '\0';

213 ++
cuº_ch¨
)

214 i‡(
löes
[
cuº_löe
][
cuº_ch¨
] == '\n')

215 ++
row
;

218 i‡(
row
 < 
MAX_PAGE_LINES
)

219 
row
 = 
MAX_PAGE_LINES
;

221 
	`di•œy_dashlöe
(++
row
);

222 
log_hi°‹y
.
√ed_ª‰esh
 = 0;

224 #unde‡
MAX_PAGE_LINES


225 
	}
}

246 
	$pktgí_f‹m©_msg_∑ge
(c⁄° 
log_msg_t
 *
log_msg
)

251 
msg
[
LOG_MAX_LINE
] = { 0 };

252 
time°amp
[9] = { 0 };

253 
func
[32];

255 
	`°r·ime
(
time°amp
, (timestamp), "%H:%M:%S",

256 
	`loˇ…ime
(&
log_msg
->
tv
.
tv_£c
));

258 i‡(
	`°æí
(
log_msg
->
func
) > (func) - 1)

259 
	`¢¥ötf
(
func
, (func), "‚Ä¶%s",

260 &
log_msg
->
func
[
	`°æí
(

261 
log_msg
->
func
) - (func) -

264 
	`•rötf
(
func
, "%s", 
log_msg
->func);

266 
	`¢¥ötf
(
msg
, (msg), "%1s %8s %-*s %s",

267 (
log_msg
->
Àvñ
 =
LOG_LEVEL_TRACE
) ? "t"

268 : (
log_msg
->
Àvñ
 =
LOG_LEVEL_DEBUG
) ? "d"

269 : (
log_msg
->
Àvñ
 =
LOG_LEVEL_INFO
) ? "I"

270 : (
log_msg
->
Àvñ
 =
LOG_LEVEL_WARNING
) ? "W"

271 : (
log_msg
->
Àvñ
 =
LOG_LEVEL_ERROR
) ? "E"

272 : (
log_msg
->
Àvñ
 =
LOG_LEVEL_PANIC
) ? "P"

274 
time°amp
, ()(
func
), func, 
log_msg
->
msg
);

276  
msg
;

277 
	}
}

301 
	$pktgí_f‹m©_msg_fûe
(c⁄° 
log_msg_t
 *
log_msg
)

306 
msg
[
LOG_MAX_LINE
] = { 0 };

307 
time°amp
[32] = { 0 };

308 *
fûe
;

310 
	`°r·ime
(
time°amp
, (timestamp), "%Y-%m-%d %H:%M:%S",

311 
	`loˇ…ime
(&
log_msg
->
tv
.
tv_£c
));

313 
fûe
 = 
	`°rdup
(
log_msg
->file);

315 
	`¢¥ötf
(
msg
, (msg), "%s %s.%03ld [%s:%ld(%s)] %s",

316 (
log_msg
->
Àvñ
 =
LOG_LEVEL_TRACE
) ? "tt"

317 : (
log_msg
->
Àvñ
 =
LOG_LEVEL_DEBUG
) ? "dd"

318 : (
log_msg
->
Àvñ
 =
LOG_LEVEL_INFO
) ? "II"

319 : (
log_msg
->
Àvñ
 =
LOG_LEVEL_WARNING
) ? "WW"

320 : (
log_msg
->
Àvñ
 =
LOG_LEVEL_ERROR
) ? "EE"

321 : (
log_msg
->
Àvñ
 =
LOG_LEVEL_PANIC
) ? "PP"

323 
time°amp
, 
log_msg
->
tv
.
tv_u£c
 / 1000,

324 
	`ba£«me
(
fûe
), 
log_msg
->
löe
,Üog_msg->
func
,Üog_msg->
msg
);

326 
	`‰ì
(
fûe
);

328  
msg
;

329 
	}
}

353 
	$pktgí_f‹m©_msg_°dout
(c⁄° 
log_msg_t
 *
log_msg
)

358 
msg
[
LOG_MAX_LINE
] = { 0 };

360 
	`¢¥ötf
(
msg
, (msg), "%s%s",

361 (
log_msg
->
Àvñ
 <
LOG_LEVEL_INFO
) ? ""

362 : (
log_msg
->
Àvñ
 =
LOG_LEVEL_WARNING
) ? "WARNING: "

363 : (
log_msg
->
Àvñ
 =
LOG_LEVEL_ERROR
) ? "!ERROR!: "

364 : (
log_msg
->
Àvñ
 =
LOG_LEVEL_PANIC
) ? "!PANIC!: "

366 
log_msg
->
msg
);

368  
msg
;

369 
	}
}

	@app/pktgen-log.h

8 #i‚de‡
_PKTGEN_LOG_H_


9 
	#_PKTGEN_LOG_H_


	)

11 
	~<°döt.h
>

13 #ifde‡
__˝lu•lus


19 
	#LOG_LEVEL_ALL
 0

	)

20 
	#LOG_LEVEL_TRACE
 1

	)

21 
	#LOG_LEVEL_DEBUG
 2

	)

22 
	#LOG_LEVEL_INFO
 3

	)

23 
	#LOG_LEVEL_WARNING
 4

	)

24 
	#LOG_LEVEL_ERROR
 5

	)

25 
	#LOG_LEVEL_PANIC
 6

	)

26 
	#LOG_LEVEL_NONE
 7

	)

34 #i‚de‡
LOG_LEVEL


35 
	#LOG_LEVEL
 
LOG_LEVEL_INFO


	)

41 #i‡
LOG_LEVEL
 <
LOG_LEVEL_TRACE


42 
	#pktgí_log_åa˚
(
fmt
, ...Ë
	`pktgí_log
(
LOG_LEVEL_TRACE
, \

43 
__FILE__
, \

44 
__LINE__
, \

45 
__FUNCTION__
, \

46 
fmt
, \

47 ## 
__VA_ARGS__
)

	)

49 
	#pktgí_log_åa˚
(
fmt
, ...Ë

	)

52 #i‡
LOG_LEVEL
 <
LOG_LEVEL_DEBUG


53 
	#pktgí_log_debug
(
fmt
, ...Ë
	`pktgí_log
(
LOG_LEVEL_DEBUG
, \

54 
__FILE__
, \

55 
__LINE__
, \

56 
__FUNCTION__
, \

57 
fmt
, \

58 ## 
__VA_ARGS__
)

	)

60 
	#pktgí_log_debug
(
fmt
, ...Ë

	)

63 #i‡
LOG_LEVEL
 <
LOG_LEVEL_INFO


64 
	#pktgí_log_öfo
(
fmt
, ...Ë
	`pktgí_log
(
LOG_LEVEL_INFO
, \

65 
__FILE__
, \

66 
__LINE__
, \

67 
__FUNCTION__
, \

68 
fmt
, \

69 ## 
__VA_ARGS__
)

	)

71 
	#pktgí_log_öfo
(
fmt
, ...Ë

	)

74 #i‡
LOG_LEVEL
 <
LOG_LEVEL_WARNING


75 
	#pktgí_log_w¨nög
(
fmt
, ...Ë
	`pktgí_log
(
LOG_LEVEL_WARNING
, \

76 
__FILE__
, \

77 
__LINE__
, \

78 
__FUNCTION__
, \

79 
fmt
, \

80 ## 
__VA_ARGS__
)

	)

82 
	#pktgí_log_w¨nög
(
fmt
, ...Ë

	)

85 #i‡
LOG_LEVEL
 <
LOG_LEVEL_ERROR


86 
	#pktgí_log_îr‹
(
fmt
, ...Ë
	`pktgí_log
(
LOG_LEVEL_ERROR
, \

87 
__FILE__
, \

88 
__LINE__
, \

89 
__FUNCTION__
, \

90 
fmt
, \

91 ## 
__VA_ARGS__
)

	)

93 
	#pktgí_log_îr‹
(
fmt
, ...Ë

	)

96 #i‡
LOG_LEVEL
 <
LOG_LEVEL_PANIC


97 
	#pktgí_log_∑nic
(
fmt
, ...) do { \

98 
	`pktgí_log
(
LOG_LEVEL_PANIC
, 
__FILE__
, 
__LINE__
, 
__FUNCTION__
, \

99 
fmt
, ## 
__VA_ARGS__
); \

100 
	`πe_∑nic
(
fmt
, ## 
__VA_ARGS__
); \

101 } 0)

	)

103 
	#pktgí_log_∑nic
(
fmt
, ...Ë
	`πe_∑nic
(fmt, ## 
__VA_ARGS__
)

	)

111 
	#°∫ˇtf
(
de°
, 
fmt
, ...) do { \

112 
_buff
[1024]; \

113 
	`¢¥ötf
(
_buff
, (_buff), 
fmt
, ## 
__VA_ARGS__
); \

114 
	`°∫ˇt
(
de°
, 
_buff
, (de°Ë- 
	`°æí
(dest) - 1); \

115 } 0)

	)

118 
pktgí_öô_log
();

132 
pktgí_log_£t_s¸ìn_Àvñ
(
Àvñ
);

145 
pktgí_log
(
Àvñ
, c⁄° *
fûe
, 
löe
,

146 c⁄° *
func
, c⁄° *
fmt
, ...);

160 
pktgí_log_£t_fûe
(c⁄° *
fûíame
);

173 
pktgí_∑ge_log
(
uöt32_t
 
¥öt_œbñs
);

175 #ifde‡
__˝lu•lus


	@app/pktgen-main.c

9 
	~<execöfo.h
>

10 
	~<sig«l.h
>

12 
	~"pktgí-maö.h
"

14 
	~"pktgí.h
"

15 
	~"Õktgílib.h
"

16 
	~"lua_shñl.h
"

17 
	~"lua-sockë.h
"

18 
	~"œuxlib.h
"

19 
	~"pktgí-cmds.h
"

20 
	~"pktgí-˝u.h
"

21 
	~"pktgí-di•œy.h
"

22 
	~"pktgí-log.h
"

23 
	~"˛i-fun˘i⁄s.h
"

26 
execuã_lua_˛o£
(
lua_Sèã
 *
L
);

27 #ifde‡
GUI


28 
pktgí_gui_maö
(
¨gc
, *
¨gv
[]);

44 
	$pktgí_l2p_dump
()

46 
	`pg_øw_dump_l2p
(
pktgí
.
l2p
);

47 
	}
}

62 
	$pktgí_gë_lua
()

64  
pktgí
.
L
;

65 
	}
}

80 
	$pktgí_ußge
(c⁄° *
¥g«me
)

82 
	`¥ötf
(

128 
¥g«me
);

129 
	}
}

144 
	$pktgí_∑r£_¨gs
(
¨gc
, **
¨gv
)

146 
›t
, 
ªt
, 
p‹t
;

147 **
¨gv›t
;

148 
›ti⁄_ödex
;

149 *
¥g«me
 = 
¨gv
[0], *
p
;

150 
›ti⁄
 
lg›ts
[] = {

152 {
NULL
, 0, 0, 0}

155 
¨gv›t
 = 
¨gv
;

157 
pktgí
.
ho°«me
 = (*)
	`°rdupf
(pktgen.hostname, "localhost");

158 
pktgí
.
sockë_p‹t
 = 0x5606;

160 
pktgí
.
¨gc
 =árgc;

161 
›t
 = 0; o± < 
¨gc
; opt++)

162 
pktgí
.
¨gv
[
›t
] = 
	`°rdup
(argv[opt]);

164 (
›t
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv›t
, "p:m:f:l:s:g:hPNGT",

165 
lg›ts
, &
›ti⁄_ödex
)Ë!
EOF
)

166 
›t
) {

172 
	`˛i_add_cmdfûe
(
›èrg
);

176 
	`pktgí_log_£t_fûe
(
›èrg
);

180 i‡(
	`pg_∑r£_m©rix
(
pktgí
.
l2p
, 
›èrg
) == -1) {

181 
	`pktgí_log_îr‹
("övÆid m©rix såög (%s)", 
›èrg
);

182 
	`pktgí_ußge
(
¥g«me
);

188 
p‹t
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 10);

189 
p
 = 
	`°rchr
(
›èrg
, ':');

190 i‡–(
p
 =
NULL
) ||

191 (
pktgí
.
öfo
[
p‹t
].
pˇp
 =

192 
	`_pˇp_›í
(++
p
, 
p‹t
)Ë=
NULL
) {

193 
	`pktgí_log_îr‹
(

195 
›èrg
);

196 
	`pktgí_ußge
(
¥g«me
);

201 
pktgí
.
Êags
 |
PROMISCUOUS_ON_FLAG
;

205 
pktgí
.
Êags
 |
NUMA_SUPPORT_FLAG
;

209 
pktgí
.
Êags
 |(
ENABLE_GUI_FLAG
 | 
IS_SERVER_FLAG
);

213 
pktgí
.
Êags
 |(
ENABLE_GUI_FLAG
 | 
IS_SERVER_FLAG
);

215 
p
 = 
	`°rchr
(
›èrg
, ':');

216 i‡(
p
 =
NULL
)

217 
pktgí
.
ho°«me
 = (*)
	`°rdupf
’ktgí.ho°«me, 
›èrg
);

219 
c
 = *
p
;

221 *
p
 = '\0';

222 i‡(
p
 !
›èrg
)

223 
pktgí
.
ho°«me
 = (*)
	`°rdupf
’ktgí.ho°«me, 
›èrg
);

225 
pktgí
.
sockë_p‹t
 = 
	`°πﬁ
(++
p
, 
NULL
, 0);

226 
	`pktgí_log_öfo
(

228 
pktgí
.
ho°«me
,

229 
c
,

230 
pktgí
.
sockë_p‹t
);

235 
pktgí
.
Êags
 |
ENABLE_THEME_FLAG
;

239 
	`pktgí_ußge
(
¥g«me
);

243 
	`pktgí_£t_hw_°rù_¸c
(1);

246 
	`pktgí_ußge
(
¥g«me
);

251 i‡(
›töd
 >= 0)

252 
¨gv
[
›töd
 - 1] = 
¥g«me
;

254 
ªt
 = 
›töd
 - 1;

255 
›töd
 = 1;

256  
ªt
;

257 
	}
}

259 
	#MAX_BACKTRACE
 32

	)

262 
	$sig_h™dÀr
(
v
 
__πe_unu£d
)

264 *
¨øy
[
MAX_BACKTRACE
];

265 
size_t
 
size
;

266 **
°rögs
;

267 
size_t
 
i
;

269 i‡(
v
 =
SIGINT
)

272 
	`s¸n_£tw
(1);

273 
	`s¸n_¥ötf
(100, 1, "\n");

274 
	`s¸n_de°roy
();

276 
	`¥ötf
("\n======");

277 i‡(
v
 =
SIGSEGV
)

278 
	`¥ötf
(" Pktgen gotá Segment Fault\n");

279 i‡(
v
 =
SIGHUP
)

280 
	`¥ötf
(" PktgenÑeceivedá SIGHUP\n");

281 i‡(
v
 =
SIGPIPE
) {

282 
	`¥ötf
(" PktgenÑeceivedá SIGPIPE\n");

285 
	`¥ötf
(" PktgíÑe˚ived sig«»%d\n", 
v
);

287 
	`¥ötf
("\n");

289 
size
 = 
	`backåa˚
(
¨øy
, 
MAX_BACKTRACE
);

290 
°rögs
 = 
	`backåa˚_symbﬁs
 (
¨øy
, 
size
);

292 
	`¥ötf
 ("Obèöed %zd sèck fømes.\n", 
size
);

294 
i
 = 0; i < 
size
; i++)

295 
	`¥ötf
 ("%s\n", 
°rögs
[
i
]);

297 
	`‰ì
 (
°rögs
);

299 
	`ab‹t
();

300 
	}
}

303 
	$pktgí_lua_dofûe
(* 
L
, c⁄° * 
fûíame
)

305  
	`luaL_dofûe
(
L
, 
fûíame
);

306 
	}
}

321 
	$maö
(
¨gc
, **
¨gv
)

323 
uöt32_t
 
i
;

324 
öt32_t
 
ªt
;

326 
	`sig«l
(
SIGSEGV
, 
sig_h™dÀr
);

327 
	`sig«l
(
SIGHUP
, 
sig_h™dÀr
);

328 
	`sig«l
(
SIGINT
, 
sig_h™dÀr
);

329 
	`sig«l
(
SIGPIPE
, 
sig_h™dÀr
);

331 
	`s¸n_£tw
(1);

332 
	`s¸n_pos
(100, 1);

334 
	`¥ötf
("\n%†%s\n", 
	`c›yright_msg
(), 
	`powîed_by
());

335 
	`fÊush
(
°dout
);

338 ()
	`πe_£t_≠∂iˇti⁄_ußge_hook
(
pktgí_ußge
);

340 
	`mem£t
(&
pktgí
, 0, (pktgen));

342 
pktgí
.
Êags
 = 
PRINT_LABELS_FLAG
;

343 
pktgí
.
idít
 = 0x1234;

344 
pktgí
.
nb_rxd
 = 
DEFAULT_RX_DESC
;

345 
pktgí
.
nb_txd
 = 
DEFAULT_TX_DESC
;

346 
pktgí
.
nb_p‹ts_≥r_∑ge
 = 
DEFAULT_PORTS_PER_PAGE
;

348 i‡–(
pktgí
.
l2p
 = 
	`l2p_¸óã
()Ë=
NULL
)

349 
	`pktgí_log_∑nic
("UnableÅo createÜ2p");

351 
pktgí
.
p‹tdesc_˙t
 = 
	`gë_p‹tdesc
’ktgí.
p‹éi°
,

352 
pktgí
.
p‹tdesc
,

353 
RTE_MAX_ETHPORTS
,

357 
	`pktgí_öô_log
();

358 
	`pktgí_˝u_öô
();

361 
ªt
 = 
	`πe_ól_öô
(
¨gc
, 
¨gv
);

362 i‡(
ªt
 < 0)

365 
¨gc
 -
ªt
;

366 
¨gv
 +
ªt
;

368 i‡(
	`pktgí_˛i_¸óã
())

371 
	`lua_√wlib_add
(
_lua_›ílib
);

372 
	`˛i_£t_lua_ˇŒback
(
pktgí_lua_dofûe
);

375 i‡–(
pktgí
.
L
 = 
	`lua_¸óã_ö°™˚
()Ë=
NULL
) {

376 
	`pktgí_log_îr‹
("FailedÅo open LuaÖktgen supportÜibrary");

379 
	`˛i_£t_u£r_°©e
(
pktgí
.
L
);

382 
ªt
 = 
	`pktgí_∑r£_¨gs
(
¨gc
, 
¨gv
);

383 i‡(
ªt
 < 0)

386 
i
 = 
	`πe_gë_ma°î_lc‹e
();

387 i‡(
	`gë_lc‹e_rx˙t
(
pktgí
.
l2p
, 
i
Ë|| 
	`gë_lc‹e_tx˙t
(pktgen.l2p, i)) {

388 
	`˛i_¥ötf
("*** Error canÇot use masterÜcore foráÖort\n");

389 
	`˛i_¥ötf
(" Thêma°îÜc‹êi†%d\n", 
	`πe_gë_ma°î_lc‹e
());

390 
	`exô
(-1);

393 
pktgí
.
hz
 = 
	`πe_gë_timî_hz
();

395 
	`s¸n_¸óã_wôh_deÁu…s
(
pktgí
.
Êags
 & 
ENABLE_THEME_FLAG
);

397 
	`πe_dñay_ms
(100);

399 
	`¥öt_c›yright
(
PKTGEN_APP_NAME
, 
PKTGEN_CREATED_BY
);

401 
	`pktgí_log_öfo
(

403 
DEFAULT_PKT_BURST
,

404 
DEFAULT_RX_DESC
,

405 
DEFAULT_TX_DESC
,

406 
MAX_MBUFS_PER_PORT
,

407 
MBUF_CACHE_SIZE
);

410 
	`pktgí_c⁄fig_p‹ts
();

412 
	`pktgí_log_öfo
("");

413 
	`pktgí_log_öfo
("==Di•œyÖro˚ssög o¿lc‹ê%d", 
	`πe_lc‹e_id
());

416 
i
 = 0; i < 
RTE_MAX_LCORE
; i++) {

417 i‡–(
i
 =
	`πe_gë_ma°î_lc‹e
()Ë|| !
	`πe_lc‹e_is_íabÀd
(i) )

419 
ªt
 = 
	`πe_ól_ªmŸe_œunch
(
pktgí_œunch_⁄e_lc‹e
, 
NULL
, 
i
);

420 i‡(
ªt
 != 0)

421 
	`pktgí_log_îr‹
("FaûedÅÿ°¨àlc‹ê%d,Ñëu∫ %d", 
i
, 
ªt
);

423 
	`πe_dñay_ms
(1000);

427 
	`pktgí_log_£t_s¸ìn_Àvñ
(
LOG_LEVEL_WARNING
);

428 
	`s¸n_îa£
(
this_s¸n
->
ƒows
);

430 
	`•œsh_s¸ìn
(3, 16, 
PKTGEN_APP_NAME
, 
PKTGEN_CREATED_BY
);

432 
	`s¸n_ªsume
();

434 
	`pktgí_˛ór_di•œy
();

436 
	`πe_timî_£tup
();

438 i‡(
pktgí
.
Êags
 & 
ENABLE_GUI_FLAG
) {

439 i‡(!
	`s¸n_is_∑u£d
() ) {

440 
	`s¸n_∑u£
();

441 
	`s¸n_˛s
();

442 
	`s¸n_£tw
(1);

443 
	`s¸n_pos
(
this_s¸n
->
ƒows
, 1);

446 
	`lua_öô_sockë
(
pktgí
.
L
,

447 &
pktgí
.
thªad
,

448 
pktgí
.
ho°«me
,

449 
pktgí
.
sockë_p‹t
);

450 #ifde‡
GUI


451 
	`pktgí_gui_maö
(
¨gc
, 
¨gv
);

455 
	`pktgí_˛i_°¨t
();

457 
	`execuã_lua_˛o£
(
pktgí
.
L
);

459 
	`pktgí_°›_ru¬ög
();

461 
	`s¸n_∑u£
();

463 
	`s¸n_£tw
(1);

464 
	`s¸n_¥ötf
(100, 1, "\n");

465 
	`s¸n_de°roy
();

468 
	`πe_ól_mp_waô_lc‹e
();

470 
i
 = 0; i < 
pktgí
.
nb_p‹ts
; i++) {

471 
	`πe_ëh_dev_°›
(
i
);

472 
	`πe_dñay_ms
(100);

473 
	`πe_ëh_dev_˛o£
(
i
);

476 
	`˛i_de°roy
();

479 
	}
}

494 
	$pktgí_°›_ru¬ög
()

496 
uöt16_t
 
lid
;

498 
lid
 = 0;Üid < 
RTE_MAX_LCORE
;Üid++)

499 
	`pg_°›_lc‹e
(
pktgí
.
l2p
, 
lid
);

500 
	}
}

	@app/pktgen-main.h

8 #i‚de‡
_PKTGEN_MAIN_H_


9 
	#_PKTGEN_MAIN_H_


	)

11 
	~<°döt.h
>

12 
	~<ãrmios.h
>

13 
	~<°dio.h
>

15 #ifde‡
__˝lu•lus


19 
pktgí_l2p_dump
();

21 
pktgí_öãø˘
();

23 *
pktgí_gë_lua
();

25 
pktgí_°›_ru¬ög
();

39 *
pktgí_gë_lua
();

41 #ifde‡
__˝lu•lus


	@app/pktgen-pcap.c

8 
	~"pktgí-di•œy.h
"

9 
	~"pktgí-log.h
"

11 
	~"pktgí.h
"

13 #i‚de‡
MBUF_INVALID_PORT


14 #i‡
RTE_VERSION
 >
RTE_VERSION_NUM
(17, 11, 0, 0)

15 
	#MBUF_INVALID_PORT
 
UINT16_MAX


	)

17 
	#MBUF_INVALID_PORT
 
UINT8_MAX


	)

34 
	$pktgí_¥öt_pˇp
(
uöt16_t
 
pid
)

36 
uöt32_t
 
i
, 
row
, 
cﬁ
, 
max_pkts
, 
Àn
;

37 
uöt16_t
 
ty≥
, 
vœn
, 
skù
;

38 
uöt8_t
 
¥Ÿo
;

39 
p‹t_öfo_t
 *
öfo
;

40 
pkt_hdr_t
 *
hdr
;

41 
pˇp_öfo_t
 *
pˇp
;

42 
pˇ¥ec_hdr_t
 
pˇp_hdr
;

43 
buff
[64];

44 
pkt_buff
[2048];

46 
	`di•œy_t›löe
("<PCAP Page>");

47 
	`s¸n_¥ötf
(1, 3, "P‹à%d o‡%d", 
pid
, 
pktgí
.
nb_p‹ts
);

49 
öfo
 = &
pktgí
.öfo[
pid
];

50 
pˇp
 = 
öfo
->pcap;

52 
row
 = 
PORT_STATE_ROW
;

53 
cﬁ
 = 1;

54 i‡(
pˇp
 =
NULL
) {

55 
	`s¸n_˝rötf
(10,

56 
this_s¸n
->
ncﬁs
,

58 
row
 = 28;

59 
Àave
;

62 
	`s¸n_eﬁ_pos
(
row
, 
cﬁ
);

63 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "Port: %d, PCAP Count: %d of %d",

64 
pid
, 
pˇp
->
pkt_idx
,Öˇp->
pkt_cou¡
);

65 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s %*s%*s%*s%*s%*s%*s%*s",

67 
COLUMN_WIDTH_0
, "Dst MAC",

68 
COLUMN_WIDTH_0
, "Src MAC",

69 
COLUMN_WIDTH_0
, "Dst IP",

70 
COLUMN_WIDTH_0
 + 2, "Src IP",

75 
max_pkts
 = 
pˇp
->
pkt_idx
 + 
PCAP_PAGE_SIZE
;

76 i‡(
max_pkts
 > 
pˇp
->
pkt_cou¡
)

77 
max_pkts
 = 
pˇp
->
pkt_cou¡
;

79 
	`_pˇp_skù
(
pˇp
,Öˇp->
pkt_idx
);

81 
i
 = 
pˇp
->
pkt_idx
; i < 
max_pkts
; i++) {

82 
cﬁ
 = 1;

83 
skù
 = 0;

85 
Àn
 = 
	`_pˇp_ªad
(
pˇp
, &
pˇp_hdr
, 
pkt_buff
, (pkt_buff));

86 i‡(
Àn
 == 0)

90 i‡(
pˇp_hdr
.
ö˛_Àn
 > (
pkt_buff
) ) {

91 
i
--;

92 
skù
++;

95 
ty≥
 = 
	`¡ohs
–((
uöt16_t
 *)
pkt_buff
)[6]);

96 i‡(
	`u∆ikñy
(
ty≥
 =
ETHER_TYPE_VLAN
) )

97 
ty≥
 = 
	`¡ohs
–((
uöt16_t
 *)
pkt_buff
)[8]);

99 i‡(
	`u∆ikñy
(
ty≥
 < 
MAX_ETHER_TYPE_SIZE
) )

100 
skù
++;

102 
hdr
 = (
pkt_hdr_t
 *)&
pkt_buff
[0];

104 
	`s¸n_eﬁ_pos
(
row
, 
cﬁ
);

106 
	`s¸n_¥ötf
(
row
, 
cﬁ
, "%5d:", 
i
);

107 
cﬁ
 += 7;

108 
	`s¸n_¥ötf
(
row
, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
,

109 
	`öë_mtﬂ
(
buff
, (buff), &
hdr
->
ëh
.
d_addr
));

110 
cﬁ
 +
COLUMN_WIDTH_1
;

111 
	`s¸n_¥ötf
(
row
, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
,

112 
	`öë_mtﬂ
(
buff
, (buff), &
hdr
->
ëh
.
s_addr
));

113 
cﬁ
 +
COLUMN_WIDTH_1
;

115 
ty≥
 = 
	`¡ohs
(
hdr
->
ëh
.
ëhî_ty≥
);

116 
¥Ÿo
 = 
hdr
->
u
.
ùv4
.proto;

117 
vœn
 = 0;

118 i‡(
ty≥
 =
ETHER_TYPE_VLAN
) {

119 
vœn
 = 
	`¡ohs
–((
uöt16_t
 *)&
hdr
->
ëh
.
ëhî_ty≥
)[1]);

120 
ty≥
 = 
	`¡ohs
–((
uöt16_t
 *)&
hdr
->
ëh
.
ëhî_ty≥
)[2]);

121 
¥Ÿo
 = ((
ùHdr_t
 *)((*)&
hdr
->
u
.
ùv4
 + 4))->proto;

124 i‡(
ty≥
 =
ETHER_TYPE_IPv4
) {

125 
	`s¸n_¥ötf
(
row
,

126 
cﬁ
,

128 
COLUMN_WIDTH_1
,

129 
	`öë_¡›4
(
buff
, (buff),

130 
hdr
->
u
.
ùv4
.
d°
,

132 
cﬁ
 +
COLUMN_WIDTH_1
;

133 
	`s¸n_¥ötf
(
row
,

134 
cﬁ
,

136 
COLUMN_WIDTH_1
 + 2,

137 
	`öë_¡›4
(
buff
, (buff),

138 
hdr
->
u
.
ùv4
.
§c
,

140 
cﬁ
 +
COLUMN_WIDTH_1
 + 2;

142 
	`¢¥ötf
(
buff
, (buff), "%d/%d",

143 
	`¡ohs
(
hdr
->
u
.
uù
.
udp
.
•‹t
),

144 
	`¡ohs
(
hdr
->
u
.
uù
.
udp
.
dp‹t
));

145 
	`s¸n_¥ötf
(
row
, 
cﬁ
, "%*s", 12, 
buff
);

146 
cﬁ
 += 12;

148 
skù
++;

149 
cﬁ
 +((2 * 
COLUMN_WIDTH_1
) + 2 + 12);

151 
	`¢¥ötf
(
buff
, (buff), "%s/%s:%4d",

152 (
ty≥
 =
ETHER_TYPE_IPv4
) ? "IPv4" :

153 (
ty≥
 =
ETHER_TYPE_IPv6
) ? "IPv6" : "Other",

154 (
ty≥
 =
PG_IPPROTO_TCP
) ? "TCP" :

155 (
¥Ÿo
 =
PG_IPPROTO_ICMP
) ? "ICMP" : "UDP",

156 (
vœn
 & 0xFFF));

157 
	`s¸n_¥ötf
(
row
, 
cﬁ
, "%*s", 15, 
buff
);

158 
cﬁ
 += 15;

159 
	`s¸n_¥ötf
(
row
, 
cﬁ
, "%5d", 
Àn
);

161 i‡(
skù
 && (
ty≥
 < 
ETHER_TYPE_IPv4
) )

162 
	`s¸n_¥ötf
(
row
, 
cﬁ
 + 7, "<<< Skù %04x", 
ty≥
);

163 i‡(
skù
 && (
ty≥
 !
ETHER_TYPE_IPv4
) )

164 
	`s¸n_¥ötf
(
row
, 
cﬁ
 + 7, " EthTy≥ %04x", 
ty≥
);

165 
row
++;

167 
Àave
:

168 
	`di•œy_dashlöe
(
row
 + 2);

170 
pktgí
.
Êags
 &~
PRINT_LABELS_FLAG
;

171 
	}
}

186 
	$pktgí_∑ge_pˇp
(
uöt16_t
 
pid
)

188 i‡(
pktgí
.
Êags
 & 
PRINT_LABELS_FLAG
)

189 
	`pktgí_¥öt_pˇp
(
pid
);

190 
	}
}

204 
	$pktgí_pˇp_mbuf_˘‹
(
πe_mempoﬁ
 *
mp
,

205 *
›aque_¨g
,

206 *
_m
,

207 
i
)

209 
πe_mbuf
 *
m
 = 
_m
;

211 #i‡
RTE_VERSION
 >
	`RTE_VERSION_NUM
(16, 7, 0, 0)

212 
uöt32_t
 
buf_Àn
, 
mbuf_size
, 
¥iv_size
;

214 
uöt32_t
 
buf_Àn
 = 
mp
->
ñt_size
 - (
πe_mbuf
);

216 
pˇ¥ec_hdr_t
 
hdr
;

217 
ssize_t
 
Àn
 = -1;

218 
buf„r
[2048];

219 
pˇp_öfo_t
 *
pˇp
 = (pˇp_öfo_à*)
›aque_¨g
;

221 #i‡
RTE_VERSION
 >
	`RTE_VERSION_NUM
(16, 7, 0, 0)

222 
¥iv_size
 = 
	`πe_pktmbuf_¥iv_size
(
mp
);

223 
mbuf_size
 = (
πe_mbuf
Ë+ 
¥iv_size
;

224 
buf_Àn
 = 
	`πe_pktmbuf_d©a_room_size
(
mp
);

226 
	`mem£t
(
m
, 0, 
mbuf_size
);

228 #i‡
RTE_VERSION
 >
	`RTE_VERSION_NUM
(17, 11, 0, 0)

230 
m
->
¥iv_size
 =Öriv_size;

231 
m
->
buf_addr
 = (*)m + 
mbuf_size
;

232 
m
->
buf_iova
 = 
	`πe_mempoﬁ_vút2iova
(mË+ 
mbuf_size
;

233 
m
->
buf_Àn
 = (
uöt16_t
)buf_len;

234 #ñi‡
RTE_VERSION
 >
	`RTE_VERSION_NUM
(16, 7, 0, 0)

236 
m
->
¥iv_size
 =Öriv_size;

237 
m
->
buf_addr
 = (*)m + 
mbuf_size
;

238 
m
->
buf_phyßddr
 = 
	`πe_mempoﬁ_vút2phy
(
mp
, mË+ 
mbuf_size
;

239 
m
->
buf_Àn
 = (
uöt16_t
)buf_len;

242 
m
->
buf_addr
 = (*)m + (
πe_mbuf
);

243 
m
->
buf_phyßddr
 = 
	`πe_mempoﬁ_vút2phy
(
mp
, m->
buf_addr
);

244 
m
->
buf_Àn
 = (
uöt16_t
)buf_len;

248 
m
->
d©a_off
 = 
	`RTE_MIN
(
RTE_PKTMBUF_HEADROOM
, m->
buf_Àn
);

251 
m
->
poﬁ
 = 
mp
;

252 
m
->
nb_£gs
 = 1;

253 
m
->
p‹t
 = 
MBUF_INVALID_PORT
;

254 
	`πe_mbuf_ªf˙t_£t
(
m
, 1);

255 
m
->
√xt
 = 
NULL
;

258 i‡–(
i
 & 0x3ff) == 0) {

259 
	`s¸n_¥ötf
(1, 1, "%c\b", "-\\|/"[(
i
 >> 10) & 3]);

260 
i
++;

263 i‡(
	`u∆ikñy
(
	`_pˇp_ªad
(
pˇp
, &
hdr
, 
buf„r
,

264 (
buf„r
)) <= 0) ) {

265 
	`_pˇp_ªwöd
(
pˇp
);

269 
Àn
 = 
hdr
.
ö˛_Àn
;

272 i‡(
Àn
 < (
ETHER_MIN_LEN
 - 4) )

273 
Àn
 = (
ETHER_MIN_LEN
 - 4);

274 i‡(
Àn
 > (
ETHER_MAX_LEN
 - 4) )

275 
Àn
 = (
ETHER_MAX_LEN
 - 4);

277 
m
->
d©a_Àn
 = 
Àn
;

278 
m
->
pkt_Àn
 = 
Àn
;

280 
	`πe_mem˝y
((
uöt8_t
 *)
m
->
buf_addr
 + m->
d©a_off
, 
buf„r
, 
Àn
);

283 
	}
}

298 
	$pktgí_pˇp_∑r£
(
pˇp_öfo_t
 *
pˇp
, 
p‹t_öfo_t
 *
öfo
, 
qid
)

300 
pˇ¥ec_hdr_t
 
hdr
;

301 
uöt32_t
 
ñt_cou¡
, 
d©a_size
, 
Àn
, 
i
;

302 
uöt64_t
 
pkt_sizes
 = 0;

303 
buf„r
[2048];

304 
«me
[
RTE_MEMZONE_NAMESIZE
];

306 i‡–(
pˇp
 =
NULL
Ë|| (
öfo
 == NULL) )

309 
	`_pˇp_ªwöd
(
pˇp
);

311 
	`¢¥ötf
(
«me
, “ame), "%-12s%d:%d", "PCAP TX", 
öfo
->
pid
, 
qid
);

312 
	`s¸n_¥ötf
(0, 0, " Pro˚ss: %-*†", 18, 
«me
);

314 
pkt_sizes
 = 
ñt_cou¡
 = 
i
 = 0;

317 
	`_pˇp_ªad
(
pˇp
, &
hdr
, 
buf„r
, (buffer)) > 0) {

319 
Àn
 = 
hdr
.
ö˛_Àn
;

321 i‡(
Àn
 < (
ETHER_MIN_LEN
 - 4) )

322 
Àn
 = (
ETHER_MIN_LEN
 - 4);

323 i‡(
Àn
 > (
ETHER_MAX_LEN
 - 4) )

324 
Àn
 = (
ETHER_MAX_LEN
 - 4);

326 
ñt_cou¡
++;

328 i‡–(
ñt_cou¡
 & 0x3ff) == 0)

329 
	`s¸n_¥ötf
(1, 1, "%c\b", "-\\|/"[
i
++ & 3]);

331 
pkt_sizes
 +
Àn
;

335 i‡(
ñt_cou¡
 > 0) {

337 
öfo
->
pˇp
->
pkt_size
 = (
pkt_sizes
 / 
ñt_cou¡
);

338 
öfo
->
pˇp
->
pkt_cou¡
 = 
ñt_cou¡
;

339 
öfo
->
pˇp
->
pkt_idx
 = 0;

341 
	`_pˇp_ªwöd
(
pˇp
);

344 i‡(
ñt_cou¡
 < 
MAX_MBUFS_PER_PORT
)

345 
ñt_cou¡
 = 
MAX_MBUFS_PER_PORT
;

346 
ñt_cou¡
 = 
	`πe_Æign32pow2
(elt_count);

348 
	`s¸n_¥ötf
(0, 0, "\∏ Cª©e: %-*† \b", 16, 
«me
);

349 
öfo
->
q
[
qid
].
pˇp_mp
 = 
	`πe_mempoﬁ_¸óã
(

350 
«me
,

351 
ñt_cou¡
,

352 
MBUF_SIZE
,

354 (
πe_pktmbuf_poﬁ_¥iv©e
),

355 
πe_pktmbuf_poﬁ_öô
,

356 
NULL
,

357 
pktgí_pˇp_mbuf_˘‹
,

358 (*)
pˇp
,

359 
	`πe_lc‹e_to_sockë_id
(

361 
MEMPOOL_F_DMA
);

362 
	`s¸n_¥ötf
(0, 0, "\r");

363 i‡(
öfo
->
q
[
qid
].
pˇp_mp
 =
NULL
)

364 
	`pktgí_log_∑nic
("Cannot initÖort %d for PCAPÖackets",

365 
öfo
->
pid
);

367 
d©a_size
 = (
öfo
->
pˇp
->
pkt_cou¡
 * 
MBUF_SIZE
);

368 
	`s¸n_¥ötf
(0, 0,

371 
«me
,

372 
ñt_cou¡
,

373 
öfo
->
pˇp
->
pkt_cou¡
,

374 (
d©a_size
 + 1023) / 1024);

375 
pktgí
.
mem_u£d
 +
d©a_size
;

376 
pktgí
.
tŸÆ_mem_u£d
 +
d©a_size
;

378 
	`pktgí_£t_p‹t_Êags
(
öfo
, 
SEND_PCAP_PKTS
);

381 
	`pktgí_∑ckë_øã
(
öfo
);

383 
	}
}

	@app/pktgen-pcap.h

8 #i‚de‡
_PKTGEN_PCAP_H_


9 
	#_PKTGEN_PCAP_H_


	)

11 
	~<_pˇp.h
>

13 #ifde‡
__˝lu•lus


17 
p‹t_öfo_s
;

19 
pktgí_pˇp_∑r£
(
pˇp_öfo_t
 *
pˇp
,

20 
p‹t_öfo_s
 *
öfo
,

21 
qid
);

23 
pktgí_∑ge_pˇp
(
uöt16_t
 
pid
);

25 #ifde‡
__˝lu•lus


	@app/pktgen-port-cfg.c

9 
	~<˛i_s¸n.h
>

10 
	~"pktgí-p‹t-cfg.h
"

12 
	~"pktgí.h
"

13 
	~"pktgí-cmds.h
"

14 
	~"pktgí-log.h
"

16 #ifde‡
RTE_LIBRTE_BONDING_PMD


17 
	~<πe_ëh_b⁄d_8023ad.h
>

21 
	mRX_PTHRESH
 = 8,

22 
	mRX_HTHRESH
 = 8,

23 
	mRX_WTHRESH
 = 4,

25 
	mTX_PTHRESH
 = 36,

26 
	mTX_HTHRESH
 = 0,

27 
	mTX_WTHRESH
 = 0,

28 
	mTX_WTHRESH_1GB
 = 16,

31 
uöt8_t
 
	ghw_°rù_¸c
 = 0;

32 c⁄° 
πe_ëh_c⁄f
 
	gdeÁu…_p‹t_c⁄f
 = {

33 .
rxmode
 = {

34 .
•lô_hdr_size
 = 0,

35 .
	ghódî_•lô
 = 0,

36 .
	ghw_ù_checksum
 = 0,

37 .
	ghw_vœn_fûãr
 = 0,

38 .
	ghw_vœn_°rù
 = 0,

39 .
	ghw_vœn_exãnd
 = 0,

40 .
	gjumbo_‰ame
 = 0,

41 .
	ghw_°rù_¸c
 = 0,

43 .
	grx_adv_c⁄f
 = {

44 .
rss_c⁄f
 = {

45 .
rss_key
 = 
NULL
,

46 .
	grss_key_Àn
 = 0,

47 .
	grss_hf
 = 
ETH_RSS_IP
,

50 .
	gtxmode
 = {

51 .
mq_mode
 = 
ETH_MQ_TX_NONE
,

55 c⁄° 
rög_c⁄f_t
 
	gdeÁu…_rög_c⁄f
 = {

56 .
rx_±hªsh
 = 
RTE_PMD_PARAM_UNSET
,

57 .
	grx_hthªsh
 = 
RTE_PMD_PARAM_UNSET
,

58 .
	grx_wthªsh
 = 
RTE_PMD_PARAM_UNSET
,

60 .
	gtx_±hªsh
 = 
RTE_PMD_PARAM_UNSET
,

61 .
	gtx_hthªsh
 = 
RTE_PMD_PARAM_UNSET
,

62 .
	gtx_wthªsh
 = 
RTE_PMD_PARAM_UNSET
,

64 .
	grx_‰ì_thªsh
 = 32,

65 .
	grx_dr›_í
 = 
RTE_PMD_PARAM_UNSET
,

66 .
	gtx_‰ì_thªsh
 = 
RTE_PMD_PARAM_UNSET
,

67 .
	gtx_rs_thªsh
 = 
RTE_PMD_PARAM_UNSET
,

68 .
	gtxq_Êags
 = 
RTE_PMD_PARAM_UNSET
,

69 .
	grss_hf
 = 
ETH_RSS_IP


73 
	$pktgí_£t_hw_°rù_¸c
(
uöt8_t
 
vÆ
)

75 
hw_°rù_¸c
 = 
vÆ
;

76 
	}
}

89 
πe_mempoﬁ
 *

90 
	$pktgí_mbuf_poﬁ_¸óã
(c⁄° *
ty≥
, 
uöt8_t
 
pid
, uöt8_à
queue_id
,

91 
uöt32_t
 
nb_mbufs
, 
sockë_id
, 
ˇche_size
){

92 
πe_mempoﬁ
 *
mp
;

93 
«me
[
RTE_MEMZONE_NAMESIZE
];

95 
	`¢¥ötf
(
«me
, “ame), "%-12s%u:%u", 
ty≥
, 
pid
, 
queue_id
);

96 
	`pktgí_log_öfo
(

99 
«me
,

100 
nb_mbufs
,

101 
MBUF_SIZE
,

102 (
πe_mbuf
),

103 (
πe_mempoﬁ
),

104 (((
nb_mbufs
 * (
MBUF_SIZE
 + (
πe_mbuf
)) +

105 (
πe_mempoﬁ
))) + 1023) / 1024,

106 
RTE_PKTMBUF_HEADROOM
,

107 
RTE_MBUF_DEFAULT_BUF_SIZE
);

108 
pktgí
.
mem_u£d
 +((
nb_mbufs
 *

109 (
MBUF_SIZE
 + (
πe_mbuf
)) +

110 (
πe_mempoﬁ
)));

111 
pktgí
.
tŸÆ_mem_u£d
 +((
nb_mbufs
 *

112 (
MBUF_SIZE
 + (
πe_mbuf
)) +

113 (
πe_mempoﬁ
)));

116 
mp
 = 
	`πe_pktmbuf_poﬁ_¸óã
(
«me
, 
nb_mbufs
, 
ˇche_size
,

117 
DEFAULT_PRIV_SIZE
, 
MBUF_SIZE
, 
sockë_id
);

118 i‡(
mp
 =
NULL
)

119 
	`pktgí_log_∑nic
(

121 
«me
,

122 
pid
,

123 
queue_id
,

124 
nb_mbufs
,

125 
sockë_id
,

126 
	`πe_°ªº‹
(
î∫o
));

128  
mp
;

129 
	}
}

132 
	$pktgí_p‹t_c⁄f_£tup
(
uöt32_t
 
pid
, 
rxtx_t
 *
π
, c⁄° 
πe_ëh_c⁄f
 *
dpc
)

134 
p‹t_öfo_t
 *
öfo
 = &
pktgí
.öfo[
pid
];

135 
πe_ëh_c⁄f
 *
c⁄f
 = &
öfo
->
p‹t_c⁄f
;

136 
πe_ëh_dev_öfo
 *
dev
 = &
öfo
->
dev_öfo
;

137 
rög_c⁄f_t
 *
rc
 = &
öfo
->
rög_c⁄f
;

138 
πe_ëh_rxc⁄f
 *
rx
;

139 
πe_ëh_txc⁄f
 *
tx
;

141 
	`πe_mem˝y
(
c⁄f
, 
dpc
, (
πe_ëh_c⁄f
));

142 
	`πe_mem˝y
(&
öfo
->
rög_c⁄f
, &
deÁu…_rög_c⁄f
, (
rög_c⁄f_t
));

144 
	`πe_ëh_dev_öfo_gë
(
pid
, 
dev
);

146 
	`pktgí_dump_dev_öfo
(
°dout
, "DeÁu… Info", 
dev
, 
pid
);

148 i‡(
π
->
rx
 > 1) {

149 
c⁄f
->
rx_adv_c⁄f
.
rss_c⁄f
.
rss_key
 = 
NULL
;

150 
c⁄f
->
rx_adv_c⁄f
.
rss_c⁄f
.
rss_hf
 = 
ETH_RSS_IP
;

152 
c⁄f
->
rx_adv_c⁄f
.
rss_c⁄f
.
rss_key
 = 
NULL
;

153 
c⁄f
->
rx_adv_c⁄f
.
rss_c⁄f
.
rss_hf
 = 0;

155 
c⁄f
->
rxmode
.
hw_°rù_¸c
 = hw_strip_crc;

157 i‡(
c⁄f
->
rx_adv_c⁄f
.
rss_c⁄f
.
rss_hf
 != 0)

158 
c⁄f
->
rxmode
.
mq_mode
 = (
dev
->
max_vfs
) ?

159 
ETH_MQ_RX_VMDQ_RSS
 : 
ETH_MQ_RX_RSS
;

161 
c⁄f
->
rxmode
.
mq_mode
 = 
ETH_MQ_RX_NONE
;

163 
c⁄f
->
txmode
.
mq_mode
 = 
ETH_MQ_TX_NONE
;

165 
rx
 = &
öfo
->
rx_c⁄f
;

166 
tx
 = &
öfo
->
tx_c⁄f
;

168 
	`πe_mem˝y
(
rx
, &
öfo
->
dev_öfo
.
deÁu…_rxc⁄f
, (
πe_ëh_rxc⁄f
));

169 
	`πe_mem˝y
(
tx
, &
öfo
->
dev_öfo
.
deÁu…_txc⁄f
, (
πe_ëh_txc⁄f
));

172 i‡(
rc
->
rx_±hªsh
 !
RTE_PMD_PARAM_UNSET
)

173 
rx
->
rx_thªsh
.
±hªsh
 = 
rc
->
rx_±hªsh
;

175 i‡(
rc
->
rx_hthªsh
 !
RTE_PMD_PARAM_UNSET
)

176 
rx
->
rx_thªsh
.
hthªsh
 = 
rc
->
rx_hthªsh
;

178 i‡(
rc
->
rx_wthªsh
 !
RTE_PMD_PARAM_UNSET
)

179 
rx
->
rx_thªsh
.
wthªsh
 = 
rc
->
rx_wthªsh
;

181 i‡(
rc
->
rx_‰ì_thªsh
 !
RTE_PMD_PARAM_UNSET
)

182 
rx
->
rx_‰ì_thªsh
 = 
rc
->rx_free_thresh;

184 i‡(
rc
->
rx_dr›_í
 !
RTE_PMD_PARAM_UNSET
)

185 
rx
->
rx_dr›_í
 = 
rc
->rx_drop_en;

187 i‡(
rc
->
tx_±hªsh
 !
RTE_PMD_PARAM_UNSET
)

188 
öfo
->
tx_c⁄f
.
tx_thªsh
.
±hªsh
 = 
rc
->
tx_±hªsh
;

190 i‡(
rc
->
tx_hthªsh
 !
RTE_PMD_PARAM_UNSET
)

191 
tx
->
tx_thªsh
.
hthªsh
 = 
rc
->
tx_hthªsh
;

193 i‡(
rc
->
tx_wthªsh
 !
RTE_PMD_PARAM_UNSET
)

194 
tx
->
tx_thªsh
.
wthªsh
 = 
rc
->
tx_wthªsh
;

196 i‡(
rc
->
tx_rs_thªsh
 !
RTE_PMD_PARAM_UNSET
)

197 
tx
->
tx_rs_thªsh
 = 
rc
->tx_rs_thresh;

199 i‡(
rc
->
tx_‰ì_thªsh
 !
RTE_PMD_PARAM_UNSET
)

200 
tx
->
tx_‰ì_thªsh
 = 
rc
->tx_free_thresh;

202 i‡(
rc
->
txq_Êags
 !
RTE_PMD_PARAM_UNSET
)

203 
öfo
->
tx_c⁄f
.
txq_Êags
 = 
rc
->txq_flags;

204 
	}
}

219 
	$pktgí_c⁄fig_p‹ts
()

221 
uöt32_t
 
lid
, 
pid
, 
i
, 
s
, 
q
, 
sid
;

222 
rxtx_t
 
π
;

223 
pkt_£q_t
 *
pkt
;

224 
p‹t_öfo_t
 *
öfo
;

225 
buff
[
RTE_MEMZONE_NAMESIZE
];

226 
öt32_t
 
ªt
, 
ˇche_size
;

227 
ouçut_buff
[256] = { 0 };

228 
uöt64_t
 
ticks
;

232 
pktgí
.
nb_p‹ts
 = 
	`πe_ëh_dev_cou¡
();

233 i‡(
pktgí
.
nb_p‹ts
 > 
RTE_MAX_ETHPORTS
)

234 
pktgí
.
nb_p‹ts
 = 
RTE_MAX_ETHPORTS
;

236 i‡(
pktgí
.
nb_p‹ts
 == 0)

237 
	`pktgí_log_∑nic
("*** DidÇot findányÖortsÅo use ***");

239 
pktgí
.
°¨tög_p‹t
 = 0;

242 i‡(
pktgí
.
nb_p‹ts
 >Öktgí.
nb_p‹ts_≥r_∑ge
)

243 
pktgí
.
ídög_p‹t
 =Öktgí.
°¨tög_p‹t
 +

244 
pktgí
.
nb_p‹ts_≥r_∑ge
;

246 
pktgí
.
ídög_p‹t
 =Öktgí.
°¨tög_p‹t
 +Öktgí.
nb_p‹ts
;

248 
	`pg_p‹t_m©rix_dump
(
pktgí
.
l2p
);

250 
	`pktgí_log_öfo
(

252 
pktgí
.
nb_p‹ts
,

253 
MBUF_SIZE
,

254 
MBUF_CACHE_SIZE
);

257 
lid
 = 0;Üid < 
RTE_MAX_LCORE
;Üid++) {

258 i‡(
	`gë_m≠
(
pktgí
.
l2p
, 
RTE_MAX_ETHPORTS
, 
lid
) == 0)

262 
pid
 = 0;Öid < 
pktgí
.
nb_p‹ts
;Öid++) {

264 i‡(
	`gë_m≠
(
pktgí
.
l2p
, 
pid
, 
lid
) == 0)

266 
	`pg_£t_p‹t_¥iv©e
(
pktgí
.
l2p
, 
pid
, &pktgí.
öfo
[pid]);

267 
pktgí
.
öfo
[
pid
].pid =Öid;

270 
	`pg_dump_l2p
(
pktgí
.
l2p
);

272 
pktgí
.
tŸÆ_mem_u£d
 = 0;

274 
pid
 = 0;Öid < 
pktgí
.
nb_p‹ts
;Öid++) {

276 i‡–(
π
.
rxtx
 = 
	`gë_m≠
(
pktgí
.
l2p
, 
pid
, 
RTE_MAX_LCORE
)) == 0)

279 
pktgí
.
p‹t_˙t
++;

280 
	`¢¥ötf
(
ouçut_buff
, (output_buff),

282 
pid
, 
π
.
tx
,Ñt.
rx
);

284 
öfo
 = 
	`gë_p‹t_¥iv©e
(
pktgí
.
l2p
, 
pid
);

286 
öfo
->
fûl_∑âîn_ty≥
 = 
ABC_FILL_PATTERN
;

287 
	`°∫˝y
(
öfo
->
u£r_∑âîn
, "0123456789abcdef", 
USER_PATTERN_SIZE
);

289 
	`πe_•ölock_öô
(&
öfo
->
p‹t_lock
);

292 
	`¢¥ötf
(
buff
, (buff), "£q_hdr_%d", 
pid
);

293 
öfo
->
£q_pkt
 = 
	`πe_zmÆloc_sockë
(
buff
,

294 ((
pkt_£q_t
Ë* 
NUM_TOTAL_PKTS
),

295 
RTE_CACHE_LINE_SIZE
, 
	`πe_sockë_id
());

296 i‡(
öfo
->
£q_pkt
 =
NULL
)

297 
	`pktgí_log_∑nic
("UnableÅoállocate %dÖkt_seq_t headers",

298 
NUM_TOTAL_PKTS
);

300 
i
 = 0; i < 
NUM_TOTAL_PKTS
; i++)

301 
öfo
->
£q_pkt
[
i
].
£q_íabÀd
 = 1;

303 
öfo
->
£qIdx
 = 0;

304 
öfo
->
£qC¡
 = 0;

306 
öfo
->
jôãr_thªshﬁd
 = 
DEFAULT_JITTER_THRESHOLD
;

307 
ticks
 = 
	`πe_gë_timî_hz
() / 1000000;

308 
öfo
->
jôãr_thªshﬁd_˛ks
 = info->
jôãr_thªshﬁd
 * 
ticks
;

309 
öfo
->
nb_mbufs
 = 
MAX_MBUFS_PER_PORT
;

310 
ˇche_size
 = (
öfo
->
nb_mbufs
 > 
RTE_MEMPOOL_CACHE_MAX_SIZE
) ?

311 
RTE_MEMPOOL_CACHE_MAX_SIZE
 : 
öfo
->
nb_mbufs
;

313 
	`pktgí_p‹t_c⁄f_£tup
(
pid
, &
π
, &
deÁu…_p‹t_c⁄f
);

315 i‡–(
ªt
 = 
	`πe_ëh_dev_c⁄figuª
(
pid
, 
π
.
rx
,Ñt.
tx
, &
öfo
->
p‹t_c⁄f
)) < 0)

316 
	`pktgí_log_∑nic
(

318 
pid
, 
π
.
rx
,Ñt.
tx
, 
î∫o
, 
	`πe_°ªº‹
(-
ªt
));

320 
pkt
 = &
öfo
->
£q_pkt
[
SINGLE_PKT
];

322 
pktgí
.
mem_u£d
 = 0;

324 
q
 = 0; q < 
π
.
rx
; q++) {

326 
sid
 = 
	`πe_lc‹e_to_sockë_id
(
	`gë_p‹t_lid
(
pktgí
.
l2p
, 
pid
, 
q
));

329 
öfo
->
q
[q].
rx_mp
 = 
	`pktgí_mbuf_poﬁ_¸óã
("DeÁu… RX", 
pid
, q,

330 
öfo
->
nb_mbufs
, 
sid
, 
ˇche_size
);

331 i‡(
öfo
->
q
[q].
rx_mp
 =
NULL
)

332 
	`pktgí_log_∑nic
("C™nŸ inôÖ‹à%d f‹ DeÁu… RX mbufs", 
pid
);

334 
ªt
 = 
	`πe_ëh_rx_queue_£tup
(
pid
, 
q
, 
pktgí
.
nb_rxd
, 
sid
,

335 &
öfo
->
rx_c⁄f
, 
pktgí
.öfo[
pid
].
q
[q].
rx_mp
);

336 i‡(
ªt
 < 0)

337 
	`pktgí_log_∑nic
("rte_eth_rx_queue_setup:Érr=%d,Öort=%d, %s",

338 
ªt
, 
pid
, 
	`πe_°ªº‹
(-ret));

339 
lid
 = 
	`gë_p‹t_lid
(
pktgí
.
l2p
, 
pid
, 
q
);

340 
	`pktgí_log_öfo
(" Së RX queuê°©†m≠pögÖid %d, q %d,Üc‹ê%d\n", 
pid
, 
q
, 
lid
);

341 
	`πe_ëh_dev_£t_rx_queue_°©s_m≠pög
(
pid
, 
q
, 
lid
);

343 
	`pktgí_log_öfo
("");

345 
q
 = 0; q < 
π
.
tx
; q++) {

347 
sid
 = 
	`πe_lc‹e_to_sockë_id
(
	`gë_p‹t_lid
(
pktgí
.
l2p
, 
pid
, 
q
));

350 
öfo
->
q
[q].
tx_mp
 = 
	`pktgí_mbuf_poﬁ_¸óã
("DeÁu… TX", 
pid
, q,

351 
MAX_MBUFS_PER_PORT
, 
sid
, 
ˇche_size
);

352 i‡(
öfo
->
q
[q].
tx_mp
 =
NULL
)

353 
	`pktgí_log_∑nic
("C™nŸ inôÖ‹à%d f‹ DeÁu… TX mbufs", 
pid
);

356 
öfo
->
q
[q].
ønge_mp
 = 
	`pktgí_mbuf_poﬁ_¸óã
("R™gêTX", 
pid
, q,

357 
MAX_MBUFS_PER_PORT
, 
sid
, 0);

358 i‡(
öfo
->
q
[q].
ønge_mp
 =
NULL
)

359 
	`pktgí_log_∑nic
("C™nŸ inôÖ‹à%d f‹ R™gêTX mbufs", 
pid
);

362 
öfo
->
q
[q].
£q_mp
 = 
	`pktgí_mbuf_poﬁ_¸óã
("Sequí˚ TX", 
pid
, q,

363 
MAX_MBUFS_PER_PORT
, 
sid
, 
ˇche_size
);

364 i‡(
öfo
->
q
[q].
£q_mp
 =
NULL
)

365 
	`pktgí_log_∑nic
("C™nŸ inôÖ‹à%d f‹ Sequí˚ TX mbufs", 
pid
);

368 
öfo
->
q
[q].
•ecül_mp
 = 
	`pktgí_mbuf_poﬁ_¸óã
("S≥cü»TX", 
pid
, q,

369 
MAX_SPECIAL_MBUFS
, 
sid
, 0);

370 i‡(
öfo
->
q
[q].
•ecül_mp
 =
NULL
)

371 
	`pktgí_log_∑nic
("C™nŸ inôÖ‹à%d f‹ S≥cü»TX mbufs", 
pid
);

374 i‡(
pktgí
.
öfo
[
pid
].
pˇp
 !
NULL
)

375 i‡(
	`pktgí_pˇp_∑r£
(
pktgí
.
öfo
[
pid
].
pˇp
, info, 
q
) == -1)

376 
	`pktgí_log_∑nic
("C™nŸÜﬂd PCAP fûêf‹Ö‹à%d", 
pid
);

378 
	`pktgí_gë_lök_°©us
(
öfo
, 
pid
, 0);

380 
ªt
 = 
	`πe_ëh_tx_queue_£tup
(
pid
, 
q
, 
pktgí
.
nb_txd
, 
sid
, &
öfo
->
tx_c⁄f
);

381 i‡(
ªt
 < 0)

382 
	`pktgí_log_∑nic
("rte_eth_tx_queue_setup:Érr=%d,Öort=%d, %s",

383 
ªt
, 
pid
, 
	`πe_°ªº‹
(-ret));

384 
	`pktgí_log_öfo
("");

386 
	`pktgí_log_öfo
("%*sPort memory used = %6lu KB", 71, " ",

387 (
pktgí
.
mem_u£d
 + 1023) / 1024);

390 
	`πe_ëh_maˇddr_gë
(
pid
, &
pkt
->
ëh_§c_addr
);

391 
	`pktgí_log_öfo
("%s, Src MAC %02x:%02x:%02x:%02x:%02x:%02x",

392 
ouçut_buff
,

393 
pkt
->
ëh_§c_addr
.
addr_byãs
[0],

394 
pkt
->
ëh_§c_addr
.
addr_byãs
[1],

395 
pkt
->
ëh_§c_addr
.
addr_byãs
[2],

396 
pkt
->
ëh_§c_addr
.
addr_byãs
[3],

397 
pkt
->
ëh_§c_addr
.
addr_byãs
[4],

398 
pkt
->
ëh_§c_addr
.
addr_byãs
[5]);

401 
i
 = 0; i < 
NUM_SEQ_PKTS
; i++)

402 
	`ëhAddrC›y
(&
öfo
->
£q_pkt
[
i
].
ëh_§c_addr
, &
pkt
->eth_src_addr);

404 
	`pktgí_log_öfo
("%*sTotal memory used = %6lu KB", 70, " ",

405 (
pktgí
.
tŸÆ_mem_u£d
 + 1023) / 1024);

408 
pid
 = 0;Öid < 
pktgí
.
nb_p‹ts
;Öid++) {

409 i‡(
	`gë_m≠
(
pktgí
.
l2p
, 
pid
, 
RTE_MAX_LCORE
) == 0)

413 i‡–(
ªt
 = 
	`πe_ëh_dev_°¨t
(
pid
)) < 0)

414 
	`pktgí_log_∑nic
("rte_eth_dev_start:Öort=%d, %s",

415 
pid
, 
	`πe_°ªº‹
(-
ªt
));

416 
	`πe_dñay_us
(250000);

419 
	`πe_dñay_us
(1000000);

422 
pid
 = 0;Öid < 
pktgí
.
nb_p‹ts
;Öid++) {

423 i‡(
	`gë_m≠
(
pktgí
.
l2p
, 
pid
, 
RTE_MAX_LCORE
) == 0)

426 
öfo
 = 
	`gë_p‹t_¥iv©e
(
pktgí
.
l2p
, 
pid
);

428 
	`pktgí_gë_lök_°©us
(
öfo
, 
pid
, 1);

430 i‡(
öfo
->
lök
.
lök_°©us
)

431 
	`¢¥ötf
(
ouçut_buff
, (output_buff),

433 
pid
, (
uöt32_t
)
öfo
->
lök
.
lök_•ìd
,

434 (
öfo
->
lök
.
lök_du∂ex
 =
ETH_LINK_FULL_DUPLEX
) ?

437 
	`¢¥ötf
(
ouçut_buff
, (ouçut_buff), "P‹à%2d: Lök Down", 
pid
);

440 i‡(
pktgí
.
Êags
 & 
PROMISCUOUS_ON_FLAG
) {

441 
	`°∫ˇtf
(
ouçut_buff
, " <EnableÖromiscuous mode>");

442 
	`πe_ëh_¥omiscuous_íabÀ
(
pid
);

445 
	`pktgí_log_öfo
("%s", 
ouçut_buff
);

446 
pktgí
.
öfo
[
pid
].
£q_pkt
[
SINGLE_PKT
].
pktSize
 = 
MIN_PKT_SIZE
;

449 
s
 = 0; s < 
NUM_TOTAL_PKTS
; s++)

450 
	`pktgí_p‹t_deÁu…s
(
pid
, 
s
);

452 
	`pktgí_ønge_£tup
(
öfo
);

454 
	`πe_ëh_°©s_gë
(
pid
, &
öfo
->
öô_°©s
);

456 
	`pktgí_∫d_bôs_öô
(&
pktgí
.
öfo
[
pid
].
∫d_bôfõlds
);

460 
	`pktgí_log_öfo
("");

463 
sid
 = 0; sid < 
	`c‹em≠_˙t
(
pktgí
.
c‹e_öfo
,Öktgí.
c‹e_˙t
, 0); sid++)

464 
	`pktgí_∑ckë_ˇ±uª_öô
(&
pktgí
.
ˇ±uª
[
sid
], sid);

465 
	}
}

	@app/pktgen-port-cfg.h

8 #i‚de‡
_PKTGEN_PORT_CFG_H_


9 
	#_PKTGEN_PORT_CFG_H_


	)

11 
	~<°dio.h
>

12 
	~<°rög.h
>

13 
	~<πe_vîsi⁄.h
>

14 
	~<πe_©omic.h
>

15 
	~<πe_•ölock.h
>

16 
	~<πe_pci.h
>

18 #unde‡
BPF_MAJOR_VERSION


19 
	~<pˇp/pˇp.h
>

21 
	~"pktgí-£q.h
"

22 
	~"pktgí-ønge.h
"

23 
	~"pktgí-°©s.h
"

24 
	~"pktgí-pˇp.h
"

25 
	~"pktgí-dump.h
"

26 
	~"pktgí-ëhî.h
"

27 
	~"pktgí-øndom.h
"

29 #ifde‡
__˝lu•lus


33 
	#MAX_PORT_DESC_SIZE
 132

	)

34 
	#USER_PATTERN_SIZE
 16

	)

36 
	sp‹t_sizes_s
 {

37 
uöt64_t
 
_64
;

38 
uöt64_t
 
_65_127
;

39 
uöt64_t
 
_128_255
;

40 
uöt64_t
 
_256_511
;

41 
uöt64_t
 
_512_1023
;

42 
uöt64_t
 
_1024_1518
;

43 
uöt64_t
 
brﬂdˇ°
;

44 
uöt64_t
 
mu…iˇ°
;

45 
uöt64_t
 
jumbo
;

46 
uöt64_t
 
ru¡
;

47 } 
	tp‹t_sizes_t
;

49 
	smbuf_èbÀ
 {

50 
uöt16_t
 
Àn
;

51 
πe_mbuf
 *
m_èbÀ
[
DEFAULT_PKT_BURST
];

55 
SEND_ARP_REQUEST
 = 0x00000001,

56 
SEND_GRATUITOUS_ARP
 = 0x00000002,

57 
ICMP_ECHO_ENABLE_FLAG
 = 0x00000004,

58 
SEND_PCAP_PKTS
 = 0x00000008,

59 
SEND_RANGE_PKTS
 = 0x00000010,

60 
SEND_SEQ_PKTS
 = 0x00000020,

61 
PROCESS_INPUT_PKTS
 = 0x00000040,

62 
SEND_PING4_REQUEST
 = 0x00000080,

63 
SEND_PING6_REQUEST
 = 0x00000100,

64 
PROCESS_RX_TAP_PKTS
 = 0x00000200,

65 
PROCESS_TX_TAP_PKTS
 = 0x00000400,

66 
SEND_VLAN_ID
 = 0x00000800,

67 
PROCESS_GARP_PKTS
 = 0x00001000,

68 
CAPTURE_PKTS
 = 0x00002000,

69 
SEND_MPLS_LABEL
 = 0x00004000,

70 
SEND_Q_IN_Q_IDS
 = 0x00008000,

71 
SEND_GRE_IPv4_HEADER
 = 0x00010000,

72 
SEND_RANDOM_PKTS
 = 0x00020000,

73 
SEND_GRE_ETHER_HEADER
 = 0x00040000,

74 
SEND_LATENCY_PKTS
 = 0x00080000,

75 
BONDING_TX_PACKETS
 = 0x00100000,

76 
SEND_SHORT_PACKETS
 = 0x00200000,

77 
SENDING_PACKETS
 = 0x40000000,

78 
SEND_FOREVER
 = 0x80000000,

79 
SEND_ARP_PING_REQUESTS
 =

80 (
SEND_ARP_REQUEST
 | 
SEND_GRATUITOUS_ARP
 | 
SEND_PING4_REQUEST
 |

81 
SEND_PING6_REQUEST
)

84 
	#RTE_PMD_PARAM_UNSET
 -1

	)

89 
	srög_c⁄f_s
 {

90 
öt8_t
 
rx_±hªsh
;

91 
öt8_t
 
rx_hthªsh
;

92 
öt8_t
 
rx_wthªsh
;

94 
öt8_t
 
tx_±hªsh
;

95 
öt8_t
 
tx_hthªsh
;

96 
öt8_t
 
tx_wthªsh
;

101 
öt16_t
 
rx_‰ì_thªsh
;

106 
öt8_t
 
rx_dr›_í
;

111 
öt16_t
 
tx_‰ì_thªsh
;

116 
öt16_t
 
tx_rs_thªsh
;

121 
öt32_t
 
txq_Êags
;

126 
uöt64_t
 
rss_hf
;

127 } 
	trög_c⁄f_t
;

130 
ZERO_FILL_PATTERN
 = 1,

131 
ABC_FILL_PATTERN
,

132 
USER_FILL_PATTERN
,

133 
NO_FILL_PATTERN
,

134 } 
	tfûl_t
;

136 (*
tx_func_t
)(
	tp‹t_öfo_s
 *
	töfo
, 
	tuöt16_t
 
	tqid
);

138 
	sp‹t_öfo_s
 {

139 
uöt16_t
 
pid
;

140 
uöt16_t
 
tx_bur°
;

141 
tx_øã
;

142 
πe_©omic32_t
 
p‹t_Êags
;

144 
πe_©omic64_t
 
å™smô_cou¡
;

145 
πe_©omic64_t
 
cuºít_tx_cou¡
;

146 
uöt64_t
 
tx_cy˛es
;

147 
uöt64_t
 
tx_µs
;

148 
uöt64_t
 
dñè
;

149 
uöt64_t
 
tx_cou¡
;

152 
uöt16_t
 
£qIdx
;

153 
uöt16_t
 
£qC¡
;

154 
uöt16_t
 
¥ime_˙t
;

155 
uöt16_t
 
vœnid
;

156 
uöt8_t
 
cos
;

157 
uöt8_t
 
tos
;

158 
πe_•ölock_t
 
p‹t_lock
;

159 
pkt_£q_t
 *
£q_pkt
;

160 
ønge_öfo_t
 
ønge
;

162 
uöt32_t
 
m∂s_íåy
;

163 
uöt32_t
 
gª_key
;

165 
uöt16_t
 
nb_mbufs
;

166 
uöt16_t
 
∑d1
;

167 
uöt64_t
 
max_œãncy
;

168 
uöt64_t
 
avg_œãncy
;

169 
uöt64_t
 
mö_œãncy
;

170 
uöt32_t
 
magic_îr‹s
;

171 
uöt32_t
 
œãncy_nb_pkts
;

172 
uöt64_t
 
jôãr_thªshﬁd
;

173 
uöt64_t
 
jôãr_thªshﬁd_˛ks
;

174 
uöt64_t
 
jôãr_cou¡
;

175 
uöt64_t
 
¥ev_œãncy
;

177 
pkt_°©s_t
 
°©s
;

178 
p‹t_sizes_t
 
sizes
;

180 
ëh_°©s_t
 
öô_°©s
;

181 
ëh_°©s_t
 
¥ev_°©s
;

182 
ëh_°©s_t
 
øã_°©s
;

183 
uöt64_t
 
max_ùackës
;

184 
uöt64_t
 
max_›ackës
;

185 
uöt64_t
 
max_mis£d
;

187 
πe_ëh_lök
 
lök
;

189 
	sq_öfo
 {

190 
πe_©omic32_t
 
Êags
;

191 
mbuf_èbÀ
 
tx_mbufs
;

192 
πe_mempoﬁ
 *
rx_mp
;

193 
πe_mempoﬁ
 *
tx_mp
;

194 
πe_mempoﬁ
 *
ønge_mp
;

195 
πe_mempoﬁ
 *
£q_mp
;

196 
πe_mempoﬁ
 *
pˇp_mp
;

197 
πe_mempoﬁ
 *
•ecül_mp
;

198 
uöt64_t
 
tx_˙t
, 
rx_˙t
;

199 } 
q
[
NUM_Q
];

201 
öt32_t
 
rx_èpfd
;

202 
öt32_t
 
tx_èpfd
;

203 
pˇp_öfo_t
 *
pˇp
;

204 
uöt64_t
 
pˇp_cy˛es
;

206 
öt32_t
 
pˇp_ªsu…
;

207 
bpf_¥ogøm
 
pˇp_¥ogøm
;

210 
	s∑ckë
 {

211 *
d©a
;

212 
uöt32_t
 
Àn
;

213 } 
dump_li°
[
MAX_DUMP_PACKETS
];

214 
uöt8_t
 
dump_hód
;

215 
uöt8_t
 
dump_èû
;

216 
uöt8_t
 
dump_cou¡
;

218 
∫d_bôs_s
 *
∫d_bôfõlds
;

220 
πe_ëh_c⁄f
 
p‹t_c⁄f
;

221 
πe_ëh_dev_öfo
 
dev_öfo
;

222 
πe_ëh_rxc⁄f
 
rx_c⁄f
;

223 
πe_ëh_txc⁄f
 
tx_c⁄f
;

224 
rög_c⁄f_t
 
rög_c⁄f
;

225 
u£r_∑âîn
[
USER_PATTERN_SIZE
];

226 
fûl_t
 
fûl_∑âîn_ty≥
;

227 } 
	tp‹t_öfo_t
;

229 
pktgí_c⁄fig_p‹ts
();

241 
ölöe
 
uöt64_t


242 
pkt_©omic64_tx_cou¡
(
πe_©omic64_t
 *
v
, 
öt64_t
 
bur°
)

244 
suc˚ss
;

245 
öt64_t
 
tmp1
, 
tmp2
;

248 
tmp1
 = 
v
->
˙t
;

249 i‡(
tmp1
 == 0)

251 
tmp2
 = 
likñy
(
tmp1
 > 
bur°
) ? burst :Åmp1;

252 
suc˚ss
 = 
πe_©omic64_cmp£t
((vﬁ©ûê
uöt64_t
 *)&
v
->
˙t
,

253 
tmp1
,

254 
tmp1
 - 
tmp2
);

255 } 
suc˚ss
 == 0);

257  
tmp2
;

260 
ölöe
 

261 
pktgí_dump_rx_c⁄f
(
FILE
 *
f
, 
πe_ëh_rxc⁄f
 *
rx
){

262 
Ârötf
(
f
, "** RX Conf **\n");

263 
Ârötf
(

264 
f
,

266 
rx
->
rx_thªsh
.
±hªsh
,

267 
rx
->
rx_thªsh
.
hthªsh
,

268 
rx
->
rx_thªsh
.
wthªsh
);

269 
Ârötf
(

270 
f
,

272 
rx
->
rx_‰ì_thªsh
,

273 
rx
->
rx_dr›_í
,

274 
rx
->
rx_de„ºed_°¨t
);

277 
ölöe
 

278 
pktgí_dump_tx_c⁄f
(
FILE
 *
f
, 
πe_ëh_txc⁄f
 *
tx
){

279 
Ârötf
(
f
, "** TX Conf **\n");

280 
Ârötf
(

281 
f
,

283 
tx
->
tx_thªsh
.
±hªsh
,

284 
tx
->
tx_thªsh
.
hthªsh
,

285 
tx
->
tx_thªsh
.
wthªsh
);

286 
Ârötf
(

287 
f
,

289 
tx
->
tx_‰ì_thªsh
,

290 
tx
->
tx_rs_thªsh
,

291 
tx
->
tx_de„ºed_°¨t
,

292 
tx
->
txq_Êags
);

295 
ölöe
 

296 
pktgí_dump_dev_öfo
(
FILE
 *
f
, c⁄° *
msg
, 
πe_ëh_dev_öfo
 *
di
, 
uöt32_t
 
pid
) {

297 
Ârötf
(
f
, "\n** %s (%s, if_index:%d) **\n",

298 (
msg
Ë? msg : "Devi˚ Info", 
πe_ëh_devi˚s
[
pid
].
d©a
->
«me
, 
di
->
if_ödex
);

299 #i‡
RTE_VERSION
 < 
RTE_VERSION_NUM
(17, 5, 0, 0)

300 
Ârötf
(

301 
f
,

303 
di
->
pci_dev
 ? di->pci_dev->
max_vfs
 : 0,

304 
di
->
mö_rx_bufsize
,

305 
di
->
max_rx_pkéí
);

307 
Ârötf
(

308 
f
,

310 
di
->
max_rx_queues
,

311 
di
->
max_tx_queues
);

312 
Ârötf
(

313 
f
,

315 
di
->
max_mac_addrs
,

316 
di
->
max_hash_mac_addrs
,

317 
di
->
max_vmdq_poﬁs
);

318 
Ârötf
(

319 
f
,

320 #i‡
RTE_VERSION
 < 
RTE_VERSION_NUM
(17, 11, 0, 0)

321 "Ñx_ofÊﬂd_ˇ∑:%4u,Åx_ofÊﬂd_ˇ∑ :%4u,Ñëa_sizê :%6d, flow_ty≥_rss_ofÊﬂds:%016" 
PRIx64
 "\n",

323 "Ñx_ofÊﬂd_ˇ∑:%4lu,Åx_ofÊﬂd_ˇ∑ :%4lu,Ñëa_sizê :%6d, flow_ty≥_rss_ofÊﬂds:%016" 
PRIx64
 "\n",

325 
di
->
rx_ofÊﬂd_ˇ∑
,

326 
di
->
tx_ofÊﬂd_ˇ∑
,

327 
di
->
ªè_size
,

328 #i‡
deföed
(
RTE_VER_MAJOR
) && (RTE_VER_MAJOR < 2)

331 
di
->
Êow_ty≥_rss_ofÊﬂds


334 
Ârötf
(

335 
f
,

337 
di
->
vmdq_queue_ba£
,

338 
di
->
vmdq_queue_num
,

339 
di
->
vmdq_poﬁ_ba£
);

340 
pktgí_dump_rx_c⁄f
(
f
, &
di
->
deÁu…_rxc⁄f
);

341 
pktgí_dump_tx_c⁄f
(
f
, &
di
->
deÁu…_txc⁄f
);

342 
Ârötf
(
f
, "\n");

345 
pktgí_£t_hw_°rù_¸c
(
uöt8_t
 
vÆ
);

347 #ifde‡
__˝lu•lus


	@app/pktgen-random.c

9 
	~"pktgí-øndom.h
"

11 
	~<°ddef.h
>

12 
	~<°rög.h
>

13 
	~<°dio.h
>

15 
	~<πe_mÆloc.h
>

17 
	~"pktgí-di•œy.h
"

18 
	~"pktgí-log.h
"

20 
	~"x‹shi·64°¨.h
"

23 #ifde‡
TESTING


24 
∫d_func_t
 
	g_∫d_func
 = 
NULL
;

28 
pktgí_öô_deÁu…_∫d
();

42 
__ölöe__
 
uöt32_t


43 
	$pktgí_deÁu…_∫d_func
()

45  (
uöt32_t
)
	`x‹shi·64°¨
();

46 
	}
}

61 
	$pktgí_∫d_bôs_öô
(
∫d_bôs_t
 **
∫d_bôs
)

63 
i
;

65 *
∫d_bôs
 = (
∫d_bôs_t
 *)
	`πe_zmÆloc_sockë
(

67 (
∫d_bôs_t
),

69 
	`πe_sockë_id
());

72 
i
 = 0; i < 
MAX_RND_BITFIELDS
; ++i) {

73 
	`pktgí_£t_øndom_bôfõld
(*
∫d_bôs
, 
i
, 0,

75 
	`pktgí_£t_øndom_bôfõld
(*
∫d_bôs
, 
i
, 0, "");

78 
	`pktgí_öô_deÁu…_∫d
();

79 
	}
}

94 
uöt32_t


95 
	$pktgí_£t_øndom_bôfõld
(
∫d_bôs_t
 *
∫d_bôs
,

96 
uöt8_t
 
idx
,

97 
uöt8_t
 
off£t
,

98 c⁄° *
mask
)

100 i‡(
idx
 >
MAX_RND_BITFIELDS
)

101 
Àave
;

103 
size_t
 
mask_Àn
 = 
	`°æí
(
mask
);

104 i‡(
mask_Àn
 > 
MAX_BITFIELD_SIZE
)

105 
Àave
;

108 i‡(
mask_Àn
 == 0) {

109 
∫d_bôs
->
a˘ive_•ecs
 &~((
uöt32_t
)1 << 
idx
);

110 
Àave
;

118 
BITFIELD_T
 
mask0
 = 0, 
mask1
 = 0, 
maskRnd
 = 0;

120 
uöt32_t
 
i
;

121 
i
 = 0; i < 
mask_Àn
; ++i) {

122 
mask0
 <<= 1;

123 
mask1
 <<= 1;

124 
maskRnd
 <<= 1;

126 
mask
[
i
]) {

127 '0': 
mask0
 += 1; ;

128 '1': 
mask1
 += 1; ;

131 'X': 
maskRnd
 += 1; ;

134 
Àave
;

143 
∑d_Àn
 = 
MAX_BITFIELD_SIZE
 - 
mask_Àn
;

144 
mask0
 <<
∑d_Àn
;

145 
mask1
 <<
∑d_Àn
;

146 
maskRnd
 <<
∑d_Àn
;

148 
∫d_bôs
->
a˘ive_•ecs
 |(1 << 
idx
);

150 
∫d_bôs
->
•ecs
[
idx
].
off£t
 = offset;

160 
∫d_bôs
->
•ecs
[
idx
].
™dMask
 = 
	`ht⁄l
(~(
mask0
 | 
maskRnd
));

164 
∫d_bôs
->
•ecs
[
idx
].
‹Mask
 = 
	`ht⁄l
(
mask1
);

173 
∫d_bôs
->
•ecs
[
idx
].
∫dMask
 = 
	`ht⁄l
(
maskRnd
);

175 
Àave
:

176  
∫d_bôs
->
a˘ive_•ecs
;

177 
	}
}

193 
	$pktgí_∫d_bôs_≠∂y
(
p‹t_öfo_t
 *
öfo
,

194 
πe_mbuf
 **
pkts
,

195 
size_t
 
˙t
,

196 
∫d_bôs_t
 *
rbôs
)

198 
∫d_bôs_t
 *
∫d_bôs
;

199 
size_t
 
mbuf_˙t
;

200 
uöt32_t
 
a˘ive_•ecs
;

201 
uöt32_t
 *
pkt_d©a
;

202 
BITFIELD_T
 
∫d_vÆue
;

203 
bf_•ec_t
 *
bf_•ec
;

206 
∫d_bôs
 = (
rbôs
Ë?Ñbô†: 
öfo
->
∫d_bôfõlds
;

207 i‡((
a˘ive_•ecs
 = 
∫d_bôs
->active_specs) == 0)

210 
mbuf_˙t
 = 0; mbuf_˙à< 
˙t
; ++mbuf_cnt) {

211 
bf_•ec
 = 
∫d_bôs
->
•ecs
;

213 
a˘ive_•ecs
 > 0) {

214 i‡(
	`likñy
(
a˘ive_•ecs
 & 1) ) {

217 
pkt_d©a
 = (
uöt32_t
 *)(&
	`πe_pktmbuf_mtod
(
pkts
[
mbuf_˙t
], 
uöt8_t
 *)[
bf_•ec
->
off£t
]);

219 *
pkt_d©a
 &
bf_•ec
->
™dMask
;

220 *
pkt_d©a
 |
bf_•ec
->
‹Mask
;

222 i‡(
bf_•ec
->
∫dMask
) {

223 #ifde‡
TESTING


225 
∫d_vÆue
 = 
_∫d_func
 ? 
	`_∫d_func
() :

226 
	`pktgí_deÁu…_∫d_func
();

229 
∫d_vÆue
 = 
	`pktgí_deÁu…_∫d_func
();

231 
∫d_vÆue
 &
bf_•ec
->
∫dMask
;

232 *
pkt_d©a
 |
∫d_vÆue
;

236 ++
bf_•ec
;

237 
a˘ive_•ecs
 >>= 1;

240 
a˘ive_•ecs
 = 
∫d_bôs
->active_specs;

242 
	}
}

256 
	$pktgí_∑ge_øndom_bôfõlds
(
uöt32_t
 
¥öt_œbñs
,

257 
uöt16_t
 
pid
,

258 
∫d_bôs_t
 *
∫d_bôs
)

260 
uöt32_t
 
row
, 
bômask_idx
, 
i
, 
cuº_bô
;

261 
mask
[36];

262 
bf_•ec_t
 *
cuº_•ec
;

264 i‡(!
¥öt_œbñs
)

267 
mask
[35] = '\0';

268 
mask
[8] = mask[17] = mask[26] = ' ';

270 
	`di•œy_t›löe
("<Random bitfield Page>");

272 
	`s¸n_¥ötf
(1, 3, "P‹à%d", 
pid
);

274 
row
 = 
PORT_STATE_ROW
;

276 i‡(
∫d_bôs
 =
NULL
) {

277 
	`s¸n_˝rötf
(

279 
this_s¸n
->
ncﬁs
,

281 
row
 = 28;

282 
Àave
;

285 
	`s¸n_¥ötf
(

286 
row
++,

294 
bômask_idx
 = 0; bômask_idx < 
MAX_RND_BITFIELDS
; ++bitmask_idx) {

295 
cuº_•ec
 = &
∫d_bôs
->
•ecs
[
bômask_idx
];

297 
	`mem£t
(
mask
, 0, (mask));

298 
	`mem£t
(
mask
, ' ', (mask) - 1);

300 
i
 = 0; i < 
MAX_BITFIELD_SIZE
; ++i) {

301 
cuº_bô
 = (
uöt32_t
)1 << (
MAX_BITFIELD_SIZE
 - 
i
 - 1);

306 
mask
[
i
 + (i >> 3)] =

307 ((
	`¡ohl
(
cuº_•ec
->
∫dMask
Ë& 
cuº_bô
) != 0) ? 'X' :

308 ((
	`¡ohl
(
cuº_•ec
->
™dMask
Ë& 
cuº_bô
) == 0) ? '0' :

309 ((
	`¡ohl
(
cuº_•ec
->
‹Mask
Ë& 
cuº_bô
) != 0) ? '1' : '.';

312 
	`s¸n_¥ötf
(
row
++, 1, "%8d %8d %7s %s",

313 
bômask_idx
, 
cuº_•ec
->
off£t
,

314 (
∫d_bôs
->
a˘ive_•ecs
 & (1 << 
bômask_idx
)) ? "Yes" : "No",

315 
mask
);

318 
Àave
:

319 
	`di•œy_dashlöe
(++
row
);

320 
	}
}

323 
	$pktgí_öô_deÁu…_∫d
()

325 
FILE
 *
dev_øndom
;

326 
ªt
;

328 i‡((
dev_øndom
 = 
	`f›í
("/dev/uøndom", "r")Ë=
NULL
) {

329 
	`pktgí_log_îr‹
("CouldÇot open /dev/urandom forÑeading");

334 
ªt
 = 
	`‰ód
(
x‹_°©e
, 1, (x‹_°©e[0]), 
dev_øndom
);

335 i‡(
ªt
 !(
x‹_°©e
[0]))

336 
	`pktgí_log_w¨nög
(

337 "CouldÇŸÑódÉnoughÑ™dom d©®f‹ PRNG sìd (%d)", 
ªt
);

339 
	`f˛o£
(
dev_øndom
);

340 
	}
}

342 #ifde‡
TESTING


356 
∫d_func_t


357 
	$pktgí_£t_∫d_func
(
∫d_func_t
 
∫d_func
)

359 
∫d_func_t
 
¥ev_∫d_func
 = 
_∫d_func
;

361 
_∫d_func
 = 
∫d_func
;

363  
¥ev_∫d_func
;

364 
	}
}

	@app/pktgen-random.h

8 #i‚de‡
_PKTGEN_RANDOM_H_


9 
	#_PKTGEN_RANDOM_H_


	)

11 
	~<°döt.h
>

13 
	~<πe_mbuf.h
>

15 
	~"pktgí-£q.h
"

17 #ifde‡
__˝lu•lus


22 
	#MAX_RND_BITFIELDS
 32

	)

24 
	#BITFIELD_T
 
uöt32_t


	)

25 
	#MAX_BITFIELD_SIZE
 ((
BITFIELD_T
Ë<< 3)

	)

27 
p‹t_öfo_s
;

30 
	sbf_•ec_s
 {

31 
uöt8_t
 
off£t
;

33 
BITFIELD_T
 
™dMask
;

34 
BITFIELD_T
 
‹Mask
;

35 
BITFIELD_T
 
∫dMask
;

36 } 
	tbf_•ec_t
;

38 
	s∫d_bôs_s
 {

39 
uöt32_t
 
a˘ive_•ecs
;

41 
bf_•ec_t
 
•ecs
[
MAX_RND_BITFIELDS
];

42 } 
	t∫d_bôs_t
;

45 
pktgí_∫d_bôs_öô
(
∫d_bôs_s
 **
∫d_bôs
);

48 
uöt32_t
 
pktgí_£t_øndom_bôfõld
(
∫d_bôs_s
 *
∫d_bôs
,

49 
uöt8_t
 
idx
,

50 
uöt8_t
 
off£t
,

51 c⁄° *
mask
);

54 
pktgí_∫d_bôs_≠∂y
(
p‹t_öfo_s
 *
öfo
,

55 
πe_mbuf
 **
pkt
,

56 
size_t
 
˙t
,

57 
∫d_bôs_s
 *
rbôs
);

60 
pktgí_∑ge_øndom_bôfõlds
(
uöt32_t
 
¥öt_œbñs
,

61 
uöt16_t
 
pid
,

62 
∫d_bôs_s
 *
∫d_bôs
);

64 #ifde‡
TESTING


66 
BITFIELD_T
 (*
	t∫d_func_t
)();

67 
∫d_func_t
 
pktgí_£t_∫d_func
‘nd_func_à
∫d_func
);

70 #ifde‡
__˝lu•lus


	@app/pktgen-range.c

8 
	~"pktgí-di•œy.h
"

9 
	~"pktgí-log.h
"

10 
	~"pktgí.h
"

25 
	$pktgí_ønge_˘‹
(
ønge_öfo_t
 *
ønge
, 
pkt_£q_t
 *
pkt
)

27 
pkt
->
ëhTy≥
) {

28 
ETHER_TYPE_IPv4
:

29 
pkt
->
ùPrŸo
) {

30 
PG_IPPROTO_TCP
:

31 
PG_IPPROTO_UDP
:

33 i‡(
pkt
->
dp‹t
 =
PG_IPPROTO_L4_GTPU_PORT
) {

34 i‡(
	`u∆ikñy
(
ønge
->
gçu_ãid_öc
 != 0) ) {

35 
uöt32_t
 
ãid
 = 
pkt
->
gçu_ãid
;

36 
ãid
 +
ønge
->
gçu_ãid_öc
;

37 i‡(
ãid
 < 
ønge
->
gçu_ãid_mö
)

38 
ãid
 = 
ønge
->
gçu_ãid_max
;

39 i‡(
ãid
 > 
ønge
->
gçu_ãid_max
)

40 
ãid
 = 
ønge
->
gçu_ãid_mö
;

41 
pkt
->
gçu_ãid
 = 
ãid
;

43 
pkt
->
gçu_ãid
 = 
ønge
->gtpu_teid;

46 i‡(
	`u∆ikñy
(
ønge
->
§c_p‹t_öc
 != 0) ) {

47 
uöt16_t
 
•‹t
 = 
pkt
->sport;

48 
•‹t
 +
ønge
->
§c_p‹t_öc
;

49 i‡(
•‹t
 < 
ønge
->
§c_p‹t_mö
)

50 
•‹t
 = 
ønge
->
§c_p‹t_max
;

51 i‡(
•‹t
 > 
ønge
->
§c_p‹t_max
)

52 
•‹t
 = 
ønge
->
§c_p‹t_mö
;

53 
pkt
->
•‹t
 = sport;

55 
pkt
->
•‹t
 = 
ønge
->
§c_p‹t
;

57 i‡(
	`u∆ikñy
(
ønge
->
d°_p‹t_öc
 != 0) ) {

58 
uöt16_t
 
dp‹t
 = 
pkt
->dport;

59 
dp‹t
 +
ønge
->
d°_p‹t_öc
;

60 i‡(
dp‹t
 < 
ønge
->
d°_p‹t_mö
)

61 
dp‹t
 = 
ønge
->
d°_p‹t_max
;

62 i‡(
dp‹t
 > 
ønge
->
d°_p‹t_max
)

63 
dp‹t
 = 
ønge
->
d°_p‹t_mö
;

64 
pkt
->
dp‹t
 = dport;

66 
pkt
->
dp‹t
 = 
ønge
->
d°_p‹t
;

68 i‡(
	`u∆ikñy
(
ønge
->
§c_ù_öc
 != 0)) {

69 
uöt32_t
 
p
 = 
pkt
->
ù_§c_addr
.
addr
.
ùv4
.
s_addr
;

70 
p
 +
ønge
->
§c_ù_öc
;

71 i‡(
p
 < 
ønge
->
§c_ù_mö
)

72 
p
 = 
ønge
->
§c_ù_max
;

73 i‡(
p
 > 
ønge
->
§c_ù_max
)

74 
p
 = 
ønge
->
§c_ù_mö
;

75 
pkt
->
ù_§c_addr
.
addr
.
ùv4
.
s_addr
 = 
p
;

77 
pkt
->
ù_§c_addr
.
addr
.
ùv4
.
s_addr
 =

78 
ønge
->
§c_ù
;

80 i‡(
	`u∆ikñy
(
ønge
->
d°_ù_öc
 != 0)) {

81 
uöt32_t
 
p
 = 
pkt
->
ù_d°_addr
.
addr
.
ùv4
.
s_addr
;

82 
p
 +
ønge
->
d°_ù_öc
;

83 i‡(
p
 < 
ønge
->
d°_ù_mö
)

84 
p
 = 
ønge
->
d°_ù_max
;

85 i‡(
p
 > 
ønge
->
d°_ù_max
)

86 
p
 = 
ønge
->
d°_ù_mö
;

87 
pkt
->
ù_d°_addr
.
addr
.
ùv4
.
s_addr
 = 
p
;

89 
pkt
->
ù_d°_addr
.
addr
.
ùv4
.
s_addr
 =

90 
ønge
->
d°_ù
;

92 i‡(
	`u∆ikñy
(
ønge
->
vœn_id_öc
 != 0)) {

95 
uöt32_t
 
p
;

96 
uöt8_t
 
mö_vœn_£t
 = 0;

97 i‡((
pkt
->
vœnid
 =
MIN_VLAN_ID
Ë&& !
mö_vœn_£t
) {

98 
p
 = 0;

99 
mö_vœn_£t
 = 1;

101 
p
 = 
pkt
->
vœnid
;

102 
p
 +
ønge
->
vœn_id_öc
;

103 i‡(
p
 < 
ønge
->
vœn_id_mö
)

104 
p
 = 
ønge
->
vœn_id_max
;

105 i‡(
p
 > 
ønge
->
vœn_id_max
)

106 
p
 = 
ønge
->
vœn_id_mö
;

107 
pkt
->
vœnid
 = 
p
;

109 
pkt
->
vœnid
 = 
ønge
->
vœn_id
;

111 i‡(
	`u∆ikñy
(
ønge
->
cos_öc
 != 0)) {

112 
uöt32_t
 
p
;

113 
uöt8_t
 
mö_cos_£t
 = 0;

114 i‡((
pkt
->
cos
 =
MIN_COS
Ë&& !
mö_cos_£t
) {

115 
p
 = 0;

116 
mö_cos_£t
 = 1;

118 
p
 = 
pkt
->
cos
;

119 
p
 +
ønge
->
cos_öc
;

120 i‡(
p
 < 
ønge
->
cos_mö
)

121 
p
 = 
ønge
->
cos_max
;

122 i‡(
p
 > 
ønge
->
cos_max
)

123 
p
 = 
ønge
->
cos_mö
;

124 
pkt
->
cos
 = 
p
;

126 
pkt
->
cos
 = 
ønge
->cos;

128 i‡(
	`u∆ikñy
(
ønge
->
tos_öc
 != 0)) {

129 
uöt32_t
 
p
;

130 
uöt8_t
 
mö_tos_£t
 = 0;

131 i‡((
pkt
->
tos
 =
MIN_TOS
Ë&& !
mö_tos_£t
) {

132 
p
 = 0;

133 
mö_tos_£t
 = 1;

135 
p
 = 
pkt
->
tos
;

136 
p
 +
ønge
->
tos_öc
;

137 i‡(
p
 < 
ønge
->
tos_mö
)

138 
p
 = 
ønge
->
tos_max
;

139 i‡(
p
 > 
ønge
->
tos_max
)

140 
p
 = 
ønge
->
tos_mö
;

141 
pkt
->
tos
 = 
p
;

143 
pkt
->
tos
 = 
ønge
->tos;

147 i‡(
	`u∆ikñy
(
ønge
->
pkt_size_öc
 != 0)) {

148 
uöt32_t
 
p
 = 
pkt
->
pktSize
;

149 
p
 +
ønge
->
pkt_size_öc
;

150 i‡(
p
 < 
ønge
->
pkt_size_mö
)

151 
p
 = 
ønge
->
pkt_size_max
;

152 i‡(
p
 > 
ønge
->
pkt_size_max
)

153 
p
 = 
ønge
->
pkt_size_mö
;

154 
pkt
->
pktSize
 = 
p
;

156 
pkt
->
pktSize
 = 
ønge
->
pkt_size
;

158 i‡(
	`u∆ikñy
(
ønge
->
§c_mac_öc
 != 0)) {

159 
uöt64_t
 
p
;

161 
	`öë_mtoh64
(&
pkt
->
ëh_§c_addr
, &
p
);

163 
p
 +
ønge
->
§c_mac_öc
;

164 i‡(
p
 < 
ønge
->
§c_mac_mö
)

165 
p
 = 
ønge
->
§c_mac_max
;

166 i‡(
p
 > 
ønge
->
§c_mac_max
)

167 
p
 = 
ønge
->
§c_mac_mö
;

169 
	`öë_h64tom
(
p
, &
pkt
->
ëh_§c_addr
);

171 
	`öë_h64tom
(
ønge
->
§c_mac
, &
pkt
->
ëh_§c_addr
);

173 i‡(
	`u∆ikñy
(
ønge
->
d°_mac_öc
 != 0)) {

174 
uöt64_t
 
p
;

176 
	`öë_mtoh64
(&
pkt
->
ëh_d°_addr
, &
p
);

178 
p
 +
ønge
->
d°_mac_öc
;

179 i‡(
p
 < 
ønge
->
d°_mac_mö
)

180 
p
 = 
ønge
->
d°_mac_max
;

181 i‡(
p
 > 
ønge
->
d°_mac_max
)

182 
p
 = 
ønge
->
d°_mac_mö
;

184 
	`öë_h64tom
(
p
, &
pkt
->
ëh_d°_addr
);

186 
	`öë_h64tom
(
ønge
->
d°_mac
, &
pkt
->
ëh_d°_addr
);

190 
	`pktgí_log_öfo
("IPv4 ipPrŸÿ%02x", 
pkt
->
ùPrŸo
);

194 
ETHER_TYPE_IPv6
:

195 
pkt
->
ùPrŸo
) {

196 
PG_IPPROTO_UDP
:

197 
PG_IPPROTO_TCP
:

199 
	`pktgí_log_w¨nög
("IPv6 isÇot yet implemented");

202 
	`pktgí_log_öfo
("IPv6 ipPrŸÿ%04x", 
pkt
->
ùPrŸo
);

207 
	`pktgí_log_öfo
("ëhTy≥ %04x", 
pkt
->
ëhTy≥
);

210 
	}
}

225 
	$pktgí_¥öt_ønge
()

227 
p‹t_öfo_t
 *
öfo
;

228 
ønge_öfo_t
 *
ønge
;

229 
uöt32_t
 
pid
, 
cﬁ
, 
•
;

230 
buff
[32];

231 
öt32_t
 
row
;

232 
ëhî_addr
 
óddr
;

233 
°r
[64];

235 
	`di•œy_t›löe
("<Range Page>");

236 
	`s¸n_¥ötf
(1, 3, "P‹t†%d-%d o‡%d", 
pktgí
.
°¨tög_p‹t
,

237 (
pktgí
.
ídög_p‹t
 - 1),Öktgí.
nb_p‹ts
);

239 
row
 = 
PORT_STATE_ROW
;

240 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "Port #");

241 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "dst.ip");

242 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, " inc");

243 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, " min");

244 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, " max");

246 
row
++;

247 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "src.ip");

248 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, " inc");

249 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, " min");

250 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, " max");

252 
row
++;

253 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "ip_proto");

255 
row
++;

256 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "dst.port / inc");

257 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, " min / max");

259 
row
++;

260 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "src.port / inc");

261 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, " min / max");

263 
row
++;

264 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "vlan.id / inc");

265 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, " min / max");

267 
row
++;

268 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "cos / inc");

269 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, " min / max");

271 
row
++;

272 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "tos / inc");

273 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, " min / max");

275 
row
++;

276 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "pkt.size / inc");

277 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, " min / max");

279 
row
++;

280 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "dst.mac");

281 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, " inc");

282 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, " min");

283 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, " max");

285 
row
++;

286 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "src.mac");

287 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, " inc");

288 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, " min");

289 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, " max");

291 
row
++;

292 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "gtpu.teid / inc");

293 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, " min / max");

296 
pktgí
.
œ°_row
 = ++
row
;

297 
	`di•œy_dashlöe
(
pktgí
.
œ°_row
);

300 
row
 = 3;Ñow < (
pktgí
.
œ°_row
 - 1);Ñow++)

301 
	`s¸n_¥ötf
(
row
, 
COLUMN_WIDTH_0
 - 1, ":");

303 
•
 = 
pktgí
.
°¨tög_p‹t
;

304 
pid
 = 0;Öid < 
pktgí
.
nb_p‹ts_≥r_∑ge
;Öid++) {

305 i‡(
	`gë_m≠
(
pktgí
.
l2p
, 
pid
 + 
•
, 
RTE_MAX_LCORE
) == 0)

308 
öfo
 = &
pktgí
.öfo[
pid
 + 
•
];

311 
cﬁ
 = (
COLUMN_WIDTH_1
 * 
pid
Ë+ 
COLUMN_WIDTH_0
;

312 
row
 = 
PORT_STATE_ROW
;

315 
	`¢¥ötf
(
buff
, (buff), "P‹t-%d", 
pid
 + 
•
);

316 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
buff
);

318 
ønge
 = &
öfo
->range;

319 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
,

320 
	`öë_¡›4
(
buff
, (buff),

321 
	`ht⁄l
(
ønge
->
d°_ù
),

323 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
,

324 
	`öë_¡›4
(
buff
, (buff),

325 
	`ht⁄l
(
ønge
->
d°_ù_öc
),

327 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
,

328 
	`öë_¡›4
(
buff
, (buff),

329 
	`ht⁄l
(
ønge
->
d°_ù_mö
),

331 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
,

332 
	`öë_¡›4
(
buff
, (buff),

333 
	`ht⁄l
(
ønge
->
d°_ù_max
),

336 
row
++;

337 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
,

338 
	`öë_¡›4
(
buff
, (buff),

339 
	`ht⁄l
(
ønge
->
§c_ù
),

341 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
,

342 
	`öë_¡›4
(
buff
, (buff),

343 
	`ht⁄l
(
ønge
->
§c_ù_öc
),

345 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
,

346 
	`öë_¡›4
(
buff
, (buff),

347 
	`ht⁄l
(
ønge
->
§c_ù_mö
),

349 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
,

350 
	`öë_¡›4
(
buff
, (buff),

351 
	`ht⁄l
(
ønge
->
§c_ù_max
),

354 
row
++;

355 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
,

356 (
ønge
->
ù_¥Ÿo
 =
PG_IPPROTO_TCP
) ? "TCP" : "UDP");

358 
row
++;

359 
	`¢¥ötf
(
°r
,

360 (
°r
),

362 
ønge
->
d°_p‹t
,

363 
ønge
->
d°_p‹t_öc
);

364 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
°r
);

365 
	`¢¥ötf
(
°r
,

366 (
°r
),

368 
ønge
->
d°_p‹t_mö
,

369 
ønge
->
d°_p‹t_max
);

370 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
°r
);

372 
row
++;

373 
	`¢¥ötf
(
°r
,

374 (
°r
),

376 
ønge
->
§c_p‹t
,

377 
ønge
->
§c_p‹t_öc
);

378 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
°r
);

379 
	`¢¥ötf
(
°r
,

380 (
°r
),

382 
ønge
->
§c_p‹t_mö
,

383 
ønge
->
§c_p‹t_max
);

384 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
°r
);

386 
row
++;

387 
	`¢¥ötf
(
°r
,

388 (
°r
),

390 
ønge
->
vœn_id
,

391 
ønge
->
vœn_id_öc
);

392 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
°r
);

393 
	`¢¥ötf
(
°r
,

394 (
°r
),

396 
ønge
->
vœn_id_mö
,

397 
ønge
->
vœn_id_max
);

398 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
°r
);

400 
row
++;

401 
	`¢¥ötf
(
°r
,

402 (
°r
),

404 
ønge
->
cos
,

405 
ønge
->
cos_öc
);

406 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
°r
);

407 
	`¢¥ötf
(
°r
,

408 (
°r
),

410 
ønge
->
cos_mö
,

411 
ønge
->
cos_max
);

412 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
°r
);

414 
row
++;

415 
	`¢¥ötf
(
°r
,

416 (
°r
),

418 
ønge
->
tos
,

419 
ønge
->
tos_öc
);

420 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
°r
);

421 
	`¢¥ötf
(
°r
,

422 (
°r
),

424 
ønge
->
tos_mö
,

425 
ønge
->
tos_max
);

426 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
°r
);

429 
row
++;

430 
	`¢¥ötf
(
°r
,

431 (
°r
),

433 
ønge
->
pkt_size
 + 
FCS_SIZE
,

434 
ønge
->
pkt_size_öc
);

435 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
°r
);

436 
	`¢¥ötf
(
°r
,

437 (
°r
),

439 
ønge
->
pkt_size_mö
 + 
FCS_SIZE
,

440 
ønge
->
pkt_size_max
 + 
FCS_SIZE
);

441 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
°r
);

443 
row
++;

444 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
,

445 
	`öë_mtﬂ
(
buff
, (buff),

446 
	`öë_h64tom
(
ønge
->
d°_mac
, &
óddr
)));

447 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
,

448 
	`öë_mtﬂ
(
buff
, (buff),

449 
	`öë_h64tom
(
ønge
->
d°_mac_öc
,

450 &
óddr
)));

451 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
,

452 
	`öë_mtﬂ
(
buff
, (buff),

453 
	`öë_h64tom
(
ønge
->
d°_mac_mö
,

454 &
óddr
)));

455 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
,

456 
	`öë_mtﬂ
(
buff
, (buff),

457 
	`öë_h64tom
(
ønge
->
d°_mac_max
,

458 &
óddr
)));

460 
row
++;

461 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
,

462 
	`öë_mtﬂ
(
buff
, (buff),

463 
	`öë_h64tom
(
ønge
->
§c_mac
, &
óddr
)));

464 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
,

465 
	`öë_mtﬂ
(
buff
, (buff),

466 
	`öë_h64tom
(
ønge
->
§c_mac_öc
,

467 &
óddr
)));

468 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
,

469 
	`öë_mtﬂ
(
buff
, (buff),

470 
	`öë_h64tom
(
ønge
->
§c_mac_mö
,

471 &
óddr
)));

472 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
,

473 
	`öë_mtﬂ
(
buff
, (buff),

474 
	`öë_h64tom
(
ønge
->
§c_mac_max
,

475 &
óddr
)));

477 
row
++;

478 
	`¢¥ötf
(
°r
,

479 (
°r
),

481 
ønge
->
gçu_ãid
,

482 
ønge
->
gçu_ãid_öc
);

483 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
°r
);

484 
	`¢¥ötf
(
°r
,

485 (
°r
),

487 
ønge
->
gçu_ãid_mö
,

488 
ønge
->
gçu_ãid_max
);

489 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
°r
);

492 
pktgí
.
Êags
 &~
PRINT_LABELS_FLAG
;

493 
	}
}

508 
	$pktgí_∑ge_ønge
()

510 i‡(
pktgí
.
Êags
 & 
PRINT_LABELS_FLAG
)

511 
	`pktgí_¥öt_ønge
();

512 
	}
}

527 
	$pktgí_ønge_£tup
(
p‹t_öfo_t
 *
öfo
)

529 
ønge_öfo_t
 *
ønge
 = &
öfo
->range;

531 
ønge
->
d°_ù
 = 
	`IPv4
(192, 168, 
öfo
->
pid
 + 1, 1);

532 
ønge
->
d°_ù_mö
 = 
	`IPv4
(192, 168, 
öfo
->
pid
 + 1, 1);

533 
ønge
->
d°_ù_max
 = 
	`IPv4
(192, 168, 
öfo
->
pid
 + 1, 254);

534 
ønge
->
d°_ù_öc
 = 0x00000001;

536 
ønge
->
§c_ù
 = 
	`IPv4
(192, 168, 
öfo
->
pid
, 1);

537 
ønge
->
§c_ù_mö
 = 
	`IPv4
(192, 168, 
öfo
->
pid
, 1);

538 
ønge
->
§c_ù_max
 = 
	`IPv4
(192, 168, 
öfo
->
pid
, 254);

539 
ønge
->
§c_ù_öc
 = 0x00000000;

541 
ønge
->
ù_¥Ÿo
 = 
PG_IPPROTO_TCP
;

543 
ønge
->
d°_p‹t
 = (
öfo
->
pid
 << 8);

544 
ønge
->
d°_p‹t_öc
 = 0x0001;

545 
ønge
->
d°_p‹t_mö
 =Ñ™ge->
d°_p‹t
 + 0;

546 
ønge
->
d°_p‹t_max
 =Ñ™ge->
d°_p‹t
 + 254;

548 
ønge
->
§c_p‹t
 = (
öfo
->
pid
 << 8);

549 
ønge
->
§c_p‹t_öc
 = 0x0001;

550 
ønge
->
§c_p‹t_mö
 =Ñ™ge->
§c_p‹t
 + 0;

551 
ønge
->
§c_p‹t_max
 =Ñ™ge->
§c_p‹t
 + 254;

553 
ønge
->
vœn_id
 = 
öfo
->
vœnid
;

554 
ønge
->
vœn_id_öc
 = 0;

555 
ønge
->
vœn_id_mö
 = 
MIN_VLAN_ID
;

556 
ønge
->
vœn_id_max
 = 
MAX_VLAN_ID
;

558 
ønge
->
cos
 = 
öfo
->cos;

559 
ønge
->
cos_öc
 = 0;

560 
ønge
->
cos_mö
 = 
MIN_COS
;

561 
ønge
->
cos_max
 = 
MAX_COS
;

563 
ønge
->
tos
 = 
öfo
->tos;

564 
ønge
->
tos_öc
 = 0;

565 
ønge
->
tos_mö
 = 
MIN_TOS
;

566 
ønge
->
tos_max
 = 
MAX_TOS
;

568 
ønge
->
pkt_size
 = 
MIN_PKT_SIZE
;

569 
ønge
->
pkt_size_öc
 = 0;

570 
ønge
->
pkt_size_mö
 = 
MIN_PKT_SIZE
;

571 
ønge
->
pkt_size_max
 = 
MAX_PKT_SIZE
;

573 
öfo
->
£q_pkt
[
RANGE_PKT
].
pktSize
 = 
MIN_PKT_SIZE
;

575 
	`öë_mtoh64
(&
öfo
->
£q_pkt
[
SINGLE_PKT
].
ëh_d°_addr
, &
ønge
->
d°_mac
);

576 
	`mem£t
(&
ønge
->
d°_mac_öc
, 0, (range->dst_mac_inc));

577 
	`mem£t
(&
ønge
->
d°_mac_mö
, 0, (range->dst_mac_min));

578 
	`mem£t
(&
ønge
->
d°_mac_max
, 0, (range->dst_mac_max));

580 
	`öë_mtoh64
(&
öfo
->
£q_pkt
[
SINGLE_PKT
].
ëh_§c_addr
, &
ønge
->
§c_mac
);

581 
	`mem£t
(&
ønge
->
§c_mac_öc
, 0, (range->src_mac_inc));

582 
	`mem£t
(&
ønge
->
§c_mac_mö
, 0, (range->src_mac_min));

583 
	`mem£t
(&
ønge
->
§c_mac_max
, 0, (range->src_mac_max));

584 
	}
}

	@app/pktgen-range.h

8 #i‚de‡
_PKTGEN_RANGE_H_


9 
	#_PKTGEN_RANGE_H_


	)

11 
	~<°döt.h
>

13 
	~"pktgí-£q.h
"

15 #ifde‡
__˝lu•lus


19 
	sønge_öfo_s
 {

20 
uöt32_t
 
§c_ù_öc
;

21 
uöt32_t
 
d°_ù_öc
;

22 
uöt16_t
 
§c_p‹t_öc
;

23 
uöt16_t
 
d°_p‹t_öc
;

24 
uöt16_t
 
vœn_id_öc
;

25 
uöt16_t
 
tos_öc
;

26 
uöt16_t
 
cos_öc
;

27 
uöt16_t
 
pkt_size_öc
;

28 
uöt64_t
 
§c_mac_öc
;

29 
uöt64_t
 
d°_mac_öc
;

31 
uöt32_t
 
§c_ù
;

32 
uöt32_t
 
§c_ù_mö
;

33 
uöt32_t
 
§c_ù_max
;

35 
uöt32_t
 
d°_ù
;

36 
uöt32_t
 
d°_ù_mö
;

37 
uöt32_t
 
d°_ù_max
;

39 
uöt16_t
 
ù_¥Ÿo
;

41 
uöt16_t
 
§c_p‹t
;

42 
uöt16_t
 
§c_p‹t_mö
;

43 
uöt16_t
 
§c_p‹t_max
;

45 
uöt16_t
 
d°_p‹t
;

46 
uöt16_t
 
d°_p‹t_mö
;

47 
uöt16_t
 
d°_p‹t_max
;

49 
uöt16_t
 
vœn_id
;

50 
uöt16_t
 
vœn_id_mö
;

51 
uöt16_t
 
vœn_id_max
;

53 
uöt8_t
 
cos
;

54 
uöt8_t
 
cos_mö
;

55 
uöt8_t
 
cos_max
;

57 
uöt8_t
 
tos
;

58 
uöt8_t
 
tos_mö
;

59 
uöt8_t
 
tos_max
;

61 
uöt16_t
 
pkt_size
;

62 
uöt16_t
 
pkt_size_mö
;

63 
uöt16_t
 
pkt_size_max
;

65 
uöt64_t
 
d°_mac
;

66 
uöt64_t
 
d°_mac_mö
;

67 
uöt64_t
 
d°_mac_max
;

69 
uöt64_t
 
§c_mac
;

70 
uöt64_t
 
§c_mac_mö
;

71 
uöt64_t
 
§c_mac_max
;

73 
uöt32_t
 
gçu_ãid
;

74 
uöt32_t
 
gçu_ãid_öc
;

75 
uöt32_t
 
gçu_ãid_mö
;

76 
uöt32_t
 
gçu_ãid_max
;

77 } 
	tønge_öfo_t
;

79 
p‹t_öfo_s
;

81 
pktgí_ønge_˘‹
(
ønge_öfo_t
 *
ønge
, 
pkt_£q_t
 *
pkt
);

82 
pktgí_ønge_£tup
(
p‹t_öfo_s
 *
öfo
);

83 
pktgí_∑ge_ønge
();

85 #ifde‡
__˝lu•lus


	@app/pktgen-seq.c

8 
	~"pktgí-di•œy.h
"

9 
	~"pktgí.h
"

12 
	$pktgí_£nd_£q_pkt
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
£q_idx
)

14 ()
öfo
;

15 ()
£q_idx
;

16 
	}
}

31 
	$pktgí_∑ge_£q
(
uöt32_t
 
pid
)

33 
uöt32_t
 
i
, 
row
, 
cﬁ
;

34 
p‹t_öfo_t
 *
öfo
;

35 
pkt_£q_t
 *
pkt
;

36 
buff
[64];

38 
	`di•œy_t›löe
("<Sequence Page>");

40 
öfo
 = &
pktgí
.öfo[
pid
];

42 
row
 = 
PORT_STATE_ROW
;

43 
cﬁ
 = 1;

44 
	`s¸n_¥ötf
(
row
, 
cﬁ
, "Port: %2d, Sequence Count: %2d of %2d ",

45 
pid
, 
öfo
->
£qC¡
, 
NUM_SEQ_PKTS
);

46 
	`s¸n_fgcﬁ‹
(
SCRN_BLUE
, 
SCRN_BOLD
);

47 
	`s¸n_¥ötf
(
row
++, 
cﬁ
 + 111, "GTPu");

48 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s %*s%*s%*s%*s%*s%*s%*s%*s%*s%*s",

60 
	`s¸n_fgcﬁ‹
(
SCRN_DEFAULT_FG
, 
SCRN_NO_ATTR
);

61 
i
 = 0; i < 
NUM_SEQ_PKTS
; i++) {

62 
pkt
 = &
öfo
->
£q_pkt
[
i
];

64 i‡(
i
 >
öfo
->
£qC¡
) {

65 
	`s¸n_eﬁ_pos
(
row
++, 
cﬁ
);

69 
cﬁ
 = 1;

70 
	`s¸n_¥ötf
(
row
, 
cﬁ
, "%c%4d:", 
pkt
->
£q_íabÀd
 ? '*' : ' ', 
i
);

71 
cﬁ
 += 7;

73 
	`s¸n_¥ötf
(
row
, 
cﬁ
, "%*s", 18,

74 
	`öë_mtﬂ
(
buff
, (buff),

75 &
pkt
->
ëh_d°_addr
));

76 
cﬁ
 += 18;

78 
	`s¸n_¥ötf
(
row
, 
cﬁ
, "%*s", 18,

79 
	`öë_mtﬂ
(
buff
, (buff),

80 &
pkt
->
ëh_§c_addr
));

81 
cﬁ
 += 18;

83 
	`s¸n_¥ötf
(
row
, 
cﬁ
, "%*s", 16,

84 
	`öë_¡›4
(
buff
, (buff),

85 
	`ht⁄l
(
pkt
->
ù_d°_addr
.
addr
.
ùv4
.
s_addr
),

87 
cﬁ
 += 16;

89 
	`s¸n_¥ötf
(
row
, 
cﬁ
, "%*s", 16 + 2,

90 
	`öë_¡›4
(
buff
, (buff),

91 
	`ht⁄l
(
pkt
->
ù_§c_addr
.
addr
.
ùv4
.
s_addr
),

92 
pkt
->
ù_mask
));

93 
cﬁ
 += 18;

95 
	`¢¥ötf
(
buff
, (buff), "%d/%d", 
pkt
->
•‹t
,Ökt->
dp‹t
);

96 
	`s¸n_¥ötf
(
row
, 
cﬁ
, "%*s", 12, 
buff
);

97 
cﬁ
 += 12;

99 
	`¢¥ötf
(
buff
, (buff), "%s/%s:%04x",

100 (
pkt
->
ëhTy≥
 =
ETHER_TYPE_IPv4
) ? "IPv4" :

101 (
pkt
->
ëhTy≥
 =
ETHER_TYPE_IPv6
) ? "IPv6" : "Other",

102 (
pkt
->
ùPrŸo
 =
PG_IPPROTO_TCP
) ? "TCP" :

103 (
pkt
->
ùPrŸo
 =
PG_IPPROTO_ICMP
) ? "ICMP" : "UDP",

104 
pkt
->
vœnid
);

105 
	`s¸n_¥ötf
(
row
, 
cﬁ
, "%*s", 14, 
buff
);

106 
cﬁ
 += 14;

108 
	`s¸n_¥ötf
(
row
, 
cﬁ
, "%3d", 
pkt
->
cos
);

109 
cﬁ
 += 4;

111 
	`s¸n_¥ötf
(
row
, 
cﬁ
, "%3d", 
pkt
->
tos
);

112 
cﬁ
 += 4;

114 
	`s¸n_¥ötf
(
row
, 
cﬁ
, "%5d", 
pkt
->
pktSize
 + 
FCS_SIZE
);

115 
cﬁ
 += 6;

117 
	`s¸n_¥ötf
(
row
, 
cﬁ
, "%5d", 
pkt
->
gçu_ãid
);

118 
row
++;

121 
	`di•œy_dashlöe
(
row
 + 2);

122 
	}
}

	@app/pktgen-seq.h

8 #i‚de‡
_PKTGEN_SEQ_H_


9 
	#_PKTGEN_SEQ_H_


	)

11 
	~<πe_ëhî.h
>

12 
	~<cmdlöe_∑r£.h
>

13 
	~<cmdlöe_∑r£_ùaddr.h
>

14 
	~<pg_öë.h
>

16 
	~"pktgí-c⁄°™ts.h
"

18 #ifde‡
__˝lu•lus


22 
__exãnsi⁄__


23 *
	tMARKER
[0];

25 
	spkt_£q_s
 {

27 
ëhî_addr
 
ëh_d°_addr
;

28 
ëhî_addr
 
ëh_§c_addr
;

30 
cmdlöe_ùaddr
 
ù_§c_addr
;

31 
cmdlöe_ùaddr
 
ù_d°_addr
;

32 
uöt32_t
 
ù_mask
;

34 
uöt16_t
 
•‹t
;

35 
uöt16_t
 
dp‹t
;

36 
uöt16_t
 
ëhTy≥
;

37 
uöt16_t
 
ùPrŸo
;

38 
uöt16_t
 
vœnid
;

39 
uöt8_t
 
cos
;

40 
uöt8_t
 
tos
;

41 
uöt16_t
 
ëhî_hdr_size
;

43 
uöt32_t
 
m∂s_íåy
;

44 
uöt16_t
 
qöq_ouãrid
;

45 
uöt16_t
 
qöq_ö√rid
;

46 
uöt32_t
 
gª_key
;

48 
uöt16_t
 
pktSize
;

49 
uöt16_t
 
∑d0
;

50 
uöt32_t
 
gçu_ãid
;

51 
uöt8_t
 
£q_íabÀd
;

53 
pkt_hdr_t
 
hdr
 
__πe_ˇche_Æig√d
;

54 
uöt8_t
 
∑d
[
MBUF_SIZE
 - (
pkt_hdr_t
)];

55 } 
	tpkt_£q_t
 
	t__πe_ˇche_Æig√d
;

57 
p‹t_öfo_s
;

59 
pktgí_£nd_£q_pkt
(
p‹t_öfo_s
 *
öfo
, 
uöt32_t
 
£q_idx
);

61 
pktgí_∑ge_£q
(
uöt32_t
 
pid
);

63 #ifde‡
__˝lu•lus


	@app/pktgen-stats.c

9 
	~<°dio.h
>

11 
	~"pktgí-cmds.h
"

12 
	~"pktgí-di•œy.h
"

14 
	~"pktgí.h
"

16 #i‡
RTE_VERSION
 >
RTE_VERSION_NUM
(17, 11, 0, 0)

17 
	~<πe_bus_pci.h
>

33 
	$pktgí_¥öt_°©ic_d©a
()

35 
p‹t_öfo_t
 *
öfo
;

36 
πe_ëh_dev_öfo
 
dev
;

37 
uöt32_t
 
pid
, 
cﬁ
, 
row
, 
•
, 
ù_row
;

38 
pkt_£q_t
 *
pkt
;

39 
buff
[32];

40 
di•œy_˙t
;

42 
	`pktgí_di•œy_£t_cﬁ‹
("top.page");

43 
	`di•œy_t›löe
("<Main Page>");

45 
	`pktgí_di•œy_£t_cﬁ‹
("top.ports");

46 
	`s¸n_¥ötf
(1, 3, "P‹t†%d-%d o‡%d", 
pktgí
.
°¨tög_p‹t
,

47 (
pktgí
.
ídög_p‹t
 - 1),Öktgí.
nb_p‹ts
);

49 
row
 = 
PORT_STATE_ROW
;

50 
	`pktgí_di•œy_£t_cﬁ‹
("stats.port.label");

51 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, " Flags:Port");

54 
	`pktgí_di•œy_£t_cﬁ‹
("stats.dyn.label");

55 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "Link State");

56 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "Pkts/s Max/Rx");

57 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, " Max/Tx");

58 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "MBits/s Rx/Tx");

60 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "Broadcast");

61 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "Multicast");

62 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, " 64 Bytes");

63 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, " 65-127");

64 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, " 128-255");

65 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, " 256-511");

66 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, " 512-1023");

67 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, " 1024-1518");

68 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "Runts/Jumbos");

70 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "Errors Rx/Tx");

71 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "Total Rx Pkts");

72 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, " Tx Pkts");

73 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, " Rx MBs");

74 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, " Tx MBs");

75 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "ARP/ICMP Pkts");

77 i‡(
pktgí
.
Êags
 & 
TX_DEBUG_FLAG
) {

78 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "Tx Overrun");

79 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "CyclesÖer Tx");

81 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "Missed Rx");

82 #i‡
RTE_VERSION
 < 
	`RTE_VERSION_NUM
(2, 2, 0, 0)

83 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "Bad CRC Rx");

84 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "Bad Len Rx");

86 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "mcasts Rx");

87 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "No Mbuf Rx");

91 
	`pktgí_di•œy_£t_cﬁ‹
("stats.stat.label");

92 
ù_row
 = ++
row
;

93 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "Pattern Type");

94 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "Tx Count/% Rate");

95 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "PktSize/Tx Burst");

96 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "Src/Dest Port");

97 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "Pkt Type:VLAN ID");

98 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "802.1p CoS");

99 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "ToS Value:");

100 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, " - DSCP value");

101 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, " - IPP value");

102 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "Dst IP Address");

103 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "Src IP Address");

104 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "Dst MAC Address");

105 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "Src MAC Address");

106 
	`s¸n_¥ötf
(
row
++, 1, "%-*s", 
COLUMN_WIDTH_0
, "VendID/PCI Addr");

107 
row
++;

110 
pktgí
.
œ°_row
 = ++
row
;

111 
	`di•œy_dashlöe
(
pktgí
.
œ°_row
);

114 
	`pktgí_di•œy_£t_cﬁ‹
("stats.colon");

115 
row
 = 
PORT_STATE_ROW
;Ñow < ((
ù_row
 + 
IP_ADDR_ROWS
+4) - 2);Ñow++)

116 
	`s¸n_¥ötf
(
row
, 
COLUMN_WIDTH_0
 - 1, ":");

118 
	`pktgí_di•œy_£t_cﬁ‹
("stats.stat.values");

119 
•
 = 
pktgí
.
°¨tög_p‹t
;

120 
di•œy_˙t
 = 0;

121 
pid
 = 0;Öid < 
pktgí
.
nb_p‹ts_≥r_∑ge
;Öid++) {

122 i‡(
	`gë_m≠
(
pktgí
.
l2p
, 
pid
 + 
•
, 
RTE_MAX_LCORE
) == 0)

125 
öfo
 = &
pktgí
.öfo[
pid
 + 
•
];

127 
pkt
 = &
öfo
->
£q_pkt
[
SINGLE_PKT
];

130 
cﬁ
 = (
COLUMN_WIDTH_1
 * 
pid
Ë+ 
COLUMN_WIDTH_0
;

131 
row
 = 
ù_row
;

133 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
,

134 (
öfo
->
fûl_∑âîn_ty≥
 =
ABC_FILL_PATTERN
) ? "abcd..." :

135 (
öfo
->
fûl_∑âîn_ty≥
 =
NO_FILL_PATTERN
) ? "None" :

136 (
öfo
->
fûl_∑âîn_ty≥
 =
ZERO_FILL_PATTERN
) ? "Zero" :

137 
öfo
->
u£r_∑âîn
);

138 
	`pktgí_å™smô_cou¡_øã
(
pid
, 
buff
, (buff));

139 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
buff
);

141 
	`¢¥ötf
(
buff
, (buff), "%d /%5d", 
pkt
->
pktSize
 + 
FCS_SIZE
, 
öfo
->
tx_bur°
);

142 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
buff
);

143 
	`¢¥ötf
(
buff
, (buff), "%d /%5d", 
pkt
->
•‹t
,Ökt->
dp‹t
);

144 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
buff
);

145 
	`¢¥ötf
(
buff
, (buff), "%s / %s:%04x",

146 (
pkt
->
ëhTy≥
 =
ETHER_TYPE_IPv4
) ? "IPv4" :

147 (
pkt
->
ëhTy≥
 =
ETHER_TYPE_IPv6
) ? "IPv6" :

148 (
pkt
->
ëhTy≥
 =
ETHER_TYPE_ARP
) ? "ARP" : "Other",

149 (
pkt
->
ùPrŸo
 =
PG_IPPROTO_TCP
) ? "TCP" :

150 (
pkt
->
ùPrŸo
 =
PG_IPPROTO_ICMP
) ? "ICMP" : "UDP",

151 
pkt
->
vœnid
);

152 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
buff
);

154 
	`¢¥ötf
(
buff
, (buff), "%d", (
pkt
->
cos
));

155 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
buff
);

157 
	`¢¥ötf
(
buff
, (buff), "%d", 
pkt
->
tos
);

158 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
buff
);

160 
	`¢¥ötf
(
buff
, (buff), "%d", (
pkt
->
tos
 >> 2));

161 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
buff
);

163 
	`¢¥ötf
(
buff
, (buff), "%d", (
pkt
->
tos
 >> 5));

164 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
buff
);

166 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
,

167 
	`öë_¡›4
(
buff
, (buff),

168 
	`ht⁄l
(
pkt
->
ù_d°_addr
.
addr
.
ùv4
.
s_addr
), 0xFFFFFFFF));

169 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
,

170 
	`öë_¡›4
(
buff
, (buff),

171 
	`ht⁄l
(
pkt
->
ù_§c_addr
.
addr
.
ùv4
.
s_addr
),Ökt->
ù_mask
));

172 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
,

173 
	`öë_mtﬂ
(
buff
, (buff), &
pkt
->
ëh_d°_addr
));

174 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
,

175 
	`öë_mtﬂ
(
buff
, (buff), &
pkt
->
ëh_§c_addr
));

176 
	`πe_ëh_dev_öfo_gë
(
pid
, &
dev
);

177 i‡(
dev
.
pci_dev
)

178 
	`¢¥ötf
(
buff
, (buff), "%04x:%04x/%02x:%02d.%d",

179 
dev
.
pci_dev
->
id
.
víd‹_id
,

180 
dev
.
pci_dev
->
id
.
devi˚_id
,

181 
dev
.
pci_dev
->
addr
.
bus
,

182 
dev
.
pci_dev
->
addr
.
devid
,

183 
dev
.
pci_dev
->
addr
.
fun˘i⁄
);

185 
	`¢¥ötf
(
buff
, (buff), "%04x:%04x/%02x:%02d.%d",

187 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
buff
);

189 
di•œy_˙t
++;

193 
cﬁ
 = (
COLUMN_WIDTH_1
 * 
di•œy_˙t
Ë+ 
COLUMN_WIDTH_0
;

194 
	`pktgí_di•œy_£t_cﬁ‹
("stats.total.label");

195 
	`s¸n_¥ötf
(
LINK_STATE_ROW
, 
cﬁ
, "%*s", 
COLUMN_WIDTH_3
, "----TotalRate----");

196 
	`s¸n_eﬁ
();

197 
	`pktgí_di•œy_£t_cﬁ‹
(
NULL
);

199 
pktgí
.
Êags
 &~
PRINT_LABELS_FLAG
;

200 
	}
}

202 
	#LINK_RETRY
 16

	)

217 
	$pktgí_gë_lök_°©us
(
p‹t_öfo_t
 *
öfo
, 
pid
, 
waô
) {

218 
i
;

221 
i
 = 0; i < 
LINK_RETRY
; i++) {

222 
	`mem£t
(&
öfo
->
lök
, 0, (info->link));

223 
	`πe_ëh_lök_gë_nowaô
(
pid
, &
öfo
->
lök
);

224 i‡(
öfo
->
lök
.
lök_°©us
)

226 i‡(!
waô
)

228 
	`πe_dñay_us
(250000);

231 #i‡
RTE_VERSION
 >
	`RTE_VERSION_NUM
(17,2,0,0)

232 
öfo
->
lök
.
lök_•ìd
 = 
ETH_SPEED_NUM_10G
;

234 
öfo
->
lök
.
lök_•ìd
 = 10000;

236 
öfo
->
lök
.
lök_du∂ex
 = 
ETH_LINK_FULL_DUPLEX
;

237 
	}
}

252 
	$pktgí_∑ge_°©s
()

254 
p‹t_öfo_t
 *
öfo
;

255 
pid
, 
cﬁ
, 
row
;

256 
πe_ëh_°©s
 *
øã
, *
cumm
, *
¥ev
;

257 
•
;

258 
buff
[32];

259 
di•œy_˙t
;

261 i‡(
pktgí
.
Êags
 & 
PRINT_LABELS_FLAG
)

262 
	`pktgí_¥öt_°©ic_d©a
();

264 
cumm
 = &
pktgí
.
cumm_øã_tŸÆs
;

265 
	`mem£t
(
cumm
, 0, (
ëh_°©s_t
));

268 
pid
 = 0;Öid < 
pktgí
.
nb_p‹ts
;Öid++) {

269 i‡(
	`gë_m≠
(
pktgí
.
l2p
, 
pid
, 
RTE_MAX_LCORE
) == 0)

272 
öfo
 = &
pktgí
.öfo[
pid
];

274 
øã
 = &
öfo
->
øã_°©s
;

275 
¥ev
 = &
öfo
->
¥ev_°©s
;

277 
cumm
->
ùackës
 +
øã
->ipackets;

278 
cumm
->
›ackës
 +
øã
->opackets;

279 
cumm
->
ibyãs
 +
øã
->ibytes;

280 
cumm
->
obyãs
 +
øã
->obytes;

281 
cumm
->
õº‹s
 +
øã
->ierrors;

282 
cumm
->
€º‹s
 +
øã
->oerrors;

284 i‡(
cumm
->
ùackës
 > 
pktgí
.
max_tŸÆ_ùackës
)

285 
pktgí
.
max_tŸÆ_ùackës
 = 
cumm
->
ùackës
;

286 i‡(
cumm
->
›ackës
 > 
pktgí
.
max_tŸÆ_›ackës
)

287 
pktgí
.
max_tŸÆ_›ackës
 = 
cumm
->
›ackës
;

289 
cumm
->
imis£d
 +
øã
->imissed;

290 #i‡
RTE_VERSION
 < 
	`RTE_VERSION_NUM
(2, 2, 0, 0)

291 
cumm
->
ibad¸c
 +
øã
->ibadcrc;

292 
cumm
->
ibadÀn
 +
øã
->ibadlen;

294 #i‡
RTE_VERSION
 < 
	`RTE_VERSION_NUM
(16, 4, 0, 0)

295 
cumm
->
imˇ°s
 +
øã
->imcasts;

297 
cumm
->
rx_nombuf
 +
øã
->rx_nombuf;

300 
•
 = 
pktgí
.
°¨tög_p‹t
;

301 
di•œy_˙t
 = 0;

302 
pid
 = 0;Öid < 
pktgí
.
nb_p‹ts_≥r_∑ge
;Öid++) {

303 i‡(
	`gë_m≠
(
pktgí
.
l2p
, 
pid
 + 
•
, 
RTE_MAX_LCORE
) == 0)

306 
öfo
 = &
pktgí
.öfo[
pid
 + 
•
];

309 
cﬁ
 = (
COLUMN_WIDTH_1
 * 
pid
Ë+ 
COLUMN_WIDTH_0
;

310 
row
 = 
PORT_STATE_ROW
;

313 
	`¢¥ötf
(
buff
, (buff), "%s:%d", 
	`pktgí_Êags_°rög
(

314 
öfo
), 
pid
 + 
•
);

315 
	`pktgí_di•œy_£t_cﬁ‹
("stats.port.flags");

316 
	`s¸n_¥ötf
(
row
, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
buff
);

317 
	`pktgí_di•œy_£t_cﬁ‹
(
NULL
);

319 
row
 = 
LINK_STATE_ROW
;

322 
	`pktgí_gë_lök_°©us
(
öfo
, 
pid
 + 
•
, 0);

324 
	`pktgí_lök_°©e
(
pid
 + 
•
, 
buff
, (buff));

325 
	`pktgí_di•œy_£t_cﬁ‹
("stats.port.status");

326 
	`s¸n_¥ötf
(
row
, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
buff
);

327 
	`pktgí_di•œy_£t_cﬁ‹
(
NULL
);

329 
øã
 = &
öfo
->
øã_°©s
;

330 
¥ev
 = &
öfo
->
¥ev_°©s
;

332 
	`pktgí_di•œy_£t_cﬁ‹
("stats.port.data");

334 
row
 = 
LINK_STATE_ROW
 + 1;

335 
	`¢¥ötf
(
buff
, (buff), "%" 
PRIu64
 "/%" PRIu64,

336 
öfo
->
max_ùackës
, 
øã
->
ùackës
);

337 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
buff
);

339 
	`¢¥ötf
(
buff
, (buff), "%" 
PRIu64
 "/%" PRIu64,

340 
öfo
->
max_›ackës
, 
øã
->
›ackës
);

341 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
buff
);

343 
	`¢¥ötf
(
buff
, (buff), "%" 
PRIu64
 "/%" PRIu64,

344 
	`iBôsTŸÆ
(
öfo
->
øã_°©s
Ë/ 
Mûli⁄
,

345 
	`oBôsTŸÆ
(
öfo
->
øã_°©s
Ë/ 
Mûli⁄
);

346 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
buff
);

349 
row
 = 
PKT_SIZE_ROW
;

350 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*Œu", 
COLUMN_WIDTH_1
, 
öfo
->
sizes
.
brﬂdˇ°
);

351 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*Œu", 
COLUMN_WIDTH_1
, 
öfo
->
sizes
.
mu…iˇ°
);

352 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*Œu", 
COLUMN_WIDTH_1
, 
öfo
->
sizes
.
_64
);

353 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*Œu", 
COLUMN_WIDTH_1
, 
öfo
->
sizes
.
_65_127
);

354 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*Œu", 
COLUMN_WIDTH_1
, 
öfo
->
sizes
.
_128_255
);

355 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*Œu", 
COLUMN_WIDTH_1
, 
öfo
->
sizes
.
_256_511
);

356 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*Œu", 
COLUMN_WIDTH_1
, 
öfo
->
sizes
.
_512_1023
);

357 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*Œu", 
COLUMN_WIDTH_1
, 
öfo
->
sizes
.
_1024_1518
);

358 
	`¢¥ötf
(
buff
, (buff), "%" 
PRIu64
 "/%" PRIu64,

359 
öfo
->
sizes
.
ru¡
, info->sizes.
jumbo
);

360 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
buff
);

363 
row
 = 
PKT_TOTALS_ROW
;

364 
	`¢¥ötf
(
buff
, (buff), "%" 
PRIu64
 "/%" PRIu64,

365 
¥ev
->
õº‹s
,Öªv->
€º‹s
);

366 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
buff
);

369 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*Œu", 
COLUMN_WIDTH_1
, 
¥ev
->
ùackës
);

370 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*Œu", 
COLUMN_WIDTH_1
, 
¥ev
->
›ackës
);

373 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*Œu", 
COLUMN_WIDTH_1
, 
	`iBôsTŸÆ
(
öfo
->
¥ev_°©s
Ë/ 
Mûli⁄
);

374 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*Œu", 
COLUMN_WIDTH_1
, 
	`oBôsTŸÆ
(
öfo
->
¥ev_°©s
Ë/ 
Mûli⁄
);

376 
	`¢¥ötf
(
buff
, (buff), "%" 
PRIu64
 "/%" PRIu64,

377 
öfo
->
°©s
.
¨p_pkts
, info->°©s.
echo_pkts
);

378 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
buff
);

380 
	`pktgí_di•œy_£t_cﬁ‹
(
NULL
);

381 i‡(
pktgí
.
Êags
 & 
TX_DEBUG_FLAG
) {

382 
	`¢¥ötf
(
buff
, (buff), "%" 
PRIu64
, 
öfo
->
°©s
.
tx_Áûed
);

383 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
buff
);

384 
	`¢¥ötf
(
buff
, (buff), "%" 
PRIu64
 "/%" PRIu64,

385 
öfo
->
tx_µs
, info->
tx_cy˛es
);

386 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
buff
);

388 
	`¢¥ötf
(
buff
, (buff), "%" 
PRIu64
, 
öfo
->
°©s
.
imis£d
);

389 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
buff
);

390 #i‡
RTE_VERSION
 < 
	`RTE_VERSION_NUM
(2, 2, 0, 0)

391 
	`¢¥ötf
(
buff
, (buff), "%" 
PRIu64
, 
öfo
->
°©s
.
ibad¸c
);

392 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
buff
);

393 
	`¢¥ötf
(
buff
, (buff), "%lu", 
öfo
->
°©s
.
ibadÀn
);

394 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
buff
);

396 #i‡
RTE_VERSION
 < 
	`RTE_VERSION_NUM
(16, 4, 0, 0)

397 
	`¢¥ötf
(
buff
, (buff), "%lu", 
öfo
->
°©s
.
imˇ°s
);

398 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
buff
);

400 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, "None");

402 
	`¢¥ötf
(
buff
, (buff), "%" 
PRIu64
, 
öfo
->
°©s
.
rx_nombuf
);

403 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_1
, 
buff
);

405 
di•œy_˙t
++;

408 
	`pktgí_di•œy_£t_cﬁ‹
("stats.total.data");

411 
cﬁ
 = (
COLUMN_WIDTH_1
 * 
di•œy_˙t
Ë+ 
COLUMN_WIDTH_0
;

412 
row
 = 
LINK_STATE_ROW
 + 1;

413 
	`¢¥ötf
(
buff
, (buff), "%" 
PRIu64
 "/%" PRIu64,

414 
pktgí
.
max_tŸÆ_ùackës
, 
cumm
->
ùackës
);

415 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_3
, 
buff
);

416 
	`s¸n_eﬁ
();

417 
	`¢¥ötf
(
buff
, (buff), "%" 
PRIu64
 "/%" PRIu64,

418 
pktgí
.
max_tŸÆ_›ackës
, 
cumm
->
›ackës
);

419 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_3
, 
buff
);

420 
	`s¸n_eﬁ
();

421 
	`¢¥ötf
(
buff
, (buff), "%" 
PRIu64
 "/%" PRIu64,

422 
	`iBôsTŸÆ
(
pktgí
.
cumm_øã_tŸÆs
Ë/ 
Mûli⁄
,

423 
	`oBôsTŸÆ
(
pktgí
.
cumm_øã_tŸÆs
Ë/ 
Mûli⁄
);

424 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_3
, 
buff
);

425 
	`s¸n_eﬁ
();

426 
	`pktgí_di•œy_£t_cﬁ‹
(
NULL
);

427 
	}
}

442 
	$pktgí_¥o˚ss_°©s
(
πe_timî
 *
tim
 
__πe_unu£d
, *
¨g
 __rte_unused)

444 
pid
;

445 
πe_ëh_°©s
 
°©s
, *
øã
, *
öô
, *
¥ev
;

446 
p‹t_öfo_t
 *
öfo
;

447 
cou¡î
 = 0;

449 
cou¡î
++;

450 i‡(
pktgí
.
Êags
 & 
BLINK_PORTS_FLAG
) {

451 
pid
 = 0;Öid < 
pktgí
.
nb_p‹ts
;Öid++) {

452 i‡–(
pktgí
.
blökli°
 & (1ULL << 
pid
)) == 0)

455 i‡(
cou¡î
 & 1)

456 
	`πe_ëh_Àd_⁄
(
pid
);

458 
	`πe_ëh_Àd_off
(
pid
);

461 
pid
 = 0;Öid < 
pktgí
.
nb_p‹ts
;Öid++) {

462 
öfo
 = &
pktgí
.öfo[
pid
];

464 
	`mem£t
(&
°©s
, 0, (stats));

465 
	`πe_ëh_°©s_gë
(
pid
, &
°©s
);

467 
öô
 = &
öfo
->
öô_°©s
;

468 
øã
 = &
öfo
->
øã_°©s
;

469 
¥ev
 = &
öfo
->
¥ev_°©s
;

472 
°©s
.
ùackës
 -
öô
->ipackets;

473 
°©s
.
›ackës
 -
öô
->opackets;

474 
°©s
.
ibyãs
 -
öô
->ibytes;

475 
°©s
.
obyãs
 -
öô
->obytes;

476 
°©s
.
õº‹s
 -
öô
->ierrors;

477 
°©s
.
€º‹s
 -
öô
->oerrors;

478 
°©s
.
imis£d
 -
öô
->imissed;

479 
°©s
.
rx_nombuf
 -
öô
->rx_nombuf;

481 #i‡
RTE_VERSION
 < 
	`RTE_VERSION_NUM
(2, 2, 0, 0)

482 
°©s
.
ibad¸c
 -
öô
->ibadcrc;

483 
°©s
.
ibadÀn
 -
öô
->ibadlen;

485 #i‡
RTE_VERSION
 < 
	`RTE_VERSION_NUM
(16, 4, 0, 0)

486 
°©s
.
imˇ°s
 -
öô
->imcasts;

489 
øã
->
ùackës
 = 
°©s
.ùackë†- 
¥ev
->ipackets;

490 
øã
->
›ackës
 = 
°©s
.›ackë†- 
¥ev
->opackets;

491 
øã
->
ibyãs
 = 
°©s
.ibyã†- 
¥ev
->ibytes;

492 
øã
->
obyãs
 = 
°©s
.obyã†- 
¥ev
->obytes;

493 
øã
->
õº‹s
 = 
°©s
.õº‹†- 
¥ev
->ierrors;

494 
øã
->
€º‹s
 = 
°©s
.€º‹†- 
¥ev
->oerrors;

495 
øã
->
imis£d
 = 
°©s
.imis£d - 
¥ev
->imissed;

496 
øã
->
rx_nombuf
 = 
°©s
.rx_nombu‡- 
¥ev
->rx_nombuf;

498 #i‡
RTE_VERSION
 < 
	`RTE_VERSION_NUM
(2, 2, 0, 0)

499 
øã
->
ibad¸c
 = 
°©s
.ibad¸¯- 
¥ev
->ibadcrc;

500 
øã
->
ibadÀn
 = 
°©s
.ibadÀ¿- 
¥ev
->ibadlen;

502 #i‡
RTE_VERSION
 < 
	`RTE_VERSION_NUM
(16, 4, 0, 0)

503 
øã
->
imˇ°s
 = 
°©s
.imˇ°†- 
¥ev
->imcasts;

506 i‡(
øã
->
ùackës
 > 
öfo
->
max_ùackës
)

507 
öfo
->
max_ùackës
 = 
øã
->
ùackës
;

508 i‡(
øã
->
›ackës
 > 
öfo
->
max_›ackës
)

509 
öfo
->
max_›ackës
 = 
øã
->
›ackës
;

512 *
¥ev
 = *(
πe_ëh_°©s
 *)&
°©s
;

514 
	}
}

519 
	$pktgí_∑ge_phys_°©s
()

521 
pid
, 
cﬁ
, 
row
;

522 
πe_ëh_°©s
 
°©s
, *
s
, *
r
;

523 
ëhî_addr
 
ëhaddr
;

524 
buff
[32], 
mac_buf
[32];

526 
s
 = &
°©s
;

527 
	`mem£t
(
s
, 0, (
πe_ëh_°©s
));

529 
	`pktgí_di•œy_£t_cﬁ‹
("top.page");

530 
	`di•œy_t›löe
("<Real Port Stats Page>");

532 
row
 = 3;

533 
cﬁ
 = 1;

534 
	`pktgí_di•œy_£t_cﬁ‹
("stats.port.status");

535 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "Port Name");

536 
	`pktgí_di•œy_£t_cﬁ‹
("stats.stat.label");

537 
pid
 = 0;Öid < 
pktgí
.
nb_p‹ts
;Öid++) {

538 
	`¢¥ötf
(
buff
, (buff), "%2d-%s", 
pid
, 
πe_ëh_devi˚s
[pid].
d©a
->
«me
);

539 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%-*s", 
COLUMN_WIDTH_0
 - 4, 
buff
);

542 
row
 = 4;

544 
	`pktgí_di•œy_£t_cﬁ‹
("stats.colon");

545 
pid
 = 0;Öid < 
pktgí
.
nb_p‹ts
;Öid++)

546 
	`s¸n_¥ötf
(
row
++, 
COLUMN_WIDTH_0
 - 4, ":");

548 
	`di•œy_dashlöe
(++
row
);

550 
row
 = 3;

551 
cﬁ
 = 
COLUMN_WIDTH_0
 - 3;

552 
	`pktgí_di•œy_£t_cﬁ‹
("stats.port.status");

553 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_3
, "Pkts Rx/Tx");

554 
	`pktgí_di•œy_£t_cﬁ‹
("stats.stat.values");

555 
pid
 = 0;Öid < 
pktgí
.
nb_p‹ts
;Öid++) {

557 
	`πe_ëh_°©s_gë
(
pid
, &
°©s
);

559 
	`¢¥ötf
(
buff
, (buff), "%lu/%lu", 
s
->
ùackës
, s->
›ackës
);

562 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_3
, 
buff
);

565 
row
 = 3;

566 
cﬁ
 = (
COLUMN_WIDTH_0
 + 
COLUMN_WIDTH_3
) - 3;

567 
	`pktgí_di•œy_£t_cﬁ‹
("stats.port.status");

568 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_3
, "Rx Errors/Missed");

569 
	`pktgí_di•œy_£t_cﬁ‹
("stats.stat.values");

570 
pid
 = 0;Öid < 
pktgí
.
nb_p‹ts
;Öid++) {

572 
	`πe_ëh_°©s_gë
(
pid
, &
°©s
);

574 
	`¢¥ötf
(
buff
, (buff), "%lu/%lu", 
s
->
õº‹s
, s->
imis£d
);

576 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_3
, 
buff
);

579 
row
 = 3;

580 
cﬁ
 = (
COLUMN_WIDTH_0
 + (
COLUMN_WIDTH_3
 * 2)) - 3;

581 
	`pktgí_di•œy_£t_cﬁ‹
("stats.port.status");

582 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_3
, "Rate Rx/Tx");

583 
	`pktgí_di•œy_£t_cﬁ‹
("stats.stat.values");

585 
pid
 = 0;Öid < 
pktgí
.
nb_p‹ts
;Öid++) {

587 
	`πe_ëh_°©s_gë
(
pid
, &
°©s
);

589 
r
 = &
pktgí
.
öfo
[
pid
].
øã_°©s
;

590 
	`¢¥ötf
(
buff
, (buff), "%lu/%lu", 
r
->
ùackës
,Ñ->
›ackës
);

592 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_3
, 
buff
);

594 
row
 = 3;

595 
cﬁ
 = (
COLUMN_WIDTH_0
 + (
COLUMN_WIDTH_3
 * 3)) - 3;

596 
	`pktgí_di•œy_£t_cﬁ‹
("stats.port.status");

597 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_3
, "MAC Address");

598 
	`pktgí_di•œy_£t_cﬁ‹
(
NULL
);

599 
pid
 = 0;Öid < 
pktgí
.
nb_p‹ts
;Öid++) {

601 
	`πe_ëh_maˇddr_gë
(
pid
, &
ëhaddr
);

603 
	`ëhî_f‹m©_addr
(
mac_buf
, (mac_buf), &
ëhaddr
);

604 
	`¢¥ötf
(
buff
, (buff), "%s", 
mac_buf
);

605 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%*s", 
COLUMN_WIDTH_3
, 
buff
);

608 
	`pktgí_di•œy_£t_cﬁ‹
(
NULL
);

609 
	`s¸n_eﬁ
();

610 
	}
}

	@app/pktgen-stats.h

8 #i‚de‡
_PKTGEN_STATS_H_


9 
	#_PKTGEN_STATS_H_


	)

11 
	~<πe_timî.h
>

13 #ifde‡
__˝lu•lus


17 
	spkt_°©s_s
 {

18 
uöt64_t
 
¨p_pkts
;

19 
uöt64_t
 
echo_pkts
;

20 
uöt64_t
 
ù_pkts
;

21 
uöt64_t
 
ùv6_pkts
;

22 
uöt64_t
 
vœn_pkts
;

23 
uöt64_t
 
dr›≥d_pkts
;

24 
uöt64_t
 
unknown_pkts
;

25 
uöt64_t
 
tx_Áûed
;

26 
uöt64_t
 
imis£d
;

27 
uöt64_t
 
ibad¸c
;

28 
uöt64_t
 
ibadÀn
;

29 #i‡
RTE_VERSION
 < 
RTE_VERSION_NUM
(16, 4, 0, 0)

30 
uöt64_t
 
imˇ°s
;

32 
uöt64_t
 
rx_nombuf
;

33 } 
	tpkt_°©s_t
;

35 
p‹t_öfo_s
;

37 
pktgí_gë_lök_°©us
(
p‹t_öfo_s
 *
öfo
, 
pid
, 
waô
);

38 
pktgí_¥o˚ss_°©s
(
πe_timî
 *
tim
, *
¨g
);

40 
pktgí_∑ge_°©s
();

41 
pktgí_∑ge_phys_°©s
();

43 #ifde‡
__˝lu•lus


	@app/pktgen-tcp.c

8 
	~<˛i_s¸n.h
>

9 
	~"pktgí.h
"

11 
	~"pktgí-t˝.h
"

26 
	$pktgí_t˝_hdr_˘‹
(
pkt_£q_t
 *
pkt
, * 
hdr
, 
ty≥
)

28 
uöt16_t
 
éí
;

30 i‡(
ty≥
 =
ETHER_TYPE_IPv4
) {

31 
t˝ù_t
 *
tù
 = (t˝ù_à*)
hdr
;

34 
	`mem£t
((*)
tù
, 0, (
t˝ù_t
));

37 
tù
->
ù
.
§c
 = 
	`ht⁄l
(
pkt
->
ù_§c_addr
.
addr
.
ùv4
.
s_addr
);

38 
tù
->
ù
.
d°
 = 
	`ht⁄l
(
pkt
->
ù_d°_addr
.
addr
.
ùv4
.
s_addr
);

39 
éí
 = 
pkt
->
pktSize
 -

40 (
pkt
->
ëhî_hdr_size
 + (
ùHdr_t
));

42 
tù
->
ù
.
Àn
 = 
	`ht⁄s
(
éí
);

43 
tù
->
ù
.
¥Ÿo
 = 
pkt
->
ùPrŸo
;

45 
tù
->
t˝
.
•‹t
 = 
	`ht⁄s
(
pkt
->sport);

46 
tù
->
t˝
.
dp‹t
 = 
	`ht⁄s
(
pkt
->dport);

47 
tù
->
t˝
.
£q
 = 
	`ht⁄l
(
DEFAULT_PKT_NUMBER
);

48 
tù
->
t˝
.
ack
 = 
	`ht⁄l
(
DEFAULT_ACK_NUMBER
);

49 
tù
->
t˝
.
off£t
 = (((
t˝Hdr_t
Ë/ (
uöt32_t
)) << 4);

50 
tù
->
t˝
.
Êags
 = 
ACK_FLAG
;

51 
tù
->
t˝
.
wödow
 = 
	`ht⁄s
(
DEFAULT_WND_SIZE
);

52 
tù
->
t˝
.
urgít
 = 0;

54 
éí
 = 
pkt
->
pktSize
 -Ökt->
ëhî_hdr_size
;

56 
tù
->
t˝
.
cksum
 = 
	`cksum
—ù, 
éí
, 0);

58 
t˝ùv6_t
 *
tù
 = (t˝ùv6_à*)
hdr
;

61 
	`mem£t
((*)
tù
, 0, (
t˝ùv6_t
));

64 ()
	`πe_mem˝y
(
tù
->
ù
.
daddr
, &
pkt
->
ù_d°_addr
.
addr
.
ùv4
.
s_addr
,

65 (
ö6_addr
));

66 ()
	`πe_mem˝y
(
tù
->
ù
.
ßddr
, &
pkt
->
ù_§c_addr
.
addr
.
ùv4
.
s_addr
,

67 (
ö6_addr
));

69 
éí
 = (
t˝Hdr_t
) +

70 (
pkt
->
pktSize
 -Ökt->
ëhî_hdr_size
 -

71 (
ùv6Hdr_t
Ë- (
t˝Hdr_t
));

72 
tù
->
ù
.
t˝_Àngth
 = 
	`ht⁄l
(
éí
);

73 
tù
->
ù
.
√xt_hódî
 = 
pkt
->
ùPrŸo
;

75 
tù
->
t˝
.
•‹t
 = 
	`ht⁄s
(
pkt
->sport);

76 
tù
->
t˝
.
dp‹t
 = 
	`ht⁄s
(
pkt
->dport);

77 
tù
->
t˝
.
£q
 = 
	`ht⁄l
(
DEFAULT_PKT_NUMBER
);

78 
tù
->
t˝
.
ack
 = 
	`ht⁄l
(
DEFAULT_ACK_NUMBER
);

79 
tù
->
t˝
.
off£t
 =

80 (((
t˝Hdr_t
Ë/ (
uöt32_t
)) << 4);

81 
tù
->
t˝
.
wödow
 = 
	`ht⁄s
(
DEFAULT_WND_SIZE
);

82 
tù
->
t˝
.
urgít
 = 0;

83 
tù
->
t˝
.
Êags
 = 
ACK_FLAG
;

85 
éí
 = (
t˝ùv6_t
) +

86 (
pkt
->
pktSize
 -Ökt->
ëhî_hdr_size
 - (
ùv6Hdr_t
Ë- (
t˝Hdr_t
));

88 
tù
->
t˝
.
cksum
 = 
	`cksum
—ù, 
éí
, 0);

92  
hdr
;

93 
	}
}

	@app/pktgen-tcp.h

8 #i‚de‡
_PKTGEN_TCP_H_


9 
	#_PKTGEN_TCP_H_


	)

11 
	~<pg_öë.h
>

13 
	~"pktgí-£q.h
"

15 #ifde‡
__˝lu•lus


31 * 
pktgí_t˝_hdr_˘‹
(
pkt_£q_t
 * 
pkt
, *
hdr
, 
ty≥
);

33 #ifde‡
__˝lu•lus


	@app/pktgen-udp.c

8 
	~<˛i_s¸n.h
>

9 
	~"pktgí.h
"

11 
	~"pktgí-udp.h
"

26 
	$pktgí_udp_hdr_˘‹
(
pkt_£q_t
 *
pkt
, *
hdr
, 
ty≥
)

28 
uöt16_t
 
éí
;

30 i‡(
ty≥
 =
ETHER_TYPE_IPv4
) {

31 
udpù_t
 *
uù
 = (udpù_à*)
hdr
;

34 
	`mem£t
((*)
uù
, 0, (
udpù_t
));

37 
uù
->
ù
.
§c
 = 
	`ht⁄l
(
pkt
->
ù_§c_addr
.
addr
.
ùv4
.
s_addr
);

38 
uù
->
ù
.
d°
 = 
	`ht⁄l
(
pkt
->
ù_d°_addr
.
addr
.
ùv4
.
s_addr
);

39 
éí
 = 
pkt
->
pktSize
 -

40 (
pkt
->
ëhî_hdr_size
 + (
ùHdr_t
));

42 
uù
->
ù
.
Àn
 = 
	`ht⁄s
(
éí
);

43 
uù
->
ù
.
¥Ÿo
 = 
pkt
->
ùPrŸo
;

45 
uù
->
udp
.
Àn
 = 
	`ht⁄s
(
éí
);

46 
uù
->
udp
.
•‹t
 = 
	`ht⁄s
(
pkt
->sport);

47 
uù
->
udp
.
dp‹t
 = 
	`ht⁄s
(
pkt
->dport);

50 
éí
 = 
pkt
->
pktSize
 -Ökt->
ëhî_hdr_size
;

52 
uù
->
udp
.
cksum
 = 
	`cksum
(uù, 
éí
, 0);

53 i‡(
uù
->
udp
.
cksum
 == 0)

54 
uù
->
udp
.
cksum
 = 0xFFFF;

56 
uöt32_t
 
addr
;

57 
udpùv6_t
 *
uù
 = (udpùv6_à*)
hdr
;

60 
	`mem£t
((*)
uù
, 0, (
udpùv6_t
));

63 
addr
 = 
	`ht⁄l
(
pkt
->
ù_d°_addr
.addr.
ùv4
.
s_addr
);

64 ()
	`πe_mem˝y
(&
uù
->
ù
.
daddr
[8], &
addr
,

65 (
uöt32_t
));

66 
addr
 = 
	`ht⁄l
(
pkt
->
ù_§c_addr
.addr.
ùv4
.
s_addr
);

67 ()
	`πe_mem˝y
(&
uù
->
ù
.
ßddr
[8], &
addr
,

68 (
uöt32_t
));

70 
éí
 = (
udpHdr_t
) +

71 (
pkt
->
pktSize
 -Ökt->
ëhî_hdr_size
 -

72 (
ùv6Hdr_t
Ë- (
udpHdr_t
));

73 
uù
->
ù
.
t˝_Àngth
 = 
	`ht⁄l
(
éí
);

74 
uù
->
ù
.
√xt_hódî
 = 
pkt
->
ùPrŸo
;

76 
uù
->
udp
.
•‹t
 = 
	`ht⁄s
(
pkt
->sport);

77 
uù
->
udp
.
dp‹t
 = 
	`ht⁄s
(
pkt
->dport);

79 
éí
 = (
udpùv6_t
) +

80 (
pkt
->
pktSize
 -Ökt->
ëhî_hdr_size
 -

81 (
ùv6Hdr_t
Ë- (
udpHdr_t
));

82 
uù
->
udp
.
cksum
 = 
	`cksum
(uù, 
éí
, 0);

83 i‡(
uù
->
udp
.
cksum
 == 0)

84 
uù
->
udp
.
cksum
 = 0xFFFF;

88  
hdr
;

89 
	}
}

	@app/pktgen-udp.h

8 #i‚de‡
_PKTGEN_UDP_H_


9 
	#_PKTGEN_UDP_H_


	)

11 
	~<pg_öë.h
>

13 
	~"pktgí-£q.h
"

15 #ifde‡
__˝lu•lus


31 *
pktgí_udp_hdr_˘‹
(
pkt_£q_t
 *
pkt
, *
hdr
, 
ty≥
);

33 #ifde‡
__˝lu•lus


	@app/pktgen-vlan.c

8 
	~<˛i_s¸n.h
>

9 
	~"pktgí.h
"

10 
	~"pktgí-¨p.h
"

11 
	~"pktgí-ùv4.h
"

12 
	~"pktgí-ùv6.h
"

13 
	~"pktgí-vœn.h
"

28 
	$pktgí_¥o˚ss_vœn
(
πe_mbuf
 *
m
, 
uöt32_t
 
pid
)

30 
pktTy≥_e
 
pTy≥
;

31 
ëhî_hdr
 *
ëh
;

32 
vœn_hdr
 *vlan_hdr;

33 
p‹t_öfo_t
 *
öfo
 = &
pktgí
.öfo[
pid
];

35 
ëh
 = 
	`πe_pktmbuf_mtod
(
m
, 
ëhî_hdr
 *);

38 
vœn_hdr
 = (vœn_hd∏*)(
ëh
 + 1);

40 
pTy≥
 = 
	`¡ohs
(
vœn_hdr
->
ëh_¥Ÿo
);

43 ()
pTy≥
) {

44 
ETHER_TYPE_ARP
: 
öfo
->
°©s
.
¨p_pkts
++;

45 
	`pktgí_¥o˚ss_¨p
(
m
, 
pid
, 1); ;

46 
ETHER_TYPE_IPv4
: 
öfo
->
°©s
.
ù_pkts
++;

47 
	`pktgí_¥o˚ss_pög4
(
m
, 
pid
, 1); ;

48 
ETHER_TYPE_IPv6
: 
öfo
->
°©s
.
ùv6_pkts
++;

49 
	`pktgí_¥o˚ss_pög6
(
m
, 
pid
, 1); ;

50 
UNKNOWN_PACKET
:

53 
	}
}

	@app/pktgen-vlan.h

8 #i‚de‡
_PKTGEN_VLAN_H_


9 
	#_PKTGEN_VLAN_H_


	)

11 
	~<°döt.h
>

13 
	~<πe_mbuf.h
>

15 #ifde‡
__˝lu•lus


19 
pktgí_¥o˚ss_vœn
(
πe_mbuf
 *
m
, 
uöt32_t
 
pid
);

21 #ifde‡
__˝lu•lus


	@app/pktgen.c

9 
	~<°döt.h
>

10 
	~<time.h
>

12 
	~"pktgí.h
"

13 
	~"pktgí-gª.h
"

14 
	~"pktgí-t˝.h
"

15 
	~"pktgí-ùv4.h
"

16 
	~"pktgí-ùv6.h
"

17 
	~"pktgí-udp.h
"

18 
	~"pktgí-¨p.h
"

19 
	~"pktgí-vœn.h
"

20 
	~"pktgí-˝u.h
"

21 
	~"pktgí-di•œy.h
"

22 
	~"pktgí-øndom.h
"

23 
	~"pktgí-log.h
"

24 
	~"pktgí-gçu.h
"

25 
	~"pktgí-cfg.h
"

27 
	#PKTGEN_RETRY_COUNT
 10000

	)

30 
pktgí_t
 
	gpktgí
;

44 
uöt64_t


45 
	$pktgí_wúe_size
(
p‹t_öfo_t
 *
öfo
)

47 
uöt64_t
 
i
, 
size
 = 0;

49 i‡(
	`πe_©omic32_ªad
(&
öfo
->
p‹t_Êags
Ë& 
SEND_PCAP_PKTS
)

50 
size
 = 
öfo
->
pˇp
->
pkt_size
 + 
PKT_PREAMBLE_SIZE
 +

51 
INTER_FRAME_GAP
 + 
FCS_SIZE
;

53 i‡(
	`u∆ikñy
(
öfo
->
£qC¡
 > 0)) {

54 
i
 = 0; i < 
öfo
->
£qC¡
; i++)

55 
size
 +
öfo
->
£q_pkt
[
i
].
pktSize
 +

56 
PKT_PREAMBLE_SIZE
 + 
INTER_FRAME_GAP
 +

57 
FCS_SIZE
;

58 
size
 = sizê/ 
öfo
->
£qC¡
;

60 
size
 = 
öfo
->
£q_pkt
[
SINGLE_PKT
].
pktSize
 +

61 
PKT_PREAMBLE_SIZE
 + 
INTER_FRAME_GAP
 + 
FCS_SIZE
;

63  
size
;

64 
	}
}

79 
	$pktgí_∑ckë_øã
(
p‹t_öfo_t
 *
öfo
)

81 
uöt64_t
 
wúe_size
 = (
	`pktgí_wúe_size
(
öfo
) * 8);

82 
uöt64_t
 
lök
 = (uöt64_t)
öfo
->lök.
lök_•ìd
 * 
Mûli⁄
;

83 
uöt64_t
 
µs
 = ((
lök
 / 
wúe_size
Ë* 
öfo
->
tx_øã
) / 100;

84 
uöt64_t
 
˝p
 = (
µs
 > 0Ë? (
pktgí
.
hz
 /Öps) : (pktgen.hz / 4);

86 
öfo
->
tx_µs
 = 
µs
;

87 
öfo
->
tx_cy˛es
 = ((
˝p
 * info->
tx_bur°
Ë* 
	`gë_p‹t_tx˙t
(
pktgí
.
l2p
, info->
pid
));

88 
	}
}

102 
__ölöe__
 

103 
	$pktgí_fûl_∑âîn
(
uöt8_t
 *
p
, 
uöt32_t
 
Àn
, uöt32_à
ty≥
, *
u£r
) {

104 
uöt32_t
 
i
;

106 
ty≥
) {

107 
USER_FILL_PATTERN
:

108 
	`mem£t
(
p
, 0, 
Àn
);

109 
i
 = 0; i < 
Àn
; i++)

110 
p
[
i
] = 
u£r
[ò& (
USER_PATTERN_SIZE
 - 1)];

113 
NO_FILL_PATTERN
:

116 
ZERO_FILL_PATTERN
:

117 
	`mem£t
(
p
, 0, 
Àn
);

121 
ABC_FILL_PATTERN
:

122 
i
 = 0; i < 
Àn
; i++)

123 
p
[
i
] = "abcdefghijklmnopqrstuvwxyz012345"[i & 0x1f];

126 
	}
}

140 
pkt_£q_t
 *

141 
	$pktgí_föd_m©chög_ù§c
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
addr
)

143 
pkt_£q_t
 *
pkt
 = 
NULL
;

144 
i
;

146 
addr
 = 
	`¡ohl
(addr);

149 
i
 = 0; i < 
öfo
->
£qC¡
; i++)

150 i‡(
addr
 =
öfo
->
£q_pkt
[
i
].
ù_§c_addr
.addr.
ùv4
.
s_addr
) {

151 
pkt
 = &
öfo
->
£q_pkt
[
i
];

156 i‡(
pkt
 =
NULL
)

157 i‡(
addr
 =
öfo
->
£q_pkt
[
SINGLE_PKT
].
ù_§c_addr
.addr.
ùv4
.
s_addr
)

158 
pkt
 = &
öfo
->
£q_pkt
[
SINGLE_PKT
];

160  
pkt
;

161 
	}
}

175 
pkt_£q_t
 *

176 
	$pktgí_föd_m©chög_ùd°
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
addr
)

178 
pkt_£q_t
 *
pkt
 = 
NULL
;

179 
i
;

181 
addr
 = 
	`¡ohl
(addr);

184 
i
 = 0; i < 
öfo
->
£qC¡
; i++)

185 i‡(
addr
 =
öfo
->
£q_pkt
[
i
].
ù_d°_addr
.addr.
ùv4
.
s_addr
) {

186 
pkt
 = &
öfo
->
£q_pkt
[
i
];

191 i‡(
pkt
 =
NULL
)

192 i‡(
addr
 =
öfo
->
£q_pkt
[
SINGLE_PKT
].
ù_d°_addr
.addr.
ùv4
.
s_addr
)

193 
pkt
 = &
öfo
->
£q_pkt
[
SINGLE_PKT
];

196 i‡(
pkt
 =
NULL
)

197 i‡(
addr
 =
öfo
->
£q_pkt
[
RANGE_PKT
].
ù_d°_addr
.addr.
ùv4
.
s_addr
)

198 
pkt
 = &
öfo
->
£q_pkt
[
RANGE_PKT
];

200  
pkt
;

201 
	}
}

203 
__ölöe__
 
œãncy_t
 *

204 
	$pktgí_œãncy_poöãr
(
p‹t_öfo_t
 *
öfo
, 
πe_mbuf
 *
m
, 
öt32_t
 
£q_idx
)

206 
œãncy_t
 *
œãncy
;

207 *
p
;

209 
p
 = 
	`πe_pktmbuf_mtod
(
m
, *);

211 
p
 +(
ëhî_hdr
);

213 
p
 +(
öfo
->
£q_pkt
[
£q_idx
].
ëhTy≥
 =
ETHER_TYPE_IPv4
) ?

214 (
ùv4_hdr
Ë: (
ùv6_hdr
);

216 
p
 +(
öfo
->
£q_pkt
[
£q_idx
].
ùPrŸo
 =
IPPROTO_UDP
) ?

217 (
udp_hdr
Ë: (
t˝_hdr
);

220 
p
 = 
	`RTE_PTR_ALIGN_CEIL
’, (
uöt64_t
));

222 
œãncy
 = (
œãncy_t
 *)
p
;

224  
œãncy
;

225 
	}
}

227 
ölöe
 

228 
	$pktgí_œãncy_≠∂y
(
p‹t_öfo_t
 *
öfo
 
__πe_unu£d
,

229 
πe_mbuf
 **
mbufs
, 
˙t
, 
öt32_t
 
£q_idx
)

231 
œãncy_t
 *
œãncy
;

232 
i
;

234 
i
 = 0; i < 
˙t
; i++) {

235 
œãncy
 = 
	`pktgí_œãncy_poöãr
(
öfo
, 
mbufs
[
i
], 
£q_idx
);

237 
œãncy
->
time°amp
 = 
	`πe_rdtsc_¥eci£
();

238 
œãncy
->
magic
 = 
LATENCY_MAGIC
;

240 
	}
}

242 
ölöe
 

243 
	$pktgí_do_tx_èp
(
p‹t_öfo_t
 *
öfo
, 
πe_mbuf
 **
mbufs
, 
˙t
)

245 
i
;

247 
i
 = 0; i < 
˙t
; i++)

248 i‡(
	`wrôe
(
öfo
->
tx_èpfd
, 
	`πe_pktmbuf_mtod
(
mbufs
[
i
], *), mbufs[i]->
pkt_Àn
) < 0) {

249 
	`pktgí_log_îr‹
("WrôêÁûed f‹Åx_èp%d", 
öfo
->
pid
);

252 
	}
}

266 
__ölöe__
 

267 
	$_£nd_bur°_Á°
(
p‹t_öfo_t
 *
öfo
, 
uöt16_t
 
qid
)

269 
mbuf_èbÀ
 *
mèb
 = &
öfo
->
q
[
qid
].
tx_mbufs
;

270 
πe_mbuf
 **
pkts
;

271 
uöt32_t
 
ªt
, 
˙t
, 
ªåy
;

273 
˙t
 = 
mèb
->
Àn
;

274 
mèb
->
Àn
 = 0;

276 
pkts
 = 
mèb
->
m_èbÀ
;

278 
ªåy
 = 
PKTGEN_RETRY_COUNT
;

279 i‡(
	`πe_©omic32_ªad
(&
öfo
->
p‹t_Êags
Ë& 
PROCESS_TX_TAP_PKTS
)

280 
˙t
 && 
ªåy
) {

281 
ªt
 = 
	`πe_ëh_tx_bur°
(
öfo
->
pid
, 
qid
, 
pkts
, 
˙t
);

283 
	`pktgí_do_tx_èp
(
öfo
, 
pkts
, 
ªt
);

285 
pkts
 +
ªt
;

286 
˙t
 -
ªt
;

287 i‡(!
ªt
)

288 
ªåy
--;

291 
˙t
 && 
ªåy
) {

292 
ªt
 = 
	`πe_ëh_tx_bur°
(
öfo
->
pid
, 
qid
, 
pkts
, 
˙t
);

294 
pkts
 +
ªt
;

295 
˙t
 -
ªt
;

296 i‡(!
ªt
)

297 
ªåy
--;

299 
	}
}

313 
__ölöe__
 

314 
	$_£nd_bur°_øndom
(
p‹t_öfo_t
 *
öfo
, 
uöt16_t
 
qid
)

316 
mbuf_èbÀ
 *
mèb
 = &
öfo
->
q
[
qid
].
tx_mbufs
;

317 
πe_mbuf
 **
pkts
;

318 
uöt32_t
 
ªt
, 
˙t
, 
Êags
, 
ªåy
;

320 
˙t
 = 
mèb
->
Àn
;

321 
mèb
->
Àn
 = 0;

322 
pkts
 = 
mèb
->
m_èbÀ
;

324 
ªåy
 = 100;

326 
Êags
 = 
	`πe_©omic32_ªad
(&
öfo
->
p‹t_Êags
);

327 i‡(
	`u∆ikñy
(
Êags
 & 
PROCESS_TX_TAP_PKTS
))

328 
˙t
 && 
ªåy
) {

329 
	`pktgí_∫d_bôs_≠∂y
(
öfo
, 
pkts
, 
˙t
, 
NULL
);

331 
ªt
 = 
	`πe_ëh_tx_bur°
(
öfo
->
pid
, 
qid
, 
pkts
, 
˙t
);

333 
	`pktgí_do_tx_èp
(
öfo
, 
pkts
, 
ªt
);

335 
pkts
 +
ªt
;

336 
˙t
 -
ªt
;

337 i‡(!
ªt
)

338 
ªåy
--;

341 
˙t
 && 
ªåy
) {

342 
	`pktgí_∫d_bôs_≠∂y
(
öfo
, 
pkts
, 
˙t
, 
NULL
);

344 
ªt
 = 
	`πe_ëh_tx_bur°
(
öfo
->
pid
, 
qid
, 
pkts
, 
˙t
);

346 
pkts
 +
ªt
;

347 
˙t
 -
ªt
;

348 i‡(!
ªt
)

349 
ªåy
--;

351 
	}
}

365 
__ölöe__
 

366 
	$_£nd_bur°_œãncy
(
p‹t_öfo_t
 *
öfo
, 
uöt16_t
 
qid
, 
öt32_t
 
£q_idx
)

368 
mbuf_èbÀ
 *
mèb
 = &
öfo
->
q
[
qid
].
tx_mbufs
;

369 
πe_mbuf
 **
pkts
;

370 
uöt32_t
 
ªt
, 
˙t
, 
ªåy
;

372 
˙t
 = 
mèb
->
Àn
;

373 
mèb
->
Àn
 = 0;

374 
pkts
 = 
mèb
->
m_èbÀ
;

375 
ªåy
 = 100;

376 
˙t
 && 
ªåy
) {

377 
	`pktgí_œãncy_≠∂y
(
öfo
, 
pkts
, 
˙t
, 
£q_idx
);

379 
ªt
 = 
	`πe_ëh_tx_bur°
(
öfo
->
pid
, 
qid
, 
pkts
, 
˙t
);

381 
pkts
 +
ªt
;

382 
˙t
 -
ªt
;

383 i‡(!
ªt
)

384 
ªåy
--;

386 
	}
}

388 
__ölöe__
 

389 
	$pktgí_£nd_bur°
(
p‹t_öfo_t
 *
öfo
, 
uöt16_t
 
qid
)

391 
uöt32_t
 
Êags
;

392 
öt32_t
 
£q_idx
;

394 
Êags
 = 
	`πe_©omic32_ªad
(&
öfo
->
p‹t_Êags
);

396 i‡(
Êags
 & 
SEND_RANGE_PKTS
)

397 
£q_idx
 = 
RANGE_PKT
;

399 
£q_idx
 = 
SINGLE_PKT
;

401 i‡(
Êags
 & 
SEND_LATENCY_PKTS
)

402 
	`_£nd_bur°_œãncy
(
öfo
, 
qid
, 
£q_idx
);

403 i‡(
Êags
 & 
SEND_RANDOM_PKTS
)

404 
	`_£nd_bur°_øndom
(
öfo
, 
qid
);

406 
	`_£nd_bur°_Á°
(
öfo
, 
qid
);

407 
	}
}

409 
__ölöe__
 

410 
	$pktgí_ªcv_œãncy
(
p‹t_öfo_t
 *
öfo
, 
πe_mbuf
 **
pkts
, 
uöt16_t
 
nb_pkts
)

412 
uöt32_t
 
Êags
;

413 
uöt64_t
 
œt
, 
jôãr
;

414 
öt32_t
 
£q_idx
;

416 
Êags
 = 
	`πe_©omic32_ªad
(&
öfo
->
p‹t_Êags
);

418 i‡(
Êags
 & 
SEND_RANGE_PKTS
)

419 
£q_idx
 = 
RANGE_PKT
;

421 
£q_idx
 = 
SINGLE_PKT
;

423 i‡(
Êags
 & 
SEND_LATENCY_PKTS
) {

424 
i
;

425 
œãncy_t
 *
œãncy
;

427 
i
 = 0; i < 
nb_pkts
; i++) {

428 
œãncy
 = 
	`pktgí_œãncy_poöãr
(
öfo
, 
pkts
[
i
], 
£q_idx
);

430 i‡(
œãncy
->
magic
 =
LATENCY_MAGIC
) {

431 
œt
 = (
	`πe_rdtsc_¥eci£
(Ë- 
œãncy
->
time°amp
);

432 
öfo
->
avg_œãncy
 +
œt
;

433 i‡(
œt
 > 
öfo
->
¥ev_œãncy
)

434 
jôãr
 = 
œt
 - 
öfo
->
¥ev_œãncy
;

436 
jôãr
 = 
öfo
->
¥ev_œãncy
 - 
œt
;

437 i‡(
jôãr
 > 
öfo
->
jôãr_thªshﬁd_˛ks
)

438 
öfo
->
jôãr_cou¡
++;

439 
öfo
->
¥ev_œãncy
 = 
œt
;

441 
öfo
->
magic_îr‹s
++;

443 
öfo
->
œãncy_nb_pkts
 +
nb_pkts
;

445 
	}
}

459 
__ölöe__
 

460 
	$pktgí_tx_Êush
(
p‹t_öfo_t
 *
öfo
, 
uöt16_t
 
qid
)

463 
	`pktgí_£nd_bur°
(
öfo
, 
qid
);

465 #i‡
RTE_VERSION
 >
	`RTE_VERSION_NUM
(17, 5, 0, 0)

466 
	`πe_dñay_ms
(250);

468 
	`πe_ëh_tx_d⁄e_˛ónup
(
öfo
->
pid
, 
qid
, 0);

471 
	`pktgí_˛r_q_Êags
(
öfo
, 
qid
, 
DO_TX_FLUSH
);

472 
	}
}

486 
__ölöe__
 

487 
	$pktgí_exô_˛ónup
(
uöt8_t
 
lid
)

489 
p‹t_öfo_t
 *
öfo
;

490 
uöt8_t
 
idx
, 
pid
, 
qid
;

492 
idx
 = 0; idx < 
	`gë_lc‹e_tx˙t
(
pktgí
.
l2p
, 
lid
); idx++) {

493 
pid
 = 
	`gë_tx_pid
(
pktgí
.
l2p
, 
lid
, 
idx
);

494 i‡–(
öfo
 = (
p‹t_öfo_t
 *)
	`gë_p‹t_¥iv©e
(
pktgí
.
l2p
, 
pid
)Ë!
NULL
) {

495 
qid
 = 
	`gë_txque
(
pktgí
.
l2p
, 
lid
, 
pid
);

496 
	`pktgí_tx_Êush
(
öfo
, 
qid
);

499 
	}
}

513 
__ölöe__
 

514 
	$pktgí_has_w‹k
()

516 i‡(!
	`gë_m≠
(
pktgí
.
l2p
, 
RTE_MAX_ETHPORTS
, 
	`πe_lc‹e_id
())) {

517 
	`pktgí_log_w¨nög
("NothingÅo do onÜcore %d:Éxiting",

518 
	`πe_lc‹e_id
());

522 
	}
}

537 
	$pktgí_∑ckë_˘‹
(
p‹t_öfo_t
 *
öfo
, 
öt32_t
 
£q_idx
, i¡32_à
ty≥
)

539 
pkt_£q_t
 *
pkt
 = &
öfo
->
£q_pkt
[
£q_idx
];

540 
ëhî_hdr
 *
ëh
 = (ëhî_hd∏*)&
pkt
->
hdr
.eth;

541 *
l3_hdr
 = 
NULL
;

542 
uöt16_t
 
éí
;

545 
	`pktgí_fûl_∑âîn
((
uöt8_t
 *)&
pkt
->
hdr
,

546 ((
pkt_hdr_t
Ë+ (
pkt
->
∑d
)),

547 
öfo
->
fûl_∑âîn_ty≥
, info->
u£r_∑âîn
);

550 i‡(
	`πe_©omic32_ªad
(&
öfo
->
p‹t_Êags
Ë& 
SEND_GRE_IPv4_HEADER
)

551 
l3_hdr
 = 
	`pktgí_gª_hdr_˘‹
(
öfo
, 
pkt
, (
gªIp_t
 *)l3_hdr);

552 i‡(
	`πe_©omic32_ªad
(&
öfo
->
p‹t_Êags
Ë& 
SEND_GRE_ETHER_HEADER
)

553 
l3_hdr
 = 
	`pktgí_gª_ëhî_hdr_˘‹
(
öfo
, 
pkt
, (
gªEthî_t
 *)l3_hdr);

555 
l3_hdr
 = 
	`pktgí_ëhî_hdr_˘‹
(
öfo
, 
pkt
, 
ëh
);

557 i‡(
	`likñy
(
pkt
->
ëhTy≥
 =
ETHER_TYPE_IPv4
)) {

558 i‡(
	`likñy
(
pkt
->
ùPrŸo
 =
PG_IPPROTO_TCP
)) {

559 i‡(
pkt
->
dp‹t
 !
PG_IPPROTO_L4_GTPU_PORT
) {

561 
	`pktgí_t˝_hdr_˘‹
(
pkt
, 
l3_hdr
, 
ETHER_TYPE_IPv4
);

564 
	`pktgí_ùv4_˘‹
(
pkt
, 
l3_hdr
);

567 
	`pktgí_gçu_hdr_˘‹
(
pkt
, 
l3_hdr
,Ökt->
ùPrŸo
,

568 
GTPu_VERSION
 | 
GTPu_PT_FLAG
, 0, 0, 0);

571 
	`pktgí_t˝_hdr_˘‹
(
pkt
, 
l3_hdr
, 
ETHER_TYPE_IPv4
);

574 
	`pktgí_ùv4_˘‹
(
pkt
, 
l3_hdr
);

576 } i‡(
pkt
->
ùPrŸo
 =
PG_IPPROTO_UDP
) {

577 i‡(
pkt
->
dp‹t
 !
PG_IPPROTO_L4_GTPU_PORT
) {

579 
	`pktgí_udp_hdr_˘‹
(
pkt
, 
l3_hdr
, 
ETHER_TYPE_IPv4
);

582 
	`pktgí_ùv4_˘‹
(
pkt
, 
l3_hdr
);

585 
	`pktgí_gçu_hdr_˘‹
(
pkt
, 
l3_hdr
,Ökt->
ùPrŸo
,

586 
GTPu_VERSION
 | 
GTPu_PT_FLAG
, 0, 0, 0);

589 
	`pktgí_udp_hdr_˘‹
(
pkt
, 
l3_hdr
, 
ETHER_TYPE_IPv4
);

592 
	`pktgí_ùv4_˘‹
(
pkt
, 
l3_hdr
);

594 } i‡(
pkt
->
ùPrŸo
 =
PG_IPPROTO_ICMP
) {

595 
udpù_t
 *
uù
;

596 
icmpv4Hdr_t
 *
icmp
;

599 
uù
 = (
udpù_t
 *)
l3_hdr
;

602 
uù
->
ù
.
§c
 = 
	`ht⁄l
(
pkt
->
ù_§c_addr
.
addr
.
ùv4
.
s_addr
);

603 
uù
->
ù
.
d°
 = 
	`ht⁄l
(
pkt
->
ù_d°_addr
.
addr
.
ùv4
.
s_addr
);

604 
éí
 = 
pkt
->
pktSize
 - (pkt->
ëhî_hdr_size
 + (
ùHdr_t
));

605 
uù
->
ù
.
Àn
 = 
	`ht⁄s
(
éí
);

606 
uù
->
ù
.
¥Ÿo
 = 
pkt
->
ùPrŸo
;

608 
icmp
 = (
icmpv4Hdr_t
 *)&
uù
->
udp
;

609 
icmp
->
code
 = 0;

610 i‡–(
ty≥
 =-1Ë|| (ty≥ =
ICMP4_TIMESTAMP
)) {

611 
icmp
->
ty≥
 =

612 
ICMP4_TIMESTAMP
;

613 
icmp
->
d©a
.
time°amp
.
idít
 = 0x1234;

614 
icmp
->
d©a
.
time°amp
.
£q
 = 0x5678;

615 
icmp
->
d©a
.
time°amp
.
‹igö©e
 = 0x80004321;

616 
icmp
->
d©a
.
time°amp
.
ª˚ive
 = 0;

617 
icmp
->
d©a
.
time°amp
.
å™smô
 = 0;

618 } i‡(
ty≥
 =
ICMP4_ECHO
) {

619 
icmp
->
ty≥
 = 
ICMP4_ECHO
;

620 
icmp
->
d©a
.
echo
.
idít
 = 0x1234;

621 
icmp
->
d©a
.
echo
.
£q
 = 0x5678;

622 
icmp
->
d©a
.
echo
.data = 0;

624 
icmp
->
cksum
 = 0;

626 
éí
 = 
pkt
->
pktSize
 - (pkt->
ëhî_hdr_size
 + (
ùHdr_t
));

627 
icmp
->
cksum
 = 
	`cksum
(icmp, 
éí
, 0);

628 i‡(
icmp
->
cksum
 == 0)

629 
icmp
->
cksum
 = 0xFFFF;

632 
	`pktgí_ùv4_˘‹
(
pkt
, 
l3_hdr
);

634 } i‡(
pkt
->
ëhTy≥
 =
ETHER_TYPE_IPv6
) {

635 i‡(
pkt
->
ùPrŸo
 =
PG_IPPROTO_TCP
) {

637 
	`pktgí_t˝_hdr_˘‹
(
pkt
, 
l3_hdr
, 
ETHER_TYPE_IPv6
);

640 
	`pktgí_ùv6_˘‹
(
pkt
, 
l3_hdr
);

641 } i‡(
pkt
->
ùPrŸo
 =
PG_IPPROTO_UDP
) {

643 
	`pktgí_udp_hdr_˘‹
(
pkt
, 
l3_hdr
, 
ETHER_TYPE_IPv6
);

646 
	`pktgí_ùv6_˘‹
(
pkt
, 
l3_hdr
);

648 } i‡(
pkt
->
ëhTy≥
 =
ETHER_TYPE_ARP
) {

650 
¨pPkt_t
 *
¨p
 = (¨pPkt_à*)
l3_hdr
;

652 
¨p
->
hrd
 = 
	`ht⁄s
(1);

653 
¨p
->
¥o
 = 
	`ht⁄s
(
ETHER_TYPE_IPv4
);

654 
¨p
->
h 
 = 
ETHER_ADDR_LEN
;

655 
¨p
->
∂n
 = 4;

658 
¨p
->
›
 = 
	`ht⁄s
(2);

660 
	`ëhî_addr_c›y
(&
pkt
->
ëh_§c_addr
,

661 (
ëhî_addr
 *)&
¨p
->
sha
);

662 
¨p
->
•a
.
_32
 = 
	`ht⁄l
(
pkt
->
ù_§c_addr
.
addr
.
ùv4
.
s_addr
);

664 
	`ëhî_addr_c›y
(&
pkt
->
ëh_d°_addr
,

665 (
ëhî_addr
 *)&
¨p
->
tha
);

666 
¨p
->
ça
.
_32
 = 
	`ht⁄l
(
pkt
->
ù_d°_addr
.
addr
.
ùv4
.
s_addr
);

668 
	`pktgí_log_îr‹
("Unknow¿EthîTy≥ 0x%04x", 
pkt
->
ëhTy≥
);

669 
	}
}

685 
	$pktgí_£nd_mbuf
(
πe_mbuf
 *
m
, 
uöt8_t
 
pid
, 
uöt16_t
 
qid
)

687 
p‹t_öfo_t
 *
öfo
 = &
pktgí
.öfo[
pid
];

688 
mbuf_èbÀ
 *
mèb
 = &
öfo
->
q
[
qid
].
tx_mbufs
;

691 
mèb
->
m_èbÀ
[mèb->
Àn
++] = 
m
;

694 i‡(
mèb
->
Àn
 >
öfo
->
tx_bur°
)

695 
	`pktgí_£nd_bur°
(
öfo
, 
qid
);

696 
	}
}

711 
__ölöe__
 
pktTy≥_e


712 
	$pktgí_∑ckë_ty≥
(
πe_mbuf
 *
m
)

714 
pktTy≥_e
 
ªt
;

715 
ëhî_hdr
 *
ëh
;

717 
ëh
 = 
	`πe_pktmbuf_mtod
(
m
, 
ëhî_hdr
 *);

719 
ªt
 = 
	`¡ohs
(
ëh
->
ëhî_ty≥
);

721  
ªt
;

722 
	}
}

738 
	$pktgí_∑ckë_˛assify
(
πe_mbuf
 *
m
, 
pid
)

740 
p‹t_öfo_t
 *
öfo
 = &
pktgí
.öfo[
pid
];

741 
uöt32_t
 
∂í
 = (
m
->
pkt_Àn
 + 
FCS_SIZE
);

742 
uöt32_t
 
Êags
;

743 
pktTy≥_e
 
pTy≥
;

745 
pTy≥
 = 
	`pktgí_∑ckë_ty≥
(
m
);

747 
Êags
 = 
	`πe_©omic32_ªad
(&
öfo
->
p‹t_Êags
);

748 i‡(
	`u∆ikñy
(
Êags
 & (
PROCESS_INPUT_PKTS
 | 
PROCESS_RX_TAP_PKTS
))) {

749 i‡(
	`u∆ikñy
(
Êags
 & 
PROCESS_RX_TAP_PKTS
))

750 i‡(
	`wrôe
(
öfo
->
rx_èpfd
, 
	`πe_pktmbuf_mtod
(
m
, *),

751 
m
->
pkt_Àn
) < 0)

752 
	`pktgí_log_îr‹
("Write failed forÑx_tap%d",

753 
pid
);

755 ()
pTy≥
) {

756 
ETHER_TYPE_ARP
: 
öfo
->
°©s
.
¨p_pkts
++;

757 
	`pktgí_¥o˚ss_¨p
(
m
, 
pid
, 0); ;

758 
ETHER_TYPE_IPv4
: 
öfo
->
°©s
.
ù_pkts
++;

759 
	`pktgí_¥o˚ss_pög4
(
m
, 
pid
, 0); ;

760 
ETHER_TYPE_IPv6
: 
öfo
->
°©s
.
ùv6_pkts
++;

761 
	`pktgí_¥o˚ss_pög6
(
m
, 
pid
, 0); ;

762 
ETHER_TYPE_VLAN
: 
öfo
->
°©s
.
vœn_pkts
++;

763 
	`pktgí_¥o˚ss_vœn
(
m
, 
pid
); ;

764 
UNKNOWN_PACKET
:

769 ()
pTy≥
) {

770 
ETHER_TYPE_ARP
: 
öfo
->
°©s
.
¨p_pkts
++; ;

771 
ETHER_TYPE_IPv4
: 
öfo
->
°©s
.
ù_pkts
++; ;

772 
ETHER_TYPE_IPv6
: 
öfo
->
°©s
.
ùv6_pkts
++; ;

773 
ETHER_TYPE_VLAN
: 
öfo
->
°©s
.
vœn_pkts
++; ;

778 i‡(
∂í
 =
ETHER_MIN_LEN
)

779 
öfo
->
sizes
.
_64
++;

780 i‡–(
∂í
 >(
ETHER_MIN_LEN
 + 1)) && (plen <= 127))

781 
öfo
->
sizes
.
_65_127
++;

782 i‡–(
∂í
 >= 128) && (plen <= 255))

783 
öfo
->
sizes
.
_128_255
++;

784 i‡–(
∂í
 >= 256) && (plen <= 511))

785 
öfo
->
sizes
.
_256_511
++;

786 i‡–(
∂í
 >= 512) && (plen <= 1023))

787 
öfo
->
sizes
.
_512_1023
++;

788 i‡–(
∂í
 >1024Ë&& (∂í <
ETHER_MAX_LEN
))

789 
öfo
->
sizes
.
_1024_1518
++;

790 i‡(
∂í
 < 
ETHER_MIN_LEN
)

791 
öfo
->
sizes
.
ru¡
++;

792 i‡(
∂í
 >(
ETHER_MAX_LEN
 + 1))

793 
öfo
->
sizes
.
jumbo
++;

796 i‡(
	`u∆ikñy
(((
uöt8_t
 *)
m
->
buf_addr
 + m->
d©a_off
)[0] == 0xFF)) {

797 i‡–(((
uöt64_t
 *)
m
->
buf_addr
 + m->
d©a_off
)[0] &

799 
öfo
->
sizes
.
brﬂdˇ°
++;

800 i‡–((
uöt8_t
 *)
m
->
buf_addr
 + m->
d©a_off
)[0] & 1)

801 
öfo
->
sizes
.
mu…iˇ°
++;

803 
	}
}

817 
	#PREFETCH_OFFSET
 3

	)

818 
__ölöe__
 

819 
	$pktgí_∑ckë_˛assify_bulk
(
πe_mbuf
 **
pkts
, 
nb_rx
, 
pid
)

821 
j
, 
i
;

824 
j
 = 0; j < 
PREFETCH_OFFSET
 && j < 
nb_rx
; j++)

825 
	`πe_¥e„tch0
(
	`πe_pktmbuf_mtod
(
pkts
[
j
], *));

828 
i
 = 0; i < (
nb_rx
 - 
PREFETCH_OFFSET
); i++) {

829 
	`πe_¥e„tch0
(
	`πe_pktmbuf_mtod
(
pkts
[
j
], *));

830 
j
++;

832 
	`pktgí_∑ckë_˛assify
(
pkts
[
i
], 
pid
);

836 ; 
i
 < 
nb_rx
; i++)

837 
	`pktgí_∑ckë_˛assify
(
pkts
[
i
], 
pid
);

838 
	}
}

853 
	$pktgí_£nd_•ecül
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
Êags
)

855 
uöt32_t
 
s
;

858 
s
 = 0; s < 
öfo
->
£qC¡
; s++) {

859 i‡(
Êags
 & 
SEND_GRATUITOUS_ARP
)

860 
	`pktgí_£nd_¨p
(
öfo
->
pid
, 
GRATUITOUS_ARP
, 
s
);

861 i‡(
Êags
 & 
SEND_ARP_REQUEST
)

862 
	`pktgí_£nd_¨p
(
öfo
->
pid
, 0, 
s
);

864 i‡(
Êags
 & 
SEND_PING4_REQUEST
)

865 
	`pktgí_£nd_pög4
(
öfo
->
pid
, 
s
);

866 #ifde‡
INCLUDE_PING6


867 i‡(
Êags
 & 
SEND_PING6_REQUEST
)

868 
	`pktgí_£nd_pög6
(
öfo
->
pid
, 
s
);

873 i‡(
Êags
 & 
SEND_GRATUITOUS_ARP
)

874 
	`pktgí_£nd_¨p
(
öfo
->
pid
, 
GRATUITOUS_ARP
, 
SINGLE_PKT
);

875 i‡(
Êags
 & 
SEND_ARP_REQUEST
)

876 
	`pktgí_£nd_¨p
(
öfo
->
pid
, 0, 
SINGLE_PKT
);

878 i‡(
Êags
 & 
SEND_PING4_REQUEST
)

879 
	`pktgí_£nd_pög4
(
öfo
->
pid
, 
SINGLE_PKT
);

880 #ifde‡
INCLUDE_PING6


881 i‡(
Êags
 & 
SEND_PING6_REQUEST
)

882 
	`pktgí_£nd_pög6
(
öfo
->
pid
, 
SINGLE_PKT
);

885 
	`pktgí_˛r_p‹t_Êags
(
öfo
, 
SEND_ARP_PING_REQUESTS
);

886 
	}
}

889 
p‹t_öfo_t
 *
	möfo
;

890 
uöt16_t
 
	mqid
;

891 } 
	tpkt_d©a_t
;

893 
__ölöe__
 

894 
	$pktgí_£tup_cb
(
πe_mempoﬁ
 *
mp
,

895 *
›aque
, *
obj
, 
obj_idx
 
__πe_unu£d
)

897 
pkt_d©a_t
 *
d©a
 = (pkt_d©a_à*)
›aque
;

898 
πe_mbuf
 *
m
 = (πe_mbu‡*)
obj
;

899 
p‹t_öfo_t
 *
öfo
;

900 
pkt_£q_t
 *
pkt
;

901 
uöt16_t
 
qid
;

903 
öfo
 = 
d©a
->info;

904 
qid
 = 
d©a
->qid;

907 
	`pktmbuf_ª£t
(
m
);

909 i‡(
mp
 =
öfo
->
q
[
qid
].
tx_mp
)

910 
pkt
 = &
öfo
->
£q_pkt
[
SINGLE_PKT
];

911 i‡(
mp
 =
öfo
->
q
[
qid
].
ønge_mp
)

912 
pkt
 = &
öfo
->
£q_pkt
[
RANGE_PKT
];

913 i‡(
mp
 =
öfo
->
q
[
qid
].
£q_mp
)

914 
pkt
 = &
öfo
->
£q_pkt
[öfo->
£qIdx
];

916 
pkt
 = 
NULL
;

919 i‡(
mp
 =
öfo
->
q
[
qid
].
tx_mp
) {

920 
	`pktgí_∑ckë_˘‹
(
öfo
, 
SINGLE_PKT
, -1);

922 
	`πe_mem˝y
((
uöt8_t
 *)
m
->
buf_addr
 + m->
d©a_off
,

923 (
uöt8_t
 *)&
pkt
->
hdr
, 
MAX_PKT_SIZE
);

925 
m
->
pkt_Àn
 = 
pkt
->
pktSize
;

926 
m
->
d©a_Àn
 = 
pkt
->
pktSize
;

927 } i‡(
mp
 =
öfo
->
q
[
qid
].
ønge_mp
) {

928 
	`pktgí_ønge_˘‹
(&
öfo
->
ønge
, 
pkt
);

929 
	`pktgí_∑ckë_˘‹
(
öfo
, 
RANGE_PKT
, -1);

931 
	`πe_mem˝y
((
uöt8_t
 *)
m
->
buf_addr
 + m->
d©a_off
,

932 (
uöt8_t
 *)&
pkt
->
hdr
, 
MAX_PKT_SIZE
);

934 
m
->
pkt_Àn
 = 
pkt
->
pktSize
;

935 
m
->
d©a_Àn
 = 
pkt
->
pktSize
;

936 } i‡(
mp
 =
öfo
->
q
[
qid
].
£q_mp
) {

937 i‡(
pktgí
.
is_gui_ru¬ög
)

938 
öfo
->
£qIdx
 < info->
£qC¡
) {

939 
pkt
 = &
öfo
->
£q_pkt
[öfo->
£qIdx
];

942 i‡(++
öfo
->
£qIdx
 >öfo->
£qC¡
)

943 
öfo
->
£qIdx
 = 0;

945 i‡(
pkt
->
£q_íabÀd
) {

947 
	`pktgí_∑ckë_˘‹
(
öfo
, info->
£qIdx
, -1);

949 
	`πe_mem˝y
((
uöt8_t
 *)
m
->
buf_addr
 + m->
d©a_off
,

950 (
uöt8_t
 *)&
pkt
->
hdr
, 
MAX_PKT_SIZE
);

951 
m
->
pkt_Àn
 = 
pkt
->
pktSize
;

952 
m
->
d©a_Àn
 = 
pkt
->
pktSize
;

953 
pkt
 = &
öfo
->
£q_pkt
[öfo->
£qIdx
];

958 
pkt
 = &
öfo
->
£q_pkt
[öfo->
£qIdx
];

959 
	`pktgí_∑ckë_˘‹
(
öfo
, info->
£qIdx
, -1);

961 
	`πe_mem˝y
((
uöt8_t
 *)
m
->
buf_addr
 + m->
d©a_off
,

962 (
uöt8_t
 *)&
pkt
->
hdr
, 
MAX_PKT_SIZE
);

964 
m
->
pkt_Àn
 = 
pkt
->
pktSize
;

965 
m
->
d©a_Àn
 = 
pkt
->
pktSize
;

967 
pkt
 = &
öfo
->
£q_pkt
[öfo->
£qIdx
];

970 i‡(
	`u∆ikñy
(++
öfo
->
£qIdx
 >öfo->
£qC¡
))

971 
öfo
->
£qIdx
 = 0;

974 
	}
}

988 
__ölöe__
 

989 
	$pktgí_£tup_∑ckës
(
p‹t_öfo_t
 *
öfo
, 
πe_mempoﬁ
 *
mp
, 
uöt16_t
 
qid
)

991 
pkt_d©a_t
 
pkt_d©a
;

993 
	`pktgí_˛r_q_Êags
(
öfo
, 
qid
, 
CLEAR_FAST_ALLOC_FLAG
);

995 i‡(
mp
 =
öfo
->
q
[
qid
].
pˇp_mp
)

998 
	`πe_•ölock_lock
(&
öfo
->
p‹t_lock
);

1000 
pkt_d©a
.
öfo
 = info;

1001 
pkt_d©a
.
qid
 = qid;

1003 #i‡
RTE_VERSION
 >
	`RTE_VERSION_NUM
(16, 7, 0, 0)

1004 
	`πe_mempoﬁ_obj_ôî
(
mp
, 
pktgí_£tup_cb
, &
pkt_d©a
);

1007 
πe_mbuf
 *
m
, *
mm
;

1009 
mm
 = 
NULL
;

1013 i‡((
m
 = 
	`πe_pktmbuf_Æloc
(
mp
)Ë=
NULL
)

1017 
m
->
√xt
 = 
mm
;

1018 
mm
 = 
m
;

1020 
	`pktgí_£tup_cb
(
mp
, &
pkt_d©a
, 
m
, 0);

1022 i‡(
mm
 !
NULL
)

1023 
	`πe_pktmbuf_‰ì
(
mm
);

1026 
	`πe_•ölock_u∆ock
(&
öfo
->
p‹t_lock
);

1027 
	}
}

1041 
__ölöe__
 

1042 
	$pktgí_£nd_pkts
(
p‹t_öfo_t
 *
öfo
, 
uöt16_t
 
qid
, 
πe_mempoﬁ
 *
mp
)

1044 
uöt32_t
 
Êags
;

1045 
rc
 = 0;

1047 
Êags
 = 
	`πe_©omic32_ªad
(&
öfo
->
p‹t_Êags
);

1049 i‡(
Êags
 & 
SEND_FOREVER
) {

1050 
rc
 = 
	`pg_pktmbuf_Æloc_bulk
(
mp
,

1051 
öfo
->
q
[
qid
].
tx_mbufs
.
m_èbÀ
,

1052 
öfo
->
tx_bur°
);

1053 i‡(
rc
 == 0) {

1054 
öfo
->
q
[
qid
].
tx_mbufs
.
Àn
 = info->
tx_bur°
;

1055 
öfo
->
q
[
qid
].
tx_˙t
 +öfo->
tx_bur°
;

1057 
	`pktgí_£nd_bur°
(
öfo
, 
qid
);

1060 
öt64_t
 
txC¡
;

1062 
txC¡
 = 
	`pkt_©omic64_tx_cou¡
(&
öfo
->
cuºít_tx_cou¡
, info->
tx_bur°
);

1063 i‡(
txC¡
 > 0) {

1064 
rc
 = 
	`pg_pktmbuf_Æloc_bulk
(
mp
,

1065 
öfo
->
q
[
qid
].
tx_mbufs
.
m_èbÀ
,

1066 
txC¡
);

1067 i‡(
rc
 == 0) {

1068 
öfo
->
q
[
qid
].
tx_mbufs
.
Àn
 = 
txC¡
;

1069 
	`pktgí_£nd_bur°
(
öfo
, 
qid
);

1072 
	`pktgí_˛r_p‹t_Êags
(
öfo
, (
SENDING_PACKETS
 | 
SEND_FOREVER
));

1074 
	}
}

1088 
__ölöe__
 

1089 
	$pktgí_maö_å™smô
(
p‹t_öfo_t
 *
öfo
, 
uöt16_t
 
qid
)

1091 
πe_mempoﬁ
 *
mp
 = 
NULL
;

1092 
uöt32_t
 
Êags
;

1094 
Êags
 = 
	`πe_©omic32_ªad
(&
öfo
->
p‹t_Êags
);

1099 i‡((
Êags
 & 
SEND_ARP_PING_REQUESTS
))

1100 
	`pktgí_£nd_•ecül
(
öfo
, 
Êags
);

1103 i‡(
Êags
 & 
SENDING_PACKETS
) {

1104 
mp
 = 
öfo
->
q
[
qid
].
tx_mp
;

1106 i‡(
Êags
 & (
SEND_RANGE_PKTS
 | 
SEND_PCAP_PKTS
 | 
SEND_SEQ_PKTS
)) {

1107 i‡(
Êags
 & 
SEND_RANGE_PKTS
)

1108 
mp
 = 
öfo
->
q
[
qid
].
ønge_mp
;

1109 i‡(
Êags
 & 
SEND_SEQ_PKTS
)

1110 
mp
 = 
öfo
->
q
[
qid
].
£q_mp
;

1111 i‡(
Êags
 & 
SEND_PCAP_PKTS
)

1112 
mp
 = 
öfo
->
q
[
qid
].
pˇp_mp
;

1115 i‡(
	`πe_©omic32_ªad
(&
öfo
->
q
[
qid
].
Êags
Ë& 
CLEAR_FAST_ALLOC_FLAG
)

1116 
	`pktgí_£tup_∑ckës
(
öfo
, 
mp
, 
qid
);

1118 
	`pktgí_£nd_pkts
(
öfo
, 
qid
, 
mp
);

1121 
Êags
 = 
	`πe_©omic32_ªad
(&
öfo
->
q
[
qid
].flags);

1122 i‡(
Êags
 & 
DO_TX_FLUSH
)

1123 
	`pktgí_tx_Êush
(
öfo
, 
qid
);

1124 
	}
}

1139 
__ölöe__
 

1140 
	$pktgí_maö_ª˚ive
(
p‹t_öfo_t
 *
öfo
,

1141 
uöt8_t
 
lid
,

1142 
πe_mbuf
 *
pkts_bur°
[])

1144 
uöt8_t
 
pid
;

1145 
uöt16_t
 
qid
, 
nb_rx
;

1146 
ˇ±uª_t
 *
ˇ±uª
;

1148 
pid
 = 
öfo
->pid;

1149 
qid
 = 
	`gë_rxque
(
pktgí
.
l2p
, 
lid
, 
pid
);

1154 i‡–(
nb_rx
 = 
	`πe_ëh_rx_bur°
(
pid
, 
qid
, 
pkts_bur°
, 
öfo
->
tx_bur°
)) == 0)

1157 
öfo
->
q
[
qid
].
rx_˙t
 +
nb_rx
;

1159 
	`pktgí_ªcv_œãncy
(
öfo
, 
pkts_bur°
, 
nb_rx
);

1162 
	`pktgí_∑ckë_˛assify_bulk
(
pkts_bur°
, 
nb_rx
, 
pid
);

1164 i‡(
	`u∆ikñy
(
öfo
->
dump_cou¡
 > 0))

1165 
	`pktgí_∑ckë_dump_bulk
(
pkts_bur°
, 
nb_rx
, 
pid
);

1167 i‡(
	`u∆ikñy
(
	`πe_©omic32_ªad
(&
öfo
->
p‹t_Êags
Ë& 
CAPTURE_PKTS
)) {

1168 
ˇ±uª
 = &
pktgí
.ˇ±uª[pktgí.
c‹e_öfo
[
lid
].
s
.
sockë_id
];

1169 i‡(
	`u∆ikñy
((
ˇ±uª
->
p‹t
 =
pid
) &&

1170 (
ˇ±uª
->
lc‹e
 =
lid
)))

1171 
	`pktgí_∑ckë_ˇ±uª_bulk
(
pkts_bur°
, 
nb_rx
, 
ˇ±uª
);

1174 
	`πe_pktmbuf_‰ì_bulk
(
pkts_bur°
, 
nb_rx
);

1175 
	}
}

1178 
	$p‹t_m≠_öfo
(
uöt8_t
 
lid
, 
p‹t_öfo_t
 **
öfos
, uöt8_à*
qids
,

1179 
uöt8_t
 *
tx˙t
, uöt8_à*
rx˙t
, c⁄° *
msg
)

1181 
uöt8_t
 
idx
, 
pid
, 
˙t
 = 0;

1182 
uöt8_t
 
rx
, 
tx
;

1183 
buf
[256];

1185 
rx
 = 
	`gë_lc‹e_rx˙t
(
pktgí
.
l2p
, 
lid
);

1186 
tx
 = 
	`gë_lc‹e_tx˙t
(
pktgí
.
l2p
, 
lid
);

1188 i‡(
tx˙t
 && 
rx˙t
) {

1189 *
rx˙t
 = 
rx
;

1190 *
tx˙t
 = 
tx
;

1191 
˙t
 = 
tx
;

1192 } i‡(
rx˙t
) {

1193 *
rx˙t
 = 
rx
;

1194 
˙t
 = 
rx
;

1195 } i‡(
tx˙t
) {

1196 *
tx˙t
 = 
tx
;

1197 
˙t
 = 
tx
;

1200 
	`¢¥ötf
(
buf
, (buf), " %sÖrocessingÜcore: %3dÑx: %2dÅx: %2d",

1201 
msg
, 
lid
, 
rx
, 
tx
);

1203 
idx
 = 0; idx < 
˙t
; idx++) {

1204 i‡(
rx˙t
)

1205 
pid
 = 
	`gë_rx_pid
(
pktgí
.
l2p
, 
lid
, 
idx
);

1207 
pid
 = 
	`gë_tx_pid
(
pktgí
.
l2p
, 
lid
, 
idx
);

1209 i‡((
öfos
[
idx
] = 
	`gë_p‹t_¥iv©e
(
pktgí
.
l2p
, 
pid
)Ë=
NULL
)

1210 
	`πe_∑nic
("C⁄figÉº‹: Nÿp‹à%d foundáà%dÜc‹e\n", 
pid
, 
lid
);

1212 i‡(
qids
)

1213 
qids
[
idx
] = 
	`gë_txque
(
pktgí
.
l2p
, 
lid
, 
pid
);

1216 
	`pktgí_log_öfo
("%s", 
buf
);

1217 
	}
}

1233 
	$pktgí_maö_rxtx_lo›
(
uöt8_t
 
lid
)

1235 
πe_mbuf
 *
pkts_bur°
[
DEFAULT_PKT_BURST
];

1236 
p‹t_öfo_t
 *
öfos
[
RTE_MAX_ETHPORTS
];

1237 
uöt8_t
 
qids
[
RTE_MAX_ETHPORTS
];

1238 
uöt8_t
 
idx
, 
tx˙t
, 
rx˙t
;

1239 
uöt64_t
 
cuº_tsc
;

1240 
uöt64_t
 
tx_√xt_cy˛e
;

1241 
uöt64_t
 
tx_b⁄d_cy˛e
;

1242 
uöt32_t
 
Êags
;

1244 
	`mem£t
(
öfos
, '\0', (infos));

1245 
	`mem£t
(
qids
, '\0', (qids));

1247 
	`p‹t_m≠_öfo
(
lid
, 
öfos
, 
qids
, &
tx˙t
, &
rx˙t
, "RX/TX");

1249 
tx_√xt_cy˛e
 = 
	`πe_gë_tsc_cy˛es
(Ë+ 
öfos
[0]->
tx_cy˛es
;

1250 
tx_b⁄d_cy˛e
 = 
	`πe_gë_tsc_cy˛es
(Ë+ 
	`πe_gë_timî_hz
()/10;

1252 
	`pg_°¨t_lc‹e
(
pktgí
.
l2p
, 
lid
);

1254 i‡(
rx˙t
 == 0)

1255 
	`πe_∑nic
("Nÿp‹t†found f‹ %dÜc‹e\n", 
lid
);

1257 
	`¥ötf
("F‹ RX found %dÖ‹t(sËf‹Üc‹ê%d\n", 
rx˙t
, 
lid
);

1258 
idx
 = 0; idx < 
rx˙t
; idx++) {

1259 i‡(
öfos
[
idx
] =
NULL
)

1260 
	`πe_∑nic
("InvÆid RX c⁄fig:Ö‹à© index %dÇŸ found f‹ %dÜc‹e\n", 
idx
, 
lid
);

1263 i‡(
tx˙t
 == 0)

1264 
	`πe_∑nic
("Nÿp‹t†found f‹ %dÜc‹e\n", 
lid
);

1266 
	`¥ötf
("F‹ TX found %dÖ‹t(sËf‹Üc‹ê%d\n", 
rx˙t
, 
lid
);

1267 
idx
 = 0; idx < 
tx˙t
; idx++) {

1268 i‡(
öfos
[
idx
] =
NULL
)

1269 
	`πe_∑nic
("InvÆid TX c⁄fig:Ö‹à© index %dÇŸ found f‹ %dÜc‹e\n", 
idx
, 
lid
);

1272 
	`pg_lc‹e_is_ru¬ög
(
pktgí
.
l2p
, 
lid
)) {

1273 
idx
 = 0; idx < 
rx˙t
; idx++)

1274 
	`pktgí_maö_ª˚ive
(
öfos
[
idx
], 
lid
, 
pkts_bur°
);

1276 
cuº_tsc
 = 
	`πe_gë_tsc_cy˛es
();

1279 i‡(
cuº_tsc
 >
tx_√xt_cy˛e
) {

1280 
tx_√xt_cy˛e
 = 
cuº_tsc
 + 
öfos
[0]->
tx_cy˛es
;

1282 
idx
 = 0; idx < 
tx˙t
; idx++)

1283 
	`pktgí_maö_å™smô
(
öfos
[
idx
], 
qids
[idx]);

1284 } i‡(
cuº_tsc
 >
tx_b⁄d_cy˛e
) {

1285 
tx_b⁄d_cy˛e
 = 
cuº_tsc
 + 
	`πe_gë_timî_hz
()/10;

1286 
idx
 = 0; idx < 
tx˙t
; idx++) {

1287 
Êags
 = 
	`πe_©omic32_ªad
(&
öfos
[
idx
]->
p‹t_Êags
);

1288 i‡(
Êags
 & 
BONDING_TX_PACKETS
) {

1289 
	`πe_ëh_tx_bur°
(
öfos
[
idx
]->
pid
, 
qids
[idx], 
NULL
, 0);

1295 
	`pktgí_log_debug
("Exô %d", 
lid
);

1297 
	`pktgí_exô_˛ónup
(
lid
);

1298 
	}
}

1313 
	$pktgí_maö_tx_lo›
(
uöt8_t
 
lid
)

1315 
uöt8_t
 
idx
, 
tx˙t
;

1316 
p‹t_öfo_t
 *
öfos
[
RTE_MAX_ETHPORTS
];

1317 
uöt8_t
 
qids
[
RTE_MAX_ETHPORTS
];

1318 
uöt64_t
 
cuº_tsc
;

1319 
uöt64_t
 
tx_√xt_cy˛e
;

1320 
uöt64_t
 
tx_b⁄d_cy˛e
;

1321 
uöt32_t
 
Êags
;

1323 
	`mem£t
(
öfos
, '\0', (infos));

1324 
	`mem£t
(
qids
, '\0', (qids));

1325 
	`p‹t_m≠_öfo
(
lid
, 
öfos
, 
qids
, &
tx˙t
, 
NULL
, "TX");

1327 
tx_√xt_cy˛e
 = 
	`πe_gë_tsc_cy˛es
(Ë+ 
öfos
[0]->
tx_cy˛es
;

1328 
tx_b⁄d_cy˛e
 = 
	`πe_gë_tsc_cy˛es
(Ë+ 
	`πe_gë_timî_hz
()/10;

1330 
	`pg_°¨t_lc‹e
(
pktgí
.
l2p
, 
lid
);

1332 i‡(
tx˙t
 == 0)

1333 
	`πe_∑nic
("Nÿp‹t†found f‹ %dÜc‹e\n", 
lid
);

1335 
	`¥ötf
("F‹ TX found %dÖ‹t(sËf‹Üc‹ê%d\n", 
tx˙t
, 
lid
);

1336 
idx
 = 0;idx < 
tx˙t
; idx++) {

1337 i‡(
öfos
[
idx
] =
NULL
)

1338 
	`πe_∑nic
("InvÆid TX c⁄fig:Ö‹à© index %dÇŸ found f‹ %dÜc‹e\n", 
idx
, 
lid
);

1341 
idx
 = 0;

1342 
	`pg_lc‹e_is_ru¬ög
(
pktgí
.
l2p
, 
lid
)) {

1343 
cuº_tsc
 = 
	`πe_gë_tsc_cy˛es
();

1346 i‡(
cuº_tsc
 >
tx_√xt_cy˛e
) {

1347 
tx_√xt_cy˛e
 = 
cuº_tsc
 + 
öfos
[0]->
tx_cy˛es
;

1349 
idx
 = 0; idx < 
tx˙t
; idx++)

1350 
	`pktgí_maö_å™smô
(
öfos
[
idx
], 
qids
[idx]);

1351 } i‡(
cuº_tsc
 >
tx_b⁄d_cy˛e
) {

1352 
tx_b⁄d_cy˛e
 = 
cuº_tsc
 + 
	`πe_gë_timî_hz
()/10;

1353 
idx
 = 0; idx < 
tx˙t
; idx++) {

1354 
Êags
 = 
	`πe_©omic32_ªad
(&
öfos
[
idx
]->
p‹t_Êags
);

1355 i‡(
Êags
 & 
BONDING_TX_PACKETS
) {

1356 
	`πe_ëh_tx_bur°
(
öfos
[
idx
]->
pid
, 
qids
[idx], 
NULL
, 0);

1362 
	`pktgí_log_debug
("Exô %d", 
lid
);

1364 
	`pktgí_exô_˛ónup
(
lid
);

1365 
	}
}

1381 
	$pktgí_maö_rx_lo›
(
uöt8_t
 
lid
)

1383 
πe_mbuf
 *
pkts_bur°
[
DEFAULT_PKT_BURST
];

1384 
uöt8_t
 
idx
, 
rx˙t
;

1385 
p‹t_öfo_t
 *
öfos
[
RTE_MAX_ETHPORTS
];

1387 
	`mem£t
(
öfos
, '\0', (infos));

1388 
	`p‹t_m≠_öfo
(
lid
, 
öfos
, 
NULL
, NULL, &
rx˙t
, "RX");

1390 
	`pg_°¨t_lc‹e
(
pktgí
.
l2p
, 
lid
);

1392 i‡(
rx˙t
 == 0)

1393 
	`πe_∑nic
("Nÿp‹t†found f‹ %dÜc‹e\n", 
lid
);

1395 
	`¥ötf
("F‹ RX found %dÖ‹t(sËf‹Üc‹ê%d\n", 
rx˙t
, 
lid
);

1396 
idx
 = 0; idx < 
rx˙t
; idx++) {

1397 i‡(
öfos
[
idx
] =
NULL
)

1398 
	`πe_∑nic
("InvÆid RX c⁄fig:Ö‹à© index %dÇŸ found f‹ %dÜc‹e\n", 
idx
, 
lid
);

1401 
	`pg_lc‹e_is_ru¬ög
(
pktgí
.
l2p
, 
lid
))

1402 
idx
 = 0; idx < 
rx˙t
; idx++)

1403 
	`pktgí_maö_ª˚ive
(
öfos
[
idx
], 
lid
, 
pkts_bur°
);

1405 
	`pktgí_log_debug
("Exô %d", 
lid
);

1407 
	`pktgí_exô_˛ónup
(
lid
);

1408 
	}
}

1423 
	$pktgí_œunch_⁄e_lc‹e
(*
¨g
 
__πe_unu£d
)

1425 
uöt8_t
 
lid
 = 
	`πe_lc‹e_id
();

1427 i‡(
	`pktgí_has_w‹k
())

1430 
	`πe_dñay_ms
((
lid
 + 1) * 21);

1432 
	`gë_ty≥
(
pktgí
.
l2p
, 
lid
)) {

1433 
RX_TYPE
: 
	`pktgí_maö_rx_lo›
(
lid
); ;

1434 
TX_TYPE
: 
	`pktgí_maö_tx_lo›
(
lid
); ;

1435 (
RX_TYPE
 | 
TX_TYPE
): 
	`pktgí_maö_rxtx_lo›
(
lid
); ;

1438 
	}
}

1441 
	$_∑ge_di•œy
()

1443 
cou¡î
 = 0;

1445 
	`pktgí_di•œy_£t_cﬁ‹
("top.spinner");

1446 
	`s¸n_¥ötf
(1, 1, "%c", "-\\|/"[(
cou¡î
++ & 3)]);

1447 
	`pktgí_di•œy_£t_cﬁ‹
(
NULL
);

1449 i‡(
pktgí
.
Êags
 & 
CPU_PAGE_FLAG
)

1450 
	`pktgí_∑ge_˝u
();

1451 i‡(
pktgí
.
Êags
 & 
PCAP_PAGE_FLAG
)

1452 
	`pktgí_∑ge_pˇp
(
pktgí
.
p‹tNum
);

1453 i‡(
pktgí
.
Êags
 & 
RANGE_PAGE_FLAG
)

1454 
	`pktgí_∑ge_ønge
();

1455 i‡(
pktgí
.
Êags
 & 
CONFIG_PAGE_FLAG
)

1456 
	`pktgí_∑ge_c⁄fig
();

1457 i‡(
pktgí
.
Êags
 & 
SEQUENCE_PAGE_FLAG
)

1458 
	`pktgí_∑ge_£q
(
pktgí
.
p‹tNum
);

1459 i‡(
pktgí
.
Êags
 & 
RND_BITFIELD_PAGE_FLAG
)

1460 
	`pktgí_∑ge_øndom_bôfõlds
(
pktgí
.
Êags
 & 
PRINT_LABELS_FLAG
,

1461 
pktgí
.
p‹tNum
,

1462 
pktgí
.
öfo
[pktgí.
p‹tNum
].
∫d_bôfõlds
);

1463 i‡(
pktgí
.
Êags
 & 
LOG_PAGE_FLAG
)

1464 
	`pktgí_∑ge_log
(
pktgí
.
Êags
 & 
PRINT_LABELS_FLAG
);

1465 i‡(
pktgí
.
Êags
 & 
LATENCY_PAGE_FLAG
)

1466 
	`pktgí_∑ge_œãncy
();

1467 i‡(
pktgí
.
Êags
 & 
STATS_PAGE_FLAG
)

1468 
	`pktgí_∑ge_phys_°©s
();

1470 
	`pktgí_∑ge_°©s
();

1471 
	}
}

1486 
	$pktgí_∑ge_di•œy
(
πe_timî
 *
tim
 
__πe_unu£d
, *
¨g
 __rte_unused)

1488 
upd©e_di•œy
 = 1;

1491 i‡(
	`s¸n_is_∑u£d
())

1494 
	`s¸n_ßve
();

1496 i‡(
pktgí
.
Êags
 & 
UPDATE_DISPLAY_FLAG
) {

1497 
pktgí
.
Êags
 &~
UPDATE_DISPLAY_FLAG
;

1498 
upd©e_di•œy
 = 1;

1501 
upd©e_di•œy
--;

1502 i‡(
upd©e_di•œy
 == 0) {

1503 
upd©e_di•œy
 = 
UPDATE_DISPLAY_TICK_INTERVAL
;

1504 
	`_∑ge_di•œy
();

1506 i‡(
pktgí
.
Êags
 & 
PRINT_LABELS_FLAG
)

1507 
pktgí
.
Êags
 &~
PRINT_LABELS_FLAG
;

1510 
	`s¸n_ª°‹e
();

1512 
	`pktgí_¥öt_∑ckë_dump
();

1513 
	}
}

1515 
πe_timî
 
	gtimî0
;

1516 
πe_timî
 
	gtimî1
;

1531 
	$πe_timî_£tup
()

1533 
lc‹e_id
 = 
	`πe_gë_ma°î_lc‹e
();

1536 
	`πe_timî_subsy°em_öô
();

1539 
	`πe_timî_öô
(&
timî0
);

1540 
	`πe_timî_öô
(&
timî1
);

1543 
	`πe_timî_ª£t
(&
timî0
,

1544 
UPDATE_DISPLAY_TICK_RATE
,

1545 
PERIODICAL
,

1546 
lc‹e_id
,

1547 
pktgí_∑ge_di•œy
,

1548 
NULL
);

1551 
	`πe_timî_ª£t
(&
timî1
,

1552 
pktgí
.
hz
,

1553 
PERIODICAL
,

1554 
lc‹e_id
,

1555 
pktgí_¥o˚ss_°©s
,

1556 
NULL
);

1557 
	}
}

	@app/pktgen.h

9 #i‚de‡
_PKTGEN_H_


10 
	#_PKTGEN_H_


	)

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<°döt.h
>

15 
	~<öây≥s.h
>

16 
	~<sys/ty≥s.h
>

17 
	~<uni°d.h
>

18 
	~<°rög.h
>

19 
	~<sys/queue.h
>

20 
	~<√töë/ö.h
>

21 
	~<√t/if.h
>

22 
	~<f˙é.h
>

23 
	~<£tjmp.h
>

24 
	~<°d¨g.h
>

25 
	~<˘y≥.h
>

26 
	~<î∫o.h
>

27 
	~<gë›t.h
>

28 
	~<ãrmios.h
>

29 
	~<sys/io˘l.h
>

30 
	~<libgí.h
>

31 
	~<löux/if_tun.h
>

32 
	~<¨∑/öë.h
>

33 
	~<√tdb.h
>

34 
	~<pﬁl.h
>

35 
	~<as£π.h
>

36 
	~<time.h
>

38 
	~<πe_vîsi⁄.h
>

39 
	~<πe_c⁄fig.h
>

41 
	~<πe_î∫o.h
>

42 
	~<πe_log.h
>

43 
	~<πe_èûq.h
>

44 
	~<πe_comm⁄.h
>

45 
	~<πe_mem‹y.h
>

46 
	~<πe_mem˝y.h
>

47 
	~<πe_memz⁄e.h
>

48 
	~<πe_mÆloc.h
>

49 
	~<πe_ól.h
>

50 
	~<πe_≥r_lc‹e.h
>

51 
	~<πe_œunch.h
>

52 
	~<πe_©omic.h
>

53 
	~<πe_cy˛es.h
>

54 
	~<πe_¥e„tch.h
>

55 
	~<πe_lc‹e.h
>

56 
	~<πe_bønch_¥edi˘i⁄.h
>

57 
	~<πe_pci.h
>

58 
	~<πe_øndom.h
>

59 
	~<πe_timî.h
>

60 
	~<πe_ëhî.h
>

61 
	~<πe_ëhdev.h
>

62 
	~<πe_rög.h
>

63 
	~<πe_mempoﬁ.h
>

64 
	~<πe_mbuf.h
>

65 
	~<πe_ù.h
>

66 
	~<πe_udp.h
>

67 
	~<πe_t˝.h
>

69 
	~<c›yright_öfo.h
>

70 
	~<l2p.h
>

71 
	~<p‹t_c⁄fig.h
>

72 
	~<c‹e_öfo.h
>

74 
	~<_pˇp.h
>

75 
	~<pg_öë.h
>

76 
	~<cksum.h
>

78 
	~<cy˛es.h
>

79 
	~<mbuf.h
>

80 
	~<c‹em≠.h
>

81 
	~<ls˝u.h
>

82 
	~<utûs.h
>

84 
	~"pktgí-p‹t-cfg.h
"

85 
	~"pktgí-ˇ±uª.h
"

86 
	~"pktgí-log.h
"

87 
	~"pktgí-œãncy.h
"

88 
	~"pktgí-£q.h
"

90 
	~<˛i.h
>

92 #ifde‡
__˝lu•lus


96 
	#PKTGEN_VERSION
 "3.4.9"

	)

97 
	#PKTGEN_APP_NAME
 "Pktgí"

	)

98 
	#PKTGEN_CREATED_BY
 "Keôh Wûes"

	)

100 
	#MAX_MATRIX_ENTRIES
 128

	)

101 
	#MAX_STRING
 256

	)

102 
	#Mûli⁄
 (
uöt64_t
)(1000000ULL)

	)

104 
	#iBôsTŸÆ
(
_x
) \

105 (
uöt64_t
)(((
_x
.
ùackës
 * (
INTER_FRAME_GAP
 + 
PKT_PREAMBLE_SIZE
 + 
FCS_SIZE
)Ë+ _x.
ibyãs
Ë* 8)

	)

106 
	#oBôsTŸÆ
(
_x
) \

107 (
uöt64_t
)(((
_x
.
›ackës
 * (
INTER_FRAME_GAP
 + 
PKT_PREAMBLE_SIZE
 + 
FCS_SIZE
)Ë+ _x.
obyãs
Ë* 8)

	)

109 
	#_do
(
_exp
Ëdÿ{ _exp; } (0))

	)

111 
	#f‹Æl_p‹ts
(
_a˘i⁄
) \

113 
uöt32_t
 
pid
; \

114 
pid
 = 0;Öid < 
pktgí
.
nb_p‹ts
;Öid++) { \

115 
p‹t_öfo_t
 *
öfo
; \

116 
öfo
 = &
pktgí
.öfo[
pid
]; \

117 i‡(
öfo
->
£q_pkt
 =
NULL
) \

119 
_a˘i⁄
; \

121 } (0))

	)

123 
	#f‹óch_p‹t
(
_p‹éi°
, 
_a˘i⁄
) \

125 
uöt32_t
 *
_∂
 = (uöt32_à*)&
_p‹éi°
; \

126 
uöt32_t
 
pid
, 
idx
, 
bô
; \

127 
pid
 = 0;Öid < 
pktgí
.
nb_p‹ts
;Öid++) { \

128 
p‹t_öfo_t
 *
öfo
; \

129 
idx
 = (
pid
 / ((
uöt32_t
) * 8)); \

130 
bô
 = (
pid
 - (
idx
 * ((
uöt32_t
) * 8))); \

131 i‡–(
_∂
[
idx
] & (1 << 
bô
)) == 0) \

133 
öfo
 = &
pktgí
.öfo[
pid
]; \

134 i‡(
öfo
->
£q_pkt
 =
NULL
) \

136 
_a˘i⁄
; \

138 } (0))

	)

151 
ölöe
 
__©åibuã__
((
Æways_ölöe
))

152 
πe_pktmbuf_‰ì_bulk
(
πe_mbuf
 *
m_li°
[], 
öt16_t
 
≈kts
)

154 
πe_mbuf
 *
m
;

155 
≈kts
--) {

156 
m
 = *
m_li°
++;

157 
m
->
√xt
 = 0;

158 
πe_pktmbuf_‰ì
(
m
);

162 íum { 
PACKET_CONSUMED
 = 0, 
UNKNOWN_PACKET
 = 0xEEEE,

163 
DROP_PACKET
 = 0xFFFE, 
FREE_PACKET
 = 0xFFFF } 
	tpktTy≥_e
;

166 
MAX_SCRN_ROWS
 = 44,

167 
MAX_SCRN_COLS
 = 132,

169 
COLUMN_WIDTH_0
 = 20,

170 
COLUMN_WIDTH_1
 = 20,

171 
COLUMN_WIDTH_3
 = 22,

174 
PORT_STATE_ROWS
 = 1,

175 
LINK_STATE_ROWS
 = 4,

176 
PKT_SIZE_ROWS
 = 9,

177 
PKT_TOTALS_ROWS
 = 7,

178 
IP_ADDR_ROWS
 = 12,

180 
PORT_STATE_ROW
 = 2,

181 
LINK_STATE_ROW
 = (
PORT_STATE_ROW
 + 
PORT_STATE_ROWS
),

182 
PKT_SIZE_ROW
 = (
LINK_STATE_ROW
 + 
LINK_STATE_ROWS
),

183 
PKT_TOTALS_ROW
 = (
PKT_SIZE_ROW
 + 
PKT_SIZE_ROWS
),

184 
IP_ADDR_ROW
 = (
PKT_TOTALS_ROW
 + 
PKT_TOTALS_ROWS
),

186 
DEFAULT_NETMASK
 = 0xFFFFFF00,

187 
DEFAULT_IP_ADDR
 = (192 << 24) | (168 << 16),

188 
DEFAULT_TX_COUNT
 = 0,

189 
DEFAULT_TX_RATE
 = 100,

190 
DEFAULT_PRIME_COUNT
 = 1,

191 
DEFAULT_SRC_PORT
 = 1234,

192 
DEFAULT_DST_PORT
 = 5678,

193 
DEFAULT_PKT_NUMBER
 = 0x012345678,

194 
DEFAULT_ACK_NUMBER
 = 0x012345690,

195 
DEFAULT_WND_SIZE
 = 8192,

196 
MIN_VLAN_ID
 = 1,

197 
MAX_VLAN_ID
 = 4095,

198 
DEFAULT_VLAN_ID
 = 
MIN_VLAN_ID
,

199 
MIN_COS
 = 0,

200 
MAX_COS
 = 7,

201 
DEFAULT_COS
 = 
MIN_COS
,

202 
MIN_TOS
 = 0,

203 
MAX_TOS
 = 255,

204 
DEFAULT_TOS
 = 
MIN_TOS
,

205 
MAX_ETHER_TYPE_SIZE
 = 0x600,

206 
OVERHEAD_FUDGE_VALUE
 = 50,

208 
DEFAULT_PORTS_PER_PAGE
 = 4,

209 
VLAN_TAG_SIZE
 = 4,

210 
MAX_PRIME_COUNT
 = 4,

212 
NUM_SEQ_PKTS
 = 16,

213 
NUM_EXTRA_TX_PKTS
 = 8,

215 
FIRST_SEQ_PKT
 = 0,

216 
SINGLE_PKT
 = (
FIRST_SEQ_PKT
 + 
NUM_SEQ_PKTS
),

217 
PING_PKT
 = (
SINGLE_PKT
 + 1),

218 
RANGE_PKT
 = (
PING_PKT
 + 1),

219 
DUMP_PKT
 = (
RANGE_PKT
 + 1),

220 
EXTRA_TX_PKT
 = (
DUMP_PKT
 + 1),

221 
NUM_TOTAL_PKTS
 = (
EXTRA_TX_PKT
 + 
NUM_EXTRA_TX_PKTS
),

223 
INTER_FRAME_GAP
 = 12,

224 
PKT_PREAMBLE_SIZE
 = 8,

225 
FCS_SIZE
 = 4,

226 
MIN_PKT_SIZE
 = (
ETHER_MIN_LEN
 - 
FCS_SIZE
),

227 
MAX_PKT_SIZE
 = (
ETHER_MAX_LEN
 - 
FCS_SIZE
),

228 
MIN_v6_PKT_SIZE
 = (78 - 
FCS_SIZE
),

230 
MAX_RX_QUEUES
 = 16,

231 
MAX_TX_QUEUES
 = 16,

233 
PCAP_PAGE_SIZE
 = 25,

235 
SOCKET0
 = 0

238 
πe_mbuf
 
	tπe_mbuf_t
;

241 
ëhî_addr
 
addr
;

242 
uöt64_t
 
u64
;

243 } 
	tëhaddr_t
;

245 
	#MAX_PORT_DESC_SIZE
 132

	)

247 
	spktgí_s
 {

248 
cmdlöe
 *
˛
;

249 *
L
;

250 *
ho°«me
;

252 
öt32_t
 
sockë_p‹t
;

253 
uöt32_t
 
blökli°
;

254 
uöt32_t
 
Êags
;

255 
uöt16_t
 
idít
;

256 
uöt16_t
 
œ°_row
;

257 
uöt16_t
 
nb_p‹ts
;

258 
uöt8_t
 
°¨tög_p‹t
;

259 
uöt8_t
 
ídög_p‹t
;

260 
uöt8_t
 
nb_p‹ts_≥r_∑ge
;

262 
uöt16_t
 
nb_rxd
;

263 
uöt16_t
 
nb_txd
;

264 
uöt16_t
 
p‹tNum
;

265 
uöt16_t
 
p‹t_˙t
;

266 
uöt64_t
 
hz
;

268 (*
ˇŒout
)(*
ˇŒout_¨g
);

269 *
ˇŒout_¨g
;

271 
πe_pci_addr
 
bœckli°
[
RTE_MAX_ETHPORTS
];

272 
πe_pci_addr
 
p‹éi°
[
RTE_MAX_ETHPORTS
];

273 
uöt8_t
 *
p‹tdesc
[
RTE_MAX_ETHPORTS
];

274 
uöt32_t
 
p‹tdesc_˙t
;

275 
uöt32_t
 
bœckli°_˙t
;

278 
l2p_t
 *
l2p
;

280 
p‹t_öfo_t
 
öfo
[
RTE_MAX_ETHPORTS
];

281 
lc_öfo_t
 
c‹e_öfo
[
RTE_MAX_LCORE
];

282 
uöt16_t
 
c‹e_˙t
;

283 
uöt16_t
 
∑d0
;

284 
ls˝u_t
 *
ls˝u
;

285 *
u«me
;

286 
ëh_°©s_t
 
cumm_øã_tŸÆs
;

287 
uöt64_t
 
max_tŸÆ_ùackës
;

288 
uöt64_t
 
max_tŸÆ_›ackës
;

290 
±hªad_t
 
thªad
;

292 
uöt64_t
 
cou¡î
;

293 
uöt64_t
 
mem_u£d
;

294 
uöt64_t
 
tŸÆ_mem_u£d
;

295 
öt32_t
 
¨gc
;

296 *
¨gv
[64];

298 
ˇ±uª_t
 
ˇ±uª
[
RTE_MAX_NUMA_NODES
];

299 
uöt8_t
 
is_gui_ru¬ög
;

300 } 
	tpktgí_t
;

303 
CLEAR_FAST_ALLOC_FLAG
 = 0x00000001,

304 
DO_TX_FLUSH
 = 0x00000002

308 
PRINT_LABELS_FLAG
 = (1 << 0),

309 
MAC_FROM_ARP_FLAG
 = (1 << 1),

310 
PROMISCUOUS_ON_FLAG
 = (1 << 2),

311 
NUMA_SUPPORT_FLAG
 = (1 << 3),

312 
IS_SERVER_FLAG
 = (1 << 4),

313 
ENABLE_GUI_FLAG
 = (1 << 5),

314 
LUA_SHELL_FLAG
 = (1 << 6),

315 
TX_DEBUG_FLAG
 = (1 << 7),

316 
NŸ_USED
 = (1 << 8),

317 
FAKE_PORTS_FLAG
 = (1 << 9),

318 
BLINK_PORTS_FLAG
 = (1 << 10),

319 
ENABLE_THEME_FLAG
 = (1 << 11),

321 
CONFIG_PAGE_FLAG
 = (1 << 16),

322 
SEQUENCE_PAGE_FLAG
 = (1 << 17),

323 
RANGE_PAGE_FLAG
 = (1 << 18),

324 
PCAP_PAGE_FLAG
 = (1 << 19),

325 
CPU_PAGE_FLAG
 = (1 << 20),

326 
RND_BITFIELD_PAGE_FLAG
 = (1 << 21),

327 
LOG_PAGE_FLAG
 = (1 << 22),

328 
LATENCY_PAGE_FLAG
 = (1 << 23),

329 
STATS_PAGE_FLAG
 = (1 << 24),

331 
UPDATE_DISPLAY_FLAG
 = (1 << 31)

334 
	#UPDATE_DISPLAY_RATE
 1

	)

335 
	#UPDATE_DISPLAY_TICK_INTERVAL
 8

	)

336 
	#UPDATE_DISPLAY_TICK_RATE
 \

337 ((
pktgí
.
hz
 * 
UPDATE_DISPLAY_RATE
Ë/ 
UPDATE_DISPLAY_TICK_INTERVAL
)

	)

339 
	#PAGE_MASK_BITS
 (
CONFIG_PAGE_FLAG
 | 
SEQUENCE_PAGE_FLAG
 | \

340 
RANGE_PAGE_FLAG
 | \

341 
PCAP_PAGE_FLAG
 | 
CPU_PAGE_FLAG
 | \

342 
RND_BITFIELD_PAGE_FLAG
 | \

343 
LOG_PAGE_FLAG
 | 
LATENCY_PAGE_FLAG
 | 
STATS_PAGE_FLAG
)

	)

345 
pktgí_t
 
pktgí
;

347 
pktgí_∑ge_di•œy
(
πe_timî
 *
tim
, *
¨g
);

349 
pktgí_∑ckë_˘‹
(
p‹t_öfo_t
 *
öfo
, 
öt32_t
 
£q_idx
,

350 
öt32_t
 
ty≥
);

351 
pktgí_∑ckë_øã
(
p‹t_öfo_t
 *
öfo
);

353 
pktgí_£nd_mbuf
(
πe_mbuf
 *
m
, 
uöt8_t
 
pid
, 
uöt16_t
 
qid
);

355 
pkt_£q_t
 *
pktgí_föd_m©chög_ù§c
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
addr
);

356 
pkt_£q_t
 *
pktgí_föd_m©chög_ùd°
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
addr
);

358 
pktgí_œunch_⁄e_lc‹e
(*
¨g
);

359 
uöt64_t
 
pktgí_wúe_size
(
p‹t_öfo_t
 *
öfo
);

360 
pktgí_öput_°¨t
();

362 
πe_timî_£tup
();

364 
__ölöe__
 

365 
pktgí_£t_p‹t_Êags
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
Êags
) {

366 
uöt32_t
 
	gvÆ
;

369 
	gvÆ
 = 
πe_©omic32_ªad
(&
öfo
->
p‹t_Êags
);

370 
πe_©omic32_cmp£t
((vﬁ©ûê
uöt32_t
 *)&
öfo
->
p‹t_Êags
.
˙t
,

371 
vÆ
, (vÆ | 
Êags
)) == 0);

374 
__ölöe__
 

375 
pktgí_˛r_p‹t_Êags
(
p‹t_öfo_t
 *
öfo
, 
uöt32_t
 
Êags
) {

376 
uöt32_t
 
	gvÆ
;

379 
	gvÆ
 = 
πe_©omic32_ªad
(&
öfo
->
p‹t_Êags
);

380 
πe_©omic32_cmp£t
((vﬁ©ûê
uöt32_t
 *)&
öfo
->
p‹t_Êags
.
˙t
,

381 
vÆ
, (vÆ & ~
Êags
)) == 0);

384 
__ölöe__
 

385 
pktgí_£t_q_Êags
(
p‹t_öfo_t
 *
öfo
, 
uöt8_t
 
q
, 
uöt32_t
 
Êags
) {

386 
uöt32_t
 
	gvÆ
;

389 
	gvÆ
 = 
πe_©omic32_ªad
(&
öfo
->
q
[q].
Êags
);

390 
πe_©omic32_cmp£t
((vﬁ©ûê
uöt32_t
 *)&
öfo
->
q
[q].
Êags
.
˙t
,

391 
vÆ
, (vÆ | 
Êags
)) == 0);

394 
__ölöe__
 

395 
pktgí_˛r_q_Êags
(
p‹t_öfo_t
 *
öfo
, 
uöt8_t
 
q
, 
uöt32_t
 
Êags
) {

396 
uöt32_t
 
	gvÆ
;

399 
	gvÆ
 = 
πe_©omic32_ªad
(&
öfo
->
q
[q].
Êags
);

400 
πe_©omic32_cmp£t
((vﬁ©ûê
uöt32_t
 *)&
öfo
->
q
[q].
Êags
.
˙t
,

401 
vÆ
, (vÆ & ~
Êags
)) == 0);

405 íum { 
	gDISABLE_STATE
 = 0, 
	gENABLE_STATE
 = 1 };

407 
__ölöe__
 
uöt32_t


408 
e°©e
(c⁄° *
°©e
) {

409  ( !
°rˇ£cmp
(
°©e
, "on") ||

410 !
°rˇ£cmp
(
°©e
, "enable") ||

411 !
°rˇ£cmp
(
°©e
, "start") ) ?

412 
	gENABLE_STATE
 : 
DISABLE_STATE
;

420 
ölöe
 const *

421 
pktgí_vîsi⁄
() {

422 
	gpkt_vîsi⁄
[128];

424 
¢¥ötf
(
pkt_vîsi⁄
, (pkt_version),

425 "Vî: %†(%s)", 
PKTGEN_VERSION
, 
πe_vîsi⁄
());

426  
	gpkt_vîsi⁄
;

429 
__ölöe__
 *

430 
°rdupf
(*
°r
, c⁄° *
√w
) {

431 i‡(
	g°r
)

432 
‰ì
(
°r
);

433  (
	g√w
 =
NULL
Ë? NULL : 
°rdup
(
√w
);

449 
__ölöe__
 

450 
do_comm™d
(c⁄° *
cmd
, (*
di•œy
)(*, )) {

451 
FILE
 *
	gf
;

452 
	gi
;

453 *
	glöe
 = 
NULL
;

454 
size_t
 
	glöe_size
 = 0;

456 
	gf
 = 
p›í
(
cmd
, "r");

457 i‡(
	gf
 =
NULL
) {

458 
pktgí_log_îr‹
("U«bÀÅÿru¿'%s' comm™d", 
cmd
);

462 
	gi
 = 0;

463 
gëlöe
(&
löe
, &
löe_size
, 
f
) > 0)

464 
	gi
 = 
di•œy
(
löe
, 
i
);

466 i‡(
	gf
)

467 
f˛o£
(
f
);

468 i‡(
	glöe
)

469 
‰ì
(
löe
);

471  
	gi
;

474 #i‚de‡
MEMPOOL_F_DMA


475 
	#MEMPOOL_F_DMA
 0

	)

478 #ifde‡
__˝lu•lus


	@app/xorshift64star.h

10 #i‚de‡
_XORSHIFT64STAR_H_


11 
	#_XORSHIFT64STAR_H_


	)

13 
	~<°döt.h
>

15 #ifde‡
__˝lu•lus


19 
uöt64_t
 
x‹_°©e
[1];

21 
ölöe
 
uöt64_t


22 
x‹shi·64°¨
()

24 
uöt64_t
 
x
 = 
x‹_°©e
[0];

25 
x
 ^= x >> 12;

26 
x
 ^= x << 25;

27 
x
 ^= x >> 27;

28 
x‹_°©e
[0] = 
x
;

29  
x
 * 0x2545F4914F6CDD1D;

32 #ifde‡
__˝lu•lus


	@gui/pktgen-gui-cfg.h

8 #i‚de‡
_PKTGEN_GUI_CFG_H_


9 
	#_PKTGEN_GUI_CFG_H_


	)

11 
GtkWidgë
 *
	gwödow
 = 
NULL
;

13 c⁄° *
	gpktgí_°©ic_fõlds
[
PKTGEN_GUI_MAX_STATIC
] = {

29 c⁄° *
	gpktgí_°©s_fõlds
[
PKTGEN_GUI_MAX_STATS
] =

53 c⁄° 
	göãl_c›yright
[] = {

87 c⁄° 
gch¨
 *
	gauth‹s
[] = {"Created by:\n"

92 
	#GUI_VERSION
 " Vîsi⁄ 1.0.0 "

	)

93 
	#COPYRIGHT_MSG
 \

94 "C›yrighà(cË<2010-2017>, I¡ñ C‹p‹©i⁄. AŒÑight†ª£rved."

	)

95 
	#POWERED_BY_DPDK
 "GUI" 
GUI_VERSION
 "\¿Powîed by DPDK"

	)

96 
	#PKTGEN_GUI_APP_NAME
 ("Pktgí GUI" 
GUI_VERSION
)

	)

	@gui/pktgen-gui-misc.c

8 
	~"pktgí-gui.h
"

22 
gboﬁón


23 
	$check_íåy
(
GtkTªeSt‹e
 *
åì
, 
GtkTªeP©h
 *
∑th
)

25 
GtkTªeIãr
 
ôî
;

27  
	`gtk_åì_modñ_gë_ôî
(
	`GTK_TREE_MODEL
(
åì
), &
ôî
, 
∑th
);

28 
	}
}

43 
	$add_íåy
(
GtkTªeSt‹e
 *
åì
, 
GtkTªeP©h
 *
∑th
)

45 
göt
 
dïth
;

46 
göt
 *
ödi˚s
;

47 
göt
 
ödex
;

48 
GtkTªeIãr
 
ôî
;

51 
dïth
 = 
	`gtk_åì_∑th_gë_dïth
(
∑th
);

52 
ödi˚s
 = 
	`gtk_åì_∑th_gë_ödi˚s
(
∑th
);

53 
ödex
 = 
ödi˚s
[
dïth
 - 1];

55 i‡(!
	`check_íåy
(
åì
, 
∑th
)) {

56 i‡(
dïth
 == 1)

57 !(
	`gtk_åì_modñ_ôî_n_chûdªn
(
	`GTK_TREE_MODEL
(
åì
), 
NULL
Ë=(
ödex
 + 1)))

58 
	`gtk_åì_°‹e_≠≥nd
(
åì
, &
ôî
, 
NULL
);

60 
GtkTªeP©h
 *
∑ª¡_∑th
;

61 
GtkTªeIãr
 
∑ª¡
;

64 
∑ª¡_∑th
 = 
	`gtk_åì_∑th_c›y
(
∑th
);

65 
	`gtk_åì_∑th_up
(
∑ª¡_∑th
);

66 i‡(!
	`check_íåy
(
åì
, 
∑ª¡_∑th
))

67 
	`add_íåy
(
åì
, 
∑ª¡_∑th
);

69 
	`gtk_åì_modñ_gë_ôî
(
	`GTK_TREE_MODEL
(
åì
), &
∑ª¡
,

70 
∑ª¡_∑th
);

71 !(
	`gtk_åì_modñ_ôî_n_chûdªn
(

72 
	`GTK_TREE_MODEL
(
åì
),

73 &
∑ª¡
Ë=(
ödex
 + 1)))

74 
	`gtk_åì_°‹e_≠≥nd
(
åì
, &
ôî
, &
∑ª¡
);

76 
	`gtk_åì_∑th_‰ì
(
∑ª¡_∑th
);

79 
	}
}

94 
íabÀ_°ªam_ˇŒback
(
GtkCñlRídîîToggÀ
 *
˚Œ
,

95 
gch¨
 *
∑th
,

96 
gpoöãr
 
__©åibuã__
((
unu£d
)Ë
d©a
)

98 
GtkTªeIãr
 
	gôî
;

99 
gboﬁón
 
	ga˘ive
;

100 
p‹t_öfo_t
 *
	göfo
 = 
NULL
;

101 
pkt_£q_t
 *
	gpkt
 = 
NULL
;

102 
	gpid
 = 0, 
	g£q_id
 = 0;

104 
GtkTªeSñe˘i⁄
 *
	g£À˘i⁄_chassis
 = 
gtk_åì_võw_gë_£À˘i⁄
(

105 
GTK_TREE_VIEW
(
chassis_võw
));

107 
gtk_åì_£À˘i⁄_£À˘ed_f‹óch
(
£À˘i⁄_chassis
,

108 
åaffic_°ªam_gë_pid
,

109 (
gpoöãr
Ë& 
pid
);

111 
GtkTªeModñ
 *
	gmodñ
 =

112 
gtk_åì_võw_gë_modñ
(
GTK_TREE_VIEW
(
°ªam_võw
[
pid
]));

114 
g_obje˘_gë
(
G_OBJECT
(
˚Œ
), "a˘ive", &
a˘ive
, 
NULL
);

115 
gtk_åì_modñ_gë_ôî_‰om_°rög
(
modñ
, &
ôî
, 
∑th
);

116 
gtk_åì_°‹e_£t
(
GTK_TREE_STORE
(
modñ
), &
ôî
,

117 
TRAF_STR_SELECT
, !
a˘ive
, -1);

119 
gtk_åì_modñ_gë
(
modñ
, &
ôî
, 
TRAF_STR_NO
, &
£q_id
, -1);

121 
	göfo
 = &
pktgí
.
öfo
[
pid
];

122 
	gpkt
 = &
öfo
->
£q_pkt
[
£q_id
];

123 
	gpkt
->
	g£q_íabÀd
 = !
a˘ive
;

139 
digôs_sˇÀ_ˇŒback
(
GtkAdju°mít
 
__©åibuã__
((
unu£d
)Ë*
adj
)

142 
	gtx_øã
 = (
göt
)
adj
->
vÆue
;

143 
gtk_sˇÀ_£t_digôs
(
GTK_SCALE
(
hsˇÀ
), (
göt
)0);

159 
≠∂y_ˇŒback
(
GtkWidgë
 
__©åibuã__
(

160 (
unu£d
)Ë*
w
, 
gpoöãr
 
__©åibuã__
(

161 (
unu£d
)Ë
d©a
)

163 
guöt
 
	gÊag
 = 1;

164 
GtkTªeSñe˘i⁄
 *
	g£À˘i⁄
 = 
gtk_åì_võw_gë_£À˘i⁄
(

165 
GTK_TREE_VIEW
(
chassis_võw
));

167 
gtk_åì_£À˘i⁄_£À˘ed_f‹óch
(
£À˘i⁄
,

168 
°ªam_≠∂y
,

169 (
gpoöãr
Ë& 
Êag
);

185 
°ªam_≠∂y
(
GtkTªeModñ
 *
modñ
,

186 
GtkTªeP©h
 
__©åibuã__
((
unu£d
)Ë*
∑th
,

187 
GtkTªeIãr
 *
ôî
,

188 
gpoöãr
 
u£rd©a
)

190 
gch¨
 *
	g«me
;

191 
p‹t_öfo_t
 *
	göfo
 = 
NULL
;

192 
	gpid
;

193 
guöt
 *
	gÊag
 = (guöà*)
u£rd©a
;

195 
gtk_åì_modñ_gë
(
modñ
, 
ôî
, 
COL_CHASSIS_PORTS
, &
«me
, -1);

197 i‡(0 !
g_°rcmp0
(
«me
, "[127.0.0.1]")) {

198 
	goff£t
 = 
°æí
(
«me
);

199 
	gpid
 = 
©oi
((
«me
 + 
off£t
) - 1);

200 
	göfo
 = &
pktgí
.
öfo
[
pid
];

201 i‡((
	göfo
 !
NULL
Ë&& (*
Êag
 == 1))

202 
pktgí_£t_tx_øã
(
öfo
, 
tx_øã
);

203 } i‡(*
	gÊag
 == 1)

204 
f‹Æl_p‹ts
(
pktgí_£t_tx_øã
(
öfo
, 
tx_øã
));

220 
	$vÆid©e_ù_addªss
(*
°
)

222 
num
, 
i
, 
Àn
;

223 *
ch
;

226 
quadsC¡
 = 0;

228 
Àn
 = 
	`°æí
(
°
);

231 i‡(
Àn
 < 7 ||Üen > 15)

234 
ch
 = 
	`°πok
(
°
, ".");

236 
ch
 !
NULL
) {

237 
quadsC¡
++;

239 
num
 = 0;

240 
i
 = 0;

243 
ch
[
i
] != '\0') {

244 
num
 =Çum * 10;

245 
num
 =Çum + (
ch
[
i
] - '0');

246 
i
++;

249 i‡(
num
 < 0 ||Çum > 255)

253 i‡–(
quadsC¡
 =1 && 
num
 == 0) || (quadsCnt == 4 &&Çum == 0))

257 
ch
 = 
	`°πok
(
NULL
, ".");

261 i‡(
quadsC¡
 != 4)

266 
	}
}

281 
åaffic_°ªam_gë_£q_id
(
GtkTªeModñ
 *
modñ
,

282 
GtkTªeP©h
 
__©åibuã__
((
unu£d
)Ë*
∑th
,

283 
GtkTªeIãr
 *
ôî
,

284 
gpoöãr
 
d©a
)

286 *
	g£q_id
 = (*)
d©a
;

288 
gtk_åì_modñ_gë
(
modñ
, 
ôî
, 
TRAF_STR_NO
, 
£q_id
, -1);

304 
åaffic_°ªam_gë_pid
(
GtkTªeModñ
 *
modñ
,

305 
GtkTªeP©h
 
__©åibuã__
((
unu£d
)Ë*
∑th
,

306 
GtkTªeIãr
 *
ôî
,

307 
gpoöãr
 
d©a
)

309 *
	gpid
 = (*)
d©a
;

310 
gch¨
 *
	g«me
;

312 
gtk_åì_modñ_gë
(
modñ
, 
ôî
, 
COL_CHASSIS_PORTS
, &
«me
, -1);

314 i‡(0 !
g_°rcmp0
(
«me
, "[127.0.0.1]")) {

315 
	goff£t
 = 
°æí
(
«me
);

316 *
	gpid
 = 
©oi
((
«me
 + 
off£t
) - 1);

333 
	$hex_to_numbî
(
c
)

335 i‡(
c
 >= '0' && c <= '9')

336  
c
 - '0';

337 i‡(
c
 >= 'a' && c <= 'f')

338  
c
 - 'a' + 10;

339 i‡(
c
 >= 'A' && c <= 'F')

340  
c
 - 'A' + 10;

342 
	}
}

357 
	$ascii_to_numbî
(c⁄° *
txt
, *
addr
, 
Àn
)

359 
i
;

361 
i
 = 0; i < 
Àn
; i++) {

362 
a
, 
b
;

363 
a
 = 
	`hex_to_numbî
(*
txt
++);

364 i‡(
a
 < 0)

366 
b
 = 
	`hex_to_numbî
(*
txt
++);

367 i‡(
b
 < 0)

369 *
addr
++ = (
a
 << 4Ë| 
b
;

372 
	}
}

	@gui/pktgen-gui-streams.c

8 
	~"pktgí-gui.h
"

9 
	~"pktgí-gui-°ªams.h
"

24 
	$fûl_¥Ÿo_fõld_öfo
(
¥Ÿo_ty≥
 
ty≥
, 
pid
, 
£q_id
)

26 
uöt
 
i
 = 0;

27 
¥Ÿocﬁ
 
vÆ
;

28 
size
;

30 
p‹t_öfo_t
 *
öfo
 = 
NULL
;

31 
pkt_£q_t
 *
pkt
 = 
NULL
;

33 
öfo
 = &
pktgí
.öfo[
pid
];

34 
pkt
 = &
öfo
->
£q_pkt
[
£q_id
];

35 
buff
[50];

37 
	`g_ªtu∫_if_Áû
(
∑ckë_öfo
 !
NULL
);

38 i‡(
pkt
 =
NULL
)

39 
pkt
 = &
öfo
->
£q_pkt
[
SINGLE_PKT
];

41 i‡(
ty≥
 =
TYPE_ETH
) {

42 
ëhî_addr
 *
óddr
 = &
pkt
->
ëh_d°_addr
;

43 
vÆ
.
«me
 = 
	`g_°rdup
(
pktgí_ëhî√t_fõlds
[
i
++]);

44 
	`¢¥ötf
(
buff
, (buff), "%02x%02x%02x%02x%02x%02x",

45 
óddr
->
addr_byãs
[0],Éaddr->addr_bytes[1],

46 
óddr
->
addr_byãs
[2],Éaddr->addr_bytes[3],

47 
óddr
->
addr_byãs
[4],Éaddr->addr_bytes[5]);

49 
vÆ
.
vÆue
 = 
	`g_°rdup
(
buff
);

50 
	`g_¨øy_≠≥nd_vÆs
(
∑ckë_öfo
, &
vÆ
, 1);

52 
vÆ
.
«me
 = 
	`g_°rdup
(
pktgí_ëhî√t_fõlds
[
i
++]);

53 
óddr
 = &
pkt
->
ëh_§c_addr
;

54 
	`¢¥ötf
(
buff
, (buff), "%02x%02x%02x%02x%02x%02x",

55 
óddr
->
addr_byãs
[0],Éaddr->addr_bytes[1],

56 
óddr
->
addr_byãs
[2],Éaddr->addr_bytes[3],

57 
óddr
->
addr_byãs
[4],Éaddr->addr_bytes[5]);

59 
vÆ
.
vÆue
 = 
	`g_°rdup
(
buff
);

60 
	`g_¨øy_≠≥nd_vÆs
(
∑ckë_öfo
, &
vÆ
, 1);

62 
vÆ
.
«me
 = 
	`g_°rdup
(
pktgí_ëhî√t_fõlds
[
i
++]);

63 
vÆ
.
vÆue
 = 
	`g_°rdup
("IPv4");

64 
	`g_¨øy_≠≥nd_vÆs
(
∑ckë_öfo
, &
vÆ
, 1);

66 i‡(
	`πe_©omic32_ªad
(&
öfo
->
p‹t_Êags
Ë& 
SEND_VLAN_ID
)

67 
	`g_obje˘_£t
(
	`G_OBJECT
(
°ªam_l2_vœn
), "a˘ive", 
TRUE
,

68 
NULL
);

70 
	`g_obje˘_£t
(
	`G_OBJECT
(
°ªam_l2_vœn
), "a˘ive", 
FALSE
,

71 
NULL
);

73 
	`•rötf
(
buff
, "%d", 
pkt
->
vœnid
);

74 
vÆ
.
«me
 = 
	`g_°rdup
(
pktgí_ëhî√t_fõlds
[
i
++]);

75 
vÆ
.
vÆue
 = 
	`g_°rdup
(
buff
);

76 
	`g_¨øy_≠≥nd_vÆs
(
∑ckë_öfo
, &
vÆ
, 1);

78 
size
 = (
pkt
->
pktSize
 + 
FCS_SIZE
);

79 
	`•rötf
(
buff
, "%d", 
size
);

80 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
pktsize_íåy
), 
buff
);

82 
	`•rötf
(
buff
, "%x", 
pkt
->
ùPrŸo
);

83 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ù_¥Ÿo_íåy
), 
buff
);

84 
	`gtk_íåy_£t_edôabÀ
(
	`GTK_ENTRY
(
ù_¥Ÿo_íåy
), 
FALSE
);

85 } i‡(
ty≥
 =
TYPE_IPv4
) {

86 
vÆ
.
«me
 = 
	`g_°rdup
(
pktgí_ùv4_fõlds
[
i
++]);

87 
vÆ
.
vÆue
 = 
	`g_°rdup
("IPv4");

88 
	`g_¨øy_≠≥nd_vÆs
(
∑ckë_öfo
, &
vÆ
, 1);

90 
vÆ
.
«me
 = 
	`g_°rdup
(
pktgí_ùv4_fõlds
[
i
++]);

91 
vÆ
.
vÆue
 = 
	`g_°rdup
("<auto>");

92 
	`g_¨øy_≠≥nd_vÆs
(
∑ckë_öfo
, &
vÆ
, 1);

94 
vÆ
.
«me
 = 
	`g_°rdup
(
pktgí_ùv4_fõlds
[
i
++]);

95 
vÆ
.
vÆue
 = 
	`g_°rdup
("<auto>");

96 
	`g_¨øy_≠≥nd_vÆs
(
∑ckë_öfo
, &
vÆ
, 1);

98 
vÆ
.
«me
 = 
	`g_°rdup
(
pktgí_ùv4_fõlds
[
i
++]);

99 
vÆ
.
vÆue
 = 
	`g_°rdup
("<auto>");

100 
	`g_¨øy_≠≥nd_vÆs
(
∑ckë_öfo
, &
vÆ
, 1);

102 
vÆ
.
«me
 = 
	`g_°rdup
(
pktgí_ùv4_fõlds
[
i
++]);

103 
vÆ
.
vÆue
 = 
	`g_°rdup
("<auto>");

104 
	`g_¨øy_≠≥nd_vÆs
(
∑ckë_öfo
, &
vÆ
, 1);

106 
vÆ
.
«me
 = 
	`g_°rdup
(
pktgí_ùv4_fõlds
[
i
++]);

107 
vÆ
.
vÆue
 = 
	`g_°rdup
("<auto>");

108 
	`g_¨øy_≠≥nd_vÆs
(
∑ckë_öfo
, &
vÆ
, 1);

110 
vÆ
.
«me
 = 
	`g_°rdup
(
pktgí_ùv4_fõlds
[
i
++]);

111 
vÆ
.
vÆue
 = 
	`g_°rdup
("<auto>");

112 
	`g_¨øy_≠≥nd_vÆs
(
∑ckë_öfo
, &
vÆ
, 1);

114 
vÆ
.
«me
 = 
	`g_°rdup
(
pktgí_ùv4_fõlds
[
i
++]);

115 
vÆ
.
vÆue
 = 
	`g_°rdup
(

116 (
pkt
->
ùPrŸo
 ==

117 
PG_IPPROTO_UDP
) ? "UDP" : "User Defined");

118 
	`g_¨øy_≠≥nd_vÆs
(
∑ckë_öfo
, &
vÆ
, 1);

120 
vÆ
.
«me
 = 
	`g_°rdup
(
pktgí_ùv4_fõlds
[
i
++]);

121 
vÆ
.
vÆue
 = 
	`g_°rdup
("<auto>");

122 
	`g_¨øy_≠≥nd_vÆs
(
∑ckë_öfo
, &
vÆ
, 1);

124 
vÆ
.
«me
 = 
	`g_°rdup
(
pktgí_ùv4_fõlds
[
i
++]);

125 
vÆ
.
vÆue
 =

126 
	`g_°rdup
(
	`öë_¡›4
(
buff
, (buff),

127 
	`¡ohl
(
pkt
->
ù_§c_addr
.
addr
.
ùv4
.

128 
s_addr
),

130 
	`g_¨øy_≠≥nd_vÆs
(
∑ckë_öfo
, &
vÆ
, 1);

132 
vÆ
.
«me
 = 
	`g_°rdup
(
pktgí_ùv4_fõlds
[
i
++]);

133 
vÆ
.
vÆue
 =

134 
	`g_°rdup
(
	`öë_¡›4
(
buff
, (buff),

135 
	`¡ohl
(
pkt
->
ù_d°_addr
.
addr
.
ùv4
.

136 
s_addr
),

138 
	`g_¨øy_≠≥nd_vÆs
(
∑ckë_öfo
, &
vÆ
, 1);

139 } i‡(
ty≥
 =
TYPE_UDP
) {

140 
	`•rötf
(
buff
, "%d", 
pkt
->
•‹t
);

141 
vÆ
.
«me
 = 
	`g_°rdup
(
pktgí_udp_fõlds
[
i
++]);

142 
vÆ
.
vÆue
 = 
	`g_°rdup
(
buff
);

143 
	`g_¨øy_≠≥nd_vÆs
(
∑ckë_öfo
, &
vÆ
, 1);

145 
	`•rötf
(
buff
, "%d", 
pkt
->
dp‹t
);

146 
vÆ
.
«me
 = 
	`g_°rdup
(
pktgí_udp_fõlds
[
i
++]);

147 
vÆ
.
vÆue
 = 
	`g_°rdup
(
buff
);

148 
	`g_¨øy_≠≥nd_vÆs
(
∑ckë_öfo
, &
vÆ
, 1);

150 
vÆ
.
«me
 = 
	`g_°rdup
(
pktgí_udp_fõlds
[
i
++]);

151 
vÆ
.
vÆue
 = 
	`g_°rdup
("<auto>");

152 
	`g_¨øy_≠≥nd_vÆs
(
∑ckë_öfo
, &
vÆ
, 1);

154 
vÆ
.
«me
 = 
	`g_°rdup
(
pktgí_udp_fõlds
[
i
++]);

155 
vÆ
.
vÆue
 = 
	`g_°rdup
("<auto>");

156 
	`g_¨øy_≠≥nd_vÆs
(
∑ckë_öfo
, &
vÆ
, 1);

158 
	}
}

172 
GtkTªeModñ
 *

173 
	$¸óã_°ªam_modñ
(
¥Ÿo_ty≥
 
ty≥
, 
pid
, 
£q_id
)

175 
uöt
 
i
 = 0;

176 
GtkLi°St‹e
 *
modñ
;

177 
GtkTªeIãr
 
ôî
;

179 
	`fûl_¥Ÿo_fõld_öfo
(
ty≥
, 
pid
, 
£q_id
);

182 
modñ
 = 
	`gtk_li°_°‹e_√w
(
MAX_COLUMNS
, 
G_TYPE_STRING
, G_TYPE_STRING);

184 i‡(
ty≥
 =
TYPE_ETH
Ë
i
 = 0;

185 i‡(
ty≥
 =
TYPE_IPv4
Ë
i
 = 4;

186 i‡(
ty≥
 =
TYPE_UDP
Ë
i
 = 15;

189 ; 
i
 < 
∑ckë_öfo
->
Àn
; i++) {

190 
	`gtk_li°_°‹e_≠≥nd
(
modñ
, &
ôî
);

192 
	`gtk_li°_°‹e_£t
(
modñ
, &
ôî
,

193 
COLUMN_NAME
,

194 
	`g_¨øy_ödex
(
∑ckë_öfo
, 
¥Ÿocﬁ
, 
i
).
«me
,

195 
COLUMN_VALUE
,

196 
	`g_¨øy_ödex
(
∑ckë_öfo
,

197 
¥Ÿocﬁ
,

198 
i
).
vÆue
,

203  
	`GTK_TREE_MODEL
(
modñ
);

204 
	}
}

220 
	$˚Œ_edôed_ˇŒback
(
GtkCñlRídîîText
 *
˚Œ
,

221 c⁄° 
gch¨
 *
∑th_°rög
,

222 
gch¨
 *
√w_ãxt
,

223 
gpoöãr
 
d©a
)

225 
GtkTªeModñ
 *
modñ
 = (GtkTªeModñ *)
d©a
;

226 
GtkTªeP©h
 *
∑th
 = 
	`gtk_åì_∑th_√w_‰om_°rög
(
∑th_°rög
);

227 
GtkTªeIãr
 
ôî
;

228 
GtkTªeIãr
 
ôî_«me
;

230 
gch¨
 *
cﬁ_«me
;

231 
√w_ù
[20];

233 
	`°r˝y
(
√w_ù
, 
√w_ãxt
);

235 
göt
 
cﬁumn
 =

236 
	`GPOINTER_TO_INT
(
	`g_obje˘_gë_d©a
(
	`G_OBJECT
(
˚Œ
), "column"));

238 
	`gtk_åì_modñ_gë_ôî
(
modñ
, &
ôî
, 
∑th
);

240 
	`gtk_åì_modñ_gë_ôî
(
modñ
, &
ôî_«me
, 
∑th
);

241 
	`gtk_åì_modñ_gë
(
modñ
, &
ôî_«me
, 0, &
cﬁ_«me
, -1);

243 
cﬁumn
) {

244 
COLUMN_VALUE
:

246 
uöt
 
i
 = 0, 
ödex_off£t
 = 0;

247 
gch¨
 *
ﬁd_ãxt
;

249 
	`gtk_åì_modñ_gë
(
modñ
, &
ôî
, 
cﬁumn
, &
ﬁd_ãxt
, -1);

251 i‡(0 =
	`°rcmp
(
cﬁ_«me
, 
pktgí_ëhî√t_fõlds
[3]))

252 i‡((
	`©oi
(
√w_ãxt
) > 4096) || (atoi(new_text) < 1)) {

253 
GtkWidgë
 *
dülog
;

254 
dülog
 =

255 
	`gtk_mesßge_dülog_√w
(
	`GTK_WINDOW
(
°ªam_wödow
),

256 
GTK_DIALOG_DESTROY_WITH_PARENT
,

257 
GTK_MESSAGE_INFO
,

258 
GTK_BUTTONS_OK
,

260 
	`gtk_wödow_£t_tôÀ
(
	`GTK_WINDOW
(
dülog
), "Pktgen");

261 
	`gtk_dülog_run
(
	`GTK_DIALOG
(
dülog
));

262 
	`gtk_widgë_de°roy
(
dülog
);

267 
	`°rcmp
(
cﬁ_«me
,

268 
pktgí_ùv4_fõlds
[9])) ||

269 (0 =
	`°rcmp
(
cﬁ_«me
, 
pktgí_ùv4_fõlds
[10])) )

270 i‡(!
	`vÆid©e_ù_addªss
(
√w_ù
)) {

271 
GtkWidgë
 *
dülog
;

272 
dülog
 =

273 
	`gtk_mesßge_dülog_√w
(
	`GTK_WINDOW
(
°ªam_wödow
),

274 
GTK_DIALOG_DESTROY_WITH_PARENT
,

275 
GTK_MESSAGE_INFO
,

276 
GTK_BUTTONS_OK
,

278 
	`gtk_wödow_£t_tôÀ
(
	`GTK_WINDOW
(
dülog
), "Pktgen");

279 
	`gtk_dülog_run
(
	`GTK_DIALOG
(
dülog
));

280 
	`gtk_widgë_de°roy
(
dülog
);

286 
	`°rcmp
(
cﬁ_«me
,

287 
pktgí_ëhî√t_fõlds
[0])) ||

288 (0 =
	`°rcmp
(
cﬁ_«me
, 
pktgí_ëhî√t_fõlds
[1])) ) {

289 i‡(12 =
	`°æí
(
√w_ãxt
)) {

290 
gch¨
 *
ch
;

291 
i
 = 0; i < 
	`°æí
(
√w_ãxt
); i++) {

292 
ch
 = (
√w_ãxt
 + 
i
);

294 i‡((*
ch
 >= 'a' &&

295 *
ch
 <= 'f') ||

296 (*
ch
 >= 'A' &&

297 *
ch
 <= 'F') ||

298 (*
ch
 >= '0' && *ch <= '9'))

301 
GtkWidgë
 *
dülog
;

302 
dülog
 = 
	`gtk_mesßge_dülog_√w
(

303 
	`GTK_WINDOW
(
°ªam_wödow
),

304 
GTK_DIALOG_DESTROY_WITH_PARENT
,

305 
GTK_MESSAGE_INFO
,

306 
GTK_BUTTONS_OK
,

308 
	`gtk_wödow_£t_tôÀ
(
	`GTK_WINDOW
(
dülog
),

310 
	`gtk_dülog_run
(
	`GTK_DIALOG
(
dülog
));

311 
	`gtk_widgë_de°roy
(
dülog
);

317 
GtkWidgë
 *
dülog
;

318 
dülog
 =

319 
	`gtk_mesßge_dülog_√w
(
	`GTK_WINDOW
(
°ªam_wödow
),

320 
GTK_DIALOG_DESTROY_WITH_PARENT
,

321 
GTK_MESSAGE_INFO
,

322 
GTK_BUTTONS_OK
,

324 
	`gtk_wödow_£t_tôÀ
(
	`GTK_WINDOW
(
dülog
), "Pktgen");

325 
	`gtk_dülog_run
(
	`GTK_DIALOG
(
dülog
));

326 
	`gtk_widgë_de°roy
(
dülog
);

332 
	`°rcmp
(
ﬁd_ãxt
,

335 
	`°rcmp
(
ﬁd_ãxt
,

336 "IPv4")Ë&& (0 !
	`°rcmp
(
ﬁd_ãxt
, "UDP")) ) {

337 
	`g_‰ì
(
ﬁd_ãxt
);

339 
i
 = 
	`gtk_åì_∑th_gë_ödi˚s
(
∑th
)[0];

341 
	`gtk_nŸebook_gë_cuºít_∑ge
(
	`GTK_NOTEBOOK
(
nŸebook
)))

344 
ödex_off£t
 = 0;

348 
ödex_off£t
 = 4;

352 
ödex_off£t
 = 15;

356 
	`g_‰ì
(
	`g_¨øy_ödex
(
∑ckë_öfo
, 
¥Ÿocﬁ
,

357 (
i
 + 
ödex_off£t
)).
vÆue
);

358 
	`g_¨øy_ödex
(
∑ckë_öfo
, 
¥Ÿocﬁ
,

359 (
i
 + 
ödex_off£t
)).
vÆue
 = 
	`g_°rdup
(
√w_ãxt
);

361 
	`gtk_li°_°‹e_£t
(
	`GTK_LIST_STORE
(
modñ
), &
ôî
, 
cﬁumn
,

362 
	`g_¨øy_ödex
(
∑ckë_öfo
,

363 
¥Ÿocﬁ
,

364 (
i
 + 
ödex_off£t
)).
vÆue
, -1);

366 
GtkWidgë
 *
dülog
;

367 
dülog
 =

368 
	`gtk_mesßge_dülog_√w
(
	`GTK_WINDOW
(
°ªam_wödow
),

369 
GTK_DIALOG_DESTROY_WITH_PARENT
,

370 
GTK_MESSAGE_INFO
,

371 
GTK_BUTTONS_OK
,

373 
	`gtk_wödow_£t_tôÀ
(
	`GTK_WINDOW
(
dülog
), "Pktgen");

374 
	`gtk_dülog_run
(
	`GTK_DIALOG
(
dülog
));

375 
	`gtk_widgë_de°roy
(
dülog
);

381 
	`gtk_åì_∑th_‰ì
(
∑th
);

382 
	}
}

397 
	$add_¥Ÿo_vÆues_cﬁumn
(
GtkTªeVõw
 *
åìvõw
,

398 
GtkTªeModñ
 *
°ªam_modñ
)

400 
GtkCñlRídîî
 *
ªndîî
;

403 
ªndîî
 = 
	`gtk_˚Œ_ªndîî_ãxt_√w
();

404 
	`g_obje˘_£t
(
ªndîî
,

405 "edôabÀ", 
FALSE
,

406 
NULL
);

407 
	`g_obje˘_£t_d©a
(
	`G_OBJECT
(
ªndîî
), "column",

408 
	`GINT_TO_POINTER
(
COLUMN_NAME
));

410 
	`gtk_åì_võw_ö£π_cﬁumn_wôh_©åibuãs
(
	`GTK_TREE_VIEW
(
åìvõw
),

411 -1, "Name", 
ªndîî
,

412 "ãxt", 
COLUMN_NAME
,

413 
NULL
);

416 
ªndîî
 = 
	`gtk_˚Œ_ªndîî_ãxt_√w
();

417 
	`g_obje˘_£t
(
ªndîî
,

418 "edôabÀ", 
TRUE
,

419 
NULL
);

420 
	`g_sig«l_c⁄√˘
(
ªndîî
, "edited",

421 
	`G_CALLBACK
(
˚Œ_edôed_ˇŒback
), 
°ªam_modñ
);

422 
	`g_obje˘_£t_d©a
(
	`G_OBJECT
(
ªndîî
), "column",

423 
	`GINT_TO_POINTER
(
COLUMN_VALUE
));

425 
	`gtk_åì_võw_ö£π_cﬁumn_wôh_©åibuãs
(
	`GTK_TREE_VIEW
(
åìvõw
),

426 -1, "VÆue", 
ªndîî
,

427 "ãxt", 
COLUMN_VALUE
,

428 
NULL
);

429 
	}
}

443 
GtkWidgë
 *

444 
	$fûl_°ªam_öfo
(
¥Ÿo_ty≥
 
ty≥
, 
pid
, 
£q_id
)

446 
GtkWidgë
 *
vbox
;

447 
GtkWidgë
 *
hbox
;

448 
GtkWidgë
 *
sw
;

449 
GtkWidgë
 *
åìvõw
;

450 
GtkWidgë
 *
√xt_buâ⁄
, *
≠∂y_buâ⁄
, *
quô_buâ⁄
;

451 
GtkTªeModñ
 *
°ªam_modñ
;

452 
GtkWidgë
 *
‰ame
;

453 
GtkWidgë
 *
ãxt_võw
;

455 
‰ame
 = 
	`gtk_‰ame_√w
(
NULL
);

456 
	`gtk_‰ame_£t_œbñ_Æign
(
	`GTK_FRAME
(
‰ame
), 0.5, 0.5);

457 
	`gtk_widgë_£t_size_ªque°
(
‰ame
, 300, 200);

459 
vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 5);

460 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
vbox
);

462 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
),

463 
	`gtk_œbñ_√w
("Edit Protocol fields"),

464 
FALSE
, FALSE, 0);

466 
sw
 = 
	`gtk_s¸ﬁÀd_wödow_√w
(
NULL
, NULL);

467 
	`gtk_s¸ﬁÀd_wödow_£t_shadow_ty≥
(
	`GTK_SCROLLED_WINDOW
(
sw
),

468 
GTK_SHADOW_ETCHED_IN
);

469 
	`gtk_s¸ﬁÀd_wödow_£t_pﬁicy
(
	`GTK_SCROLLED_WINDOW
(
sw
),

470 
GTK_POLICY_AUTOMATIC
,

471 
GTK_POLICY_AUTOMATIC
);

472 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
sw
, 
TRUE
, TRUE, 0);

475 
°ªam_modñ
 = 
	`¸óã_°ªam_modñ
(
ty≥
, 
pid
, 
£q_id
);

478 
åìvõw
 = 
	`gtk_åì_võw_√w_wôh_modñ
(
°ªam_modñ
);

479 
	`gtk_åì_võw_£t_ruÀs_höt
(
	`GTK_TREE_VIEW
(
åìvõw
), 
TRUE
);

480 
	`gtk_åì_£À˘i⁄_£t_mode
(
	`gtk_åì_võw_gë_£À˘i⁄
(
	`GTK_TREE_VIEW
(
åìvõw
)),

481 
GTK_SELECTION_SINGLE
);

483 
	`add_¥Ÿo_vÆues_cﬁumn
(
	`GTK_TREE_VIEW
(
åìvõw
), 
°ªam_modñ
);

486 
ãxt_võw
 = 
	`gtk_ãxt_võw_√w
();

487 
	`gtk_ãxt_võw_£t_À·_m¨gö
(
	`GTK_TEXT_VIEW
(
ãxt_võw
), 20);

488 
	`gtk_ãxt_võw_£t_right_m¨gö
(
	`GTK_TEXT_VIEW
(
ãxt_võw
), 20);

489 
	`gtk_ãxt_võw_£t_wøp_mode
(
	`GTK_TEXT_VIEW
(

490 
ãxt_võw
), 
GTK_WRAP_WORD_CHAR
);

491 
	`gtk_ãxt_võw_£t_pixñs_öside_wøp
(
	`GTK_TEXT_VIEW
(
ãxt_võw
), 0);

492 
	`gtk_widgë_£t_toﬁtù_ãxt
(
	`GTK_WIDGET
(
ãxt_võw
),

496 
l4_∂_buf„r
 = 
	`gtk_ãxt_võw_gë_buf„r
(
	`GTK_TEXT_VIEW
(
ãxt_võw
));

499 i‡(
ty≥
 =
TYPE_UDP
) {

500 
udp_ª„ªn˚
 = 
	`g_obje˘_ªf
(
åìvõw
);

501 
udp_åìvõw
 = 
åìvõw
;

502 
udp_sw
 = 
sw
;

504 
u§_def_ª„ªn˚
 = 
	`g_obje˘_ªf
(
ãxt_võw
);

505 
l4_ãxt_võw
 = 
ãxt_võw
;

506 
l4_buf„r
 = 
l4_∂_buf„r
;

509 
	`g_obje˘_uƒef
(
°ªam_modñ
);

511 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
sw
), 
åìvõw
);

514 
hbox
 = 
	`gtk_hbox_√w
(
TRUE
, 4);

515 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
hbox
, 
FALSE
, FALSE, 0);

517 
√xt_buâ⁄
 = 
	`gtk_buâ⁄_√w_wôh_œbñ
("Next");

518 
	`g_sig«l_c⁄√˘
(
√xt_buâ⁄
, "clicked",

519 
	`G_CALLBACK
(
swôch_°ªam_edô‹_∑ge
), 
nŸebook
);

521 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
√xt_buâ⁄
, 
TRUE
, TRUE, 0);

523 
≠∂y_buâ⁄
 = 
	`gtk_buâ⁄_√w_wôh_œbñ
("Apply");

524 
	`g_sig«l_c⁄√˘
(
≠∂y_buâ⁄
, "clicked",

525 
	`G_CALLBACK
(
≠∂y_°ªam_ˇŒback
), 
NULL
);

527 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
≠∂y_buâ⁄
, 
TRUE
, TRUE, 0);

529 
quô_buâ⁄
 = 
	`gtk_buâ⁄_√w_wôh_œbñ
("Close");

531 
	`g_sig«l_c⁄√˘
(
quô_buâ⁄
,

533 
	`G_CALLBACK
(
˛o£_wödow_ˇŒback
),

534 
	`G_OBJECT
(
°ªam_wödow
));

536 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
quô_buâ⁄
, 
TRUE
, TRUE, 0);

539  
	`GTK_WIDGET
(
‰ame
);

540 
	}
}

555 
˛o£_wödow_ˇŒback
(
GtkWidgë
 
__©åibuã__
((
unu£d
)Ë*
widgë
, 
gpoöãr
 
wödow
)

557 
gtk_widgë_de°roy
(
GTK_WIDGET
(
wödow
));

573 
	$vœn_íabÀ_ˇŒback
(
GtkWidgë
 *
widgë
, 
gpoöãr
 *
d©a
)

575 
gboﬁón
 
a˘ive
;

576 *
pid
 = (*)
d©a
;

577 
p‹t_öfo_t
 *
öfo
 = 
NULL
;

579 
öfo
 = &
pktgí
.öfo[*
pid
];

581 
	`g_obje˘_gë
(
	`G_OBJECT
(
widgë
), "a˘ive", &
a˘ive
, 
NULL
);

582 
	`pktgí_£t_vœn
(
öfo
, (
uöt32_t
)
a˘ive
);

583 
	}
}

598 
	$pktsize_íãr_ˇŒback
(
GtkWidgë
 *
widgë
, 
gpoöãr
 *
d©a
)

600 c⁄° 
gch¨
 *
íåy_ãxt
;

601 *
pid
 = (*)
d©a
;

602 
p‹t_öfo_t
 *
öfo
 = 
NULL
;

603 
size
;

605 
öfo
 = &
pktgí
.öfo[*
pid
];

607 
íåy_ãxt
 = 
	`gtk_íåy_gë_ãxt
(
	`GTK_ENTRY
(
widgë
));

608 
size
 = 
	`©oi
(
íåy_ãxt
);

610 i‡(–(
size
 - 
FCS_SIZE
Ë< 
MIN_PKT_SIZE
) ||

611 –(
size
 - 
FCS_SIZE
Ë> 
MAX_PKT_SIZE
)) {

612 
GtkWidgë
 *
dülog
;

613 
dülog
 = 
	`gtk_mesßge_dülog_√w
(

614 
	`GTK_WINDOW
(
°ªam_wödow
),

615 
GTK_DIALOG_DESTROY_WITH_PARENT
,

616 
GTK_MESSAGE_INFO
,

617 
GTK_BUTTONS_OK
,

619 (
MIN_PKT_SIZE
 + 
FCS_SIZE
),

620 (
MAX_PKT_SIZE
 + 
FCS_SIZE
));

621 
	`gtk_wödow_£t_tôÀ
(
	`GTK_WINDOW
(
dülog
),

623 
	`gtk_dülog_run
(
	`GTK_DIALOG
(
dülog
));

624 
	`gtk_widgë_de°roy
(
dülog
);

629 
	`pktgí_∑ckë_øã
(
öfo
);

630 
	}
}

645 
	$ødio_›ti⁄s_ˇŒback
(
GtkRadioBuâ⁄
 *
rb
, 
gpoöãr
 *
u£r_d©a
)

647 *
pid
 = (*)
u£r_d©a
;

648 
p‹t_öfo_t
 *
öfo
 = 
NULL
;

649 
pkt_£q_t
 *
pkt
 = 
NULL
;

651 
öfo
 = &
pktgí
.öfo[*
pid
];

652 
pkt
 = &
öfo
->
£q_pkt
[
SINGLE_PKT
];

653 
buff
[10];

655 i‡(
	`gtk_toggÀ_buâ⁄_gë_a˘ive
(
	`GTK_TOGGLE_BUTTON
(
rb
) ) ) {

656 i‡(
l4_ãxt_võw
->
∑ª¡
 !
	`GTK_WIDGET
(
udp_sw
)) {

657 
	`gtk_íåy_£t_edôabÀ
(
	`GTK_ENTRY
(
ù_¥Ÿo_íåy
), 
TRUE
);

658 
	`gtk_s¸ﬁÀd_wödow_£t_pﬁicy
(
	`GTK_SCROLLED_WINDOW
(
udp_sw
),

659 
GTK_POLICY_NEVER
,

660 
GTK_POLICY_NEVER
);

661 
	`gtk_c⁄èöî_ªmove
(
	`GTK_CONTAINER
(
udp_sw
), 
udp_åìvõw
);

662 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
udp_sw
), 
l4_ãxt_võw
);

663 
	`gtk_widgë_show_Æl
(
udp_sw
);

664 
pkt
->
ùPrŸo
 = 
PG_IPPROTO_USR_DEF
;

667 
	`•rötf
(
buff
, "%d", 
PG_IPPROTO_UDP
);

668 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ù_¥Ÿo_íåy
), 
buff
);

669 
	`gtk_íåy_£t_edôabÀ
(
	`GTK_ENTRY
(
ù_¥Ÿo_íåy
), 
FALSE
);

670 
	`gtk_s¸ﬁÀd_wödow_£t_pﬁicy
(
	`GTK_SCROLLED_WINDOW
(
udp_sw
),

671 
GTK_POLICY_AUTOMATIC
,

672 
GTK_POLICY_AUTOMATIC
);

673 
	`gtk_c⁄èöî_ªmove
(
	`GTK_CONTAINER
(
udp_sw
), 
l4_ãxt_võw
);

674 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
udp_sw
), 
udp_åìvõw
);

675 
pkt
->
ùPrŸo
 = 
PG_IPPROTO_UDP
;

677 
	}
}

692 
	$di•œy_°ªam_edô‹
(
GtkWidgë
 *
wödow
, 
pid
, 
£q_id
)

694 
GtkWidgë
 *
°ªam_l2_vbox
, *
°ªam_l3_vbox
, *
°ªam_l4_vbox
;

695 
GtkWidgë
 *
°ªam_l2_hbox
;

697 
GtkWidgë
 *
œbñ1
, *
œbñ2
, *
œbñ3
, *
œbñ4
, *
œbñ5
, *
œbñ6
;

698 
wödow_«me
[50];

700 
	`•rötf
(
wödow_«me
, "Edô såóm†f‹Ö‹à%d", 
pid
);

701 
	`gtk_wödow_£t_tôÀ
(
	`GTK_WINDOW
(
wödow
), 
wödow_«me
);

702 
	`gtk_c⁄èöî_£t_b‹dî_width
(
	`GTK_CONTAINER
(
wödow
), 10);

703 
	`gtk_widgë_£t_size_ªque°
(
wödow
, 400, 200);

704 
	`gtk_wödow_£t_posôi⁄
(
	`GTK_WINDOW
(
wödow
), 
GTK_WIN_POS_CENTER
);

706 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
wödow
), "destroy",

707 
	`G_CALLBACK
(
gtk_maö_quô
), 
NULL
);

709 
nŸebook
 = 
	`gtk_nŸebook_√w
();

710 
œbñ1
 = 
	`gtk_œbñ_√w
("Packet Size");

711 
œbñ2
 = 
	`gtk_œbñ_√w
("Ethernet");

712 
œbñ3
 = 
	`gtk_œbñ_√w
("IPv4");

713 
œbñ4
 = 
	`gtk_œbñ_√w
("UDP / User defined");

714 
œbñ5
 = 
	`gtk_œbñ_√w
("L4 Protocol ");

715 
œbñ6
 = 
	`gtk_œbñ_√w
("IPv4 Protocol Value");

718 
∑ckë_öfo
 =

719 
	`g_¨øy_sized_√w
(
FALSE
, FALSE, (
¥Ÿocﬁ
),

722 
°ªam_l2_vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 0);

724 
°ªam_l2_hbox
 = 
	`gtk_hbox_√w
(
FALSE
, 0);

725 
	`gtk_c⁄èöî_£t_b‹dî_width
(
	`GTK_CONTAINER
(
°ªam_l2_hbox
), 10);

726 
°ªam_l2_vœn
 = 
	`gtk_check_buâ⁄_√w_wôh_œbñ
("VLAN");

728 
	`gtk_sig«l_c⁄√˘
(
	`GTK_OBJECT
(
°ªam_l2_vœn
), "toggled",

729 
	`GTK_SIGNAL_FUNC
(
vœn_íabÀ_ˇŒback
), (
gpoöãr
Ë& 
pid
);

731 
pktsize_íåy
 = 
	`gtk_íåy_√w
();

732 
	`gtk_íåy_£t_max_Àngth
(
	`GTK_ENTRY
(
pktsize_íåy
), 4);

733 
	`gtk_íåy_£t_width_ch¨s
(
	`GTK_ENTRY
(
pktsize_íåy
), 4);

735 
ù_¥Ÿo_íåy
 = 
	`gtk_íåy_√w
();

736 
	`gtk_íåy_£t_max_Àngth
(
	`GTK_ENTRY
(
ù_¥Ÿo_íåy
), 2);

737 
	`gtk_íåy_£t_width_ch¨s
(
	`GTK_ENTRY
(
ù_¥Ÿo_íåy
), 4);

741 
GtkWidgë
 *
ødio_buâ⁄_udp
 = 
	`gtk_ødio_buâ⁄_√w_wôh_œbñ
(
NULL
, "UDP ");

742 
GtkWidgë
 *
ødio_buâ⁄_u§def
 =

743 
	`gtk_ødio_buâ⁄_√w_wôh_œbñ_‰om_widgë
(
	`GTK_RADIO_BUTTON
(
ødio_buâ⁄_udp
),

746 
GtkWidgë
 *
hbox1
 = 
	`gtk_hbox_√w
(
FALSE
, 0);

748 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox1
), 
œbñ5
, 
TRUE
, TRUE, 0);

749 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox1
), 
ødio_buâ⁄_udp
, 
FALSE
, FALSE, 0);

750 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox1
), 
ødio_buâ⁄_u§def
, 
FALSE
, FALSE,

753 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
ødio_buâ⁄_u§def
),

755 
	`G_CALLBACK
(
ødio_›ti⁄s_ˇŒback
),

756 –
gpoöãr
 ) & 
pid
);

758 
GtkWidgë
 *
hbox2
 = 
	`gtk_hbox_√w
(
FALSE
, 0);

759 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox2
), 
	`gtk_œbñ_√w
(
NULL
), 
TRUE
, TRUE, 0);

760 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox2
), 
œbñ6
, 
FALSE
, FALSE, 0);

761 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox2
), 
ù_¥Ÿo_íåy
, 
FALSE
, FALSE, 20);

763 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
°ªam_l2_vbox
), 
°ªam_l2_hbox
, 
FALSE
,

764 
FALSE
, 0);

766 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
°ªam_l2_hbox
), 
°ªam_l2_vœn
, 
TRUE
, TRUE,

768 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
°ªam_l2_hbox
), 
œbñ1
, 
FALSE
, FALSE, 0);

769 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
°ªam_l2_hbox
), 
pktsize_íåy
, 
FALSE
, FALSE,

772 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
°ªam_l2_vbox
), 
hbox1
, 
FALSE
, FALSE, 0);

774 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
°ªam_l2_vbox
), 
hbox2
, 
FALSE
, FALSE, 0);

776 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
°ªam_l2_vbox
),

777 
	`fûl_°ªam_öfo
(
TYPE_ETH
,

778 
pid
,

779 
£q_id
), 
TRUE
, TRUE, 0);

781 
°ªam_l3_vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 0);

782 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
°ªam_l3_vbox
),

783 
	`fûl_°ªam_öfo
(
TYPE_IPv4
,

784 
pid
,

785 
£q_id
), 
TRUE
, TRUE, 0);

787 
°ªam_l4_vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 0);

788 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
°ªam_l4_vbox
),

789 
	`fûl_°ªam_öfo
(
TYPE_UDP
,

790 
pid
,

791 
£q_id
), 
TRUE
, TRUE, 0);

794 
	`gtk_nŸebook_≠≥nd_∑ge
(
	`GTK_NOTEBOOK
(
nŸebook
), 
°ªam_l2_vbox
, 
œbñ2
);

795 
	`gtk_nŸebook_≠≥nd_∑ge
(
	`GTK_NOTEBOOK
(
nŸebook
), 
°ªam_l3_vbox
, 
œbñ3
);

796 
	`gtk_nŸebook_≠≥nd_∑ge
(
	`GTK_NOTEBOOK
(
nŸebook
), 
°ªam_l4_vbox
, 
œbñ4
);

798 
	`gtk_nŸebook_£t_èb_pos
(
	`GTK_NOTEBOOK
(
nŸebook
), 
GTK_POS_BOTTOM
);

800 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
wödow
), 
nŸebook
);

801 
	`gtk_widgë_show_Æl
(
wödow
);

803 
	`gtk_maö
();

804 
	}
}

819 
swôch_°ªam_edô‹_∑ge
(
GtkBuâ⁄
 
__©åibuã__
((
unu£d
)Ë*
buâ⁄
,

820 
GtkNŸebook
 *
nŸebook
)

822 
göt
 
	g∑ge
 = 
gtk_nŸebook_gë_cuºít_∑ge
(
nŸebook
);

824 i‡(
	g∑ge
 != 2)

825 
gtk_nŸebook_£t_cuºít_∑ge
(
nŸebook
, ++
∑ge
);

827 
gtk_nŸebook_£t_cuºít_∑ge
(
nŸebook
, 0);

843 
	$≠∂y_°ªam_ˇŒback
()

845 
pid
, 
£q_id
;

847 
GtkTªeSñe˘i⁄
 *
£À˘i⁄_chassis
 = 
	`gtk_åì_võw_gë_£À˘i⁄
(

848 
	`GTK_TREE_VIEW
(
chassis_võw
));

850 
	`gtk_åì_£À˘i⁄_£À˘ed_f‹óch
(
£À˘i⁄_chassis
,

851 
åaffic_°ªam_gë_pid
,

852 (
gpoöãr
Ë& 
pid
);

854 
GtkTªeSñe˘i⁄
 *
£À˘i⁄_°ªam
 = 
	`gtk_åì_võw_gë_£À˘i⁄
(

855 
	`GTK_TREE_VIEW
(
°ªam_võw
[
pid
]));

857 
	`gtk_åì_£À˘i⁄_£À˘ed_f‹óch
(
£À˘i⁄_°ªam
,

858 
åaffic_°ªam_gë_£q_id
,

859 (
gpoöãr
Ë& 
£q_id
);

861 
	`£t_°ªam_öfo
(
pid
, 
£q_id
);

862 
	}
}

877 
	$£t_°ªam_öfo
(
pid
, 
£q_id
)

879 c⁄° 
gch¨
 *
íåy_ãxt
, *
ù_¥Ÿo_°r
;

880 
p‹t_öfo_t
 *
öfo
 = 
NULL
;

881 
pkt_£q_t
 *
pkt
 = 
NULL
;

882 
uöt8_t
 *
u§_def
 = 
NULL
;

883 
l4_™d_∑ylﬂd
[
MAX_PKT_SIZE
 - 
FCS_SIZE
];

884 
gch¨
 
u§_def_°r
[
MAX_PKT_SIZE
 - 
FCS_SIZE
];

885 
GtkTextIãr
 
°¨t
;

886 
GtkTextIãr
 
íd
;

887 
size
;

889 
öfo
 = &
pktgí
.öfo[
pid
];

890 
pkt
 = &
öfo
->
£q_pkt
[
£q_id
];

891 
uöt
 
i
 = 0, 
ù_¥Ÿo_vÆue
[2] = {0};

893 i‡(
pkt
 =
NULL
) {

894 
	`¥ötf
("Couldn't update values for Seq ID %u on Port %u\n",

895 
£q_id
,

896 
pid
);

900 
	`gtk_ãxt_buf„r_gë_°¨t_ôî
(
l4_∂_buf„r
, &
°¨t
);

901 
	`gtk_ãxt_buf„r_gë_íd_ôî
(
l4_∂_buf„r
, &
íd
);

903 
	`°r˝y
(
u§_def_°r
,

904 
	`gtk_ãxt_buf„r_gë_ãxt
(
l4_∂_buf„r
, &
°¨t
, &
íd
, 
FALSE
));

906 
íåy_ãxt
 = 
	`gtk_íåy_gë_ãxt
(
	`GTK_ENTRY
(
pktsize_íåy
));

907 
size
 = 
	`©oi
(
íåy_ãxt
);

908 
pkt
->
pktSize
 = (
size
 - 
FCS_SIZE
);

910 
ù_¥Ÿo_°r
 = 
	`gtk_íåy_gë_ãxt
(
	`GTK_ENTRY
(
ù_¥Ÿo_íåy
));

911 
	`ascii_to_numbî
(
ù_¥Ÿo_°r
, 
ù_¥Ÿo_vÆue
, 1);

914 
i
 = 0; i < 
∑ckë_öfo
->
Àn
; i++) {

915 
j
 = 0;

916 
°r
[13] = {0};

917 
mac
[6] = {0};

918 
sockaddr_ö
 
√w_§c_ù
, 
√w_d°_ù
;

920 
i
) {

922 
	`°r˝y
(
°r
, 
	`g_¨øy_ödex
(
∑ckë_öfo
,

923 
¥Ÿocﬁ
,

924 
i
).
vÆue
);

925 
	`ascii_to_numbî
(
°r
, 
mac
, 6);

927 
j
 = 0; j < 6; j++)

928 
pkt
->
ëh_d°_addr
.
addr_byãs
[
j
] = 
mac
[j];

932 
	`°r˝y
(
°r
, 
	`g_¨øy_ödex
(
∑ckë_öfo
,

933 
¥Ÿocﬁ
,

934 
i
).
vÆue
);

935 
	`ascii_to_numbî
(
°r
, 
mac
, 6);

937 
j
 = 0; j < 6; j++)

938 
pkt
->
ëh_§c_addr
.
addr_byãs
[
j
] = 
mac
[j];

942 
pkt
->
vœnid
 =

943 
	`©oi
(
	`g_¨øy_ödex
(
∑ckë_öfo
,

944 
¥Ÿocﬁ
,

945 
i
).
vÆue
);

949 
	`öë_©⁄
(
	`g_¨øy_ödex
(
∑ckë_öfo
,

950 
¥Ÿocﬁ
,

951 
i
).
vÆue
, &
√w_§c_ù
.
sö_addr
);

952 
pkt
->
ù_§c_addr
.
addr
.
ùv4
.
s_addr
 = 
	`¡ohl
(

953 
√w_§c_ù
.
sö_addr
.
s_addr
);

957 
	`öë_©⁄
(
	`g_¨øy_ödex
(
∑ckë_öfo
,

958 
¥Ÿocﬁ
,

959 
i
).
vÆue
, &
√w_d°_ù
.
sö_addr
);

960 
pkt
->
ù_d°_addr
.
addr
.
ùv4
.
s_addr
 = 
	`¡ohl
(

961 
√w_d°_ù
.
sö_addr
.
s_addr
);

965 
pkt
->
•‹t
 =

966 
	`©oi
(
	`g_¨øy_ödex
(
∑ckë_öfo
,

967 
¥Ÿocﬁ
,

968 
i
).
vÆue
);

972 
pkt
->
dp‹t
 =

973 
	`©oi
(
	`g_¨øy_ödex
(
∑ckë_öfo
,

974 
¥Ÿocﬁ
,

975 
i
).
vÆue
);

980 
öfo
->
fûl_∑âîn_ty≥
 = 
NO_FILL_PATTERN
;

981 
	`pktgí_∑ckë_˘‹
(
öfo
, 
£q_id
, -1);

984 
u§_def
 = (
uöt8_t
 *)&
pkt
->
hdr
;

986 
	`ascii_to_numbî
(
u§_def_°r
, 
l4_™d_∑ylﬂd
, 
	`°æí
(usr_def_str));

987 
i
 = 0; i < 
	`°æí
(
u§_def_°r
) / 2; i++)

988 
u§_def
[
i
 + (
ëhî_hdr
) +

989 (
ùHdr_t
)] = 
l4_™d_∑ylﬂd
[
i
];

991 
u§_def
[(
ëhî_hdr
Ë+ 9] = 
ù_¥Ÿo_vÆue
[0];

992 
pkt
->
ùPrŸo
 = 
ù_¥Ÿo_vÆue
[0];

993 
	}
}

1008 
	$edô_°ªam
()

1010 
uöt
 
no_rows
;

1012 
°ªam_wödow
 = 
	`gtk_wödow_√w
(
GTK_WINDOW_TOPLEVEL
);

1013 
	`gtk_wödow_£t_tôÀ
(
	`GTK_WINDOW
(
°ªam_wödow
), "Edit Streams");

1014 
	`gtk_wödow_£t_deÁu…_size
(
	`GTK_WINDOW
(
°ªam_wödow
), 400, 400);

1015 
	`g_sig«l_c⁄√˘
(
°ªam_wödow
, "de°roy", 
	`G_CALLBACK
(

1016 
gtk_maö_quô
), 
NULL
);

1018 
	`gtk_c⁄èöî_£t_b‹dî_width
(
	`GTK_CONTAINER
(
°ªam_wödow
), 10);

1021 
GtkTªeSñe˘i⁄
 *
£À˘i⁄
 = 
	`gtk_åì_võw_gë_£À˘i⁄
(

1022 
	`GTK_TREE_VIEW
(
chassis_võw
));

1024 
no_rows
 = 
	`gtk_åì_£À˘i⁄_cou¡_£À˘ed_rows
(
£À˘i⁄
);

1026 i‡(
no_rows
 == 0) {

1027 
GtkWidgë
 *
dülog
;

1028 
dülog
 = 
	`gtk_mesßge_dülog_√w
(
	`GTK_WINDOW
(
wödow
),

1029 
GTK_DIALOG_DESTROY_WITH_PARENT
,

1030 
GTK_MESSAGE_ERROR
,

1031 
GTK_BUTTONS_OK
,

1033 
	`gtk_wödow_£t_tôÀ
(
	`GTK_WINDOW
(
dülog
), "Pktgen");

1034 
	`gtk_dülog_run
(
	`GTK_DIALOG
(
dülog
));

1035 
	`gtk_widgë_de°roy
(
dülog
);

1036 } i‡(
no_rows
 > 1) {

1037 
GtkWidgë
 *
dülog
;

1038 
dülog
 = 
	`gtk_mesßge_dülog_√w
(
	`GTK_WINDOW
(
wödow
),

1039 
GTK_DIALOG_DESTROY_WITH_PARENT
,

1040 
GTK_MESSAGE_ERROR
,

1041 
GTK_BUTTONS_OK
,

1043 
	`gtk_wödow_£t_tôÀ
(
	`GTK_WINDOW
(
dülog
), "Pktgen");

1044 
	`gtk_dülog_run
(
	`GTK_DIALOG
(
dülog
));

1045 
	`gtk_widgë_de°roy
(
dülog
);

1047 
	`gtk_åì_£À˘i⁄_£À˘ed_f‹óch
(

1048 
£À˘i⁄
,

1049 
edô_°ªam_ˇŒback
,

1050 (
gpoöãr
)

1051 
°ªam_wödow
);

1053 
	}
}

1068 
edô_°ªam_ˇŒback
(
GtkTªeModñ
 *
modñ
,

1069 
GtkTªeP©h
 
__©åibuã__
((
unu£d
)Ë*
∑th
,

1070 
GtkTªeIãr
 *
ôî
,

1071 
gpoöãr
 
__©åibuã__
((
unu£d
)Ë
u£rd©a
)

1073 
gch¨
 *
	g«me
;

1074 
	gpid
 = 0, 
	g£q_id
 = 0;

1075 
GtkWidgë
 *
	g°ªam_wödow
 = (GtkWidgë *)
u£rd©a
;

1077 
gtk_åì_modñ_gë
(
modñ
, 
ôî
, 
COL_CHASSIS_PORTS
, &
«me
, -1);

1079 i‡(0 !
g_°rcmp0
(
«me
, "[127.0.0.1]")) {

1080 
	goff£t
 = 
°æí
(
«me
);

1081 
	gpid
 = 
©oi
((
«me
 + 
off£t
) - 1);

1084 
GtkTªeSñe˘i⁄
 *
	g£À˘i⁄_°ªam
 = 
gtk_åì_võw_gë_£À˘i⁄
(

1085 
GTK_TREE_VIEW
(
°ªam_võw
[
pid
]));

1087 
gtk_åì_£À˘i⁄_£À˘ed_f‹óch
(
£À˘i⁄_°ªam
,

1088 
åaffic_°ªam_gë_£q_id
,

1089 (
gpoöãr
Ë& 
£q_id
);

1091 
di•œy_°ªam_edô‹
(
°ªam_wödow
, 
pid
, 
£q_id
);

1106 
GtkWidgë
 *

1107 
	$°ªam_box
()

1109 
pktgí_p‹t_°ªam
 *
p‹t_åaffic
;

1110 
GtkTªeP©h
 *
∑th
;

1111 
GtkWidgë
 *
‰ame
;

1112 
GtkWidgë
 *
vbox
;

1113 
GtkWidgë
 *
hbox
;

1114 
GtkObje˘
 *
tx_øã_ønge
;

1115 
GtkWidgë
 *
≠∂y_buâ⁄
;

1116 
uöt8_t
 
j
 = 0;

1117 
uöt32_t
 
pid
;

1118 
rxtx_t
 
˙t
;

1119 
∑th_°r
[5];

1120 
°ªam_°r
[20];

1122 
GtkCñlRídîî
 *
num_ªndîî
, *
«me_ªndîî
, *
check_ªndîî
;

1123 
GtkTªeVõwCﬁumn
 *
¶_no_cﬁ
, *
°ªam_«me_cﬁ
, *
£À˘_cﬁ
;

1125 
‰ame
 = 
	`gtk_‰ame_√w
("Configuration");

1126 
	`gtk_‰ame_£t_œbñ_Æign
(
	`GTK_FRAME
(
‰ame
), 0.5, 0.5);

1127 
	`gtk_widgë_£t_size_ªque°
(
‰ame
, 275, 200);

1129 
≠∂y_buâ⁄
 = 
	`gtk_buâ⁄_√w_wôh_œbñ
("Apply");

1130 
	`gtk_widgë_£t_toﬁtù_ãxt
(
	`GTK_WIDGET
(
≠∂y_buâ⁄
), "Apply");

1132 
	`gtk_sig«l_c⁄√˘
(
	`GTK_OBJECT
(
≠∂y_buâ⁄
),

1134 
	`GTK_SIGNAL_FUNC
(
≠∂y_ˇŒback
),

1135 
NULL
);

1137 
tx_øã_ønge
 = 
	`gtk_adju°mít_√w
(1, 1.0, 101.0, 1.0, 1.0, 1.0);

1138 
	`g_sig«l_c⁄√˘
(
tx_øã_ønge
, "value_changed",

1139 
	`G_CALLBACK
(
digôs_sˇÀ_ˇŒback
), 
NULL
);

1141 
vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 10);

1142 
hbox
 = 
	`gtk_hbox_√w
(
FALSE
, 10);

1145 
hsˇÀ
 = 
	`gtk_hsˇÀ_√w
(
	`GTK_ADJUSTMENT
(
tx_øã_ønge
));

1146 
	`gtk_sˇÀ_£t_digôs
(
	`GTK_SCALE
(
hsˇÀ
), (
göt
)0);

1147 
	`gtk_ønge_£t_upd©e_pﬁicy
(
	`GTK_RANGE
(
hsˇÀ
),

1148 
GTK_UPDATE_CONTINUOUS
);

1149 
	`gtk_sˇÀ_£t_digôs
(
	`GTK_SCALE
(
hsˇÀ
), 1);

1150 
	`gtk_sˇÀ_£t_vÆue_pos
(
	`GTK_SCALE
(
hsˇÀ
), 
GTK_POS_TOP
);

1151 
	`gtk_sˇÀ_£t_døw_vÆue
(
	`GTK_SCALE
(
hsˇÀ
), 
TRUE
);

1153 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
hsˇÀ
, 
TRUE
, TRUE, 5);

1154 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
≠∂y_buâ⁄
, 
FALSE
, FALSE, 5);

1155 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
hbox
, 
FALSE
, FALSE, 5);

1157 
pid
 = 0;Öid < 
RTE_MAX_ETHPORTS
;Öid++) {

1158 
˙t
.
rxtx
 = 
	`gë_m≠
(
pktgí
.
l2p
, 
pid
, 
RTE_MAX_LCORE
);

1159 i‡(
˙t
.
rxtx
 == 0)

1162 
j
 = 0; j < 
NUM_SEQ_PKTS
; j++) {

1163 
	`•rötf
(
∑th_°r
, "%d", 
j
);

1164 
°r_db
[
pid
][
j
].
∑th
 = (*)
	`mÆloc
(5 * ());

1165 
	`°r˝y
(
°r_db
[
pid
][
j
].
∑th
, 
∑th_°r
);

1166 
°r_db
[
pid
][
j
].
°ªam_«me
 =

1167 (*)
	`mÆloc
(25 * ());

1168 
	`•rötf
(
°ªam_°r
,

1171 
pid
,

1173 
j
);

1174 
	`°r˝y
(
°r_db
[
pid
][
j
].
°ªam_«me
, 
°ªam_°r
);

1175 
°r_db
[
pid
][
j
].
°ªam_£À˘
 = 
FALSE
;

1176 
°r_db
[
pid
][
j
].
°ªam_no
 = j;

1179 
°r_db
[
pid
][
NUM_SEQ_PKTS
].
∑th
 = 
NULL
;

1180 
°r_db
[
pid
][
NUM_SEQ_PKTS
].
°ªam_«me
 = 
NULL
;

1181 
°r_db
[
pid
][
NUM_SEQ_PKTS
].
°ªam_£À˘
 = 
FALSE
;

1182 
°r_db
[
pid
][
NUM_SEQ_PKTS
].
°ªam_no
 = -1;

1185 
p‹t_öfo_t
 *
öfo
 = &
pktgí
.öfo[
pid
];

1186 
öfo
->
£qC¡
 = 
NUM_SEQ_PKTS
;

1189 
åaffic_°ªam
[
pid
] = 
	`gtk_åì_°‹e_√w
(
NUM_TRAF_STR_COLS
,

1190 
G_TYPE_STRING
,

1191 
G_TYPE_BOOLEAN
,

1192 
G_TYPE_INT
);

1194 
p‹t_åaffic
 = 
°r_db
[
pid
];

1195 
p‹t_åaffic
->
∑th
 !
NULL
) {

1196 
GtkTªeIãr
 
ôî
;

1198 
∑th
 = 
	`gtk_åì_∑th_√w_‰om_°rög
(
p‹t_åaffic
->path);

1199 
	`add_íåy
(
åaffic_°ªam
[
pid
], 
∑th
);

1200 
	`gtk_åì_modñ_gë_ôî
(
	`GTK_TREE_MODEL
(
åaffic_°ªam
[
pid
]),

1201 &
ôî
, 
∑th
);

1202 
	`gtk_åì_∑th_‰ì
(
∑th
);

1203 
	`gtk_åì_°‹e_£t
(
åaffic_°ªam
[
pid
],

1204 &
ôî
,

1205 
TRAF_STR_NAME
,

1206 
p‹t_åaffic
->
°ªam_«me
,

1207 
TRAF_STR_SELECT
,

1208 
p‹t_åaffic
->
°ªam_£À˘
,

1209 
TRAF_STR_NO
,

1210 
p‹t_åaffic
->
°ªam_no
,

1212 
p‹t_åaffic
++;

1215 
°ªam_võw
[
pid
] = 
	`gtk_åì_võw_√w
();

1217 
¶_no_cﬁ
 = 
	`gtk_åì_võw_cﬁumn_√w
();

1218 
°ªam_«me_cﬁ
 = 
	`gtk_åì_võw_cﬁumn_√w
();

1219 
£À˘_cﬁ
 = 
	`gtk_åì_võw_cﬁumn_√w
();

1221 
	`gtk_åì_võw_cﬁumn_£t_tôÀ
(
¶_no_cﬁ
, "Seq.No");

1222 
	`gtk_åì_võw_cﬁumn_£t_tôÀ
(
°ªam_«me_cﬁ
, "Stream Name");

1223 
	`gtk_åì_võw_cﬁumn_£t_tôÀ
(
£À˘_cﬁ
, "Select");

1226 
	`gtk_åì_võw_≠≥nd_cﬁumn
(
	`GTK_TREE_VIEW
(
°ªam_võw
[
pid
]),

1227 
¶_no_cﬁ
);

1228 
	`gtk_åì_võw_≠≥nd_cﬁumn
(
	`GTK_TREE_VIEW
(
°ªam_võw
[
pid
]),

1229 
°ªam_«me_cﬁ
);

1230 
	`gtk_åì_võw_≠≥nd_cﬁumn
(
	`GTK_TREE_VIEW
(
°ªam_võw
[
pid
]),

1231 
£À˘_cﬁ
);

1233 
	`gtk_åì_võw_£t_grid_löes
(
	`GTK_TREE_VIEW
(
°ªam_võw
[
pid
]),

1234 
GTK_TREE_VIEW_GRID_LINES_HORIZONTAL
);

1237 
num_ªndîî
 = 
	`gtk_˚Œ_ªndîî_ãxt_√w
();

1240 
«me_ªndîî
 = 
	`gtk_˚Œ_ªndîî_ãxt_√w
();

1243 
check_ªndîî
 = 
	`gtk_˚Œ_ªndîî_toggÀ_√w
();

1246 
	`gtk_åì_võw_cﬁumn_∑ck_°¨t
(
¶_no_cﬁ
, 
num_ªndîî
, 
TRUE
);

1247 
	`gtk_åì_võw_cﬁumn_∑ck_°¨t
(
°ªam_«me_cﬁ
,

1248 
«me_ªndîî
,

1249 
TRUE
);

1250 
	`gtk_åì_võw_cﬁumn_∑ck_°¨t
(
£À˘_cﬁ
,

1251 
check_ªndîî
,

1252 
TRUE
);

1256 
	`gtk_åì_võw_cﬁumn_add_©åibuã
(
¶_no_cﬁ
,

1257 
num_ªndîî
,

1259 
TRAF_STR_NO
);

1260 
	`gtk_åì_võw_cﬁumn_add_©åibuã
(
°ªam_«me_cﬁ
,

1261 
«me_ªndîî
,

1263 
TRAF_STR_NAME
);

1264 
	`gtk_åì_võw_cﬁumn_add_©åibuã
(
£À˘_cﬁ
,

1265 
check_ªndîî
,

1267 
TRAF_STR_SELECT
);

1269 
	`gtk_åì_võw_£t_modñ
(
	`GTK_TREE_VIEW
(
°ªam_võw
[
pid
]),

1270 
	`GTK_TREE_MODEL
(
åaffic_°ªam
[
pid
]));

1272 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
check_ªndîî
), "toggled",

1273 
	`G_CALLBACK
(
íabÀ_°ªam_ˇŒback
), 
NULL
);

1275 
GtkTªeSñe˘i⁄
 *
°ªam_£À˘i⁄
 =

1276 
	`gtk_åì_võw_gë_£À˘i⁄
(
	`GTK_TREE_VIEW
(
°ªam_võw
[
pid
]));

1277 
	`gtk_åì_£À˘i⁄_£t_mode
(
°ªam_£À˘i⁄
,

1278 
GTK_SELECTION_SINGLE
);

1280 
	`g_sig«l_c⁄√˘
(
°ªam_võw
[
pid
],

1282 (
GCÆlback
)
edô_°ªam
,

1283 
NULL
);

1286 
s¸ﬁÀr
 = 
	`g_obje˘_√w
(
GTK_TYPE_SCROLLED_WINDOW
, 
NULL
);

1287 
	`gtk_s¸ﬁÀd_wödow_£t_pﬁicy
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁÀr
),

1288 
GTK_POLICY_AUTOMATIC
, 
GTK_POLICY_ALWAYS
);

1289 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
	`GTK_WIDGET
(
s¸ﬁÀr
), 
TRUE
, TRUE, 5);

1290 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
	`GTK_WIDGET
(
vbox
));

1291  
	`GTK_WIDGET
(
‰ame
);

1292 
	}
}

	@gui/pktgen-gui-streams.h

8 #i‚de‡
_PKTGEN_GUI_STREAMS_H_


9 
	#_PKTGEN_GUI_STREAMS_H_


	)

11 
	~"pktgí-gui.h
"

13 
GtkWidgë
 *
°ªam_wödow
;

14 
GtkWidgë
 *
wödow
;

15 
GAºay
 *
	g∑ckë_öfo
 = 
NULL
;

18 
pktgí_p‹t_°ªam
 
	g°r_db
[
RTE_MAX_ETHPORTS
][
NUM_SEQ_PKTS
 + 1] = {{}};

21 c⁄° *
	gpktgí_ëhî√t_fõlds
[] =

27 c⁄° *
	gpktgí_ùv4_fõlds
[] =

40 c⁄° *
	gpktgí_udp_fõlds
[] =

46 c⁄° *
	gpktgí_t˝_fõlds
[] =

56 
GtkWidgë
 *
	g°ªam_l2_vœn
;

57 
GtkWidgë
 *
	gpktsize_íåy
;

58 
GtkWidgë
 *
	gù_¥Ÿo_íåy
;

60 
gpoöãr
 
	gudp_ª„ªn˚
;

61 
GtkWidgë
 *
	gudp_åìvõw
;

62 
GtkWidgë
 *
	gudp_sw
;

64 
gpoöãr
 
	gu§_def_ª„ªn˚
;

65 
GtkWidgë
 *
	gl4_ãxt_võw
;

66 
GtkTextBuf„r
 *
	gl4_buf„r
;

68 
GtkTextBuf„r
 *
	gl4_∂_buf„r
;

	@gui/pktgen-gui.c

8 
	~"pktgí-gui.h
"

9 
	~"pktgí-gui-cfg.h
"

11 
	#°©ic_°‹e
(
p
, 
b
) do { \

12 
	`gtk_åì_°‹e_£t
(
åì°‹e_°©ic
[(
p
)], \

13 &
t›Àvñ
, 
COL_CHASSIS_PORTS
, (
b
), -1); \

14 } (0))

	)

16 
	#chassis_°‹e
(
t
, 
b
) do { \

17 
	`gtk_åì_°‹e_£t
(
åì°‹e_chassis
, \

18 & (
t
), 
COL_CHASSIS_PORTS
, (
b
), -1); \

19 } (0))

	)

21 
	#°©s_°‹e
(
p
, 
v
) do { \

22 
	`gtk_åì_°‹e_£t
(
åì°‹e_°©s
[(
p
)], \

23 &
t›Àvñ
, 
COL_CHASSIS_PORTS
, (
v
), -1); \

24 } (0))

	)

26 
	#°©s_°‹e_√xt
(
p
, 
v
) do { \

27 
gboﬁón
 
rc
; \

28 
	`°©s_°‹e
(
p
, 
v
); \

29 
rc
 = 
	`gtk_åì_modñ_ôî_√xt
(
modñ_°©s
[(
p
)], &
t›Àvñ
); \

30 i‡((
rc
 =
FALSE
Ë&& (
î∫o
 != 11)) { \

31 
	`¥ötf
("%s: Pid %d - %s Error %s\n", \

32 
__func__
, (
p
), #v, 
	`°ªº‹
(
î∫o
)); \

35 } (0))

	)

37 
	#°©s_tŸ_°‹e
(
p
, 
v
) do { \

38 
	`gtk_åì_°‹e_£t
(
åì°‹e_°©s
[(
p
)], \

39 &
tŸT›Àvñ
, 
COL_CHASSIS_PORTS
, (
v
), -1);\

40 } (0))

	)

42 
	#°©s_tŸ_°‹e_√xt
(
p
, 
v
) do { \

43 
gboﬁón
 
rc
; \

44 
	`°©s_tŸ_°‹e
(
p
, 
v
); \

45 
rc
 = 
	`gtk_åì_modñ_ôî_√xt
(
modñ_°©s
[(
p
)], &
tŸT›Àvñ
); \

46 i‡((
rc
 =
FALSE
Ë&& (
î∫o
 != 11)) { \

47 
	`¥ötf
("%s: Pid %d - %s Error %s\n", \

48 
__func__
, (
p
), #v, 
	`°ªº‹
(
î∫o
)); \

51 } (0))

	)

67 
GtkTªeModñ
 *

68 
	$fûl_chassis_öfo
()

70 
GtkTªeSt‹e
 *
åì°‹e_chassis
;

71 
GtkTªeIãr
 
t›Àvñ
, 
chûd
;

72 
uöt32_t
 
pid
;

73 
rxtx_t
 
˙t
;

75 
°r_p‹t
[15];

77 
åì°‹e_chassis
 = 
	`gtk_åì_°‹e_√w
(
NUM_COLS
, 
G_TYPE_STRING
);

80 
	`gtk_åì_°‹e_≠≥nd
(
åì°‹e_chassis
, &
t›Àvñ
, 
NULL
);

81 
	`chassis_°‹e
(
t›Àvñ
, "[127.0.0.1]");

83 
pid
 = 0;Öid < 
RTE_MAX_ETHPORTS
;Öid++) {

84 
˙t
.
rxtx
 = 
	`gë_m≠
(
pktgí
.
l2p
, 
pid
, 
RTE_MAX_LCORE
);

85 i‡(
˙t
.
rxtx
 == 0)

88 
	`•rötf
(
°r_p‹t
, "%s%d", "P‹t-", 
pid
);

91 
	`gtk_åì_°‹e_≠≥nd
(
åì°‹e_chassis
, &
chûd
, &
t›Àvñ
);

92 
	`chassis_°‹e
(
chûd
, 
°r_p‹t
);

95  
	`GTK_TREE_MODEL
(
åì°‹e_chassis
);

96 
	}
}

112 
GtkTªeModñ
 *

113 
	$fûl_p‹t_öfo
(
pid
, 
gboﬁón
 
is_°©ic
)

115 
GtkTªeIãr
 
t›Àvñ
;

116 
göt
 
i
;

118 i‡(
is_°©ic
 =
TRUE
) {

119 
åì°‹e_°©ic
[
pid
] = 
	`gtk_åì_°‹e_√w
(
NUM_COLS
,

120 
G_TYPE_STRING
);

121 
i
 = 0; i < (
PKTGEN_GUI_MAX_STATIC
); i++) {

123 
	`gtk_åì_°‹e_≠≥nd
(
åì°‹e_°©ic
[
pid
], &
t›Àvñ
, 
NULL
);

124 
	`°©ic_°‹e
(
pid
, "0");

127  
	`GTK_TREE_MODEL
(
åì°‹e_°©ic
[
pid
]);

129 
åì°‹e_°©s
[
pid
] = 
	`gtk_åì_°‹e_√w
(
NUM_COLS
, 
G_TYPE_INT
);

131 
i
 = 0; i < (
PKTGEN_GUI_MAX_STATS
); i++) {

133 
	`gtk_åì_°‹e_≠≥nd
(
åì°‹e_°©s
[
pid
], &
t›Àvñ
, 
NULL
);

134 
	`°©s_°‹e
(
pid
, 0);

137  
	`GTK_TREE_MODEL
(
åì°‹e_°©s
[
pid
]);

139 
	}
}

155 
	$upd©e_p‹t_°©ic_öfo
(
pid
)

157 
uöt8_t
 
i
 = 0;

158 
GtkTªeIãr
 
t›Àvñ
;

159 
p‹t_öfo_t
 *
öfo
 = 
NULL
;

160 
pkt_£q_t
 *
pkt
 = 
NULL
;

161 
gch¨
 
buf
[20];

163 
öfo
 = &
pktgí
.öfo[
pid
];

164 
pkt
 = &
öfo
->
£q_pkt
[
SINGLE_PKT
];

166 
	`gtk_åì_modñ_gë_ôî_fú°
(
modñ_°©ic
[
pid
], &
t›Àvñ
);

168 
i
 = 0; i < (
PKTGEN_GUI_MAX_STATIC
); i++) {

169 
i
) {

172 
	`g_¢¥ötf
(
buf
, (buf), "%s",

173 (
öfo
->
fûl_∑âîn_ty≥
 =
ABC_FILL_PATTERN
) ? "abcd..." :

174 (
öfo
->
fûl_∑âîn_ty≥
 =
NO_FILL_PATTERN
) ? "None" :

175 (
öfo
->
fûl_∑âîn_ty≥
 =
ZERO_FILL_PATTERN
Ë? "Zîo" : info->
u£r_∑âîn
);

180 i‡(
	`πe_©omic64_ªad
(&
öfo
->
å™smô_cou¡
) == 0)

181 
	`g_¢¥ötf
(
buf
, (buf), "%s", "Forever");

183 
	`g_¢¥ötf
(
buf
, (buf), "%lu",

184 
	`πe_©omic64_ªad
(&
öfo
->
å™smô_cou¡
));

188 
	`g_¢¥ötf
(
buf
, (buf), "%d", 
öfo
->
tx_øã
);

192 
	`g_¢¥ötf
(
buf
, (buf), "%d",

193 (
pkt
->
pktSize
 + 
FCS_SIZE
));

197 
	`g_¢¥ötf
(
buf
, (buf), "%d", 
öfo
->
tx_bur°
);

201 
	`g_¢¥ötf
(
buf
, (buf), "%d", 
pkt
->
•‹t
);

205 
	`g_¢¥ötf
(
buf
, (buf), "%d", 
pkt
->
dp‹t
);

208 
	`g_¢¥ötf
(
buf
, (buf), "%s",

209 (
pkt
->
ëhTy≥
 =
ETHER_TYPE_IPv4
) ? "IPv4" :

210 (
pkt
->
ëhTy≥
 =
ETHER_TYPE_IPv6
) ? "IPv6" :

211 (
pkt
->
ëhTy≥
 =
ETHER_TYPE_ARP
) ? "ARP" :

212 (
pkt
->
ùPrŸo
 =
PG_IPPROTO_TCP
) ? "TCP" :

213 (
pkt
->
ùPrŸo
 =
PG_IPPROTO_ICMP
) ? "ICMP" : "UDP");

217 
	`g_¢¥ötf
(
buf
, (buf), "%d", 
pkt
->
vœnid
);

221 
	`°r˝y
(
buf
, 
	`öë_¡›4
(buf, (buf),

222 
	`ht⁄l
(
pkt
->
ù_d°_addr
.
addr
.
ùv4
.
s_addr
),

227 
	`°r˝y
(
buf
, 
	`öë_¡›4
(buf, (buf),

228 
	`ht⁄l
(
pkt
->
ù_§c_addr
.
addr
.
ùv4
.
s_addr
),

229 
pkt
->
ù_mask
));

233 
	`°r˝y
(
buf
, 
	`öë_mtﬂ
(buf, (buf), &
pkt
->
ëh_d°_addr
));

237 
	`°r˝y
(
buf
, 
	`öë_mtﬂ
(buf, (buf), &
pkt
->
ëh_§c_addr
));

241 
	`°r˝y
(
buf
, "0");

244 
	`°©ic_°‹e
(
pid
, 
buf
);

246 i‡(!
	`gtk_åì_modñ_ôî_√xt
(
modñ_°©ic
[
pid
], &
t›Àvñ
))

249 
	}
}

265 
	$upd©e_p‹t_°©i°ics
(*
¨g
)

267 
GtkWidgë
 *
wödow
 = (GtkWidgë *)
¨g
;

268 
pid
 = 0;

269 
p‹t_öfo_t
 *
öfo
 = 
NULL
;

271 
GtkTªeIãr
 
t›Àvñ
;

272 
GtkTªeIãr
 
tŸT›Àvñ
;

273 
rxtx_t
 
˙t
;

274 
ëh_°©s_t
 
tŸ_°©s
 = {0};

276 i‡(
pktgí
.
is_gui_ru¬ög
 =
FALSE
)

277  
TRUE
;

279 
pid
 = 0;Öid < 
RTE_MAX_ETHPORTS
;Öid++) {

280 
˙t
.
rxtx
 = 
	`gë_m≠
(
pktgí
.
l2p
, 
pid
, 
RTE_MAX_LCORE
);

281 i‡(
˙t
.
rxtx
 == 0)

284 
öfo
 = &
pktgí
.öfo[
pid
];

286 
tŸ_°©s
.
ùackës
 +
öfo
->
øã_°©s
.ipackets;

287 
tŸ_°©s
.
›ackës
 +
öfo
->
øã_°©s
.opackets;

288 
tŸ_°©s
.
ibyãs
 +
öfo
->
øã_°©s
.ibytes;

289 
tŸ_°©s
.
obyãs
 +
öfo
->
øã_°©s
.obytes;

290 
tŸ_°©s
.
õº‹s
 +
öfo
->
øã_°©s
.ierrors;

291 
tŸ_°©s
.
€º‹s
 +
öfo
->
øã_°©s
.oerrors;

293 
tŸ_°©s
.
imis£d
 +
öfo
->
øã_°©s
.imissed;

294 #i‡
RTE_VERSION
 < 
	`RTE_VERSION_NUM
(2, 2, 0, 0)

295 
tŸ_°©s
.
ibad¸c
 +
öfo
->
øã_°©s
.ibadcrc;

296 
tŸ_°©s
.
ibadÀn
 +
öfo
->
øã_°©s
.ibadlen;

298 #i‡
RTE_VERSION
 < 
	`RTE_VERSION_NUM
(16, 4, 0, 0)

299 
tŸ_°©s
.
imˇ°s
 +
öfo
->
øã_°©s
.imcasts;

301 
tŸ_°©s
.
rx_nombuf
 +
öfo
->
øã_°©s
.rx_nombuf;

303 
	`gtk_åì_modñ_gë_ôî_fú°
(
modñ_°©s
[
pid
], &
t›Àvñ
);

305 
	`°©s_°‹e_√xt
(
pid
, 
öfo
->
øã_°©s
.
ùackës
);

306 
	`°©s_°‹e_√xt
(
pid
, 
öfo
->
øã_°©s
.
›ackës
);

307 
	`°©s_°‹e_√xt
(
pid
, 
	`iBôsTŸÆ
(
öfo
->
øã_°©s
Ë/ 
Mûli⁄
);

308 
	`°©s_°‹e_√xt
(
pid
, 
	`oBôsTŸÆ
(
öfo
->
øã_°©s
Ë/ 
Mûli⁄
);

311 
	`°©s_°‹e_√xt
(
pid
, 
öfo
->
sizes
.
brﬂdˇ°
);

312 
	`°©s_°‹e_√xt
(
pid
, 
öfo
->
sizes
.
mu…iˇ°
);

313 
	`°©s_°‹e_√xt
(
pid
, 
öfo
->
sizes
.
_64
);

314 
	`°©s_°‹e_√xt
(
pid
, 
öfo
->
sizes
.
_65_127
);

315 
	`°©s_°‹e_√xt
(
pid
, 
öfo
->
sizes
.
_128_255
);

316 
	`°©s_°‹e_√xt
(
pid
, 
öfo
->
sizes
.
_256_511
);

317 
	`°©s_°‹e_√xt
(
pid
, 
öfo
->
sizes
.
_512_1023
);

318 
	`°©s_°‹e_√xt
(
pid
, 
öfo
->
sizes
.
_1024_1518
);

321 
	`°©s_°‹e_√xt
(
pid
, 
öfo
->
sizes
.
ru¡
);

322 
	`°©s_°‹e_√xt
(
pid
, 
öfo
->
sizes
.
jumbo
);

325 
	`°©s_°‹e_√xt
(
pid
, 
öfo
->
¥ev_°©s
.
õº‹s
);

326 
	`°©s_°‹e_√xt
(
pid
, 
öfo
->
¥ev_°©s
.
€º‹s
);

329 
	`°©s_°‹e_√xt
(
pid
, 
öfo
->
¥ev_°©s
.
ùackës
);

330 
	`°©s_°‹e_√xt
(
pid
, 
öfo
->
¥ev_°©s
.
›ackës
);

333 
	`°©s_°‹e_√xt
(
pid
, 
	`iBôsTŸÆ
(
öfo
->
¥ev_°©s
Ë/ 
Mûli⁄
);

334 
	`°©s_°‹e_√xt
(
pid
, 
	`oBôsTŸÆ
(
öfo
->
¥ev_°©s
Ë/ 
Mûli⁄
);

337 
	`°©s_°‹e_√xt
(
pid
, 
öfo
->
°©s
.
¨p_pkts
);

338 
	`°©s_°‹e_√xt
(
pid
, 
öfo
->
°©s
.
echo_pkts
);

341 
	`gtk_åì_modñ_gë_ôî_fú°
(
modñ_°©s
[
pktgí
.
ídög_p‹t
],

342 &
tŸT›Àvñ
);

344 
	`°©s_tŸ_°‹e_√xt
(
pktgí
.
ídög_p‹t
, 
tŸ_°©s
.
ùackës
);

345 
	`°©s_tŸ_°‹e_√xt
(
pktgí
.
ídög_p‹t
, 
tŸ_°©s
.
›ackës
);

347 
	`°©s_tŸ_°‹e_√xt
(
pktgí
.
ídög_p‹t
, 
	`iBôsTŸÆ
(
tŸ_°©s
Ë/ 
Mûli⁄
);

348 
	`°©s_tŸ_°‹e_√xt
(
pktgí
.
ídög_p‹t
, 
	`oBôsTŸÆ
(
tŸ_°©s
Ë/ 
Mûli⁄
);

350 
	`gtk_widgë_queue_døw
(
	`GTK_WIDGET
(
wödow
));

351 
	`gtk_widgë_show_Æl
(
wödow
);

353  
TRUE
;

354 
	}
}

371 
°¨t_°›_åaffic
(
GtkTªeModñ
 *
modñ
,

372 
GtkTªeP©h
 
__©åibuã__
((
unu£d
)Ë*
∑th
,

373 
GtkTªeIãr
 *
ôî
,

374 
gpoöãr
 
u£rd©a
)

376 
gch¨
 *
	g«me
;

377 
p‹t_öfo_t
 *
	göfo
 = 
NULL
;

378 
	gpid
;

379 
guöt
 *
	gÊag
 = (guöà*)
u£rd©a
;

381 
gtk_åì_modñ_gë
(
modñ
, 
ôî
, 
COL_CHASSIS_PORTS
, &
«me
, -1);

383 i‡(0 !
g_°rcmp0
(
«me
, "[127.0.0.1]")) {

384 
	goff£t
 = 
°æí
(
«me
);

385 
	gpid
 = 
©oi
((
«me
 + 
off£t
) - 1);

386 
	göfo
 = &
pktgí
.
öfo
[
pid
];

387 i‡((
	göfo
 !
NULL
Ë&& (*
Êag
 == 1))

388 
pktgí_°¨t_å™smôtög
(
öfo
);

389 i‡((
	göfo
 !
NULL
Ë&& (*
Êag
 == 2))

390 
pktgí_°›_å™smôtög
(
öfo
);

392 i‡(*
	gÊag
 == 1)

393 
f‹Æl_p‹ts
(
pktgí_°¨t_å™smôtög
(
öfo
));

395 
f‹Æl_p‹ts
(
pktgí_°›_å™smôtög
(
öfo
));

414 
	$about_dülog_ˇŒback
()

416 
GdkPixbuf
 *
pixbuf
 = 
	`gdk_pixbuf_√w_‰om_fûe
("gui/ic⁄s/logo.≤g", 
NULL
);

418 
GtkWidgë
 *
about_dülog
 = 
	`gtk_about_dülog_√w
();

420 
	`gtk_about_dülog_£t_«me
(
	`GTK_ABOUT_DIALOG
(
about_dülog
), 
PKTGEN_APP_NAME
);

421 
	`gtk_about_dülog_£t_vîsi⁄
(
	`GTK_ABOUT_DIALOG
(
about_dülog
), 
PKTGEN_VERSION
);

422 
	`gtk_about_dülog_£t_c›yright
(
	`GTK_ABOUT_DIALOG
(
about_dülog
), 
COPYRIGHT_MSG
);

423 
	`gtk_about_dülog_£t_commíts
(
	`GTK_ABOUT_DIALOG
(
about_dülog
), 
POWERED_BY_DPDK
);

424 
	`gtk_about_dülog_£t_websôe
(
	`GTK_ABOUT_DIALOG
(
about_dülog
),

426 
	`gtk_about_dülog_£t_li˚n£
(
	`GTK_ABOUT_DIALOG
(
about_dülog
), 
öãl_c›yright
);

427 
	`gtk_about_dülog_£t_auth‹s
(
	`GTK_ABOUT_DIALOG
(
about_dülog
), 
auth‹s
);

428 
	`gtk_about_dülog_£t_logo
(
	`GTK_ABOUT_DIALOG
(
about_dülog
), 
pixbuf
);

430 
	`g_obje˘_uƒef
(
pixbuf
),Öixbu‡
NULL
;

431 
	`gtk_dülog_run
(
	`GTK_DIALOG
(
about_dülog
));

432 
	`gtk_widgë_de°roy
(
about_dülog
);

434 i‡(
about_dülog
) {

435 
	`gtk_wödow_¥e£¡
(
	`GTK_WINDOW
(
about_dülog
));

439 
	`g_sig«l_c⁄√˘
(
	`GTK_DIALOG
(
about_dülog
), "destroy",

440 
	`G_CALLBACK
(
gtk_widgë_de°royed
), &
about_dülog
);

441 
	}
}

456 
	$show_°ªam
()

458 
uöt
 
no_rows
;

459 
GtkTªeSñe˘i⁄
 *
£À˘i⁄
 = 
	`gtk_åì_võw_gë_£À˘i⁄
(

460 
	`GTK_TREE_VIEW
(
chassis_võw
));

462 
no_rows
 = 
	`gtk_åì_£À˘i⁄_cou¡_£À˘ed_rows
(
£À˘i⁄
);

464 i‡(
no_rows
 == 1)

465 
	`gtk_åì_£À˘i⁄_£À˘ed_f‹óch
(

466 
£À˘i⁄
,

467 
show_°ªam_ˇŒback
,

468 (
gpoöãr
)

469 
°ªam_wödow
);

471 
	}
}

487 
show_°ªam_ˇŒback
(
GtkTªeModñ
 *
modñ
,

488 
GtkTªeP©h
 
__©åibuã__
((
unu£d
)Ë*
∑th
,

489 
GtkTªeIãr
 *
ôî
,

490 
gpoöãr
 
__©åibuã__
((
unu£d
)Ë
u£rd©a
)

492 
gch¨
 *
	g«me
;

493 
	gpid
;

495 
gtk_åì_modñ_gë
(
modñ
, 
ôî
, 
COL_CHASSIS_PORTS
, &
«me
, -1);

497 i‡(0 !
g_°rcmp0
(
«me
, "[127.0.0.1]")) {

498 
	goff£t
 = 
°æí
(
«me
);

499 
	gpid
 = 
©oi
((
«me
 + 
off£t
) - 1);

500 
GLi°
*
	gchûdªn
 =

501 
gtk_c⁄èöî_gë_chûdªn
(
GTK_CONTAINER
(
s¸ﬁÀr
));

503 i‡(
	gchûdªn
 !
NULL
)

504 
gtk_c⁄èöî_ªmove
(
GTK_CONTAINER
(
s¸ﬁÀr
),

505 
GTK_WIDGET
(
chûdªn
->
d©a
));

507 
gtk_c⁄èöî_add
(
GTK_CONTAINER
(
s¸ﬁÀr
),

508 
GTK_WIDGET
(
°ªam_võw
[
pid
]));

509 
gtk_widgë_show_Æl
(
GTK_WIDGET
(
s¸ﬁÀr
));

526 
°¨t_èffic_ˇŒback
(
GtkWidgë
 
__©åibuã__
((
unu£d
)Ë*
w
, 
gpoöãr
 __©åibuã__((unu£d)Ë
d©a
)

528 
guöt
 
	gÊag
 = 1;

529 
GtkTªeSñe˘i⁄
 *
	g£À˘i⁄
 = 
gtk_åì_võw_gë_£À˘i⁄
(

530 
GTK_TREE_VIEW
(
chassis_võw
));

532 
gtk_åì_£À˘i⁄_£À˘ed_f‹óch
(
£À˘i⁄
,

533 
°¨t_°›_åaffic
,

534 (
gpoöãr
Ë& 
Êag
);

550 
°›_åaffic_ˇŒback
(
GtkWidgë
 
__©åibuã__
((
unu£d
)Ë*
w
, 
gpoöãr
 __©åibuã__((unu£d)Ë
d©a
)

552 
guöt
 
	gÊag
 = 2;

553 
GtkTªeSñe˘i⁄
 *
	g£À˘i⁄
 = 
gtk_åì_võw_gë_£À˘i⁄
(

554 
GTK_TREE_VIEW
(
chassis_võw
));

556 
gtk_åì_£À˘i⁄_£À˘ed_f‹óch
(
£À˘i⁄
,

557 
°¨t_°›_åaffic
,

558 (
gpoöãr
Ë& 
Êag
);

574 
°¨t_°›_ˇ±uª
(
GtkTªeModñ
 *
modñ
,

575 
GtkTªeP©h
 
__©åibuã__
((
unu£d
)Ë*
∑th
,

576 
GtkTªeIãr
 *
ôî
,

577 
gpoöãr
 
u£rd©a
)

579 
gch¨
 *
	g«me
;

580 
p‹t_öfo_t
 *
	göfo
 = 
NULL
;

581 
	gpid
;

582 
guöt
 *
	gÊag
 = (guöà*)
u£rd©a
;

584 
gtk_åì_modñ_gë
(
modñ
, 
ôî
, 
COL_CHASSIS_PORTS
, &
«me
, -1);

586 i‡(0 !
g_°rcmp0
(
«me
, "[127.0.0.1]")) {

587 
	goff£t
 = 
°æí
(
«me
);

588 
	gpid
 = 
©oi
((
«me
 + 
off£t
) - 1);

589 
	göfo
 = &
pktgí
.
öfo
[
pid
];

590 i‡((
	göfo
 !
NULL
Ë&& (*
Êag
 == 1))

591 
pktgí_£t_ˇ±uª
(
öfo
, 
ENABLE_STATE
);

592 i‡((
	göfo
 !
NULL
Ë&& (*
Êag
 == 2))

593 
pktgí_£t_ˇ±uª
(
öfo
, 
DISABLE_STATE
);

611 
°¨t_ˇ±uª_ˇŒback
(
GtkWidgë
 
__©åibuã__
((
unu£d
)Ë*
w
, 
gpoöãr
 __©åibuã__((unu£d)Ë
d©a
)

613 
guöt
 
	gÊag
 = 1;

614 
GtkTªeSñe˘i⁄
 *
	g£À˘i⁄
 = 
gtk_åì_võw_gë_£À˘i⁄
(
GTK_TREE_VIEW
(
chassis_võw
));

616 
gtk_åì_£À˘i⁄_£À˘ed_f‹óch
(
£À˘i⁄
,

617 
°¨t_°›_ˇ±uª
,

618 (
gpoöãr
Ë& 
Êag
);

634 
°›_ˇ±uª_ˇŒback
(
GtkWidgë
 
__©åibuã__
((
unu£d
)Ë*
w
, 
gpoöãr
 __©åibuã__((unu£d)Ë
d©a
)

636 
guöt
 
	gÊag
 = 2;

637 
GtkTªeSñe˘i⁄
 *
	g£À˘i⁄
 = 
gtk_åì_võw_gë_£À˘i⁄
(
GTK_TREE_VIEW
(
chassis_võw
));

639 
gtk_åì_£À˘i⁄_£À˘ed_f‹óch
(
£À˘i⁄
,

640 
°¨t_°›_ˇ±uª
,

641 (
gpoöãr
Ë& 
Êag
);

657 
GtkWidgë
 *

658 
	$chassis_åì_võw
()

660 
GtkTªeVõwCﬁumn
 *
cﬁ
;

661 
GtkCñlRídîî
 *
ªndîî
;

662 
GtkTªeModñ
 *
modñ
;

664 
GtkTªeSñe˘i⁄
 *
chassis_£À˘i⁄
;

666 
chassis_võw
 = 
	`gtk_åì_võw_√w
();

668 
cﬁ
 = 
	`gtk_åì_võw_cﬁumn_√w
();

670 
	`gtk_åì_võw_cﬁumn_£t_tôÀ
(
cﬁ
, "Chassis");

671 
	`gtk_åì_võw_cﬁumn_£t_ex∑nd
(
cﬁ
, 
TRUE
);

674 
	`gtk_åì_võw_≠≥nd_cﬁumn
(
	`GTK_TREE_VIEW
(
chassis_võw
), 
cﬁ
);

676 
ªndîî
 = 
	`gtk_˚Œ_ªndîî_ãxt_√w
();

679 
	`gtk_åì_võw_cﬁumn_∑ck_°¨t
(
cﬁ
, 
ªndîî
, 
TRUE
);

683 
	`gtk_åì_võw_cﬁumn_add_©åibuã
(
cﬁ
, 
ªndîî
, "ãxt", 
COL_CHASSIS_PORTS
);

685 
	`gtk_åì_võw_£t_grid_löes
(
	`GTK_TREE_VIEW
(
chassis_võw
),

686 
GTK_TREE_VIEW_GRID_LINES_BOTH
);

688 
modñ
 = 
	`fûl_chassis_öfo
();

689 
	`gtk_åì_võw_£t_modñ
(
	`GTK_TREE_VIEW
(
chassis_võw
), 
modñ
);

690 
	`g_obje˘_uƒef
(
modñ
);

692 
	`gtk_åì_võw_ex∑nd_Æl
(
	`GTK_TREE_VIEW
(
chassis_võw
));

694 
chassis_£À˘i⁄
 = 
	`gtk_åì_võw_gë_£À˘i⁄
(
	`GTK_TREE_VIEW
(
chassis_võw
));

695 
	`gtk_åì_£À˘i⁄_£t_mode
(
chassis_£À˘i⁄
, 
GTK_SELECTION_MULTIPLE
);

697 
	`g_sig«l_c⁄√˘
(
chassis_võw
,

699 (
GCÆlback
)
show_°ªam
,

700 
NULL
);

702  
chassis_võw
;

703 
	}
}

717 
GtkWidgë
 *

718 
	$p‹t_åì_võw
(
p‹t_id
, c⁄° *
tôÀ
, 
gboﬁón
 
is_°©ic
)

720 
GtkTªeVõwCﬁumn
 *
cﬁ_°©s
;

721 
GtkCñlRídîî
 *
ªndîî_°©s
;

722 
°r_p‹t
[15];

724 i‡(
p‹t_id
 !()(
pktgí
.
ídög_p‹t
))

725 
	`•rötf
(
°r_p‹t
, "%s%d", 
tôÀ
, 
p‹t_id
);

727 
	`•rötf
(
°r_p‹t
, "%s", 
tôÀ
);

729 i‡(
is_°©ic
 =
TRUE
) {

730 
võw_°©ic
[
p‹t_id
] = 
	`gtk_åì_võw_√w
();

731 
	`gtk_åì_võw_£t_hódîs_visibÀ
(
	`GTK_TREE_VIEW
(
võw_°©ic
[
p‹t_id
]), 
TRUE
);

733 
võw_°©s
[
p‹t_id
] = 
	`gtk_åì_võw_√w
();

734 
	`gtk_åì_võw_£t_hódîs_visibÀ
(
	`GTK_TREE_VIEW
(
võw_°©s
[
p‹t_id
]), 
TRUE
);

737 
cﬁ_°©s
 = 
	`gtk_åì_võw_cﬁumn_√w
();

739 
	`gtk_åì_võw_cﬁumn_£t_tôÀ
(
cﬁ_°©s
, 
°r_p‹t
);

741 
	`gtk_åì_võw_cﬁumn_£t_Æignmít
(
cﬁ_°©s
, 0.5);

742 
	`gtk_åì_võw_cﬁumn_£t_mö_width
(
cﬁ_°©s
, 30);

744 
	`gtk_åì_võw_cﬁumn_£t_ex∑nd
(
cﬁ_°©s
, 
TRUE
);

746 i‡(
is_°©ic
 =
TRUE
)

748 
	`gtk_åì_võw_≠≥nd_cﬁumn
(
	`GTK_TREE_VIEW
(
võw_°©ic
[
p‹t_id
]),

749 
cﬁ_°©s
);

752 
	`gtk_åì_võw_≠≥nd_cﬁumn
(
	`GTK_TREE_VIEW
(
võw_°©s
[
p‹t_id
]),

753 
cﬁ_°©s
);

755 
ªndîî_°©s
 = 
	`gtk_˚Œ_ªndîî_ãxt_√w
();

758 
	`gtk_åì_võw_cﬁumn_∑ck_°¨t
(
cﬁ_°©s
, 
ªndîî_°©s
, 
TRUE
);

762 
	`gtk_åì_võw_cﬁumn_add_©åibuã
(
cﬁ_°©s
,

763 
ªndîî_°©s
,

765 
COL_CHASSIS_PORTS
);

767 i‡(
is_°©ic
 =
TRUE
) {

768 
	`gtk_åì_võw_£t_grid_löes
(
	`GTK_TREE_VIEW
(
võw_°©ic
[
p‹t_id
]),

769 
GTK_TREE_VIEW_GRID_LINES_BOTH
);

770 
modñ_°©ic
[
p‹t_id
] = 
	`fûl_p‹t_öfo
’‹t_id, 
TRUE
);

771 
	`gtk_åì_võw_£t_modñ
(
	`GTK_TREE_VIEW
(
võw_°©ic
[
p‹t_id
]),

772 
modñ_°©ic
[
p‹t_id
]);

773  
võw_°©ic
[
p‹t_id
];

775 
	`gtk_åì_võw_£t_grid_löes
(
	`GTK_TREE_VIEW
(
võw_°©s
[
p‹t_id
]),

776 
GTK_TREE_VIEW_GRID_LINES_BOTH
);

777 
modñ_°©s
[
p‹t_id
] = 
	`fûl_p‹t_öfo
’‹t_id, 
FALSE
);

778 
	`gtk_åì_võw_£t_modñ
(
	`GTK_TREE_VIEW
(
võw_°©s
[
p‹t_id
]),

779 
modñ_°©s
[
p‹t_id
]);

780  
võw_°©s
[
p‹t_id
];

782 
	}
}

797 
GtkWidgë
 *

798 
buâ⁄_box
(
GtkWidgë
 
__©åibuã__
((
unu£d
)Ë*
võw
, c⁄° *
tôÀ
, 
göt
 
œyout
)

800 
GtkWidgë
 *
	g‰ame
;

801 
GtkWidgë
 *
	gbbox
;

802 
GtkWidgë
 *
	gåaffic_°¨t_buâ⁄
;

803 
GtkWidgë
 *
	gåaffic_°›_buâ⁄
;

804 
GtkWidgë
 *
	gˇ±uª_°¨t_buâ⁄
;

805 
GtkWidgë
 *
	gˇ±uª_°›_buâ⁄
;

806 
GtkWidgë
 *
	gabout_buâ⁄
;

808 
GtkWidgë
 *
	gbuâ⁄ImageSå
, *
	gbuâ⁄ImageSç
, *
	gbuâ⁄ImageC≠Så
,

809 *
	gbuâ⁄ImageC≠Sç
, *
	gbuâ⁄ImageAbt
;

811 
GtkSëtögs
 *
	gdeÁu…_£âögs
 = 
gtk_£âögs_gë_deÁu…
();

813 
g_obje˘_£t
(
deÁu…_£âögs
, "gtk-buâ⁄-images", 
TRUE
, 
NULL
);

815 
	gbuâ⁄ImageSå
 = 
gtk_image_√w
();

816 
gtk_image_£t_‰om_fûe
(
GTK_IMAGE
(
buâ⁄ImageSå
),

819 
	gåaffic_°¨t_buâ⁄
 = 
gtk_buâ⁄_√w
();

820 
gtk_widgë_£t_toﬁtù_ãxt
(
GTK_WIDGET
(
åaffic_°¨t_buâ⁄
), "Start Traffic");

821 
gtk_buâ⁄_£t_ªlõf
((
GtkBuâ⁄
 *)
åaffic_°¨t_buâ⁄
, 
GTK_RELIEF_NONE
);

822 
gtk_buâ⁄_£t_image
((
GtkBuâ⁄
 *)
åaffic_°¨t_buâ⁄
, 
buâ⁄ImageSå
);

823 
gtk_buâ⁄_£t_image_posôi⁄
((
GtkBuâ⁄
 *)
åaffic_°¨t_buâ⁄
, 
GTK_POS_RIGHT
);

825 
	g‰ame
 = 
gtk_‰ame_√w
(
tôÀ
);

826 
	gbbox
 = 
gtk_vbuâ⁄_box_√w
();

828 
gtk_c⁄èöî_add
(
GTK_CONTAINER
(
‰ame
), 
bbox
);

830 
gtk_c⁄èöî_£t_b‹dî_width
(
GTK_CONTAINER
(
åaffic_°¨t_buâ⁄
), 5);

831 
gtk_c⁄èöî_add
(
GTK_CONTAINER
(
bbox
), 
åaffic_°¨t_buâ⁄
);

833 
g_sig«l_c⁄√˘
(
GTK_OBJECT
(
åaffic_°¨t_buâ⁄
), "clicked",

834 
GTK_SIGNAL_FUNC
(
°¨t_èffic_ˇŒback
), 
NULL
);

836 
	gåaffic_°›_buâ⁄
 = 
gtk_buâ⁄_√w
();

837 
gtk_widgë_£t_toﬁtù_ãxt
(
GTK_WIDGET
(
åaffic_°›_buâ⁄
),"Stop Traffic");

839 
	gbuâ⁄ImageSç
 = 
gtk_image_√w
();

840 
gtk_image_£t_‰om_fûe
(
GTK_IMAGE
(
buâ⁄ImageSç
),

842 
gtk_buâ⁄_£t_ªlõf
((
GtkBuâ⁄
 *)
åaffic_°›_buâ⁄
, 
GTK_RELIEF_NONE
);

843 
gtk_buâ⁄_£t_image
((
GtkBuâ⁄
 *)
åaffic_°›_buâ⁄
, 
buâ⁄ImageSç
);

844 
gtk_buâ⁄_£t_image_posôi⁄
((
GtkBuâ⁄
 *)
åaffic_°›_buâ⁄
, 
GTK_POS_RIGHT
);

846 
gtk_c⁄èöî_£t_b‹dî_width
(
GTK_CONTAINER
(
åaffic_°›_buâ⁄
), 5);

847 
gtk_c⁄èöî_add
(
GTK_CONTAINER
(
bbox
), 
åaffic_°›_buâ⁄
);

849 
g_sig«l_c⁄√˘
(
GTK_OBJECT
(
åaffic_°›_buâ⁄
), "clicked",

850 
GTK_SIGNAL_FUNC
(
°›_åaffic_ˇŒback
), 
NULL
);

852 
	gˇ±uª_°¨t_buâ⁄
 = 
gtk_buâ⁄_√w
();

853 
gtk_widgë_£t_toﬁtù_ãxt
(
GTK_WIDGET
(
ˇ±uª_°¨t_buâ⁄
), "Start Capture");

855 
	gbuâ⁄ImageC≠Så
 = 
gtk_image_√w
();

856 
gtk_image_£t_‰om_fûe
(
GTK_IMAGE
(
buâ⁄ImageC≠Så
),

858 
gtk_buâ⁄_£t_ªlõf
((
GtkBuâ⁄
 *)
ˇ±uª_°¨t_buâ⁄
,

859 
GTK_RELIEF_NONE
);

860 
gtk_buâ⁄_£t_image
((
GtkBuâ⁄
 *)
ˇ±uª_°¨t_buâ⁄
,

861 
buâ⁄ImageC≠Så
);

862 
gtk_buâ⁄_£t_image_posôi⁄
((
GtkBuâ⁄
 *)
ˇ±uª_°¨t_buâ⁄
,

863 
GTK_POS_LEFT
);

865 
gtk_c⁄èöî_£t_b‹dî_width
(
GTK_CONTAINER
(
ˇ±uª_°¨t_buâ⁄
), 5);

866 
gtk_c⁄èöî_add
(
GTK_CONTAINER
(
bbox
), 
ˇ±uª_°¨t_buâ⁄
);

868 
g_sig«l_c⁄√˘
(
GTK_OBJECT
(
ˇ±uª_°¨t_buâ⁄
), "clicked",

869 
GTK_SIGNAL_FUNC
(
°¨t_ˇ±uª_ˇŒback
), 
NULL
);

871 
	gˇ±uª_°›_buâ⁄
 = 
gtk_buâ⁄_√w
();

872 
gtk_widgë_£t_toﬁtù_ãxt
(
GTK_WIDGET
(
ˇ±uª_°›_buâ⁄
),

875 
	gbuâ⁄ImageC≠Sç
 = 
gtk_image_√w
();

876 
gtk_image_£t_‰om_fûe
(
GTK_IMAGE
(
buâ⁄ImageC≠Sç
),

878 
gtk_buâ⁄_£t_ªlõf
((
GtkBuâ⁄
 *)
ˇ±uª_°›_buâ⁄
, 
GTK_RELIEF_NONE
);

879 
gtk_buâ⁄_£t_image
((
GtkBuâ⁄
 *)
ˇ±uª_°›_buâ⁄
,

880 
buâ⁄ImageC≠Sç
);

881 
gtk_buâ⁄_£t_image_posôi⁄
((
GtkBuâ⁄
 *)
ˇ±uª_°›_buâ⁄
,

882 
GTK_POS_RIGHT
);

884 
gtk_c⁄èöî_£t_b‹dî_width
(
GTK_CONTAINER
(
ˇ±uª_°›_buâ⁄
), 5);

885 
gtk_c⁄èöî_add
(
GTK_CONTAINER
(
bbox
), 
ˇ±uª_°›_buâ⁄
);

887 
g_sig«l_c⁄√˘
(
GTK_OBJECT
(
ˇ±uª_°›_buâ⁄
), "clicked",

888 
GTK_SIGNAL_FUNC
(
°›_ˇ±uª_ˇŒback
), 
NULL
);

890 
	gabout_buâ⁄
 = 
gtk_buâ⁄_√w
();

891 
gtk_widgë_£t_toﬁtù_ãxt
(
GTK_WIDGET
(
about_buâ⁄
), "About");

893 
	gbuâ⁄ImageAbt
 = 
gtk_image_√w
();

894 
gtk_image_£t_‰om_fûe
(
GTK_IMAGE
(
buâ⁄ImageAbt
), "gui/icons/about.png");

895 
gtk_buâ⁄_£t_ªlõf
((
GtkBuâ⁄
 *)
about_buâ⁄
, 
GTK_RELIEF_NONE
);

896 
gtk_buâ⁄_£t_image
((
GtkBuâ⁄
 *)
about_buâ⁄
, 
buâ⁄ImageAbt
);

897 
gtk_buâ⁄_£t_image_posôi⁄
((
GtkBuâ⁄
 *)
about_buâ⁄
, 
GTK_POS_RIGHT
);

899 
gtk_c⁄èöî_£t_b‹dî_width
(
GTK_CONTAINER
(
about_buâ⁄
), 5);

900 
gtk_c⁄èöî_add
(
GTK_CONTAINER
(
bbox
), 
about_buâ⁄
);

902 
g_sig«l_c⁄√˘
(
GTK_OBJECT
(
about_buâ⁄
), "clicked",

903 
GTK_SIGNAL_FUNC
(
about_dülog_ˇŒback
), 
NULL
);

906 
gtk_buâ⁄_box_£t_œyout
(
GTK_BUTTON_BOX
(
bbox
), 
œyout
);

908  
	g‰ame
;

924 
	$c⁄sﬁe_ˇŒback
(
GtkWidgë
 *
widgë
, GtkWidgë *
íåy
)

926 
GtkTextM¨k
 *
m¨k
;

927 
GtkAdju°mít
 *
vadj
;

928 c⁄° 
gch¨
 *
íåy_ãxt
 = 
NULL
;

929 c⁄° 
gch¨
 *
cmd_¥om±
 = "Pktgen> ";

931 
íåy_ãxt
 = 
	`gtk_íåy_gë_ãxt
(
	`GTK_ENTRY
(
widgë
));

933 
m¨k
 = 
	`gtk_ãxt_buf„r_gë_ö£π
(
buf„r
);

934 
	`gtk_ãxt_buf„r_gë_ôî_©_m¨k
(
buf„r
, &
buf„r_ôî
, 
m¨k
);

937 i‡(
	`gtk_ãxt_buf„r_gë_ch¨_cou¡
(
buf„r
))

938 
	`gtk_ãxt_buf„r_ö£π
(
buf„r
, &
buf„r_ôî
, "\n", 1);

941 
	`gtk_ãxt_buf„r_ö£π
(
buf„r
, &
buf„r_ôî
,

942 
	`g_°rc⁄ˇt
(
cmd_¥om±
, 
íåy_ãxt
, 
NULL
), -1);

944 
	`cmdlöe_ö
(
pktgí
.
˛
, 
íåy_ãxt
, 
	`°æí
(entry_text));

945 
	`cmdlöe_ö
(
pktgí
.
˛
, "\r", 1);

948 
vadj
 = 
	`gtk_s¸ﬁÀd_wödow_gë_vadju°mít
(
	`GTK_SCROLLED_WINDOW
(
íåy
));

949 
	`gtk_adju°mít_£t_vÆue
(
vadj
, vadj->
uµî
);

950 
	`gtk_s¸ﬁÀd_wödow_£t_vadju°mít
(
	`GTK_SCROLLED_WINDOW
(
íåy
), 
vadj
);

952 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
widgë
), "");

953 
	}
}

968 
GtkWidgë
 *

969 
	$¸óã_chassis
()

971 
GtkWidgë
 *
‰ame
;

973 
‰ame
 = 
	`gtk_‰ame_√w
(
NULL
);

975 
	`gtk_widgë_£t_size_ªque°
(
‰ame
, 300, 200);

977 
chassis_võw
 = 
	`chassis_åì_võw
();

979 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
chassis_võw
);

981  
‰ame
;

982 
	}
}

997 
GtkWidgë
 *

998 
	$c⁄sﬁe_box
(c⁄° *
tôÀ
)

1000 
GtkWidgë
*
ãxtAªa
 = 
	`gtk_ãxt_võw_√w
();

1001 
GtkWidgë
*
s¸ﬁÀdwödow
 = 
	`gtk_s¸ﬁÀd_wödow_√w
(
NULL
, NULL);

1002 
GtkWidgë
*
ãxtE¡ry
 = 
	`gtk_íåy_√w
();

1003 
GtkWidgë
*
c⁄sﬁe
 = 
	`gtk_èbÀ_√w
(3, 1, 
FALSE
);

1005 
GtkWidgë
 *
‰ame
 = 
	`gtk_‰ame_√w
(
tôÀ
);

1007 
	`gtk_widgë_£t_size_ªque°
(
‰ame
, 300, 100);

1009 
buf„r
 = 
	`gtk_ãxt_võw_gë_buf„r
(
	`GTK_TEXT_VIEW
(
ãxtAªa
));

1011 
	`gtk_ãxt_võw_£t_edôabÀ
(
	`GTK_TEXT_VIEW
(
ãxtAªa
), 
FALSE
);

1013 
	`gtk_s¸ﬁÀd_wödow_£t_pﬁicy
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁÀdwödow
),

1014 
GTK_POLICY_AUTOMATIC
, 
GTK_POLICY_ALWAYS
);

1016 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
s¸ﬁÀdwödow
), 
ãxtAªa
);

1017 
	`gtk_èbÀ_£t_homogíeous
(
	`GTK_TABLE
(
c⁄sﬁe
), 
FALSE
);

1019 
	`gtk_èbÀ_©èch_deÁu…s
(
	`GTK_TABLE
(
c⁄sﬁe
), 
s¸ﬁÀdwödow
, 0, 1, 0, 1);

1020 
	`gtk_èbÀ_©èch
(
	`GTK_TABLE
(
c⁄sﬁe
), 
ãxtE¡ry
, 0, 1, 1, 2, 
GTK_FILL
, GTK_FILL, 0, 0);

1022 
	`gtk_ãxt_buf„r_gë_ôî_©_off£t
(
buf„r
, &
buf„r_ôî
, 0);

1023 
	`gtk_íåy_£t_max_Àngth
(
	`GTK_ENTRY
(
ãxtE¡ry
), 250);

1024 
	`g_sig«l_c⁄√˘
(
ãxtE¡ry
, "activate",

1025 
	`G_CALLBACK
(
c⁄sﬁe_ˇŒback
),

1026 
s¸ﬁÀdwödow
);

1028 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
c⁄sﬁe
);

1030  
‰ame
;

1031 
	}
}

1046 
GtkTªeModñ
 *

1047 
	$°©s_hódî_fûl
(
gboﬁón
 
is_°©ic
)

1049 
GtkTªeSt‹e
 *
°©s_œbñ_åì°‹e
;

1050 
GtkTªeIãr
 
t›Àvñ
;

1051 
göt
 
i
;

1053 
°©s_œbñ_åì°‹e
 = 
	`gtk_åì_°‹e_√w
(
NUM_COLS
, 
G_TYPE_STRING
);

1055 i‡(
is_°©ic
 =
TRUE
)

1056 
i
 = 0; i < 
PKTGEN_GUI_MAX_STATIC
; i++) {

1058 
	`gtk_åì_°‹e_≠≥nd
(
°©s_œbñ_åì°‹e
, &
t›Àvñ
, 
NULL
);

1059 
	`gtk_åì_°‹e_£t
(
°©s_œbñ_åì°‹e
,

1060 &
t›Àvñ
, 
COL_CHASSIS_PORTS
,

1061 
pktgí_°©ic_fõlds
[
i
], -1);

1065 
i
 = 0; i < 
PKTGEN_GUI_MAX_STATS
; i++) {

1067 
	`gtk_åì_°‹e_≠≥nd
(
°©s_œbñ_åì°‹e
, &
t›Àvñ
, 
NULL
);

1068 
	`gtk_åì_°‹e_£t
(
°©s_œbñ_åì°‹e
,

1069 &
t›Àvñ
, 
COL_CHASSIS_PORTS
,

1070 
pktgí_°©s_fõlds
[
i
], -1);

1073  
	`GTK_TREE_MODEL
(
°©s_œbñ_åì°‹e
);

1074 
	}
}

1089 
GtkWidgë
 *

1090 
	$¸óã_°©s_åìvõw
(
gboﬁón
 
is_°©ic
)

1092 
GtkTªeVõwCﬁumn
 *
°©s_œbñ_cﬁ
;

1093 
GtkCñlRídîî
 *
°©s_œbñ_ªndîî
;

1094 
GtkWidgë
 *
°©s_œbñ_võw
;

1095 
GtkTªeModñ
 *
°©s_œbñ_modñ
;

1097 
GtkTªeSñe˘i⁄
 *
°©s_œbñ_£À˘i⁄
;

1099 
°r_p‹t
[15] = "Port#";

1101 
°©s_œbñ_võw
 = 
	`gtk_åì_võw_√w
();

1103 
	`gtk_åì_võw_£t_hódîs_visibÀ
(
	`GTK_TREE_VIEW
(
°©s_œbñ_võw
), 
TRUE
);

1105 
°©s_œbñ_cﬁ
 = 
	`gtk_åì_võw_cﬁumn_√w
();

1107 
	`gtk_åì_võw_cﬁumn_£t_tôÀ
(
°©s_œbñ_cﬁ
, 
°r_p‹t
);

1109 
	`gtk_åì_võw_cﬁumn_£t_Æignmít
(
°©s_œbñ_cﬁ
, 0.5);

1111 
	`gtk_åì_võw_cﬁumn_£t_sizög
(
	`GTK_TREE_VIEW_COLUMN
(
°©s_œbñ_cﬁ
),

1112 
GTK_TREE_VIEW_COLUMN_FIXED
);

1113 
	`gtk_åì_võw_cﬁumn_£t_mö_width
(
°©s_œbñ_cﬁ
, 200);

1114 
	`gtk_åì_võw_cﬁumn_£t_max_width
(
°©s_œbñ_cﬁ
, 200);

1116 
	`gtk_åì_võw_cﬁumn_£t_fixed_width
(
°©s_œbñ_cﬁ
, 200);

1117 
	`gtk_åì_võw_≠≥nd_cﬁumn
(
	`GTK_TREE_VIEW
(
°©s_œbñ_võw
), 
°©s_œbñ_cﬁ
);

1119 
°©s_œbñ_ªndîî
 = 
	`gtk_˚Œ_ªndîî_ãxt_√w
();

1121 
	`gtk_åì_võw_cﬁumn_∑ck_°¨t
(
°©s_œbñ_cﬁ
,

1122 
°©s_œbñ_ªndîî
,

1123 
TRUE
);

1125 
	`gtk_åì_võw_cﬁumn_add_©åibuã
(
°©s_œbñ_cﬁ
,

1126 
°©s_œbñ_ªndîî
,

1128 
COL_CHASSIS_PORTS
);

1132 
	`g_obje˘_£t
(
°©s_œbñ_ªndîî
,

1133 "weight", 
PANGO_WEIGHT_BOLD
,

1134 "weight-£t", 
TRUE
,

1135 
NULL
);

1138 
	`g_obje˘_£t
(
°©s_œbñ_ªndîî
,

1140 "˚Œ-background-£t", 
TRUE
,

1141 
NULL
);

1143 
	`gtk_åì_võw_£t_grid_löes
(
	`GTK_TREE_VIEW
(
°©s_œbñ_võw
),

1144 
GTK_TREE_VIEW_GRID_LINES_BOTH
);

1146 
°©s_œbñ_modñ
 = 
	`°©s_hódî_fûl
(
is_°©ic
);

1148 
	`gtk_åì_võw_£t_modñ
(
	`GTK_TREE_VIEW
(
°©s_œbñ_võw
),

1149 
°©s_œbñ_modñ
);

1150 
	`g_obje˘_uƒef
(
°©s_œbñ_modñ
);

1152 
°©s_œbñ_£À˘i⁄
 =

1153 
	`gtk_åì_võw_gë_£À˘i⁄
(
	`GTK_TREE_VIEW
(
°©s_œbñ_võw
));

1154 
	`gtk_åì_£À˘i⁄_£t_mode
(
°©s_œbñ_£À˘i⁄
, 
GTK_SELECTION_NONE
);

1156  
°©s_œbñ_võw
;

1157 
	}
}

1171 
GtkWidgë
 *

1172 
	$show_°©ic_c⁄f
()

1174 
GtkWidgë
 *
hbox_°©s
;

1175 
GtkWidgë
 *
‰ame_h‹z_c⁄f
;

1176 
GtkWidgë
 *
s¸ﬁÀd_wödow
;

1177 
GtkWidgë
 *
èbÀ
;

1178 
uöt32_t
 
pid
;

1179 
rxtx_t
 
˙t
;

1182 
s¸ﬁÀd_wödow
 = 
	`gtk_s¸ﬁÀd_wödow_√w
(
NULL
, NULL);

1184 
	`gtk_c⁄èöî_£t_b‹dî_width
(
	`GTK_CONTAINER
(
s¸ﬁÀd_wödow
), 10);

1186 
	`gtk_s¸ﬁÀd_wödow_£t_pﬁicy
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁÀd_wödow
),

1187 
GTK_POLICY_AUTOMATIC
, 
GTK_POLICY_ALWAYS
);

1189 
‰ame_h‹z_c⁄f
 = 
	`gtk_‰ame_√w
("Static configuration");

1190 
	`gtk_widgë_£t_size_ªque°
(
‰ame_h‹z_c⁄f
, -1, 200);

1192 
hbox_°©s
 = 
	`gtk_hbox_√w
(
FALSE
, 0);

1193 
	`gtk_c⁄èöî_£t_b‹dî_width
(
	`GTK_CONTAINER
(
hbox_°©s
), 10);

1195 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox_°©s
), 
s¸ﬁÀd_wödow
, 
TRUE
, TRUE, 0);

1196 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame_h‹z_c⁄f
), 
hbox_°©s
);

1199 
èbÀ
 = 
	`gtk_èbÀ_√w
(1, (
pktgí
.
ídög_p‹t
 + 1), 
FALSE
);

1202 
	`gtk_èbÀ_£t_row_•acögs
(
	`GTK_TABLE
(
èbÀ
), 5);

1203 
	`gtk_èbÀ_£t_cﬁ_•acögs
(
	`GTK_TABLE
(
èbÀ
), 5);

1205 
	`gtk_s¸ﬁÀd_wödow_add_wôh_võwp‹t
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁÀd_wödow
), 
èbÀ
);

1206 
	`gtk_widgë_show
(
èbÀ
);

1209 
	`gtk_èbÀ_©èch_deÁu…s
(
	`GTK_TABLE
(
èbÀ
),

1210 
	`¸óã_°©s_åìvõw
(
TRUE
), 0, 1, 0, 1);

1213 
pid
 = 0;Öid < 
RTE_MAX_ETHPORTS
;Öid++) {

1214 
˙t
.
rxtx
 = 
	`gë_m≠
(
pktgí
.
l2p
, 
pid
, 
RTE_MAX_LCORE
);

1215 i‡(
˙t
.
rxtx
 == 0)

1218 
	`gtk_èbÀ_©èch_deÁu…s
(
	`GTK_TABLE
(
èbÀ
),

1219 
	`p‹t_åì_võw
(
pid
, "P‹t", 
TRUE
),

1220 (
pid
 + 1), (pid + 2), 0, 1);

1221 
	`upd©e_p‹t_°©ic_öfo
(
pid
);

1224  
‰ame_h‹z_c⁄f
;

1225 
	}
}

1240 
GtkWidgë
 *

1241 
	$show_°©i°ics
()

1243 
GtkWidgë
 *
‰ame_h‹z_°©s
;

1244 
GtkWidgë
 *
s¸ﬁÀd_wödow
;

1245 
GtkWidgë
 *
s¸ﬁÀd_tŸ_wödow
;

1246 
GtkWidgë
 *
èbÀ
;

1247 
GtkWidgë
 *
hbox_°©s
;

1248 
GtkWidgë
 *
hbox_tŸ_°©s
;

1249 
uöt32_t
 
pid
;

1250 
rxtx_t
 
˙t
;

1253 
s¸ﬁÀd_wödow
 = 
	`gtk_s¸ﬁÀd_wödow_√w
(
NULL
, NULL);

1255 
	`gtk_c⁄èöî_£t_b‹dî_width
(
	`GTK_CONTAINER
(
s¸ﬁÀd_wödow
), 10);

1257 
	`gtk_s¸ﬁÀd_wödow_£t_pﬁicy
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁÀd_wödow
),

1258 
GTK_POLICY_AUTOMATIC
, 
GTK_POLICY_ALWAYS
);

1260 
s¸ﬁÀd_tŸ_wödow
 = 
	`gtk_s¸ﬁÀd_wödow_√w
(
NULL
, NULL);

1261 
	`gtk_c⁄èöî_£t_b‹dî_width
(
	`GTK_CONTAINER
(
s¸ﬁÀd_tŸ_wödow
), 10);

1262 
	`gtk_s¸ﬁÀd_wödow_£t_pﬁicy
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁÀd_tŸ_wödow
),

1263 
GTK_POLICY_NEVER
, 
GTK_POLICY_AUTOMATIC
);

1265 
‰ame_h‹z_°©s
 = 
	`gtk_‰ame_√w
("Statistics");

1266 
	`gtk_widgë_£t_size_ªque°
(
‰ame_h‹z_°©s
, -1, 400);

1268 
hbox_°©s
 = 
	`gtk_hbox_√w
(
FALSE
, 0);

1269 
	`gtk_c⁄èöî_£t_b‹dî_width
(
	`GTK_CONTAINER
(
hbox_°©s
), 10);

1271 
hbox_tŸ_°©s
 = 
	`gtk_hbox_√w
(
FALSE
, 0);

1272 
	`gtk_box_£t_homogíeous
(
	`GTK_BOX
(
hbox_°©s
), 
FALSE
);

1273 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox_°©s
), 
s¸ﬁÀd_wödow
, 
TRUE
, TRUE, 0);

1274 
	`gtk_box_∑ck_íd
(
	`GTK_BOX
(
hbox_°©s
), 
s¸ﬁÀd_tŸ_wödow
, 
FALSE
, FALSE, 0);

1275 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame_h‹z_°©s
), 
hbox_°©s
);

1276 
	`gtk_s¸ﬁÀd_wödow_add_wôh_võwp‹t
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁÀd_tŸ_wödow
), 
hbox_tŸ_°©s
);

1279 
èbÀ
 = 
	`gtk_èbÀ_√w
(1, (
pktgí
.
ídög_p‹t
 + 1), 
FALSE
);

1282 
	`gtk_èbÀ_£t_row_•acögs
(
	`GTK_TABLE
(
èbÀ
), 5);

1283 
	`gtk_èbÀ_£t_cﬁ_•acögs
(
	`GTK_TABLE
(
èbÀ
), 5);

1285 
	`gtk_s¸ﬁÀd_wödow_add_wôh_võwp‹t
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁÀd_wödow
), 
èbÀ
);

1286 
	`gtk_widgë_show
(
èbÀ
);

1289 
	`gtk_èbÀ_©èch_deÁu…s
(
	`GTK_TABLE
(
èbÀ
),

1290 
	`¸óã_°©s_åìvõw
(
FALSE
), 0, 1, 0, 1);

1293 
pid
 = 0;Öid < 
RTE_MAX_ETHPORTS
;Öid++) {

1294 
˙t
.
rxtx
 = 
	`gë_m≠
(
pktgí
.
l2p
, 
pid
, 
RTE_MAX_LCORE
);

1295 i‡(
˙t
.
rxtx
 == 0)

1298 
	`gtk_èbÀ_©èch_deÁu…s
(
	`GTK_TABLE
(
èbÀ
),

1299 
	`p‹t_åì_võw
(
pid
, "P‹t", 
FALSE
),

1300 (
pid
 + 1), (pid + 2), 0, 1);

1304 
	`gtk_box_∑ck_íd
(
	`GTK_BOX
(
hbox_tŸ_°©s
),

1305 
	`p‹t_åì_võw
(
pktgí
.
ídög_p‹t
,

1306 "TŸÆ R©e", 
FALSE
), 
TRUE
, FALSE, 0);

1308  
‰ame_h‹z_°©s
;

1309 
	}
}

1324 
	$˛o£_gui
()

1326 
pktgí
.
is_gui_ru¬ög
 = 
FALSE
;

1327 
	`gtk_maö_quô
();

1328 
	}
}

1343 
	$°¨t_gui
()

1345 
GtkWidgë
 *
wödow
;

1346 
GtkWidgë
 *
vbox
;

1347 
GtkWidgë
 *
hbox
;

1348 
GtkWidgë
 *
‰ame
;

1349 
GdkPixbuf
 *
pixbuf
 = 
	`gdk_pixbuf_√w_‰om_fûe
("gui/ic⁄s/logo.≤g", 
NULL
);

1351 
wödow
 = 
	`gtk_wödow_√w
(
GTK_WINDOW_TOPLEVEL
);

1352 
	`g_sig«l_c⁄√˘
(
wödow
, "de°roy", 
	`G_CALLBACK
(
˛o£_gui
), 
NULL
);

1354 
	`gtk_wödow_£t_tôÀ
(
	`GTK_WINDOW
(
wödow
), 
PKTGEN_GUI_APP_NAME
);

1355 
	`gtk_wödow_£t_ic⁄
(
	`GTK_WINDOW
(
wödow
), 
pixbuf
);

1356 
	`gtk_wödow_£t_deÁu…_size
(
	`GTK_WINDOW
(
wödow
), 700, 500);

1357 
	`gtk_wödow_£t_posôi⁄
(
	`GTK_WINDOW
(
wödow
), 
GTK_WIN_POS_CENTER
);

1359 
	`gtk_c⁄èöî_£t_b‹dî_width
(
	`GTK_CONTAINER
(
wödow
), 10);

1361 
vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 0);

1362 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
wödow
), 
vbox
);

1364 
‰ame
 = 
	`gtk_‰ame_√w
("Configuration");

1365 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
‰ame
, 
TRUE
, TRUE, 10);

1367 
hbox
 = 
	`gtk_hbox_√w
(
FALSE
, 0);

1369 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
	`¸óã_chassis
(), 
FALSE
, 
TRUE
, 0);

1371 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
),

1372 
	`buâ⁄_box
(
chassis_võw
, "Tøffic", 
GTK_BUTTONBOX_CENTER
),

1373 
FALSE
, FALSE, 5);

1375 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
	`°ªam_box
(), 
FALSE
, 
TRUE
, 0);

1377 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
	`c⁄sﬁe_box
("C⁄sﬁe"), 
TRUE
, TRUE, 5);

1379 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
	`show_°©ic_c⁄f
(), 
TRUE
, TRUE, 10);

1381 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
	`show_°©i°ics
(), 
TRUE
, TRUE, 10);

1383 
	`gtk_c⁄èöî_£t_b‹dî_width
(
	`GTK_CONTAINER
(
hbox
), 10);

1384 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
hbox
);

1386 
	`gtk_widgë_show_Æl
(
wödow
);

1388 
pktgí
.
is_gui_ru¬ög
 = 
TRUE
;

1390 
	`g_timeout_add_£c⁄ds
(3, (
GSour˚Func
)
upd©e_p‹t_°©i°ics
, 
wödow
);

1393 
	`gtk_maö
();

1394 
	}
}

1409 
	$pktgí_gui_maö
(
¨gc
, *
¨gv
[])

1411 
rc
;

1412 
±hªad_t
 
öc_x_thªad
;

1415 
	`gtk_öô
(&
¨gc
, &
¨gv
);

1418 
rc
 = 
	`±hªad_¸óã
(&
öc_x_thªad
, 
NULL
,

1419 (*)&
°¨t_gui
, 
NULL
);

1420 i‡(
rc
) {

1421 
	`¥ötf
("Error creating GUIÅhread\n");

1424 
	}
}

	@gui/pktgen-gui.h

8 #i‚de‡
_PKTGEN_GUI_H_


9 
	#_PKTGEN_GUI_H_


	)

11 
	~<gtk/gtk.h
>

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<°rög.h
>

15 
	~"pktgí.h
"

16 
	~"pktgí-p‹t-cfg.h
"

17 
	~"pktgí-cmds.h
"

18 
	~"œuxlib.h
"

20 
	#PKTGEN_GUI_MAX_STATS
 22

	)

21 
	#PKTGEN_GUI_MAX_STATIC
 13

	)

23 
	#NO_ETH_FIELDS
 4

	)

24 
	#NO_IP_FIELDS
 15

	)

25 
	#NO_UDP_FIELDS
 4

	)

27 
pktgí_t
 
pktgí
;

28 
cmdlöe_∑r£_˘x_t
 
maö_˘x
[];

30 
GtkTªeSt‹e
 *
	gåì°‹e_°©s
[
RTE_MAX_ETHPORTS
];

31 
GtkTªeSt‹e
 *
	gåì°‹e_°©ic
[
RTE_MAX_ETHPORTS
];

32 
GtkWidgë
 *
	gvõw_°©ic
[
RTE_MAX_ETHPORTS
];

33 
GtkTªeModñ
 *
	gmodñ_°©ic
[
RTE_MAX_ETHPORTS
];

35 
GtkWidgë
 *
	gvõw_°©s
[
RTE_MAX_ETHPORTS
];

36 
GtkTªeModñ
 *
	gmodñ_°©s
[
RTE_MAX_ETHPORTS
];

38 
GtkTextBuf„r
 *
	gbuf„r
;

39 
GtkTextIãr
 
	gbuf„r_ôî
;

41 
GtkWidgë
 *
	g°ªam_võw
[
RTE_MAX_ETHPORTS
];

42 
GtkTªeSt‹e
 *
	gåaffic_°ªam
[
RTE_MAX_ETHPORTS
];

43 
GtkWidgë
 *
	g°ªam_wödow
;

44 
GtkWidgë
 *
	ghsˇÀ
;

45 
göt
 
	gtx_øã
;

46 
GtkWidgë
 *
	gnŸebook
;

47 
GtkS¸ﬁÀdWödow
 *
	gs¸ﬁÀr
;

49 
GtkWidgë
 *
	gchassis_võw
;

53 
	spktgí_p‹t_°ªam_t
 {

54 
gch¨
 *
	m∑th
;

55 
gch¨
 *
	m°ªam_«me
;

56 
gboﬁón
 
	m°ªam_£À˘
;

57 
göt
 
	m°ªam_no
;

58 } 
	tpktgí_p‹t_°ªam
;

62 
	mCOL_CHASSIS_PORTS
 = 0,

63 
	mNUM_COLS


68 
	mTRAF_STR_NAME
,

69 
	mTRAF_STR_SELECT
,

70 
	mTRAF_STR_NO
,

71 
	mNUM_TRAF_STR_COLS


76 
	mSL_COL
,

77 
	mSELECT_COL
,

78 
	mNUM_PROTO_COLS


83 
	mTYPE_ETH
,

84 
	mTYPE_VLAN
,

85 
	mTYPE_IPv4
,

86 
	mTYPE_UDP
,

87 
	mTYPE_TCP
,

88 
	mTYPE_INVALID


89 } 
	t¥Ÿo_ty≥
;

93 
	mCOLUMN_NAME
,

94 
	mCOLUMN_VALUE
,

95 
	mMAX_COLUMNS


100 
gch¨
 *
	m«me
;

101 
gch¨
 *
	mvÆue
;

103 
	t¥Ÿocﬁ
;

106 
GtkTªeModñ
 *
fûl_p‹t_öfo
(
pid
, 
gboﬁón
 
is_°©ic
);

107 
GtkWidgë
 *
chassis_åì_võw
();

108 
GtkTªeModñ
 *
fûl_chassis_öfo
();

109 
GtkWidgë
 *
¸óã_chassis
();

110 
GtkWidgë
 *
c⁄sﬁe_box
(c⁄° *
tôÀ
);

111 
GtkWidgë
 *
¸óã_°©s_åìvõw
(
gboﬁón
 
is_°©ic
);

112 
GtkTªeModñ
 *
°©s_hódî_fûl
(
gboﬁón
 
is_°©ic
);

113 
pktgí_gui_maö
(
¨gc
, *
¨gv
[]);

114 
°¨t_gui
();

115 
˛o£_gui
();

116 
upd©e_p‹t_°©i°ics
(*
¨g
);

117 
upd©e_p‹t_°©ic_öfo
(
pid
);

118 
GtkWidgë
 *
show_°©i°ics
();

119 
GtkWidgë
 *
show_°©ic_c⁄f
();

120 
gboﬁón
 
check_íåy
(
GtkTªeSt‹e
 *
åì
, 
GtkTªeP©h
 *
∑th
);

121 
add_íåy
(
GtkTªeSt‹e
 *
åì
, 
GtkTªeP©h
 *
∑th
);

122 
GtkWidgë
 *
°ªam_box
();

123 
show_°ªam
();

124 
GtkWidgë
 *
pktgí_°ªam_box
();

125 
edô_°ªam
();

126 
£t_°ªam_öfo
(
pid
, 
£q_id
);

127 
swôch_°ªam_edô‹_∑ge
(
GtkBuâ⁄
 *, 
GtkNŸebook
 *);

128 
GtkWidgë
 *
fûl_°ªam_öfo
(
¥Ÿo_ty≥
 
ty≥
,

129 
pid
,

130 
£q_id
);

131 
add_¥Ÿo_vÆues_cﬁumn
(
GtkTªeVõw
 *
åìvõw
, 
GtkTªeModñ
 *
°ªam_modñ
);

132 
GtkTªeModñ
 *
¸óã_°ªam_modñ
(
¥Ÿo_ty≥
 
ty≥
,

133 
pid
,

134 
£q_id
);

135 
fûl_¥Ÿo_fõld_öfo
(
¥Ÿo_ty≥
 
ty≥
,

136 
pid
,

137 
£q_id
);

138 
hex_to_numbî
(
c
);

139 
ascii_to_mac
(c⁄° *
txt
, *
addr
);

140 
vÆid©e_ù_addªss
(*
°
);

141 
ascii_to_numbî
(c⁄° *
txt
, *
addr
, 
Àn
);

143 
°¨t_°›_åaffic
(
GtkTªeModñ
 *
modñ
,

144 
GtkTªeP©h
 *
∑th
,

145 
GtkTªeIãr
 *
ôî
,

146 
gpoöãr
 
u£rd©a
);

148 
°¨t_°›_ˇ±uª
(
GtkTªeModñ
 *
modñ
,

149 
GtkTªeP©h
 *
∑th
,

150 
GtkTªeIãr
 *
ôî
,

151 
gpoöãr
 
u£rd©a
);

153 
GtkWidgë
 *
p‹t_åì_võw
(
p‹t_id
,

154 c⁄° *
tôÀ
,

155 
gboﬁón
 
is_°©ic
);

157 
di•œy_°ªam_edô‹
(
GtkWidgë
 *
°ªam_wödow
,

158 
pid
,

159 
£q_id
);

161 
°ªam_≠∂y
(
GtkTªeModñ
 *
modñ
,

162 
GtkTªeP©h
 *
∑th
,

163 
GtkTªeIãr
 *
ôî
,

164 
gpoöãr
 
u£rd©a
);

166 
åaffic_°ªam_gë_pid
(
GtkTªeModñ
 *
modñ
,

167 
GtkTªeP©h
 *
∑th
,

168 
GtkTªeIãr
 *
ôî
,

169 
gpoöãr
 
d©a
);

170 
åaffic_°ªam_gë_£q_id
(
GtkTªeModñ
 *
modñ
,

171 
GtkTªeP©h
 *
∑th
,

172 
GtkTªeIãr
 *
ôî
,

173 
gpoöãr
 
d©a
);

176 
c⁄sﬁe_ˇŒback
(
GtkWidgë
 *
widgë
, GtkWidgë *
íåy
);

177 
˛o£_wödow_ˇŒback
(
GtkWidgë
 *
widgë
, 
gpoöãr
 
wödow
);

178 
≠∂y_°ªam_ˇŒback
();

179 
pktsize_íãr_ˇŒback
(
GtkWidgë
 *
widgë
, 
gpoöãr
 *
d©a
);

180 
ødio_›ti⁄s_ˇŒback
(
GtkRadioBuâ⁄
 *
b
, 
gpoöãr
 *
u£r_d©a
);

181 
≠∂y_ˇŒback
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
);

182 
digôs_sˇÀ_ˇŒback
(
GtkAdju°mít
 *
adj
);

183 
°¨t_èffic_ˇŒback
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
);

184 
°›_åaffic_ˇŒback
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
);

185 
°¨t_ˇ±uª_ˇŒback
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
);

186 
°›_ˇ±uª_ˇŒback
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
);

187 
about_dülog_ˇŒback
();

188 
vœn_íabÀ_ˇŒback
(
GtkWidgë
 *
widgë
, 
gpoöãr
 *
d©a
);

190 
íabÀ_°ªam_ˇŒback
(
GtkCñlRídîîToggÀ
 *
˚Œ
,

191 
gch¨
 *
∑th
,

192 
gpoöãr
 
d©a
);

194 
˚Œ_edôed_ˇŒback
(
GtkCñlRídîîText
 *
˚Œ
,

195 c⁄° 
gch¨
 *
∑th_°rög
,

196 
gch¨
 *
√w_ãxt
,

197 
gpoöãr
 
d©a
);

199 
edô_°ªam_ˇŒback
(
GtkTªeModñ
 *
modñ
,

200 
GtkTªeP©h
 *
∑th
,

201 
GtkTªeIãr
 *
ôî
,

202 
gpoöãr
 
u£rd©a
);

204 
show_°ªam_ˇŒback
(
GtkTªeModñ
 *
modñ
,

205 
GtkTªeP©h
 *
∑th
,

206 
GtkTªeIãr
 *
ôî
,

207 
gpoöãr
 
u£rd©a
);

	@lib/archive/lua-5.3.0/src/lapi.c

7 
	#œpi_c


	)

8 
	#LUA_CORE


	)

10 
	~"Õªfix.h
"

13 
	~<°d¨g.h
>

14 
	~<°rög.h
>

16 
	~"lua.h
"

18 
	~"œpi.h
"

19 
	~"ldebug.h
"

20 
	~"ldo.h
"

21 
	~"lfunc.h
"

22 
	~"lgc.h
"

23 
	~"lmem.h
"

24 
	~"lobje˘.h
"

25 
	~"l°©e.h
"

26 
	~"l°rög.h
"

27 
	~"…abÀ.h
"

28 
	~"…m.h
"

29 
	~"lundump.h
"

30 
	~"lvm.h
"

34 c⁄° 
	glua_idít
[] =

35 "$LuaVîsi⁄: " 
LUA_COPYRIGHT
 " $"

36 "$LuaAuth‹s: " 
LUA_AUTHORS
 " $";

40 
	#NONVALIDVALUE
 
	`ˇ°
(
TVÆue
 *, 
luaO_nûobje˘
)

	)

43 
	#isvÆid
(
o
Ë((oË!
luaO_nûobje˘
)

	)

46 
	#i•£udo
(
i
Ë((iË<
LUA_REGISTRYINDEX
)

	)

49 
	#isupvÆue
(
i
Ë((iË< 
LUA_REGISTRYINDEX
)

	)

52 
	#is°acködex
(
i
, 
o
Ë(
	`isvÆid
(oË&& !
	`i•£udo
(i))

	)

54 
	#≠i_checkvÆidödex
(
o
Ë
	`≠i_check
(
	`isvÆid
(o), "övÆid index")

	)

56 
	#≠i_check°acködex
(
i
, 
o
) \

57 
	`≠i_check
(
	`is°acködex
(
i
, 
o
), "ödexÇŸ i¿thê°ack")

	)

60 
TVÆue
 *
	$ödex2addr
 (
lua_Sèã
 *
L
, 
idx
) {

61 
CÆlInfo
 *
ci
 = 
L
->ci;

62 i‡(
idx
 > 0) {

63 
TVÆue
 *
o
 = 
ci
->
func
 + 
idx
;

64 
	`≠i_check
(
idx
 <
ci
->
t›
 - (ci->
func
 + 1), "unacceptable index");

65 i‡(
o
 >
L
->
t›
Ë 
NONVALIDVALUE
;

66  
o
;

68 i‡(!
	`i•£udo
(
idx
)) {

69 
	`≠i_check
(
idx
 !0 && -idx <
L
->
t›
 - (
ci
->
func
 + 1), "invalid index");

70  
L
->
t›
 + 
idx
;

72 i‡(
idx
 =
LUA_REGISTRYINDEX
)

73  &
	`G
(
L
)->
l_ªgi°ry
;

75 
idx
 = 
LUA_REGISTRYINDEX
 - idx;

76 
	`≠i_check
(
idx
 <
MAXUPVAL
 + 1, "upvalue indexÅooÜarge");

77 i‡(
	`âi¶cf
(
ci
->
func
))

78  
NONVALIDVALUE
;

80 
CClosuª
 *
func
 = 
	`˛CvÆue
(
ci
->func);

81  (
idx
 <
func
->
nupvÆues
Ë? &func->
upvÆue
[idx-1] : 
NONVALIDVALUE
;

84 
	}
}

91 
	$grow°ack
 (
lua_Sèã
 *
L
, *
ud
) {

92 
size
 = *(*)
ud
;

93 
	`luaD_grow°ack
(
L
, 
size
);

94 
	}
}

97 
LUA_API
 
	$lua_check°ack
 (
lua_Sèã
 *
L
, 
n
) {

98 
ªs
;

99 
CÆlInfo
 *
ci
 = 
L
->ci;

100 
	`lua_lock
(
L
);

101 
	`≠i_check
(
n
 >= 0, "negative 'n'");

102 i‡(
L
->
°ack_œ°
 - L->
t›
 > 
n
)

103 
ªs
 = 1;

105 
öu£
 = 
	`ˇ°_öt
(
L
->
t›
 - L->
°ack
Ë+ 
EXTRA_STACK
;

106 i‡(
öu£
 > 
LUAI_MAXSTACK
 - 
n
)

107 
ªs
 = 0;

109 
ªs
 = (
	`luaD_øwru≈rŸe˘ed
(
L
, &
grow°ack
, &
n
Ë=
LUA_OK
);

111 i‡(
ªs
 && 
ci
->
t›
 < 
L
->t› + 
n
)

112 
ci
->
t›
 = 
L
->t› + 
n
;

113 
	`lua_u∆ock
(
L
);

114  
ªs
;

115 
	}
}

118 
LUA_API
 
	$lua_xmove
 (
lua_Sèã
 *
‰om
,Üua_Sèã *
to
, 
n
) {

119 
i
;

120 i‡(
‰om
 =
to
) ;

121 
	`lua_lock
(
to
);

122 
	`≠i_check√Àms
(
‰om
, 
n
);

123 
	`≠i_check
(
	`G
(
‰om
Ë=G(
to
), "movingámong independent states");

124 
	`≠i_check
(
to
->
ci
->
t›
 -Åo->t› >
n
, "notÉnoughÉlementsÅo move");

125 
‰om
->
t›
 -
n
;

126 
i
 = 0; i < 
n
; i++) {

127 
	`£tobj2s
(
to
,Åo->
t›
++, 
‰om
->t› + 
i
);

129 
	`lua_u∆ock
(
to
);

130 
	}
}

133 
LUA_API
 
lua_CFun˘i⁄
 
	$lua_©∑nic
 (
lua_Sèã
 *
L
, 
lua_CFun˘i⁄
 
∑nicf
) {

134 
lua_CFun˘i⁄
 
ﬁd
;

135 
	`lua_lock
(
L
);

136 
ﬁd
 = 
	`G
(
L
)->
∑nic
;

137 
	`G
(
L
)->
∑nic
 = 
∑nicf
;

138 
	`lua_u∆ock
(
L
);

139  
ﬁd
;

140 
	}
}

143 
LUA_API
 c⁄° 
lua_Numbî
 *
	$lua_vîsi⁄
 (
lua_Sèã
 *
L
) {

144 c⁄° 
lua_Numbî
 
vîsi⁄
 = 
LUA_VERSION_NUM
;

145 i‡(
L
 =
NULL
Ë &
vîsi⁄
;

146  
	`G
(
L
)->
vîsi⁄
;

147 
	}
}

159 
LUA_API
 
	$lua_absödex
 (
lua_Sèã
 *
L
, 
idx
) {

160  (
idx
 > 0 || 
	`i•£udo
(idx))

161 ? 
idx


162 : 
	`ˇ°_öt
(
L
->
t›
 - L->
ci
->
func
 + 
idx
);

163 
	}
}

166 
LUA_API
 
	$lua_gët›
 (
lua_Sèã
 *
L
) {

167  
	`ˇ°_öt
(
L
->
t›
 - (L->
ci
->
func
 + 1));

168 
	}
}

171 
LUA_API
 
	$lua_£â›
 (
lua_Sèã
 *
L
, 
idx
) {

172 
StkId
 
func
 = 
L
->
ci
->func;

173 
	`lua_lock
(
L
);

174 i‡(
idx
 >= 0) {

175 
	`≠i_check
(
idx
 <
L
->
°ack_œ°
 - (
func
 + 1), "newÅopÅooÜarge");

176 
L
->
t›
 < (
func
 + 1Ë+ 
idx
)

177 
	`£äûvÆue
(
L
->
t›
++);

178 
L
->
t›
 = (
func
 + 1Ë+ 
idx
;

181 
	`≠i_check
(-(
idx
+1Ë<(
L
->
t›
 - (
func
 + 1)), "invalidÇewÅop");

182 
L
->
t›
 +
idx
+1;

184 
	`lua_u∆ock
(
L
);

185 
	}
}

192 
	$ªvî£
 (
lua_Sèã
 *
L
, 
StkId
 
‰om
, StkId 
to
) {

193 ; 
‰om
 < 
to
; from++,Åo--) {

194 
TVÆue
 
ãmp
;

195 
	`£tobj
(
L
, &
ãmp
, 
‰om
);

196 
	`£tobjs2s
(
L
, 
‰om
, 
to
);

197 
	`£tobj2s
(
L
, 
to
, &
ãmp
);

199 
	}
}

206 
LUA_API
 
	$lua_rŸ©e
 (
lua_Sèã
 *
L
, 
idx
, 
n
) {

207 
StkId
 
p
, 
t
, 
m
;

208 
	`lua_lock
(
L
);

209 
t
 = 
L
->
t›
 - 1;

210 
p
 = 
	`ödex2addr
(
L
, 
idx
);

211 
	`≠i_check°acködex
(
idx
, 
p
);

212 
	`≠i_check
((
n
 >0 ?Ç : -nË<(
t
 - 
p
 + 1), "invalid 'n'");

213 
m
 = (
n
 >0 ? 
t
 -Ç : 
p
 -Ç - 1);

214 
	`ªvî£
(
L
, 
p
, 
m
);

215 
	`ªvî£
(
L
, 
m
 + 1, 
t
);

216 
	`ªvî£
(
L
, 
p
, 
t
);

217 
	`lua_u∆ock
(
L
);

218 
	}
}

221 
LUA_API
 
	$lua_c›y
 (
lua_Sèã
 *
L
, 
‰omidx
, 
toidx
) {

222 
TVÆue
 *
‰
, *
to
;

223 
	`lua_lock
(
L
);

224 
‰
 = 
	`ödex2addr
(
L
, 
‰omidx
);

225 
to
 = 
	`ödex2addr
(
L
, 
toidx
);

226 
	`≠i_checkvÆidödex
(
to
);

227 
	`£tobj
(
L
, 
to
, 
‰
);

228 i‡(
	`isupvÆue
(
toidx
))

229 
	`luaC_b¨rõr
(
L
, 
	`˛CvÆue
(L->
ci
->
func
), 
‰
);

232 
	`lua_u∆ock
(
L
);

233 
	}
}

236 
LUA_API
 
	$lua_pushvÆue
 (
lua_Sèã
 *
L
, 
idx
) {

237 
	`lua_lock
(
L
);

238 
	`£tobj2s
(
L
, L->
t›
, 
	`ödex2addr
(L, 
idx
));

239 
	`≠i_ö¸_t›
(
L
);

240 
	`lua_u∆ock
(
L
);

241 
	}
}

250 
LUA_API
 
	$lua_ty≥
 (
lua_Sèã
 *
L
, 
idx
) {

251 
StkId
 
o
 = 
	`ödex2addr
(
L
, 
idx
);

252  (
	`isvÆid
(
o
Ë? 
	`ânov
(oË: 
LUA_TNONE
);

253 
	}
}

256 
LUA_API
 c⁄° *
	$lua_ty≥«me
 (
lua_Sèã
 *
L
, 
t
) {

257 
	`UNUSED
(
L
);

258 
	`≠i_check
(
LUA_TNONE
 <
t
 &&Å < 
LUA_NUMTAGS
, "invalidÅag");

259  
	`ây≥«me
(
t
);

260 
	}
}

263 
LUA_API
 
	$lua_iscfun˘i⁄
 (
lua_Sèã
 *
L
, 
idx
) {

264 
StkId
 
o
 = 
	`ödex2addr
(
L
, 
idx
);

265  (
	`âi¶cf
(
o
Ë|| (
	`âisC˛osuª
(o)));

266 
	}
}

269 
LUA_API
 
	$lua_isöãgî
 (
lua_Sèã
 *
L
, 
idx
) {

270 
StkId
 
o
 = 
	`ödex2addr
(
L
, 
idx
);

271  
	`âisöãgî
(
o
);

272 
	}
}

275 
LUA_API
 
	$lua_i¢umbî
 (
lua_Sèã
 *
L
, 
idx
) {

276 
lua_Numbî
 
n
;

277 c⁄° 
TVÆue
 *
o
 = 
	`ödex2addr
(
L
, 
idx
);

278  
	`t⁄umbî
(
o
, &
n
);

279 
	}
}

282 
LUA_API
 
	$lua_is°rög
 (
lua_Sèã
 *
L
, 
idx
) {

283 c⁄° 
TVÆue
 *
o
 = 
	`ödex2addr
(
L
, 
idx
);

284  (
	`âis°rög
(
o
Ë|| 
	`cvt2°r
(o));

285 
	}
}

288 
LUA_API
 
	$lua_isu£rd©a
 (
lua_Sèã
 *
L
, 
idx
) {

289 c⁄° 
TVÆue
 *
o
 = 
	`ödex2addr
(
L
, 
idx
);

290  (
	`âisfuŒu£rd©a
(
o
Ë|| 
	`âi¶ightu£rd©a
(o));

291 
	}
}

294 
LUA_API
 
	$lua_øwequÆ
 (
lua_Sèã
 *
L
, 
ödex1
, 
ödex2
) {

295 
StkId
 
o1
 = 
	`ödex2addr
(
L
, 
ödex1
);

296 
StkId
 
o2
 = 
	`ödex2addr
(
L
, 
ödex2
);

297  (
	`isvÆid
(
o1
Ë&& isvÆid(
o2
)Ë? 
	`luaV_øwequÆobj
(o1, o2) : 0;

298 
	}
}

301 
LUA_API
 
	$lua_¨ôh
 (
lua_Sèã
 *
L
, 
›
) {

302 
	`lua_lock
(
L
);

303 i‡(
›
 !
LUA_OPUNM
 && o∞!
LUA_OPBNOT
)

304 
	`≠i_check√Àms
(
L
, 2);

306 
	`≠i_check√Àms
(
L
, 1);

307 
	`£tobjs2s
(
L
, L->
t›
, L->top - 1);

308 
L
->
t›
++;

311 
	`luaO_¨ôh
(
L
, 
›
, L->
t›
 - 2, L->top - 1, L->top - 2);

312 
L
->
t›
--;

313 
	`lua_u∆ock
(
L
);

314 
	}
}

317 
LUA_API
 
	$lua_com∑ª
 (
lua_Sèã
 *
L
, 
ödex1
, 
ödex2
, 
›
) {

318 
StkId
 
o1
, 
o2
;

319 
i
 = 0;

320 
	`lua_lock
(
L
);

321 
o1
 = 
	`ödex2addr
(
L
, 
ödex1
);

322 
o2
 = 
	`ödex2addr
(
L
, 
ödex2
);

323 i‡(
	`isvÆid
(
o1
Ë&& isvÆid(
o2
)) {

324 
›
) {

325 
LUA_OPEQ
: 
i
 = 
	`luaV_equÆobj
(
L
, 
o1
, 
o2
); ;

326 
LUA_OPLT
: 
i
 = 
	`luaV_Às°h™
(
L
, 
o1
, 
o2
); ;

327 
LUA_OPLE
: 
i
 = 
	`luaV_Às£quÆ
(
L
, 
o1
, 
o2
); ;

328 : 
	`≠i_check
(0, "invalid option");

331 
	`lua_u∆ock
(
L
);

332  
i
;

333 
	}
}

336 
LUA_API
 
size_t
 
	$lua_°rögt⁄umbî
 (
lua_Sèã
 *
L
, c⁄° *
s
) {

337 
size_t
 
sz
 = 
	`luaO_°r2num
(
s
, 
L
->
t›
);

338 i‡(
sz
 != 0)

339 
	`≠i_ö¸_t›
(
L
);

340  
sz
;

341 
	}
}

344 
LUA_API
 
lua_Numbî
 
	$lua_t⁄umbîx
 (
lua_Sèã
 *
L
, 
idx
, *
pi¢um
) {

345 
lua_Numbî
 
n
;

346 c⁄° 
TVÆue
 *
o
 = 
	`ödex2addr
(
L
, 
idx
);

347 
i¢um
 = 
	`t⁄umbî
(
o
, &
n
);

348 i‡(!
i¢um
)

349 
n
 = 0;

350 i‡(
pi¢um
Ë*pi¢um = 
i¢um
;

351  
n
;

352 
	}
}

355 
LUA_API
 
lua_I¡egî
 
	$lua_toöãgîx
 (
lua_Sèã
 *
L
, 
idx
, *
pi¢um
) {

356 
lua_I¡egî
 
ªs
;

357 c⁄° 
TVÆue
 *
o
 = 
	`ödex2addr
(
L
, 
idx
);

358 
i¢um
 = 
	`toöãgî
(
o
, &
ªs
);

359 i‡(!
i¢um
)

360 
ªs
 = 0;

361 i‡(
pi¢um
Ë*pi¢um = 
i¢um
;

362  
ªs
;

363 
	}
}

366 
LUA_API
 
	$lua_toboﬁón
 (
lua_Sèã
 *
L
, 
idx
) {

367 c⁄° 
TVÆue
 *
o
 = 
	`ödex2addr
(
L
, 
idx
);

368  !
	`l_isÁl£
(
o
);

369 
	}
}

372 
LUA_API
 c⁄° *
	$lua_tﬁ°rög
 (
lua_Sèã
 *
L
, 
idx
, 
size_t
 *
Àn
) {

373 
StkId
 
o
 = 
	`ödex2addr
(
L
, 
idx
);

374 i‡(!
	`âis°rög
(
o
)) {

375 i‡(!
	`cvt2°r
(
o
)) {

376 i‡(
Àn
 !
NULL
) *len = 0;

377  
NULL
;

379 
	`lua_lock
(
L
);

380 
	`luaC_checkGC
(
L
);

381 
o
 = 
	`ödex2addr
(
L
, 
idx
);

382 
	`luaO_to°rög
(
L
, 
o
);

383 
	`lua_u∆ock
(
L
);

385 i‡(
Àn
 !
NULL
Ë*À¿
	`tsvÆue
(
o
)->len;

386  
	`svÆue
(
o
);

387 
	}
}

390 
LUA_API
 
size_t
 
	$lua_øwÀn
 (
lua_Sèã
 *
L
, 
idx
) {

391 
StkId
 
o
 = 
	`ödex2addr
(
L
, 
idx
);

392 
	`ânov
(
o
)) {

393 
LUA_TSTRING
:  
	`tsvÆue
(
o
)->
Àn
;

394 
LUA_TUSERDATA
:  
	`uvÆue
(
o
)->
Àn
;

395 
LUA_TTABLE
:  
	`luaH_gën
(
	`hvÆue
(
o
));

398 
	}
}

401 
LUA_API
 
lua_CFun˘i⁄
 
	$lua_tocfun˘i⁄
 (
lua_Sèã
 *
L
, 
idx
) {

402 
StkId
 
o
 = 
	`ödex2addr
(
L
, 
idx
);

403 i‡(
	`âi¶cf
(
o
)Ë 
	`fvÆue
(o);

404 i‡(
	`âisC˛osuª
(
o
))

405  
	`˛CvÆue
(
o
)->
f
;

406  
NULL
;

407 
	}
}

410 
LUA_API
 *
	$lua_tou£rd©a
 (
lua_Sèã
 *
L
, 
idx
) {

411 
StkId
 
o
 = 
	`ödex2addr
(
L
, 
idx
);

412 
	`ânov
(
o
)) {

413 
LUA_TUSERDATA
:  
	`gëud©amem
(
	`uvÆue
(
o
));

414 
LUA_TLIGHTUSERDATA
:  
	`pvÆue
(
o
);

415 :  
NULL
;

417 
	}
}

420 
LUA_API
 
lua_Sèã
 *
	$lua_tŸhªad
 (
lua_Sèã
 *
L
, 
idx
) {

421 
StkId
 
o
 = 
	`ödex2addr
(
L
, 
idx
);

422  (!
	`âi°hªad
(
o
)Ë? 
NULL
 : 
	`thvÆue
(o);

423 
	}
}

426 
LUA_API
 c⁄° *
	$lua_t›oöãr
 (
lua_Sèã
 *
L
, 
idx
) {

427 
StkId
 
o
 = 
	`ödex2addr
(
L
, 
idx
);

428 
	`ây≥
(
o
)) {

429 
LUA_TTABLE
:  
	`hvÆue
(
o
);

430 
LUA_TLCL
:  
	`˛LvÆue
(
o
);

431 
LUA_TCCL
:  
	`˛CvÆue
(
o
);

432 
LUA_TLCF
:  
	`ˇ°
(*, ca°(
size_t
, 
	`fvÆue
(
o
)));

433 
LUA_TTHREAD
:  
	`thvÆue
(
o
);

434 
LUA_TUSERDATA
:

435 
LUA_TLIGHTUSERDATA
:

436  
	`lua_tou£rd©a
(
L
, 
idx
);

437 :  
NULL
;

439 
	}
}

448 
LUA_API
 
	$lua_pushnû
 (
lua_Sèã
 *
L
) {

449 
	`lua_lock
(
L
);

450 
	`£äûvÆue
(
L
->
t›
);

451 
	`≠i_ö¸_t›
(
L
);

452 
	`lua_u∆ock
(
L
);

453 
	}
}

456 
LUA_API
 
	$lua_pushnumbî
 (
lua_Sèã
 *
L
, 
lua_Numbî
 
n
) {

457 
	`lua_lock
(
L
);

458 
	`£tÊtvÆue
(
L
->
t›
, 
n
);

459 
	`≠i_ö¸_t›
(
L
);

460 
	`lua_u∆ock
(
L
);

461 
	}
}

464 
LUA_API
 
	$lua_pushöãgî
 (
lua_Sèã
 *
L
, 
lua_I¡egî
 
n
) {

465 
	`lua_lock
(
L
);

466 
	`£tivÆue
(
L
->
t›
, 
n
);

467 
	`≠i_ö¸_t›
(
L
);

468 
	`lua_u∆ock
(
L
);

469 
	}
}

472 
LUA_API
 c⁄° *
	$lua_pushl°rög
 (
lua_Sèã
 *
L
, c⁄° *
s
, 
size_t
 
Àn
) {

473 
TSåög
 *
ts
;

474 
	`lua_lock
(
L
);

475 
	`luaC_checkGC
(
L
);

476 
ts
 = 
	`luaS_√wl°r
(
L
, 
s
, 
Àn
);

477 
	`£tsvÆue2s
(
L
, L->
t›
, 
ts
);

478 
	`≠i_ö¸_t›
(
L
);

479 
	`lua_u∆ock
(
L
);

480  
	`gë°r
(
ts
);

481 
	}
}

484 
LUA_API
 c⁄° *
	$lua_push°rög
 (
lua_Sèã
 *
L
, c⁄° *
s
) {

485 i‡(
s
 =
NULL
) {

486 
	`lua_pushnû
(
L
);

487  
NULL
;

490 
TSåög
 *
ts
;

491 
	`lua_lock
(
L
);

492 
	`luaC_checkGC
(
L
);

493 
ts
 = 
	`luaS_√w
(
L
, 
s
);

494 
	`£tsvÆue2s
(
L
, L->
t›
, 
ts
);

495 
	`≠i_ö¸_t›
(
L
);

496 
	`lua_u∆ock
(
L
);

497  
	`gë°r
(
ts
);

499 
	}
}

502 
LUA_API
 c⁄° *
	$lua_pushvf°rög
 (
lua_Sèã
 *
L
, c⁄° *
fmt
,

503 
va_li°
 
¨gp
) {

504 c⁄° *
ªt
;

505 
	`lua_lock
(
L
);

506 
	`luaC_checkGC
(
L
);

507 
ªt
 = 
	`luaO_pushvf°rög
(
L
, 
fmt
, 
¨gp
);

508 
	`lua_u∆ock
(
L
);

509  
ªt
;

510 
	}
}

513 
LUA_API
 c⁄° *
	$lua_pushf°rög
 (
lua_Sèã
 *
L
, c⁄° *
fmt
, ...) {

514 c⁄° *
ªt
;

515 
va_li°
 
¨gp
;

516 
	`lua_lock
(
L
);

517 
	`luaC_checkGC
(
L
);

518 
	`va_°¨t
(
¨gp
, 
fmt
);

519 
ªt
 = 
	`luaO_pushvf°rög
(
L
, 
fmt
, 
¨gp
);

520 
	`va_íd
(
¨gp
);

521 
	`lua_u∆ock
(
L
);

522  
ªt
;

523 
	}
}

526 
LUA_API
 
	$lua_pushc˛osuª
 (
lua_Sèã
 *
L
, 
lua_CFun˘i⁄
 
‚
, 
n
) {

527 
	`lua_lock
(
L
);

528 i‡(
n
 == 0) {

529 
	`£tfvÆue
(
L
->
t›
, 
‚
);

532 
CClosuª
 *
˛
;

533 
	`≠i_check√Àms
(
L
, 
n
);

534 
	`≠i_check
(
n
 <
MAXUPVAL
, "upvalue indexÅooÜarge");

535 
	`luaC_checkGC
(
L
);

536 
˛
 = 
	`luaF_√wC˛osuª
(
L
, 
n
);

537 
˛
->
f
 = 
‚
;

538 
L
->
t›
 -
n
;

539 
n
--) {

540 
	`£tobj2n
(
L
, &
˛
->
upvÆue
[
n
], L->
t›
 +Ç);

543 
	`£t˛CvÆue
(
L
, L->
t›
, 
˛
);

545 
	`≠i_ö¸_t›
(
L
);

546 
	`lua_u∆ock
(
L
);

547 
	}
}

550 
LUA_API
 
	$lua_pushboﬁón
 (
lua_Sèã
 *
L
, 
b
) {

551 
	`lua_lock
(
L
);

552 
	`£tbvÆue
(
L
->
t›
, (
b
 != 0));

553 
	`≠i_ö¸_t›
(
L
);

554 
	`lua_u∆ock
(
L
);

555 
	}
}

558 
LUA_API
 
	$lua_pushlightu£rd©a
 (
lua_Sèã
 *
L
, *
p
) {

559 
	`lua_lock
(
L
);

560 
	`£çvÆue
(
L
->
t›
, 
p
);

561 
	`≠i_ö¸_t›
(
L
);

562 
	`lua_u∆ock
(
L
);

563 
	}
}

566 
LUA_API
 
	$lua_pushthªad
 (
lua_Sèã
 *
L
) {

567 
	`lua_lock
(
L
);

568 
	`£âhvÆue
(
L
, L->
t›
, L);

569 
	`≠i_ö¸_t›
(
L
);

570 
	`lua_u∆ock
(
L
);

571  (
	`G
(
L
)->
maöthªad
 == L);

572 
	}
}

581 
LUA_API
 
	$lua_gëglobÆ
 (
lua_Sèã
 *
L
, c⁄° *
«me
) {

582 
TabÀ
 *
ªg
 = 
	`hvÆue
(&
	`G
(
L
)->
l_ªgi°ry
);

583 c⁄° 
TVÆue
 *
gt
;

584 
	`lua_lock
(
L
);

585 
gt
 = 
	`luaH_gëöt
(
ªg
, 
LUA_RIDX_GLOBALS
);

586 
	`£tsvÆue2s
(
L
, L->
t›
++, 
	`luaS_√w
(L, 
«me
));

587 
	`luaV_gëèbÀ
(
L
, 
gt
, L->
t›
 - 1, L->top - 1);

588 
	`lua_u∆ock
(
L
);

589  
	`ânov
(
L
->
t›
 - 1);

590 
	}
}

593 
LUA_API
 
	$lua_gëèbÀ
 (
lua_Sèã
 *
L
, 
idx
) {

594 
StkId
 
t
;

595 
	`lua_lock
(
L
);

596 
t
 = 
	`ödex2addr
(
L
, 
idx
);

597 
	`luaV_gëèbÀ
(
L
, 
t
, L->
t›
 - 1, L->top - 1);

598 
	`lua_u∆ock
(
L
);

599  
	`ânov
(
L
->
t›
 - 1);

600 
	}
}

603 
LUA_API
 
	$lua_gëfõld
 (
lua_Sèã
 *
L
, 
idx
, c⁄° *
k
) {

604 
StkId
 
t
;

605 
	`lua_lock
(
L
);

606 
t
 = 
	`ödex2addr
(
L
, 
idx
);

607 
	`£tsvÆue2s
(
L
, L->
t›
, 
	`luaS_√w
(L, 
k
));

608 
	`≠i_ö¸_t›
(
L
);

609 
	`luaV_gëèbÀ
(
L
, 
t
, L->
t›
 - 1, L->top - 1);

610 
	`lua_u∆ock
(
L
);

611  
	`ânov
(
L
->
t›
 - 1);

612 
	}
}

615 
LUA_API
 
	$lua_gëi
 (
lua_Sèã
 *
L
, 
idx
, 
lua_I¡egî
 
n
) {

616 
StkId
 
t
;

617 
	`lua_lock
(
L
);

618 
t
 = 
	`ödex2addr
(
L
, 
idx
);

619 
	`£tivÆue
(
L
->
t›
, 
n
);

620 
	`≠i_ö¸_t›
(
L
);

621 
	`luaV_gëèbÀ
(
L
, 
t
, L->
t›
 - 1, L->top - 1);

622 
	`lua_u∆ock
(
L
);

623  
	`ânov
(
L
->
t›
 - 1);

624 
	}
}

627 
LUA_API
 
	$lua_øwgë
 (
lua_Sèã
 *
L
, 
idx
) {

628 
StkId
 
t
;

629 
	`lua_lock
(
L
);

630 
t
 = 
	`ödex2addr
(
L
, 
idx
);

631 
	`≠i_check
(
	`âi°abÀ
(
t
), "tableÉxpected");

632 
	`£tobj2s
(
L
, L->
t›
 - 1, 
	`luaH_gë
(
	`hvÆue
(
t
), L->top - 1));

633 
	`lua_u∆ock
(
L
);

634  
	`ânov
(
L
->
t›
 - 1);

635 
	}
}

638 
LUA_API
 
	$lua_øwgëi
 (
lua_Sèã
 *
L
, 
idx
, 
lua_I¡egî
 
n
) {

639 
StkId
 
t
;

640 
	`lua_lock
(
L
);

641 
t
 = 
	`ödex2addr
(
L
, 
idx
);

642 
	`≠i_check
(
	`âi°abÀ
(
t
), "tableÉxpected");

643 
	`£tobj2s
(
L
, L->
t›
, 
	`luaH_gëöt
(
	`hvÆue
(
t
), 
n
));

644 
	`≠i_ö¸_t›
(
L
);

645 
	`lua_u∆ock
(
L
);

646  
	`ânov
(
L
->
t›
 - 1);

647 
	}
}

650 
LUA_API
 
	$lua_øwgëp
 (
lua_Sèã
 *
L
, 
idx
, c⁄° *
p
) {

651 
StkId
 
t
;

652 
TVÆue
 
k
;

653 
	`lua_lock
(
L
);

654 
t
 = 
	`ödex2addr
(
L
, 
idx
);

655 
	`≠i_check
(
	`âi°abÀ
(
t
), "tableÉxpected");

656 
	`£çvÆue
(&
k
, 
	`ˇ°
(*, 
p
));

657 
	`£tobj2s
(
L
, L->
t›
, 
	`luaH_gë
(
	`hvÆue
(
t
), &
k
));

658 
	`≠i_ö¸_t›
(
L
);

659 
	`lua_u∆ock
(
L
);

660  
	`ânov
(
L
->
t›
 - 1);

661 
	}
}

664 
LUA_API
 
	$lua_¸óãèbÀ
 (
lua_Sèã
 *
L
, 
«ºay
, 
ƒec
) {

665 
TabÀ
 *
t
;

666 
	`lua_lock
(
L
);

667 
	`luaC_checkGC
(
L
);

668 
t
 = 
	`luaH_√w
(
L
);

669 
	`£thvÆue
(
L
, L->
t›
, 
t
);

670 
	`≠i_ö¸_t›
(
L
);

671 i‡(
«ºay
 > 0 || 
ƒec
 > 0)

672 
	`luaH_ªsize
(
L
, 
t
, 
«ºay
, 
ƒec
);

673 
	`lua_u∆ock
(
L
);

674 
	}
}

677 
LUA_API
 
	$lua_gëmë©abÀ
 (
lua_Sèã
 *
L
, 
objödex
) {

678 c⁄° 
TVÆue
 *
obj
;

679 
TabÀ
 *
mt
;

680 
ªs
 = 0;

681 
	`lua_lock
(
L
);

682 
obj
 = 
	`ödex2addr
(
L
, 
objödex
);

683 
	`ânov
(
obj
)) {

684 
LUA_TTABLE
:

685 
mt
 = 
	`hvÆue
(
obj
)->
më©abÀ
;

687 
LUA_TUSERDATA
:

688 
mt
 = 
	`uvÆue
(
obj
)->
më©abÀ
;

691 
mt
 = 
	`G
(
L
)->mt[
	`ânov
(
obj
)];

694 i‡(
mt
 !
NULL
) {

695 
	`£thvÆue
(
L
, L->
t›
, 
mt
);

696 
	`≠i_ö¸_t›
(
L
);

697 
ªs
 = 1;

699 
	`lua_u∆ock
(
L
);

700  
ªs
;

701 
	}
}

704 
LUA_API
 
	$lua_gëu£rvÆue
 (
lua_Sèã
 *
L
, 
idx
) {

705 
StkId
 
o
;

706 
	`lua_lock
(
L
);

707 
o
 = 
	`ödex2addr
(
L
, 
idx
);

708 
	`≠i_check
(
	`âisfuŒu£rd©a
(
o
), "full userdataÉxpected");

709 
	`gëu£rvÆue
(
L
, 
	`uvÆue
(
o
), L->
t›
);

710 
	`≠i_ö¸_t›
(
L
);

711 
	`lua_u∆ock
(
L
);

712  
	`ânov
(
L
->
t›
 - 1);

713 
	}
}

721 
LUA_API
 
	$lua_£tglobÆ
 (
lua_Sèã
 *
L
, c⁄° *
«me
) {

722 
TabÀ
 *
ªg
 = 
	`hvÆue
(&
	`G
(
L
)->
l_ªgi°ry
);

723 c⁄° 
TVÆue
 *
gt
;

724 
	`lua_lock
(
L
);

725 
	`≠i_check√Àms
(
L
, 1);

726 
gt
 = 
	`luaH_gëöt
(
ªg
, 
LUA_RIDX_GLOBALS
);

727 
	`£tsvÆue2s
(
L
, L->
t›
++, 
	`luaS_√w
(L, 
«me
));

728 
	`luaV_£âabÀ
(
L
, 
gt
, L->
t›
 - 1, L->top - 2);

729 
L
->
t›
 -= 2;

730 
	`lua_u∆ock
(
L
);

731 
	}
}

734 
LUA_API
 
	$lua_£âabÀ
 (
lua_Sèã
 *
L
, 
idx
) {

735 
StkId
 
t
;

736 
	`lua_lock
(
L
);

737 
	`≠i_check√Àms
(
L
, 2);

738 
t
 = 
	`ödex2addr
(
L
, 
idx
);

739 
	`luaV_£âabÀ
(
L
, 
t
, L->
t›
 - 2, L->top - 1);

740 
L
->
t›
 -= 2;

741 
	`lua_u∆ock
(
L
);

742 
	}
}

745 
LUA_API
 
	$lua_£tfõld
 (
lua_Sèã
 *
L
, 
idx
, c⁄° *
k
) {

746 
StkId
 
t
;

747 
	`lua_lock
(
L
);

748 
	`≠i_check√Àms
(
L
, 1);

749 
t
 = 
	`ödex2addr
(
L
, 
idx
);

750 
	`£tsvÆue2s
(
L
, L->
t›
++, 
	`luaS_√w
(L, 
k
));

751 
	`luaV_£âabÀ
(
L
, 
t
, L->
t›
 - 1, L->top - 2);

752 
L
->
t›
 -= 2;

753 
	`lua_u∆ock
(
L
);

754 
	}
}

757 
LUA_API
 
	$lua_£ti
 (
lua_Sèã
 *
L
, 
idx
, 
lua_I¡egî
 
n
) {

758 
StkId
 
t
;

759 
	`lua_lock
(
L
);

760 
	`≠i_check√Àms
(
L
, 1);

761 
t
 = 
	`ödex2addr
(
L
, 
idx
);

762 
	`£tivÆue
(
L
->
t›
++, 
n
);

763 
	`luaV_£âabÀ
(
L
, 
t
, L->
t›
 - 1, L->top - 2);

764 
L
->
t›
 -= 2;

765 
	`lua_u∆ock
(
L
);

766 
	}
}

769 
LUA_API
 
	$lua_øw£t
 (
lua_Sèã
 *
L
, 
idx
) {

770 
StkId
 
o
;

771 
TabÀ
 *
t
;

772 
	`lua_lock
(
L
);

773 
	`≠i_check√Àms
(
L
, 2);

774 
o
 = 
	`ödex2addr
(
L
, 
idx
);

775 
	`≠i_check
(
	`âi°abÀ
(
o
), "tableÉxpected");

776 
t
 = 
	`hvÆue
(
o
);

777 
	`£tobj2t
(
L
, 
	`luaH_£t
(L, 
t
, L->
t›
-2), L->top-1);

778 
	`övÆid©eTMˇche
(
t
);

779 
	`luaC_b¨rõrback
(
L
, 
t
, L->
t›
-1);

780 
L
->
t›
 -= 2;

781 
	`lua_u∆ock
(
L
);

782 
	}
}

785 
LUA_API
 
	$lua_øw£ti
 (
lua_Sèã
 *
L
, 
idx
, 
lua_I¡egî
 
n
) {

786 
StkId
 
o
;

787 
TabÀ
 *
t
;

788 
	`lua_lock
(
L
);

789 
	`≠i_check√Àms
(
L
, 1);

790 
o
 = 
	`ödex2addr
(
L
, 
idx
);

791 
	`≠i_check
(
	`âi°abÀ
(
o
), "tableÉxpected");

792 
t
 = 
	`hvÆue
(
o
);

793 
	`luaH_£töt
(
L
, 
t
, 
n
, L->
t›
 - 1);

794 
	`luaC_b¨rõrback
(
L
, 
t
, L->
t›
-1);

795 
L
->
t›
--;

796 
	`lua_u∆ock
(
L
);

797 
	}
}

800 
LUA_API
 
	$lua_øw£ç
 (
lua_Sèã
 *
L
, 
idx
, c⁄° *
p
) {

801 
StkId
 
o
;

802 
TabÀ
 *
t
;

803 
TVÆue
 
k
;

804 
	`lua_lock
(
L
);

805 
	`≠i_check√Àms
(
L
, 1);

806 
o
 = 
	`ödex2addr
(
L
, 
idx
);

807 
	`≠i_check
(
	`âi°abÀ
(
o
), "tableÉxpected");

808 
t
 = 
	`hvÆue
(
o
);

809 
	`£çvÆue
(&
k
, 
	`ˇ°
(*, 
p
));

810 
	`£tobj2t
(
L
, 
	`luaH_£t
(L, 
t
, &
k
), L->
t›
 - 1);

811 
	`luaC_b¨rõrback
(
L
, 
t
, L->
t›
 - 1);

812 
L
->
t›
--;

813 
	`lua_u∆ock
(
L
);

814 
	}
}

817 
LUA_API
 
	$lua_£tmë©abÀ
 (
lua_Sèã
 *
L
, 
objödex
) {

818 
TVÆue
 *
obj
;

819 
TabÀ
 *
mt
;

820 
	`lua_lock
(
L
);

821 
	`≠i_check√Àms
(
L
, 1);

822 
obj
 = 
	`ödex2addr
(
L
, 
objödex
);

823 i‡(
	`âi¢û
(
L
->
t›
 - 1))

824 
mt
 = 
NULL
;

826 
	`≠i_check
(
	`âi°abÀ
(
L
->
t›
 - 1), "tableÉxpected");

827 
mt
 = 
	`hvÆue
(
L
->
t›
 - 1);

829 
	`ânov
(
obj
)) {

830 
LUA_TTABLE
: {

831 
	`hvÆue
(
obj
)->
më©abÀ
 = 
mt
;

832 i‡(
mt
) {

833 
	`luaC_objb¨rõr
(
L
, 
	`gcvÆue
(
obj
), 
mt
);

834 
	`luaC_checkföÆizî
(
L
, 
	`gcvÆue
(
obj
), 
mt
);

838 
LUA_TUSERDATA
: {

839 
	`uvÆue
(
obj
)->
më©abÀ
 = 
mt
;

840 i‡(
mt
) {

841 
	`luaC_objb¨rõr
(
L
, 
	`uvÆue
(
obj
), 
mt
);

842 
	`luaC_checkföÆizî
(
L
, 
	`gcvÆue
(
obj
), 
mt
);

847 
	`G
(
L
)->
mt
[
	`ânov
(
obj
)] = mt;

851 
L
->
t›
--;

852 
	`lua_u∆ock
(
L
);

854 
	}
}

857 
LUA_API
 
	$lua_£tu£rvÆue
 (
lua_Sèã
 *
L
, 
idx
) {

858 
StkId
 
o
;

859 
	`lua_lock
(
L
);

860 
	`≠i_check√Àms
(
L
, 1);

861 
o
 = 
	`ödex2addr
(
L
, 
idx
);

862 
	`≠i_check
(
	`âisfuŒu£rd©a
(
o
), "full userdataÉxpected");

863 
	`£tu£rvÆue
(
L
, 
	`uvÆue
(
o
), L->
t›
 - 1);

864 
	`luaC_b¨rõr
(
L
, 
	`gcvÆue
(
o
), L->
t›
 - 1);

865 
L
->
t›
--;

866 
	`lua_u∆ock
(
L
);

867 
	}
}

875 
	#checkªsu…s
(
L
,
«
,
ƒ
) \

876 
	`≠i_check
((
ƒ
Ë=
LUA_MULTRET
 || (
L
->
ci
->
t›
 - L->t› >“rË- (
«
)), \

877 "ªsu…†‰om fun˘i⁄ ovîÊow cuºíà°ack size")

	)

880 
LUA_API
 
	$lua_ˇŒk
 (
lua_Sèã
 *
L
, 
«rgs
, 
ƒesu…s
,

881 
lua_KC⁄ãxt
 
˘x
, 
lua_KFun˘i⁄
 
k
) {

882 
StkId
 
func
;

883 
	`lua_lock
(
L
);

884 
	`≠i_check
(
k
 =
NULL
 || !
	`isLua
(
L
->
ci
),

886 
	`≠i_check√Àms
(
L
, 
«rgs
+1);

887 
	`≠i_check
(
L
->
°©us
 =
LUA_OK
, "cannot do calls onÇon-normalÅhread");

888 
	`checkªsu…s
(
L
, 
«rgs
, 
ƒesu…s
);

889 
func
 = 
L
->
t›
 - (
«rgs
+1);

890 i‡(
k
 !
NULL
 && 
L
->
¬y
 == 0) {

891 
L
->
ci
->
u
.
c
.
k
 = k;

892 
L
->
ci
->
u
.
c
.
˘x
 = ctx;

893 
	`luaD_ˇŒ
(
L
, 
func
, 
ƒesu…s
, 1);

896 
	`luaD_ˇŒ
(
L
, 
func
, 
ƒesu…s
, 0);

897 
	`adju°ªsu…s
(
L
, 
ƒesu…s
);

898 
	`lua_u∆ock
(
L
);

899 
	}
}

906 
	sCÆlS
 {

907 
StkId
 
	mfunc
;

908 
	mƒesu…s
;

912 
	$f_ˇŒ
 (
lua_Sèã
 *
L
, *
ud
) {

913 
CÆlS
 *
c
 = 
	`ˇ°
(CÆlS *, 
ud
);

914 
	`luaD_ˇŒ
(
L
, 
c
->
func
, c->
ƒesu…s
, 0);

915 
	}
}

919 
LUA_API
 
	$lua_pˇŒk
 (
lua_Sèã
 *
L
, 
«rgs
, 
ƒesu…s
, 
îrfunc
,

920 
lua_KC⁄ãxt
 
˘x
, 
lua_KFun˘i⁄
 
k
) {

921 
CÆlS
 
c
;

922 
°©us
;

923 
±rdiff_t
 
func
;

924 
	`lua_lock
(
L
);

925 
	`≠i_check
(
k
 =
NULL
 || !
	`isLua
(
L
->
ci
),

927 
	`≠i_check√Àms
(
L
, 
«rgs
+1);

928 
	`≠i_check
(
L
->
°©us
 =
LUA_OK
, "cannot do calls onÇon-normalÅhread");

929 
	`checkªsu…s
(
L
, 
«rgs
, 
ƒesu…s
);

930 i‡(
îrfunc
 == 0)

931 
func
 = 0;

933 
StkId
 
o
 = 
	`ödex2addr
(
L
, 
îrfunc
);

934 
	`≠i_check°acködex
(
îrfunc
, 
o
);

935 
func
 = 
	`ßve°ack
(
L
, 
o
);

937 
c
.
func
 = 
L
->
t›
 - (
«rgs
+1);

938 i‡(
k
 =
NULL
 || 
L
->
¬y
 > 0) {

939 
c
.
ƒesu…s
 =Çresults;

940 
°©us
 = 
	`luaD_pˇŒ
(
L
, 
f_ˇŒ
, &
c
, 
	`ßve°ack
(L, c.
func
), func);

943 
CÆlInfo
 *
ci
 = 
L
->ci;

944 
ci
->
u
.
c
.
k
 = k;

945 
ci
->
u
.
c
.
˘x
 = ctx;

947 
ci
->
exåa
 = 
	`ßve°ack
(
L
, 
c
.
func
);

948 
ci
->
u
.
c
.
ﬁd_îrfunc
 = 
L
->
îrfunc
;

949 
L
->
îrfunc
 = 
func
;

950 
	`£tﬂh
(
ci
->
ˇŒ°©us
, 
L
->
Ælowhook
);

951 
ci
->
ˇŒ°©us
 |
CIST_YPCALL
;

952 
	`luaD_ˇŒ
(
L
, 
c
.
func
, 
ƒesu…s
, 1);

953 
ci
->
ˇŒ°©us
 &~
CIST_YPCALL
;

954 
L
->
îrfunc
 = 
ci
->
u
.
c
.
ﬁd_îrfunc
;

955 
°©us
 = 
LUA_OK
;

957 
	`adju°ªsu…s
(
L
, 
ƒesu…s
);

958 
	`lua_u∆ock
(
L
);

959  
°©us
;

960 
	}
}

963 
LUA_API
 
	$lua_lﬂd
 (
lua_Sèã
 *
L
, 
lua_Ródî
 
ªadî
, *
d©a
,

964 c⁄° *
chunk«me
, c⁄° *
mode
) {

965 
ZIO
 
z
;

966 
°©us
;

967 
	`lua_lock
(
L
);

968 i‡(!
chunk«me
) chunkname = "?";

969 
	`luaZ_öô
(
L
, &
z
, 
ªadî
, 
d©a
);

970 
°©us
 = 
	`luaD_¥Ÿe˘ed∑r£r
(
L
, &
z
, 
chunk«me
, 
mode
);

971 i‡(
°©us
 =
LUA_OK
) {

972 
LClosuª
 *
f
 = 
	`˛LvÆue
(
L
->
t›
 - 1);

973 i‡(
f
->
nupvÆues
 >= 1) {

975 
TabÀ
 *
ªg
 = 
	`hvÆue
(&
	`G
(
L
)->
l_ªgi°ry
);

976 c⁄° 
TVÆue
 *
gt
 = 
	`luaH_gëöt
(
ªg
, 
LUA_RIDX_GLOBALS
);

978 
	`£tobj
(
L
, 
f
->
upvÆs
[0]->
v
, 
gt
);

979 
	`luaC_upvÆb¨rõr
(
L
, 
f
->
upvÆs
[0]);

982 
	`lua_u∆ock
(
L
);

983  
°©us
;

984 
	}
}

987 
LUA_API
 
	$lua_dump
 (
lua_Sèã
 *
L
, 
lua_Wrôî
 
wrôî
, *
d©a
, 
°rù
) {

988 
°©us
;

989 
TVÆue
 *
o
;

990 
	`lua_lock
(
L
);

991 
	`≠i_check√Àms
(
L
, 1);

992 
o
 = 
L
->
t›
 - 1;

993 i‡(
	`isLfun˘i⁄
(
o
))

994 
°©us
 = 
	`luaU_dump
(
L
, 
	`gë¥Ÿo
(
o
), 
wrôî
, 
d©a
, 
°rù
);

996 
°©us
 = 1;

997 
	`lua_u∆ock
(
L
);

998  
°©us
;

999 
	}
}

1002 
LUA_API
 
	$lua_°©us
 (
lua_Sèã
 *
L
) {

1003  
L
->
°©us
;

1004 
	}
}

1011 
LUA_API
 
	$lua_gc
 (
lua_Sèã
 *
L
, 
wh©
, 
d©a
) {

1012 
ªs
 = 0;

1013 
globÆ_Sèã
 *
g
;

1014 
	`lua_lock
(
L
);

1015 
g
 = 
	`G
(
L
);

1016 
wh©
) {

1017 
LUA_GCSTOP
: {

1018 
g
->
g¸u¬ög
 = 0;

1021 
LUA_GCRESTART
: {

1022 
	`luaE_£tdebt
(
g
, 0);

1023 
g
->
g¸u¬ög
 = 1;

1026 
LUA_GCCOLLECT
: {

1027 
	`luaC_fuŒgc
(
L
, 0);

1030 
LUA_GCCOUNT
: {

1032 
ªs
 = 
	`ˇ°_öt
(
	`gëtŸÆbyãs
(
g
) >> 10);

1035 
LUA_GCCOUNTB
: {

1036 
ªs
 = 
	`ˇ°_öt
(
	`gëtŸÆbyãs
(
g
) & 0x3ff);

1039 
LUA_GCSTEP
: {

1040 
l_mem
 
debt
 = 1;

1041 
ﬁdru¬ög
 = 
g
->
g¸u¬ög
;

1042 
g
->
g¸u¬ög
 = 1;

1043 i‡(
d©a
 == 0) {

1044 
	`luaE_£tdebt
(
g
, -
GCSTEPSIZE
);

1045 
	`luaC_°ï
(
L
);

1048 
debt
 = 
	`ˇ°
(
l_mem
, 
d©a
Ë* 1024 + 
g
->
GCdebt
;

1049 
	`luaE_£tdebt
(
g
, 
debt
);

1050 
	`luaC_checkGC
(
L
);

1052 
g
->
g¸u¬ög
 = 
ﬁdru¬ög
;

1053 i‡(
debt
 > 0 && 
g
->
gc°©e
 =
GCS∑u£
)

1054 
ªs
 = 1;

1057 
LUA_GCSETPAUSE
: {

1058 
ªs
 = 
g
->
g˝au£
;

1059 
g
->
g˝au£
 = 
d©a
;

1062 
LUA_GCSETSTEPMUL
: {

1063 
ªs
 = 
g
->
gc°ïmul
;

1064 i‡(
d©a
 < 40) data = 40;

1065 
g
->
gc°ïmul
 = 
d©a
;

1068 
LUA_GCISRUNNING
: {

1069 
ªs
 = 
g
->
g¸u¬ög
;

1072 : 
ªs
 = -1;

1074 
	`lua_u∆ock
(
L
);

1075  
ªs
;

1076 
	}
}

1085 
LUA_API
 
	$lua_îr‹
 (
lua_Sèã
 *
L
) {

1086 
	`lua_lock
(
L
);

1087 
	`≠i_check√Àms
(
L
, 1);

1088 
	`luaG_îr‹msg
(
L
);

1091 
	}
}

1094 
LUA_API
 
	$lua_√xt
 (
lua_Sèã
 *
L
, 
idx
) {

1095 
StkId
 
t
;

1096 
m‹e
;

1097 
	`lua_lock
(
L
);

1098 
t
 = 
	`ödex2addr
(
L
, 
idx
);

1099 
	`≠i_check
(
	`âi°abÀ
(
t
), "tableÉxpected");

1100 
m‹e
 = 
	`luaH_√xt
(
L
, 
	`hvÆue
(
t
), L->
t›
 - 1);

1101 i‡(
m‹e
) {

1102 
	`≠i_ö¸_t›
(
L
);

1105 
L
->
t›
 -= 1;

1106 
	`lua_u∆ock
(
L
);

1107  
m‹e
;

1108 
	}
}

1111 
LUA_API
 
	$lua_c⁄ˇt
 (
lua_Sèã
 *
L
, 
n
) {

1112 
	`lua_lock
(
L
);

1113 
	`≠i_check√Àms
(
L
, 
n
);

1114 i‡(
n
 >= 2) {

1115 
	`luaC_checkGC
(
L
);

1116 
	`luaV_c⁄ˇt
(
L
, 
n
);

1118 i‡(
n
 == 0) {

1119 
	`£tsvÆue2s
(
L
, L->
t›
, 
	`luaS_√wl°r
(L, "", 0));

1120 
	`≠i_ö¸_t›
(
L
);

1123 
	`lua_u∆ock
(
L
);

1124 
	}
}

1127 
LUA_API
 
	$lua_Àn
 (
lua_Sèã
 *
L
, 
idx
) {

1128 
StkId
 
t
;

1129 
	`lua_lock
(
L
);

1130 
t
 = 
	`ödex2addr
(
L
, 
idx
);

1131 
	`luaV_objÀn
(
L
, L->
t›
, 
t
);

1132 
	`≠i_ö¸_t›
(
L
);

1133 
	`lua_u∆ock
(
L
);

1134 
	}
}

1137 
LUA_API
 
lua_AŒoc
 
	$lua_gëÆlocf
 (
lua_Sèã
 *
L
, **
ud
) {

1138 
lua_AŒoc
 
f
;

1139 
	`lua_lock
(
L
);

1140 i‡(
ud
Ë*ud = 
	`G
(
L
)->ud;

1141 
f
 = 
	`G
(
L
)->
‰óŒoc
;

1142 
	`lua_u∆ock
(
L
);

1143  
f
;

1144 
	}
}

1147 
LUA_API
 
	$lua_£èŒocf
 (
lua_Sèã
 *
L
, 
lua_AŒoc
 
f
, *
ud
) {

1148 
	`lua_lock
(
L
);

1149 
	`G
(
L
)->
ud
 = ud;

1150 
	`G
(
L
)->
‰óŒoc
 = 
f
;

1151 
	`lua_u∆ock
(
L
);

1152 
	}
}

1155 
LUA_API
 *
	$lua_√wu£rd©a
 (
lua_Sèã
 *
L
, 
size_t
 
size
) {

1156 
Ud©a
 *
u
;

1157 
	`lua_lock
(
L
);

1158 
	`luaC_checkGC
(
L
);

1159 
u
 = 
	`luaS_√wud©a
(
L
, 
size
);

1160 
	`£tuvÆue
(
L
, L->
t›
, 
u
);

1161 
	`≠i_ö¸_t›
(
L
);

1162 
	`lua_u∆ock
(
L
);

1163  
	`gëud©amem
(
u
);

1164 
	}
}

1168 c⁄° *
	$aux_upvÆue
 (
StkId
 
fi
, 
n
, 
TVÆue
 **
vÆ
,

1169 
CClosuª
 **
ow√r
, 
UpVÆ
 **
uv
) {

1170 
	`ây≥
(
fi
)) {

1171 
LUA_TCCL
: {

1172 
CClosuª
 *
f
 = 
	`˛CvÆue
(
fi
);

1173 i‡(!(1 <
n
 &&Ç <
f
->
nupvÆues
)Ë 
NULL
;

1174 *
vÆ
 = &
f
->
upvÆue
[
n
-1];

1175 i‡(
ow√r
Ë*ow√∏
f
;

1178 
LUA_TLCL
: {

1179 
LClosuª
 *
f
 = 
	`˛LvÆue
(
fi
);

1180 
TSåög
 *
«me
;

1181 
PrŸo
 *
p
 = 
f
->p;

1182 i‡(!(1 <
n
 &&Ç <
p
->
sizeupvÆues
)Ë 
NULL
;

1183 *
vÆ
 = 
f
->
upvÆs
[
n
-1]->
v
;

1184 i‡(
uv
Ë*uv = 
f
->
upvÆs
[
n
 - 1];

1185 
«me
 = 
p
->
upvÆues
[
n
-1].name;

1186  (
«me
 =
NULL
Ë? "(*nÿ«me)" : 
	`gë°r
(name);

1188 :  
NULL
;

1190 
	}
}

1193 
LUA_API
 c⁄° *
	$lua_gëupvÆue
 (
lua_Sèã
 *
L
, 
funcödex
, 
n
) {

1194 c⁄° *
«me
;

1195 
TVÆue
 *
vÆ
 = 
NULL
;

1196 
	`lua_lock
(
L
);

1197 
«me
 = 
	`aux_upvÆue
(
	`ödex2addr
(
L
, 
funcödex
), 
n
, &
vÆ
, 
NULL
, NULL);

1198 i‡(
«me
) {

1199 
	`£tobj2s
(
L
, L->
t›
, 
vÆ
);

1200 
	`≠i_ö¸_t›
(
L
);

1202 
	`lua_u∆ock
(
L
);

1203  
«me
;

1204 
	}
}

1207 
LUA_API
 c⁄° *
	$lua_£tupvÆue
 (
lua_Sèã
 *
L
, 
funcödex
, 
n
) {

1208 c⁄° *
«me
;

1209 
TVÆue
 *
vÆ
 = 
NULL
;

1210 
CClosuª
 *
ow√r
 = 
NULL
;

1211 
UpVÆ
 *
uv
 = 
NULL
;

1212 
StkId
 
fi
;

1213 
	`lua_lock
(
L
);

1214 
fi
 = 
	`ödex2addr
(
L
, 
funcödex
);

1215 
	`≠i_check√Àms
(
L
, 1);

1216 
«me
 = 
	`aux_upvÆue
(
fi
, 
n
, &
vÆ
, &
ow√r
, &
uv
);

1217 i‡(
«me
) {

1218 
L
->
t›
--;

1219 
	`£tobj
(
L
, 
vÆ
, L->
t›
);

1220 i‡(
ow√r
Ë{ 
	`luaC_b¨rõr
(
L
, ow√r, L->
t›
); }

1221 i‡(
uv
Ë{ 
	`luaC_upvÆb¨rõr
(
L
, uv); }

1223 
	`lua_u∆ock
(
L
);

1224  
«me
;

1225 
	}
}

1228 
UpVÆ
 **
	$gëupvÆªf
 (
lua_Sèã
 *
L
, 
fidx
, 
n
, 
LClosuª
 **
pf
) {

1229 
LClosuª
 *
f
;

1230 
StkId
 
fi
 = 
	`ödex2addr
(
L
, 
fidx
);

1231 
	`≠i_check
(
	`âisL˛osuª
(
fi
), "Lua functionÉxpected");

1232 
f
 = 
	`˛LvÆue
(
fi
);

1233 
	`≠i_check
((1 <
n
 &&Ç <
f
->
p
->
sizeupvÆues
), "invalid upvalue index");

1234 i‡(
pf
Ë*p‡
f
;

1235  &
f
->
upvÆs
[
n
 - 1];

1236 
	}
}

1239 
LUA_API
 *
	$lua_upvÆueid
 (
lua_Sèã
 *
L
, 
fidx
, 
n
) {

1240 
StkId
 
fi
 = 
	`ödex2addr
(
L
, 
fidx
);

1241 
	`ây≥
(
fi
)) {

1242 
LUA_TLCL
: {

1243  *
	`gëupvÆªf
(
L
, 
fidx
, 
n
, 
NULL
);

1245 
LUA_TCCL
: {

1246 
CClosuª
 *
f
 = 
	`˛CvÆue
(
fi
);

1247 
	`≠i_check
(1 <
n
 &&Ç <
f
->
nupvÆues
, "invalid upvalue index");

1248  &
f
->
upvÆue
[
n
 - 1];

1251 
	`≠i_check
(0, "closureÉxpected");

1252  
NULL
;

1255 
	}
}

1258 
LUA_API
 
	$lua_upvÆuejoö
 (
lua_Sèã
 *
L
, 
fidx1
, 
n1
,

1259 
fidx2
, 
n2
) {

1260 
LClosuª
 *
f1
;

1261 
UpVÆ
 **
up1
 = 
	`gëupvÆªf
(
L
, 
fidx1
, 
n1
, &
f1
);

1262 
UpVÆ
 **
up2
 = 
	`gëupvÆªf
(
L
, 
fidx2
, 
n2
, 
NULL
);

1263 
	`luaC_upvdeccou¡
(
L
, *
up1
);

1264 *
up1
 = *
up2
;

1265 (*
up1
)->
ªfcou¡
++;

1266 i‡(
	`upis›í
(*
up1
)Ë(*up1)->
u
.
›í
.
touched
 = 1;

1267 
	`luaC_upvÆb¨rõr
(
L
, *
up1
);

1268 
	}
}

1270 
LUA_API
 
	$lua_£çriv©e
(
lua_Sèã
 * 
L
, * 
vÆ
) {

1271 
L
->
¥iv©e
 = 
vÆ
;

1272 
	}
}

1274 
LUA_API
 * 
	$lua_gë¥iv©e
(
lua_Sèã
 * 
L
) {

1275  
L
->
¥iv©e
;

1276 
	}
}

	@lib/archive/lua-5.3.0/src/lapi.h

7 #i‚de‡
œpi_h


8 
	#œpi_h


	)

11 
	~"Œimôs.h
"

12 
	~"l°©e.h
"

14 
	#≠i_ö¸_t›
(
L
Ë{L->
t›
++; 
	`≠i_check
(L->t› <L->
ci
->top, \

15 "°ack ovîÊow");}

	)

17 
	#adju°ªsu…s
(
L
,
ƒes
) \

18 { i‡((
ƒes
Ë=
LUA_MULTRET
 && 
L
->
ci
->
t›
 < L->t›ËL->ci->t› = L->t›; }

	)

20 
	#≠i_check√Àms
(
L
,
n
Ë
	`≠i_check
(“Ë< (L->
t›
 - L->
ci
->
func
), \

21 "nŸÉnoughÉÀmít†öÅhê°ack")

	)

	@lib/archive/lua-5.3.0/src/lauxlib.c

7 
	#œuxlib_c


	)

8 
	#LUA_LIB


	)

10 
	~"Õªfix.h
"

13 
	~<î∫o.h
>

14 
	~<°d¨g.h
>

15 
	~<°dio.h
>

16 
	~<°dlib.h
>

17 
	~<°rög.h
>

24 
	~"lua.h
"

26 
	~"œuxlib.h
"

36 
	#LEVELS1
 12

	)

37 
	#LEVELS2
 10

	)

45 
	$födfõld
 (
lua_Sèã
 *
L
, 
objidx
, 
Àvñ
) {

46 i‡(
Àvñ
 =0 || !
	`lua_i°abÀ
(
L
, -1))

48 
	`lua_pushnû
(
L
);

49 
	`lua_√xt
(
L
, -2)) {

50 i‡(
	`lua_ty≥
(
L
, -2Ë=
LUA_TSTRING
) {

51 i‡(
	`lua_øwequÆ
(
L
, 
objidx
, -1)) {

52 
	`lua_p›
(
L
, 1);

55 i‡(
	`födfõld
(
L
, 
objidx
, 
Àvñ
 - 1)) {

56 
	`lua_ªmove
(
L
, -2);

57 
	`lua_pushlôîÆ
(
L
, ".");

58 
	`lua_ö£π
(
L
, -2);

59 
	`lua_c⁄ˇt
(
L
, 3);

63 
	`lua_p›
(
L
, 1);

66 
	}
}

73 
	$pushglobÆfun˙ame
 (
lua_Sèã
 *
L
, 
lua_Debug
 *
¨
) {

74 
t›
 = 
	`lua_gët›
(
L
);

75 
	`lua_gëöfo
(
L
, "f", 
¨
);

76 
	`lua_gëfõld
(
L
, 
LUA_REGISTRYINDEX
, "_LOADED");

77 i‡(
	`födfõld
(
L
, 
t›
 + 1, 2)) {

78 c⁄° *
«me
 = 
	`lua_to°rög
(
L
, -1);

79 i‡(
	`°∫cmp
(
«me
, "_G.", 3) == 0) {

80 
	`lua_push°rög
(
L
, 
«me
 + 3);

81 
	`lua_ªmove
(
L
, -2);

83 
	`lua_c›y
(
L
, -1, 
t›
 + 1);

84 
	`lua_p›
(
L
, 2);

88 
	`lua_£â›
(
L
, 
t›
);

91 
	}
}

94 
	$pushfun˙ame
 (
lua_Sèã
 *
L
, 
lua_Debug
 *
¨
) {

95 i‡(
	`pushglobÆfun˙ame
(
L
, 
¨
)) {

96 
	`lua_pushf°rög
(
L
, "fun˘i⁄ '%s'", 
	`lua_to°rög
(L, -1));

97 
	`lua_ªmove
(
L
, -2);

99 i‡(*
¨
->
«mewh©
 != '\0')

100 
	`lua_pushf°rög
(
L
, "%†'%s'", 
¨
->
«mewh©
,ár->
«me
);

101 i‡(*
¨
->
wh©
 == 'm')

102 
	`lua_pushlôîÆ
(
L
, "main chunk");

103 i‡(*
¨
->
wh©
 != 'C')

104 
	`lua_pushf°rög
(
L
, "fun˘i⁄ <%s:%d>", 
¨
->
sh‹t_§c
,ár->
löedeföed
);

106 
	`lua_pushlôîÆ
(
L
, "?");

107 
	}
}

110 
	$cou¡Àvñs
 (
lua_Sèã
 *
L
) {

111 
lua_Debug
 
¨
;

112 
li
 = 1, 
À
 = 1;

114 
	`lua_gë°ack
(
L
, 
À
, &
¨
)Ë{ 
li
 =Üe;Üe *= 2; }

116 
li
 < 
À
) {

117 
m
 = (
li
 + 
À
)/2;

118 i‡(
	`lua_gë°ack
(
L
, 
m
, &
¨
)Ë
li
 = m + 1;

119 
À
 = 
m
;

121  
À
 - 1;

122 
	}
}

125 
LUALIB_API
 
	$luaL_åa˚back
 (
lua_Sèã
 *
L
,Üua_Sèã *
L1
,

126 c⁄° *
msg
, 
Àvñ
) {

127 
lua_Debug
 
¨
;

128 
t›
 = 
	`lua_gët›
(
L
);

129 
numÀvñs
 = 
	`cou¡Àvñs
(
L1
);

130 
m¨k
 = (
numÀvñs
 > 
LEVELS1
 + 
LEVELS2
) ? LEVELS1 : 0;

131 i‡(
msg
Ë
	`lua_pushf°rög
(
L
, "%s\n", msg);

132 
	`lua_pushlôîÆ
(
L
, "stackÅraceback:");

133 
	`lua_gë°ack
(
L1
, 
Àvñ
++, &
¨
)) {

134 i‡(
Àvñ
 =
m¨k
) {

135 
	`lua_pushlôîÆ
(
L
, "\n\t...");

136 
Àvñ
 = 
numÀvñs
 - 
LEVELS2
;

139 
	`lua_gëöfo
(
L1
, "S t", &
¨
);

140 
	`lua_pushf°rög
(
L
, "\n\t%s:", 
¨
.
sh‹t_§c
);

141 i‡(
¨
.
cuºíéöe
 > 0)

142 
	`lua_pushf°rög
(
L
, "%d:", 
¨
.
cuºíéöe
);

143 
	`lua_pushlôîÆ
(
L
, " in ");

144 
	`pushfun˙ame
(
L
, &
¨
);

145 i‡(
¨
.
i°aûˇŒ
)

146 
	`lua_pushlôîÆ
(
L
, "\n\t(...tail calls...)");

147 
	`lua_c⁄ˇt
(
L
, 
	`lua_gët›
(LË- 
t›
);

150 
	`lua_c⁄ˇt
(
L
, 
	`lua_gët›
(LË- 
t›
);

151 
	}
}

162 
LUALIB_API
 
	$luaL_¨gîr‹
 (
lua_Sèã
 *
L
, 
¨g
, c⁄° *
exåamsg
) {

163 
lua_Debug
 
¨
;

164 i‡(!
	`lua_gë°ack
(
L
, 0, &
¨
))

165  
	`luaL_îr‹
(
L
, "badárgumíà#%d (%s)", 
¨g
, 
exåamsg
);

166 
	`lua_gëöfo
(
L
, "n", &
¨
);

167 i‡(
	`°rcmp
(
¨
.
«mewh©
, "method") == 0) {

168 
¨g
--;

169 i‡(
¨g
 == 0)

170  
	`luaL_îr‹
(
L
, "calling '%s' on bad self (%s)",

171 
¨
.
«me
, 
exåamsg
);

173 i‡(
¨
.
«me
 =
NULL
)

174 
¨
.
«me
 = (
	`pushglobÆfun˙ame
(
L
, &¨)Ë? 
	`lua_to°rög
(L, -1) : "?";

175  
	`luaL_îr‹
(
L
, "badárgument #%dÅo '%s' (%s)",

176 
¨g
, 
¨
.
«me
, 
exåamsg
);

177 
	}
}

180 
	$ty≥îr‹
 (
lua_Sèã
 *
L
, 
¨g
, c⁄° *
äame
) {

181 c⁄° *
msg
;

182 c⁄° *
ty≥¨g
;

183 i‡(
	`luaL_gëmëafõld
(
L
, 
¨g
, "__«me"Ë=
LUA_TSTRING
)

184 
ty≥¨g
 = 
	`lua_to°rög
(
L
, -1);

185 i‡(
	`lua_ty≥
(
L
, 
¨g
Ë=
LUA_TLIGHTUSERDATA
)

186 
ty≥¨g
 = "light userdata";

188 
ty≥¨g
 = 
	`luaL_ty≥«me
(
L
, 
¨g
);

189 
msg
 = 
	`lua_pushf°rög
(
L
, "%†ex≥˘ed, gŸ %s", 
äame
, 
ty≥¨g
);

190  
	`luaL_¨gîr‹
(
L
, 
¨g
, 
msg
);

191 
	}
}

194 
	$èg_îr‹
 (
lua_Sèã
 *
L
, 
¨g
, 
èg
) {

195 
	`ty≥îr‹
(
L
, 
¨g
, 
	`lua_ty≥«me
(L, 
èg
));

196 
	}
}

199 
LUALIB_API
 
	$luaL_whîe
 (
lua_Sèã
 *
L
, 
Àvñ
) {

200 
lua_Debug
 
¨
;

201 i‡(
	`lua_gë°ack
(
L
, 
Àvñ
, &
¨
)) {

202 
	`lua_gëöfo
(
L
, "Sl", &
¨
);

203 i‡(
¨
.
cuºíéöe
 > 0) {

204 
	`lua_pushf°rög
(
L
, "%s:%d: ", 
¨
.
sh‹t_§c
,ár.
cuºíéöe
);

208 
	`lua_pushlôîÆ
(
L
, "");

209 
	}
}

212 
LUALIB_API
 
	$luaL_îr‹
 (
lua_Sèã
 *
L
, c⁄° *
fmt
, ...) {

213 
va_li°
 
¨gp
;

214 
	`va_°¨t
(
¨gp
, 
fmt
);

215 
	`luaL_whîe
(
L
, 1);

216 
	`lua_pushvf°rög
(
L
, 
fmt
, 
¨gp
);

217 
	`va_íd
(
¨gp
);

218 
	`lua_c⁄ˇt
(
L
, 2);

219  
	`lua_îr‹
(
L
);

220 
	}
}

223 
LUALIB_API
 
	$luaL_fûîesu…
 (
lua_Sèã
 *
L
, 
°©
, c⁄° *
‚ame
) {

224 
í
 = 
î∫o
;

225 i‡(
°©
) {

226 
	`lua_pushboﬁón
(
L
, 1);

230 
	`lua_pushnû
(
L
);

231 i‡(
‚ame
)

232 
	`lua_pushf°rög
(
L
, "%s: %s", 
‚ame
, 
	`°ªº‹
(
í
));

234 
	`lua_push°rög
(
L
, 
	`°ªº‹
(
í
));

235 
	`lua_pushöãgî
(
L
, 
í
);

238 
	}
}

241 #i‡!
deföed
(
l_ö•e˘°©
)

243 #i‡
deföed
(
LUA_USE_POSIX
)

245 
	~<sys/waô.h
>

250 
	#l_ö•e˘°©
(
°©
,
wh©
) \

251 i‡(
	`WIFEXITED
(
°©
)Ë{ sèà
	`WEXITSTATUS
(stat); } \

252 i‡(
	`WIFSIGNALED
(
°©
)Ë{ sèà
	`WTERMSIG
(°©); 
wh©
 = "sig«l"; }

	)

256 
	#l_ö•e˘°©
(
°©
,
wh©
Ë

	)

263 
LUALIB_API
 
	$luaL_exe¸esu…
 (
lua_Sèã
 *
L
, 
°©
) {

264 c⁄° *
wh©
 = "exit";

265 i‡(
°©
 == -1)

266  
	`luaL_fûîesu…
(
L
, 0, 
NULL
);

268 
	`l_ö•e˘°©
(
°©
, 
wh©
);

269 i‡(*
wh©
 ='e' && 
°©
 == 0)

270 
	`lua_pushboﬁón
(
L
, 1);

272 
	`lua_pushnû
(
L
);

273 
	`lua_push°rög
(
L
, 
wh©
);

274 
	`lua_pushöãgî
(
L
, 
°©
);

277 
	}
}

288 
LUALIB_API
 
	$luaL_√wmë©abÀ
 (
lua_Sèã
 *
L
, c⁄° *
äame
) {

289 i‡(
	`luaL_gëmë©abÀ
(
L
, 
äame
))

291 
	`lua_p›
(
L
, 1);

292 
	`lua_√wèbÀ
(
L
);

293 
	`lua_push°rög
(
L
, 
äame
);

294 
	`lua_£tfõld
(
L
, -2, "__name");

295 
	`lua_pushvÆue
(
L
, -1);

296 
	`lua_£tfõld
(
L
, 
LUA_REGISTRYINDEX
, 
äame
);

298 
	}
}

301 
LUALIB_API
 
	$luaL_£tmë©abÀ
 (
lua_Sèã
 *
L
, c⁄° *
äame
) {

302 
	`luaL_gëmë©abÀ
(
L
, 
äame
);

303 
	`lua_£tmë©abÀ
(
L
, -2);

304 
	}
}

307 
LUALIB_API
 *
	$luaL_ã°ud©a
 (
lua_Sèã
 *
L
, 
ud
, c⁄° *
äame
) {

308 *
p
 = 
	`lua_tou£rd©a
(
L
, 
ud
);

309 i‡(
p
 !
NULL
) {

310 i‡(
	`lua_gëmë©abÀ
(
L
, 
ud
)) {

311 
	`luaL_gëmë©abÀ
(
L
, 
äame
);

312 i‡(!
	`lua_øwequÆ
(
L
, -1, -2))

313 
p
 = 
NULL
;

314 
	`lua_p›
(
L
, 2);

315  
p
;

318  
NULL
;

319 
	}
}

322 
LUALIB_API
 *
	$luaL_checkud©a
 (
lua_Sèã
 *
L
, 
ud
, c⁄° *
äame
) {

323 *
p
 = 
	`luaL_ã°ud©a
(
L
, 
ud
, 
äame
);

324 i‡(
p
 =
NULL
Ë
	`ty≥îr‹
(
L
, 
ud
, 
äame
);

325  
p
;

326 
	}
}

337 
LUALIB_API
 
	$luaL_check›ti⁄
 (
lua_Sèã
 *
L
, 
¨g
, c⁄° *
def
,

338 c⁄° *c⁄° 
l°
[]) {

339 c⁄° *
«me
 = (
def
Ë? 
	`luaL_›t°rög
(
L
, 
¨g
, def) :

340 
	`luaL_check°rög
(
L
, 
¨g
);

341 
i
;

342 
i
=0; 
l°
[i]; i++)

343 i‡(
	`°rcmp
(
l°
[
i
], 
«me
) == 0)

344  
i
;

345  
	`luaL_¨gîr‹
(
L
, 
¨g
,

346 
	`lua_pushf°rög
(
L
, "övÆid o±i⁄ '%s'", 
«me
));

347 
	}
}

350 
LUALIB_API
 
	$luaL_check°ack
 (
lua_Sèã
 *
L
, 
•a˚
, c⁄° *
msg
) {

352 c⁄° 
exåa
 = 
LUA_MINSTACK
;

353 i‡(!
	`lua_check°ack
(
L
, 
•a˚
 + 
exåa
)) {

354 i‡(
msg
)

355 
	`luaL_îr‹
(
L
, "°ack ovîÊow (%s)", 
msg
);

357 
	`luaL_îr‹
(
L
, "stack overflow");

359 
	}
}

362 
LUALIB_API
 
	$luaL_checkty≥
 (
lua_Sèã
 *
L
, 
¨g
, 
t
) {

363 i‡(
	`lua_ty≥
(
L
, 
¨g
Ë!
t
)

364 
	`èg_îr‹
(
L
, 
¨g
, 
t
);

365 
	}
}

368 
LUALIB_API
 
	$luaL_check™y
 (
lua_Sèã
 *
L
, 
¨g
) {

369 i‡(
	`lua_ty≥
(
L
, 
¨g
Ë=
LUA_TNONE
)

370 
	`luaL_¨gîr‹
(
L
, 
¨g
, "valueÉxpected");

371 
	}
}

374 
LUALIB_API
 c⁄° *
	$luaL_checkl°rög
 (
lua_Sèã
 *
L
, 
¨g
, 
size_t
 *
Àn
) {

375 c⁄° *
s
 = 
	`lua_tﬁ°rög
(
L
, 
¨g
, 
Àn
);

376 i‡(!
s
Ë
	`èg_îr‹
(
L
, 
¨g
, 
LUA_TSTRING
);

377  
s
;

378 
	}
}

381 
LUALIB_API
 c⁄° *
	$luaL_›é°rög
 (
lua_Sèã
 *
L
, 
¨g
,

382 c⁄° *
def
, 
size_t
 *
Àn
) {

383 i‡(
	`lua_i¢⁄e‹nû
(
L
, 
¨g
)) {

384 i‡(
Àn
)

385 *
Àn
 = (
def
 ? 
	`°æí
(def) : 0);

386  
def
;

388  
	`luaL_checkl°rög
(
L
, 
¨g
, 
Àn
);

389 
	}
}

392 
LUALIB_API
 
lua_Numbî
 
	$luaL_checknumbî
 (
lua_Sèã
 *
L
, 
¨g
) {

393 
i¢um
;

394 
lua_Numbî
 
d
 = 
	`lua_t⁄umbîx
(
L
, 
¨g
, &
i¢um
);

395 i‡(!
i¢um
)

396 
	`èg_îr‹
(
L
, 
¨g
, 
LUA_TNUMBER
);

397  
d
;

398 
	}
}

401 
LUALIB_API
 
lua_Numbî
 
	$luaL_›äumbî
 (
lua_Sèã
 *
L
, 
¨g
, 
lua_Numbî
 
def
) {

402  
	`luaL_›t
(
L
, 
luaL_checknumbî
, 
¨g
, 
def
);

403 
	}
}

406 
	$öãº‹
 (
lua_Sèã
 *
L
, 
¨g
) {

407 i‡(
	`lua_i¢umbî
(
L
, 
¨g
))

408 
	`luaL_¨gîr‹
(
L
, 
¨g
, "number hasÇo integerÑepresentation");

410 
	`èg_îr‹
(
L
, 
¨g
, 
LUA_TNUMBER
);

411 
	}
}

414 
LUALIB_API
 
lua_I¡egî
 
	$luaL_checköãgî
 (
lua_Sèã
 *
L
, 
¨g
) {

415 
i¢um
;

416 
lua_I¡egî
 
d
 = 
	`lua_toöãgîx
(
L
, 
¨g
, &
i¢um
);

417 i‡(!
i¢um
) {

418 
	`öãº‹
(
L
, 
¨g
);

420  
d
;

421 
	}
}

424 
LUALIB_API
 
lua_I¡egî
 
	$luaL_›töãgî
 (
lua_Sèã
 *
L
, 
¨g
,

425 
lua_I¡egî
 
def
) {

426  
	`luaL_›t
(
L
, 
luaL_checköãgî
, 
¨g
, 
def
);

427 
	}
}

442 
	#buff⁄°ack
(
B
Ë((B)->
b
 !(B)->
öôb
)

	)

448 
LUALIB_API
 *
	$luaL_¥ïbuffsize
 (
luaL_Buf„r
 *
B
, 
size_t
 
sz
) {

449 
lua_Sèã
 *
L
 = 
B
->L;

450 i‡(
B
->
size
 - B->
n
 < 
sz
) {

451 *
√wbuff
;

452 
size_t
 
√wsize
 = 
B
->
size
 * 2;

453 i‡(
√wsize
 - 
B
->
n
 < 
sz
)

454 
√wsize
 = 
B
->
n
 + 
sz
;

455 i‡(
√wsize
 < 
B
->
n
 ||Çewsizê- B->¿< 
sz
)

456 
	`luaL_îr‹
(
L
, "bufferÅooÜarge");

458 
√wbuff
 = (*)
	`lua_√wu£rd©a
(
L
, 
√wsize
 * ());

460 
	`mem˝y
(
√wbuff
, 
B
->
b
, B->
n
 * ());

461 i‡(
	`buff⁄°ack
(
B
))

462 
	`lua_ªmove
(
L
, -2);

463 
B
->
b
 = 
√wbuff
;

464 
B
->
size
 = 
√wsize
;

466  &
B
->
b
[B->
n
];

467 
	}
}

470 
LUALIB_API
 
	$luaL_addl°rög
 (
luaL_Buf„r
 *
B
, c⁄° *
s
, 
size_t
 
l
) {

471 *
b
 = 
	`luaL_¥ïbuffsize
(
B
, 
l
);

472 
	`mem˝y
(
b
, 
s
, 
l
 * ());

473 
	`luaL_addsize
(
B
, 
l
);

474 
	}
}

477 
LUALIB_API
 
	$luaL_add°rög
 (
luaL_Buf„r
 *
B
, c⁄° *
s
) {

478 
	`luaL_addl°rög
(
B
, 
s
, 
	`°æí
(s));

479 
	}
}

482 
LUALIB_API
 
	$luaL_pushªsu…
 (
luaL_Buf„r
 *
B
) {

483 
lua_Sèã
 *
L
 = 
B
->L;

484 
	`lua_pushl°rög
(
L
, 
B
->
b
, B->
n
);

485 i‡(
	`buff⁄°ack
(
B
))

486 
	`lua_ªmove
(
L
, -2);

487 
	}
}

490 
LUALIB_API
 
	$luaL_pushªsu…size
 (
luaL_Buf„r
 *
B
, 
size_t
 
sz
) {

491 
	`luaL_addsize
(
B
, 
sz
);

492 
	`luaL_pushªsu…
(
B
);

493 
	}
}

496 
LUALIB_API
 
	$luaL_addvÆue
 (
luaL_Buf„r
 *
B
) {

497 
lua_Sèã
 *
L
 = 
B
->L;

498 
size_t
 
l
;

499 c⁄° *
s
 = 
	`lua_tﬁ°rög
(
L
, -1, &
l
);

500 i‡(
	`buff⁄°ack
(
B
))

501 
	`lua_ö£π
(
L
, -2);

502 
	`luaL_addl°rög
(
B
, 
s
, 
l
);

503 
	`lua_ªmove
(
L
, (
	`buff⁄°ack
(
B
)) ? -2 : -1);

504 
	}
}

507 
LUALIB_API
 
	$luaL_bufföô
 (
lua_Sèã
 *
L
, 
luaL_Buf„r
 *
B
) {

508 
B
->
L
 = L;

509 
B
->
b
 = B->
öôb
;

510 
B
->
n
 = 0;

511 
B
->
size
 = 
LUAL_BUFFERSIZE
;

512 
	}
}

515 
LUALIB_API
 *
	$luaL_bufföôsize
 (
lua_Sèã
 *
L
, 
luaL_Buf„r
 *
B
, 
size_t
 
sz
) {

516 
	`luaL_bufföô
(
L
, 
B
);

517  
	`luaL_¥ïbuffsize
(
B
, 
sz
);

518 
	}
}

530 
	#‰ìli°
 0

	)

533 
LUALIB_API
 
	$luaL_ªf
 (
lua_Sèã
 *
L
, 
t
) {

534 
ªf
;

535 i‡(
	`lua_i¢û
(
L
, -1)) {

536 
	`lua_p›
(
L
, 1);

537  
LUA_REFNIL
;

539 
t
 = 
	`lua_absödex
(
L
,Å);

540 
	`lua_øwgëi
(
L
, 
t
, 
‰ìli°
);

541 
ªf
 = ()
	`lua_toöãgî
(
L
, -1);

542 
	`lua_p›
(
L
, 1);

543 i‡(
ªf
 != 0) {

544 
	`lua_øwgëi
(
L
, 
t
, 
ªf
);

545 
	`lua_øw£ti
(
L
, 
t
, 
‰ìli°
);

548 
ªf
 = ()
	`lua_øwÀn
(
L
, 
t
) + 1;

549 
	`lua_øw£ti
(
L
, 
t
, 
ªf
);

550  
ªf
;

551 
	}
}

554 
LUALIB_API
 
	$luaL_uƒef
 (
lua_Sèã
 *
L
, 
t
, 
ªf
) {

555 i‡(
ªf
 >= 0) {

556 
t
 = 
	`lua_absödex
(
L
,Å);

557 
	`lua_øwgëi
(
L
, 
t
, 
‰ìli°
);

558 
	`lua_øw£ti
(
L
, 
t
, 
ªf
);

559 
	`lua_pushöãgî
(
L
, 
ªf
);

560 
	`lua_øw£ti
(
L
, 
t
, 
‰ìli°
);

562 
	}
}

573 
	sLﬂdF
 {

574 
	mn
;

575 
FILE
 *
	mf
;

576 
	mbuff
[
BUFSIZ
];

577 } 
	tLﬂdF
;

580 c⁄° *
	$gëF
 (
lua_Sèã
 *
L
, *
ud
, 
size_t
 *
size
) {

581 
LﬂdF
 *
lf
 = (LﬂdF *)
ud
;

582 ()
L
;

583 i‡(
lf
->
n
 > 0) {

584 *
size
 = 
lf
->
n
;

585 
lf
->
n
 = 0;

591 i‡(
	`„of
(
lf
->
f
)Ë 
NULL
;

592 *
size
 = 
	`‰ód
(
lf
->
buff
, 1, ÷f->buff),Üf->
f
);

594  
lf
->
buff
;

595 
	}
}

598 
	$îrfûe
 (
lua_Sèã
 *
L
, c⁄° *
wh©
, 
‚ameödex
) {

599 c⁄° *
£º
 = 
	`°ªº‹
(
î∫o
);

600 c⁄° *
fûíame
 = 
	`lua_to°rög
(
L
, 
‚ameödex
) + 1;

601 
	`lua_pushf°rög
(
L
, "ˇ¬Ÿ %†%s: %s", 
wh©
, 
fûíame
, 
£º
);

602 
	`lua_ªmove
(
L
, 
‚ameödex
);

603  
LUA_ERRFILE
;

604 
	}
}

607 
	$skùBOM
 (
LﬂdF
 *
lf
) {

608 c⁄° *
p
 = "\xEF\xBB\xBF";

609 
c
;

610 
lf
->
n
 = 0;

612 
c
 = 
	`gëc
(
lf
->
f
);

613 i‡(
c
 =
EOF
 || c !*(c⁄° *)
p
++)  c;

614 
lf
->
buff
[lf->
n
++] = 
c
;

615 } *
p
 != '\0');

616 
lf
->
n
 = 0;

617  
	`gëc
(
lf
->
f
);

618 
	}
}

628 
	$skùcommít
 (
LﬂdF
 *
lf
, *
˝
) {

629 
c
 = *
˝
 = 
	`skùBOM
(
lf
);

630 i‡(
c
 == '#') {

632 
c
 = 
	`gëc
(
lf
->
f
);

633 } 
c
 !
EOF
 && c != '\n') ;

634 *
˝
 = 
	`gëc
(
lf
->
f
);

638 
	}
}

641 
LUALIB_API
 
	$luaL_lﬂdfûex
 (
lua_Sèã
 *
L
, c⁄° *
fûíame
,

642 c⁄° *
mode
) {

643 
LﬂdF
 
lf
;

644 
°©us
, 
ªad°©us
;

645 
c
;

646 
‚ameödex
 = 
	`lua_gët›
(
L
) + 1;

647 i‡(
fûíame
 =
NULL
) {

648 
	`lua_pushlôîÆ
(
L
, "=stdin");

649 
lf
.
f
 = 
°dö
;

652 
	`lua_pushf°rög
(
L
, "@%s", 
fûíame
);

653 
lf
.
f
 = 
	`f›í
(
fûíame
, "r");

654 i‡(
lf
.
f
 =
NULL
Ë 
	`îrfûe
(
L
, "›í", 
‚ameödex
);

656 i‡(
	`skùcommít
(&
lf
, &
c
))

657 
lf
.
buff
[lf.
n
++] = '\n';

658 i‡(
c
 =
LUA_SIGNATURE
[0] && 
fûíame
) {

659 
lf
.
f
 = 
	`‰e›í
(
fûíame
, "rb",Üf.f);

660 i‡(
lf
.
f
 =
NULL
Ë 
	`îrfûe
(
L
, "ª›í", 
‚ameödex
);

661 
	`skùcommít
(&
lf
, &
c
);

663 i‡(
c
 !
EOF
)

664 
lf
.
buff
[lf.
n
++] = 
c
;

665 
°©us
 = 
	`lua_lﬂd
(
L
, 
gëF
, &
lf
, 
	`lua_to°rög
(L, -1), 
mode
);

666 
ªad°©us
 = 
	`„º‹
(
lf
.
f
);

667 i‡(
fûíame
Ë
	`f˛o£
(
lf
.
f
);

668 i‡(
ªad°©us
) {

669 
	`lua_£â›
(
L
, 
‚ameödex
);

670  
	`îrfûe
(
L
, "ªad", 
‚ameödex
);

672 
	`lua_ªmove
(
L
, 
‚ameödex
);

673  
°©us
;

674 
	}
}

677 
	sLﬂdS
 {

678 c⁄° *
	ms
;

679 
size_t
 
	msize
;

680 } 
	tLﬂdS
;

683 c⁄° *
	$gëS
 (
lua_Sèã
 *
L
, *
ud
, 
size_t
 *
size
) {

684 
LﬂdS
 *
ls
 = (LﬂdS *)
ud
;

685 ()
L
;

686 i‡(
ls
->
size
 =0Ë 
NULL
;

687 *
size
 = 
ls
->size;

688 
ls
->
size
 = 0;

689  
ls
->
s
;

690 
	}
}

693 
LUALIB_API
 
	$luaL_lﬂdbuf„rx
 (
lua_Sèã
 *
L
, c⁄° *
buff
, 
size_t
 
size
,

694 c⁄° *
«me
, c⁄° *
mode
) {

695 
LﬂdS
 
ls
;

696 
ls
.
s
 = 
buff
;

697 
ls
.
size
 = size;

698  
	`lua_lﬂd
(
L
, 
gëS
, &
ls
, 
«me
, 
mode
);

699 
	}
}

702 
LUALIB_API
 
	$luaL_lﬂd°rög
 (
lua_Sèã
 *
L
, c⁄° *
s
) {

703  
	`luaL_lﬂdbuf„r
(
L
, 
s
, 
	`°æí
(s), s);

704 
	}
}

710 
LUALIB_API
 
	$luaL_gëmëafõld
 (
lua_Sèã
 *
L
, 
obj
, c⁄° *
evít
) {

711 i‡(!
	`lua_gëmë©abÀ
(
L
, 
obj
))

712  
LUA_TNIL
;

714 
â
;

715 
	`lua_push°rög
(
L
, 
evít
);

716 
â
 = 
	`lua_øwgë
(
L
, -2);

717 i‡(
â
 =
LUA_TNIL
)

718 
	`lua_p›
(
L
, 2);

720 
	`lua_ªmove
(
L
, -2);

721  
â
;

723 
	}
}

726 
LUALIB_API
 
	$luaL_ˇŒmëa
 (
lua_Sèã
 *
L
, 
obj
, c⁄° *
evít
) {

727 
obj
 = 
	`lua_absödex
(
L
, obj);

728 i‡(
	`luaL_gëmëafõld
(
L
, 
obj
, 
evít
Ë=
LUA_TNIL
)

730 
	`lua_pushvÆue
(
L
, 
obj
);

731 
	`lua_ˇŒ
(
L
, 1, 1);

733 
	}
}

736 
LUALIB_API
 
lua_I¡egî
 
	$luaL_Àn
 (
lua_Sèã
 *
L
, 
idx
) {

737 
lua_I¡egî
 
l
;

738 
i¢um
;

739 
	`lua_Àn
(
L
, 
idx
);

740 
l
 = 
	`lua_toöãgîx
(
L
, -1, &
i¢um
);

741 i‡(!
i¢um
)

742 
	`luaL_îr‹
(
L
, "objectÜength isÇotán integer");

743 
	`lua_p›
(
L
, 1);

744  
l
;

745 
	}
}

748 
LUALIB_API
 c⁄° *
	$luaL_tﬁ°rög
 (
lua_Sèã
 *
L
, 
idx
, 
size_t
 *
Àn
) {

749 i‡(!
	`luaL_ˇŒmëa
(
L
, 
idx
, "__tostring")) {

750 
	`lua_ty≥
(
L
, 
idx
)) {

751 
LUA_TNUMBER
: {

752 i‡(
	`lua_isöãgî
(
L
, 
idx
))

753 
	`lua_pushf°rög
(
L
, "%I", 
	`lua_toöãgî
(L, 
idx
));

755 
	`lua_pushf°rög
(
L
, "%f", 
	`lua_t⁄umbî
(L, 
idx
));

758 
LUA_TSTRING
:

759 
	`lua_pushvÆue
(
L
, 
idx
);

761 
LUA_TBOOLEAN
:

762 
	`lua_push°rög
(
L
, (
	`lua_toboﬁón
(L, 
idx
) ? "true" : "false"));

764 
LUA_TNIL
:

765 
	`lua_pushlôîÆ
(
L
, "nil");

768 
	`lua_pushf°rög
(
L
, "%s: %p", 
	`luaL_ty≥«me
(L, 
idx
),

769 
	`lua_t›oöãr
(
L
, 
idx
));

773  
	`lua_tﬁ°rög
(
L
, -1, 
Àn
);

774 
	}
}

782 #i‡
deföed
(
LUA_COMPAT_MODULE
)

784 c⁄° *
	$luaL_födèbÀ
 (
lua_Sèã
 *
L
, 
idx
,

785 c⁄° *
‚ame
, 
szhöt
) {

786 c⁄° *
e
;

787 i‡(
idx
Ë
	`lua_pushvÆue
(
L
, idx);

789 
e
 = 
	`°rchr
(
‚ame
, '.');

790 i‡(
e
 =
NULL
Ëê
‚ame
 + 
	`°æí
(fname);

791 
	`lua_pushl°rög
(
L
, 
‚ame
, 
e
 - fname);

792 i‡(
	`lua_øwgë
(
L
, -2Ë=
LUA_TNIL
) {

793 
	`lua_p›
(
L
, 1);

794 
	`lua_¸óãèbÀ
(
L
, 0, (*
e
 ='.' ? 1 : 
szhöt
));

795 
	`lua_pushl°rög
(
L
, 
‚ame
, 
e
 - fname);

796 
	`lua_pushvÆue
(
L
, -2);

797 
	`lua_£âabÀ
(
L
, -4);

799 i‡(!
	`lua_i°abÀ
(
L
, -1)) {

800 
	`lua_p›
(
L
, 2);

801  
‚ame
;

803 
	`lua_ªmove
(
L
, -2);

804 
‚ame
 = 
e
 + 1;

805 } *
e
 == '.');

806  
NULL
;

807 
	}
}

813 
	$libsize
 (c⁄° 
luaL_Reg
 *
l
) {

814 
size
 = 0;

815 ; 
l
 &&Ü->
«me
;Ü++Ë
size
++;

816  
size
;

817 
	}
}

826 
LUALIB_API
 
	$luaL_pushmoduÀ
 (
lua_Sèã
 *
L
, c⁄° *
mod«me
,

827 
sizehöt
) {

828 
	`luaL_födèbÀ
(
L
, 
LUA_REGISTRYINDEX
, "_LOADED", 1);

829 i‡(
	`lua_gëfõld
(
L
, -1, 
mod«me
Ë!
LUA_TTABLE
) {

830 
	`lua_p›
(
L
, 1);

832 
	`lua_pushglobÆèbÀ
(
L
);

833 i‡(
	`luaL_födèbÀ
(
L
, 0, 
mod«me
, 
sizehöt
Ë!
NULL
)

834 
	`luaL_îr‹
(
L
, "«mêc⁄Êi˘ f‹ moduÀ '%s'", 
mod«me
);

835 
	`lua_pushvÆue
(
L
, -1);

836 
	`lua_£tfõld
(
L
, -3, 
mod«me
);

838 
	`lua_ªmove
(
L
, -2);

839 
	}
}

842 
LUALIB_API
 
	$luaL_›ílib
 (
lua_Sèã
 *
L
, c⁄° *
lib«me
,

843 c⁄° 
luaL_Reg
 *
l
, 
nup
) {

844 
	`luaL_checkvîsi⁄
(
L
);

845 i‡(
lib«me
) {

846 
	`luaL_pushmoduÀ
(
L
, 
lib«me
, 
	`libsize
(
l
));

847 
	`lua_ö£π
(
L
, -(
nup
 + 1));

849 i‡(
l
)

850 
	`luaL_£tfuncs
(
L
, 
l
, 
nup
);

852 
	`lua_p›
(
L
, 
nup
);

853 
	}
}

863 
LUALIB_API
 
	$luaL_£tfuncs
 (
lua_Sèã
 *
L
, c⁄° 
luaL_Reg
 *
l
, 
nup
) {

864 
	`luaL_check°ack
(
L
, 
nup
, "too many upvalues");

865 ; 
l
->
«me
 !
NULL
;Ü++) {

866 
i
;

867 
i
 = 0; i < 
nup
; i++)

868 
	`lua_pushvÆue
(
L
, -
nup
);

869 
	`lua_pushc˛osuª
(
L
, 
l
->
func
, 
nup
);

870 
	`lua_£tfõld
(
L
, -(
nup
 + 2), 
l
->
«me
);

872 
	`lua_p›
(
L
, 
nup
);

873 
	}
}

880 
LUALIB_API
 
	$luaL_gësubèbÀ
 (
lua_Sèã
 *
L
, 
idx
, c⁄° *
‚ame
) {

881 i‡(
	`lua_gëfõld
(
L
, 
idx
, 
‚ame
Ë=
LUA_TTABLE
)

884 
	`lua_p›
(
L
, 1);

885 
idx
 = 
	`lua_absödex
(
L
, idx);

886 
	`lua_√wèbÀ
(
L
);

887 
	`lua_pushvÆue
(
L
, -1);

888 
	`lua_£tfõld
(
L
, 
idx
, 
‚ame
);

891 
	}
}

900 
LUALIB_API
 
	$luaL_ªquúef
 (
lua_Sèã
 *
L
, c⁄° *
mod«me
,

901 
lua_CFun˘i⁄
 
›íf
, 
glb
) {

902 
	`luaL_gësubèbÀ
(
L
, 
LUA_REGISTRYINDEX
, "_LOADED");

903 
	`lua_gëfõld
(
L
, -1, 
mod«me
);

904 i‡(!
	`lua_toboﬁón
(
L
, -1)) {

905 
	`lua_p›
(
L
, 1);

906 
	`lua_pushcfun˘i⁄
(
L
, 
›íf
);

907 
	`lua_push°rög
(
L
, 
mod«me
);

908 
	`lua_ˇŒ
(
L
, 1, 1);

909 
	`lua_pushvÆue
(
L
, -1);

910 
	`lua_£tfõld
(
L
, -3, 
mod«me
);

912 
	`lua_ªmove
(
L
, -2);

913 i‡(
glb
) {

914 
	`lua_pushvÆue
(
L
, -1);

915 
	`lua_£tglobÆ
(
L
, 
mod«me
);

917 
	}
}

920 
LUALIB_API
 c⁄° *
	$luaL_gsub
 (
lua_Sèã
 *
L
, c⁄° *
s
, c⁄° *
p
,

921 c⁄° *
r
) {

922 c⁄° *
wûd
;

923 
size_t
 
l
 = 
	`°æí
(
p
);

924 
luaL_Buf„r
 
b
;

925 
	`luaL_bufföô
(
L
, &
b
);

926 (
wûd
 = 
	`°r°r
(
s
, 
p
)Ë!
NULL
) {

927 
	`luaL_addl°rög
(&
b
, 
s
, 
wûd
 - s);

928 
	`luaL_add°rög
(&
b
, 
r
);

929 
s
 = 
wûd
 + 
l
;

931 
	`luaL_add°rög
(&
b
, 
s
);

932 
	`luaL_pushªsu…
(&
b
);

933  
	`lua_to°rög
(
L
, -1);

934 
	}
}

937 *
	$l_Æloc
 (*
ud
, *
±r
, 
size_t
 
osize
, size_à
nsize
) {

938 ()
ud
; ()
osize
;

939 i‡(
nsize
 == 0) {

940 
	`‰ì
(
±r
);

941  
NULL
;

944  
	`ªÆloc
(
±r
, 
nsize
);

945 
	}
}

948 
	$∑nic
 (
lua_Sèã
 *
L
) {

949 
	`lua_wrôe°rögîr‹
(
L
, "PANIC: unprotectedÉrror in callÅo Lua API (%s)\n",

950 
	`lua_to°rög
(
L
, -1));

952 
	}
}

955 
LUALIB_API
 
lua_Sèã
 *
	$luaL_√w°©e
 () {

956 
lua_Sèã
 *
L
 = 
	`lua_√w°©e
(
l_Æloc
, 
NULL
);

957 i‡(
L
Ë
	`lua_©∑nic
(L, &
∑nic
);

958  
L
;

959 
	}
}

962 
LUALIB_API
 
	$luaL_checkvîsi⁄_
 (
lua_Sèã
 *
L
, 
lua_Numbî
 
vî
, 
size_t
 
sz
) {

963 c⁄° 
lua_Numbî
 *
v
 = 
	`lua_vîsi⁄
(
L
);

964 i‡(
sz
 !
LUAL_NUMSIZES
)

965 
	`luaL_îr‹
(
L
, "coreándÜibrary have incompatibleÇumericÅypes");

966 i‡(
v
 !
	`lua_vîsi⁄
(
NULL
))

967 
	`luaL_îr‹
(
L
, "multiple Lua VMs detected");

968 i‡(*
v
 !
vî
)

969 
	`luaL_îr‹
(
L
, "version mismatch:ápp.Çeeds %f, Lua coreÖrovides %f",

970 
vî
, *
v
);

971 
	}
}

973 
LUALIB_API
 *

974 
	$luaL_gë¥iv©e
(
lua_Sèã
 * 
L
)

976  (
L
 =
NULL
Ë? NULL : 
	`lua_gë¥iv©e
(L);

977 
	}
}

979 
LUALIB_API
 

980 
	$luaL_£çriv©e
(
lua_Sèã
 * 
L
, * 
vÆ
)

982 i‡–
L
 =
NULL
 )

984 
	`lua_£çriv©e
(
L
, 
vÆ
);

986 
	}
}

	@lib/archive/lua-5.3.0/src/lauxlib.h

8 #i‚de‡
œuxlib_h


9 
	#œuxlib_h


	)

12 
	~<°ddef.h
>

13 
	~<°dio.h
>

15 
	~"lua.h
"

20 
	#LUA_ERRFILE
 (
LUA_ERRERR
+1)

	)

23 
	sluaL_Reg
 {

24 c⁄° *
	m«me
;

25 
lua_CFun˘i⁄
 
	mfunc
;

26 } 
	tluaL_Reg
;

29 
	#LUAL_NUMSIZES
 ((
lua_I¡egî
)*16 + (
lua_Numbî
))

	)

31 
LUALIB_API
 (
luaL_checkvîsi⁄_
Ë(
lua_Sèã
 *
L
, 
lua_Numbî
 
vî
, 
size_t
 
sz
);

32 
	#luaL_checkvîsi⁄
(
L
) \

33 
	`luaL_checkvîsi⁄_
(
L
, 
LUA_VERSION_NUM
, 
LUAL_NUMSIZES
)

	)

35 
LUALIB_API
 (
luaL_gëmëafõld
Ë(
lua_Sèã
 *
L
, 
obj
, c⁄° *
e
);

36 
LUALIB_API
 (
luaL_ˇŒmëa
Ë(
lua_Sèã
 *
L
, 
obj
, c⁄° *
e
);

37 
LUALIB_API
 c⁄° *(
luaL_tﬁ°rög
Ë(
lua_Sèã
 *
L
, 
idx
, 
size_t
 *
Àn
);

38 
LUALIB_API
 (
luaL_¨gîr‹
Ë(
lua_Sèã
 *
L
, 
¨g
, c⁄° *
exåamsg
);

39 
LUALIB_API
 c⁄° *(
luaL_checkl°rög
Ë(
lua_Sèã
 *
L
, 
¨g
,

40 
size_t
 *
l
);

41 
LUALIB_API
 c⁄° *(
luaL_›é°rög
Ë(
lua_Sèã
 *
L
, 
¨g
,

42 c⁄° *
def
, 
size_t
 *
l
);

43 
LUALIB_API
 
	$lua_Numbî
 (
luaL_checknumbî
Ë(
lua_Sèã
 *
L
, 
¨g
);

44 
LUALIB_API
 
	$lua_Numbî
 (
luaL_›äumbî
Ë(
lua_Sèã
 *
L
, 
¨g
, 
lua_Numbî
 
def
);

46 
LUALIB_API
 
	$lua_I¡egî
 (
luaL_checköãgî
Ë(
lua_Sèã
 *
L
, 
¨g
);

47 
LUALIB_API
 
	$lua_I¡egî
 (
luaL_›töãgî
Ë(
lua_Sèã
 *
L
, 
¨g
,

48 
lua_I¡egî
 
def
);

50 
LUALIB_API
 (
luaL_check°ack
Ë(
lua_Sèã
 *
L
, 
sz
, c⁄° *
msg
);

51 
LUALIB_API
 (
luaL_checkty≥
Ë(
lua_Sèã
 *
L
, 
¨g
, 
t
);

52 
LUALIB_API
 (
luaL_check™y
Ë(
lua_Sèã
 *
L
, 
¨g
);

54 
LUALIB_API
 (
luaL_√wmë©abÀ
Ë(
lua_Sèã
 *
L
, c⁄° *
äame
);

55 
LUALIB_API
 (
luaL_£tmë©abÀ
Ë(
lua_Sèã
 *
L
, c⁄° *
äame
);

56 
LUALIB_API
 *(
luaL_ã°ud©a
Ë(
lua_Sèã
 *
L
, 
ud
, c⁄° *
äame
);

57 
LUALIB_API
 *(
luaL_checkud©a
Ë(
lua_Sèã
 *
L
, 
ud
, c⁄° *
äame
);

59 
LUALIB_API
 (
luaL_whîe
Ë(
lua_Sèã
 *
L
, 
lvl
);

60 
LUALIB_API
 (
luaL_îr‹
Ë(
lua_Sèã
 *
L
, c⁄° *
fmt
, ...);

62 
LUALIB_API
 (
luaL_check›ti⁄
Ë(
lua_Sèã
 *
L
, 
¨g
, c⁄° *
def
,

63 c⁄° *c⁄° 
l°
[]);

65 
LUALIB_API
 (
luaL_fûîesu…
Ë(
lua_Sèã
 *
L
, 
°©
, c⁄° *
‚ame
);

66 
LUALIB_API
 (
luaL_exe¸esu…
Ë(
lua_Sèã
 *
L
, 
°©
);

69 
	#LUA_NOREF
 (-2)

	)

70 
	#LUA_REFNIL
 (-1)

	)

72 
LUALIB_API
 (
luaL_ªf
Ë(
lua_Sèã
 *
L
, 
t
);

73 
LUALIB_API
 (
luaL_uƒef
Ë(
lua_Sèã
 *
L
, 
t
, 
ªf
);

75 
LUALIB_API
 (
luaL_lﬂdfûex
Ë(
lua_Sèã
 *
L
, c⁄° *
fûíame
,

76 c⁄° *
mode
);

78 
	#luaL_lﬂdfûe
(
L
,
f
Ë
	`luaL_lﬂdfûex
(L,f,
NULL
)

	)

80 
LUALIB_API
 (
luaL_lﬂdbuf„rx
Ë(
lua_Sèã
 *
L
, c⁄° *
buff
, 
size_t
 
sz
,

81 c⁄° *
«me
, c⁄° *
mode
);

82 
LUALIB_API
 (
luaL_lﬂd°rög
Ë(
lua_Sèã
 *
L
, c⁄° *
s
);

84 
LUALIB_API
 
lua_Sèã
 *(
luaL_√w°©e
) ();

86 
LUALIB_API
 
	$lua_I¡egî
 (
luaL_Àn
Ë(
lua_Sèã
 *
L
, 
idx
);

88 
LUALIB_API
 c⁄° *(
luaL_gsub
Ë(
lua_Sèã
 *
L
, c⁄° *
s
, c⁄° *
p
,

89 c⁄° *
r
);

91 
LUALIB_API
 (
luaL_£tfuncs
Ë(
lua_Sèã
 *
L
, c⁄° 
luaL_Reg
 *
l
, 
nup
);

93 
LUALIB_API
 (
luaL_gësubèbÀ
Ë(
lua_Sèã
 *
L
, 
idx
, c⁄° *
‚ame
);

95 
LUALIB_API
 (
luaL_åa˚back
Ë(
lua_Sèã
 *
L
,Üua_Sèã *
L1
,

96 c⁄° *
msg
, 
Àvñ
);

98 
LUALIB_API
 (
luaL_ªquúef
Ë(
lua_Sèã
 *
L
, c⁄° *
mod«me
,

99 
lua_CFun˘i⁄
 
›íf
, 
glb
);

108 
	#luaL_√wlibèbÀ
(
L
,
l
) \

109 
	`lua_¸óãèbÀ
(
L
, 0, (
l
)/(÷)[0]Ë- 1)

	)

111 
	#luaL_√wlib
(
L
,
l
) \

112 (
	`luaL_checkvîsi⁄
(
L
), 
	`luaL_√wlibèbÀ
(L,
l
), 
	`luaL_£tfuncs
(L,l,0))

	)

114 
	#luaL_¨gcheck
(
L
, 
c⁄d
,
¨g
,
exåamsg
) \

115 (()((
c⁄d
Ë|| 
	`luaL_¨gîr‹
(
L
, (
¨g
), (
exåamsg
))))

	)

116 
	#luaL_check°rög
(
L
,
n
Ë(
	`luaL_checkl°rög
(L, (n), 
NULL
))

	)

117 
	#luaL_›t°rög
(
L
,
n
,
d
Ë(
	`luaL_›é°rög
(L, (n), (d), 
NULL
))

	)

119 
	#luaL_ty≥«me
(
L
,
i
Ë
	`lua_ty≥«me
(L, 
	`lua_ty≥
(L,(i)))

	)

121 
	#luaL_dofûe
(
L
, 
‚
) \

122 (
	`luaL_lﬂdfûe
(
L
, 
‚
Ë|| 
	`lua_pˇŒ
(L, 0, 
LUA_MULTRET
, 0))

	)

124 
	#luaL_do°rög
(
L
, 
s
) \

125 (
	`luaL_lﬂd°rög
(
L
, 
s
Ë|| 
	`lua_pˇŒ
(L, 0, 
LUA_MULTRET
, 0))

	)

127 
	#luaL_gëmë©abÀ
(
L
,
n
Ë(
	`lua_gëfõld
(L, 
LUA_REGISTRYINDEX
, (n)))

	)

129 
	#luaL_›t
(
L
,
f
,
n
,
d
Ë(
	`lua_i¢⁄e‹nû
(L,“)Ë? (dË: 
	`f
(L,“)))

	)

131 
	#luaL_lﬂdbuf„r
(
L
,
s
,
sz
,
n
Ë
	`luaL_lﬂdbuf„rx
(L,s,sz,n,
NULL
)

	)

140 
	sluaL_Buf„r
 {

141 *
b
;

142 
size_t
 
size
;

143 
size_t
 
n
;

144 
lua_Sèã
 *
L
;

145 
öôb
[
LUAL_BUFFERSIZE
];

146 } 
	tluaL_Buf„r
;

149 
	#luaL_addch¨
(
B
,
c
) \

150 (()((
B
)->
n
 < (B)->
size
 || 
	`luaL_¥ïbuffsize
((B), 1)), \

151 ((
B
)->
b
[(B)->
n
++] = (
c
)))

	)

153 
	#luaL_addsize
(
B
,
s
Ë((B)->
n
 +(s))

	)

155 
LUALIB_API
 (
luaL_bufföô
Ë(
lua_Sèã
 *
L
, 
luaL_Buf„r
 *
B
);

156 
LUALIB_API
 *(
luaL_¥ïbuffsize
Ë(
luaL_Buf„r
 *
B
, 
size_t
 
sz
);

157 
LUALIB_API
 (
luaL_addl°rög
Ë(
luaL_Buf„r
 *
B
, c⁄° *
s
, 
size_t
 
l
);

158 
LUALIB_API
 (
luaL_add°rög
Ë(
luaL_Buf„r
 *
B
, c⁄° *
s
);

159 
LUALIB_API
 (
luaL_addvÆue
Ë(
luaL_Buf„r
 *
B
);

160 
LUALIB_API
 (
luaL_pushªsu…
Ë(
luaL_Buf„r
 *
B
);

161 
LUALIB_API
 (
luaL_pushªsu…size
Ë(
luaL_Buf„r
 *
B
, 
size_t
 
sz
);

162 
LUALIB_API
 *(
luaL_bufföôsize
Ë(
lua_Sèã
 *
L
, 
luaL_Buf„r
 *
B
, 
size_t
 
sz
);

164 
	#luaL_¥ïbuf„r
(
B
Ë
	`luaL_¥ïbuffsize
(B, 
LUAL_BUFFERSIZE
)

	)

182 
	#LUA_FILEHANDLE
 "FILE*"

	)

185 
	sluaL_Såóm
 {

186 
FILE
 *
f
;

187 
lua_CFun˘i⁄
 
˛o£f
;

188 } 
	tluaL_Såóm
;

195 #i‡
	`deföed
(
LUA_COMPAT_MODULE
)

197 
LUALIB_API
 (
luaL_pushmoduÀ
Ë(
lua_Sèã
 *
L
, c⁄° *
mod«me
,

198 
sizehöt
);

199 
LUALIB_API
 (
luaL_›ílib
Ë(
lua_Sèã
 *
L
, c⁄° *
lib«me
,

200 c⁄° 
luaL_Reg
 *
l
, 
nup
);

202 
	#luaL_ªgi°î
(
L
,
n
,
l
Ë(
	`luaL_›ílib
(L,“),÷),0))

	)

214 #i‡!
	`deföed
(
lua_wrôe°rög
)

215 
	#lua_wrôe°rög
(
L
,
s
,
l
Ë
	`fwrôe
((s), (), (l), 
°dout
)

	)

219 #i‡!
	`deföed
(
lua_wrôñöe
)

220 
	#lua_wrôñöe
(
L
Ë(
	`lua_wrôe°rög
(L, "\n", 1), 
	`fÊush
(
°dout
))

	)

224 #i‡!
	`deföed
(
lua_wrôe°rögîr‹
)

225 
	#lua_wrôe°rögîr‹
(
L
,
s
,
p
) \

226 (
	`Ârötf
(
°dîr
, (
s
), (
p
)), 
	`fÊush
(°dîr))

	)

237 #i‡
	`deföed
(
LUA_COMPAT_APIINTCASTS
)

239 
	#luaL_checkunsig√d
(
L
,
a
Ë((
lua_Unsig√d
)
	`luaL_checköãgî
(L,a))

	)

240 
	#luaL_›tunsig√d
(
L
,
a
,
d
) \

241 ((
lua_Unsig√d
)
	`luaL_›töãgî
(
L
,
a
,(
lua_I¡egî
)(
d
)))

	)

243 
	#luaL_checköt
(
L
,
n
Ë(()
	`luaL_checköãgî
(L, (n)))

	)

244 
	#luaL_›töt
(
L
,
n
,
d
Ë(()
	`luaL_›töãgî
(L, (n), (d)))

	)

246 
	#luaL_checkl⁄g
(
L
,
n
Ë(()
	`luaL_checköãgî
(L, (n)))

	)

247 
	#luaL_›é⁄g
(
L
,
n
,
d
Ë(()
	`luaL_›töãgî
(L, (n), (d)))

	)

252 
LUALIB_API
 
	`luaL_£çriv©e
(
lua_Sèã
 * 
L
, * 
vÆ
);

253 
LUALIB_API
 * 
	`luaL_gë¥iv©e
(
lua_Sèã
 * 
L
);

	@lib/archive/lua-5.3.0/src/lbaselib.c

7 
	#lba£lib_c


	)

8 
	#LUA_LIB


	)

10 
	~"Õªfix.h
"

13 
	~<˘y≥.h
>

14 
	~<°dio.h
>

15 
	~<°dlib.h
>

16 
	~<°rög.h
>

18 
	~"lua.h
"

20 
	~"œuxlib.h
"

21 
	~"luÆib.h
"

24 
	$luaB_¥öt
 (
lua_Sèã
 *
L
) {

25 
n
 = 
	`lua_gët›
(
L
);

26 
i
;

27 
	`lua_gëglobÆ
(
L
, "tostring");

28 
i
=1; i<=
n
; i++) {

29 c⁄° *
s
;

30 
size_t
 
l
;

31 
	`lua_pushvÆue
(
L
, -1);

32 
	`lua_pushvÆue
(
L
, 
i
);

33 
	`lua_ˇŒ
(
L
, 1, 1);

34 
s
 = 
	`lua_tﬁ°rög
(
L
, -1, &
l
);

35 i‡(
s
 =
NULL
)

36  
	`luaL_îr‹
(
L
, "'tostring' mustÑeturná stringÅo 'print'");

37 i‡(
i
>1Ë
	`lua_wrôe°rög
(
L
, "\t", 1);

38 
	`lua_wrôe°rög
(
L
, 
s
, 
l
);

39 
	`lua_p›
(
L
, 1);

41 
	`lua_wrôñöe
(
L
);

43 
	}
}

46 
	#SPACECHARS
 " \f\n\r\t\v"

	)

48 c⁄° *
	$b_°r2öt
 (c⁄° *
s
, 
ba£
, 
lua_I¡egî
 *
≤
) {

49 
lua_Unsig√d
 
n
 = 0;

50 
√g
 = 0;

51 
s
 +
	`°r•n
(s, 
SPACECHARS
);

52 i‡(*
s
 ='-'Ë{ s++; 
√g
 = 1; }

53 i‡(*
s
 == '+') s++;

54 i‡(!
	`iß um
(()*
s
))

55  
NULL
;

57 
digô
 = (
	`isdigô
(()*
s
)) ? *s - '0'

58 : 
	`touµî
(()*
s
) - 'A' + 10;

59 i‡(
digô
 >
ba£
Ë 
NULL
;

60 
n
 =Ç * 
ba£
 + 
digô
;

61 
s
++;

62 } 
	`iß um
(()*
s
));

63 
s
 +
	`°r•n
(s, 
SPACECHARS
);

64 *
≤
 = (
lua_I¡egî
)((
√g
Ë? (0u - 
n
) :Ç);

65  
s
;

66 
	}
}

69 
	$luaB_t⁄umbî
 (
lua_Sèã
 *
L
) {

70 i‡(
	`lua_i¢⁄e‹nû
(
L
, 2)) {

71 
	`luaL_check™y
(
L
, 1);

72 i‡(
	`lua_ty≥
(
L
, 1Ë=
LUA_TNUMBER
) {

73 
	`lua_£â›
(
L
, 1);

77 
size_t
 
l
;

78 c⁄° *
s
 = 
	`lua_tﬁ°rög
(
L
, 1, &
l
);

79 i‡(
s
 !
NULL
 && 
	`lua_°rögt⁄umbî
(
L
, sË=
l
 + 1)

85 
size_t
 
l
;

86 c⁄° *
s
;

87 
lua_I¡egî
 
n
 = 0;

88 
lua_I¡egî
 
ba£
 = 
	`luaL_checköãgî
(
L
, 2);

89 
	`luaL_checkty≥
(
L
, 1, 
LUA_TSTRING
);

90 
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
l
);

91 
	`luaL_¨gcheck
(
L
, 2 <
ba£
 && base <= 36, 2, "base out ofÑange");

92 i‡(
	`b_°r2öt
(
s
, ()
ba£
, &
n
Ë=†+ 
l
) {

93 
	`lua_pushöãgî
(
L
, 
n
);

97 
	`lua_pushnû
(
L
);

99 
	}
}

102 
	$luaB_îr‹
 (
lua_Sèã
 *
L
) {

103 
Àvñ
 = ()
	`luaL_›töãgî
(
L
, 2, 1);

104 
	`lua_£â›
(
L
, 1);

105 i‡(
	`lua_is°rög
(
L
, 1Ë&& 
Àvñ
 > 0) {

106 
	`luaL_whîe
(
L
, 
Àvñ
);

107 
	`lua_pushvÆue
(
L
, 1);

108 
	`lua_c⁄ˇt
(
L
, 2);

110  
	`lua_îr‹
(
L
);

111 
	}
}

114 
	$luaB_gëmë©abÀ
 (
lua_Sèã
 *
L
) {

115 
	`luaL_check™y
(
L
, 1);

116 i‡(!
	`lua_gëmë©abÀ
(
L
, 1)) {

117 
	`lua_pushnû
(
L
);

120 
	`luaL_gëmëafõld
(
L
, 1, "__metatable");

122 
	}
}

125 
	$luaB_£tmë©abÀ
 (
lua_Sèã
 *
L
) {

126 
t
 = 
	`lua_ty≥
(
L
, 2);

127 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

128 
	`luaL_¨gcheck
(
L
, 
t
 =
LUA_TNIL
 ||Å =
LUA_TTABLE
, 2,

130 i‡(
	`luaL_gëmëafõld
(
L
, 1, "__më©abÀ"Ë!
LUA_TNIL
)

131  
	`luaL_îr‹
(
L
, "cannot changeáÖrotected metatable");

132 
	`lua_£â›
(
L
, 2);

133 
	`lua_£tmë©abÀ
(
L
, 1);

135 
	}
}

138 
	$luaB_øwequÆ
 (
lua_Sèã
 *
L
) {

139 
	`luaL_check™y
(
L
, 1);

140 
	`luaL_check™y
(
L
, 2);

141 
	`lua_pushboﬁón
(
L
, 
	`lua_øwequÆ
(L, 1, 2));

143 
	}
}

146 
	$luaB_øwÀn
 (
lua_Sèã
 *
L
) {

147 
t
 = 
	`lua_ty≥
(
L
, 1);

148 
	`luaL_¨gcheck
(
L
, 
t
 =
LUA_TTABLE
 ||Å =
LUA_TSTRING
, 1,

150 
	`lua_pushöãgî
(
L
, 
	`lua_øwÀn
(L, 1));

152 
	}
}

155 
	$luaB_øwgë
 (
lua_Sèã
 *
L
) {

156 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

157 
	`luaL_check™y
(
L
, 2);

158 
	`lua_£â›
(
L
, 2);

159 
	`lua_øwgë
(
L
, 1);

161 
	}
}

163 
	$luaB_øw£t
 (
lua_Sèã
 *
L
) {

164 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

165 
	`luaL_check™y
(
L
, 2);

166 
	`luaL_check™y
(
L
, 3);

167 
	`lua_£â›
(
L
, 3);

168 
	`lua_øw£t
(
L
, 1);

170 
	}
}

173 
	$luaB_cﬁÀ˘g¨bage
 (
lua_Sèã
 *
L
) {

174 c⁄° *c⁄° 
›ts
[] = {"stop", "restart", "collect",

176 "i§u¬ög", 
NULL
};

177 c⁄° 
›t¢um
[] = {
LUA_GCSTOP
, 
LUA_GCRESTART
, 
LUA_GCCOLLECT
,

178 
LUA_GCCOUNT
, 
LUA_GCSTEP
, 
LUA_GCSETPAUSE
, 
LUA_GCSETSTEPMUL
,

179 
LUA_GCISRUNNING
};

180 
o
 = 
›t¢um
[
	`luaL_check›ti⁄
(
L
, 1, "cﬁÀ˘", 
›ts
)];

181 
ex
 = ()
	`luaL_›töãgî
(
L
, 2, 0);

182 
ªs
 = 
	`lua_gc
(
L
, 
o
, 
ex
);

183 
o
) {

184 
LUA_GCCOUNT
: {

185 
b
 = 
	`lua_gc
(
L
, 
LUA_GCCOUNTB
, 0);

186 
	`lua_pushnumbî
(
L
, (
lua_Numbî
)
ªs
 + (÷ua_Numbî)
b
/1024));

189 
LUA_GCSTEP
: 
LUA_GCISRUNNING
: {

190 
	`lua_pushboﬁón
(
L
, 
ªs
);

194 
	`lua_pushöãgî
(
L
, 
ªs
);

198 
	}
}

204 
	$luaB_ty≥
 (
lua_Sèã
 *
L
) {

205 
	`luaL_check™y
(
L
, 1);

206 
	`lua_pushvÆue
(
L
, 
	`lua_upvÆueödex
(
	`lua_ty≥
(L, 1) + 1));

208 
	}
}

211 
	$∑úsmëa
 (
lua_Sèã
 *
L
, c⁄° *
mëhod
, 
iszîo
,

212 
lua_CFun˘i⁄
 
ôî
) {

213 i‡(
	`luaL_gëmëafõld
(
L
, 1, 
mëhod
Ë=
LUA_TNIL
) {

214 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

215 
	`lua_pushcfun˘i⁄
(
L
, 
ôî
);

216 
	`lua_pushvÆue
(
L
, 1);

217 i‡(
iszîo
Ë
	`lua_pushöãgî
(
L
, 0);

218 
	`lua_pushnû
(
L
);

221 
	`lua_pushvÆue
(
L
, 1);

222 
	`lua_ˇŒ
(
L
, 1, 3);

225 
	}
}

228 
	$luaB_√xt
 (
lua_Sèã
 *
L
) {

229 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

230 
	`lua_£â›
(
L
, 2);

231 i‡(
	`lua_√xt
(
L
, 1))

234 
	`lua_pushnû
(
L
);

237 
	}
}

240 
	$luaB_∑ús
 (
lua_Sèã
 *
L
) {

241  
	`∑úsmëa
(
L
, "__∑ús", 0, 
luaB_√xt
);

242 
	}
}

248 
	$ùaúßux_øw
 (
lua_Sèã
 *
L
) {

249 
lua_I¡egî
 
i
 = 
	`luaL_checköãgî
(
L
, 2) + 1;

250 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

251 
	`lua_pushöãgî
(
L
, 
i
);

252  (
	`lua_øwgëi
(
L
, 1, 
i
Ë=
LUA_TNIL
) ? 1 : 2;

253 
	}
}

259 
	$ùaúßux
 (
lua_Sèã
 *
L
) {

260 
lua_I¡egî
 
i
 = 
	`luaL_checköãgî
(
L
, 2) + 1;

261 
	`lua_pushöãgî
(
L
, 
i
);

262  (
	`lua_gëi
(
L
, 1, 
i
Ë=
LUA_TNIL
) ? 1 : 2;

263 
	}
}

271 
	$luaB_ùaús
 (
lua_Sèã
 *
L
) {

272 
lua_CFun˘i⁄
 
ôî
 = (
	`luaL_gëmëafõld
(
L
, 1, "__ödex"Ë!
LUA_TNIL
)

273 ? 
ùaúßux
 : 
ùaúßux_øw
;

274 #i‡
	`deföed
(
LUA_COMPAT_IPAIRS
)

275  
	`∑úsmëa
(
L
, "__ùaús", 1, 
ôî
);

277 
	`luaL_check™y
(
L
, 1);

278 
	`lua_pushcfun˘i⁄
(
L
, 
ôî
);

279 
	`lua_pushvÆue
(
L
, 1);

280 
	`lua_pushöãgî
(
L
, 0);

283 
	}
}

286 
	$lﬂd_aux
 (
lua_Sèã
 *
L
, 
°©us
, 
ívidx
) {

287 i‡(
°©us
 =
LUA_OK
) {

288 i‡(
ívidx
 != 0) {

289 
	`lua_pushvÆue
(
L
, 
ívidx
);

290 i‡(!
	`lua_£tupvÆue
(
L
, -2, 1))

291 
	`lua_p›
(
L
, 1);

296 
	`lua_pushnû
(
L
);

297 
	`lua_ö£π
(
L
, -2);

300 
	}
}

303 
	$luaB_lﬂdfûe
 (
lua_Sèã
 *
L
) {

304 c⁄° *
‚ame
 = 
	`luaL_›t°rög
(
L
, 1, 
NULL
);

305 c⁄° *
mode
 = 
	`luaL_›t°rög
(
L
, 2, 
NULL
);

306 
ív
 = (!
	`lua_i¢⁄e
(
L
, 3) ? 3 : 0);

307 
°©us
 = 
	`luaL_lﬂdfûex
(
L
, 
‚ame
, 
mode
);

308  
	`lﬂd_aux
(
L
, 
°©us
, 
ív
);

309 
	}
}

324 
	#RESERVEDSLOT
 5

	)

333 c⁄° *
	$gíîic_ªadî
 (
lua_Sèã
 *
L
, *
ud
, 
size_t
 *
size
) {

334 ()(
ud
);

335 
	`luaL_check°ack
(
L
, 2, "too manyÇested functions");

336 
	`lua_pushvÆue
(
L
, 1);

337 
	`lua_ˇŒ
(
L
, 0, 1);

338 i‡(
	`lua_i¢û
(
L
, -1)) {

339 
	`lua_p›
(
L
, 1);

340 *
size
 = 0;

341  
NULL
;

343 i‡(!
	`lua_is°rög
(
L
, -1))

344 
	`luaL_îr‹
(
L
, "reader function mustÑeturná string");

345 
	`lua_ª∂a˚
(
L
, 
RESERVEDSLOT
);

346  
	`lua_tﬁ°rög
(
L
, 
RESERVEDSLOT
, 
size
);

347 
	}
}

350 
	$luaB_lﬂd
 (
lua_Sèã
 *
L
) {

351 
°©us
;

352 
size_t
 
l
;

353 c⁄° *
s
 = 
	`lua_tﬁ°rög
(
L
, 1, &
l
);

354 c⁄° *
mode
 = 
	`luaL_›t°rög
(
L
, 3, "bt");

355 
ív
 = (!
	`lua_i¢⁄e
(
L
, 4) ? 4 : 0);

356 i‡(
s
 !
NULL
) {

357 c⁄° *
chunk«me
 = 
	`luaL_›t°rög
(
L
, 2, 
s
);

358 
°©us
 = 
	`luaL_lﬂdbuf„rx
(
L
, 
s
, 
l
, 
chunk«me
, 
mode
);

361 c⁄° *
chunk«me
 = 
	`luaL_›t°rög
(
L
, 2, "=(load)");

362 
	`luaL_checkty≥
(
L
, 1, 
LUA_TFUNCTION
);

363 
	`lua_£â›
(
L
, 
RESERVEDSLOT
);

364 
°©us
 = 
	`lua_lﬂd
(
L
, 
gíîic_ªadî
, 
NULL
, 
chunk«me
, 
mode
);

366  
	`lﬂd_aux
(
L
, 
°©us
, 
ív
);

367 
	}
}

372 
	$dofûec⁄t
 (
lua_Sèã
 *
L
, 
d1
, 
lua_KC⁄ãxt
 
d2
) {

373 ()
d1
; ()
d2
;

374  
	`lua_gët›
(
L
) - 1;

375 
	}
}

378 
	$luaB_dofûe
 (
lua_Sèã
 *
L
) {

379 c⁄° *
‚ame
 = 
	`luaL_›t°rög
(
L
, 1, 
NULL
);

380 
	`lua_£â›
(
L
, 1);

381 i‡(
	`luaL_lﬂdfûe
(
L
, 
‚ame
Ë!
LUA_OK
)

382  
	`lua_îr‹
(
L
);

383 
	`lua_ˇŒk
(
L
, 0, 
LUA_MULTRET
, 0, 
dofûec⁄t
);

384  
	`dofûec⁄t
(
L
, 0, 0);

385 
	}
}

388 
	$luaB_as£π
 (
lua_Sèã
 *
L
) {

389 i‡(
	`lua_toboﬁón
(
L
, 1))

390  
	`lua_gët›
(
L
);

392 
	`luaL_check™y
(
L
, 1);

393 
	`lua_ªmove
(
L
, 1);

394 
	`lua_pushlôîÆ
(
L
, "assertion failed!");

395 
	`lua_£â›
(
L
, 1);

396  
	`luaB_îr‹
(
L
);

398 
	}
}

401 
	$luaB_£À˘
 (
lua_Sèã
 *
L
) {

402 
n
 = 
	`lua_gët›
(
L
);

403 i‡(
	`lua_ty≥
(
L
, 1Ë=
LUA_TSTRING
 && *
	`lua_to°rög
(L, 1) == '#') {

404 
	`lua_pushöãgî
(
L
, 
n
-1);

408 
lua_I¡egî
 
i
 = 
	`luaL_checköãgî
(
L
, 1);

409 i‡(
i
 < 0Ëò
n
 + i;

410 i‡(
i
 > 
n
) i =Ç;

411 
	`luaL_¨gcheck
(
L
, 1 <
i
, 1, "index out ofÑange");

412  
n
 - ()
i
;

414 
	}
}

424 
	$föishpˇŒ
 (
lua_Sèã
 *
L
, 
°©us
, 
lua_KC⁄ãxt
 
exåa
) {

425 i‡(
°©us
 !
LUA_OK
 && sètu†!
LUA_YIELD
) {

426 
	`lua_pushboﬁón
(
L
, 0);

427 
	`lua_pushvÆue
(
L
, -2);

431  
	`lua_gët›
(
L
Ë- ()
exåa
;

432 
	}
}

435 
	$luaB_pˇŒ
 (
lua_Sèã
 *
L
) {

436 
°©us
;

437 
	`luaL_check™y
(
L
, 1);

438 
	`lua_pushboﬁón
(
L
, 1);

439 
	`lua_ö£π
(
L
, 1);

440 
°©us
 = 
	`lua_pˇŒk
(
L
, 
	`lua_gët›
(LË- 2, 
LUA_MULTRET
, 0, 0, 
föishpˇŒ
);

441  
	`föishpˇŒ
(
L
, 
°©us
, 0);

442 
	}
}

450 
	$luaB_xpˇŒ
 (
lua_Sèã
 *
L
) {

451 
°©us
;

452 
n
 = 
	`lua_gët›
(
L
);

453 
	`luaL_checkty≥
(
L
, 2, 
LUA_TFUNCTION
);

454 
	`lua_pushboﬁón
(
L
, 1);

455 
	`lua_pushvÆue
(
L
, 1);

456 
	`lua_rŸ©e
(
L
, 3, 2);

457 
°©us
 = 
	`lua_pˇŒk
(
L
, 
n
 - 2, 
LUA_MULTRET
, 2, 2, 
föishpˇŒ
);

458  
	`föishpˇŒ
(
L
, 
°©us
, 2);

459 
	}
}

462 
	$luaB_to°rög
 (
lua_Sèã
 *
L
) {

463 
	`luaL_check™y
(
L
, 1);

464 
	`luaL_tﬁ°rög
(
L
, 1, 
NULL
);

466 
	}
}

469 c⁄° 
luaL_Reg
 
	gba£_funcs
[] = {

470 {"as£π", 
luaB_as£π
},

471 {"cﬁÀ˘g¨bage", 
luaB_cﬁÀ˘g¨bage
},

472 {"dofûe", 
luaB_dofûe
},

473 {"îr‹", 
luaB_îr‹
},

474 {"gëmë©abÀ", 
luaB_gëmë©abÀ
},

475 {"ùaús", 
luaB_ùaús
},

476 {"lﬂdfûe", 
luaB_lﬂdfûe
},

477 {"lﬂd", 
luaB_lﬂd
},

478 #i‡
deföed
(
LUA_COMPAT_LOADSTRING
)

479 {"lﬂd°rög", 
luaB_lﬂd
},

481 {"√xt", 
luaB_√xt
},

482 {"∑ús", 
luaB_∑ús
},

483 {"pˇŒ", 
luaB_pˇŒ
},

484 {"¥öt", 
luaB_¥öt
},

485 {"øwequÆ", 
luaB_øwequÆ
},

486 {"øwÀn", 
luaB_øwÀn
},

487 {"øwgë", 
luaB_øwgë
},

488 {"øw£t", 
luaB_øw£t
},

489 {"£À˘", 
luaB_£À˘
},

490 {"£tmë©abÀ", 
luaB_£tmë©abÀ
},

491 {"t⁄umbî", 
luaB_t⁄umbî
},

492 {"to°rög", 
luaB_to°rög
},

493 {"xpˇŒ", 
luaB_xpˇŒ
},

495 {"ty≥", 
NULL
},

496 {"_G", 
NULL
},

497 {"_VERSION", 
NULL
},

498 {
NULL
, NULL}

502 
LUAMOD_API
 
	$lua›í_ba£
 (
lua_Sèã
 *
L
) {

503 
i
;

505 
	`lua_pushglobÆèbÀ
(
L
);

506 
	`luaL_£tfuncs
(
L
, 
ba£_funcs
, 0);

508 
	`lua_pushvÆue
(
L
, -1);

509 
	`lua_£tfõld
(
L
, -2, "_G");

511 
	`lua_pushlôîÆ
(
L
, 
LUA_VERSION
);

512 
	`lua_£tfõld
(
L
, -2, "_VERSION");

514 
i
 = 0; i < 
LUA_NUMTAGS
; i++)

515 
	`lua_push°rög
(
L
, 
	`lua_ty≥«me
(L, 
i
));

516 
	`lua_pushc˛osuª
(
L
, 
luaB_ty≥
, 
LUA_NUMTAGS
);

517 
	`lua_£tfõld
(
L
, -2, "type");

519 
	}
}

	@lib/archive/lua-5.3.0/src/lbitlib.c

7 
	#lbôlib_c


	)

8 
	#LUA_LIB


	)

10 
	~"Õªfix.h
"

13 
	~"lua.h
"

15 
	~"œuxlib.h
"

16 
	~"luÆib.h
"

19 #i‡
deföed
(
LUA_COMPAT_BITLIB
)

23 #i‡!
deföed
(
LUA_NBITS
)

24 
	#LUA_NBITS
 32

	)

33 
	#ALLONES
 (~(((~(
lua_Unsig√d
)0Ë<< (
LUA_NBITS
 - 1)Ë<< 1))

	)

37 
	#åim
(
x
Ë((xË& 
ALLONES
)

	)

41 
	#mask
(
n
Ë(~((
ALLONES
 << 1Ë<< (“Ë- 1)))

	)

45 
lua_Unsig√d
 
	$™daux
 (
lua_Sèã
 *
L
) {

46 
i
, 
n
 = 
	`lua_gët›
(
L
);

47 
lua_Unsig√d
 
r
 = ~(lua_Unsigned)0;

48 
i
 = 1; i <
n
; i++)

49 
r
 &
	`luaL_checkunsig√d
(
L
, 
i
);

50  
	`åim
(
r
);

51 
	}
}

54 
	$b_™d
 (
lua_Sèã
 *
L
) {

55 
lua_Unsig√d
 
r
 = 
	`™daux
(
L
);

56 
	`lua_pushunsig√d
(
L
, 
r
);

58 
	}
}

61 
	$b_ã°
 (
lua_Sèã
 *
L
) {

62 
lua_Unsig√d
 
r
 = 
	`™daux
(
L
);

63 
	`lua_pushboﬁón
(
L
, 
r
 != 0);

65 
	}
}

68 
	$b_‹
 (
lua_Sèã
 *
L
) {

69 
i
, 
n
 = 
	`lua_gët›
(
L
);

70 
lua_Unsig√d
 
r
 = 0;

71 
i
 = 1; i <
n
; i++)

72 
r
 |
	`luaL_checkunsig√d
(
L
, 
i
);

73 
	`lua_pushunsig√d
(
L
, 
	`åim
(
r
));

75 
	}
}

78 
	$b_x‹
 (
lua_Sèã
 *
L
) {

79 
i
, 
n
 = 
	`lua_gët›
(
L
);

80 
lua_Unsig√d
 
r
 = 0;

81 
i
 = 1; i <
n
; i++)

82 
r
 ^
	`luaL_checkunsig√d
(
L
, 
i
);

83 
	`lua_pushunsig√d
(
L
, 
	`åim
(
r
));

85 
	}
}

88 
	$b_nŸ
 (
lua_Sèã
 *
L
) {

89 
lua_Unsig√d
 
r
 = ~
	`luaL_checkunsig√d
(
L
, 1);

90 
	`lua_pushunsig√d
(
L
, 
	`åim
(
r
));

92 
	}
}

95 
	$b_shi·
 (
lua_Sèã
 *
L
, 
lua_Unsig√d
 
r
, 
lua_I¡egî
 
i
) {

96 i‡(
i
 < 0) {

97 
i
 = -i;

98 
r
 = 
	`åim
(r);

99 i‡(
i
 >
LUA_NBITS
Ë
r
 = 0;

100 
r
 >>
i
;

103 i‡(
i
 >
LUA_NBITS
Ë
r
 = 0;

104 
r
 <<
i
;

105 
r
 = 
	`åim
(r);

107 
	`lua_pushunsig√d
(
L
, 
r
);

109 
	}
}

112 
	$b_lshi·
 (
lua_Sèã
 *
L
) {

113  
	`b_shi·
(
L
, 
	`luaL_checkunsig√d
(L, 1), 
	`luaL_checköãgî
(L, 2));

114 
	}
}

117 
	$b_rshi·
 (
lua_Sèã
 *
L
) {

118  
	`b_shi·
(
L
, 
	`luaL_checkunsig√d
(L, 1), -
	`luaL_checköãgî
(L, 2));

119 
	}
}

122 
	$b_¨shi·
 (
lua_Sèã
 *
L
) {

123 
lua_Unsig√d
 
r
 = 
	`luaL_checkunsig√d
(
L
, 1);

124 
lua_I¡egî
 
i
 = 
	`luaL_checköãgî
(
L
, 2);

125 i‡(
i
 < 0 || !(
r
 & ((
lua_Unsig√d
)1 << (
LUA_NBITS
 - 1))))

126  
	`b_shi·
(
L
, 
r
, -
i
);

128 i‡(
i
 >
LUA_NBITS
Ë
r
 = 
ALLONES
;

130 
r
 = 
	`åim
(‘ >> 
i
Ë| ~—rim(~(
lua_Unsig√d
)0) >> i));

131 
	`lua_pushunsig√d
(
L
, 
r
);

134 
	}
}

137 
	$b_rŸ
 (
lua_Sèã
 *
L
, 
lua_I¡egî
 
d
) {

138 
lua_Unsig√d
 
r
 = 
	`luaL_checkunsig√d
(
L
, 1);

139 
i
 = 
d
 & (
LUA_NBITS
 - 1);

140 
r
 = 
	`åim
(r);

141 i‡(
i
 != 0)

142 
r
 = (∏<< 
i
Ë| (∏>> (
LUA_NBITS
 - i));

143 
	`lua_pushunsig√d
(
L
, 
	`åim
(
r
));

145 
	}
}

148 
	$b_ÃŸ
 (
lua_Sèã
 *
L
) {

149  
	`b_rŸ
(
L
, 
	`luaL_checköãgî
(L, 2));

150 
	}
}

153 
	$b_ºŸ
 (
lua_Sèã
 *
L
) {

154  
	`b_rŸ
(
L
, -
	`luaL_checköãgî
(L, 2));

155 
	}
}

164 
	$fõld¨gs
 (
lua_Sèã
 *
L
, 
Árg
, *
width
) {

165 
lua_I¡egî
 
f
 = 
	`luaL_checköãgî
(
L
, 
Árg
);

166 
lua_I¡egî
 
w
 = 
	`luaL_›töãgî
(
L
, 
Árg
 + 1, 1);

167 
	`luaL_¨gcheck
(
L
, 0 <
f
, 
Árg
, "field cannot beÇegative");

168 
	`luaL_¨gcheck
(
L
, 0 < 
w
, 
Árg
 + 1, "width must beÖositive");

169 i‡(
f
 + 
w
 > 
LUA_NBITS
)

170 
	`luaL_îr‹
(
L
, "tryingÅoáccessÇon-existent bits");

171 *
width
 = ()
w
;

172  ()
f
;

173 
	}
}

176 
	$b_exåa˘
 (
lua_Sèã
 *
L
) {

177 
w
;

178 
lua_Unsig√d
 
r
 = 
	`åim
(
	`luaL_checkunsig√d
(
L
, 1));

179 
f
 = 
	`fõld¨gs
(
L
, 2, &
w
);

180 
r
 = (∏>> 
f
Ë& 
	`mask
(
w
);

181 
	`lua_pushunsig√d
(
L
, 
r
);

183 
	}
}

186 
	$b_ª∂a˚
 (
lua_Sèã
 *
L
) {

187 
w
;

188 
lua_Unsig√d
 
r
 = 
	`åim
(
	`luaL_checkunsig√d
(
L
, 1));

189 
lua_Unsig√d
 
v
 = 
	`luaL_checkunsig√d
(
L
, 2);

190 
f
 = 
	`fõld¨gs
(
L
, 3, &
w
);

191 
m
 = 
	`mask
(
w
);

192 
v
 &
m
;

193 
r
 = (∏& ~(
m
 << 
f
)Ë| (
v
 << f);

194 
	`lua_pushunsig√d
(
L
, 
r
);

196 
	}
}

199 c⁄° 
luaL_Reg
 
	gbôlib
[] = {

200 {"¨shi·", 
b_¨shi·
},

201 {"b™d", 
b_™d
},

202 {"bnŸ", 
b_nŸ
},

203 {"b‹", 
b_‹
},

204 {"bx‹", 
b_x‹
},

205 {"bã°", 
b_ã°
},

206 {"exåa˘", 
b_exåa˘
},

207 {"ÃŸ©e", 
b_ÃŸ
},

208 {"lshi·", 
b_lshi·
},

209 {"ª∂a˚", 
b_ª∂a˚
},

210 {"ºŸ©e", 
b_ºŸ
},

211 {"rshi·", 
b_rshi·
},

212 {
NULL
, NULL}

217 
LUAMOD_API
 
	$lua›í_bô32
 (
lua_Sèã
 *
L
) {

218 
	`luaL_√wlib
(
L
, 
bôlib
);

220 
	}
}

226 
LUAMOD_API
 
	$lua›í_bô32
 (
lua_Sèã
 *
L
) {

227  
	`luaL_îr‹
(
L
, "library 'bit32' has been deprecated");

228 
	}
}

	@lib/archive/lua-5.3.0/src/lcode.c

7 
	#lcode_c


	)

8 
	#LUA_CORE


	)

10 
	~"Õªfix.h
"

13 
	~<m©h.h
>

14 
	~<°dlib.h
>

16 
	~"lua.h
"

18 
	~"lcode.h
"

19 
	~"ldebug.h
"

20 
	~"ldo.h
"

21 
	~"lgc.h
"

22 
	~"Œex.h
"

23 
	~"lmem.h
"

24 
	~"lobje˘.h
"

25 
	~"l›codes.h
"

26 
	~"Õ¨£r.h
"

27 
	~"l°rög.h
"

28 
	~"…abÀ.h
"

29 
	~"lvm.h
"

33 
	#MAXREGS
 250

	)

36 
	#hasjumps
(
e
Ë(”)->
t
 !”)->
f
)

	)

39 
	$t⁄umîÆ
(
expdesc
 *
e
, 
TVÆue
 *
v
) {

40 i‡(
e
->
t
 !
NO_JUMP
 ||É->
f
 != NO_JUMP)

42 
e
->
k
) {

43 
VKINT
:

44 i‡(
v
Ë
	`£tivÆue
(v, 
e
->
u
.
ivÆ
);

46 
VKFLT
:

47 i‡(
v
Ë
	`£tÊtvÆue
(v, 
e
->
u
.
nvÆ
);

51 
	}
}

54 
	$luaK_nû
 (
FuncSèã
 *
fs
, 
‰om
, 
n
) {

55 
In°ru˘i⁄
 *
¥evious
;

56 
l
 = 
‰om
 + 
n
 - 1;

57 i‡(
fs
->
pc
 > fs->
œ°èrgë
) {

58 
¥evious
 = &
fs
->
f
->
code
[fs->
pc
-1];

59 i‡(
	`GET_OPCODE
(*
¥evious
Ë=
OP_LOADNIL
) {

60 
p‰om
 = 
	`GETARG_A
(*
¥evious
);

61 
∂
 = 
p‰om
 + 
	`GETARG_B
(*
¥evious
);

62 i‡((
p‰om
 <
‰om
 && from <
∂
 + 1) ||

63 (
‰om
 <
p‰om
 &&Ö‰om <
l
 + 1)) {

64 i‡(
p‰om
 < 
‰om
) from =Öfrom;

65 i‡(
∂
 > 
l
)Ü =Öl;

66 
	`SETARG_A
(*
¥evious
, 
‰om
);

67 
	`SETARG_B
(*
¥evious
, 
l
 - 
‰om
);

72 
	`luaK_codeABC
(
fs
, 
OP_LOADNIL
, 
‰om
, 
n
 - 1, 0);

73 
	}
}

76 
	$luaK_jump
 (
FuncSèã
 *
fs
) {

77 
jpc
 = 
fs
->jpc;

78 
j
;

79 
fs
->
jpc
 = 
NO_JUMP
;

80 
j
 = 
	`luaK_codeAsBx
(
fs
, 
OP_JMP
, 0, 
NO_JUMP
);

81 
	`luaK_c⁄ˇt
(
fs
, &
j
, 
jpc
);

82  
j
;

83 
	}
}

86 
	$luaK_ªt
 (
FuncSèã
 *
fs
, 
fú°
, 
ƒë
) {

87 
	`luaK_codeABC
(
fs
, 
OP_RETURN
, 
fú°
, 
ƒë
+1, 0);

88 
	}
}

91 
	$c⁄djump
 (
FuncSèã
 *
fs
, 
OpCode
 
›
, 
A
, 
B
, 
C
) {

92 
	`luaK_codeABC
(
fs
, 
›
, 
A
, 
B
, 
C
);

93  
	`luaK_jump
(
fs
);

94 
	}
}

97 
	$fixjump
 (
FuncSèã
 *
fs
, 
pc
, 
de°
) {

98 
In°ru˘i⁄
 *
jmp
 = &
fs
->
f
->
code
[
pc
];

99 
off£t
 = 
de°
-(
pc
+1);

100 
	`lua_as£π
(
de°
 !
NO_JUMP
);

101 i‡(
	`abs
(
off£t
Ë> 
MAXARG_sBx
)

102 
	`luaX_sy¡axîr‹
(
fs
->
ls
, "control structureÅooÜong");

103 
	`SETARG_sBx
(*
jmp
, 
off£t
);

104 
	}
}

111 
	$luaK_gëœbñ
 (
FuncSèã
 *
fs
) {

112 
fs
->
œ°èrgë
 = fs->
pc
;

113  
fs
->
pc
;

114 
	}
}

117 
	$gëjump
 (
FuncSèã
 *
fs
, 
pc
) {

118 
off£t
 = 
	`GETARG_sBx
(
fs
->
f
->
code
[
pc
]);

119 i‡(
off£t
 =
NO_JUMP
)

120  
NO_JUMP
;

122  (
pc
+1)+
off£t
;

123 
	}
}

126 
In°ru˘i⁄
 *
	$gëjumpc⁄åﬁ
 (
FuncSèã
 *
fs
, 
pc
) {

127 
In°ru˘i⁄
 *
pi
 = &
fs
->
f
->
code
[
pc
];

128 i‡(
pc
 >1 && 
	`ã°TMode
(
	`GET_OPCODE
(*(
pi
-1))))

129  
pi
-1;

131  
pi
;

132 
	}
}

139 
	$√ed_vÆue
 (
FuncSèã
 *
fs
, 
li°
) {

140 ; 
li°
 !
NO_JUMP
;Üi° = 
	`gëjump
(
fs
,Üist)) {

141 
In°ru˘i⁄
 
i
 = *
	`gëjumpc⁄åﬁ
(
fs
, 
li°
);

142 i‡(
	`GET_OPCODE
(
i
Ë!
OP_TESTSET
)  1;

145 
	}
}

148 
	$∑tchã°ªg
 (
FuncSèã
 *
fs
, 
node
, 
ªg
) {

149 
In°ru˘i⁄
 *
i
 = 
	`gëjumpc⁄åﬁ
(
fs
, 
node
);

150 i‡(
	`GET_OPCODE
(*
i
Ë!
OP_TESTSET
)

152 i‡(
ªg
 !
NO_REG
 &&Ñeg !
	`GETARG_B
(*
i
))

153 
	`SETARG_A
(*
i
, 
ªg
);

155 *
i
 = 
	`CREATE_ABC
(
OP_TEST
, 
	`GETARG_B
(*i), 0, 
	`GETARG_C
(*i));

158 
	}
}

161 
	$ªmovevÆues
 (
FuncSèã
 *
fs
, 
li°
) {

162 ; 
li°
 !
NO_JUMP
;Üi° = 
	`gëjump
(
fs
,Üist))

163 
	`∑tchã°ªg
(
fs
, 
li°
, 
NO_REG
);

164 
	}
}

167 
	$∑tchli°aux
 (
FuncSèã
 *
fs
, 
li°
, 
vèrgë
, 
ªg
,

168 
dèrgë
) {

169 
li°
 !
NO_JUMP
) {

170 
√xt
 = 
	`gëjump
(
fs
, 
li°
);

171 i‡(
	`∑tchã°ªg
(
fs
, 
li°
, 
ªg
))

172 
	`fixjump
(
fs
, 
li°
, 
vèrgë
);

174 
	`fixjump
(
fs
, 
li°
, 
dèrgë
);

175 
li°
 = 
√xt
;

177 
	}
}

180 
	$disch¨gejpc
 (
FuncSèã
 *
fs
) {

181 
	`∑tchli°aux
(
fs
, fs->
jpc
, fs->
pc
, 
NO_REG
, fs->pc);

182 
fs
->
jpc
 = 
NO_JUMP
;

183 
	}
}

186 
	$luaK_∑tchli°
 (
FuncSèã
 *
fs
, 
li°
, 
èrgë
) {

187 i‡(
èrgë
 =
fs
->
pc
)

188 
	`luaK_∑tchtohîe
(
fs
, 
li°
);

190 
	`lua_as£π
(
èrgë
 < 
fs
->
pc
);

191 
	`∑tchli°aux
(
fs
, 
li°
, 
èrgë
, 
NO_REG
,Åarget);

193 
	}
}

196 
	$luaK_∑tch˛o£
 (
FuncSèã
 *
fs
, 
li°
, 
Àvñ
) {

197 
Àvñ
++;

198 
li°
 !
NO_JUMP
) {

199 
√xt
 = 
	`gëjump
(
fs
, 
li°
);

200 
	`lua_as£π
(
	`GET_OPCODE
(
fs
->
f
->
code
[
li°
]Ë=
OP_JMP
 &&

201 (
	`GETARG_A
(
fs
->
f
->
code
[
li°
]) == 0 ||

202 
	`GETARG_A
(
fs
->
f
->
code
[
li°
]Ë>
Àvñ
));

203 
	`SETARG_A
(
fs
->
f
->
code
[
li°
], 
Àvñ
);

204 
li°
 = 
√xt
;

206 
	}
}

209 
	$luaK_∑tchtohîe
 (
FuncSèã
 *
fs
, 
li°
) {

210 
	`luaK_gëœbñ
(
fs
);

211 
	`luaK_c⁄ˇt
(
fs
, &fs->
jpc
, 
li°
);

212 
	}
}

215 
	$luaK_c⁄ˇt
 (
FuncSèã
 *
fs
, *
l1
, 
l2
) {

216 i‡(
l2
 =
NO_JUMP
) ;

217 i‡(*
l1
 =
NO_JUMP
)

218 *
l1
 = 
l2
;

220 
li°
 = *
l1
;

221 
√xt
;

222 (
√xt
 = 
	`gëjump
(
fs
, 
li°
)Ë!
NO_JUMP
)

223 
li°
 = 
√xt
;

224 
	`fixjump
(
fs
, 
li°
, 
l2
);

226 
	}
}

229 
	$luaK_code
 (
FuncSèã
 *
fs
, 
In°ru˘i⁄
 
i
) {

230 
PrŸo
 *
f
 = 
fs
->f;

231 
	`disch¨gejpc
(
fs
);

233 
	`luaM_growve˘‹
(
fs
->
ls
->
L
, 
f
->
code
, fs->
pc
, f->
sizecode
, 
In°ru˘i⁄
,

234 
MAX_INT
, "opcodes");

235 
f
->
code
[
fs
->
pc
] = 
i
;

237 
	`luaM_growve˘‹
(
fs
->
ls
->
L
, 
f
->
löeöfo
, fs->
pc
, f->
sizñöeöfo
, ,

238 
MAX_INT
, "opcodes");

239 
f
->
löeöfo
[
fs
->
pc
] = fs->
ls
->
œ°löe
;

240  
fs
->
pc
++;

241 
	}
}

244 
	$luaK_codeABC
 (
FuncSèã
 *
fs
, 
OpCode
 
o
, 
a
, 
b
, 
c
) {

245 
	`lua_as£π
(
	`gëOpMode
(
o
Ë=
iABC
);

246 
	`lua_as£π
(
	`gëBMode
(
o
Ë!
OpArgN
 || 
b
 == 0);

247 
	`lua_as£π
(
	`gëCMode
(
o
Ë!
OpArgN
 || 
c
 == 0);

248 
	`lua_as£π
(
a
 <
MAXARG_A
 && 
b
 <
MAXARG_B
 && 
c
 <
MAXARG_C
);

249  
	`luaK_code
(
fs
, 
	`CREATE_ABC
(
o
, 
a
, 
b
, 
c
));

250 
	}
}

253 
	$luaK_codeABx
 (
FuncSèã
 *
fs
, 
OpCode
 
o
, 
a
, 
bc
) {

254 
	`lua_as£π
(
	`gëOpMode
(
o
Ë=
iABx
 || gëOpMode(oË=
iAsBx
);

255 
	`lua_as£π
(
	`gëCMode
(
o
Ë=
OpArgN
);

256 
	`lua_as£π
(
a
 <
MAXARG_A
 && 
bc
 <
MAXARG_Bx
);

257  
	`luaK_code
(
fs
, 
	`CREATE_ABx
(
o
, 
a
, 
bc
));

258 
	}
}

261 
	$codìxåØrg
 (
FuncSèã
 *
fs
, 
a
) {

262 
	`lua_as£π
(
a
 <
MAXARG_Ax
);

263  
	`luaK_code
(
fs
, 
	`CREATE_Ax
(
OP_EXTRAARG
, 
a
));

264 
	}
}

267 
	$luaK_codek
 (
FuncSèã
 *
fs
, 
ªg
, 
k
) {

268 i‡(
k
 <
MAXARG_Bx
)

269  
	`luaK_codeABx
(
fs
, 
OP_LOADK
, 
ªg
, 
k
);

271 
p
 = 
	`luaK_codeABx
(
fs
, 
OP_LOADKX
, 
ªg
, 0);

272 
	`codìxåØrg
(
fs
, 
k
);

273  
p
;

275 
	}
}

278 
	$luaK_check°ack
 (
FuncSèã
 *
fs
, 
n
) {

279 
√w°ack
 = 
fs
->
‰ìªg
 + 
n
;

280 i‡(
√w°ack
 > 
fs
->
f
->
max°acksize
) {

281 i‡(
√w°ack
 >
MAXREGS
)

282 
	`luaX_sy¡axîr‹
(
fs
->
ls
, "function orÉxpressionÅoo complex");

283 
fs
->
f
->
max°acksize
 = 
	`ˇ°_byã
(
√w°ack
);

285 
	}
}

288 
	$luaK_ª£rvîegs
 (
FuncSèã
 *
fs
, 
n
) {

289 
	`luaK_check°ack
(
fs
, 
n
);

290 
fs
->
‰ìªg
 +
n
;

291 
	}
}

294 
	$‰ìªg
 (
FuncSèã
 *
fs
, 
ªg
) {

295 i‡(!
	`ISK
(
ªg
Ë&&Ñeg >
fs
->
«˘v¨
) {

296 
fs
->
‰ìªg
--;

297 
	`lua_as£π
(
ªg
 =
fs
->
‰ìªg
);

299 
	}
}

302 
	$‰ìexp
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

303 i‡(
e
->
k
 =
VNONRELOC
)

304 
	`‰ìªg
(
fs
, 
e
->
u
.
öfo
);

305 
	}
}

312 
	$addk
 (
FuncSèã
 *
fs
, 
TVÆue
 *
key
, TVÆuê*
v
) {

313 
lua_Sèã
 *
L
 = 
fs
->
ls
->L;

314 
PrŸo
 *
f
 = 
fs
->f;

315 
TVÆue
 *
idx
 = 
	`luaH_£t
(
L
, 
fs
->
ls
->
h
, 
key
);

316 
k
, 
ﬁdsize
;

317 i‡(
	`âisöãgî
(
idx
)) {

318 
k
 = 
	`ˇ°_öt
(
	`ivÆue
(
idx
));

320 i‡(
k
 < 
fs
->
nk
 && 
	`ây≥
(&
f
->k[k]Ë=ây≥(
v
) &&

321 
	`luaV_øwequÆobj
(&
f
->
k
[k], 
v
))

322  
k
;

325 
ﬁdsize
 = 
f
->
sizek
;

326 
k
 = 
fs
->
nk
;

329 
	`£tivÆue
(
idx
, 
k
);

330 
	`luaM_growve˘‹
(
L
, 
f
->
k
, k, f->
sizek
, 
TVÆue
, 
MAXARG_Ax
, "constants");

331 
ﬁdsize
 < 
f
->
sizek
Ë
	`£äûvÆue
(&f->
k
[oldsize++]);

332 
	`£tobj
(
L
, &
f
->
k
[k], 
v
);

333 
fs
->
nk
++;

334 
	`luaC_b¨rõr
(
L
, 
f
, 
v
);

335  
k
;

336 
	}
}

339 
	$luaK_°rögK
 (
FuncSèã
 *
fs
, 
TSåög
 *
s
) {

340 
TVÆue
 
o
;

341 
	`£tsvÆue
(
fs
->
ls
->
L
, &
o
, 
s
);

342  
	`addk
(
fs
, &
o
, &o);

343 
	}
}

351 
	$luaK_ötK
 (
FuncSèã
 *
fs
, 
lua_I¡egî
 
n
) {

352 
TVÆue
 
k
, 
o
;

353 
	`£çvÆue
(&
k
, 
	`ˇ°
(*, ca°(
size_t
, 
n
)));

354 
	`£tivÆue
(&
o
, 
n
);

355  
	`addk
(
fs
, &
k
, &
o
);

356 
	}
}

359 
	$luaK_numbîK
 (
FuncSèã
 *
fs
, 
lua_Numbî
 
r
) {

360 
TVÆue
 
o
;

361 
	`£tÊtvÆue
(&
o
, 
r
);

362  
	`addk
(
fs
, &
o
, &o);

363 
	}
}

366 
	$boﬁK
 (
FuncSèã
 *
fs
, 
b
) {

367 
TVÆue
 
o
;

368 
	`£tbvÆue
(&
o
, 
b
);

369  
	`addk
(
fs
, &
o
, &o);

370 
	}
}

373 
	$nûK
 (
FuncSèã
 *
fs
) {

374 
TVÆue
 
k
, 
v
;

375 
	`£äûvÆue
(&
v
);

377 
	`£thvÆue
(
fs
->
ls
->
L
, &
k
, fs->ls->
h
);

378  
	`addk
(
fs
, &
k
, &
v
);

379 
	}
}

382 
	$luaK_£åëu∫s
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
, 
ƒesu…s
) {

383 i‡(
e
->
k
 =
VCALL
) {

384 
	`SETARG_C
(
	`gëcode
(
fs
, 
e
), 
ƒesu…s
+1);

386 i‡(
e
->
k
 =
VVARARG
) {

387 
	`SETARG_B
(
	`gëcode
(
fs
, 
e
), 
ƒesu…s
+1);

388 
	`SETARG_A
(
	`gëcode
(
fs
, 
e
), fs->
‰ìªg
);

389 
	`luaK_ª£rvîegs
(
fs
, 1);

391 
	}
}

394 
	$luaK_£t⁄îë
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

395 i‡(
e
->
k
 =
VCALL
) {

396 
e
->
k
 = 
VNONRELOC
;

397 
e
->
u
.
öfo
 = 
	`GETARG_A
(
	`gëcode
(
fs
,É));

399 i‡(
e
->
k
 =
VVARARG
) {

400 
	`SETARG_B
(
	`gëcode
(
fs
, 
e
), 2);

401 
e
->
k
 = 
VRELOCABLE
;

403 
	}
}

406 
	$luaK_disch¨gev¨s
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

407 
e
->
k
) {

408 
VLOCAL
: {

409 
e
->
k
 = 
VNONRELOC
;

412 
VUPVAL
: {

413 
e
->
u
.
öfo
 = 
	`luaK_codeABC
(
fs
, 
OP_GETUPVAL
, 0,É->u.info, 0);

414 
e
->
k
 = 
VRELOCABLE
;

417 
VINDEXED
: {

418 
OpCode
 
›
 = 
OP_GETTABUP
;

419 
	`‰ìªg
(
fs
, 
e
->
u
.
öd
.
idx
);

420 i‡(
e
->
u
.
öd
.
vt
 =
VLOCAL
) {

421 
	`‰ìªg
(
fs
, 
e
->
u
.
öd
.
t
);

422 
›
 = 
OP_GETTABLE
;

424 
e
->
u
.
öfo
 = 
	`luaK_codeABC
(
fs
, 
›
, 0,É->u.
öd
.
t
,É->u.öd.
idx
);

425 
e
->
k
 = 
VRELOCABLE
;

428 
VVARARG
:

429 
VCALL
: {

430 
	`luaK_£t⁄îë
(
fs
, 
e
);

435 
	}
}

438 
	$code_œbñ
 (
FuncSèã
 *
fs
, 
A
, 
b
, 
jump
) {

439 
	`luaK_gëœbñ
(
fs
);

440  
	`luaK_codeABC
(
fs
, 
OP_LOADBOOL
, 
A
, 
b
, 
jump
);

441 
	}
}

444 
	$disch¨ge2ªg
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
, 
ªg
) {

445 
	`luaK_disch¨gev¨s
(
fs
, 
e
);

446 
e
->
k
) {

447 
VNIL
: {

448 
	`luaK_nû
(
fs
, 
ªg
, 1);

451 
VFALSE
: 
VTRUE
: {

452 
	`luaK_codeABC
(
fs
, 
OP_LOADBOOL
, 
ªg
, 
e
->
k
 =
VTRUE
, 0);

455 
VK
: {

456 
	`luaK_codek
(
fs
, 
ªg
, 
e
->
u
.
öfo
);

459 
VKFLT
: {

460 
	`luaK_codek
(
fs
, 
ªg
, 
	`luaK_numbîK
(fs, 
e
->
u
.
nvÆ
));

463 
VKINT
: {

464 
	`luaK_codek
(
fs
, 
ªg
, 
	`luaK_ötK
(fs, 
e
->
u
.
ivÆ
));

467 
VRELOCABLE
: {

468 
In°ru˘i⁄
 *
pc
 = &
	`gëcode
(
fs
, 
e
);

469 
	`SETARG_A
(*
pc
, 
ªg
);

472 
VNONRELOC
: {

473 i‡(
ªg
 !
e
->
u
.
öfo
)

474 
	`luaK_codeABC
(
fs
, 
OP_MOVE
, 
ªg
, 
e
->
u
.
öfo
, 0);

478 
	`lua_as£π
(
e
->
k
 =
VVOID
 ||É->k =
VJMP
);

482 
e
->
u
.
öfo
 = 
ªg
;

483 
e
->
k
 = 
VNONRELOC
;

484 
	}
}

487 
	$disch¨ge2™yªg
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

488 i‡(
e
->
k
 !
VNONRELOC
) {

489 
	`luaK_ª£rvîegs
(
fs
, 1);

490 
	`disch¨ge2ªg
(
fs
, 
e
, fs->
‰ìªg
-1);

492 
	}
}

495 
	$exp2ªg
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
, 
ªg
) {

496 
	`disch¨ge2ªg
(
fs
, 
e
, 
ªg
);

497 i‡(
e
->
k
 =
VJMP
)

498 
	`luaK_c⁄ˇt
(
fs
, &
e
->
t
,É->
u
.
öfo
);

499 i‡(
	`hasjumps
(
e
)) {

500 
föÆ
;

501 
p_f
 = 
NO_JUMP
;

502 
p_t
 = 
NO_JUMP
;

503 i‡(
	`√ed_vÆue
(
fs
, 
e
->
t
Ë||Çìd_vÆue(fs,É->
f
)) {

504 
fj
 = (
e
->
k
 =
VJMP
Ë? 
NO_JUMP
 : 
	`luaK_jump
(
fs
);

505 
p_f
 = 
	`code_œbñ
(
fs
, 
ªg
, 0, 1);

506 
p_t
 = 
	`code_œbñ
(
fs
, 
ªg
, 1, 0);

507 
	`luaK_∑tchtohîe
(
fs
, 
fj
);

509 
föÆ
 = 
	`luaK_gëœbñ
(
fs
);

510 
	`∑tchli°aux
(
fs
, 
e
->
f
, 
föÆ
, 
ªg
, 
p_f
);

511 
	`∑tchli°aux
(
fs
, 
e
->
t
, 
föÆ
, 
ªg
, 
p_t
);

513 
e
->
f
 =É->
t
 = 
NO_JUMP
;

514 
e
->
u
.
öfo
 = 
ªg
;

515 
e
->
k
 = 
VNONRELOC
;

516 
	}
}

519 
	$luaK_exp2√xåeg
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

520 
	`luaK_disch¨gev¨s
(
fs
, 
e
);

521 
	`‰ìexp
(
fs
, 
e
);

522 
	`luaK_ª£rvîegs
(
fs
, 1);

523 
	`exp2ªg
(
fs
, 
e
, fs->
‰ìªg
 - 1);

524 
	}
}

527 
	$luaK_exp2™yªg
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

528 
	`luaK_disch¨gev¨s
(
fs
, 
e
);

529 i‡(
e
->
k
 =
VNONRELOC
) {

530 i‡(!
	`hasjumps
(
e
)ËÉ->
u
.
öfo
;

531 i‡(
e
->
u
.
öfo
 >
fs
->
«˘v¨
) {

532 
	`exp2ªg
(
fs
, 
e
,É->
u
.
öfo
);

533  
e
->
u
.
öfo
;

536 
	`luaK_exp2√xåeg
(
fs
, 
e
);

537  
e
->
u
.
öfo
;

538 
	}
}

541 
	$luaK_exp2™yªgup
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

542 i‡(
e
->
k
 !
VUPVAL
 || 
	`hasjumps
(e))

543 
	`luaK_exp2™yªg
(
fs
, 
e
);

544 
	}
}

547 
	$luaK_exp2vÆ
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

548 i‡(
	`hasjumps
(
e
))

549 
	`luaK_exp2™yªg
(
fs
, 
e
);

551 
	`luaK_disch¨gev¨s
(
fs
, 
e
);

552 
	}
}

555 
	$luaK_exp2RK
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

556 
	`luaK_exp2vÆ
(
fs
, 
e
);

557 
e
->
k
) {

558 
VTRUE
:

559 
VFALSE
:

560 
VNIL
: {

561 i‡(
fs
->
nk
 <
MAXINDEXRK
) {

562 
e
->
u
.
öfo
 = (e->
k
 =
VNIL
Ë? 
	`nûK
(
fs
Ë: 
	`boﬁK
(fs, (e->k =
VTRUE
));

563 
e
->
k
 = 
VK
;

564  
	`RKASK
(
e
->
u
.
öfo
);

568 
VKINT
: {

569 
e
->
u
.
öfo
 = 
	`luaK_ötK
(
fs
,É->u.
ivÆ
);

570 
e
->
k
 = 
VK
;

571 
vk
;

573 
VKFLT
: {

574 
e
->
u
.
öfo
 = 
	`luaK_numbîK
(
fs
,É->u.
nvÆ
);

575 
e
->
k
 = 
VK
;

578 
VK
: {

579 
vk
:

580 i‡(
e
->
u
.
öfo
 <
MAXINDEXRK
)

581  
	`RKASK
(
e
->
u
.
öfo
);

587  
	`luaK_exp2™yªg
(
fs
, 
e
);

588 
	}
}

591 
	$luaK_°‹ev¨
 (
FuncSèã
 *
fs
, 
expdesc
 *
v¨
,Éxpdes¯*
ex
) {

592 
v¨
->
k
) {

593 
VLOCAL
: {

594 
	`‰ìexp
(
fs
, 
ex
);

595 
	`exp2ªg
(
fs
, 
ex
, 
v¨
->
u
.
öfo
);

598 
VUPVAL
: {

599 
e
 = 
	`luaK_exp2™yªg
(
fs
, 
ex
);

600 
	`luaK_codeABC
(
fs
, 
OP_SETUPVAL
, 
e
, 
v¨
->
u
.
öfo
, 0);

603 
VINDEXED
: {

604 
OpCode
 
›
 = (
v¨
->
u
.
öd
.
vt
 =
VLOCAL
Ë? 
OP_SETTABLE
 : 
OP_SETTABUP
;

605 
e
 = 
	`luaK_exp2RK
(
fs
, 
ex
);

606 
	`luaK_codeABC
(
fs
, 
›
, 
v¨
->
u
.
öd
.
t
, v¨->u.öd.
idx
, 
e
);

610 
	`lua_as£π
(0);

614 
	`‰ìexp
(
fs
, 
ex
);

615 
	}
}

618 
	$luaK_£lf
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
,Éxpdes¯*
key
) {

619 
îeg
;

620 
	`luaK_exp2™yªg
(
fs
, 
e
);

621 
îeg
 = 
e
->
u
.
öfo
;

622 
	`‰ìexp
(
fs
, 
e
);

623 
e
->
u
.
öfo
 = 
fs
->
‰ìªg
;

624 
e
->
k
 = 
VNONRELOC
;

625 
	`luaK_ª£rvîegs
(
fs
, 2);

626 
	`luaK_codeABC
(
fs
, 
OP_SELF
, 
e
->
u
.
öfo
, 
îeg
, 
	`luaK_exp2RK
(fs, 
key
));

627 
	`‰ìexp
(
fs
, 
key
);

628 
	}
}

631 
	$övîtjump
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

632 
In°ru˘i⁄
 *
pc
 = 
	`gëjumpc⁄åﬁ
(
fs
, 
e
->
u
.
öfo
);

633 
	`lua_as£π
(
	`ã°TMode
(
	`GET_OPCODE
(*
pc
)Ë&& GET_OPCODE(*pcË!
OP_TESTSET
 &&

634 
	`GET_OPCODE
(*
pc
Ë!
OP_TEST
);

635 
	`SETARG_A
(*
pc
, !(
	`GETARG_A
(*pc)));

636 
	}
}

639 
	$jump⁄c⁄d
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
, 
c⁄d
) {

640 i‡(
e
->
k
 =
VRELOCABLE
) {

641 
In°ru˘i⁄
 
õ
 = 
	`gëcode
(
fs
, 
e
);

642 i‡(
	`GET_OPCODE
(
õ
Ë=
OP_NOT
) {

643 
fs
->
pc
--;

644  
	`c⁄djump
(
fs
, 
OP_TEST
, 
	`GETARG_B
(
õ
), 0, !
c⁄d
);

648 
	`disch¨ge2™yªg
(
fs
, 
e
);

649 
	`‰ìexp
(
fs
, 
e
);

650  
	`c⁄djump
(
fs
, 
OP_TESTSET
, 
NO_REG
, 
e
->
u
.
öfo
, 
c⁄d
);

651 
	}
}

654 
	$luaK_goi·rue
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

655 
pc
;

656 
	`luaK_disch¨gev¨s
(
fs
, 
e
);

657 
e
->
k
) {

658 
VJMP
: {

659 
	`övîtjump
(
fs
, 
e
);

660 
pc
 = 
e
->
u
.
öfo
;

663 
VK
: 
VKFLT
: 
VKINT
: 
VTRUE
: {

664 
pc
 = 
NO_JUMP
;

668 
pc
 = 
	`jump⁄c⁄d
(
fs
, 
e
, 0);

672 
	`luaK_c⁄ˇt
(
fs
, &
e
->
f
, 
pc
);

673 
	`luaK_∑tchtohîe
(
fs
, 
e
->
t
);

674 
e
->
t
 = 
NO_JUMP
;

675 
	}
}

678 
	$luaK_goifÁl£
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

679 
pc
;

680 
	`luaK_disch¨gev¨s
(
fs
, 
e
);

681 
e
->
k
) {

682 
VJMP
: {

683 
pc
 = 
e
->
u
.
öfo
;

686 
VNIL
: 
VFALSE
: {

687 
pc
 = 
NO_JUMP
;

691 
pc
 = 
	`jump⁄c⁄d
(
fs
, 
e
, 1);

695 
	`luaK_c⁄ˇt
(
fs
, &
e
->
t
, 
pc
);

696 
	`luaK_∑tchtohîe
(
fs
, 
e
->
f
);

697 
e
->
f
 = 
NO_JUMP
;

698 
	}
}

701 
	$codíŸ
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

702 
	`luaK_disch¨gev¨s
(
fs
, 
e
);

703 
e
->
k
) {

704 
VNIL
: 
VFALSE
: {

705 
e
->
k
 = 
VTRUE
;

708 
VK
: 
VKFLT
: 
VKINT
: 
VTRUE
: {

709 
e
->
k
 = 
VFALSE
;

712 
VJMP
: {

713 
	`övîtjump
(
fs
, 
e
);

716 
VRELOCABLE
:

717 
VNONRELOC
: {

718 
	`disch¨ge2™yªg
(
fs
, 
e
);

719 
	`‰ìexp
(
fs
, 
e
);

720 
e
->
u
.
öfo
 = 
	`luaK_codeABC
(
fs
, 
OP_NOT
, 0,É->u.info, 0);

721 
e
->
k
 = 
VRELOCABLE
;

725 
	`lua_as£π
(0);

730 { 
ãmp
 = 
e
->
f
;É->‡e->
t
;É->t =Åemp; }

731 
	`ªmovevÆues
(
fs
, 
e
->
f
);

732 
	`ªmovevÆues
(
fs
, 
e
->
t
);

733 
	}
}

736 
	$luaK_ödexed
 (
FuncSèã
 *
fs
, 
expdesc
 *
t
,Éxpdes¯*
k
) {

737 
	`lua_as£π
(!
	`hasjumps
(
t
));

738 
t
->
u
.
öd
.àt->u.
öfo
;

739 
t
->
u
.
öd
.
idx
 = 
	`luaK_exp2RK
(
fs
, 
k
);

740 
t
->
u
.
öd
.
vt
 = (t->
k
 =
VUPVAL
) ? VUPVAL

741 : 
	`check_exp
(
	`vkisöªg
(
t
->
k
), 
VLOCAL
);

742 
t
->
k
 = 
VINDEXED
;

743 
	}
}

749 
	$vÆid›
 (
›
, 
TVÆue
 *
v1
, TVÆuê*
v2
) {

750 
›
) {

751 
LUA_OPBAND
: 
LUA_OPBOR
: 
LUA_OPBXOR
:

752 
LUA_OPSHL
: 
LUA_OPSHR
: 
LUA_OPBNOT
: {

753 
lua_I¡egî
 
i
;

754  (
	`toöãgî
(
v1
, &
i
Ë&&Åoöãgî(
v2
, &i));

756 
LUA_OPDIV
: 
LUA_OPIDIV
: 
LUA_OPMOD
:

757  (
	`nvÆue
(
v2
) != 0);

760 
	}
}

766 
	$c⁄°fﬁdög
 (
FuncSèã
 *
fs
, 
›
, 
expdesc
 *
e1
,Éxpdes¯*
e2
) {

767 
TVÆue
 
v1
, 
v2
, 
ªs
;

768 i‡(!
	`t⁄umîÆ
(
e1
, &
v1
Ë|| !t⁄umîÆ(
e2
, &
v2
Ë|| !
	`vÆid›
(
›
, &v1, &v2))

770 
	`luaO_¨ôh
(
fs
->
ls
->
L
, 
›
, &
v1
, &
v2
, &
ªs
);

771 i‡(
	`âisöãgî
(&
ªs
)) {

772 
e1
->
k
 = 
VKINT
;

773 
e1
->
u
.
ivÆ
 = 
	`ivÆue
(&
ªs
);

776 
lua_Numbî
 
n
 = 
	`ÊtvÆue
(&
ªs
);

777 i‡(
	`luai_numi¢™
(
n
) ||Ç == 0)

779 
e1
->
k
 = 
VKFLT
;

780 
e1
->
u
.
nvÆ
 = 
n
;

783 
	}
}

793 
	$codìxpvÆ
 (
FuncSèã
 *
fs
, 
OpCode
 
›
,

794 
expdesc
 *
e1
,Éxpdes¯*
e2
, 
löe
) {

795 
	`lua_as£π
(
›
 >
OP_ADD
);

796 i‡(
›
 <
OP_BNOT
 && 
	`c⁄°fﬁdög
(
fs
, o∞- 
OP_ADD
 + 
LUA_OPADD
, 
e1
, 
e2
))

799 
o1
, 
o2
;

801 i‡(
›
 =
OP_UNM
 || o∞=
OP_BNOT
 || o∞=
OP_LEN
) {

802 
o2
 = 0;

803 
o1
 = 
	`luaK_exp2™yªg
(
fs
, 
e1
);

806 
o2
 = 
	`luaK_exp2RK
(
fs
, 
e2
);

807 
o1
 = 
	`luaK_exp2RK
(
fs
, 
e1
);

809 i‡(
o1
 > 
o2
) {

810 
	`‰ìexp
(
fs
, 
e1
);

811 
	`‰ìexp
(
fs
, 
e2
);

814 
	`‰ìexp
(
fs
, 
e2
);

815 
	`‰ìexp
(
fs
, 
e1
);

817 
e1
->
u
.
öfo
 = 
	`luaK_codeABC
(
fs
, 
›
, 0, 
o1
, 
o2
);

818 
e1
->
k
 = 
VRELOCABLE
;

819 
	`luaK_fixlöe
(
fs
, 
löe
);

821 
	}
}

824 
	$codecomp
 (
FuncSèã
 *
fs
, 
OpCode
 
›
, 
c⁄d
, 
expdesc
 *
e1
,

825 
expdesc
 *
e2
) {

826 
o1
 = 
	`luaK_exp2RK
(
fs
, 
e1
);

827 
o2
 = 
	`luaK_exp2RK
(
fs
, 
e2
);

828 
	`‰ìexp
(
fs
, 
e2
);

829 
	`‰ìexp
(
fs
, 
e1
);

830 i‡(
c⁄d
 =0 && 
›
 !
OP_EQ
) {

831 
ãmp
;

832 
ãmp
 = 
o1
; o1 = 
o2
; o2 =Åemp;

833 
c⁄d
 = 1;

835 
e1
->
u
.
öfo
 = 
	`c⁄djump
(
fs
, 
›
, 
c⁄d
, 
o1
, 
o2
);

836 
e1
->
k
 = 
VJMP
;

837 
	}
}

840 
	$luaK_¥efix
 (
FuncSèã
 *
fs
, 
UnO¥
 
›
, 
expdesc
 *
e
, 
löe
) {

841 
expdesc
 
e2
;

842 
e2
.
t
 =É2.
f
 = 
NO_JUMP
;É2.
k
 = 
VKINT
;É2.
u
.
ivÆ
 = 0;

843 
›
) {

844 
OPR_MINUS
: 
OPR_BNOT
: 
OPR_LEN
: {

845 
	`codìxpvÆ
(
fs
, 
	`ˇ°
(
OpCode
, (
›
 - 
OPR_MINUS
Ë+ 
OP_UNM
), 
e
, &
e2
, 
löe
);

848 
OPR_NOT
: 
	`codíŸ
(
fs
, 
e
); ;

849 : 
	`lua_as£π
(0);

851 
	}
}

854 
	$luaK_öfix
 (
FuncSèã
 *
fs
, 
BöO¥
 
›
, 
expdesc
 *
v
) {

855 
›
) {

856 
OPR_AND
: {

857 
	`luaK_goi·rue
(
fs
, 
v
);

860 
OPR_OR
: {

861 
	`luaK_goifÁl£
(
fs
, 
v
);

864 
OPR_CONCAT
: {

865 
	`luaK_exp2√xåeg
(
fs
, 
v
);

868 
OPR_ADD
: 
OPR_SUB
:

869 
OPR_MUL
: 
OPR_DIV
: 
OPR_IDIV
:

870 
OPR_MOD
: 
OPR_POW
:

871 
OPR_BAND
: 
OPR_BOR
: 
OPR_BXOR
:

872 
OPR_SHL
: 
OPR_SHR
: {

873 i‡(!
	`t⁄umîÆ
(
v
, 
NULL
)Ë
	`luaK_exp2RK
(
fs
, v);

877 
	`luaK_exp2RK
(
fs
, 
v
);

881 
	}
}

884 
	$luaK_posfix
 (
FuncSèã
 *
fs
, 
BöO¥
 
›
,

885 
expdesc
 *
e1
,Éxpdes¯*
e2
, 
löe
) {

886 
›
) {

887 
OPR_AND
: {

888 
	`lua_as£π
(
e1
->
t
 =
NO_JUMP
);

889 
	`luaK_disch¨gev¨s
(
fs
, 
e2
);

890 
	`luaK_c⁄ˇt
(
fs
, &
e2
->
f
, 
e1
->f);

891 *
e1
 = *
e2
;

894 
OPR_OR
: {

895 
	`lua_as£π
(
e1
->
f
 =
NO_JUMP
);

896 
	`luaK_disch¨gev¨s
(
fs
, 
e2
);

897 
	`luaK_c⁄ˇt
(
fs
, &
e2
->
t
, 
e1
->t);

898 *
e1
 = *
e2
;

901 
OPR_CONCAT
: {

902 
	`luaK_exp2vÆ
(
fs
, 
e2
);

903 i‡(
e2
->
k
 =
VRELOCABLE
 && 
	`GET_OPCODE
(
	`gëcode
(
fs
,É2)Ë=
OP_CONCAT
) {

904 
	`lua_as£π
(
e1
->
u
.
öfo
 =
	`GETARG_B
(
	`gëcode
(
fs
, 
e2
))-1);

905 
	`‰ìexp
(
fs
, 
e1
);

906 
	`SETARG_B
(
	`gëcode
(
fs
, 
e2
), 
e1
->
u
.
öfo
);

907 
e1
->
k
 = 
VRELOCABLE
;É1->
u
.
öfo
 = 
e2
->u.info;

910 
	`luaK_exp2√xåeg
(
fs
, 
e2
);

911 
	`codìxpvÆ
(
fs
, 
OP_CONCAT
, 
e1
, 
e2
, 
löe
);

915 
OPR_ADD
: 
OPR_SUB
: 
OPR_MUL
: 
OPR_DIV
:

916 
OPR_IDIV
: 
OPR_MOD
: 
OPR_POW
:

917 
OPR_BAND
: 
OPR_BOR
: 
OPR_BXOR
:

918 
OPR_SHL
: 
OPR_SHR
: {

919 
	`codìxpvÆ
(
fs
, 
	`ˇ°
(
OpCode
, (
›
 - 
OPR_ADD
Ë+ 
OP_ADD
), 
e1
, 
e2
, 
löe
);

922 
OPR_EQ
: 
OPR_LT
: 
OPR_LE
: {

923 
	`codecomp
(
fs
, 
	`ˇ°
(
OpCode
, 
›
 - 
OPR_EQ
 + 
OP_EQ
), 1, 
e1
, 
e2
);

926 
OPR_NE
: 
OPR_GT
: 
OPR_GE
: {

927 
	`codecomp
(
fs
, 
	`ˇ°
(
OpCode
, 
›
 - 
OPR_NE
 + 
OP_EQ
), 0, 
e1
, 
e2
);

930 : 
	`lua_as£π
(0);

932 
	}
}

935 
	$luaK_fixlöe
 (
FuncSèã
 *
fs
, 
löe
) {

936 
fs
->
f
->
löeöfo
[fs->
pc
 - 1] = 
löe
;

937 
	}
}

940 
	$luaK_£éi°
 (
FuncSèã
 *
fs
, 
ba£
, 
√Àms
, 
to°‹e
) {

941 
c
 = (
√Àms
 - 1)/
LFIELDS_PER_FLUSH
 + 1;

942 
b
 = (
to°‹e
 =
LUA_MULTRET
) ? 0 :Åostore;

943 
	`lua_as£π
(
to°‹e
 != 0);

944 i‡(
c
 <
MAXARG_C
)

945 
	`luaK_codeABC
(
fs
, 
OP_SETLIST
, 
ba£
, 
b
, 
c
);

946 i‡(
c
 <
MAXARG_Ax
) {

947 
	`luaK_codeABC
(
fs
, 
OP_SETLIST
, 
ba£
, 
b
, 0);

948 
	`codìxåØrg
(
fs
, 
c
);

951 
	`luaX_sy¡axîr‹
(
fs
->
ls
, "constructorÅooÜong");

952 
fs
->
‰ìªg
 = 
ba£
 + 1;

953 
	}
}

	@lib/archive/lua-5.3.0/src/lcode.h

7 #i‚de‡
lcode_h


8 
	#lcode_h


	)

10 
	~"Œex.h
"

11 
	~"lobje˘.h
"

12 
	~"l›codes.h
"

13 
	~"Õ¨£r.h
"

20 
	#NO_JUMP
 (-1)

	)

26 
	eBöO¥
 {

27 
	mOPR_ADD
, 
	mOPR_SUB
, 
	mOPR_MUL
, 
	mOPR_MOD
, 
	mOPR_POW
,

28 
	mOPR_DIV
,

29 
	mOPR_IDIV
,

30 
	mOPR_BAND
, 
	mOPR_BOR
, 
	mOPR_BXOR
,

31 
	mOPR_SHL
, 
	mOPR_SHR
,

32 
	mOPR_CONCAT
,

33 
	mOPR_EQ
, 
	mOPR_LT
, 
	mOPR_LE
,

34 
	mOPR_NE
, 
	mOPR_GT
, 
	mOPR_GE
,

35 
	mOPR_AND
, 
	mOPR_OR
,

36 
	mOPR_NOBINOPR


37 } 
	tBöO¥
;

40 
	eUnO¥
 { 
	mOPR_MINUS
, 
	mOPR_BNOT
, 
	mOPR_NOT
, 
	mOPR_LEN
, 
	mOPR_NOUNOPR
 } 
	tUnO¥
;

43 
	#gëcode
(
fs
,
e
Ë((fs)->
f
->
code
[”)->
u
.
öfo
])

	)

45 
	#luaK_codeAsBx
(
fs
,
o
,
A
,
sBx
Ë
	`luaK_codeABx
(fs,o,A,(sBx)+
MAXARG_sBx
)

	)

47 
	#luaK_£tmu…ªt
(
fs
,
e
Ë
	`luaK_£åëu∫s
(fs,É, 
LUA_MULTRET
)

	)

49 
	#luaK_jum±o
(
fs
,
t
Ë
	`luaK_∑tchli°
(fs, 
	`luaK_jump
(fs),Å)

	)

51 
LUAI_FUNC
 
luaK_codeABx
 (
FuncSèã
 *
fs
, 
OpCode
 
o
, 
A
, 
Bx
);

52 
LUAI_FUNC
 
luaK_codeABC
 (
FuncSèã
 *
fs
, 
OpCode
 
o
, 
A
, 
B
, 
C
);

53 
LUAI_FUNC
 
luaK_codek
 (
FuncSèã
 *
fs
, 
ªg
, 
k
);

54 
LUAI_FUNC
 
luaK_fixlöe
 (
FuncSèã
 *
fs
, 
löe
);

55 
LUAI_FUNC
 
luaK_nû
 (
FuncSèã
 *
fs
, 
‰om
, 
n
);

56 
LUAI_FUNC
 
luaK_ª£rvîegs
 (
FuncSèã
 *
fs
, 
n
);

57 
LUAI_FUNC
 
luaK_check°ack
 (
FuncSèã
 *
fs
, 
n
);

58 
LUAI_FUNC
 
luaK_°rögK
 (
FuncSèã
 *
fs
, 
TSåög
 *
s
);

59 
LUAI_FUNC
 
luaK_ötK
 (
FuncSèã
 *
fs
, 
lua_I¡egî
 
n
);

60 
LUAI_FUNC
 
luaK_disch¨gev¨s
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
);

61 
LUAI_FUNC
 
luaK_exp2™yªg
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
);

62 
LUAI_FUNC
 
luaK_exp2™yªgup
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
);

63 
LUAI_FUNC
 
luaK_exp2√xåeg
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
);

64 
LUAI_FUNC
 
luaK_exp2vÆ
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
);

65 
LUAI_FUNC
 
luaK_exp2RK
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
);

66 
LUAI_FUNC
 
luaK_£lf
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
,Éxpdes¯*
key
);

67 
LUAI_FUNC
 
luaK_ödexed
 (
FuncSèã
 *
fs
, 
expdesc
 *
t
,Éxpdes¯*
k
);

68 
LUAI_FUNC
 
luaK_goi·rue
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
);

69 
LUAI_FUNC
 
luaK_goifÁl£
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
);

70 
LUAI_FUNC
 
luaK_°‹ev¨
 (
FuncSèã
 *
fs
, 
expdesc
 *
v¨
,Éxpdes¯*
e
);

71 
LUAI_FUNC
 
luaK_£åëu∫s
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
, 
ƒesu…s
);

72 
LUAI_FUNC
 
luaK_£t⁄îë
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
);

73 
LUAI_FUNC
 
luaK_jump
 (
FuncSèã
 *
fs
);

74 
LUAI_FUNC
 
luaK_ªt
 (
FuncSèã
 *
fs
, 
fú°
, 
ƒë
);

75 
LUAI_FUNC
 
luaK_∑tchli°
 (
FuncSèã
 *
fs
, 
li°
, 
èrgë
);

76 
LUAI_FUNC
 
luaK_∑tchtohîe
 (
FuncSèã
 *
fs
, 
li°
);

77 
LUAI_FUNC
 
luaK_∑tch˛o£
 (
FuncSèã
 *
fs
, 
li°
, 
Àvñ
);

78 
LUAI_FUNC
 
luaK_c⁄ˇt
 (
FuncSèã
 *
fs
, *
l1
, 
l2
);

79 
LUAI_FUNC
 
luaK_gëœbñ
 (
FuncSèã
 *
fs
);

80 
LUAI_FUNC
 
luaK_¥efix
 (
FuncSèã
 *
fs
, 
UnO¥
 
›
, 
expdesc
 *
v
, 
löe
);

81 
LUAI_FUNC
 
luaK_öfix
 (
FuncSèã
 *
fs
, 
BöO¥
 
›
, 
expdesc
 *
v
);

82 
LUAI_FUNC
 
luaK_posfix
 (
FuncSèã
 *
fs
, 
BöO¥
 
›
, 
expdesc
 *
v1
,

83 
expdesc
 *
v2
, 
löe
);

84 
LUAI_FUNC
 
luaK_£éi°
 (
FuncSèã
 *
fs
, 
ba£
, 
√Àms
, 
to°‹e
);

	@lib/archive/lua-5.3.0/src/lcorolib.c

7 
	#lc‹ﬁib_c


	)

8 
	#LUA_LIB


	)

10 
	~"Õªfix.h
"

13 
	~<°dlib.h
>

15 
	~"lua.h
"

17 
	~"œuxlib.h
"

18 
	~"luÆib.h
"

21 
lua_Sèã
 *
	$gëco
 (
lua_Sèã
 *
L
) {

22 
lua_Sèã
 *
co
 = 
	`lua_tŸhªad
(
L
, 1);

23 
	`luaL_¨gcheck
(
L
, 
co
, 1, "threadÉxpected");

24  
co
;

25 
	}
}

28 
	$auxªsume
 (
lua_Sèã
 *
L
,Üua_Sèã *
co
, 
«rg
) {

29 
°©us
;

30 i‡(!
	`lua_check°ack
(
co
, 
«rg
)) {

31 
	`lua_pushlôîÆ
(
L
, "too manyárgumentsÅoÑesume");

34 i‡(
	`lua_°©us
(
co
Ë=
LUA_OK
 && 
	`lua_gët›
(co) == 0) {

35 
	`lua_pushlôîÆ
(
L
, "cannotÑesume dead coroutine");

38 
	`lua_xmove
(
L
, 
co
, 
«rg
);

39 
°©us
 = 
	`lua_ªsume
(
co
, 
L
, 
«rg
);

40 i‡(
°©us
 =
LUA_OK
 || sètu†=
LUA_YIELD
) {

41 
ƒes
 = 
	`lua_gët›
(
co
);

42 i‡(!
	`lua_check°ack
(
L
, 
ƒes
 + 1)) {

43 
	`lua_p›
(
co
, 
ƒes
);

44 
	`lua_pushlôîÆ
(
L
, "too manyÑesultsÅoÑesume");

47 
	`lua_xmove
(
co
, 
L
, 
ƒes
);

48  
ƒes
;

51 
	`lua_xmove
(
co
, 
L
, 1);

54 
	}
}

57 
	$luaB_c‹esume
 (
lua_Sèã
 *
L
) {

58 
lua_Sèã
 *
co
 = 
	`gëco
(
L
);

59 
r
;

60 
r
 = 
	`auxªsume
(
L
, 
co
, 
	`lua_gët›
(L) - 1);

61 i‡(
r
 < 0) {

62 
	`lua_pushboﬁón
(
L
, 0);

63 
	`lua_ö£π
(
L
, -2);

67 
	`lua_pushboﬁón
(
L
, 1);

68 
	`lua_ö£π
(
L
, -(
r
 + 1));

69  
r
 + 1;

71 
	}
}

74 
	$luaB_auxwøp
 (
lua_Sèã
 *
L
) {

75 
lua_Sèã
 *
co
 = 
	`lua_tŸhªad
(
L
, 
	`lua_upvÆueödex
(1));

76 
r
 = 
	`auxªsume
(
L
, 
co
, 
	`lua_gët›
(L));

77 i‡(
r
 < 0) {

78 i‡(
	`lua_is°rög
(
L
, -1)) {

79 
	`luaL_whîe
(
L
, 1);

80 
	`lua_ö£π
(
L
, -2);

81 
	`lua_c⁄ˇt
(
L
, 2);

83  
	`lua_îr‹
(
L
);

85  
r
;

86 
	}
}

89 
	$luaB_co¸óã
 (
lua_Sèã
 *
L
) {

90 
lua_Sèã
 *
NL
;

91 
	`luaL_checkty≥
(
L
, 1, 
LUA_TFUNCTION
);

92 
NL
 = 
	`lua_√wthªad
(
L
);

93 
	`lua_pushvÆue
(
L
, 1);

94 
	`lua_xmove
(
L
, 
NL
, 1);

96 
	}
}

99 
	$luaB_cowøp
 (
lua_Sèã
 *
L
) {

100 
	`luaB_co¸óã
(
L
);

101 
	`lua_pushc˛osuª
(
L
, 
luaB_auxwøp
, 1);

103 
	}
}

106 
	$luaB_yõld
 (
lua_Sèã
 *
L
) {

107  
	`lua_yõld
(
L
, 
	`lua_gët›
(L));

108 
	}
}

111 
	$luaB_co°©us
 (
lua_Sèã
 *
L
) {

112 
lua_Sèã
 *
co
 = 
	`gëco
(
L
);

113 i‡(
L
 =
co
Ë
	`lua_pushlôîÆ
(L, "running");

115 
	`lua_°©us
(
co
)) {

116 
LUA_YIELD
:

117 
	`lua_pushlôîÆ
(
L
, "suspended");

119 
LUA_OK
: {

120 
lua_Debug
 
¨
;

121 i‡(
	`lua_gë°ack
(
co
, 0, &
¨
) > 0)

122 
	`lua_pushlôîÆ
(
L
, "normal");

123 i‡(
	`lua_gët›
(
co
) == 0)

124 
	`lua_pushlôîÆ
(
L
, "dead");

126 
	`lua_pushlôîÆ
(
L
, "suspended");

130 
	`lua_pushlôîÆ
(
L
, "dead");

135 
	}
}

138 
	$luaB_yõldabÀ
 (
lua_Sèã
 *
L
) {

139 
	`lua_pushboﬁón
(
L
, 
	`lua_isyõldabÀ
(L));

141 
	}
}

144 
	$luaB_c‹u¬ög
 (
lua_Sèã
 *
L
) {

145 
ismaö
 = 
	`lua_pushthªad
(
L
);

146 
	`lua_pushboﬁón
(
L
, 
ismaö
);

148 
	}
}

151 c⁄° 
luaL_Reg
 
	gco_funcs
[] = {

152 {"¸óã", 
luaB_co¸óã
},

153 {"ªsume", 
luaB_c‹esume
},

154 {"ru¬ög", 
luaB_c‹u¬ög
},

155 {"°©us", 
luaB_co°©us
},

156 {"wøp", 
luaB_cowøp
},

157 {"yõld", 
luaB_yõld
},

158 {"isyõldabÀ", 
luaB_yõldabÀ
},

159 {
NULL
, NULL}

164 
LUAMOD_API
 
	$lua›í_c‹outöe
 (
lua_Sèã
 *
L
) {

165 
	`luaL_√wlib
(
L
, 
co_funcs
);

167 
	}
}

	@lib/archive/lua-5.3.0/src/lctype.c

7 
	#l˘y≥_c


	)

8 
	#LUA_CORE


	)

10 
	~"Õªfix.h
"

13 
	~"l˘y≥.h
"

15 #i‡!
LUA_USE_CTYPE


17 
	~<limôs.h
>

19 
LUAI_DDEF
 c⁄° 
lu_byã
 
	gluai_˘y≥_
[
UCHAR_MAX
 + 2] = {

	@lib/archive/lua-5.3.0/src/lctype.h

7 #i‚de‡
l˘y≥_h


8 
	#l˘y≥_h


	)

10 
	~"lua.h
"

19 #i‡!
deföed
(
LUA_USE_CTYPE
)

23 
	#LUA_USE_CTYPE
 0

	)

26 
	#LUA_USE_CTYPE
 1

	)

32 #i‡!
LUA_USE_CTYPE


34 
	~<limôs.h
>

36 
	~"Œimôs.h
"

39 
	#ALPHABIT
 0

	)

40 
	#DIGITBIT
 1

	)

41 
	#PRINTBIT
 2

	)

42 
	#SPACEBIT
 3

	)

43 
	#XDIGITBIT
 4

	)

46 
	#MASK
(
B
Ë(1 << (B))

	)

52 
	#ã°¥›
(
c
,
p
Ë(
luai_˘y≥_
[(c)+1] & (p))

	)

57 
	#li¶Æpha
(
c
Ë
	`ã°¥›
(c, 
	`MASK
(
ALPHABIT
))

	)

58 
	#li¶Ænum
(
c
Ë
	`ã°¥›
(c, (
	`MASK
(
ALPHABIT
Ë| MASK(
DIGITBIT
)))

	)

59 
	#lisdigô
(
c
Ë
	`ã°¥›
(c, 
	`MASK
(
DIGITBIT
))

	)

60 
	#lis•a˚
(
c
Ë
	`ã°¥›
(c, 
	`MASK
(
SPACEBIT
))

	)

61 
	#li•röt
(
c
Ë
	`ã°¥›
(c, 
	`MASK
(
PRINTBIT
))

	)

62 
	#lisxdigô
(
c
Ë
	`ã°¥›
(c, 
	`MASK
(
XDIGITBIT
))

	)

67 
	#…ﬁowî
(
c
Ë((cË| ('A' ^ 'a'))

	)

71 
LUAI_DDEC
 c⁄° 
lu_byã
 
	gluai_˘y≥_
[
UCHAR_MAX
 + 2];

80 
	~<˘y≥.h
>

83 
	#li¶Æpha
(
c
Ë(
	`ißÕha
(cË|| (cË='_')

	)

84 
	#li¶Ænum
(
c
Ë(
	`iß um
(cË|| (cË='_')

	)

85 
	#lisdigô
(
c
Ë(
	`isdigô
(c))

	)

86 
	#lis•a˚
(
c
Ë(
	`is•a˚
(c))

	)

87 
	#li•röt
(
c
Ë(
	`i•röt
(c))

	)

88 
	#lisxdigô
(
c
Ë(
	`isxdigô
(c))

	)

90 
	#…ﬁowî
(
c
Ë(
	`tﬁowî
(c))

	)

	@lib/archive/lua-5.3.0/src/ldblib.c

7 
	#ldblib_c


	)

8 
	#LUA_LIB


	)

10 
	~"Õªfix.h
"

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<°rög.h
>

17 
	~"lua.h
"

19 
	~"œuxlib.h
"

20 
	~"luÆib.h
"

27 c⁄° 
	gHOOKKEY
 = 0;

30 
	$db_gëªgi°ry
 (
lua_Sèã
 *
L
) {

31 
	`lua_pushvÆue
(
L
, 
LUA_REGISTRYINDEX
);

33 
	}
}

36 
	$db_gëmë©abÀ
 (
lua_Sèã
 *
L
) {

37 
	`luaL_check™y
(
L
, 1);

38 i‡(!
	`lua_gëmë©abÀ
(
L
, 1)) {

39 
	`lua_pushnû
(
L
);

42 
	}
}

45 
	$db_£tmë©abÀ
 (
lua_Sèã
 *
L
) {

46 
t
 = 
	`lua_ty≥
(
L
, 2);

47 
	`luaL_¨gcheck
(
L
, 
t
 =
LUA_TNIL
 ||Å =
LUA_TTABLE
, 2,

49 
	`lua_£â›
(
L
, 2);

50 
	`lua_£tmë©abÀ
(
L
, 1);

52 
	}
}

55 
	$db_gëu£rvÆue
 (
lua_Sèã
 *
L
) {

56 i‡(
	`lua_ty≥
(
L
, 1Ë!
LUA_TUSERDATA
)

57 
	`lua_pushnû
(
L
);

59 
	`lua_gëu£rvÆue
(
L
, 1);

61 
	}
}

64 
	$db_£tu£rvÆue
 (
lua_Sèã
 *
L
) {

65 
	`luaL_checkty≥
(
L
, 1, 
LUA_TUSERDATA
);

66 
	`luaL_check™y
(
L
, 2);

67 
	`lua_£â›
(
L
, 2);

68 
	`lua_£tu£rvÆue
(
L
, 1);

70 
	}
}

79 
lua_Sèã
 *
	$gëthªad
 (
lua_Sèã
 *
L
, *
¨g
) {

80 i‡(
	`lua_i°hªad
(
L
, 1)) {

81 *
¨g
 = 1;

82  
	`lua_tŸhªad
(
L
, 1);

85 *
¨g
 = 0;

86  
L
;

88 
	}
}

96 
	$£âabss
 (
lua_Sèã
 *
L
, c⁄° *
k
, c⁄° *
v
) {

97 
	`lua_push°rög
(
L
, 
v
);

98 
	`lua_£tfõld
(
L
, -2, 
k
);

99 
	}
}

101 
	$£âabsi
 (
lua_Sèã
 *
L
, c⁄° *
k
, 
v
) {

102 
	`lua_pushöãgî
(
L
, 
v
);

103 
	`lua_£tfõld
(
L
, -2, 
k
);

104 
	}
}

106 
	$£âabsb
 (
lua_Sèã
 *
L
, c⁄° *
k
, 
v
) {

107 
	`lua_pushboﬁón
(
L
, 
v
);

108 
	`lua_£tfõld
(
L
, -2, 
k
);

109 
	}
}

119 
	$åót°ack›ti⁄
 (
lua_Sèã
 *
L
,Üua_Sèã *
L1
, c⁄° *
‚ame
) {

120 i‡(
L
 =
L1
)

121 
	`lua_rŸ©e
(
L
, -2, 1);

123 
	`lua_xmove
(
L1
, 
L
, 1);

124 
	`lua_£tfõld
(
L
, -2, 
‚ame
);

125 
	}
}

131 
	$db_gëöfo
 (
lua_Sèã
 *
L
) {

132 
lua_Debug
 
¨
;

133 
¨g
;

134 
lua_Sèã
 *
L1
 = 
	`gëthªad
(
L
, &
¨g
);

135 c⁄° *
›ti⁄s
 = 
	`luaL_›t°rög
(
L
, 
¨g
+2, "flnStu");

136 i‡(
	`lua_isfun˘i⁄
(
L
, 
¨g
 + 1)) {

137 
›ti⁄s
 = 
	`lua_pushf°rög
(
L
, ">%s", options);

138 
	`lua_pushvÆue
(
L
, 
¨g
 + 1);

139 
	`lua_xmove
(
L
, 
L1
, 1);

142 i‡(!
	`lua_gë°ack
(
L1
, ()
	`luaL_checköãgî
(
L
, 
¨g
 + 1), &
¨
)) {

143 
	`lua_pushnû
(
L
);

147 i‡(!
	`lua_gëöfo
(
L1
, 
›ti⁄s
, &
¨
))

148  
	`luaL_¨gîr‹
(
L
, 
¨g
+2, "invalid option");

149 
	`lua_√wèbÀ
(
L
);

150 i‡(
	`°rchr
(
›ti⁄s
, 'S')) {

151 
	`£âabss
(
L
, "sour˚", 
¨
.
sour˚
);

152 
	`£âabss
(
L
, "sh‹t_§c", 
¨
.
sh‹t_§c
);

153 
	`£âabsi
(
L
, "löedeföed", 
¨
.
löedeföed
);

154 
	`£âabsi
(
L
, "œ°löedeföed", 
¨
.
œ°löedeföed
);

155 
	`£âabss
(
L
, "wh©", 
¨
.
wh©
);

157 i‡(
	`°rchr
(
›ti⁄s
, 'l'))

158 
	`£âabsi
(
L
, "cuºíéöe", 
¨
.
cuºíéöe
);

159 i‡(
	`°rchr
(
›ti⁄s
, 'u')) {

160 
	`£âabsi
(
L
, "nups", 
¨
.
nups
);

161 
	`£âabsi
(
L
, "≈¨ams", 
¨
.
≈¨ams
);

162 
	`£âabsb
(
L
, "isv¨¨g", 
¨
.
isv¨¨g
);

164 i‡(
	`°rchr
(
›ti⁄s
, 'n')) {

165 
	`£âabss
(
L
, "«me", 
¨
.
«me
);

166 
	`£âabss
(
L
, "«mewh©", 
¨
.
«mewh©
);

168 i‡(
	`°rchr
(
›ti⁄s
, 't'))

169 
	`£âabsb
(
L
, "i°aûˇŒ", 
¨
.
i°aûˇŒ
);

170 i‡(
	`°rchr
(
›ti⁄s
, 'L'))

171 
	`åót°ack›ti⁄
(
L
, 
L1
, "activelines");

172 i‡(
	`°rchr
(
›ti⁄s
, 'f'))

173 
	`åót°ack›ti⁄
(
L
, 
L1
, "func");

175 
	}
}

178 
	$db_gëloˇl
 (
lua_Sèã
 *
L
) {

179 
¨g
;

180 
lua_Sèã
 *
L1
 = 
	`gëthªad
(
L
, &
¨g
);

181 
lua_Debug
 
¨
;

182 c⁄° *
«me
;

183 
nv¨
 = ()
	`luaL_checköãgî
(
L
, 
¨g
 + 2);

184 i‡(
	`lua_isfun˘i⁄
(
L
, 
¨g
 + 1)) {

185 
	`lua_pushvÆue
(
L
, 
¨g
 + 1);

186 
	`lua_push°rög
(
L
, 
	`lua_gëloˇl
(L, 
NULL
, 
nv¨
));

190 
Àvñ
 = ()
	`luaL_checköãgî
(
L
, 
¨g
 + 1);

191 i‡(!
	`lua_gë°ack
(
L1
, 
Àvñ
, &
¨
))

192  
	`luaL_¨gîr‹
(
L
, 
¨g
+1, "level out ofÑange");

193 
«me
 = 
	`lua_gëloˇl
(
L1
, &
¨
, 
nv¨
);

194 i‡(
«me
) {

195 
	`lua_xmove
(
L1
, 
L
, 1);

196 
	`lua_push°rög
(
L
, 
«me
);

197 
	`lua_rŸ©e
(
L
, -2, 1);

201 
	`lua_pushnû
(
L
);

205 
	}
}

208 
	$db_£éoˇl
 (
lua_Sèã
 *
L
) {

209 
¨g
;

210 c⁄° *
«me
;

211 
lua_Sèã
 *
L1
 = 
	`gëthªad
(
L
, &
¨g
);

212 
lua_Debug
 
¨
;

213 
Àvñ
 = ()
	`luaL_checköãgî
(
L
, 
¨g
 + 1);

214 
nv¨
 = ()
	`luaL_checköãgî
(
L
, 
¨g
 + 2);

215 i‡(!
	`lua_gë°ack
(
L1
, 
Àvñ
, &
¨
))

216  
	`luaL_¨gîr‹
(
L
, 
¨g
+1, "level out ofÑange");

217 
	`luaL_check™y
(
L
, 
¨g
+3);

218 
	`lua_£â›
(
L
, 
¨g
+3);

219 
	`lua_xmove
(
L
, 
L1
, 1);

220 
«me
 = 
	`lua_£éoˇl
(
L1
, &
¨
, 
nv¨
);

221 i‡(
«me
 =
NULL
)

222 
	`lua_p›
(
L1
, 1);

223 
	`lua_push°rög
(
L
, 
«me
);

225 
	}
}

231 
	$auxupvÆue
 (
lua_Sèã
 *
L
, 
gë
) {

232 c⁄° *
«me
;

233 
n
 = ()
	`luaL_checköãgî
(
L
, 2);

234 
	`luaL_checkty≥
(
L
, 1, 
LUA_TFUNCTION
);

235 
«me
 = 
gë
 ? 
	`lua_gëupvÆue
(
L
, 1, 
n
Ë: 
	`lua_£tupvÆue
(L, 1,Ç);

236 i‡(
«me
 =
NULL
)  0;

237 
	`lua_push°rög
(
L
, 
«me
);

238 
	`lua_ö£π
(
L
, -(
gë
+1));

239  
gë
 + 1;

240 
	}
}

243 
	$db_gëupvÆue
 (
lua_Sèã
 *
L
) {

244  
	`auxupvÆue
(
L
, 1);

245 
	}
}

248 
	$db_£tupvÆue
 (
lua_Sèã
 *
L
) {

249 
	`luaL_check™y
(
L
, 3);

250  
	`auxupvÆue
(
L
, 0);

251 
	}
}

258 
	$checkupvÆ
 (
lua_Sèã
 *
L
, 
¨gf
, 
¨gnup
) {

259 
nup
 = ()
	`luaL_checköãgî
(
L
, 
¨gnup
);

260 
	`luaL_checkty≥
(
L
, 
¨gf
, 
LUA_TFUNCTION
);

261 
	`luaL_¨gcheck
(
L
, (
	`lua_gëupvÆue
(L, 
¨gf
, 
nup
Ë!
NULL
), 
¨gnup
,

263  
nup
;

264 
	}
}

267 
	$db_upvÆueid
 (
lua_Sèã
 *
L
) {

268 
n
 = 
	`checkupvÆ
(
L
, 1, 2);

269 
	`lua_pushlightu£rd©a
(
L
, 
	`lua_upvÆueid
(L, 1, 
n
));

271 
	}
}

274 
	$db_upvÆuejoö
 (
lua_Sèã
 *
L
) {

275 
n1
 = 
	`checkupvÆ
(
L
, 1, 2);

276 
n2
 = 
	`checkupvÆ
(
L
, 3, 4);

277 
	`luaL_¨gcheck
(
L
, !
	`lua_iscfun˘i⁄
(L, 1), 1, "Lua functionÉxpected");

278 
	`luaL_¨gcheck
(
L
, !
	`lua_iscfun˘i⁄
(L, 3), 3, "Lua functionÉxpected");

279 
	`lua_upvÆuejoö
(
L
, 1, 
n1
, 3, 
n2
);

281 
	}
}

288 
	$hookf
 (
lua_Sèã
 *
L
, 
lua_Debug
 *
¨
) {

289 c⁄° *c⁄° 
hook«mes
[] =

291 
	`lua_øwgëp
(
L
, 
LUA_REGISTRYINDEX
, &
HOOKKEY
);

292 
	`lua_pushthªad
(
L
);

293 i‡(
	`lua_øwgë
(
L
, -2Ë=
LUA_TFUNCTION
) {

294 
	`lua_push°rög
(
L
, 
hook«mes
[()
¨
->
evít
]);

295 i‡(
¨
->
cuºíéöe
 >= 0)

296 
	`lua_pushöãgî
(
L
, 
¨
->
cuºíéöe
);

297 
	`lua_pushnû
(
L
);

298 
	`lua_as£π
(
	`lua_gëöfo
(
L
, "lS", 
¨
));

299 
	`lua_ˇŒ
(
L
, 2, 0);

301 
	}
}

307 
	$makemask
 (c⁄° *
smask
, 
cou¡
) {

308 
mask
 = 0;

309 i‡(
	`°rchr
(
smask
, 'c')Ë
mask
 |
LUA_MASKCALL
;

310 i‡(
	`°rchr
(
smask
, 'r')Ë
mask
 |
LUA_MASKRET
;

311 i‡(
	`°rchr
(
smask
, 'l')Ë
mask
 |
LUA_MASKLINE
;

312 i‡(
cou¡
 > 0Ë
mask
 |
LUA_MASKCOUNT
;

313  
mask
;

314 
	}
}

320 *
	$unmakemask
 (
mask
, *
smask
) {

321 
i
 = 0;

322 i‡(
mask
 & 
LUA_MASKCALL
Ë
smask
[
i
++] = 'c';

323 i‡(
mask
 & 
LUA_MASKRET
Ë
smask
[
i
++] = 'r';

324 i‡(
mask
 & 
LUA_MASKLINE
Ë
smask
[
i
++] = 'l';

325 
smask
[
i
] = '\0';

326  
smask
;

327 
	}
}

330 
	$db_£thook
 (
lua_Sèã
 *
L
) {

331 
¨g
, 
mask
, 
cou¡
;

332 
lua_Hook
 
func
;

333 
lua_Sèã
 *
L1
 = 
	`gëthªad
(
L
, &
¨g
);

334 i‡(
	`lua_i¢⁄e‹nû
(
L
, 
¨g
+1)) {

335 
	`lua_£â›
(
L
, 
¨g
+1);

336 
func
 = 
NULL
; 
mask
 = 0; 
cou¡
 = 0;

339 c⁄° *
smask
 = 
	`luaL_check°rög
(
L
, 
¨g
+2);

340 
	`luaL_checkty≥
(
L
, 
¨g
+1, 
LUA_TFUNCTION
);

341 
cou¡
 = ()
	`luaL_›töãgî
(
L
, 
¨g
 + 3, 0);

342 
func
 = 
hookf
; 
mask
 = 
	`makemask
(
smask
, 
cou¡
);

344 i‡(
	`lua_øwgëp
(
L
, 
LUA_REGISTRYINDEX
, &
HOOKKEY
Ë=
LUA_TNIL
) {

345 
	`lua_¸óãèbÀ
(
L
, 0, 2);

346 
	`lua_pushvÆue
(
L
, -1);

347 
	`lua_øw£ç
(
L
, 
LUA_REGISTRYINDEX
, &
HOOKKEY
);

348 
	`lua_push°rög
(
L
, "k");

349 
	`lua_£tfõld
(
L
, -2, "__mode");

350 
	`lua_pushvÆue
(
L
, -1);

351 
	`lua_£tmë©abÀ
(
L
, -2);

353 
	`lua_pushthªad
(
L1
); 
	`lua_xmove
(L1, 
L
, 1);

354 
	`lua_pushvÆue
(
L
, 
¨g
 + 1);

355 
	`lua_øw£t
(
L
, -3);

356 
	`lua_£thook
(
L1
, 
func
, 
mask
, 
cou¡
);

358 
	}
}

361 
	$db_gëhook
 (
lua_Sèã
 *
L
) {

362 
¨g
;

363 
lua_Sèã
 *
L1
 = 
	`gëthªad
(
L
, &
¨g
);

364 
buff
[5];

365 
mask
 = 
	`lua_gëhookmask
(
L1
);

366 
lua_Hook
 
hook
 = 
	`lua_gëhook
(
L1
);

367 i‡(
hook
 =
NULL
)

368 
	`lua_pushnû
(
L
);

369 i‡(
hook
 !
hookf
)

370 
	`lua_pushlôîÆ
(
L
, "external hook");

372 
	`lua_øwgëp
(
L
, 
LUA_REGISTRYINDEX
, &
HOOKKEY
);

373 
	`lua_pushthªad
(
L1
); 
	`lua_xmove
(L1, 
L
, 1);

374 
	`lua_øwgë
(
L
, -2);

375 
	`lua_ªmove
(
L
, -2);

377 
	`lua_push°rög
(
L
, 
	`unmakemask
(
mask
, 
buff
));

378 
	`lua_pushöãgî
(
L
, 
	`lua_gëhookcou¡
(
L1
));

380 
	}
}

383 
	$db_debug
 (
lua_Sèã
 *
L
) {

385 
buf„r
[250];

386 
	`lua_wrôe°rögîr‹
(
L
, "%s", "lua_debug> ");

387 i‡(
	`fgës
(
buf„r
, (buf„r), 
°dö
) == 0 ||

388 
	`°rcmp
(
buf„r
, "cont\n") == 0)

390 i‡(
	`luaL_lﬂdbuf„r
(
L
, 
buf„r
, 
	`°æí
(buffer), "=(debug command)") ||

391 
	`lua_pˇŒ
(
L
, 0, 0, 0))

392 
	`lua_wrôe°rögîr‹
(
L
, "%s\n", 
	`lua_to°rög
(L, -1));

393 
	`lua_£â›
(
L
, 0);

395 
	}
}

398 
	$db_åa˚back
 (
lua_Sèã
 *
L
) {

399 
¨g
;

400 
lua_Sèã
 *
L1
 = 
	`gëthªad
(
L
, &
¨g
);

401 c⁄° *
msg
 = 
	`lua_to°rög
(
L
, 
¨g
 + 1);

402 i‡(
msg
 =
NULL
 && !
	`lua_i¢⁄e‹nû
(
L
, 
¨g
 + 1))

403 
	`lua_pushvÆue
(
L
, 
¨g
 + 1);

405 
Àvñ
 = ()
	`luaL_›töãgî
(
L
, 
¨g
 + 2, (L =
L1
) ? 1 : 0);

406 
	`luaL_åa˚back
(
L
, 
L1
, 
msg
, 
Àvñ
);

409 
	}
}

412 c⁄° 
luaL_Reg
 
	gdblib
[] = {

413 {"debug", 
db_debug
},

414 {"gëu£rvÆue", 
db_gëu£rvÆue
},

415 {"gëhook", 
db_gëhook
},

416 {"gëöfo", 
db_gëöfo
},

417 {"gëloˇl", 
db_gëloˇl
},

418 {"gëªgi°ry", 
db_gëªgi°ry
},

419 {"gëmë©abÀ", 
db_gëmë©abÀ
},

420 {"gëupvÆue", 
db_gëupvÆue
},

421 {"upvÆuejoö", 
db_upvÆuejoö
},

422 {"upvÆueid", 
db_upvÆueid
},

423 {"£tu£rvÆue", 
db_£tu£rvÆue
},

424 {"£thook", 
db_£thook
},

425 {"£éoˇl", 
db_£éoˇl
},

426 {"£tmë©abÀ", 
db_£tmë©abÀ
},

427 {"£tupvÆue", 
db_£tupvÆue
},

428 {"åa˚back", 
db_åa˚back
},

429 {
NULL
, NULL}

433 
LUAMOD_API
 
	$lua›í_debug
 (
lua_Sèã
 *
L
) {

434 
	`luaL_√wlib
(
L
, 
dblib
);

436 
	}
}

	@lib/archive/lua-5.3.0/src/ldebug.c

7 
	#ldebug_c


	)

8 
	#LUA_CORE


	)

10 
	~"Õªfix.h
"

13 
	~<°d¨g.h
>

14 
	~<°ddef.h
>

15 
	~<°rög.h
>

17 
	~"lua.h
"

19 
	~"œpi.h
"

20 
	~"lcode.h
"

21 
	~"ldebug.h
"

22 
	~"ldo.h
"

23 
	~"lfunc.h
"

24 
	~"lobje˘.h
"

25 
	~"l›codes.h
"

26 
	~"l°©e.h
"

27 
	~"l°rög.h
"

28 
	~"…abÀ.h
"

29 
	~"…m.h
"

30 
	~"lvm.h
"

34 
	#noLuaClosuª
(
f
Ë((fË=
NULL
 || (f)->
c
.
â
 =
LUA_TCCL
)

	)

37 c⁄° *
gëfun˙ame
 (
lua_Sèã
 *
L
, 
CÆlInfo
 *
ci
, c⁄° **
«me
);

40 
	$cuºíçc
 (
CÆlInfo
 *
ci
) {

41 
	`lua_as£π
(
	`isLua
(
ci
));

42  
	`pcRñ
(
ci
->
u
.
l
.
ßvedpc
, 
	`ci_func
(ci)->
p
);

43 
	}
}

46 
	$cuºíéöe
 (
CÆlInfo
 *
ci
) {

47  
	`gëfun˛öe
(
	`ci_func
(
ci
)->
p
, 
	`cuºíçc
(ci));

48 
	}
}

54 
LUA_API
 
	$lua_£thook
 (
lua_Sèã
 *
L
, 
lua_Hook
 
func
, 
mask
, 
cou¡
) {

55 i‡(
func
 =
NULL
 || 
mask
 == 0) {

56 
mask
 = 0;

57 
func
 = 
NULL
;

59 i‡(
	`isLua
(
L
->
ci
))

60 
L
->
ﬁdpc
 = L->
ci
->
u
.
l
.
ßvedpc
;

61 
L
->
hook
 = 
func
;

62 
L
->
ba£hookcou¡
 = 
cou¡
;

63 
	`ª£thookcou¡
(
L
);

64 
L
->
hookmask
 = 
	`ˇ°_byã
(
mask
);

65 
	}
}

68 
LUA_API
 
lua_Hook
 
	$lua_gëhook
 (
lua_Sèã
 *
L
) {

69  
L
->
hook
;

70 
	}
}

73 
LUA_API
 
	$lua_gëhookmask
 (
lua_Sèã
 *
L
) {

74  
L
->
hookmask
;

75 
	}
}

78 
LUA_API
 
	$lua_gëhookcou¡
 (
lua_Sèã
 *
L
) {

79  
L
->
ba£hookcou¡
;

80 
	}
}

83 
LUA_API
 
	$lua_gë°ack
 (
lua_Sèã
 *
L
, 
Àvñ
, 
lua_Debug
 *
¨
) {

84 
°©us
;

85 
CÆlInfo
 *
ci
;

86 i‡(
Àvñ
 < 0)  0;

87 
	`lua_lock
(
L
);

88 
ci
 = 
L
->ci; 
Àvñ
 > 0 && cò!&L->
ba£_ci
; còci->
¥evious
)

89 
Àvñ
--;

90 i‡(
Àvñ
 =0 && 
ci
 !&
L
->
ba£_ci
) {

91 
°©us
 = 1;

92 
¨
->
i_ci
 = 
ci
;

94 
°©us
 = 0;

95 
	`lua_u∆ock
(
L
);

96  
°©us
;

97 
	}
}

100 c⁄° *
	$upvÆ«me
 (
PrŸo
 *
p
, 
uv
) {

101 
TSåög
 *
s
 = 
	`check_exp
(
uv
 < 
p
->
sizeupvÆues
,Ö->
upvÆues
[uv].
«me
);

102 i‡(
s
 =
NULL
)  "?";

103  
	`gë°r
(
s
);

104 
	}
}

107 c⁄° *
	$födv¨¨g
 (
CÆlInfo
 *
ci
, 
n
, 
StkId
 *
pos
) {

108 
≈¨ams
 = 
	`˛LvÆue
(
ci
->
func
)->
p
->
num∑øms
;

109 i‡(
n
 >
ci
->
u
.
l
.
ba£
 - ci->
func
 - 
≈¨ams
)

110  
NULL
;

112 *
pos
 = 
ci
->
func
 + 
≈¨ams
 + 
n
;

115 
	}
}

118 c⁄° *
	$födloˇl
 (
lua_Sèã
 *
L
, 
CÆlInfo
 *
ci
, 
n
,

119 
StkId
 *
pos
) {

120 c⁄° *
«me
 = 
NULL
;

121 
StkId
 
ba£
;

122 i‡(
	`isLua
(
ci
)) {

123 i‡(
n
 < 0)

124  
	`födv¨¨g
(
ci
, -
n
, 
pos
);

126 
ba£
 = 
ci
->
u
.
l
.base;

127 
«me
 = 
	`luaF_gëloˇ ame
(
	`ci_func
(
ci
)->
p
, 
n
, 
	`cuºíçc
(ci));

131 
ba£
 = 
ci
->
func
 + 1;

132 i‡(
«me
 =
NULL
) {

133 
StkId
 
limô
 = (
ci
 =
L
->ciË? L->
t›
 : ci->
√xt
->
func
;

134 i‡(
limô
 - 
ba£
 >
n
 &&Ç > 0)

135 
«me
 = "(*temporary)";

137  
NULL
;

139 *
pos
 = 
ba£
 + (
n
 - 1);

140  
«me
;

141 
	}
}

144 
LUA_API
 c⁄° *
	$lua_gëloˇl
 (
lua_Sèã
 *
L
, c⁄° 
lua_Debug
 *
¨
, 
n
) {

145 c⁄° *
«me
;

146 
	`lua_lock
(
L
);

147 i‡(
¨
 =
NULL
) {

148 i‡(!
	`isLfun˘i⁄
(
L
->
t›
 - 1))

149 
«me
 = 
NULL
;

151 
«me
 = 
	`luaF_gëloˇ ame
(
	`˛LvÆue
(
L
->
t›
 - 1)->
p
, 
n
, 0);

154 
StkId
 
pos
 = 0;

155 
«me
 = 
	`födloˇl
(
L
, 
¨
->
i_ci
, 
n
, &
pos
);

156 i‡(
«me
) {

157 
	`£tobj2s
(
L
, L->
t›
, 
pos
);

158 
	`≠i_ö¸_t›
(
L
);

161 
	`lua_u∆ock
(
L
);

162  
«me
;

163 
	}
}

166 
LUA_API
 c⁄° *
	$lua_£éoˇl
 (
lua_Sèã
 *
L
, c⁄° 
lua_Debug
 *
¨
, 
n
) {

167 
StkId
 
pos
 = 0;

168 c⁄° *
«me
 = 
	`födloˇl
(
L
, 
¨
->
i_ci
, 
n
, &
pos
);

169 
	`lua_lock
(
L
);

170 i‡(
«me
) {

171 
	`£tobjs2s
(
L
, 
pos
, L->
t›
 - 1);

172 
L
->
t›
--;

174 
	`lua_u∆ock
(
L
);

175  
«me
;

176 
	}
}

179 
	$funcöfo
 (
lua_Debug
 *
¨
, 
Closuª
 *
˛
) {

180 i‡(
	`noLuaClosuª
(
˛
)) {

181 
¨
->
sour˚
 = "=[C]";

182 
¨
->
löedeföed
 = -1;

183 
¨
->
œ°löedeföed
 = -1;

184 
¨
->
wh©
 = "C";

187 
PrŸo
 *
p
 = 
˛
->
l
.p;

188 
¨
->
sour˚
 = 
p
->sour˚ ? 
	`gë°r
(p->source) : "=?";

189 
¨
->
löedeföed
 = 
p
->linedefined;

190 
¨
->
œ°löedeföed
 = 
p
->lastlinedefined;

191 
¨
->
wh©
 = (¨->
löedeföed
 == 0) ? "main" : "Lua";

193 
	`luaO_chunkid
(
¨
->
sh‹t_§c
,ár->
sour˚
, 
LUA_IDSIZE
);

194 
	}
}

197 
	$cﬁÀ˘vÆidlöes
 (
lua_Sèã
 *
L
, 
Closuª
 *
f
) {

198 i‡(
	`noLuaClosuª
(
f
)) {

199 
	`£äûvÆue
(
L
->
t›
);

200 
	`≠i_ö¸_t›
(
L
);

203 
i
;

204 
TVÆue
 
v
;

205 *
löeöfo
 = 
f
->
l
.
p
->lineinfo;

206 
TabÀ
 *
t
 = 
	`luaH_√w
(
L
);

207 
	`£thvÆue
(
L
, L->
t›
, 
t
);

208 
	`≠i_ö¸_t›
(
L
);

209 
	`£tbvÆue
(&
v
, 1);

210 
i
 = 0; i < 
f
->
l
.
p
->
sizñöeöfo
; i++)

211 
	`luaH_£töt
(
L
, 
t
, 
löeöfo
[
i
], &
v
);

213 
	}
}

216 
	$auxgëöfo
 (
lua_Sèã
 *
L
, c⁄° *
wh©
, 
lua_Debug
 *
¨
,

217 
Closuª
 *
f
, 
CÆlInfo
 *
ci
) {

218 
°©us
 = 1;

219 ; *
wh©
; what++) {

220 *
wh©
) {

222 
	`funcöfo
(
¨
, 
f
);

226 
¨
->
cuºíéöe
 = (
ci
 && 
	`isLua
(ci)Ë? 
	`cuºíéöe
(ci) : -1;

230 
¨
->
nups
 = (
f
 =
NULL
Ë? 0 : f->
c
.
nupvÆues
;

231 i‡(
	`noLuaClosuª
(
f
)) {

232 
¨
->
isv¨¨g
 = 1;

233 
¨
->
≈¨ams
 = 0;

236 
¨
->
isv¨¨g
 = 
f
->
l
.
p
->
is_v¨¨g
;

237 
¨
->
≈¨ams
 = 
f
->
l
.
p
->
num∑øms
;

242 
¨
->
i°aûˇŒ
 = (
ci
Ë? ci->
ˇŒ°©us
 & 
CIST_TAIL
 : 0;

247 i‡(
ci
 && !(ci->
ˇŒ°©us
 & 
CIST_TAIL
Ë&& 
	`isLua
(ci->
¥evious
))

248 
¨
->
«mewh©
 = 
	`gëfun˙ame
(
L
, 
ci
->
¥evious
, &¨->
«me
);

250 
¨
->
«mewh©
 = 
NULL
;

251 i‡(
¨
->
«mewh©
 =
NULL
) {

252 
¨
->
«mewh©
 = "";

253 
¨
->
«me
 = 
NULL
;

260 : 
°©us
 = 0;

263  
°©us
;

264 
	}
}

267 
LUA_API
 
	$lua_gëöfo
 (
lua_Sèã
 *
L
, c⁄° *
wh©
, 
lua_Debug
 *
¨
) {

268 
°©us
;

269 
Closuª
 *
˛
;

270 
CÆlInfo
 *
ci
;

271 
StkId
 
func
;

272 
	`lua_lock
(
L
);

273 i‡(*
wh©
 == '>') {

274 
ci
 = 
NULL
;

275 
func
 = 
L
->
t›
 - 1;

276 
	`≠i_check
(
	`âisfun˘i⁄
(
func
), "functionÉxpected");

277 
wh©
++;

278 
L
->
t›
--;

281 
ci
 = 
¨
->
i_ci
;

282 
func
 = 
ci
->func;

283 
	`lua_as£π
(
	`âisfun˘i⁄
(
ci
->
func
));

285 
˛
 = 
	`âis˛osuª
(
func
Ë? 
	`˛vÆue
(funcË: 
NULL
;

286 
°©us
 = 
	`auxgëöfo
(
L
, 
wh©
, 
¨
, 
˛
, 
ci
);

287 i‡(
	`°rchr
(
wh©
, 'f')) {

288 
	`£tobjs2s
(
L
, L->
t›
, 
func
);

289 
	`≠i_ö¸_t›
(
L
);

291 i‡(
	`°rchr
(
wh©
, 'L'))

292 
	`cﬁÀ˘vÆidlöes
(
L
, 
˛
);

293 
	`lua_u∆ock
(
L
);

294  
°©us
;

295 
	}
}

304 c⁄° *
gëobj«me
 (
PrŸo
 *
p
, 
œ°pc
, 
ªg
,

305 c⁄° **
«me
);

311 
	$k«me
 (
PrŸo
 *
p
, 
pc
, 
c
, c⁄° **
«me
) {

312 i‡(
	`ISK
(
c
)) {

313 
TVÆue
 *
kvÆue
 = &
p
->
k
[
	`INDEXK
(
c
)];

314 i‡(
	`âis°rög
(
kvÆue
)) {

315 *
«me
 = 
	`svÆue
(
kvÆue
);

321 c⁄° *
wh©
 = 
	`gëobj«me
(
p
, 
pc
, 
c
, 
«me
);

322 i‡(
wh©
 && *what == 'c') {

327 *
«me
 = "?";

328 
	}
}

331 
	$fûãΩc
 (
pc
, 
jm±¨gë
) {

332 i‡(
pc
 < 
jm±¨gë
)

334  
pc
;

335 
	}
}

341 
	$föd£åeg
 (
PrŸo
 *
p
, 
œ°pc
, 
ªg
) {

342 
pc
;

343 
£åeg
 = -1;

344 
jm±¨gë
 = 0;

345 
pc
 = 0;Ö¯< 
œ°pc
;Öc++) {

346 
In°ru˘i⁄
 
i
 = 
p
->
code
[
pc
];

347 
OpCode
 
›
 = 
	`GET_OPCODE
(
i
);

348 
a
 = 
	`GETARG_A
(
i
);

349 
›
) {

350 
OP_LOADNIL
: {

351 
b
 = 
	`GETARG_B
(
i
);

352 i‡(
a
 <
ªg
 &&Ñeg <®+ 
b
)

353 
£åeg
 = 
	`fûãΩc
(
pc
, 
jm±¨gë
);

356 
OP_TFORCALL
: {

357 i‡(
ªg
 >
a
 + 2)

358 
£åeg
 = 
	`fûãΩc
(
pc
, 
jm±¨gë
);

361 
OP_CALL
:

362 
OP_TAILCALL
: {

363 i‡(
ªg
 >
a
)

364 
£åeg
 = 
	`fûãΩc
(
pc
, 
jm±¨gë
);

367 
OP_JMP
: {

368 
b
 = 
	`GETARG_sBx
(
i
);

369 
de°
 = 
pc
 + 1 + 
b
;

371 i‡(
pc
 < 
de°
 && de° <
œ°pc
) {

372 i‡(
de°
 > 
jm±¨gë
)

373 
jm±¨gë
 = 
de°
;

378 i‡(
	`ã°AMode
(
›
Ë&& 
ªg
 =
a
)

379 
£åeg
 = 
	`fûãΩc
(
pc
, 
jm±¨gë
);

383  
£åeg
;

384 
	}
}

387 c⁄° *
	$gëobj«me
 (
PrŸo
 *
p
, 
œ°pc
, 
ªg
,

388 c⁄° **
«me
) {

389 
pc
;

390 *
«me
 = 
	`luaF_gëloˇ ame
(
p
, 
ªg
 + 1, 
œ°pc
);

391 i‡(*
«me
)

394 
pc
 = 
	`föd£åeg
(
p
, 
œ°pc
, 
ªg
);

395 i‡(
pc
 != -1) {

396 
In°ru˘i⁄
 
i
 = 
p
->
code
[
pc
];

397 
OpCode
 
›
 = 
	`GET_OPCODE
(
i
);

398 
›
) {

399 
OP_MOVE
: {

400 
b
 = 
	`GETARG_B
(
i
);

401 i‡(
b
 < 
	`GETARG_A
(
i
))

402  
	`gëobj«me
(
p
, 
pc
, 
b
, 
«me
);

405 
OP_GETTABUP
:

406 
OP_GETTABLE
: {

407 
k
 = 
	`GETARG_C
(
i
);

408 
t
 = 
	`GETARG_B
(
i
);

409 c⁄° *
vn
 = (
›
 =
OP_GETTABLE
)

410 ? 
	`luaF_gëloˇ ame
(
p
, 
t
 + 1, 
pc
)

411 : 
	`upvÆ«me
(
p
, 
t
);

412 
	`k«me
(
p
, 
pc
, 
k
, 
«me
);

413  (
vn
 && 
	`°rcmp
(vn, 
LUA_ENV
) == 0) ? "global" : "field";

415 
OP_GETUPVAL
: {

416 *
«me
 = 
	`upvÆ«me
(
p
, 
	`GETARG_B
(
i
));

419 
OP_LOADK
:

420 
OP_LOADKX
: {

421 
b
 = (
›
 =
OP_LOADK
Ë? 
	`GETARG_Bx
(
i
)

422 : 
	`GETARG_Ax
(
p
->
code
[
pc
 + 1]);

423 i‡(
	`âis°rög
(&
p
->
k
[
b
])) {

424 *
«me
 = 
	`svÆue
(&
p
->
k
[
b
]);

429 
OP_SELF
: {

430 
k
 = 
	`GETARG_C
(
i
);

431 
	`k«me
(
p
, 
pc
, 
k
, 
«me
);

437  
NULL
;

438 
	}
}

441 c⁄° *
	$gëfun˙ame
 (
lua_Sèã
 *
L
, 
CÆlInfo
 *
ci
, c⁄° **
«me
) {

442 
TMS
 
tm
 = (TMS)0;

443 
PrŸo
 *
p
 = 
	`ci_func
(
ci
)->p;

444 
pc
 = 
	`cuºíçc
(
ci
);

445 
In°ru˘i⁄
 
i
 = 
p
->
code
[
pc
];

446 i‡(
ci
->
ˇŒ°©us
 & 
CIST_HOOKED
) {

447 *
«me
 = "?";

450 
	`GET_OPCODE
(
i
)) {

451 
OP_CALL
:

452 
OP_TAILCALL
:

453  
	`gëobj«me
(
p
, 
pc
, 
	`GETARG_A
(
i
), 
«me
);

454 
OP_TFORCALL
: {

455 *
«me
 = "for iterator";

459 
OP_SELF
: 
OP_GETTABUP
: 
OP_GETTABLE
:

460 
tm
 = 
TM_INDEX
;

462 
OP_SETTABUP
: 
OP_SETTABLE
:

463 
tm
 = 
TM_NEWINDEX
;

465 
OP_ADD
: 
OP_SUB
: 
OP_MUL
: 
OP_MOD
:

466 
OP_POW
: 
OP_DIV
: 
OP_IDIV
: 
OP_BAND
:

467 
OP_BOR
: 
OP_BXOR
: 
OP_SHL
: 
OP_SHR
: {

468 
off£t
 = 
	`ˇ°_öt
(
	`GET_OPCODE
(
i
)Ë- ca°_öt(
OP_ADD
);

469 
tm
 = 
	`ˇ°
(
TMS
, 
off£t
 + 
	`ˇ°_öt
(
TM_ADD
));

472 
OP_UNM
: 
tm
 = 
TM_UNM
; ;

473 
OP_BNOT
: 
tm
 = 
TM_BNOT
; ;

474 
OP_LEN
: 
tm
 = 
TM_LEN
; ;

475 
OP_CONCAT
: 
tm
 = 
TM_CONCAT
; ;

476 
OP_EQ
: 
tm
 = 
TM_EQ
; ;

477 
OP_LT
: 
tm
 = 
TM_LT
; ;

478 
OP_LE
: 
tm
 = 
TM_LE
; ;

479 : 
	`lua_as£π
(0);

481 *
«me
 = 
	`gë°r
(
	`G
(
L
)->
tm«me
[
tm
]);

483 
	}
}

494 
	$isö°ack
 (
CÆlInfo
 *
ci
, c⁄° 
TVÆue
 *
o
) {

495 
±rdiff_t
 
i
 = 
o
 - 
ci
->
u
.
l
.
ba£
;

496  (0 <
i
 && i < (
ci
->
t›
 - ci->
u
.
l
.
ba£
Ë&& ci->u.l.ba£ + i =
o
);

497 
	}
}

505 c⁄° *
	$gëupvÆ«me
 (
CÆlInfo
 *
ci
, c⁄° 
TVÆue
 *
o
,

506 c⁄° **
«me
) {

507 
LClosuª
 *
c
 = 
	`ci_func
(
ci
);

508 
i
;

509 
i
 = 0; i < 
c
->
nupvÆues
; i++) {

510 i‡(
c
->
upvÆs
[
i
]->
v
 =
o
) {

511 *
«me
 = 
	`upvÆ«me
(
c
->
p
, 
i
);

515  
NULL
;

516 
	}
}

519 c⁄° *
	$v¨öfo
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
o
) {

520 c⁄° *
«me
 = 
NULL
;

521 
CÆlInfo
 *
ci
 = 
L
->ci;

522 c⁄° *
köd
 = 
NULL
;

523 i‡(
	`isLua
(
ci
)) {

524 
köd
 = 
	`gëupvÆ«me
(
ci
, 
o
, &
«me
);

525 i‡(!
köd
 && 
	`isö°ack
(
ci
, 
o
))

526 
köd
 = 
	`gëobj«me
(
	`ci_func
(
ci
)->
p
, 
	`cuºíçc
(ci),

527 
	`ˇ°_öt
(
o
 - 
ci
->
u
.
l
.
ba£
), &
«me
);

529  (
köd
Ë? 
	`luaO_pushf°rög
(
L
, " (%†'%s')", köd, 
«me
) : "";

530 
	}
}

533 
l_n‹ë
 
	$luaG_ty≥îr‹
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
o
, c⁄° *
›
) {

534 c⁄° *
t
 = 
	`objty≥«me
(
o
);

535 
	`luaG_ru√º‹
(
L
, "©ãm±Åÿ%†®%†vÆue%s", 
›
, 
t
, 
	`v¨öfo
(L, 
o
));

536 
	}
}

539 
l_n‹ë
 
	$luaG_c⁄ˇãº‹
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
p1
, c⁄° TVÆuê*
p2
) {

540 i‡(
	`âis°rög
(
p1
Ë|| 
	`cvt2°r
’1)Ëp1 = 
p2
;

541 
	`luaG_ty≥îr‹
(
L
, 
p1
, "concatenate");

542 
	}
}

545 
l_n‹ë
 
	$luaG_›öãº‹
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
p1
,

546 c⁄° 
TVÆue
 *
p2
, c⁄° *
msg
) {

547 
lua_Numbî
 
ãmp
;

548 i‡(!
	`t⁄umbî
(
p1
, &
ãmp
))

549 
p2
 = 
p1
;

550 
	`luaG_ty≥îr‹
(
L
, 
p2
, 
msg
);

551 
	}
}

557 
l_n‹ë
 
	$luaG_toöãº‹
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
p1
, c⁄° TVÆuê*
p2
) {

558 
lua_I¡egî
 
ãmp
;

559 i‡(!
	`toöãgî
(
p1
, &
ãmp
))

560 
p2
 = 
p1
;

561 
	`luaG_ru√º‹
(
L
, "numbî%†ha†nÿöãgîÑïª£¡©i⁄", 
	`v¨öfo
(L, 
p2
));

562 
	}
}

565 
l_n‹ë
 
	$luaG_‹dîîr‹
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
p1
, c⁄° TVÆuê*
p2
) {

566 c⁄° *
t1
 = 
	`objty≥«me
(
p1
);

567 c⁄° *
t2
 = 
	`objty≥«me
(
p2
);

568 i‡(
t1
 =
t2
)

569 
	`luaG_ru√º‹
(
L
, "©ãm±Åÿcom∑ªÅwÿ%†vÆues", 
t1
);

571 
	`luaG_ru√º‹
(
L
, "©ãm±Åÿcom∑ª %†wôh %s", 
t1
, 
t2
);

572 
	}
}

575 
	$addöfo
 (
lua_Sèã
 *
L
, c⁄° *
msg
) {

576 
CÆlInfo
 *
ci
 = 
L
->ci;

577 i‡(
	`isLua
(
ci
)) {

578 
buff
[
LUA_IDSIZE
];

579 
löe
 = 
	`cuºíéöe
(
ci
);

580 
TSåög
 *
§c
 = 
	`ci_func
(
ci
)->
p
->
sour˚
;

581 i‡(
§c
)

582 
	`luaO_chunkid
(
buff
, 
	`gë°r
(
§c
), 
LUA_IDSIZE
);

584 
buff
[0] = '?'; buff[1] = '\0';

586 
	`luaO_pushf°rög
(
L
, "%s:%d: %s", 
buff
, 
löe
, 
msg
);

588 
	}
}

591 
l_n‹ë
 
	$luaG_îr‹msg
 (
lua_Sèã
 *
L
) {

592 i‡(
L
->
îrfunc
 != 0) {

593 
StkId
 
îrfunc
 = 
	`ª°‹e°ack
(
L
, L->errfunc);

594 
	`£tobjs2s
(
L
, L->
t›
, L->top - 1);

595 
	`£tobjs2s
(
L
, L->
t›
 - 1, 
îrfunc
);

596 
L
->
t›
++;

597 
	`luaD_ˇŒ
(
L
, L->
t›
 - 2, 1, 0);

599 
	`luaD_throw
(
L
, 
LUA_ERRRUN
);

600 
	}
}

603 
l_n‹ë
 
	$luaG_ru√º‹
 (
lua_Sèã
 *
L
, c⁄° *
fmt
, ...) {

604 
va_li°
 
¨gp
;

605 
	`va_°¨t
(
¨gp
, 
fmt
);

606 
	`addöfo
(
L
, 
	`luaO_pushvf°rög
(L, 
fmt
, 
¨gp
));

607 
	`va_íd
(
¨gp
);

608 
	`luaG_îr‹msg
(
L
);

609 
	}
}

612 
	$luaG_åa˚exec
 (
lua_Sèã
 *
L
) {

613 
CÆlInfo
 *
ci
 = 
L
->ci;

614 
lu_byã
 
mask
 = 
L
->
hookmask
;

615 
cou¡hook
 = ((
mask
 & 
LUA_MASKCOUNT
Ë&& 
L
->
hookcou¡
 == 0);

616 i‡(
cou¡hook
)

617 
	`ª£thookcou¡
(
L
);

618 i‡(
ci
->
ˇŒ°©us
 & 
CIST_HOOKYIELD
) {

619 
ci
->
ˇŒ°©us
 &~
CIST_HOOKYIELD
;

622 i‡(
cou¡hook
)

623 
	`luaD_hook
(
L
, 
LUA_HOOKCOUNT
, -1);

624 i‡(
mask
 & 
LUA_MASKLINE
) {

625 
PrŸo
 *
p
 = 
	`ci_func
(
ci
)->p;

626 
≈c
 = 
	`pcRñ
(
ci
->
u
.
l
.
ßvedpc
, 
p
);

627 
√wlöe
 = 
	`gëfun˛öe
(
p
, 
≈c
);

628 i‡(
≈c
 == 0 ||

629 
ci
->
u
.
l
.
ßvedpc
 <
L
->
ﬁdpc
 ||

630 
√wlöe
 !
	`gëfun˛öe
(
p
, 
	`pcRñ
(
L
->
ﬁdpc
,Ö)))

631 
	`luaD_hook
(
L
, 
LUA_HOOKLINE
, 
√wlöe
);

633 
L
->
ﬁdpc
 = 
ci
->
u
.
l
.
ßvedpc
;

634 i‡(
L
->
°©us
 =
LUA_YIELD
) {

635 i‡(
cou¡hook
)

636 
L
->
hookcou¡
 = 1;

637 
ci
->
u
.
l
.
ßvedpc
--;

638 
ci
->
ˇŒ°©us
 |
CIST_HOOKYIELD
;

639 
ci
->
func
 = 
L
->
t›
 - 1;

640 
	`luaD_throw
(
L
, 
LUA_YIELD
);

642 
	}
}

	@lib/archive/lua-5.3.0/src/ldebug.h

7 #i‚de‡
ldebug_h


8 
	#ldebug_h


	)

11 
	~"l°©e.h
"

14 
	#pcRñ
(
pc
, 
p
Ë(
	`ˇ°
(, (pcË- (p)->
code
Ë- 1)

	)

16 
	#gëfun˛öe
(
f
,
pc
Ë(((f)->
löeöfo
Ë? (f)->löeöfo[pc] : -1)

	)

18 
	#ª£thookcou¡
(
L
Ë(L->
hookcou¡
 = L->
ba£hookcou¡
)

	)

21 
	#ci_func
(
ci
Ë(
	`˛LvÆue
((ci)->
func
))

	)

24 
LUAI_FUNC
 
l_n‹ë
 
luaG_ty≥îr‹
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
o
,

25 c⁄° *
›«me
);

26 
LUAI_FUNC
 
l_n‹ë
 
luaG_c⁄ˇãº‹
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
p1
,

27 c⁄° 
TVÆue
 *
p2
);

28 
LUAI_FUNC
 
l_n‹ë
 
luaG_›öãº‹
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
p1
,

29 c⁄° 
TVÆue
 *
p2
,

30 c⁄° *
msg
);

31 
LUAI_FUNC
 
l_n‹ë
 
luaG_toöãº‹
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
p1
,

32 c⁄° 
TVÆue
 *
p2
);

33 
LUAI_FUNC
 
l_n‹ë
 
luaG_‹dîîr‹
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
p1
,

34 c⁄° 
TVÆue
 *
p2
);

35 
LUAI_FUNC
 
l_n‹ë
 
luaG_ru√º‹
 (
lua_Sèã
 *
L
, c⁄° *
fmt
, ...);

36 
LUAI_FUNC
 
l_n‹ë
 
luaG_îr‹msg
 (
lua_Sèã
 *
L
);

37 
LUAI_FUNC
 
luaG_åa˚exec
 (
lua_Sèã
 *
L
);

	@lib/archive/lua-5.3.0/src/ldo.c

7 
	#ldo_c


	)

8 
	#LUA_CORE


	)

10 
	~"Õªfix.h
"

13 
	~<£tjmp.h
>

14 
	~<°dlib.h
>

15 
	~<°rög.h
>

17 
	~"lua.h
"

19 
	~"œpi.h
"

20 
	~"ldebug.h
"

21 
	~"ldo.h
"

22 
	~"lfunc.h
"

23 
	~"lgc.h
"

24 
	~"lmem.h
"

25 
	~"lobje˘.h
"

26 
	~"l›codes.h
"

27 
	~"Õ¨£r.h
"

28 
	~"l°©e.h
"

29 
	~"l°rög.h
"

30 
	~"…abÀ.h
"

31 
	~"…m.h
"

32 
	~"lundump.h
"

33 
	~"lvm.h
"

34 
	~"lzio.h
"

38 
	#îr‹°©us
(
s
Ë((sË> 
LUA_YIELD
)

	)

53 #i‡!
deföed
(
LUAI_THROW
)

55 #i‡
deföed
(
__˝lu•lus
Ë&& !deföed(
LUA_USE_LONGJMP
)

58 
	#LUAI_THROW
(
L
,
c
Ë
	`throw
(c)

	)

59 
	#LUAI_TRY
(
L
,
c
,
a
) \

60 
åy
 { 
a
 } 
	`ˇtch
(...Ë{ i‡((
c
)->
°©us
 =0Ë(c)->°©u†-1; }

	)

61 
	#luai_jmpbuf
 

	)

63 #ñi‡
deföed
(
LUA_USE_POSIX
)

66 
	#LUAI_THROW
(
L
,
c
Ë
	`_l⁄gjmp
((c)->
b
, 1)

	)

67 
	#LUAI_TRY
(
L
,
c
,
a
Ëi‡(
	`_£tjmp
((c)->
b
Ë=0Ë{á }

	)

68 
	#luai_jmpbuf
 
jmp_buf


	)

73 
	#LUAI_THROW
(
L
,
c
Ë
	`l⁄gjmp
((c)->
b
, 1)

	)

74 
	#LUAI_TRY
(
L
,
c
,
a
Ëi‡(
	`£tjmp
((c)->
b
Ë=0Ë{á }

	)

75 
	#luai_jmpbuf
 
jmp_buf


	)

84 
	slua_l⁄gjmp
 {

85 
lua_l⁄gjmp
 *
	m¥evious
;

86 
luai_jmpbuf
 
	mb
;

87 vﬁ©ûê
	m°©us
;

91 
	$£ãº‹obj
 (
lua_Sèã
 *
L
, 
îrcode
, 
StkId
 
ﬁdt›
) {

92 
îrcode
) {

93 
LUA_ERRMEM
: {

94 
	`£tsvÆue2s
(
L
, 
ﬁdt›
, 
	`G
(L)->
memîrmsg
);

97 
LUA_ERRERR
: {

98 
	`£tsvÆue2s
(
L
, 
ﬁdt›
, 
	`luaS_√wlôîÆ
(L, "error inÉrror handling"));

102 
	`£tobjs2s
(
L
, 
ﬁdt›
, L->
t›
 - 1);

106 
L
->
t›
 = 
ﬁdt›
 + 1;

107 
	}
}

110 
l_n‹ë
 
	$luaD_throw
 (
lua_Sèã
 *
L
, 
îrcode
) {

111 i‡(
L
->
îr‹Jmp
) {

112 
L
->
îr‹Jmp
->
°©us
 = 
îrcode
;

113 
	`LUAI_THROW
(
L
, L->
îr‹Jmp
);

116 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

117 
L
->
°©us
 = 
	`ˇ°_byã
(
îrcode
);

118 i‡(
g
->
maöthªad
->
îr‹Jmp
) {

119 
	`£tobjs2s
(
L
, 
g
->
maöthªad
->
t›
++, L->top - 1);

120 
	`luaD_throw
(
g
->
maöthªad
, 
îrcode
);

123 i‡(
g
->
∑nic
) {

124 
	`£ãº‹obj
(
L
, 
îrcode
, L->
t›
);

125 i‡(
L
->
ci
->
t›
 < L->top)

126 
L
->
ci
->
t›
 = L->top;

127 
	`lua_u∆ock
(
L
);

128 
g
->
	`∑nic
(
L
);

130 
	`ab‹t
();

133 
	}
}

136 
	$luaD_øwru≈rŸe˘ed
 (
lua_Sèã
 *
L
, 
Pfunc
 
f
, *
ud
) {

137 
ﬁdnCˇŒs
 = 
L
->
nCˇŒs
;

138 
lua_l⁄gjmp
 
lj
;

139 
lj
.
°©us
 = 
LUA_OK
;

140 
lj
.
¥evious
 = 
L
->
îr‹Jmp
;

141 
L
->
îr‹Jmp
 = &
lj
;

142 
	`LUAI_TRY
(
L
, &
lj
,

143 (*
f
)(
L
, 
ud
);

145 
L
->
îr‹Jmp
 = 
lj
.
¥evious
;

146 
L
->
nCˇŒs
 = 
ﬁdnCˇŒs
;

147  
lj
.
°©us
;

148 
	}
}

153 
	$c‹ª˘°ack
 (
lua_Sèã
 *
L
, 
TVÆue
 *
ﬁd°ack
) {

154 
CÆlInfo
 *
ci
;

155 
UpVÆ
 *
up
;

156 
L
->
t›
 = (L->t› - 
ﬁd°ack
Ë+ L->
°ack
;

157 
up
 = 
L
->
›íupvÆ
; u∞!
NULL
; u∞up->
u
.
›í
.
√xt
)

158 
up
->
v
 = (up->v - 
ﬁd°ack
Ë+ 
L
->
°ack
;

159 
ci
 = 
L
->ci; cò!
NULL
; còci->
¥evious
) {

160 
ci
->
t›
 = (ci->t› - 
ﬁd°ack
Ë+ 
L
->
°ack
;

161 
ci
->
func
 = (ci->fun¯- 
ﬁd°ack
Ë+ 
L
->
°ack
;

162 i‡(
	`isLua
(
ci
))

163 
ci
->
u
.
l
.
ba£
 = (ci->u.l.ba£ - 
ﬁd°ack
Ë+ 
L
->
°ack
;

165 
	}
}

169 
	#ERRORSTACKSIZE
 (
LUAI_MAXSTACK
 + 200)

	)

172 
	$luaD_ªÆloc°ack
 (
lua_Sèã
 *
L
, 
√wsize
) {

173 
TVÆue
 *
ﬁd°ack
 = 
L
->
°ack
;

174 
lim
 = 
L
->
°acksize
;

175 
	`lua_as£π
(
√wsize
 <
LUAI_MAXSTACK
 ||Çewsizê=
ERRORSTACKSIZE
);

176 
	`lua_as£π
(
L
->
°ack_œ°
 - L->
°ack
 =L->
°acksize
 - 
EXTRA_STACK
);

177 
	`luaM_ªÆlocve˘‹
(
L
, L->
°ack
, L->
°acksize
, 
√wsize
, 
TVÆue
);

178 ; 
lim
 < 
√wsize
;Üim++)

179 
	`£äûvÆue
(
L
->
°ack
 + 
lim
);

180 
L
->
°acksize
 = 
√wsize
;

181 
L
->
°ack_œ°
 = L->
°ack
 + 
√wsize
 - 
EXTRA_STACK
;

182 
	`c‹ª˘°ack
(
L
, 
ﬁd°ack
);

183 
	}
}

186 
	$luaD_grow°ack
 (
lua_Sèã
 *
L
, 
n
) {

187 
size
 = 
L
->
°acksize
;

188 i‡(
size
 > 
LUAI_MAXSTACK
)

189 
	`luaD_throw
(
L
, 
LUA_ERRERR
);

191 
√eded
 = 
	`ˇ°_öt
(
L
->
t›
 - L->
°ack
Ë+ 
n
 + 
EXTRA_STACK
;

192 
√wsize
 = 2 * 
size
;

193 i‡(
√wsize
 > 
LUAI_MAXSTACK
)Çewsize = LUAI_MAXSTACK;

194 i‡(
√wsize
 < 
√eded
)Çewsize =Çeeded;

195 i‡(
√wsize
 > 
LUAI_MAXSTACK
) {

196 
	`luaD_ªÆloc°ack
(
L
, 
ERRORSTACKSIZE
);

197 
	`luaG_ru√º‹
(
L
, "stack overflow");

200 
	`luaD_ªÆloc°ack
(
L
, 
√wsize
);

202 
	}
}

205 
	$°acköu£
 (
lua_Sèã
 *
L
) {

206 
CÆlInfo
 *
ci
;

207 
StkId
 
lim
 = 
L
->
t›
;

208 
ci
 = 
L
->ci; cò!
NULL
; còci->
¥evious
) {

209 
	`lua_as£π
(
ci
->
t›
 <
L
->
°ack_œ°
);

210 i‡(
lim
 < 
ci
->
t›
)Üim = ci->top;

212  
	`ˇ°_öt
(
lim
 - 
L
->
°ack
) + 1;

213 
	}
}

216 
	$luaD_shrök°ack
 (
lua_Sèã
 *
L
) {

217 
öu£
 = 
	`°acköu£
(
L
);

218 
goodsize
 = 
öu£
 + (öu£ / 8Ë+ 2*
EXTRA_STACK
;

219 i‡(
goodsize
 > 
LUAI_MAXSTACK
) goodsize = LUAI_MAXSTACK;

220 i‡(
L
->
°acksize
 > 
LUAI_MAXSTACK
)

221 
	`luaE_‰ìCI
(
L
);

223 
	`luaE_shrökCI
(
L
);

224 i‡(
öu£
 > 
LUAI_MAXSTACK
 ||

225 
goodsize
 >
L
->
°acksize
)

226 
	`c⁄dmove°ack
(
L
);

228 
	`luaD_ªÆloc°ack
(
L
, 
goodsize
);

229 
	}
}

232 
	$luaD_hook
 (
lua_Sèã
 *
L
, 
evít
, 
löe
) {

233 
lua_Hook
 
hook
 = 
L
->hook;

234 i‡(
hook
 && 
L
->
Ælowhook
) {

235 
CÆlInfo
 *
ci
 = 
L
->ci;

236 
±rdiff_t
 
t›
 = 
	`ßve°ack
(
L
, L->top);

237 
±rdiff_t
 
ci_t›
 = 
	`ßve°ack
(
L
, 
ci
->
t›
);

238 
lua_Debug
 
¨
;

239 
¨
.
evít
 =Évent;

240 
¨
.
cuºíéöe
 = 
löe
;

241 
¨
.
i_ci
 = 
ci
;

242 
	`luaD_check°ack
(
L
, 
LUA_MINSTACK
);

243 
ci
->
t›
 = 
L
->t› + 
LUA_MINSTACK
;

244 
	`lua_as£π
(
ci
->
t›
 <
L
->
°ack_œ°
);

245 
L
->
Ælowhook
 = 0;

246 
ci
->
ˇŒ°©us
 |
CIST_HOOKED
;

247 
	`lua_u∆ock
(
L
);

248 (*
hook
)(
L
, &
¨
);

249 
	`lua_lock
(
L
);

250 
	`lua_as£π
(!
L
->
Ælowhook
);

251 
L
->
Ælowhook
 = 1;

252 
ci
->
t›
 = 
	`ª°‹e°ack
(
L
, 
ci_t›
);

253 
L
->
t›
 = 
	`ª°‹e°ack
(L,Åop);

254 
ci
->
ˇŒ°©us
 &~
CIST_HOOKED
;

256 
	}
}

259 
	$ˇŒhook
 (
lua_Sèã
 *
L
, 
CÆlInfo
 *
ci
) {

260 
hook
 = 
LUA_HOOKCALL
;

261 
ci
->
u
.
l
.
ßvedpc
++;

262 i‡(
	`isLua
(
ci
->
¥evious
) &&

263 
	`GET_OPCODE
(*(
ci
->
¥evious
->
u
.
l
.
ßvedpc
 - 1)Ë=
OP_TAILCALL
) {

264 
ci
->
ˇŒ°©us
 |
CIST_TAIL
;

265 
hook
 = 
LUA_HOOKTAILCALL
;

267 
	`luaD_hook
(
L
, 
hook
, -1);

268 
ci
->
u
.
l
.
ßvedpc
--;

269 
	}
}

272 
StkId
 
	$adju°_v¨¨gs
 (
lua_Sèã
 *
L
, 
PrŸo
 *
p
, 
a˘uÆ
) {

273 
i
;

274 
nfix¨gs
 = 
p
->
num∑øms
;

275 
StkId
 
ba£
, 
fixed
;

276 
	`lua_as£π
(
a˘uÆ
 >
nfix¨gs
);

278 
	`luaD_check°ack
(
L
, 
p
->
max°acksize
);

279 
fixed
 = 
L
->
t›
 - 
a˘uÆ
;

280 
ba£
 = 
L
->
t›
;

281 
i
=0; i<
nfix¨gs
; i++) {

282 
	`£tobjs2s
(
L
, L->
t›
++, 
fixed
 + 
i
);

283 
	`£äûvÆue
(
fixed
 + 
i
);

285  
ba£
;

286 
	}
}

294 
	$åyfuncTM
 (
lua_Sèã
 *
L
, 
StkId
 
func
) {

295 c⁄° 
TVÆue
 *
tm
 = 
	`luaT_gëtmbyobj
(
L
, 
func
, 
TM_CALL
);

296 
StkId
 
p
;

297 i‡(!
	`âisfun˘i⁄
(
tm
))

298 
	`luaG_ty≥îr‹
(
L
, 
func
, "call");

300 
p
 = 
L
->
t›
;Ö > 
func
;Ö--)

301 
	`£tobjs2s
(
L
, 
p
,Ö-1);

302 
L
->
t›
++;

303 
	`£tobj2s
(
L
, 
func
, 
tm
);

304 
	}
}

308 
	#√xt_ci
(
L
Ë(L->
ci
 = (L->ci->
√xt
 ? L->ci->√xà: 
	`luaE_exãndCI
(L)))

	)

314 
	$luaD_¥eˇŒ
 (
lua_Sèã
 *
L
, 
StkId
 
func
, 
ƒesu…s
) {

315 
lua_CFun˘i⁄
 
f
;

316 
CÆlInfo
 *
ci
;

317 
n
;

318 
±rdiff_t
 
fun¸
 = 
	`ßve°ack
(
L
, 
func
);

319 
	`ây≥
(
func
)) {

320 
LUA_TLCF
:

321 
f
 = 
	`fvÆue
(
func
);

322 
Cfunc
;

323 
LUA_TCCL
: {

324 
f
 = 
	`˛CvÆue
(
func
)->f;

325 
Cfunc
:

326 
	`luaD_check°ack
(
L
, 
LUA_MINSTACK
);

327 
ci
 = 
	`√xt_ci
(
L
);

328 
ci
->
ƒesu…s
 =Çresults;

329 
ci
->
func
 = 
	`ª°‹e°ack
(
L
, 
fun¸
);

330 
ci
->
t›
 = 
L
->t› + 
LUA_MINSTACK
;

331 
	`lua_as£π
(
ci
->
t›
 <
L
->
°ack_œ°
);

332 
ci
->
ˇŒ°©us
 = 0;

333 
	`luaC_checkGC
(
L
);

334 i‡(
L
->
hookmask
 & 
LUA_MASKCALL
)

335 
	`luaD_hook
(
L
, 
LUA_HOOKCALL
, -1);

336 
	`lua_u∆ock
(
L
);

337 
n
 = (*
f
)(
L
);

338 
	`lua_lock
(
L
);

339 
	`≠i_check√Àms
(
L
, 
n
);

340 
	`luaD_posˇŒ
(
L
, L->
t›
 - 
n
);

343 
LUA_TLCL
: {

344 
StkId
 
ba£
;

345 
PrŸo
 *
p
 = 
	`˛LvÆue
(
func
)->p;

346 
n
 = 
	`ˇ°_öt
(
L
->
t›
 - 
func
) - 1;

347 
	`luaD_check°ack
(
L
, 
p
->
max°acksize
);

348 ; 
n
 < 
p
->
num∑øms
;Ç++)

349 
	`£äûvÆue
(
L
->
t›
++);

350 i‡(!
p
->
is_v¨¨g
) {

351 
func
 = 
	`ª°‹e°ack
(
L
, 
fun¸
);

352 
ba£
 = 
func
 + 1;

355 
ba£
 = 
	`adju°_v¨¨gs
(
L
, 
p
, 
n
);

356 
func
 = 
	`ª°‹e°ack
(
L
, 
fun¸
);

358 
ci
 = 
	`√xt_ci
(
L
);

359 
ci
->
ƒesu…s
 =Çresults;

360 
ci
->
func
 = func;

361 
ci
->
u
.
l
.
ba£
 = base;

362 
ci
->
t›
 = 
ba£
 + 
p
->
max°acksize
;

363 
	`lua_as£π
(
ci
->
t›
 <
L
->
°ack_œ°
);

364 
ci
->
u
.
l
.
ßvedpc
 = 
p
->
code
;

365 
ci
->
ˇŒ°©us
 = 
CIST_LUA
;

366 
L
->
t›
 = 
ci
->top;

367 
	`luaC_checkGC
(
L
);

368 i‡(
L
->
hookmask
 & 
LUA_MASKCALL
)

369 
	`ˇŒhook
(
L
, 
ci
);

373 
	`luaD_check°ack
(
L
, 1);

374 
func
 = 
	`ª°‹e°ack
(
L
, 
fun¸
);

375 
	`åyfuncTM
(
L
, 
func
);

376  
	`luaD_¥eˇŒ
(
L
, 
func
, 
ƒesu…s
);

379 
	}
}

382 
	$luaD_posˇŒ
 (
lua_Sèã
 *
L
, 
StkId
 
fú°Resu…
) {

383 
StkId
 
ªs
;

384 
w™ãd
, 
i
;

385 
CÆlInfo
 *
ci
 = 
L
->ci;

386 i‡(
L
->
hookmask
 & (
LUA_MASKRET
 | 
LUA_MASKLINE
)) {

387 i‡(
L
->
hookmask
 & 
LUA_MASKRET
) {

388 
±rdiff_t
 
‰
 = 
	`ßve°ack
(
L
, 
fú°Resu…
);

389 
	`luaD_hook
(
L
, 
LUA_HOOKRET
, -1);

390 
fú°Resu…
 = 
	`ª°‹e°ack
(
L
, 
‰
);

392 
L
->
ﬁdpc
 = 
ci
->
¥evious
->
u
.
l
.
ßvedpc
;

394 
ªs
 = 
ci
->
func
;

395 
w™ãd
 = 
ci
->
ƒesu…s
;

396 
L
->
ci
 = còci->
¥evious
;

398 
i
 = 
w™ãd
; i !0 && 
fú°Resu…
 < 
L
->
t›
; i--)

399 
	`£tobjs2s
(
L
, 
ªs
++, 
fú°Resu…
++);

400 
i
-- > 0)

401 
	`£äûvÆue
(
ªs
++);

402 
L
->
t›
 = 
ªs
;

403  (
w™ãd
 - 
LUA_MULTRET
);

404 
	}
}

413 
	$luaD_ˇŒ
 (
lua_Sèã
 *
L
, 
StkId
 
func
, 
nResu…s
, 
Ælowyõld
) {

414 i‡(++
L
->
nCˇŒs
 >
LUAI_MAXCCALLS
) {

415 i‡(
L
->
nCˇŒs
 =
LUAI_MAXCCALLS
)

416 
	`luaG_ru√º‹
(
L
, "C stack overflow");

417 i‡(
L
->
nCˇŒs
 >(
LUAI_MAXCCALLS
 + (LUAI_MAXCCALLS>>3)))

418 
	`luaD_throw
(
L
, 
LUA_ERRERR
);

420 i‡(!
Ælowyõld
Ë
L
->
¬y
++;

421 i‡(!
	`luaD_¥eˇŒ
(
L
, 
func
, 
nResu…s
))

422 
	`luaV_execuã
(
L
);

423 i‡(!
Ælowyõld
Ë
L
->
¬y
--;

424 
L
->
nCˇŒs
--;

425 
	}
}

432 
	$föishCˇŒ
 (
lua_Sèã
 *
L
, 
°©us
) {

433 
CÆlInfo
 *
ci
 = 
L
->ci;

434 
n
;

436 
	`lua_as£π
(
ci
->
u
.
c
.
k
 !
NULL
 && 
L
->
¬y
 == 0);

438 
	`lua_as£π
((
ci
->
ˇŒ°©us
 & 
CIST_YPCALL
Ë|| 
°©us
 =
LUA_YIELD
);

439 i‡(
ci
->
ˇŒ°©us
 & 
CIST_YPCALL
) {

440 
ci
->
ˇŒ°©us
 &~
CIST_YPCALL
;

441 
L
->
îrfunc
 = 
ci
->
u
.
c
.
ﬁd_îrfunc
;

445 
	`adju°ªsu…s
(
L
, 
ci
->
ƒesu…s
);

447 
	`lua_u∆ock
(
L
);

448 
n
 = (*
ci
->
u
.
c
.
k
)(
L
, 
°©us
, ci->u.c.
˘x
);

449 
	`lua_lock
(
L
);

450 
	`≠i_check√Àms
(
L
, 
n
);

452 
	`luaD_posˇŒ
(
L
, L->
t›
 - 
n
);

453 
	}
}

464 
	$uƒﬁl
 (
lua_Sèã
 *
L
, *
ud
) {

465 i‡(
ud
 !
NULL
)

466 
	`föishCˇŒ
(
L
, *(*)
ud
);

467 
L
->
ci
 !&L->
ba£_ci
) {

468 i‡(!
	`isLua
(
L
->
ci
))

469 
	`föishCˇŒ
(
L
, 
LUA_YIELD
);

471 
	`luaV_föishOp
(
L
);

472 
	`luaV_execuã
(
L
);

475 
	}
}

482 
CÆlInfo
 *
	$födpˇŒ
 (
lua_Sèã
 *
L
) {

483 
CÆlInfo
 *
ci
;

484 
ci
 = 
L
->ci; cò!
NULL
; còci->
¥evious
) {

485 i‡(
ci
->
ˇŒ°©us
 & 
CIST_YPCALL
)

486  
ci
;

488  
NULL
;

489 
	}
}

497 
	$ªcovî
 (
lua_Sèã
 *
L
, 
°©us
) {

498 
StkId
 
ﬁdt›
;

499 
CÆlInfo
 *
ci
 = 
	`födpˇŒ
(
L
);

500 i‡(
ci
 =
NULL
)  0;

502 
ﬁdt›
 = 
	`ª°‹e°ack
(
L
, 
ci
->
exåa
);

503 
	`luaF_˛o£
(
L
, 
ﬁdt›
);

504 
	`£ãº‹obj
(
L
, 
°©us
, 
ﬁdt›
);

505 
L
->
ci
 = ci;

506 
L
->
Ælowhook
 = 
	`gëﬂh
(
ci
->
ˇŒ°©us
);

507 
L
->
¬y
 = 0;

508 
	`luaD_shrök°ack
(
L
);

509 
L
->
îrfunc
 = 
ci
->
u
.
c
.
ﬁd_îrfunc
;

511 
	}
}

519 
l_n‹ë
 
	$ªsume_îr‹
 (
lua_Sèã
 *
L
, c⁄° *
msg
, 
StkId
 
fú°Arg
) {

520 
L
->
t›
 = 
fú°Arg
;

521 
	`£tsvÆue2s
(
L
, L->
t›
, 
	`luaS_√w
(L, 
msg
));

522 
	`≠i_ö¸_t›
(
L
);

523 
	`luaD_throw
(
L
, -1);

524 
	}
}

534 
	$ªsume
 (
lua_Sèã
 *
L
, *
ud
) {

535 
nCˇŒs
 = 
L
->nCcalls;

536 
StkId
 
fú°Arg
 = 
	`ˇ°
(StkId, 
ud
);

537 
CÆlInfo
 *
ci
 = 
L
->ci;

538 i‡(
nCˇŒs
 >
LUAI_MAXCCALLS
)

539 
	`ªsume_îr‹
(
L
, "C sèck ovîÊow", 
fú°Arg
);

540 i‡(
L
->
°©us
 =
LUA_OK
) {

541 i‡(
ci
 !&
L
->
ba£_ci
)

542 
	`ªsume_îr‹
(
L
, "ˇ¬ŸÑesumên⁄-su•íded c‹outöe", 
fú°Arg
);

544 i‡(!
	`luaD_¥eˇŒ
(
L
, 
fú°Arg
 - 1, 
LUA_MULTRET
))

545 
	`luaV_execuã
(
L
);

547 i‡(
L
->
°©us
 !
LUA_YIELD
)

548 
	`ªsume_îr‹
(
L
, "ˇ¬ŸÑesumêdód c‹outöe", 
fú°Arg
);

550 
L
->
°©us
 = 
LUA_OK
;

551 
ci
->
func
 = 
	`ª°‹e°ack
(
L
, ci->
exåa
);

552 i‡(
	`isLua
(
ci
))

553 
	`luaV_execuã
(
L
);

555 i‡(
ci
->
u
.
c
.
k
 !
NULL
) {

556 
n
;

557 
	`lua_u∆ock
(
L
);

558 
n
 = (*
ci
->
u
.
c
.
k
)(
L
, 
LUA_YIELD
, ci->u.c.
˘x
);

559 
	`lua_lock
(
L
);

560 
	`≠i_check√Àms
(
L
, 
n
);

561 
fú°Arg
 = 
L
->
t›
 - 
n
;

563 
	`luaD_posˇŒ
(
L
, 
fú°Arg
);

565 
	`uƒﬁl
(
L
, 
NULL
);

567 
	`lua_as£π
(
nCˇŒs
 =
L
->nCcalls);

568 
	}
}

571 
LUA_API
 
	$lua_ªsume
 (
lua_Sèã
 *
L
,Üua_Sèã *
‰om
, 
«rgs
) {

572 
°©us
;

573 
ﬁd¬y
 = 
L
->
¬y
;

574 
	`lua_lock
(
L
);

575 
	`luai_u£r°©îesume
(
L
, 
«rgs
);

576 
L
->
nCˇŒs
 = (
‰om
) ? from->nCcalls + 1 : 1;

577 
L
->
¬y
 = 0;

578 
	`≠i_check√Àms
(
L
, (L->
°©us
 =
LUA_OK
Ë? 
«rgs
 + 1 :Çargs);

579 
°©us
 = 
	`luaD_øwru≈rŸe˘ed
(
L
, 
ªsume
, L->
t›
 - 
«rgs
);

580 i‡(
°©us
 == -1)

581 
°©us
 = 
LUA_ERRRUN
;

583 
	`îr‹°©us
(
°©us
Ë&& 
	`ªcovî
(
L
, status)) {

585 
°©us
 = 
	`luaD_øwru≈rŸe˘ed
(
L
, 
uƒﬁl
, &status);

587 i‡(
	`îr‹°©us
(
°©us
)) {

588 
L
->
°©us
 = 
	`ˇ°_byã
(status);

589 
	`£ãº‹obj
(
L
, 
°©us
, L->
t›
);

590 
L
->
ci
->
t›
 = L->top;

592 
	`lua_as£π
(
°©us
 =
L
->status);

594 
L
->
¬y
 = 
ﬁd¬y
;

595 
L
->
nCˇŒs
--;

596 
	`lua_as£π
(
L
->
nCˇŒs
 =((
‰om
) ? from->nCcalls : 0));

597 
	`lua_u∆ock
(
L
);

598  
°©us
;

599 
	}
}

602 
LUA_API
 
	$lua_isyõldabÀ
 (
lua_Sèã
 *
L
) {

603  (
L
->
¬y
 == 0);

604 
	}
}

607 
LUA_API
 
	$lua_yõldk
 (
lua_Sèã
 *
L
, 
ƒesu…s
, 
lua_KC⁄ãxt
 
˘x
,

608 
lua_KFun˘i⁄
 
k
) {

609 
CÆlInfo
 *
ci
 = 
L
->ci;

610 
	`luai_u£r°©eyõld
(
L
, 
ƒesu…s
);

611 
	`lua_lock
(
L
);

612 
	`≠i_check√Àms
(
L
, 
ƒesu…s
);

613 i‡(
L
->
¬y
 > 0) {

614 i‡(
L
 !
	`G
(L)->
maöthªad
)

615 
	`luaG_ru√º‹
(
L
, "attemptÅo yieldácrossá C-call boundary");

617 
	`luaG_ru√º‹
(
L
, "attemptÅo yield from outsideá coroutine");

619 
L
->
°©us
 = 
LUA_YIELD
;

620 
ci
->
exåa
 = 
	`ßve°ack
(
L
, ci->
func
);

621 i‡(
	`isLua
(
ci
)) {

622 
	`≠i_check
(
k
 =
NULL
, "hooks cannot continueáfter yielding");

625 i‡((
ci
->
u
.
c
.
k
 = kË!
NULL
)

626 
ci
->
u
.
c
.
˘x
 = ctx;

627 
ci
->
func
 = 
L
->
t›
 - 
ƒesu…s
 - 1;

628 
	`luaD_throw
(
L
, 
LUA_YIELD
);

630 
	`lua_as£π
(
ci
->
ˇŒ°©us
 & 
CIST_HOOKED
);

631 
	`lua_u∆ock
(
L
);

633 
	}
}

636 
	$luaD_pˇŒ
 (
lua_Sèã
 *
L
, 
Pfunc
 
func
, *
u
,

637 
±rdiff_t
 
ﬁd_t›
,Öådiff_à
ef
) {

638 
°©us
;

639 
CÆlInfo
 *
ﬁd_ci
 = 
L
->
ci
;

640 
lu_byã
 
ﬁd_Ælowhooks
 = 
L
->
Ælowhook
;

641 
ﬁd_¬y
 = 
L
->
¬y
;

642 
±rdiff_t
 
ﬁd_îrfunc
 = 
L
->
îrfunc
;

643 
L
->
îrfunc
 = 
ef
;

644 
°©us
 = 
	`luaD_øwru≈rŸe˘ed
(
L
, 
func
, 
u
);

645 i‡(
°©us
 !
LUA_OK
) {

646 
StkId
 
ﬁdt›
 = 
	`ª°‹e°ack
(
L
, 
ﬁd_t›
);

647 
	`luaF_˛o£
(
L
, 
ﬁdt›
);

648 
	`£ãº‹obj
(
L
, 
°©us
, 
ﬁdt›
);

649 
L
->
ci
 = 
ﬁd_ci
;

650 
L
->
Ælowhook
 = 
ﬁd_Ælowhooks
;

651 
L
->
¬y
 = 
ﬁd_¬y
;

652 
	`luaD_shrök°ack
(
L
);

654 
L
->
îrfunc
 = 
ﬁd_îrfunc
;

655  
°©us
;

656 
	}
}

663 
	sSP¨£r
 {

664 
ZIO
 *
	mz
;

665 
Mbuf„r
 
	mbuff
;

666 
Dynd©a
 
	mdyd
;

667 c⁄° *
	mmode
;

668 c⁄° *
	m«me
;

672 
	$checkmode
 (
lua_Sèã
 *
L
, c⁄° *
mode
, c⁄° *
x
) {

673 i‡(
mode
 && 
	`°rchr
(mode, 
x
[0]Ë=
NULL
) {

674 
	`luaO_pushf°rög
(
L
,

675 "©ãm±Åÿlﬂdá %†chunk (modêi†'%s')", 
x
, 
mode
);

676 
	`luaD_throw
(
L
, 
LUA_ERRSYNTAX
);

678 
	}
}

681 
	$f_∑r£r
 (
lua_Sèã
 *
L
, *
ud
) {

682 
LClosuª
 *
˛
;

683 
SP¨£r
 *
p
 = 
	`ˇ°
(SP¨£∏*, 
ud
);

684 
c
 = 
	`zgëc
(
p
->
z
);

685 i‡(
c
 =
LUA_SIGNATURE
[0]) {

686 
	`checkmode
(
L
, 
p
->
mode
, "binary");

687 
˛
 = 
	`luaU_undump
(
L
, 
p
->
z
, &p->
buff
,Ö->
«me
);

690 
	`checkmode
(
L
, 
p
->
mode
, "text");

691 
˛
 = 
	`luaY_∑r£r
(
L
, 
p
->
z
, &p->
buff
, &p->
dyd
,Ö->
«me
, 
c
);

693 
	`lua_as£π
(
˛
->
nupvÆues
 =˛->
p
->
sizeupvÆues
);

694 
	`luaF_öôupvÆs
(
L
, 
˛
);

695 
	}
}

698 
	$luaD_¥Ÿe˘ed∑r£r
 (
lua_Sèã
 *
L
, 
ZIO
 *
z
, c⁄° *
«me
,

699 c⁄° *
mode
) {

700 
SP¨£r
 
p
;

701 
°©us
;

702 
L
->
¬y
++;

703 
p
.
z
 = z;Ö.
«me
 =Çame;Ö.
mode
 = mode;

704 
p
.
dyd
.
a˘v¨
.
¨r
 = 
NULL
;Ö.dyd.a˘v¨.
size
 = 0;

705 
p
.
dyd
.
gt
.
¨r
 = 
NULL
;Ö.dyd.gt.
size
 = 0;

706 
p
.
dyd
.
œbñ
.
¨r
 = 
NULL
;Ö.dyd.œbñ.
size
 = 0;

707 
	`luaZ_öôbuf„r
(
L
, &
p
.
buff
);

708 
°©us
 = 
	`luaD_pˇŒ
(
L
, 
f_∑r£r
, &
p
, 
	`ßve°ack
(L, L->
t›
), L->
îrfunc
);

709 
	`luaZ_‰ìbuf„r
(
L
, &
p
.
buff
);

710 
	`luaM_‰ì¨øy
(
L
, 
p
.
dyd
.
a˘v¨
.
¨r
,Ö.dyd.a˘v¨.
size
);

711 
	`luaM_‰ì¨øy
(
L
, 
p
.
dyd
.
gt
.
¨r
,Ö.dyd.gt.
size
);

712 
	`luaM_‰ì¨øy
(
L
, 
p
.
dyd
.
œbñ
.
¨r
,Ö.dyd.œbñ.
size
);

713 
L
->
¬y
--;

714  
°©us
;

715 
	}
}

	@lib/archive/lua-5.3.0/src/ldo.h

7 #i‚de‡
ldo_h


8 
	#ldo_h


	)

11 
	~"lobje˘.h
"

12 
	~"l°©e.h
"

13 
	~"lzio.h
"

16 
	#luaD_check°ack
(
L
,
n
Ëi‡(L->
°ack_œ°
 - L->
t›
 <= (n)) \

17 
	`luaD_grow°ack
(
L
, 
n
); 
	`c⁄dmove°ack
(L);

	)

20 
	#ö¸_t›
(
L
Ë{L->
t›
++; 
	`luaD_check°ack
(L,0);}

	)

22 
	#ßve°ack
(
L
,
p
Ë((*)’Ë- (*)L->
°ack
)

	)

23 
	#ª°‹e°ack
(
L
,
n
Ë((
TVÆue
 *)((*)L->
°ack
 + (n)))

	)

27 (*
	tPfunc
Ë(
	tlua_Sèã
 *
	tL
, *
	tud
);

29 
LUAI_FUNC
 
	`luaD_¥Ÿe˘ed∑r£r
 (
lua_Sèã
 *
L
, 
ZIO
 *
z
, c⁄° *
«me
,

30 c⁄° *
mode
);

31 
LUAI_FUNC
 
	`luaD_hook
 (
lua_Sèã
 *
L
, 
evít
, 
löe
);

32 
LUAI_FUNC
 
	`luaD_¥eˇŒ
 (
lua_Sèã
 *
L
, 
StkId
 
func
, 
ƒesu…s
);

33 
LUAI_FUNC
 
	`luaD_ˇŒ
 (
lua_Sèã
 *
L
, 
StkId
 
func
, 
nResu…s
,

34 
Ælowyõld
);

35 
LUAI_FUNC
 
	`luaD_pˇŒ
 (
lua_Sèã
 *
L
, 
Pfunc
 
func
, *
u
,

36 
±rdiff_t
 
ﬁdt›
,Öådiff_à
ef
);

37 
LUAI_FUNC
 
	`luaD_posˇŒ
 (
lua_Sèã
 *
L
, 
StkId
 
fú°Resu…
);

38 
LUAI_FUNC
 
	`luaD_ªÆloc°ack
 (
lua_Sèã
 *
L
, 
√wsize
);

39 
LUAI_FUNC
 
	`luaD_grow°ack
 (
lua_Sèã
 *
L
, 
n
);

40 
LUAI_FUNC
 
	`luaD_shrök°ack
 (
lua_Sèã
 *
L
);

42 
LUAI_FUNC
 
l_n‹ë
 
	`luaD_throw
 (
lua_Sèã
 *
L
, 
îrcode
);

43 
LUAI_FUNC
 
	`luaD_øwru≈rŸe˘ed
 (
lua_Sèã
 *
L
, 
Pfunc
 
f
, *
ud
);

	@lib/archive/lua-5.3.0/src/ldump.c

7 
	#ldump_c


	)

8 
	#LUA_CORE


	)

10 
	~"Õªfix.h
"

13 
	~<°ddef.h
>

15 
	~"lua.h
"

17 
	~"lobje˘.h
"

18 
	~"l°©e.h
"

19 
	~"lundump.h
"

23 
lua_Sèã
 *
	mL
;

24 
lua_Wrôî
 
	mwrôî
;

25 *
	md©a
;

26 
	m°rù
;

27 
	m°©us
;

28 } 
	tDumpSèã
;

35 
	#DumpVe˘‹
(
v
,
n
,
D
Ë
	`DumpBlock
(v,“)*((v)[0]),D)

	)

37 
	#DumpLôîÆ
(
s
,
D
Ë
	`DumpBlock
(s, (sË- (), D)

	)

40 
	$DumpBlock
 (c⁄° *
b
, 
size_t
 
size
, 
DumpSèã
 *
D
) {

41 i‡(
D
->
°©us
 == 0) {

42 
	`lua_u∆ock
(
D
->
L
);

43 
D
->
°©us
 = (*D->
wrôî
)(D->
L
, 
b
, 
size
, D->
d©a
);

44 
	`lua_lock
(
D
->
L
);

46 
	}
}

49 
	#DumpV¨
(
x
,
D
Ë
	`DumpVe˘‹
(&x,1,D)

	)

52 
	$DumpByã
 (
y
, 
DumpSèã
 *
D
) {

53 
lu_byã
 
x
 = (lu_byã)
y
;

54 
	`DumpV¨
(
x
, 
D
);

55 
	}
}

58 
	$DumpI¡
 (
x
, 
DumpSèã
 *
D
) {

59 
	`DumpV¨
(
x
, 
D
);

60 
	}
}

63 
	$DumpNumbî
 (
lua_Numbî
 
x
, 
DumpSèã
 *
D
) {

64 
	`DumpV¨
(
x
, 
D
);

65 
	}
}

68 
	$DumpI¡egî
 (
lua_I¡egî
 
x
, 
DumpSèã
 *
D
) {

69 
	`DumpV¨
(
x
, 
D
);

70 
	}
}

73 
	$DumpSåög
 (c⁄° 
TSåög
 *
s
, 
DumpSèã
 *
D
) {

74 i‡(
s
 =
NULL
)

75 
	`DumpByã
(0, 
D
);

77 
size_t
 
size
 = 
s
->
Àn
 + 1;

78 i‡(
size
 < 0xFF)

79 
	`DumpByã
(
	`ˇ°_öt
(
size
), 
D
);

81 
	`DumpByã
(0xFF, 
D
);

82 
	`DumpV¨
(
size
, 
D
);

84 
	`DumpVe˘‹
(
	`gë°r
(
s
), 
size
 - 1, 
D
);

86 
	}
}

89 
	$DumpCode
 (c⁄° 
PrŸo
 *
f
, 
DumpSèã
 *
D
) {

90 
	`DumpI¡
(
f
->
sizecode
, 
D
);

91 
	`DumpVe˘‹
(
f
->
code
, f->
sizecode
, 
D
);

92 
	}
}

95 
DumpFun˘i⁄
(c⁄° 
PrŸo
 *
f
, 
TSåög
 *
psour˚
, 
DumpSèã
 *
D
);

97 
	$DumpC⁄°™ts
 (c⁄° 
PrŸo
 *
f
, 
DumpSèã
 *
D
) {

98 
i
;

99 
n
 = 
f
->
sizek
;

100 
	`DumpI¡
(
n
, 
D
);

101 
i
 = 0; i < 
n
; i++) {

102 c⁄° 
TVÆue
 *
o
 = &
f
->
k
[
i
];

103 
	`DumpByã
(
	`ây≥
(
o
), 
D
);

104 
	`ây≥
(
o
)) {

105 
LUA_TNIL
:

107 
LUA_TBOOLEAN
:

108 
	`DumpByã
(
	`bvÆue
(
o
), 
D
);

110 
LUA_TNUMFLT
:

111 
	`DumpNumbî
(
	`ÊtvÆue
(
o
), 
D
);

113 
LUA_TNUMINT
:

114 
	`DumpI¡egî
(
	`ivÆue
(
o
), 
D
);

116 
LUA_TSHRSTR
:

117 
LUA_TLNGSTR
:

118 
	`DumpSåög
(
	`tsvÆue
(
o
), 
D
);

121 
	`lua_as£π
(0);

124 
	}
}

127 
	$DumpPrŸos
 (c⁄° 
PrŸo
 *
f
, 
DumpSèã
 *
D
) {

128 
i
;

129 
n
 = 
f
->
sizï
;

130 
	`DumpI¡
(
n
, 
D
);

131 
i
 = 0; i < 
n
; i++)

132 
	`DumpFun˘i⁄
(
f
->
p
[
i
], f->
sour˚
, 
D
);

133 
	}
}

136 
	$DumpUpvÆues
 (c⁄° 
PrŸo
 *
f
, 
DumpSèã
 *
D
) {

137 
i
, 
n
 = 
f
->
sizeupvÆues
;

138 
	`DumpI¡
(
n
, 
D
);

139 
i
 = 0; i < 
n
; i++) {

140 
	`DumpByã
(
f
->
upvÆues
[
i
].
ö°ack
, 
D
);

141 
	`DumpByã
(
f
->
upvÆues
[
i
].
idx
, 
D
);

143 
	}
}

146 
	$DumpDebug
 (c⁄° 
PrŸo
 *
f
, 
DumpSèã
 *
D
) {

147 
i
, 
n
;

148 
n
 = (
D
->
°rù
Ë? 0 : 
f
->
sizñöeöfo
;

149 
	`DumpI¡
(
n
, 
D
);

150 
	`DumpVe˘‹
(
f
->
löeöfo
, 
n
, 
D
);

151 
n
 = (
D
->
°rù
Ë? 0 : 
f
->
sizñocv¨s
;

152 
	`DumpI¡
(
n
, 
D
);

153 
i
 = 0; i < 
n
; i++) {

154 
	`DumpSåög
(
f
->
locv¨s
[
i
].
v¨«me
, 
D
);

155 
	`DumpI¡
(
f
->
locv¨s
[
i
].
°¨çc
, 
D
);

156 
	`DumpI¡
(
f
->
locv¨s
[
i
].
ídpc
, 
D
);

158 
n
 = (
D
->
°rù
Ë? 0 : 
f
->
sizeupvÆues
;

159 
	`DumpI¡
(
n
, 
D
);

160 
i
 = 0; i < 
n
; i++)

161 
	`DumpSåög
(
f
->
upvÆues
[
i
].
«me
, 
D
);

162 
	}
}

165 
	$DumpFun˘i⁄
 (c⁄° 
PrŸo
 *
f
, 
TSåög
 *
psour˚
, 
DumpSèã
 *
D
) {

166 i‡(
D
->
°rù
 || 
f
->
sour˚
 =
psour˚
)

167 
	`DumpSåög
(
NULL
, 
D
);

169 
	`DumpSåög
(
f
->
sour˚
, 
D
);

170 
	`DumpI¡
(
f
->
löedeföed
, 
D
);

171 
	`DumpI¡
(
f
->
œ°löedeföed
, 
D
);

172 
	`DumpByã
(
f
->
num∑øms
, 
D
);

173 
	`DumpByã
(
f
->
is_v¨¨g
, 
D
);

174 
	`DumpByã
(
f
->
max°acksize
, 
D
);

175 
	`DumpCode
(
f
, 
D
);

176 
	`DumpC⁄°™ts
(
f
, 
D
);

177 
	`DumpUpvÆues
(
f
, 
D
);

178 
	`DumpPrŸos
(
f
, 
D
);

179 
	`DumpDebug
(
f
, 
D
);

180 
	}
}

183 
	$DumpHódî
 (
DumpSèã
 *
D
) {

184 
	`DumpLôîÆ
(
LUA_SIGNATURE
, 
D
);

185 
	`DumpByã
(
LUAC_VERSION
, 
D
);

186 
	`DumpByã
(
LUAC_FORMAT
, 
D
);

187 
	`DumpLôîÆ
(
LUAC_DATA
, 
D
);

188 
	`DumpByã
((), 
D
);

189 
	`DumpByã
((
size_t
), 
D
);

190 
	`DumpByã
((
In°ru˘i⁄
), 
D
);

191 
	`DumpByã
((
lua_I¡egî
), 
D
);

192 
	`DumpByã
((
lua_Numbî
), 
D
);

193 
	`DumpI¡egî
(
LUAC_INT
, 
D
);

194 
	`DumpNumbî
(
LUAC_NUM
, 
D
);

195 
	}
}

201 
	$luaU_dump
(
lua_Sèã
 *
L
, c⁄° 
PrŸo
 *
f
, 
lua_Wrôî
 
w
, *
d©a
,

202 
°rù
) {

203 
DumpSèã
 
D
;

204 
D
.
L
 = L;

205 
D
.
wrôî
 = 
w
;

206 
D
.
d©a
 = data;

207 
D
.
°rù
 = strip;

208 
D
.
°©us
 = 0;

209 
	`DumpHódî
(&
D
);

210 
	`DumpByã
(
f
->
sizeupvÆues
, &
D
);

211 
	`DumpFun˘i⁄
(
f
, 
NULL
, &
D
);

212  
D
.
°©us
;

213 
	}
}

	@lib/archive/lua-5.3.0/src/lfunc.c

7 
	#lfunc_c


	)

8 
	#LUA_CORE


	)

10 
	~"Õªfix.h
"

13 
	~<°ddef.h
>

15 
	~"lua.h
"

17 
	~"lfunc.h
"

18 
	~"lgc.h
"

19 
	~"lmem.h
"

20 
	~"lobje˘.h
"

21 
	~"l°©e.h
"

25 
CClosuª
 *
	$luaF_√wC˛osuª
 (
lua_Sèã
 *
L
, 
n
) {

26 
GCObje˘
 *
o
 = 
	`luaC_√wobj
(
L
, 
LUA_TCCL
, 
	`sizeC˛osuª
(
n
));

27 
CClosuª
 *
c
 = 
	`gco2c˛
(
o
);

28 
c
->
nupvÆues
 = 
	`ˇ°_byã
(
n
);

29  
c
;

30 
	}
}

33 
LClosuª
 *
	$luaF_√wL˛osuª
 (
lua_Sèã
 *
L
, 
n
) {

34 
GCObje˘
 *
o
 = 
	`luaC_√wobj
(
L
, 
LUA_TLCL
, 
	`sizeL˛osuª
(
n
));

35 
LClosuª
 *
c
 = 
	`gco2l˛
(
o
);

36 
c
->
p
 = 
NULL
;

37 
c
->
nupvÆues
 = 
	`ˇ°_byã
(
n
);

38 
n
--Ë
c
->
upvÆs
[n] = 
NULL
;

39  
c
;

40 
	}
}

45 
	$luaF_öôupvÆs
 (
lua_Sèã
 *
L
, 
LClosuª
 *
˛
) {

46 
i
;

47 
i
 = 0; i < 
˛
->
nupvÆues
; i++) {

48 
UpVÆ
 *
uv
 = 
	`luaM_√w
(
L
, UpVal);

49 
uv
->
ªfcou¡
 = 1;

50 
uv
->
v
 = &uv->
u
.
vÆue
;

51 
	`£äûvÆue
(
uv
->
v
);

52 
˛
->
upvÆs
[
i
] = 
uv
;

54 
	}
}

57 
UpVÆ
 *
	$luaF_födupvÆ
 (
lua_Sèã
 *
L
, 
StkId
 
Àvñ
) {

58 
UpVÆ
 **
µ
 = &
L
->
›íupvÆ
;

59 
UpVÆ
 *
p
;

60 
UpVÆ
 *
uv
;

61 
	`lua_as£π
(
	`isötwups
(
L
Ë|| L->
›íupvÆ
 =
NULL
);

62 *
µ
 !
NULL
 && (
p
 = *µ)->
v
 >
Àvñ
) {

63 
	`lua_as£π
(
	`upis›í
(
p
));

64 i‡(
p
->
v
 =
Àvñ
)

65  
p
;

66 
µ
 = &
p
->
u
.
›í
.
√xt
;

69 
uv
 = 
	`luaM_√w
(
L
, 
UpVÆ
);

70 
uv
->
ªfcou¡
 = 0;

71 
uv
->
u
.
›í
.
√xt
 = *
µ
;

72 
uv
->
u
.
›í
.
touched
 = 1;

73 *
µ
 = 
uv
;

74 
uv
->
v
 = 
Àvñ
;

75 i‡(!
	`isötwups
(
L
)) {

76 
L
->
twups
 = 
	`G
(L)->twups;

77 
	`G
(
L
)->
twups
 = L;

79  
uv
;

80 
	}
}

83 
	$luaF_˛o£
 (
lua_Sèã
 *
L
, 
StkId
 
Àvñ
) {

84 
UpVÆ
 *
uv
;

85 
L
->
›íupvÆ
 !
NULL
 && (
uv
 = L->›íupvÆ)->
v
 >
Àvñ
) {

86 
	`lua_as£π
(
	`upis›í
(
uv
));

87 
L
->
›íupvÆ
 = 
uv
->
u
.
›í
.
√xt
;

88 i‡(
uv
->
ªfcou¡
 == 0)

89 
	`luaM_‰ì
(
L
, 
uv
);

91 
	`£tobj
(
L
, &
uv
->
u
.
vÆue
, uv->
v
);

92 
uv
->
v
 = &uv->
u
.
vÆue
;

93 
	`luaC_upvÆb¨rõr
(
L
, 
uv
);

96 
	}
}

99 
PrŸo
 *
	$luaF_√w¥Ÿo
 (
lua_Sèã
 *
L
) {

100 
GCObje˘
 *
o
 = 
	`luaC_√wobj
(
L
, 
LUA_TPROTO
, (
PrŸo
));

101 
PrŸo
 *
f
 = 
	`gco2p
(
o
);

102 
f
->
k
 = 
NULL
;

103 
f
->
sizek
 = 0;

104 
f
->
p
 = 
NULL
;

105 
f
->
sizï
 = 0;

106 
f
->
code
 = 
NULL
;

107 
f
->
ˇche
 = 
NULL
;

108 
f
->
sizecode
 = 0;

109 
f
->
löeöfo
 = 
NULL
;

110 
f
->
sizñöeöfo
 = 0;

111 
f
->
upvÆues
 = 
NULL
;

112 
f
->
sizeupvÆues
 = 0;

113 
f
->
num∑øms
 = 0;

114 
f
->
is_v¨¨g
 = 0;

115 
f
->
max°acksize
 = 0;

116 
f
->
locv¨s
 = 
NULL
;

117 
f
->
sizñocv¨s
 = 0;

118 
f
->
löedeföed
 = 0;

119 
f
->
œ°löedeföed
 = 0;

120 
f
->
sour˚
 = 
NULL
;

121  
f
;

122 
	}
}

125 
	$luaF_‰ì¥Ÿo
 (
lua_Sèã
 *
L
, 
PrŸo
 *
f
) {

126 
	`luaM_‰ì¨øy
(
L
, 
f
->
code
, f->
sizecode
);

127 
	`luaM_‰ì¨øy
(
L
, 
f
->
p
, f->
sizï
);

128 
	`luaM_‰ì¨øy
(
L
, 
f
->
k
, f->
sizek
);

129 
	`luaM_‰ì¨øy
(
L
, 
f
->
löeöfo
, f->
sizñöeöfo
);

130 
	`luaM_‰ì¨øy
(
L
, 
f
->
locv¨s
, f->
sizñocv¨s
);

131 
	`luaM_‰ì¨øy
(
L
, 
f
->
upvÆues
, f->
sizeupvÆues
);

132 
	`luaM_‰ì
(
L
, 
f
);

133 
	}
}

140 c⁄° *
	$luaF_gëloˇ ame
 (c⁄° 
PrŸo
 *
f
, 
loˇl_numbî
, 
pc
) {

141 
i
;

142 
i
 = 0; i<
f
->
sizñocv¨s
 && f->
locv¨s
[i].
°¨çc
 <
pc
; i++) {

143 i‡(
pc
 < 
f
->
locv¨s
[
i
].
ídpc
) {

144 
loˇl_numbî
--;

145 i‡(
loˇl_numbî
 == 0)

146  
	`gë°r
(
f
->
locv¨s
[
i
].
v¨«me
);

149  
NULL
;

150 
	}
}

	@lib/archive/lua-5.3.0/src/lfunc.h

7 #i‚de‡
lfunc_h


8 
	#lfunc_h


	)

11 
	~"lobje˘.h
"

14 
	#sizeC˛osuª
(
n
Ë(
	`ˇ°
(, (
CClosuª
)) + \

15 
	`ˇ°
(, (
TVÆue
)*((
n
)-1)))

	)

17 
	#sizeL˛osuª
(
n
Ë(
	`ˇ°
(, (
LClosuª
)) + \

18 
	`ˇ°
(, (
TVÆue
 *)*((
n
)-1)))

	)

22 
	#isötwups
(
L
Ë(L->
twups
 !L)

	)

28 
	sUpVÆ
 {

29 
TVÆue
 *
	mv
;

30 
lu_mem
 
	mªfcou¡
;

33 
UpVÆ
 *
	m√xt
;

34 
	mtouched
;

35 } 
	m›í
;

36 
TVÆue
 
	mvÆue
;

37 } 
	mu
;

40 
	#upis›í
(
up
Ë((up)->
v
 !&(up)->
u
.
vÆue
)

	)

43 
LUAI_FUNC
 
PrŸo
 *
luaF_√w¥Ÿo
 (
lua_Sèã
 *
L
);

44 
LUAI_FUNC
 
CClosuª
 *
luaF_√wC˛osuª
 (
lua_Sèã
 *
L
, 
√Àms
);

45 
LUAI_FUNC
 
LClosuª
 *
luaF_√wL˛osuª
 (
lua_Sèã
 *
L
, 
√Àms
);

46 
LUAI_FUNC
 
luaF_öôupvÆs
 (
lua_Sèã
 *
L
, 
LClosuª
 *
˛
);

47 
LUAI_FUNC
 
UpVÆ
 *
luaF_födupvÆ
 (
lua_Sèã
 *
L
, 
StkId
 
Àvñ
);

48 
LUAI_FUNC
 
luaF_˛o£
 (
lua_Sèã
 *
L
, 
StkId
 
Àvñ
);

49 
LUAI_FUNC
 
luaF_‰ì¥Ÿo
 (
lua_Sèã
 *
L
, 
PrŸo
 *
f
);

50 
LUAI_FUNC
 c⁄° *
luaF_gëloˇ ame
 (c⁄° 
PrŸo
 *
func
, 
loˇl_numbî
,

51 
pc
);

	@lib/archive/lua-5.3.0/src/lgc.c

7 
	#lgc_c


	)

8 
	#LUA_CORE


	)

10 
	~"Õªfix.h
"

13 
	~<°rög.h
>

15 
	~"lua.h
"

17 
	~"ldebug.h
"

18 
	~"ldo.h
"

19 
	~"lfunc.h
"

20 
	~"lgc.h
"

21 
	~"lmem.h
"

22 
	~"lobje˘.h
"

23 
	~"l°©e.h
"

24 
	~"l°rög.h
"

25 
	~"…abÀ.h
"

26 
	~"…m.h
"

33 
	#GCSösidótomic
 (
GCS∑u£
 + 1)

	)

39 
	#GCSWEEPCOST
 (((
TSåög
Ë+ 4Ë/ 4)

	)

42 
	#GCSWEEPMAX
 (
	`ˇ°_öt
((
GCSTEPSIZE
 / 
GCSWEEPCOST
Ë/ 4))

	)

45 
	#GCFINALIZECOST
 
GCSWEEPCOST


	)

52 
	#STEPMULADJ
 200

	)

59 
	#PAUSEADJ
 100

	)

66 
	#maskcﬁ‹s
 (~(
	`bômask
(
BLACKBIT
Ë| 
WHITEBITS
))

	)

67 
	#makewhôe
(
g
,
x
) \

68 (
x
->
m¨ked
 = 
	`ˇ°_byã
((x->m¨ked & 
maskcﬁ‹s
Ë| 
	`luaC_whôe
(
g
)))

	)

70 
	#whôe2gøy
(
x
Ë
	`ª£tbôs
(x->
m¨ked
, 
WHITEBITS
)

	)

71 
	#bœck2gøy
(
x
Ë
	`ª£tbô
(x->
m¨ked
, 
BLACKBIT
)

	)

74 
	#vÆiswhôe
(
x
Ë(
	`iscﬁÀ˘abÀ
(xË&& 
	`iswhôe
(
	`gcvÆue
(x)))

	)

76 
	#checkdódkey
(
n
Ë
	`lua_as£π
(!
	`âisdódkey
(
	`gkey
“)Ë|| 
	`âi¢û
(
	`gvÆ
“)))

	)

79 
	#checkc⁄si°ícy
(
obj
) \

80 
	`lua_l⁄gas£π
(!
	`iscﬁÀ˘abÀ
(
obj
Ë|| 
	`righât
(obj))

	)

83 
	#m¨kvÆue
(
g
,
o
Ë{ 
	`checkc⁄si°ícy
(o); \

84 i‡(
	`vÆiswhôe
(
o
)Ë
	`ªÆlym¨kobje˘
(
g
,
	`gcvÆue
(o)); }

	)

86 
	#m¨kobje˘
(
g
,
t
) \

87 { i‡((
t
Ë&& 
	`iswhôe
—)Ë
	`ªÆlym¨kobje˘
(
g
, 
	`obj2gco
—)); }

	)

89 
ªÆlym¨kobje˘
 (
globÆ_Sèã
 *
g
, 
GCObje˘
 *
o
);

102 
	#gnodña°
(
h
Ë
	`gnode
(h, 
	`ˇ°
(
size_t
, 
	`sizíode
(h)))

	)

108 
	#lökg˛i°
(
o
,
p
Ë((o)->
g˛i°
 = (p), (pË
	`obj2gco
(o))

	)

115 
	$ªmovì¡ry
 (
Node
 *
n
) {

116 
	`lua_as£π
(
	`âi¢û
(
	`gvÆ
(
n
)));

117 i‡(
	`vÆiswhôe
(
	`gkey
(
n
)))

118 
	`£tdódvÆue
(
	`wgkey
(
n
));

119 
	}
}

129 
	$is˛óªd
 (
globÆ_Sèã
 *
g
, c⁄° 
TVÆue
 *
o
) {

130 i‡(!
	`iscﬁÀ˘abÀ
(
o
))  0;

131 i‡(
	`âis°rög
(
o
)) {

132 
	`m¨kobje˘
(
g
, 
	`tsvÆue
(
o
));

135  
	`iswhôe
(
	`gcvÆue
(
o
));

136 
	}
}

145 
	$luaC_b¨rõr_
 (
lua_Sèã
 *
L
, 
GCObje˘
 *
o
, GCObje˘ *
v
) {

146 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

147 
	`lua_as£π
(
	`isbœck
(
o
Ë&& 
	`iswhôe
(
v
Ë&& !
	`isdód
(
g
, v) && !isdead(g, o));

148 i‡(
	`kìpöv¨ü¡
(
g
))

149 
	`ªÆlym¨kobje˘
(
g
, 
v
);

151 
	`lua_as£π
(
	`isswìµha£
(
g
));

152 
	`makewhôe
(
g
, 
o
);

154 
	}
}

161 
	$luaC_b¨rõrback_
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
) {

162 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

163 
	`lua_as£π
(
	`isbœck
(
t
Ë&& !
	`isdód
(
g
,Å));

164 
	`bœck2gøy
(
t
);

165 
	`lökg˛i°
(
t
, 
g
->
gøyagaö
);

166 
	}
}

175 
	$luaC_upvÆb¨rõr_
 (
lua_Sèã
 *
L
, 
UpVÆ
 *
uv
) {

176 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

177 
GCObje˘
 *
o
 = 
	`gcvÆue
(
uv
->
v
);

178 
	`lua_as£π
(!
	`upis›í
(
uv
));

179 i‡(
	`kìpöv¨ü¡
(
g
))

180 
	`m¨kobje˘
(
g
, 
o
);

181 
	}
}

184 
	$luaC_fix
 (
lua_Sèã
 *
L
, 
GCObje˘
 *
o
) {

185 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

186 
	`lua_as£π
(
g
->
Ælgc
 =
o
);

187 
	`whôe2gøy
(
o
);

188 
g
->
Ælgc
 = 
o
->
√xt
;

189 
o
->
√xt
 = 
g
->
fixedgc
;

190 
g
->
fixedgc
 = 
o
;

191 
	}
}

198 
GCObje˘
 *
	$luaC_√wobj
 (
lua_Sèã
 *
L
, 
â
, 
size_t
 
sz
) {

199 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

200 
GCObje˘
 *
o
 = 
	`ˇ°
(GCObje˘ *, 
	`luaM_√wobje˘
(
L
, 
	`nov¨ü¡
(
â
), 
sz
));

201 
o
->
m¨ked
 = 
	`luaC_whôe
(
g
);

202 
o
->
â
 =Åt;

203 
o
->
√xt
 = 
g
->
Ælgc
;

204 
g
->
Ælgc
 = 
o
;

205  
o
;

206 
	}
}

225 
	$ªÆlym¨kobje˘
 (
globÆ_Sèã
 *
g
, 
GCObje˘
 *
o
) {

226 
ªíåy
:

227 
	`whôe2gøy
(
o
);

228 
o
->
â
) {

229 
LUA_TSHRSTR
:

230 
LUA_TLNGSTR
: {

231 
	`gøy2bœck
(
o
);

232 
g
->
GCmemåav
 +
	`size°rög
(
	`gco2ts
(
o
));

235 
LUA_TUSERDATA
: {

236 
TVÆue
 
uvÆue
;

237 
	`m¨kobje˘
(
g
, 
	`gco2u
(
o
)->
më©abÀ
);

238 
	`gøy2bœck
(
o
);

239 
g
->
GCmemåav
 +
	`sizeud©a
(
	`gco2u
(
o
));

240 
	`gëu£rvÆue
(
g
->
maöthªad
, 
	`gco2u
(
o
), &
uvÆue
);

241 i‡(
	`vÆiswhôe
(&
uvÆue
)) {

242 
o
 = 
	`gcvÆue
(&
uvÆue
);

243 
ªíåy
;

247 
LUA_TLCL
: {

248 
	`lökg˛i°
(
	`gco2l˛
(
o
), 
g
->
gøy
);

251 
LUA_TCCL
: {

252 
	`lökg˛i°
(
	`gco2c˛
(
o
), 
g
->
gøy
);

255 
LUA_TTABLE
: {

256 
	`lökg˛i°
(
	`gco2t
(
o
), 
g
->
gøy
);

259 
LUA_TTHREAD
: {

260 
	`lökg˛i°
(
	`gco2th
(
o
), 
g
->
gøy
);

263 
LUA_TPROTO
: {

264 
	`lökg˛i°
(
	`gco2p
(
o
), 
g
->
gøy
);

267 : 
	`lua_as£π
(0); ;

269 
	}
}

275 
	$m¨kmt
 (
globÆ_Sèã
 *
g
) {

276 
i
;

277 
i
=0; i < 
LUA_NUMTAGS
; i++)

278 
	`m¨kobje˘
(
g
, g->
mt
[
i
]);

279 
	}
}

285 
	$m¨kbeög‚z
 (
globÆ_Sèã
 *
g
) {

286 
GCObje˘
 *
o
;

287 
o
 = 
g
->
tobe‚z
; o !
NULL
; o = o->
√xt
)

288 
	`m¨kobje˘
(
g
, 
o
);

289 
	}
}

298 
	$ªm¨kupvÆs
 (
globÆ_Sèã
 *
g
) {

299 
lua_Sèã
 *
thªad
;

300 
lua_Sèã
 **
p
 = &
g
->
twups
;

301 (
thªad
 = *
p
Ë!
NULL
) {

302 
	`lua_as£π
(!
	`isbœck
(
thªad
));

303 i‡(
	`isgøy
(
thªad
Ë&&Åhªad->
›íupvÆ
 !
NULL
)

304 
p
 = &
thªad
->
twups
;

306 
UpVÆ
 *
uv
;

307 *
p
 = 
thªad
->
twups
;

308 
thªad
->
twups
 =Åhread;

309 
uv
 = 
thªad
->
›íupvÆ
; uv !
NULL
; uv = uv->
u
.
›í
.
√xt
) {

310 i‡(
uv
->
u
.
›í
.
touched
) {

311 
	`m¨kvÆue
(
g
, 
uv
->
v
);

312 
uv
->
u
.
›í
.
touched
 = 0;

317 
	}
}

323 
	$ª°¨tcﬁÀ˘i⁄
 (
globÆ_Sèã
 *
g
) {

324 
g
->
gøy
 = g->
gøyagaö
 = 
NULL
;

325 
g
->
wók
 = g->
Ælwók
 = g->
ïhemî⁄
 = 
NULL
;

326 
	`m¨kobje˘
(
g
, g->
maöthªad
);

327 
	`m¨kvÆue
(
g
, &g->
l_ªgi°ry
);

328 
	`m¨kmt
(
g
);

329 
	`m¨kbeög‚z
(
g
);

330 
	}
}

347 
	$åavî£wókvÆue
 (
globÆ_Sèã
 *
g
, 
TabÀ
 *
h
) {

348 
Node
 *
n
, *
limô
 = 
	`gnodña°
(
h
);

351 
has˛órs
 = (
h
->
sizóºay
 > 0);

352 
n
 = 
	`gnode
(
h
, 0);Ç < 
limô
;Ç++) {

353 
	`checkdódkey
(
n
);

354 i‡(
	`âi¢û
(
	`gvÆ
(
n
)))

355 
	`ªmovì¡ry
(
n
);

357 
	`lua_as£π
(!
	`âi¢û
(
	`gkey
(
n
)));

358 
	`m¨kvÆue
(
g
, 
	`gkey
(
n
));

359 i‡(!
has˛órs
 && 
	`is˛óªd
(
g
, 
	`gvÆ
(
n
)))

360 
has˛órs
 = 1;

363 i‡(
g
->
gc°©e
 =
GCS¥›ag©e
)

364 
	`lökg˛i°
(
h
, 
g
->
gøyagaö
);

365 i‡(
has˛órs
)

366 
	`lökg˛i°
(
h
, 
g
->
wók
);

367 
	}
}

380 
	$åavî£ïhemî⁄
 (
globÆ_Sèã
 *
g
, 
TabÀ
 *
h
) {

381 
m¨ked
 = 0;

382 
has˛órs
 = 0;

383 
hasww
 = 0;

384 
Node
 *
n
, *
limô
 = 
	`gnodña°
(
h
);

385 
i
;

387 
i
 = 0; i < 
h
->
sizóºay
; i++) {

388 i‡(
	`vÆiswhôe
(&
h
->
¨øy
[
i
])) {

389 
m¨ked
 = 1;

390 
	`ªÆlym¨kobje˘
(
g
, 
	`gcvÆue
(&
h
->
¨øy
[
i
]));

394 
n
 = 
	`gnode
(
h
, 0);Ç < 
limô
;Ç++) {

395 
	`checkdódkey
(
n
);

396 i‡(
	`âi¢û
(
	`gvÆ
(
n
)))

397 
	`ªmovì¡ry
(
n
);

398 i‡(
	`is˛óªd
(
g
, 
	`gkey
(
n
))) {

399 
has˛órs
 = 1;

400 i‡(
	`vÆiswhôe
(
	`gvÆ
(
n
)))

401 
hasww
 = 1;

403 i‡(
	`vÆiswhôe
(
	`gvÆ
(
n
))) {

404 
m¨ked
 = 1;

405 
	`ªÆlym¨kobje˘
(
g
, 
	`gcvÆue
(
	`gvÆ
(
n
)));

409 i‡(
g
->
gc°©e
 =
GCS¥›ag©e
)

410 
	`lökg˛i°
(
h
, 
g
->
gøyagaö
);

411 i‡(
hasww
)

412 
	`lökg˛i°
(
h
, 
g
->
ïhemî⁄
);

413 i‡(
has˛órs
)

414 
	`lökg˛i°
(
h
, 
g
->
Ælwók
);

415  
m¨ked
;

416 
	}
}

419 
	$åavî£°r⁄gèbÀ
 (
globÆ_Sèã
 *
g
, 
TabÀ
 *
h
) {

420 
Node
 *
n
, *
limô
 = 
	`gnodña°
(
h
);

421 
i
;

422 
i
 = 0; i < 
h
->
sizóºay
; i++)

423 
	`m¨kvÆue
(
g
, &
h
->
¨øy
[
i
]);

424 
n
 = 
	`gnode
(
h
, 0);Ç < 
limô
;Ç++) {

425 
	`checkdódkey
(
n
);

426 i‡(
	`âi¢û
(
	`gvÆ
(
n
)))

427 
	`ªmovì¡ry
(
n
);

429 
	`lua_as£π
(!
	`âi¢û
(
	`gkey
(
n
)));

430 
	`m¨kvÆue
(
g
, 
	`gkey
(
n
));

431 
	`m¨kvÆue
(
g
, 
	`gvÆ
(
n
));

434 
	}
}

437 
lu_mem
 
	$åavî£èbÀ
 (
globÆ_Sèã
 *
g
, 
TabÀ
 *
h
) {

438 c⁄° *
wókkey
, *
wókvÆue
;

439 c⁄° 
TVÆue
 *
mode
 = 
	`gÁ°tm
(
g
, 
h
->
më©abÀ
, 
TM_MODE
);

440 
	`m¨kobje˘
(
g
, 
h
->
më©abÀ
);

441 i‡(
mode
 && 
	`âis°rög
(mode) &&

442 ((
wókkey
 = 
	`°rchr
(
	`svÆue
(
mode
), 'k')),

443 (
wókvÆue
 = 
	`°rchr
(
	`svÆue
(
mode
), 'v')),

444 (
wókkey
 || 
wókvÆue
))) {

445 
	`bœck2gøy
(
h
);

446 i‡(!
wókkey
)

447 
	`åavî£wókvÆue
(
g
, 
h
);

448 i‡(!
wókvÆue
)

449 
	`åavî£ïhemî⁄
(
g
, 
h
);

451 
	`lökg˛i°
(
h
, 
g
->
Ælwók
);

454 
	`åavî£°r⁄gèbÀ
(
g
, 
h
);

455  (
TabÀ
Ë+ (
TVÆue
Ë* 
h
->
sizóºay
 +

456 (
Node
Ë* 
	`ˇ°
(
size_t
, 
	`sizíode
(
h
));

457 
	}
}

460 
	$åavî£¥Ÿo
 (
globÆ_Sèã
 *
g
, 
PrŸo
 *
f
) {

461 
i
;

462 i‡(
f
->
ˇche
 && 
	`iswhôe
(f->cache))

463 
f
->
ˇche
 = 
NULL
;

464 
	`m¨kobje˘
(
g
, 
f
->
sour˚
);

465 
i
 = 0; i < 
f
->
sizek
; i++)

466 
	`m¨kvÆue
(
g
, &
f
->
k
[
i
]);

467 
i
 = 0; i < 
f
->
sizeupvÆues
; i++)

468 
	`m¨kobje˘
(
g
, 
f
->
upvÆues
[
i
].
«me
);

469 
i
 = 0; i < 
f
->
sizï
; i++)

470 
	`m¨kobje˘
(
g
, 
f
->
p
[
i
]);

471 
i
 = 0; i < 
f
->
sizñocv¨s
; i++)

472 
	`m¨kobje˘
(
g
, 
f
->
locv¨s
[
i
].
v¨«me
);

473  (
PrŸo
Ë+ (
In°ru˘i⁄
Ë* 
f
->
sizecode
 +

474 (
PrŸo
 *Ë* 
f
->
sizï
 +

475 (
TVÆue
Ë* 
f
->
sizek
 +

476 (Ë* 
f
->
sizñöeöfo
 +

477 (
LocV¨
Ë* 
f
->
sizñocv¨s
 +

478 (
UpvÆdesc
Ë* 
f
->
sizeupvÆues
;

479 
	}
}

482 
lu_mem
 
	$åavî£C˛osuª
 (
globÆ_Sèã
 *
g
, 
CClosuª
 *
˛
) {

483 
i
;

484 
i
 = 0; i < 
˛
->
nupvÆues
; i++)

485 
	`m¨kvÆue
(
g
, &
˛
->
upvÆue
[
i
]);

486  
	`sizeC˛osuª
(
˛
->
nupvÆues
);

487 
	}
}

495 
lu_mem
 
	$åavî£L˛osuª
 (
globÆ_Sèã
 *
g
, 
LClosuª
 *
˛
) {

496 
i
;

497 
	`m¨kobje˘
(
g
, 
˛
->
p
);

498 
i
 = 0; i < 
˛
->
nupvÆues
; i++) {

499 
UpVÆ
 *
uv
 = 
˛
->
upvÆs
[
i
];

500 i‡(
uv
 !
NULL
) {

501 i‡(
	`upis›í
(
uv
Ë&& 
g
->
gc°©e
 !
GCSösidótomic
)

502 
uv
->
u
.
›í
.
touched
 = 1;

504 
	`m¨kvÆue
(
g
, 
uv
->
v
);

507  
	`sizeL˛osuª
(
˛
->
nupvÆues
);

508 
	}
}

511 
lu_mem
 
	$åavî£thªad
 (
globÆ_Sèã
 *
g
, 
lua_Sèã
 *
th
) {

512 
StkId
 
o
 = 
th
->
°ack
;

513 i‡(
o
 =
NULL
)

515 
	`lua_as£π
(
g
->
gc°©e
 =
GCSösidótomic
 ||

516 
th
->
›íupvÆ
 =
NULL
 || 
	`isötwups
(th));

517 ; 
o
 < 
th
->
t›
; o++)

518 
	`m¨kvÆue
(
g
, 
o
);

519 i‡(
g
->
gc°©e
 =
GCSösidótomic
) {

520 
StkId
 
lim
 = 
th
->
°ack
 +Åh->
°acksize
;

521 ; 
o
 < 
lim
; o++)

522 
	`£äûvÆue
(
o
);

524 i‡(!
	`isötwups
(
th
Ë&&Åh->
›íupvÆ
 !
NULL
) {

525 
th
->
twups
 = 
g
->twups;

526 
g
->
twups
 = 
th
;

529 i‡(
g
->
gcköd
 !
KGC_EMERGENCY
)

530 
	`luaD_shrök°ack
(
th
);

531  ((
lua_Sèã
Ë+ (
TVÆue
Ë* 
th
->
°acksize
);

532 
	}
}

539 
	$¥›ag©em¨k
 (
globÆ_Sèã
 *
g
) {

540 
lu_mem
 
size
;

541 
GCObje˘
 *
o
 = 
g
->
gøy
;

542 
	`lua_as£π
(
	`isgøy
(
o
));

543 
	`gøy2bœck
(
o
);

544 
o
->
â
) {

545 
LUA_TTABLE
: {

546 
TabÀ
 *
h
 = 
	`gco2t
(
o
);

547 
g
->
gøy
 = 
h
->
g˛i°
;

548 
size
 = 
	`åavî£èbÀ
(
g
, 
h
);

551 
LUA_TLCL
: {

552 
LClosuª
 *
˛
 = 
	`gco2l˛
(
o
);

553 
g
->
gøy
 = 
˛
->
g˛i°
;

554 
size
 = 
	`åavî£L˛osuª
(
g
, 
˛
);

557 
LUA_TCCL
: {

558 
CClosuª
 *
˛
 = 
	`gco2c˛
(
o
);

559 
g
->
gøy
 = 
˛
->
g˛i°
;

560 
size
 = 
	`åavî£C˛osuª
(
g
, 
˛
);

563 
LUA_TTHREAD
: {

564 
lua_Sèã
 *
th
 = 
	`gco2th
(
o
);

565 
g
->
gøy
 = 
th
->
g˛i°
;

566 
	`lökg˛i°
(
th
, 
g
->
gøyagaö
);

567 
	`bœck2gøy
(
o
);

568 
size
 = 
	`åavî£thªad
(
g
, 
th
);

571 
LUA_TPROTO
: {

572 
PrŸo
 *
p
 = 
	`gco2p
(
o
);

573 
g
->
gøy
 = 
p
->
g˛i°
;

574 
size
 = 
	`åavî£¥Ÿo
(
g
, 
p
);

577 : 
	`lua_as£π
(0); ;

579 
g
->
GCmemåav
 +
size
;

580 
	}
}

583 
	$¥›ag©óŒ
 (
globÆ_Sèã
 *
g
) {

584 
g
->
gøy
Ë
	`¥›ag©em¨k
(g);

585 
	}
}

588 
	$c⁄vîgìphemî⁄s
 (
globÆ_Sèã
 *
g
) {

589 
ch™ged
;

591 
GCObje˘
 *
w
;

592 
GCObje˘
 *
√xt
 = 
g
->
ïhemî⁄
;

593 
g
->
ïhemî⁄
 = 
NULL
;

594 
ch™ged
 = 0;

595 (
w
 = 
√xt
Ë!
NULL
) {

596 
√xt
 = 
	`gco2t
(
w
)->
g˛i°
;

597 i‡(
	`åavî£ïhemî⁄
(
g
, 
	`gco2t
(
w
))) {

598 
	`¥›ag©óŒ
(
g
);

599 
ch™ged
 = 1;

602 } 
ch™ged
);

603 
	}
}

619 
	$˛órkeys
 (
globÆ_Sèã
 *
g
, 
GCObje˘
 *
l
, GCObje˘ *
f
) {

620 ; 
l
 !
f
;Ü = 
	`gco2t
÷)->
g˛i°
) {

621 
TabÀ
 *
h
 = 
	`gco2t
(
l
);

622 
Node
 *
n
, *
limô
 = 
	`gnodña°
(
h
);

623 
n
 = 
	`gnode
(
h
, 0);Ç < 
limô
;Ç++) {

624 i‡(!
	`âi¢û
(
	`gvÆ
(
n
)Ë&& (
	`is˛óªd
(
g
, 
	`gkey
(n)))) {

625 
	`£äûvÆue
(
	`gvÆ
(
n
));

626 
	`ªmovì¡ry
(
n
);

630 
	}
}

637 
	$˛órvÆues
 (
globÆ_Sèã
 *
g
, 
GCObje˘
 *
l
, GCObje˘ *
f
) {

638 ; 
l
 !
f
;Ü = 
	`gco2t
÷)->
g˛i°
) {

639 
TabÀ
 *
h
 = 
	`gco2t
(
l
);

640 
Node
 *
n
, *
limô
 = 
	`gnodña°
(
h
);

641 
i
;

642 
i
 = 0; i < 
h
->
sizóºay
; i++) {

643 
TVÆue
 *
o
 = &
h
->
¨øy
[
i
];

644 i‡(
	`is˛óªd
(
g
, 
o
))

645 
	`£äûvÆue
(
o
);

647 
n
 = 
	`gnode
(
h
, 0);Ç < 
limô
;Ç++) {

648 i‡(!
	`âi¢û
(
	`gvÆ
(
n
)Ë&& 
	`is˛óªd
(
g
, gval(n))) {

649 
	`£äûvÆue
(
	`gvÆ
(
n
));

650 
	`ªmovì¡ry
(
n
);

654 
	}
}

657 
	$luaC_upvdeccou¡
 (
lua_Sèã
 *
L
, 
UpVÆ
 *
uv
) {

658 
	`lua_as£π
(
uv
->
ªfcou¡
 > 0);

659 
uv
->
ªfcou¡
--;

660 i‡(
uv
->
ªfcou¡
 =0 && !
	`upis›í
(uv))

661 
	`luaM_‰ì
(
L
, 
uv
);

662 
	}
}

665 
	$‰ìL˛osuª
 (
lua_Sèã
 *
L
, 
LClosuª
 *
˛
) {

666 
i
;

667 
i
 = 0; i < 
˛
->
nupvÆues
; i++) {

668 
UpVÆ
 *
uv
 = 
˛
->
upvÆs
[
i
];

669 i‡(
uv
)

670 
	`luaC_upvdeccou¡
(
L
, 
uv
);

672 
	`luaM_‰ìmem
(
L
, 
˛
, 
	`sizeL˛osuª
(˛->
nupvÆues
));

673 
	}
}

676 
	$‰ìobj
 (
lua_Sèã
 *
L
, 
GCObje˘
 *
o
) {

677 
o
->
â
) {

678 
LUA_TPROTO
: 
	`luaF_‰ì¥Ÿo
(
L
, 
	`gco2p
(
o
)); ;

679 
LUA_TLCL
: {

680 
	`‰ìL˛osuª
(
L
, 
	`gco2l˛
(
o
));

683 
LUA_TCCL
: {

684 
	`luaM_‰ìmem
(
L
, 
o
, 
	`sizeC˛osuª
(
	`gco2c˛
(o)->
nupvÆues
));

687 
LUA_TTABLE
: 
	`luaH_‰ì
(
L
, 
	`gco2t
(
o
)); ;

688 
LUA_TTHREAD
: 
	`luaE_‰ìthªad
(
L
, 
	`gco2th
(
o
)); ;

689 
LUA_TUSERDATA
: 
	`luaM_‰ìmem
(
L
, 
o
, 
	`sizeud©a
(
	`gco2u
(o))); ;

690 
LUA_TSHRSTR
:

691 
	`luaS_ªmove
(
L
, 
	`gco2ts
(
o
));

693 
LUA_TLNGSTR
: {

694 
	`luaM_‰ìmem
(
L
, 
o
, 
	`size°rög
(
	`gco2ts
(o)));

697 : 
	`lua_as£π
(0);

699 
	}
}

702 
	#swìpwhﬁñi°
(
L
,
p
Ë
	`swì∂i°
(L,p,
MAX_LUMEM
)

	)

703 
GCObje˘
 **
swì∂i°
 (
lua_Sèã
 *
L
, GCObje˘ **
p
, 
lu_mem
 
cou¡
);

713 
GCObje˘
 **
	$swì∂i°
 (
lua_Sèã
 *
L
, 
GCObje˘
 **
p
, 
lu_mem
 
cou¡
) {

714 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

715 
ow
 = 
	`Ÿhîwhôe
(
g
);

716 
whôe
 = 
	`luaC_whôe
(
g
);

717 *
p
 !
NULL
 && 
cou¡
-- > 0) {

718 
GCObje˘
 *
cuº
 = *
p
;

719 
m¨ked
 = 
cuº
->marked;

720 i‡(
	`isdódm
(
ow
, 
m¨ked
)) {

721 *
p
 = 
cuº
->
√xt
;

722 
	`‰ìobj
(
L
, 
cuº
);

725 
cuº
->
m¨ked
 = 
	`ˇ°_byã
((m¨ked & 
maskcﬁ‹s
Ë| 
whôe
);

726 
p
 = &
cuº
->
√xt
;

729  (*
p
 =
NULL
) ? NULL :Ö;

730 
	}
}

736 
GCObje˘
 **
	$swì±ﬁive
 (
lua_Sèã
 *
L
, 
GCObje˘
 **
p
, *
n
) {

737 
GCObje˘
 **
ﬁd
 = 
p
;

738 
i
 = 0;

740 
i
++;

741 
p
 = 
	`swì∂i°
(
L
,Ö, 1);

742 } 
p
 =
ﬁd
);

743 i‡(
n
Ë*¿+
i
;

744  
p
;

745 
	}
}

759 
	$checkSizes
 (
lua_Sèã
 *
L
, 
globÆ_Sèã
 *
g
) {

760 i‡(
g
->
gcköd
 !
KGC_EMERGENCY
) {

761 
l_mem
 
ﬁddebt
 = 
g
->
GCdebt
;

762 
	`luaZ_‰ìbuf„r
(
L
, &
g
->
buff
);

763 i‡(
g
->
°π
.
nu£
 < g->°π.
size
 / 4)

764 
	`luaS_ªsize
(
L
, 
g
->
°π
.
size
 / 2);

765 
g
->
GCe°im©e
 +g->
GCdebt
 - 
ﬁddebt
;

767 
	}
}

770 
GCObje˘
 *
	$ud©a2föÆize
 (
globÆ_Sèã
 *
g
) {

771 
GCObje˘
 *
o
 = 
g
->
tobe‚z
;

772 
	`lua_as£π
(
	`toföÆize
(
o
));

773 
g
->
tobe‚z
 = 
o
->
√xt
;

774 
o
->
√xt
 = 
g
->
Ælgc
;

775 
g
->
Ælgc
 = 
o
;

776 
	`ª£tbô
(
o
->
m¨ked
, 
FINALIZEDBIT
);

777 i‡(
	`isswìµha£
(
g
))

778 
	`makewhôe
(
g
, 
o
);

779  
o
;

780 
	}
}

783 
	$dŸheˇŒ
 (
lua_Sèã
 *
L
, *
ud
) {

784 
	`UNUSED
(
ud
);

785 
	`luaD_ˇŒ
(
L
, L->
t›
 - 2, 0, 0);

786 
	}
}

789 
	$GCTM
 (
lua_Sèã
 *
L
, 
¥›ag©ìº‹s
) {

790 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

791 c⁄° 
TVÆue
 *
tm
;

792 
TVÆue
 
v
;

793 
	`£tgcovÆue
(
L
, &
v
, 
	`ud©a2föÆize
(
g
));

794 
tm
 = 
	`luaT_gëtmbyobj
(
L
, &
v
, 
TM_GC
);

795 i‡(
tm
 !
NULL
 && 
	`âisfun˘i⁄
(tm)) {

796 
°©us
;

797 
lu_byã
 
ﬁdah
 = 
L
->
Ælowhook
;

798 
ru¬ög
 = 
g
->
g¸u¬ög
;

799 
L
->
Ælowhook
 = 0;

800 
g
->
g¸u¬ög
 = 0;

801 
	`£tobj2s
(
L
, L->
t›
, 
tm
);

802 
	`£tobj2s
(
L
, L->
t›
 + 1, &
v
);

803 
L
->
t›
 += 2;

804 
°©us
 = 
	`luaD_pˇŒ
(
L
, 
dŸheˇŒ
, 
NULL
, 
	`ßve°ack
(L, L->
t›
 - 2), 0);

805 
L
->
Ælowhook
 = 
ﬁdah
;

806 
g
->
g¸u¬ög
 = 
ru¬ög
;

807 i‡(
°©us
 !
LUA_OK
 && 
¥›ag©ìº‹s
) {

808 i‡(
°©us
 =
LUA_ERRRUN
) {

809 c⁄° *
msg
 = (
	`âis°rög
(
L
->
t›
 - 1))

810 ? 
	`svÆue
(
L
->
t›
 - 1)

812 
	`luaO_pushf°rög
(
L
, "îr‹ i¿__g¯mëamëhod (%s)", 
msg
);

813 
°©us
 = 
LUA_ERRGCMM
;

815 
	`luaD_throw
(
L
, 
°©us
);

818 
	}
}

824 
	$ru«„wföÆizîs
 (
lua_Sèã
 *
L
) {

825 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

826 
i
;

827 
	`lua_as£π
(!
g
->
tobe‚z
 || g->
gcfönum
 > 0);

828 
i
 = 0; 
g
->
tobe‚z
 && i < g->
gcfönum
; i++)

829 
	`GCTM
(
L
, 1);

830 
g
->
gcfönum
 = (!g->
tobe‚z
) ? 0

831 : 
g
->
gcfönum
 * 2;

832  
i
;

833 
	}
}

839 
	$ˇŒÆÕídögföÆizîs
 (
lua_Sèã
 *
L
, 
¥›ag©ìº‹s
) {

840 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

841 
g
->
tobe‚z
)

842 
	`GCTM
(
L
, 
¥›ag©ìº‹s
);

843 
	}
}

849 
GCObje˘
 **
	$födœ°
 (
GCObje˘
 **
p
) {

850 *
p
 !
NULL
)

851 
p
 = &(*p)->
√xt
;

852  
p
;

853 
	}
}

860 
	$£∑øãtobe‚z
 (
globÆ_Sèã
 *
g
, 
Æl
) {

861 
GCObje˘
 *
cuº
;

862 
GCObje˘
 **
p
 = &
g
->
föobj
;

863 
GCObje˘
 **
œ°√xt
 = 
	`födœ°
(&
g
->
tobe‚z
);

864 (
cuº
 = *
p
Ë!
NULL
) {

865 
	`lua_as£π
(
	`toföÆize
(
cuº
));

866 i‡(!(
	`iswhôe
(
cuº
Ë|| 
Æl
))

867 
p
 = &
cuº
->
√xt
;

869 *
p
 = 
cuº
->
√xt
;

870 
cuº
->
√xt
 = *
œ°√xt
;

871 *
œ°√xt
 = 
cuº
;

872 
œ°√xt
 = &
cuº
->
√xt
;

875 
	}
}

882 
	$luaC_checkföÆizî
 (
lua_Sèã
 *
L
, 
GCObje˘
 *
o
, 
TabÀ
 *
mt
) {

883 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

884 i‡(
	`toföÆize
(
o
) ||

885 
	`gÁ°tm
(
g
, 
mt
, 
TM_GC
Ë=
NULL
)

888 
GCObje˘
 **
p
;

889 i‡(
	`isswìµha£
(
g
)) {

890 
	`makewhôe
(
g
, 
o
);

891 i‡(
g
->
swìpgc
 =&
o
->
√xt
)

892 
g
->
swìpgc
 = 
	`swì±ﬁive
(
L
, g->swìpgc, 
NULL
);

895 
p
 = &
g
->
Ælgc
; *∞!
o
;Ö = &(*p)->
√xt
) { }

896 *
p
 = 
o
->
√xt
;

897 
o
->
√xt
 = 
g
->
föobj
;

898 
g
->
föobj
 = 
o
;

899 
	`l_£tbô
(
o
->
m¨ked
, 
FINALIZEDBIT
);

901 
	}
}

920 
	$£çau£
 (
globÆ_Sèã
 *
g
) {

921 
l_mem
 
thªshﬁd
, 
debt
;

922 
l_mem
 
e°im©e
 = 
g
->
GCe°im©e
 / 
PAUSEADJ
;

923 
	`lua_as£π
(
e°im©e
 > 0);

924 
thªshﬁd
 = (
g
->
g˝au£
 < 
MAX_LMEM
 / 
e°im©e
)

925 ? 
e°im©e
 * 
g
->
g˝au£


926 : 
MAX_LMEM
;

927 
debt
 = 
	`gëtŸÆbyãs
(
g
Ë- 
thªshﬁd
;

928 
	`luaE_£tdebt
(
g
, 
debt
);

929 
	}
}

940 
	$íãrswìp
 (
lua_Sèã
 *
L
) {

941 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

942 
n
 = 0;

943 
g
->
gc°©e
 = 
GCSsw∑Œgc
;

944 
	`lua_as£π
(
g
->
swìpgc
 =
NULL
);

945 
g
->
swìpgc
 = 
	`swì±ﬁive
(
L
, &g->
Ælgc
, &
n
);

946  
n
;

947 
	}
}

950 
	$luaC_‰ìÆlobje˘s
 (
lua_Sèã
 *
L
) {

951 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

952 
	`£∑øãtobe‚z
(
g
, 1);

953 
	`lua_as£π
(
g
->
föobj
 =
NULL
);

954 
	`ˇŒÆÕídögföÆizîs
(
L
, 0);

955 
	`lua_as£π
(
g
->
tobe‚z
 =
NULL
);

956 
g
->
cuºítwhôe
 = 
WHITEBITS
;

957 
g
->
gcköd
 = 
KGC_NORMAL
;

958 
	`swìpwhﬁñi°
(
L
, &
g
->
föobj
);

959 
	`swìpwhﬁñi°
(
L
, &
g
->
Ælgc
);

960 
	`swìpwhﬁñi°
(
L
, &
g
->
fixedgc
);

961 
	`lua_as£π
(
g
->
°π
.
nu£
 == 0);

962 
	}
}

965 
l_mem
 
	$©omic
 (
lua_Sèã
 *
L
) {

966 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

967 
l_mem
 
w‹k
;

968 
GCObje˘
 *
‹igwók
, *
‹igÆl
;

969 
GCObje˘
 *
gøyagaö
 = 
g
->grayagain;

970 
	`lua_as£π
(
g
->
ïhemî⁄
 =
NULL
 && g->
wók
 == NULL);

971 
	`lua_as£π
(!
	`iswhôe
(
g
->
maöthªad
));

972 
g
->
gc°©e
 = 
GCSösidótomic
;

973 
g
->
GCmemåav
 = 0;

974 
	`m¨kobje˘
(
g
, 
L
);

976 
	`m¨kvÆue
(
g
, &g->
l_ªgi°ry
);

977 
	`m¨kmt
(
g
);

979 
	`ªm¨kupvÆs
(
g
);

980 
	`¥›ag©óŒ
(
g
);

981 
w‹k
 = 
g
->
GCmemåav
;

982 
g
->
gøy
 = 
gøyagaö
;

983 
	`¥›ag©óŒ
(
g
);

984 
g
->
GCmemåav
 = 0;

985 
	`c⁄vîgìphemî⁄s
(
g
);

988 
	`˛órvÆues
(
g
, g->
wók
, 
NULL
);

989 
	`˛órvÆues
(
g
, g->
Ælwók
, 
NULL
);

990 
‹igwók
 = 
g
->
wók
; 
‹igÆl
 = g->
Ælwók
;

991 
w‹k
 +
g
->
GCmemåav
;

992 
	`£∑øãtobe‚z
(
g
, 0);

993 
g
->
gcfönum
 = 1;

994 
	`m¨kbeög‚z
(
g
);

995 
	`¥›ag©óŒ
(
g
);

996 
g
->
GCmemåav
 = 0;

997 
	`c⁄vîgìphemî⁄s
(
g
);

1000 
	`˛órkeys
(
g
, g->
ïhemî⁄
, 
NULL
);

1001 
	`˛órkeys
(
g
, g->
Ælwók
, 
NULL
);

1003 
	`˛órvÆues
(
g
, g->
wók
, 
‹igwók
);

1004 
	`˛órvÆues
(
g
, g->
Ælwók
, 
‹igÆl
);

1005 
g
->
cuºítwhôe
 = 
	`ˇ°_byã
(
	`Ÿhîwhôe
(g));

1006 
w‹k
 +
g
->
GCmemåav
;

1007  
w‹k
;

1008 
	}
}

1011 
lu_mem
 
	$swìp°ï
 (
lua_Sèã
 *
L
, 
globÆ_Sèã
 *
g
,

1012 
√xt°©e
, 
GCObje˘
 **
√xéi°
) {

1013 i‡(
g
->
swìpgc
) {

1014 
l_mem
 
ﬁddebt
 = 
g
->
GCdebt
;

1015 
g
->
swìpgc
 = 
	`swì∂i°
(
L
, g->swìpgc, 
GCSWEEPMAX
);

1016 
g
->
GCe°im©e
 +g->
GCdebt
 - 
ﬁddebt
;

1017 i‡(
g
->
swìpgc
)

1018  (
GCSWEEPMAX
 * 
GCSWEEPCOST
);

1021 
g
->
gc°©e
 = 
√xt°©e
;

1022 
g
->
swìpgc
 = 
√xéi°
;

1024 
	}
}

1027 
lu_mem
 
	$sögÀ°ï
 (
lua_Sèã
 *
L
) {

1028 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

1029 
g
->
gc°©e
) {

1030 
GCS∑u£
: {

1031 
g
->
GCmemåav
 = g->
°π
.
size
 * (
GCObje˘
*);

1032 
	`ª°¨tcﬁÀ˘i⁄
(
g
);

1033 
g
->
gc°©e
 = 
GCS¥›ag©e
;

1034  
g
->
GCmemåav
;

1036 
GCS¥›ag©e
: {

1037 
g
->
GCmemåav
 = 0;

1038 
	`lua_as£π
(
g
->
gøy
);

1039 
	`¥›ag©em¨k
(
g
);

1040 i‡(
g
->
gøy
 =
NULL
)

1041 
g
->
gc°©e
 = 
GCS©omic
;

1042  
g
->
GCmemåav
;

1044 
GCS©omic
: {

1045 
lu_mem
 
w‹k
;

1046 
sw
;

1047 
	`¥›ag©óŒ
(
g
);

1048 
w‹k
 = 
	`©omic
(
L
);

1049 
sw
 = 
	`íãrswìp
(
L
);

1050 
g
->
GCe°im©e
 = 
	`gëtŸÆbyãs
(g); ;

1051  
w‹k
 + 
sw
 * 
GCSWEEPCOST
;

1053 
GCSsw∑Œgc
: {

1054  
	`swìp°ï
(
L
, 
g
, 
GCSswpföobj
, &g->
föobj
);

1056 
GCSswpföobj
: {

1057  
	`swìp°ï
(
L
, 
g
, 
GCSsw±obe‚z
, &g->
tobe‚z
);

1059 
GCSsw±obe‚z
: {

1060  
	`swìp°ï
(
L
, 
g
, 
GCSsw≥nd
, 
NULL
);

1062 
GCSsw≥nd
: {

1063 
	`makewhôe
(
g
, g->
maöthªad
);

1064 
	`checkSizes
(
L
, 
g
);

1065 
g
->
gc°©e
 = 
GCSˇŒfö
;

1068 
GCSˇŒfö
: {

1069 i‡(
g
->
tobe‚z
 && g->
gcköd
 !
KGC_EMERGENCY
) {

1070 
n
 = 
	`ru«„wföÆizîs
(
L
);

1071  (
n
 * 
GCFINALIZECOST
);

1074 
g
->
gc°©e
 = 
GCS∑u£
;

1078 : 
	`lua_as£π
(0);  0;

1080 
	}
}

1087 
	$luaC_ru¡û°©e
 (
lua_Sèã
 *
L
, 
°©esmask
) {

1088 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

1089 !
	`ã°bô
(
°©esmask
, 
g
->
gc°©e
))

1090 
	`sögÀ°ï
(
L
);

1091 
	}
}

1098 
l_mem
 
	$gëdebt
 (
globÆ_Sèã
 *
g
) {

1099 
l_mem
 
debt
 = 
g
->
GCdebt
;

1100 
°ïmul
 = 
g
->
gc°ïmul
;

1101 
debt
 = (debà/ 
STEPMULADJ
) + 1;

1102 
debt
 = (debà< 
MAX_LMEM
 / 
°ïmul
) ? debt * stepmul : MAX_LMEM;

1103  
debt
;

1104 
	}
}

1109 
	$luaC_°ï
 (
lua_Sèã
 *
L
) {

1110 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

1111 
l_mem
 
debt
 = 
	`gëdebt
(
g
);

1112 i‡(!
g
->
g¸u¬ög
) {

1113 
	`luaE_£tdebt
(
g
, -
GCSTEPSIZE
 * 10);

1117 
lu_mem
 
w‹k
 = 
	`sögÀ°ï
(
L
);

1118 
debt
 -
w‹k
;

1119 } 
debt
 > -
GCSTEPSIZE
 && 
g
->
gc°©e
 !
GCS∑u£
);

1120 i‡(
g
->
gc°©e
 =
GCS∑u£
)

1121 
	`£çau£
(
g
);

1123 
debt
 = (debà/ 
g
->
gc°ïmul
Ë* 
STEPMULADJ
;

1124 
	`luaE_£tdebt
(
g
, 
debt
);

1125 
	`ru«„wföÆizîs
(
L
);

1127 
	}
}

1139 
	$luaC_fuŒgc
 (
lua_Sèã
 *
L
, 
i£mîgícy
) {

1140 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

1141 
	`lua_as£π
(
g
->
gcköd
 =
KGC_NORMAL
);

1142 i‡(
i£mîgícy
Ë
g
->
gcköd
 = 
KGC_EMERGENCY
;

1143 i‡(
	`kìpöv¨ü¡
(
g
)) {

1144 
	`íãrswìp
(
L
);

1147 
	`luaC_ru¡û°©e
(
L
, 
	`bômask
(
GCS∑u£
));

1148 
	`luaC_ru¡û°©e
(
L
, ~
	`bômask
(
GCS∑u£
));

1149 
	`luaC_ru¡û°©e
(
L
, 
	`bômask
(
GCSˇŒfö
));

1151 
	`lua_as£π
(
g
->
GCe°im©e
 =
	`gëtŸÆbyãs
(g));

1152 
	`luaC_ru¡û°©e
(
L
, 
	`bômask
(
GCS∑u£
));

1153 
g
->
gcköd
 = 
KGC_NORMAL
;

1154 
	`£çau£
(
g
);

1155 
	}
}

	@lib/archive/lua-5.3.0/src/lgc.h

7 #i‚de‡
lgc_h


8 
	#lgc_h


	)

11 
	~"lobje˘.h
"

12 
	~"l°©e.h
"

30 #i‡!
deföed
(
GCSTEPSIZE
)

32 
	#GCSTEPSIZE
 (
	`ˇ°_öt
(100 * (
TSåög
)))

	)

39 
	#GCS¥›ag©e
 0

	)

40 
	#GCS©omic
 1

	)

41 
	#GCSsw∑Œgc
 2

	)

42 
	#GCSswpföobj
 3

	)

43 
	#GCSsw±obe‚z
 4

	)

44 
	#GCSsw≥nd
 5

	)

45 
	#GCSˇŒfö
 6

	)

46 
	#GCS∑u£
 7

	)

49 
	#isswìµha£
(
g
) \

50 (
GCSsw∑Œgc
 <(
g
)->
gc°©e
 && (g)->gc°©ê<
GCSsw≥nd
)

	)

61 
	#kìpöv¨ü¡
(
g
Ë((g)->
gc°©e
 <
GCS©omic
)

	)

67 
	#ª£tbôs
(
x
,
m
Ë((xË&
	`ˇ°
(
lu_byã
, ~(m)))

	)

68 
	#£tbôs
(
x
,
m
Ë((xË|(m))

	)

69 
	#ã°bôs
(
x
,
m
Ë((xË& (m))

	)

70 
	#bômask
(
b
Ë(1<<(b))

	)

71 
	#bô2mask
(
b1
,
b2
Ë(
	`bômask
(b1Ë| bômask(b2))

	)

72 
	#l_£tbô
(
x
,
b
Ë
	`£tbôs
(x, 
	`bômask
(b))

	)

73 
	#ª£tbô
(
x
,
b
Ë
	`ª£tbôs
(x, 
	`bômask
(b))

	)

74 
	#ã°bô
(
x
,
b
Ë
	`ã°bôs
(x, 
	`bômask
(b))

	)

78 
	#WHITE0BIT
 0

	)

79 
	#WHITE1BIT
 1

	)

80 
	#BLACKBIT
 2

	)

81 
	#FINALIZEDBIT
 3

	)

84 
	#WHITEBITS
 
	`bô2mask
(
WHITE0BIT
, 
WHITE1BIT
)

	)

87 
	#iswhôe
(
x
Ë
	`ã°bôs
((x)->
m¨ked
, 
WHITEBITS
)

	)

88 
	#isbœck
(
x
Ë
	`ã°bô
((x)->
m¨ked
, 
BLACKBIT
)

	)

89 
	#isgøy
(
x
) \

90 (!
	`ã°bôs
((
x
)->
m¨ked
, 
WHITEBITS
 | 
	`bômask
(
BLACKBIT
)))

	)

92 
	#toföÆize
(
x
Ë
	`ã°bô
((x)->
m¨ked
, 
FINALIZEDBIT
)

	)

94 
	#Ÿhîwhôe
(
g
Ë((g)->
cuºítwhôe
 ^ 
WHITEBITS
)

	)

95 
	#isdódm
(
ow
,
m
Ë(!(((mË^ 
WHITEBITS
Ë& (ow)))

	)

96 
	#isdód
(
g
,
v
Ë
	`isdódm
(
	`Ÿhîwhôe
(g), (v)->
m¨ked
)

	)

98 
	#ch™gewhôe
(
x
Ë((x)->
m¨ked
 ^
WHITEBITS
)

	)

99 
	#gøy2bœck
(
x
Ë
	`l_£tbô
((x)->
m¨ked
, 
BLACKBIT
)

	)

101 
	#luaC_whôe
(
g
Ë
	`ˇ°
(
lu_byã
, (g)->
cuºítwhôe
 & 
WHITEBITS
)

	)

104 
	#luaC_c⁄dGC
(
L
,
c
) \

105 {i‡(
	`G
(
L
)->
GCdebt
 > 0Ë{
c
;}; 
	`c⁄dch™gemem
(L);}

	)

106 
	#luaC_checkGC
(
L
Ë
	`luaC_c⁄dGC
(L, 
	`luaC_°ï
(L);)

	)

109 
	#luaC_b¨rõr
(
L
,
p
,
v
) { \

110 i‡(
	`iscﬁÀ˘abÀ
(
v
Ë&& 
	`isbœck
(
p
Ë&& 
	`iswhôe
(
	`gcvÆue
(v))) \

111 
	`luaC_b¨rõr_
(
L
,
	`obj2gco
(
p
),
	`gcvÆue
(
v
)); }

	)

113 
	#luaC_b¨rõrback
(
L
,
p
,
v
) { \

114 i‡(
	`iscﬁÀ˘abÀ
(
v
Ë&& 
	`isbœck
(
p
Ë&& 
	`iswhôe
(
	`gcvÆue
(v))) \

115 
	`luaC_b¨rõrback_
(
L
,
p
); }

	)

117 
	#luaC_objb¨rõr
(
L
,
p
,
o
) { \

118 i‡(
	`isbœck
(
p
Ë&& 
	`iswhôe
(
o
)) \

119 
	`luaC_b¨rõr_
(
L
,
	`obj2gco
(
p
),obj2gco(
o
)); }

	)

121 
	#luaC_upvÆb¨rõr
(
L
,
uv
) \

122 { i‡(
	`iscﬁÀ˘abÀ
((
uv
)->
v
Ë&& !
	`upis›í
(uv)) \

123 
	`luaC_upvÆb¨rõr_
(
L
,
uv
); }

	)

125 
LUAI_FUNC
 
luaC_fix
 (
lua_Sèã
 *
L
, 
GCObje˘
 *
o
);

126 
LUAI_FUNC
 
luaC_‰ìÆlobje˘s
 (
lua_Sèã
 *
L
);

127 
LUAI_FUNC
 
luaC_°ï
 (
lua_Sèã
 *
L
);

128 
LUAI_FUNC
 
luaC_ru¡û°©e
 (
lua_Sèã
 *
L
, 
°©esmask
);

129 
LUAI_FUNC
 
luaC_fuŒgc
 (
lua_Sèã
 *
L
, 
i£mîgícy
);

130 
LUAI_FUNC
 
GCObje˘
 *
luaC_√wobj
 (
lua_Sèã
 *
L
, 
â
, 
size_t
 
sz
);

131 
LUAI_FUNC
 
luaC_b¨rõr_
 (
lua_Sèã
 *
L
, 
GCObje˘
 *
o
, GCObje˘ *
v
);

132 
LUAI_FUNC
 
luaC_b¨rõrback_
 (
lua_Sèã
 *
L
, 
TabÀ
 *
o
);

133 
LUAI_FUNC
 
luaC_upvÆb¨rõr_
 (
lua_Sèã
 *
L
, 
UpVÆ
 *
uv
);

134 
LUAI_FUNC
 
luaC_checkföÆizî
 (
lua_Sèã
 *
L
, 
GCObje˘
 *
o
, 
TabÀ
 *
mt
);

135 
LUAI_FUNC
 
luaC_upvdeccou¡
 (
lua_Sèã
 *
L
, 
UpVÆ
 *
uv
);

	@lib/archive/lua-5.3.0/src/linit.c

8 
	#löô_c


	)

9 
	#LUA_LIB


	)

27 
	~"Õªfix.h
"

30 
	~<°ddef.h
>

32 
	~"lua.h
"

34 
	~"luÆib.h
"

35 
	~"œuxlib.h
"

42 c⁄° 
luaL_Reg
 
	glﬂdedlibs
[] = {

43 {"_G", 
lua›í_ba£
},

44 {
LUA_LOADLIBNAME
, 
lua›í_∑ckage
},

45 {
LUA_COLIBNAME
, 
lua›í_c‹outöe
},

46 {
LUA_TABLIBNAME
, 
lua›í_èbÀ
},

47 {
LUA_IOLIBNAME
, 
lua›í_io
},

48 {
LUA_OSLIBNAME
, 
lua›í_os
},

49 {
LUA_STRLIBNAME
, 
lua›í_°rög
},

50 {
LUA_MATHLIBNAME
, 
lua›í_m©h
},

51 {
LUA_UTF8LIBNAME
, 
lua›í_utf8
},

52 {
LUA_DBLIBNAME
, 
lua›í_debug
},

53 #i‡
deföed
(
LUA_COMPAT_BITLIB
)

54 {
LUA_BITLIBNAME
, 
lua›í_bô32
},

56 {
NULL
, NULL}

60 
LUALIB_API
 
	$luaL_›ílibs
 (
lua_Sèã
 *
L
) {

61 c⁄° 
luaL_Reg
 *
lib
;

63 
lib
 = 
lﬂdedlibs
;Üib->
func
;Üib++) {

64 
	`luaL_ªquúef
(
L
, 
lib
->
«me
,Üib->
func
, 1);

65 
	`lua_p›
(
L
, 1);

67 
	}
}

	@lib/archive/lua-5.3.0/src/liolib.c

7 
	#liﬁib_c


	)

8 
	#LUA_LIB


	)

10 
	~"Õªfix.h
"

13 
	~<˘y≥.h
>

14 
	~<î∫o.h
>

15 
	~<loˇÀ.h
>

16 
	~<°dio.h
>

17 
	~<°dlib.h
>

18 
	~<°rög.h
>

20 
	~"lua.h
"

22 
	~"œuxlib.h
"

23 
	~"luÆib.h
"

26 #i‡!
deföed
(
l_checkmode
)

33 
	#l_checkmode
(
mode
) \

34 (*
mode
 !'\0' && 
	`°rchr
("rwa", *(mode++)Ë!
NULL
 && \

35 (*
mode
 != '+' || ++mode) && \

36 (*
mode
 != 'b' || ++mode) && \

37 (*
mode
 ='\0'))

	)

48 #i‡!
deföed
(
l_p›í
)

50 #i‡
deföed
(
LUA_USE_POSIX
)

52 
	#l_p›í
(
L
,
c
,
m
Ë(
	`fÊush
(
NULL
), 
	`p›í
(c,m))

	)

53 
	#l_p˛o£
(
L
,
fûe
Ë(
	`p˛o£
(fûe))

	)

55 #ñi‡
deföed
(
LUA_USE_WINDOWS
)

57 
	#l_p›í
(
L
,
c
,
m
Ë(
	`_p›í
(c,m))

	)

58 
	#l_p˛o£
(
L
,
fûe
Ë(
	`_p˛o£
(fûe))

	)

63 
	#l_p›í
(
L
,
c
,
m
) \

64 (()(()
c
, 
m
), \

65 
	`luaL_îr‹
(
L
, "'popen'Çot supported"), \

66 (
FILE
*)0)

	)

67 
	#l_p˛o£
(
L
,
fûe
Ë(()L, ()fûe, -1)

	)

76 #i‡!
deföed
(
l_gëc
)

78 #i‡
deföed
(
LUA_USE_POSIX
)

79 
	#l_gëc
(
f
Ë
	`gëc_u∆ocked
(f)

	)

80 
	#l_lockfûe
(
f
Ë
	`Êockfûe
(f)

	)

81 
	#l_u∆ockfûe
(
f
Ë
	`fu∆ockfûe
(f)

	)

83 
	#l_gëc
(
f
Ë
	`gëc
(f)

	)

84 
	#l_lockfûe
(
f
Ë(()0)

	)

85 
	#l_u∆ockfûe
(
f
Ë(()0)

	)

97 #i‡!
deföed
(
l_f£ek
)

99 #i‡
deföed
(
LUA_USE_POSIX
)

101 
	~<sys/ty≥s.h
>

103 
	#l_f£ek
(
f
,
o
,
w
Ë
	`f£eko
(f,o,w)

	)

104 
	#l_·ñl
(
f
Ë
	`·ñlo
(f)

	)

105 
	#l_£eknum
 
off_t


	)

107 #ñi‡
deföed
(
LUA_USE_WINDOWS
Ë&& !deföed(
_CRTIMP_TYPEINFO
) \

108 && 
deföed
(
_MSC_VER
Ë&& (
	g_MSC_VER
 >= 1400)

111 
	#l_f£ek
(
f
,
o
,
w
Ë
	`_f£eki64
(f,o,w)

	)

112 
	#l_·ñl
(
f
Ë
	`_·ñli64
(f)

	)

113 
	#l_£eknum
 
__öt64


	)

118 
	#l_f£ek
(
f
,
o
,
w
Ë
	`f£ek
(f,o,w)

	)

119 
	#l_·ñl
(
f
Ë
	`·ñl
(f)

	)

120 
	#l_£eknum
 

	)

129 
	#IO_PREFIX
 "_IO_"

	)

130 
	#IOPREF_LEN
 ((
IO_PREFIX
)/(Ë- 1)

	)

131 
	#IO_INPUT
 (
IO_PREFIX
 "öput")

	)

132 
	#IO_OUTPUT
 (
IO_PREFIX
 "ouçut")

	)

135 
luaL_Såóm
 
	tLSåóm
;

138 
	#tﬁ°ªam
(
L
Ë((
LSåóm
 *)
	`luaL_checkud©a
(L, 1, 
LUA_FILEHANDLE
))

	)

140 
	#is˛o£d
(
p
Ë(’)->
˛o£f
 =
NULL
)

	)

143 
	$io_ty≥
 (
lua_Sèã
 *
L
) {

144 
LSåóm
 *
p
;

145 
	`luaL_check™y
(
L
, 1);

146 
p
 = (
LSåóm
 *)
	`luaL_ã°ud©a
(
L
, 1, 
LUA_FILEHANDLE
);

147 i‡(
p
 =
NULL
)

148 
	`lua_pushnû
(
L
);

149 i‡(
	`is˛o£d
(
p
))

150 
	`lua_pushlôîÆ
(
L
, "closed file");

152 
	`lua_pushlôîÆ
(
L
, "file");

154 
	}
}

157 
	$f_to°rög
 (
lua_Sèã
 *
L
) {

158 
LSåóm
 *
p
 = 
	`tﬁ°ªam
(
L
);

159 i‡(
	`is˛o£d
(
p
))

160 
	`lua_pushlôîÆ
(
L
, "file (closed)");

162 
	`lua_pushf°rög
(
L
, "fûê(%p)", 
p
->
f
);

164 
	}
}

167 
FILE
 *
	$tofûe
 (
lua_Sèã
 *
L
) {

168 
LSåóm
 *
p
 = 
	`tﬁ°ªam
(
L
);

169 i‡(
	`is˛o£d
(
p
))

170 
	`luaL_îr‹
(
L
, "attemptÅo useá closed file");

171 
	`lua_as£π
(
p
->
f
);

172  
p
->
f
;

173 
	}
}

181 
LSåóm
 *
	$√w¥efûe
 (
lua_Sèã
 *
L
) {

182 
LSåóm
 *
p
 = (LSåóm *)
	`lua_√wu£rd©a
(
L
, (LStream));

183 
p
->
˛o£f
 = 
NULL
;

184 
	`luaL_£tmë©abÀ
(
L
, 
LUA_FILEHANDLE
);

185  
p
;

186 
	}
}

194 
	$aux_˛o£
 (
lua_Sèã
 *
L
) {

195 
LSåóm
 *
p
 = 
	`tﬁ°ªam
(
L
);

196 vﬁ©ûê
lua_CFun˘i⁄
 
cf
 = 
p
->
˛o£f
;

197 
p
->
˛o£f
 = 
NULL
;

198  (*
cf
)(
L
);

199 
	}
}

202 
	$io_˛o£
 (
lua_Sèã
 *
L
) {

203 i‡(
	`lua_i¢⁄e
(
L
, 1))

204 
	`lua_gëfõld
(
L
, 
LUA_REGISTRYINDEX
, 
IO_OUTPUT
);

205 
	`tofûe
(
L
);

206  
	`aux_˛o£
(
L
);

207 
	}
}

210 
	$f_gc
 (
lua_Sèã
 *
L
) {

211 
LSåóm
 *
p
 = 
	`tﬁ°ªam
(
L
);

212 i‡(!
	`is˛o£d
(
p
Ë&&Ö->
f
 !
NULL
)

213 
	`aux_˛o£
(
L
);

215 
	}
}

221 
	$io_f˛o£
 (
lua_Sèã
 *
L
) {

222 
LSåóm
 *
p
 = 
	`tﬁ°ªam
(
L
);

223 
ªs
 = 
	`f˛o£
(
p
->
f
);

224  
	`luaL_fûîesu…
(
L
, (
ªs
 =0), 
NULL
);

225 
	}
}

228 
LSåóm
 *
	$√wfûe
 (
lua_Sèã
 *
L
) {

229 
LSåóm
 *
p
 = 
	`√w¥efûe
(
L
);

230 
p
->
f
 = 
NULL
;

231 
p
->
˛o£f
 = &
io_f˛o£
;

232  
p
;

233 
	}
}

236 
	$›ícheck
 (
lua_Sèã
 *
L
, c⁄° *
‚ame
, c⁄° *
mode
) {

237 
LSåóm
 *
p
 = 
	`√wfûe
(
L
);

238 
p
->
f
 = 
	`f›í
(
‚ame
, 
mode
);

239 i‡(
p
->
f
 =
NULL
)

240 
	`luaL_îr‹
(
L
, "ˇ¬Ÿ o≥¿fûê'%s' (%s)", 
‚ame
, 
	`°ªº‹
(
î∫o
));

241 
	}
}

244 
	$io_›í
 (
lua_Sèã
 *
L
) {

245 c⁄° *
fûíame
 = 
	`luaL_check°rög
(
L
, 1);

246 c⁄° *
mode
 = 
	`luaL_›t°rög
(
L
, 2, "r");

247 
LSåóm
 *
p
 = 
	`√wfûe
(
L
);

248 c⁄° *
md
 = 
mode
;

249 
	`luaL_¨gcheck
(
L
, 
	`l_checkmode
(
md
), 2, "invalid mode");

250 
p
->
f
 = 
	`f›í
(
fûíame
, 
mode
);

251  (
p
->
f
 =
NULL
Ë? 
	`luaL_fûîesu…
(
L
, 0, 
fûíame
) : 1;

252 
	}
}

258 
	$io_p˛o£
 (
lua_Sèã
 *
L
) {

259 
LSåóm
 *
p
 = 
	`tﬁ°ªam
(
L
);

260  
	`luaL_exe¸esu…
(
L
, 
	`l_p˛o£
(L, 
p
->
f
));

261 
	}
}

264 
	$io_p›í
 (
lua_Sèã
 *
L
) {

265 c⁄° *
fûíame
 = 
	`luaL_check°rög
(
L
, 1);

266 c⁄° *
mode
 = 
	`luaL_›t°rög
(
L
, 2, "r");

267 
LSåóm
 *
p
 = 
	`√w¥efûe
(
L
);

268 
p
->
f
 = 
	`l_p›í
(
L
, 
fûíame
, 
mode
);

269 
p
->
˛o£f
 = &
io_p˛o£
;

270  (
p
->
f
 =
NULL
Ë? 
	`luaL_fûîesu…
(
L
, 0, 
fûíame
) : 1;

271 
	}
}

274 
	$io_tmpfûe
 (
lua_Sèã
 *
L
) {

275 
LSåóm
 *
p
 = 
	`√wfûe
(
L
);

276 
p
->
f
 = 
	`tmpfûe
();

277  (
p
->
f
 =
NULL
Ë? 
	`luaL_fûîesu…
(
L
, 0, NULL) : 1;

278 
	}
}

281 
FILE
 *
	$gëiofûe
 (
lua_Sèã
 *
L
, c⁄° *
födex
) {

282 
LSåóm
 *
p
;

283 
	`lua_gëfõld
(
L
, 
LUA_REGISTRYINDEX
, 
födex
);

284 
p
 = (
LSåóm
 *)
	`lua_tou£rd©a
(
L
, -1);

285 i‡(
	`is˛o£d
(
p
))

286 
	`luaL_îr‹
(
L
, "°™d¨d %†fûêi†˛o£d", 
födex
 + 
IOPREF_LEN
);

287  
p
->
f
;

288 
	}
}

291 
	$g_iofûe
 (
lua_Sèã
 *
L
, c⁄° *
f
, c⁄° *
mode
) {

292 i‡(!
	`lua_i¢⁄e‹nû
(
L
, 1)) {

293 c⁄° *
fûíame
 = 
	`lua_to°rög
(
L
, 1);

294 i‡(
fûíame
)

295 
	`›ícheck
(
L
, 
fûíame
, 
mode
);

297 
	`tofûe
(
L
);

298 
	`lua_pushvÆue
(
L
, 1);

300 
	`lua_£tfõld
(
L
, 
LUA_REGISTRYINDEX
, 
f
);

303 
	`lua_gëfõld
(
L
, 
LUA_REGISTRYINDEX
, 
f
);

305 
	}
}

308 
	$io_öput
 (
lua_Sèã
 *
L
) {

309  
	`g_iofûe
(
L
, 
IO_INPUT
, "r");

310 
	}
}

313 
	$io_ouçut
 (
lua_Sèã
 *
L
) {

314  
	`g_iofûe
(
L
, 
IO_OUTPUT
, "w");

315 
	}
}

318 
io_ªadlöe
 (
lua_Sèã
 *
L
);

321 
	$aux_löes
 (
lua_Sèã
 *
L
, 
to˛o£
) {

322 
n
 = 
	`lua_gët›
(
L
) - 1;

323 
	`lua_pushöãgî
(
L
, 
n
);

324 
	`lua_pushboﬁón
(
L
, 
to˛o£
);

325 
	`lua_rŸ©e
(
L
, 2, 2);

326 
	`lua_pushc˛osuª
(
L
, 
io_ªadlöe
, 3 + 
n
);

327 
	}
}

330 
	$f_löes
 (
lua_Sèã
 *
L
) {

331 
	`tofûe
(
L
);

332 
	`aux_löes
(
L
, 0);

334 
	}
}

337 
	$io_löes
 (
lua_Sèã
 *
L
) {

338 
to˛o£
;

339 i‡(
	`lua_i¢⁄e
(
L
, 1)Ë
	`lua_pushnû
(L);

340 i‡(
	`lua_i¢û
(
L
, 1)) {

341 
	`lua_gëfõld
(
L
, 
LUA_REGISTRYINDEX
, 
IO_INPUT
);

342 
	`lua_ª∂a˚
(
L
, 1);

343 
	`tofûe
(
L
);

344 
to˛o£
 = 0;

347 c⁄° *
fûíame
 = 
	`luaL_check°rög
(
L
, 1);

348 
	`›ícheck
(
L
, 
fûíame
, "r");

349 
	`lua_ª∂a˚
(
L
, 1);

350 
to˛o£
 = 1;

352 
	`aux_löes
(
L
, 
to˛o£
);

354 
	}
}

365 
	#MAXRN
 200

	)

369 
FILE
 *
	mf
;

370 
	mc
;

371 
	mn
;

372 
	mbuff
[
MAXRN
 + 1];

373 } 
	tRN
;

379 
	$√xtc
 (
RN
 *
∫
) {

380 i‡(
∫
->
n
 >
MAXRN
) {

381 
∫
->
buff
[0] = '\0';

385 
∫
->
buff
[∫->
n
++] =Ñn->
c
;

386 
∫
->
c
 = 
	`l_gëc
‘n->
f
);

389 
	}
}

395 
	$ã°2
 (
RN
 *
∫
, c⁄° *
£t
) {

396 i‡(
∫
->
c
 =
£t
[0] || (rn->c == set[1] &&Ñn->c != '\0'))

397  
	`√xtc
(
∫
);

399 
	}
}

405 
	$ªaddigôs
 (
RN
 *
∫
, 
hex
) {

406 
cou¡
 = 0;

407 (
hex
 ? 
	`isxdigô
(
∫
->
c
Ë: 
	`isdigô
‘n->c)Ë&& 
	`√xtc
(rn))

408 
cou¡
++;

409  
cou¡
;

410 
	}
}

414 #i‡!
deföed
(
l_gëloˇÀde˝oöt
)

415 
	#l_gëloˇÀde˝oöt
(Ë(
	`loˇÀc⁄v
()->
decimÆ_poöt
[0])

	)

424 
	$ªad_numbî
 (
lua_Sèã
 *
L
, 
FILE
 *
f
) {

425 
RN
 
∫
;

426 
cou¡
 = 0;

427 
hex
 = 0;

428 
de˝
[2] = ".";

429 
∫
.
f
 = f;Ñn.
n
 = 0;

430 
de˝
[0] = 
	`l_gëloˇÀde˝oöt
();

431 
	`l_lockfûe
(
∫
.
f
);

432 dÿ{ 
∫
.
c
 = 
	`l_gëc
‘n.
f
); } 
	`is•a˚
(rn.c));

433 
	`ã°2
(&
∫
, "-+");

434 i‡(
	`ã°2
(&
∫
, "0")) {

435 i‡(
	`ã°2
(&
∫
, "xX")Ë
hex
 = 1;

436 
cou¡
 = 1;

438 
cou¡
 +
	`ªaddigôs
(&
∫
, 
hex
);

439 i‡(
	`ã°2
(&
∫
, 
de˝
))

440 
cou¡
 +
	`ªaddigôs
(&
∫
, 
hex
);

441 i‡(
cou¡
 > 0 && 
	`ã°2
(&
∫
, (
hex
 ? "pP" : "eE"))) {

442 
	`ã°2
(&
∫
, "-+");

443 
	`ªaddigôs
(&
∫
, 0);

445 
	`ungëc
(
∫
.
c
,Ñn.
f
);

446 
	`l_u∆ockfûe
(
∫
.
f
);

447 
∫
.
buff
[∫.
n
] = '\0';

448 i‡(
	`lua_°rögt⁄umbî
(
L
, 
∫
.
buff
))

451 
	`lua_pushnû
(
L
);

454 
	}
}

457 
	$ã°_eof
 (
lua_Sèã
 *
L
, 
FILE
 *
f
) {

458 
c
 = 
	`gëc
(
f
);

459 
	`ungëc
(
c
, 
f
);

460 
	`lua_pushl°rög
(
L
, 
NULL
, 0);

461  (
c
 !
EOF
);

462 
	}
}

465 
	$ªad_löe
 (
lua_Sèã
 *
L
, 
FILE
 *
f
, 
ch›
) {

466 
luaL_Buf„r
 
b
;

467 
c
 = '\0';

468 
	`luaL_bufföô
(
L
, &
b
);

469 
c
 !
EOF
 && c != '\n') {

470 *
buff
 = 
	`luaL_¥ïbuf„r
(&
b
);

471 
i
 = 0;

472 
	`l_lockfûe
(
f
);

473 
i
 < 
LUAL_BUFFERSIZE
 && (
c
 = 
	`l_gëc
(
f
)Ë!
EOF
 && c != '\n')

474 
buff
[
i
++] = 
c
;

475 
	`l_u∆ockfûe
(
f
);

476 
	`luaL_addsize
(&
b
, 
i
);

478 i‡(!
ch›
 && 
c
 == '\n')

479 
	`luaL_addch¨
(&
b
, 
c
);

480 
	`luaL_pushªsu…
(&
b
);

482  (
c
 ='\n' || 
	`lua_øwÀn
(
L
, -1) > 0);

483 
	}
}

486 
	$ªad_Æl
 (
lua_Sèã
 *
L
, 
FILE
 *
f
) {

487 
size_t
 
ƒ
;

488 
luaL_Buf„r
 
b
;

489 
	`luaL_bufföô
(
L
, &
b
);

491 *
p
 = 
	`luaL_¥ïbuffsize
(&
b
, 
LUAL_BUFFERSIZE
);

492 
ƒ
 = 
	`‰ód
(
p
, (), 
LUAL_BUFFERSIZE
, 
f
);

493 
	`luaL_addsize
(&
b
, 
ƒ
);

494 } 
ƒ
 =
LUAL_BUFFERSIZE
);

495 
	`luaL_pushªsu…
(&
b
);

496 
	}
}

499 
	$ªad_ch¨s
 (
lua_Sèã
 *
L
, 
FILE
 *
f
, 
size_t
 
n
) {

500 
size_t
 
ƒ
;

501 *
p
;

502 
luaL_Buf„r
 
b
;

503 
	`luaL_bufföô
(
L
, &
b
);

504 
p
 = 
	`luaL_¥ïbuffsize
(&
b
, 
n
);

505 
ƒ
 = 
	`‰ód
(
p
, (), 
n
, 
f
);

506 
	`luaL_addsize
(&
b
, 
ƒ
);

507 
	`luaL_pushªsu…
(&
b
);

508  (
ƒ
 > 0);

509 
	}
}

512 
	$g_ªad
 (
lua_Sèã
 *
L
, 
FILE
 *
f
, 
fú°
) {

513 
«rgs
 = 
	`lua_gët›
(
L
) - 1;

514 
suc˚ss
;

515 
n
;

516 
	`˛óªº
(
f
);

517 i‡(
«rgs
 == 0) {

518 
suc˚ss
 = 
	`ªad_löe
(
L
, 
f
, 1);

519 
n
 = 
fú°
+1;

522 
	`luaL_check°ack
(
L
, 
«rgs
+
LUA_MINSTACK
, "too manyárguments");

523 
suc˚ss
 = 1;

524 
n
 = 
fú°
; 
«rgs
-- && 
suc˚ss
;Ç++) {

525 i‡(
	`lua_ty≥
(
L
, 
n
Ë=
LUA_TNUMBER
) {

526 
size_t
 
l
 = (size_t)
	`luaL_checköãgî
(
L
, 
n
);

527 
suc˚ss
 = (
l
 =0Ë? 
	`ã°_eof
(
L
, 
f
Ë: 
	`ªad_ch¨s
(L, f,Ü);

530 c⁄° *
p
 = 
	`luaL_check°rög
(
L
, 
n
);

531 i‡(*
p
 == '*')Ö++;

532 *
p
) {

534 
suc˚ss
 = 
	`ªad_numbî
(
L
, 
f
);

537 
suc˚ss
 = 
	`ªad_löe
(
L
, 
f
, 1);

540 
suc˚ss
 = 
	`ªad_löe
(
L
, 
f
, 0);

543 
	`ªad_Æl
(
L
, 
f
);

544 
suc˚ss
 = 1;

547  
	`luaL_¨gîr‹
(
L
, 
n
, "invalid format");

552 i‡(
	`„º‹
(
f
))

553  
	`luaL_fûîesu…
(
L
, 0, 
NULL
);

554 i‡(!
suc˚ss
) {

555 
	`lua_p›
(
L
, 1);

556 
	`lua_pushnû
(
L
);

558  
n
 - 
fú°
;

559 
	}
}

562 
	$io_ªad
 (
lua_Sèã
 *
L
) {

563  
	`g_ªad
(
L
, 
	`gëiofûe
(L, 
IO_INPUT
), 1);

564 
	}
}

567 
	$f_ªad
 (
lua_Sèã
 *
L
) {

568  
	`g_ªad
(
L
, 
	`tofûe
(L), 2);

569 
	}
}

572 
	$io_ªadlöe
 (
lua_Sèã
 *
L
) {

573 
LSåóm
 *
p
 = (LSåóm *)
	`lua_tou£rd©a
(
L
, 
	`lua_upvÆueödex
(1));

574 
i
;

575 
n
 = ()
	`lua_toöãgî
(
L
, 
	`lua_upvÆueödex
(2));

576 i‡(
	`is˛o£d
(
p
))

577  
	`luaL_îr‹
(
L
, "file isálready closed");

578 
	`lua_£â›
(
L
 , 1);

579 
	`luaL_check°ack
(
L
, 
n
, "too manyárguments");

580 
i
 = 1; i <
n
; i++)

581 
	`lua_pushvÆue
(
L
, 
	`lua_upvÆueödex
(3 + 
i
));

582 
n
 = 
	`g_ªad
(
L
, 
p
->
f
, 2);

583 
	`lua_as£π
(
n
 > 0);

584 i‡(
	`lua_toboﬁón
(
L
, -
n
))

585  
n
;

587 i‡(
n
 > 1) {

589  
	`luaL_îr‹
(
L
, "%s", 
	`lua_to°rög
(L, -
n
 + 1));

591 i‡(
	`lua_toboﬁón
(
L
, 
	`lua_upvÆueödex
(3))) {

592 
	`lua_£â›
(
L
, 0);

593 
	`lua_pushvÆue
(
L
, 
	`lua_upvÆueödex
(1));

594 
	`aux_˛o£
(
L
);

598 
	}
}

603 
	$g_wrôe
 (
lua_Sèã
 *
L
, 
FILE
 *
f
, 
¨g
) {

604 
«rgs
 = 
	`lua_gët›
(
L
Ë- 
¨g
;

605 
°©us
 = 1;

606 ; 
«rgs
--; 
¨g
++) {

607 i‡(
	`lua_ty≥
(
L
, 
¨g
Ë=
LUA_TNUMBER
) {

609 
Àn
 = 
	`lua_isöãgî
(
L
, 
¨g
)

610 ? 
	`Ârötf
(
f
, 
LUA_INTEGER_FMT
, 
	`lua_toöãgî
(
L
, 
¨g
))

611 : 
	`Ârötf
(
f
, 
LUA_NUMBER_FMT
, 
	`lua_t⁄umbî
(
L
, 
¨g
));

612 
°©us
 = sètu†&& (
Àn
 > 0);

615 
size_t
 
l
;

616 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 
¨g
, &
l
);

617 
°©us
 = sètu†&& (
	`fwrôe
(
s
, (), 
l
, 
f
) ==Ü);

620 i‡(
°©us
)  1;

621  
	`luaL_fûîesu…
(
L
, 
°©us
, 
NULL
);

622 
	}
}

625 
	$io_wrôe
 (
lua_Sèã
 *
L
) {

626  
	`g_wrôe
(
L
, 
	`gëiofûe
(L, 
IO_OUTPUT
), 1);

627 
	}
}

630 
	$f_wrôe
 (
lua_Sèã
 *
L
) {

631 
FILE
 *
f
 = 
	`tofûe
(
L
);

632 
	`lua_pushvÆue
(
L
, 1);

633  
	`g_wrôe
(
L
, 
f
, 2);

634 
	}
}

637 
	$f_£ek
 (
lua_Sèã
 *
L
) {

638 c⁄° 
mode
[] = {
SEEK_SET
, 
SEEK_CUR
, 
SEEK_END
};

639 c⁄° *c⁄° 
modíames
[] = {"£t", "cur", "íd", 
NULL
};

640 
FILE
 *
f
 = 
	`tofûe
(
L
);

641 
›
 = 
	`luaL_check›ti⁄
(
L
, 2, "cur", 
modíames
);

642 
lua_I¡egî
 
p3
 = 
	`luaL_›töãgî
(
L
, 3, 0);

643 
l_£eknum
 
off£t
 = (l_£eknum)
p3
;

644 
	`luaL_¨gcheck
(
L
, (
lua_I¡egî
)
off£t
 =
p3
, 3,

646 
›
 = 
	`l_f£ek
(
f
, 
off£t
, 
mode
[op]);

647 i‡(
›
)

648  
	`luaL_fûîesu…
(
L
, 0, 
NULL
);

650 
	`lua_pushöãgî
(
L
, (
lua_I¡egî
)
	`l_·ñl
(
f
));

653 
	}
}

656 
	$f_£tvbuf
 (
lua_Sèã
 *
L
) {

657 c⁄° 
mode
[] = {
_IONBF
, 
_IOFBF
, 
_IOLBF
};

658 c⁄° *c⁄° 
modíames
[] = {"no", "fuŒ", "löe", 
NULL
};

659 
FILE
 *
f
 = 
	`tofûe
(
L
);

660 
›
 = 
	`luaL_check›ti⁄
(
L
, 2, 
NULL
, 
modíames
);

661 
lua_I¡egî
 
sz
 = 
	`luaL_›töãgî
(
L
, 3, 
LUAL_BUFFERSIZE
);

662 
ªs
 = 
	`£tvbuf
(
f
, 
NULL
, 
mode
[
›
], (
size_t
)
sz
);

663  
	`luaL_fûîesu…
(
L
, 
ªs
 =0, 
NULL
);

664 
	}
}

668 
	$io_Êush
 (
lua_Sèã
 *
L
) {

669  
	`luaL_fûîesu…
(
L
, 
	`fÊush
(
	`gëiofûe
(L, 
IO_OUTPUT
)Ë=0, 
NULL
);

670 
	}
}

673 
	$f_Êush
 (
lua_Sèã
 *
L
) {

674  
	`luaL_fûîesu…
(
L
, 
	`fÊush
(
	`tofûe
(L)Ë=0, 
NULL
);

675 
	}
}

681 c⁄° 
luaL_Reg
 
	giﬁib
[] = {

682 {"˛o£", 
io_˛o£
},

683 {"Êush", 
io_Êush
},

684 {"öput", 
io_öput
},

685 {"löes", 
io_löes
},

686 {"›í", 
io_›í
},

687 {"ouçut", 
io_ouçut
},

688 {"p›í", 
io_p›í
},

689 {"ªad", 
io_ªad
},

690 {"tmpfûe", 
io_tmpfûe
},

691 {"ty≥", 
io_ty≥
},

692 {"wrôe", 
io_wrôe
},

693 {
NULL
, NULL}

700 c⁄° 
luaL_Reg
 
	gÊib
[] = {

701 {"˛o£", 
io_˛o£
},

702 {"Êush", 
f_Êush
},

703 {"löes", 
f_löes
},

704 {"ªad", 
f_ªad
},

705 {"£ek", 
f_£ek
},

706 {"£tvbuf", 
f_£tvbuf
},

707 {"wrôe", 
f_wrôe
},

708 {"__gc", 
f_gc
},

709 {"__to°rög", 
f_to°rög
},

710 {
NULL
, NULL}

714 
	$¸óãmëa
 (
lua_Sèã
 *
L
) {

715 
	`luaL_√wmë©abÀ
(
L
, 
LUA_FILEHANDLE
);

716 
	`lua_pushvÆue
(
L
, -1);

717 
	`lua_£tfõld
(
L
, -2, "__index");

718 
	`luaL_£tfuncs
(
L
, 
Êib
, 0);

719 
	`lua_p›
(
L
, 1);

720 
	}
}

726 
	$io_no˛o£
 (
lua_Sèã
 *
L
) {

727 
LSåóm
 *
p
 = 
	`tﬁ°ªam
(
L
);

728 
p
->
˛o£f
 = &
io_no˛o£
;

729 
	`lua_pushnû
(
L
);

730 
	`lua_pushlôîÆ
(
L
, "cannot close standard file");

732 
	}
}

735 
	$¸óã°dfûe
 (
lua_Sèã
 *
L
, 
FILE
 *
f
, c⁄° *
k
,

736 c⁄° *
‚ame
) {

737 
LSåóm
 *
p
 = 
	`√w¥efûe
(
L
);

738 
p
->
f
 = f;

739 
p
->
˛o£f
 = &
io_no˛o£
;

740 i‡(
k
 !
NULL
) {

741 
	`lua_pushvÆue
(
L
, -1);

742 
	`lua_£tfõld
(
L
, 
LUA_REGISTRYINDEX
, 
k
);

744 
	`lua_£tfõld
(
L
, -2, 
‚ame
);

745 
	}
}

748 
	$lua_£t_°dfûes
(
lua_Sèã
 * 
L
, * 
ö
, * 
out
, * 
îr
)

750 
	`luaL_gëmë©abÀ
(
L
, 
LUA_FILEHANDLE
);

751 i‡(
	`lua_i¢û
(
L
, -1)) {

752 
	`¥ötf
("luaL_getmetatable()Ñeturned NIL\n");

757 
	`¸óã°dfûe
(
L
, 
ö
, 
IO_INPUT
, "stdin");

758 
	`¸óã°dfûe
(
L
, 
out
, 
IO_OUTPUT
, "stdout");

759 
	`¸óã°dfûe
(
L
, 
îr
, 
NULL
, "stderr");

760 
	}
}

763 
	$lua_ª£t_°dfûes
(
lua_Sèã
 * 
L
)

765 
	`luaL_gëmë©abÀ
(
L
, 
LUA_FILEHANDLE
);

766 i‡(
	`lua_i¢û
(
L
, -1))

770 
	`¸óã°dfûe
(
L
, 
°dö
, 
IO_INPUT
, "stdin");

771 
	`¸óã°dfûe
(
L
, 
°dout
, 
IO_OUTPUT
, "stdout");

772 
	`¸óã°dfûe
(
L
, 
°dîr
, 
NULL
, "stderr");

773 
	}
}

775 
LUAMOD_API
 
	$lua›í_io
 (
lua_Sèã
 *
L
) {

776 
	`luaL_√wlib
(
L
, 
iﬁib
);

777 
	`¸óãmëa
(
L
);

779 
	`¸óã°dfûe
(
L
, 
°dö
, 
IO_INPUT
, "stdin");

780 
	`¸óã°dfûe
(
L
, 
°dout
, 
IO_OUTPUT
, "stdout");

781 
	`¸óã°dfûe
(
L
, 
°dîr
, 
NULL
, "stderr");

783 
	}
}

	@lib/archive/lua-5.3.0/src/llex.c

7 
	#Œex_c


	)

8 
	#LUA_CORE


	)

10 
	~"Õªfix.h
"

13 
	~<loˇÀ.h
>

14 
	~<°rög.h
>

16 
	~"lua.h
"

18 
	~"l˘y≥.h
"

19 
	~"ldo.h
"

20 
	~"lgc.h
"

21 
	~"Œex.h
"

22 
	~"lobje˘.h
"

23 
	~"Õ¨£r.h
"

24 
	~"l°©e.h
"

25 
	~"l°rög.h
"

26 
	~"…abÀ.h
"

27 
	~"lzio.h
"

31 
	#√xt
(
ls
Ë÷s->
cuºít
 = 
	`zgëc
÷s->
z
))

	)

35 
	#cuºIsNewlöe
(
ls
Ë÷s->
cuºít
 ='\n' ||Üs->cuºíà='\r')

	)

39 c⁄° *c⁄° 
	gluaX_tokís
 [] = {

50 
	#ßve_™d_√xt
(
ls
Ë(
	`ßve
÷s,Üs->
cuºít
), 
	`√xt
÷s))

	)

53 
l_n‹ë
 
Àxîr‹
 (
LexSèã
 *
ls
, c⁄° *
msg
, 
tokí
);

56 
	$ßve
 (
LexSèã
 *
ls
, 
c
) {

57 
Mbuf„r
 *
b
 = 
ls
->
buff
;

58 i‡(
	`luaZ_bufÊí
(
b
Ë+ 1 > 
	`luaZ_sizebuf„r
(b)) {

59 
size_t
 
√wsize
;

60 i‡(
	`luaZ_sizebuf„r
(
b
Ë>
MAX_SIZE
/2)

61 
	`Àxîr‹
(
ls
, "lexicalÉlementÅooÜong", 0);

62 
√wsize
 = 
	`luaZ_sizebuf„r
(
b
) * 2;

63 
	`luaZ_ªsizebuf„r
(
ls
->
L
, 
b
, 
√wsize
);

65 
b
->
buf„r
[
	`luaZ_bufÊí
(b)++] = 
	`ˇ°
(, 
c
);

66 
	}
}

69 
	$luaX_öô
 (
lua_Sèã
 *
L
) {

70 
i
;

71 
TSåög
 *
e
 = 
	`luaS_√w
(
L
, 
LUA_ENV
);

72 
	`luaC_fix
(
L
, 
	`obj2gco
(
e
));

73 
i
=0; i<
NUM_RESERVED
; i++) {

74 
TSåög
 *
ts
 = 
	`luaS_√w
(
L
, 
luaX_tokís
[
i
]);

75 
	`luaC_fix
(
L
, 
	`obj2gco
(
ts
));

76 
ts
->
exåa
 = 
	`ˇ°_byã
(
i
+1);

78 
	}
}

81 c⁄° *
	$luaX_tokí2°r
 (
LexSèã
 *
ls
, 
tokí
) {

82 i‡(
tokí
 < 
FIRST_RESERVED
) {

83 
	`lua_as£π
(
tokí
 =
	`ˇ°_uch¨
(token));

84  
	`luaO_pushf°rög
(
ls
->
L
, "'%c'", 
tokí
);

87 c⁄° *
s
 = 
luaX_tokís
[
tokí
 - 
FIRST_RESERVED
];

88 i‡(
tokí
 < 
TK_EOS
)

89  
	`luaO_pushf°rög
(
ls
->
L
, "'%s'", 
s
);

91  
s
;

93 
	}
}

96 c⁄° *
	$txtTokí
 (
LexSèã
 *
ls
, 
tokí
) {

97 
tokí
) {

98 
TK_NAME
: 
TK_STRING
:

99 
TK_FLT
: 
TK_INT
:

100 
	`ßve
(
ls
, '\0');

101  
	`luaO_pushf°rög
(
ls
->
L
, "'%s'", 
	`luaZ_buf„r
÷s->
buff
));

103  
	`luaX_tokí2°r
(
ls
, 
tokí
);

105 
	}
}

108 
l_n‹ë
 
	$Àxîr‹
 (
LexSèã
 *
ls
, c⁄° *
msg
, 
tokí
) {

109 
buff
[
LUA_IDSIZE
];

110 
	`luaO_chunkid
(
buff
, 
	`gë°r
(
ls
->
sour˚
), 
LUA_IDSIZE
);

111 
msg
 = 
	`luaO_pushf°rög
(
ls
->
L
, "%s:%d: %s", 
buff
,Üs->
löíumbî
, msg);

112 i‡(
tokí
)

113 
	`luaO_pushf°rög
(
ls
->
L
, "%†√¨ %s", 
msg
, 
	`txtTokí
÷s, 
tokí
));

114 
	`luaD_throw
(
ls
->
L
, 
LUA_ERRSYNTAX
);

115 
	}
}

118 
l_n‹ë
 
	$luaX_sy¡axîr‹
 (
LexSèã
 *
ls
, c⁄° *
msg
) {

119 
	`Àxîr‹
(
ls
, 
msg
,Üs->
t
.
tokí
);

120 
	}
}

128 
TSåög
 *
	$luaX_√w°rög
 (
LexSèã
 *
ls
, c⁄° *
°r
, 
size_t
 
l
) {

129 
lua_Sèã
 *
L
 = 
ls
->L;

130 
TVÆue
 *
o
;

131 
TSåög
 *
ts
 = 
	`luaS_√wl°r
(
L
, 
°r
, 
l
);

132 
	`£tsvÆue2s
(
L
, L->
t›
++, 
ts
);

133 
o
 = 
	`luaH_£t
(
L
, 
ls
->
h
, L->
t›
 - 1);

134 i‡(
	`âi¢û
(
o
)) {

137 
	`£tbvÆue
(
o
, 1);

138 
	`luaC_checkGC
(
L
);

141 
ts
 = 
	`tsvÆue
(
	`key‰omvÆ
(
o
));

143 
L
->
t›
--;

144  
ts
;

145 
	}
}

152 
	$ö˛öíumbî
 (
LexSèã
 *
ls
) {

153 
ﬁd
 = 
ls
->
cuºít
;

154 
	`lua_as£π
(
	`cuºIsNewlöe
(
ls
));

155 
	`√xt
(
ls
);

156 i‡(
	`cuºIsNewlöe
(
ls
Ë&&Üs->
cuºít
 !
ﬁd
)

157 
	`√xt
(
ls
);

158 i‡(++
ls
->
löíumbî
 >
MAX_INT
)

159 
	`Àxîr‹
(
ls
, "chunk hasÅoo manyÜines", 0);

160 
	}
}

163 
	$luaX_£töput
 (
lua_Sèã
 *
L
, 
LexSèã
 *
ls
, 
ZIO
 *
z
, 
TSåög
 *
sour˚
,

164 
fú°ch¨
) {

165 
ls
->
t
.
tokí
 = 0;

166 
ls
->
de˝oöt
 = '.';

167 
ls
->
L
 = L;

168 
ls
->
cuºít
 = 
fú°ch¨
;

169 
ls
->
lookahód
.
tokí
 = 
TK_EOS
;

170 
ls
->
z
 = z;

171 
ls
->
fs
 = 
NULL
;

172 
ls
->
löíumbî
 = 1;

173 
ls
->
œ°löe
 = 1;

174 
ls
->
sour˚
 = source;

175 
ls
->
ívn
 = 
	`luaS_√w
(
L
, 
LUA_ENV
);

176 
	`luaZ_ªsizebuf„r
(
ls
->
L
,Üs->
buff
, 
LUA_MINBUFFER
);

177 
	}
}

188 
	$check_√xt1
 (
LexSèã
 *
ls
, 
c
) {

189 i‡(
ls
->
cuºít
 =
c
) {

190 
	`√xt
(
ls
);

194 
	}
}

201 
	$check_√xt2
 (
LexSèã
 *
ls
, c⁄° *
£t
) {

202 
	`lua_as£π
(
£t
[2] == '\0');

203 i‡(
ls
->
cuºít
 =
£t
[0] ||Üs->current == set[1]) {

204 
	`ßve_™d_√xt
(
ls
);

208 
	}
}

214 
	$buf‰ïœ˚
 (
LexSèã
 *
ls
, 
‰om
, 
to
) {

215 i‡(
‰om
 !
to
) {

216 
size_t
 
n
 = 
	`luaZ_bufÊí
(
ls
->
buff
);

217 *
p
 = 
	`luaZ_buf„r
(
ls
->
buff
);

218 
n
--)

219 i‡(
p
[
n
] =
‰om
Ëp[n] = 
to
;

221 
	}
}

224 #i‡!
deföed
(
l_gëloˇÀde˝oöt
)

225 
	#l_gëloˇÀde˝oöt
(Ë(
	`loˇÀc⁄v
()->
decimÆ_poöt
[0])

	)

229 
	#buff2num
(
b
,
o
Ë(
	`luaO_°r2num
(
	`luaZ_buf„r
(b), oË!0)

	)

235 
	$åyde˝oöt
 (
LexSèã
 *
ls
, 
TVÆue
 *
o
) {

236 
ﬁd
 = 
ls
->
de˝oöt
;

237 
ls
->
de˝oöt
 = 
	`l_gëloˇÀde˝oöt
();

238 
	`buf‰ïœ˚
(
ls
, 
ﬁd
,Üs->
de˝oöt
);

239 i‡(!
	`buff2num
(
ls
->
buff
, 
o
)) {

241 
	`buf‰ïœ˚
(
ls
,Üs->
de˝oöt
, '.');

242 
	`Àxîr‹
(
ls
, "mÆf‹medÇumbî", 
TK_FLT
);

244 
	}
}

252 
	$ªad_numîÆ
 (
LexSèã
 *
ls
, 
SemInfo
 *
£möfo
) {

253 
TVÆue
 
obj
;

254 c⁄° *
expo
 = "Ee";

255 
fú°
 = 
ls
->
cuºít
;

256 
	`lua_as£π
(
	`lisdigô
(
ls
->
cuºít
));

257 
	`ßve_™d_√xt
(
ls
);

258 i‡(
fú°
 ='0' && 
	`check_√xt2
(
ls
, "xX"))

259 
expo
 = "Pp";

261 i‡(
	`check_√xt2
(
ls
, 
expo
))

262 
	`check_√xt2
(
ls
, "-+");

263 i‡(
	`lisxdigô
(
ls
->
cuºít
))

264 
	`ßve_™d_√xt
(
ls
);

265 i‡(
ls
->
cuºít
 == '.')

266 
	`ßve_™d_√xt
(
ls
);

269 
	`ßve
(
ls
, '\0');

270 
	`buf‰ïœ˚
(
ls
, '.',Üs->
de˝oöt
);

271 i‡(!
	`buff2num
(
ls
->
buff
, &
obj
))

272 
	`åyde˝oöt
(
ls
, &
obj
);

273 i‡(
	`âisöãgî
(&
obj
)) {

274 
£möfo
->
i
 = 
	`ivÆue
(&
obj
);

275  
TK_INT
;

278 
	`lua_as£π
(
	`âisÊﬂt
(&
obj
));

279 
£möfo
->
r
 = 
	`ÊtvÆue
(&
obj
);

280  
TK_FLT
;

282 
	}
}

289 
	$skù_£p
 (
LexSèã
 *
ls
) {

290 
cou¡
 = 0;

291 
s
 = 
ls
->
cuºít
;

292 
	`lua_as£π
(
s
 == '[' || s == ']');

293 
	`ßve_™d_√xt
(
ls
);

294 
ls
->
cuºít
 == '=') {

295 
	`ßve_™d_√xt
(
ls
);

296 
cou¡
++;

298  (
ls
->
cuºít
 =
s
Ë? 
cou¡
 : (-count) - 1;

299 
	}
}

302 
	$ªad_l⁄g_°rög
 (
LexSèã
 *
ls
, 
SemInfo
 *
£möfo
, 
£p
) {

303 
löe
 = 
ls
->
löíumbî
;

304 
	`ßve_™d_√xt
(
ls
);

305 i‡(
	`cuºIsNewlöe
(
ls
))

306 
	`ö˛öíumbî
(
ls
);

308 
ls
->
cuºít
) {

309 
EOZ
: {

310 c⁄° *
wh©
 = (
£möfo
 ? "string" : "comment");

311 c⁄° *
msg
 = 
	`luaO_pushf°rög
(
ls
->
L
,

312 "unföishedÜ⁄g %†(°¨tögáàlöê%d)", 
wh©
, 
löe
);

313 
	`Àxîr‹
(
ls
, 
msg
, 
TK_EOS
);

317 i‡(
	`skù_£p
(
ls
Ë=
£p
) {

318 
	`ßve_™d_√xt
(
ls
);

319 
ídlo›
;

324 
	`ßve
(
ls
, '\n');

325 
	`ö˛öíumbî
(
ls
);

326 i‡(!
£möfo
Ë
	`luaZ_ª£tbuf„r
(
ls
->
buff
);

330 i‡(
£möfo
Ë
	`ßve_™d_√xt
(
ls
);

331 
	`√xt
(
ls
);

334 } 
ídlo›
:

335 i‡(
£möfo
)

336 
£möfo
->
ts
 = 
	`luaX_√w°rög
(
ls
, 
	`luaZ_buf„r
÷s->
buff
Ë+ (2 + 
£p
),

337 
	`luaZ_bufÊí
(
ls
->
buff
Ë- 2*(2 + 
£p
));

338 
	}
}

341 
	$esccheck
 (
LexSèã
 *
ls
, 
c
, c⁄° *
msg
) {

342 i‡(!
c
) {

343 i‡(
ls
->
cuºít
 !
EOZ
)

344 
	`ßve_™d_√xt
(
ls
);

345 
	`Àxîr‹
(
ls
, 
msg
, 
TK_STRING
);

347 
	}
}

350 
	$gëhexa
 (
LexSèã
 *
ls
) {

351 
	`ßve_™d_√xt
(
ls
);

352 
	`esccheck
 (
ls
, 
	`lisxdigô
÷s->
cuºít
), "hexadecimal digitÉxpected");

353  
	`luaO_hexavÆue
(
ls
->
cuºít
);

354 
	}
}

357 
	$ªadhex´sc
 (
LexSèã
 *
ls
) {

358 
r
 = 
	`gëhexa
(
ls
);

359 
r
 = (∏<< 4Ë+ 
	`gëhexa
(
ls
);

360 
	`luaZ_buf‰emove
(
ls
->
buff
, 2);

361  
r
;

362 
	}
}

365 
	$ªadutf8esc
 (
LexSèã
 *
ls
) {

366 
r
;

367 
i
 = 4;

368 
	`ßve_™d_√xt
(
ls
);

369 
	`esccheck
(
ls
,Üs->
cuºít
 == '{', "missing '{'");

370 
r
 = 
	`gëhexa
(
ls
);

371 (
	`ßve_™d_√xt
(
ls
), 
	`lisxdigô
÷s->
cuºít
))) {

372 
i
++;

373 
r
 = (∏<< 4Ë+ 
	`luaO_hexavÆue
(
ls
->
cuºít
);

374 
	`esccheck
(
ls
, 
r
 <= 0x10FFFF, "UTF-8 valueÅooÜarge");

376 
	`esccheck
(
ls
,Üs->
cuºít
 == '}', "missing '}'");

377 
	`√xt
(
ls
);

378 
	`luaZ_buf‰emove
(
ls
->
buff
, 
i
);

379  
r
;

380 
	}
}

383 
	$utf8esc
 (
LexSèã
 *
ls
) {

384 
buff
[
UTF8BUFFSZ
];

385 
n
 = 
	`luaO_utf8esc
(
buff
, 
	`ªadutf8esc
(
ls
));

386 ; 
n
 > 0;Ç--)

387 
	`ßve
(
ls
, 
buff
[
UTF8BUFFSZ
 - 
n
]);

388 
	}
}

391 
	$ªadde˚sc
 (
LexSèã
 *
ls
) {

392 
i
;

393 
r
 = 0;

394 
i
 = 0; i < 3 && 
	`lisdigô
(
ls
->
cuºít
); i++) {

395 
r
 = 10*∏+ 
ls
->
cuºít
 - '0';

396 
	`ßve_™d_√xt
(
ls
);

398 
	`esccheck
(
ls
, 
r
 <
UCHAR_MAX
, "decimalÉscapeÅooÜarge");

399 
	`luaZ_buf‰emove
(
ls
->
buff
, 
i
);

400  
r
;

401 
	}
}

404 
	$ªad_°rög
 (
LexSèã
 *
ls
, 
dñ
, 
SemInfo
 *
£möfo
) {

405 
	`ßve_™d_√xt
(
ls
);

406 
ls
->
cuºít
 !
dñ
) {

407 
ls
->
cuºít
) {

408 
EOZ
:

409 
	`Àxîr‹
(
ls
, "unföished såög", 
TK_EOS
);

413 
	`Àxîr‹
(
ls
, "unföished såög", 
TK_STRING
);

416 
c
;

417 
	`ßve_™d_√xt
(
ls
);

418 
ls
->
cuºít
) {

419 'a': 
c
 = '\a'; 
ªad_ßve
;

420 'b': 
c
 = '\b'; 
ªad_ßve
;

421 'f': 
c
 = '\f'; 
ªad_ßve
;

422 'n': 
c
 = '\n'; 
ªad_ßve
;

423 'r': 
c
 = '\r'; 
ªad_ßve
;

424 't': 
c
 = '\t'; 
ªad_ßve
;

425 'v': 
c
 = '\v'; 
ªad_ßve
;

426 'x': 
c
 = 
	`ªadhex´sc
(
ls
); 
ªad_ßve
;

427 'u': 
	`utf8esc
(
ls
); 
no_ßve
;

429 
	`ö˛öíumbî
(
ls
); 
c
 = '\n'; 
⁄ly_ßve
;

431 
c
 = 
ls
->
cuºít
; 
ªad_ßve
;

432 
EOZ
: 
no_ßve
;

434 
	`luaZ_buf‰emove
(
ls
->
buff
, 1);

435 
	`√xt
(
ls
);

436 
	`lis•a˚
(
ls
->
cuºít
)) {

437 i‡(
	`cuºIsNewlöe
(
ls
)Ë
	`ö˛öíumbî
(ls);

438 
	`√xt
(
ls
);

440 
no_ßve
;

443 
	`esccheck
(
ls
, 
	`lisdigô
÷s->
cuºít
), "invalidÉscape sequence");

444 
c
 = 
	`ªadde˚sc
(
ls
);

445 
⁄ly_ßve
;

448 
ªad_ßve
:

449 
	`√xt
(
ls
);

451 
⁄ly_ßve
:

452 
	`luaZ_buf‰emove
(
ls
->
buff
, 1);

453 
	`ßve
(
ls
, 
c
);

455 
no_ßve
: ;

458 
	`ßve_™d_√xt
(
ls
);

461 
	`ßve_™d_√xt
(
ls
);

462 
£möfo
->
ts
 = 
	`luaX_√w°rög
(
ls
, 
	`luaZ_buf„r
÷s->
buff
) + 1,

463 
	`luaZ_bufÊí
(
ls
->
buff
) - 2);

464 
	}
}

467 
	$Œex
 (
LexSèã
 *
ls
, 
SemInfo
 *
£möfo
) {

468 
	`luaZ_ª£tbuf„r
(
ls
->
buff
);

470 
ls
->
cuºít
) {

472 
	`ö˛öíumbî
(
ls
);

476 
	`√xt
(
ls
);

480 
	`√xt
(
ls
);

481 i‡(
ls
->
cuºít
 != '-')  '-';

483 
	`√xt
(
ls
);

484 i‡(
ls
->
cuºít
 == '[') {

485 
£p
 = 
	`skù_£p
(
ls
);

486 
	`luaZ_ª£tbuf„r
(
ls
->
buff
);

487 i‡(
£p
 >= 0) {

488 
	`ªad_l⁄g_°rög
(
ls
, 
NULL
, 
£p
);

489 
	`luaZ_ª£tbuf„r
(
ls
->
buff
);

494 !
	`cuºIsNewlöe
(
ls
Ë&&Üs->
cuºít
 !
EOZ
)

495 
	`√xt
(
ls
);

499 
£p
 = 
	`skù_£p
(
ls
);

500 i‡(
£p
 >= 0) {

501 
	`ªad_l⁄g_°rög
(
ls
, 
£möfo
, 
£p
);

502  
TK_STRING
;

504 i‡(
£p
 == -1)  '[';

505 
	`Àxîr‹
(
ls
, "övÆidÜ⁄g såög dñimôî", 
TK_STRING
);

508 
	`√xt
(
ls
);

509 i‡(
	`check_√xt1
(
ls
, '=')Ë 
TK_EQ
;

513 
	`√xt
(
ls
);

514 i‡(
	`check_√xt1
(
ls
, '=')Ë 
TK_LE
;

515 i‡(
	`check_√xt1
(
ls
, '<')Ë 
TK_SHL
;

519 
	`√xt
(
ls
);

520 i‡(
	`check_√xt1
(
ls
, '=')Ë 
TK_GE
;

521 i‡(
	`check_√xt1
(
ls
, '>')Ë 
TK_SHR
;

525 
	`√xt
(
ls
);

526 i‡(
	`check_√xt1
(
ls
, '/')Ë 
TK_IDIV
;

530 
	`√xt
(
ls
);

531 i‡(
	`check_√xt1
(
ls
, '=')Ë 
TK_NE
;

535 
	`√xt
(
ls
);

536 i‡(
	`check_√xt1
(
ls
, ':')Ë 
TK_DBCOLON
;

540 
	`ªad_°rög
(
ls
,Üs->
cuºít
, 
£möfo
);

541  
TK_STRING
;

544 
	`ßve_™d_√xt
(
ls
);

545 i‡(
	`check_√xt1
(
ls
, '.')) {

546 i‡(
	`check_√xt1
(
ls
, '.'))

547  
TK_DOTS
;

548  
TK_CONCAT
;

550 i‡(!
	`lisdigô
(
ls
->
cuºít
))  '.';

551  
	`ªad_numîÆ
(
ls
, 
£möfo
);

555  
	`ªad_numîÆ
(
ls
, 
£möfo
);

557 
EOZ
: {

558  
TK_EOS
;

561 i‡(
	`li¶Æpha
(
ls
->
cuºít
)) {

562 
TSåög
 *
ts
;

564 
	`ßve_™d_√xt
(
ls
);

565 } 
	`li¶Ænum
(
ls
->
cuºít
));

566 
ts
 = 
	`luaX_√w°rög
(
ls
, 
	`luaZ_buf„r
÷s->
buff
),

567 
	`luaZ_bufÊí
(
ls
->
buff
));

568 
£möfo
->
ts
 =Ås;

569 i‡(
	`i§e£rved
(
ts
))

570  
ts
->
exåa
 - 1 + 
FIRST_RESERVED
;

572  
TK_NAME
;

576 
c
 = 
ls
->
cuºít
;

577 
	`√xt
(
ls
);

578  
c
;

583 
	}
}

586 
	$luaX_√xt
 (
LexSèã
 *
ls
) {

587 
ls
->
œ°löe
 =Üs->
löíumbî
;

588 i‡(
ls
->
lookahód
.
tokí
 !
TK_EOS
) {

589 
ls
->
t
 =Üs->
lookahód
;

590 
ls
->
lookahód
.
tokí
 = 
TK_EOS
;

593 
ls
->
t
.
tokí
 = 
	`Œex
÷s, &ls->t.
£möfo
);

594 
	}
}

597 
	$luaX_lookahód
 (
LexSèã
 *
ls
) {

598 
	`lua_as£π
(
ls
->
lookahód
.
tokí
 =
TK_EOS
);

599 
ls
->
lookahód
.
tokí
 = 
	`Œex
÷s, &ls->lookahód.
£möfo
);

600  
ls
->
lookahód
.
tokí
;

601 
	}
}

	@lib/archive/lua-5.3.0/src/llex.h

7 #i‚de‡
Œex_h


8 
	#Œex_h


	)

10 
	~"lobje˘.h
"

11 
	~"lzio.h
"

14 
	#FIRST_RESERVED
 257

	)

17 #i‡!
deföed
(
LUA_ENV
)

18 
	#LUA_ENV
 "_ENV"

	)

26 
	eRESERVED
 {

28 
	mTK_AND
 = 
FIRST_RESERVED
, 
	mTK_BREAK
,

29 
	mTK_DO
, 
	mTK_ELSE
, 
	mTK_ELSEIF
, 
	mTK_END
, 
	mTK_FALSE
, 
	mTK_FOR
, 
	mTK_FUNCTION
,

30 
	mTK_GOTO
, 
	mTK_IF
, 
	mTK_IN
, 
	mTK_LOCAL
, 
	mTK_NIL
, 
	mTK_NOT
, 
	mTK_OR
, 
	mTK_REPEAT
,

31 
	mTK_RETURN
, 
	mTK_THEN
, 
	mTK_TRUE
, 
	mTK_UNTIL
, 
	mTK_WHILE
,

33 
	mTK_IDIV
, 
	mTK_CONCAT
, 
	mTK_DOTS
, 
	mTK_EQ
, 
	mTK_GE
, 
	mTK_LE
, 
	mTK_NE
,

34 
	mTK_SHL
, 
	mTK_SHR
,

35 
	mTK_DBCOLON
, 
	mTK_EOS
,

36 
	mTK_FLT
, 
	mTK_INT
, 
	mTK_NAME
, 
	mTK_STRING


40 
	#NUM_RESERVED
 (
	`ˇ°
(, 
TK_WHILE
-
FIRST_RESERVED
+1))

	)

44 
lua_Numbî
 
	mr
;

45 
lua_I¡egî
 
	mi
;

46 
TSåög
 *
	mts
;

47 } 
	tSemInfo
;

50 
	sTokí
 {

51 
	mtokí
;

52 
SemInfo
 
	m£möfo
;

53 } 
	tTokí
;

58 
	sLexSèã
 {

59 
	mcuºít
;

60 
	mlöíumbî
;

61 
	mœ°löe
;

62 
Tokí
 
	mt
;

63 
Tokí
 
	mlookahód
;

64 
FuncSèã
 *
	mfs
;

65 
lua_Sèã
 *
	mL
;

66 
ZIO
 *
	mz
;

67 
Mbuf„r
 *
	mbuff
;

68 
TabÀ
 *
	mh
;

69 
Dynd©a
 *
	mdyd
;

70 
TSåög
 *
	msour˚
;

71 
TSåög
 *
	mívn
;

72 
	mde˝oöt
;

73 } 
	tLexSèã
;

76 
LUAI_FUNC
 
luaX_öô
 (
lua_Sèã
 *
L
);

77 
LUAI_FUNC
 
luaX_£töput
 (
lua_Sèã
 *
L
, 
LexSèã
 *
ls
, 
ZIO
 *
z
,

78 
TSåög
 *
sour˚
, 
fú°ch¨
);

79 
LUAI_FUNC
 
TSåög
 *
luaX_√w°rög
 (
LexSèã
 *
ls
, c⁄° *
°r
, 
size_t
 
l
);

80 
LUAI_FUNC
 
luaX_√xt
 (
LexSèã
 *
ls
);

81 
LUAI_FUNC
 
luaX_lookahód
 (
LexSèã
 *
ls
);

82 
LUAI_FUNC
 
l_n‹ë
 
luaX_sy¡axîr‹
 (
LexSèã
 *
ls
, c⁄° *
s
);

83 
LUAI_FUNC
 c⁄° *
luaX_tokí2°r
 (
LexSèã
 *
ls
, 
tokí
);

	@lib/archive/lua-5.3.0/src/llimits.h

7 #i‚de‡
Œimôs_h


8 
	#Œimôs_h


	)

11 
	~<limôs.h
>

12 
	~<°ddef.h
>

15 
	~"lua.h
"

22 #i‡
deföed
(
LUAI_MEM
)

23 
LUAI_UMEM
 
	tlu_mem
;

24 
LUAI_MEM
 
	tl_mem
;

25 #ñi‡
LUAI_BITSINT
 >= 32

26 
size_t
 
	tlu_mem
;

27 
±rdiff_t
 
	tl_mem
;

29 
	tlu_mem
;

30 
	tl_mem
;

35 
	tlu_byã
;

39 
	#MAX_SIZET
 ((
size_t
)(~(size_t)0))

	)

42 
	#MAX_SIZE
 ((
size_t
Ë< (
lua_I¡egî
Ë? 
MAX_SIZET
 \

43 : (
size_t
)(
LUA_MAXINTEGER
))

	)

46 
	#MAX_LUMEM
 ((
lu_mem
)(~÷u_mem)0))

	)

48 
	#MAX_LMEM
 ((
l_mem
)(
MAX_LUMEM
 >> 1))

	)

51 
	#MAX_INT
 
INT_MAX


	)

59 
	#poöt2öt
(
p
Ë(()((
size_t
)’Ë& 
UINT_MAX
))

	)

64 #i‡
deföed
(
LUAI_USER_ALIGNMENT_T
)

65 
LUAI_USER_ALIGNMENT_T
 
	tL_UmaxÆign
;

67 uni⁄ { 
	mu
; *
	ms
; 
lua_I¡egî
 
	mi
; 
	ml
; } 
	tL_UmaxÆign
;

73 
LUAI_UACNUMBER
 
	tl_uacNumbî
;

74 
LUAI_UACINT
 
	tl_uacI¡
;

78 #i‡
deföed
(
lua_as£π
)

79 
	#check_exp
(
c
,
e
Ë(
	`lua_as£π
(c), (e))

	)

81 
	#lua_l⁄gas£π
(
c
Ë{ i‡(!(c)Ë
	`lua_as£π
(0); }

	)

83 
	#lua_as£π
(
c
Ë(()0)

	)

84 
	#check_exp
(
c
,
e
Ë”)

	)

85 
	#lua_l⁄gas£π
(
c
Ë(()0)

	)

91 #i‡
deföed
(
LUA_USE_APICHECK
)

92 
	~<as£π.h
>

93 
	#luai_≠icheck
(
e
Ë
	`as£π
”)

	)

95 
	#luai_≠icheck
(
e
Ë
	`lua_as£π
”)

	)

99 
	#≠i_check
(
e
,
msg
Ë
	`luai_≠icheck
(”Ë&& msg)

	)

102 #i‡!
deföed
(
UNUSED
)

103 
	#UNUSED
(
x
Ë(()(x)Ë

	)

107 
	#ˇ°
(
t
, 
exp
Ë(—)”xp))

	)

109 
	#ˇ°_void
(
i
Ë
	`ˇ°
(, (i))

	)

110 
	#ˇ°_byã
(
i
Ë
	`ˇ°
(
lu_byã
, (i))

	)

111 
	#ˇ°_num
(
i
Ë
	`ˇ°
(
lua_Numbî
, (i))

	)

112 
	#ˇ°_öt
(
i
Ë
	`ˇ°
(, (i))

	)

113 
	#ˇ°_uch¨
(
i
Ë
	`ˇ°
(, (i))

	)

117 #i‡!
deföed
(
l_ˇ°S2U
)

118 
	#l_ˇ°S2U
(
i
Ë((
lua_Unsig√d
)(i))

	)

126 #i‡!
deföed
(
l_ˇ°U2S
)

127 
	#l_ˇ°U2S
(
i
Ë((
lua_I¡egî
)(i))

	)

134 #i‡
deföed
(
__GNUC__
)

135 
	#l_n‹ë
 
	`__©åibuã__
((
n‹ëu∫
))

	)

136 #ñi‡
deföed
(
_MSC_VER
) && _MSC_VER >= 1200

137 
	#l_n‹ë
 
	`__de˛•ec
(
n‹ëu∫
)

	)

139 
	#l_n‹ë
 

	)

148 #i‡!
deföed
(
LUAI_MAXCCALLS
)

149 
	#LUAI_MAXCCALLS
 200

	)

156 
	#MAXUPVAL
 
UCHAR_MAX


	)

163 #i‡
LUAI_BITSINT
 >= 32

164 
	tIn°ru˘i⁄
;

166 
	tIn°ru˘i⁄
;

173 #i‡!
deföed
(
MINSTRTABSIZE
)

174 
	#MINSTRTABSIZE
 64

	)

179 #i‡!
deföed
(
LUA_MINBUFFER
)

180 
	#LUA_MINBUFFER
 32

	)

184 #i‡!
deföed
(
lua_lock
)

185 
	#lua_lock
(
L
Ë((Ë0)

	)

186 
	#lua_u∆ock
(
L
Ë((Ë0)

	)

189 #i‡!
deföed
(
luai_thªadyõld
)

190 
	#luai_thªadyõld
(
L
Ë{
	`lua_u∆ock
(L); 
	`lua_lock
(L);}

	)

199 #i‡!
deföed
(
luai_u£r°©e›í
)

200 
	#luai_u£r°©e›í
(
L
Ë(()L)

	)

203 #i‡!
deföed
(
luai_u£r°©e˛o£
)

204 
	#luai_u£r°©e˛o£
(
L
Ë(()L)

	)

207 #i‡!
deföed
(
luai_u£r°©ëhªad
)

208 
	#luai_u£r°©ëhªad
(
L
,
L1
Ë(()L)

	)

211 #i‡!
deföed
(
luai_u£r°©e‰ì
)

212 
	#luai_u£r°©e‰ì
(
L
,
L1
Ë(()L)

	)

215 #i‡!
deföed
(
luai_u£r°©îesume
)

216 
	#luai_u£r°©îesume
(
L
,
n
Ë(()L)

	)

219 #i‡!
deföed
(
luai_u£r°©eyõld
)

220 
	#luai_u£r°©eyõld
(
L
,
n
Ë(()L)

	)

228 #i‡!
deföed
(
HARDSTACKTESTS
)

229 
	#c⁄dmove°ack
(
L
Ë(()0)

	)

232 
	#c⁄dmove°ack
(
L
Ë
	`luaD_ªÆloc°ack
((L), (L)->
°acksize
)

	)

235 #i‡!
deföed
(
HARDMEMTESTS
)

236 
	#c⁄dch™gemem
(
L
Ë
	`c⁄dmove°ack
(L)

	)

238 
	#c⁄dch™gemem
(
L
) \

239 (()(!(
	`G
(
L
)->
g¸u¬ög
Ë|| (
	`luaC_fuŒgc
(L, 0), 1)))

	)

	@lib/archive/lua-5.3.0/src/lmathlib.c

7 
	#lm©hlib_c


	)

8 
	#LUA_LIB


	)

10 
	~"Õªfix.h
"

13 
	~<°dlib.h
>

14 
	~<m©h.h
>

16 
	~"lua.h
"

18 
	~"œuxlib.h
"

19 
	~"luÆib.h
"

22 #unde‡
PI


23 
	#PI
 (
	`l_m©h›
(3.141592653589793238462643383279502884))

	)

26 #i‡!
deföed
(
l_ønd
)

27 #i‡
deföed
(
LUA_USE_POSIX
)

28 
	#l_ønd
(Ë
	`øndom
()

	)

29 
	#l_§™d
(
x
Ë
	`§™dom
(x)

	)

30 
	#L_RANDMAX
 2147483647

	)

32 
	#l_ønd
(Ë
	`ønd
()

	)

33 
	#l_§™d
(
x
Ë
	`§™d
(x)

	)

34 
	#L_RANDMAX
 
RAND_MAX


	)

39 
	$m©h_abs
 (
lua_Sèã
 *
L
) {

40 i‡(
	`lua_isöãgî
(
L
, 1)) {

41 
lua_I¡egî
 
n
 = 
	`lua_toöãgî
(
L
, 1);

42 i‡(
n
 < 0Ë¿(
lua_I¡egî
)(0u -Ç);

43 
	`lua_pushöãgî
(
L
, 
n
);

46 
	`lua_pushnumbî
(
L
, 
	`l_m©h›
(
Ábs
)(
	`luaL_checknumbî
(L, 1)));

48 
	}
}

50 
	$m©h_sö
 (
lua_Sèã
 *
L
) {

51 
	`lua_pushnumbî
(
L
, 
	`l_m©h›
(
sö
)(
	`luaL_checknumbî
(L, 1)));

53 
	}
}

55 
	$m©h_cos
 (
lua_Sèã
 *
L
) {

56 
	`lua_pushnumbî
(
L
, 
	`l_m©h›
(
cos
)(
	`luaL_checknumbî
(L, 1)));

58 
	}
}

60 
	$m©h_èn
 (
lua_Sèã
 *
L
) {

61 
	`lua_pushnumbî
(
L
, 
	`l_m©h›
(
èn
)(
	`luaL_checknumbî
(L, 1)));

63 
	}
}

65 
	$m©h_asö
 (
lua_Sèã
 *
L
) {

66 
	`lua_pushnumbî
(
L
, 
	`l_m©h›
(
asö
)(
	`luaL_checknumbî
(L, 1)));

68 
	}
}

70 
	$m©h_acos
 (
lua_Sèã
 *
L
) {

71 
	`lua_pushnumbî
(
L
, 
	`l_m©h›
(
acos
)(
	`luaL_checknumbî
(L, 1)));

73 
	}
}

75 
	$m©h_©™
 (
lua_Sèã
 *
L
) {

76 
lua_Numbî
 
y
 = 
	`luaL_checknumbî
(
L
, 1);

77 
lua_Numbî
 
x
 = 
	`luaL_›äumbî
(
L
, 2, 1);

78 
	`lua_pushnumbî
(
L
, 
	`l_m©h›
(
©™2
)(
y
, 
x
));

80 
	}
}

83 
	$m©h_toöt
 (
lua_Sèã
 *
L
) {

84 
vÆid
;

85 
lua_I¡egî
 
n
 = 
	`lua_toöãgîx
(
L
, 1, &
vÆid
);

86 i‡(
vÆid
)

87 
	`lua_pushöãgî
(
L
, 
n
);

89 
	`luaL_check™y
(
L
, 1);

90 
	`lua_pushnû
(
L
);

93 
	}
}

96 
	$pushnumöt
 (
lua_Sèã
 *
L
, 
lua_Numbî
 
d
) {

97 
lua_I¡egî
 
n
;

98 i‡(
	`lua_numbîtoöãgî
(
d
, &
n
))

99 
	`lua_pushöãgî
(
L
, 
n
);

101 
	`lua_pushnumbî
(
L
, 
d
);

102 
	}
}

105 
	$m©h_Êo‹
 (
lua_Sèã
 *
L
) {

106 i‡(
	`lua_isöãgî
(
L
, 1))

107 
	`lua_£â›
(
L
, 1);

109 
lua_Numbî
 
d
 = 
	`l_m©h›
(
Êo‹
)(
	`luaL_checknumbî
(
L
, 1));

110 
	`pushnumöt
(
L
, 
d
);

113 
	}
}

116 
	$m©h_˚û
 (
lua_Sèã
 *
L
) {

117 i‡(
	`lua_isöãgî
(
L
, 1))

118 
	`lua_£â›
(
L
, 1);

120 
lua_Numbî
 
d
 = 
	`l_m©h›
(
˚û
)(
	`luaL_checknumbî
(
L
, 1));

121 
	`pushnumöt
(
L
, 
d
);

124 
	}
}

127 
	$m©h_fmod
 (
lua_Sèã
 *
L
) {

128 i‡(
	`lua_isöãgî
(
L
, 1) &&Üua_isinteger(L, 2)) {

129 
lua_I¡egî
 
d
 = 
	`lua_toöãgî
(
L
, 2);

130 i‡((
lua_Unsig√d
)
d
 + 1u <= 1u) {

131 
	`luaL_¨gcheck
(
L
, 
d
 != 0, 2, "zero");

132 
	`lua_pushöãgî
(
L
, 0);

135 
	`lua_pushöãgî
(
L
, 
	`lua_toöãgî
(L, 1Ë% 
d
);

138 
	`lua_pushnumbî
(
L
, 
	`l_m©h›
(
fmod
)(
	`luaL_checknumbî
(L, 1),

139 
	`luaL_checknumbî
(
L
, 2)));

141 
	}
}

149 
	$m©h_modf
 (
lua_Sèã
 *
L
) {

150 i‡(
	`lua_isöãgî
(
L
 ,1)) {

151 
	`lua_£â›
(
L
, 1);

152 
	`lua_pushnumbî
(
L
, 0);

155 
lua_Numbî
 
n
 = 
	`luaL_checknumbî
(
L
, 1);

157 
lua_Numbî
 
ù
 = (
n
 < 0Ë? 
	`l_m©h›
(
˚û
)“Ë:Ü_m©h›(
Êo‹
)(n);

158 
	`pushnumöt
(
L
, 
ù
);

160 
	`lua_pushnumbî
(
L
, (
n
 =
ù
Ë? 
	`l_m©h›
(0.0) : (n - ip));

163 
	}
}

166 
	$m©h_sqπ
 (
lua_Sèã
 *
L
) {

167 
	`lua_pushnumbî
(
L
, 
	`l_m©h›
(
sqπ
)(
	`luaL_checknumbî
(L, 1)));

169 
	}
}

172 
	$m©h_u…
 (
lua_Sèã
 *
L
) {

173 
lua_I¡egî
 
a
 = 
	`luaL_checköãgî
(
L
, 1);

174 
lua_I¡egî
 
b
 = 
	`luaL_checköãgî
(
L
, 2);

175 
	`lua_pushboﬁón
(
L
, (
lua_Unsig√d
)
a
 < (lua_Unsig√d)
b
);

177 
	}
}

179 
	$m©h_log
 (
lua_Sèã
 *
L
) {

180 
lua_Numbî
 
x
 = 
	`luaL_checknumbî
(
L
, 1);

181 
lua_Numbî
 
ªs
;

182 i‡(
	`lua_i¢⁄e‹nû
(
L
, 2))

183 
ªs
 = 
	`l_m©h›
(
log
)(
x
);

185 
lua_Numbî
 
ba£
 = 
	`luaL_checknumbî
(
L
, 2);

186 i‡(
ba£
 =10.0Ë
ªs
 = 
	`l_m©h›
(
log10
)(
x
);

187 
ªs
 = 
	`l_m©h›
(
log
)(
x
)/l_m©h›÷og)(
ba£
);

189 
	`lua_pushnumbî
(
L
, 
ªs
);

191 
	}
}

193 
	$m©h_exp
 (
lua_Sèã
 *
L
) {

194 
	`lua_pushnumbî
(
L
, 
	`l_m©h›
(
exp
)(
	`luaL_checknumbî
(L, 1)));

196 
	}
}

198 
	$m©h_deg
 (
lua_Sèã
 *
L
) {

199 
	`lua_pushnumbî
(
L
, 
	`luaL_checknumbî
(L, 1Ë* (
	`l_m©h›
(180.0Ë/ 
PI
));

201 
	}
}

203 
	$m©h_ød
 (
lua_Sèã
 *
L
) {

204 
	`lua_pushnumbî
(
L
, 
	`luaL_checknumbî
(L, 1Ë* (
PI
 / 
	`l_m©h›
(180.0)));

206 
	}
}

209 
	$m©h_mö
 (
lua_Sèã
 *
L
) {

210 
n
 = 
	`lua_gët›
(
L
);

211 
imö
 = 1;

212 
i
;

213 
	`luaL_¨gcheck
(
L
, 
n
 >= 1, 1, "valueÉxpected");

214 
i
 = 2; i <
n
; i++) {

215 i‡(
	`lua_com∑ª
(
L
, 
i
, 
imö
, 
LUA_OPLT
))

216 
imö
 = 
i
;

218 
	`lua_pushvÆue
(
L
, 
imö
);

220 
	}
}

223 
	$m©h_max
 (
lua_Sèã
 *
L
) {

224 
n
 = 
	`lua_gët›
(
L
);

225 
imax
 = 1;

226 
i
;

227 
	`luaL_¨gcheck
(
L
, 
n
 >= 1, 1, "valueÉxpected");

228 
i
 = 2; i <
n
; i++) {

229 i‡(
	`lua_com∑ª
(
L
, 
imax
, 
i
, 
LUA_OPLT
))

230 
imax
 = 
i
;

232 
	`lua_pushvÆue
(
L
, 
imax
);

234 
	}
}

241 
	$m©h_øndom
 (
lua_Sèã
 *
L
) {

242 
lua_I¡egî
 
low
, 
up
;

243 
r
 = ()
	`l_ønd
(Ë* (1.0 / (()
L_RANDMAX
 + 1.0));

244 
	`lua_gët›
(
L
)) {

246 
	`lua_pushnumbî
(
L
, (
lua_Numbî
)
r
);

250 
low
 = 1;

251 
up
 = 
	`luaL_checköãgî
(
L
, 1);

255 
low
 = 
	`luaL_checköãgî
(
L
, 1);

256 
up
 = 
	`luaL_checköãgî
(
L
, 2);

259 :  
	`luaL_îr‹
(
L
, "wrongÇumber ofárguments");

262 
	`luaL_¨gcheck
(
L
, 
low
 <
up
, 1, "interval isÉmpty");

263 
	`luaL_¨gcheck
(
L
, 
low
 >0 || 
up
 <
LUA_MAXINTEGER
 +Üow, 1,

265 
r
 *()(
up
 - 
low
) + 1.0;

266 
	`lua_pushöãgî
(
L
, (
lua_I¡egî
)
r
 + 
low
);

268 
	}
}

271 
	$m©h_øndom£ed
 (
lua_Sèã
 *
L
) {

272 
	`l_§™d
(()(
lua_I¡egî
)
	`luaL_checknumbî
(
L
, 1));

273 ()
	`ønd
();

275 
	}
}

278 
	$m©h_ty≥
 (
lua_Sèã
 *
L
) {

279 i‡(
	`lua_ty≥
(
L
, 1Ë=
LUA_TNUMBER
) {

280 i‡(
	`lua_isöãgî
(
L
, 1))

281 
	`lua_pushlôîÆ
(
L
, "integer");

283 
	`lua_pushlôîÆ
(
L
, "float");

286 
	`luaL_check™y
(
L
, 1);

287 
	`lua_pushnû
(
L
);

290 
	}
}

298 #i‡
deföed
(
LUA_COMPAT_MATHLIB
)

300 
	$m©h_cosh
 (
lua_Sèã
 *
L
) {

301 
	`lua_pushnumbî
(
L
, 
	`l_m©h›
(
cosh
)(
	`luaL_checknumbî
(L, 1)));

303 
	}
}

305 
	$m©h_söh
 (
lua_Sèã
 *
L
) {

306 
	`lua_pushnumbî
(
L
, 
	`l_m©h›
(
söh
)(
	`luaL_checknumbî
(L, 1)));

308 
	}
}

310 
	$m©h_ènh
 (
lua_Sèã
 *
L
) {

311 
	`lua_pushnumbî
(
L
, 
	`l_m©h›
(
ènh
)(
	`luaL_checknumbî
(L, 1)));

313 
	}
}

315 
	$m©h_pow
 (
lua_Sèã
 *
L
) {

316 
lua_Numbî
 
x
 = 
	`luaL_checknumbî
(
L
, 1);

317 
lua_Numbî
 
y
 = 
	`luaL_checknumbî
(
L
, 2);

318 
	`lua_pushnumbî
(
L
, 
	`l_m©h›
(
pow
)(
x
, 
y
));

320 
	}
}

322 
	$m©h_‰exp
 (
lua_Sèã
 *
L
) {

323 
e
;

324 
	`lua_pushnumbî
(
L
, 
	`l_m©h›
(
‰exp
)(
	`luaL_checknumbî
(L, 1), &
e
));

325 
	`lua_pushöãgî
(
L
, 
e
);

327 
	}
}

329 
	$m©h_ldexp
 (
lua_Sèã
 *
L
) {

330 
lua_Numbî
 
x
 = 
	`luaL_checknumbî
(
L
, 1);

331 
ï
 = ()
	`luaL_checköãgî
(
L
, 2);

332 
	`lua_pushnumbî
(
L
, 
	`l_m©h›
(
ldexp
)(
x
, 
ï
));

334 
	}
}

336 
	$m©h_log10
 (
lua_Sèã
 *
L
) {

337 
	`lua_pushnumbî
(
L
, 
	`l_m©h›
(
log10
)(
	`luaL_checknumbî
(L, 1)));

339 
	}
}

346 c⁄° 
luaL_Reg
 
	gm©hlib
[] = {

347 {"abs", 
m©h_abs
},

348 {"acos", 
m©h_acos
},

349 {"asö", 
m©h_asö
},

350 {"©™", 
m©h_©™
},

351 {"˚û", 
m©h_˚û
},

352 {"cos", 
m©h_cos
},

353 {"deg", 
m©h_deg
},

354 {"exp", 
m©h_exp
},

355 {"toöãgî", 
m©h_toöt
},

356 {"Êo‹", 
m©h_Êo‹
},

357 {"fmod", 
m©h_fmod
},

358 {"u…", 
m©h_u…
},

359 {"log", 
m©h_log
},

360 {"max", 
m©h_max
},

361 {"mö", 
m©h_mö
},

362 {"modf", 
m©h_modf
},

363 {"ød", 
m©h_ød
},

364 {"øndom", 
m©h_øndom
},

365 {"øndom£ed", 
m©h_øndom£ed
},

366 {"sö", 
m©h_sö
},

367 {"sqπ", 
m©h_sqπ
},

368 {"èn", 
m©h_èn
},

369 {"ty≥", 
m©h_ty≥
},

370 #i‡
deföed
(
LUA_COMPAT_MATHLIB
)

371 {"©™2", 
m©h_©™
},

372 {"cosh", 
m©h_cosh
},

373 {"söh", 
m©h_söh
},

374 {"ènh", 
m©h_ènh
},

375 {"pow", 
m©h_pow
},

376 {"‰exp", 
m©h_‰exp
},

377 {"ldexp", 
m©h_ldexp
},

378 {"log10", 
m©h_log10
},

381 {"pi", 
NULL
},

382 {"huge", 
NULL
},

383 {"maxöãgî", 
NULL
},

384 {"mööãgî", 
NULL
},

385 {
NULL
, NULL}

392 
LUAMOD_API
 
	$lua›í_m©h
 (
lua_Sèã
 *
L
) {

393 
	`luaL_√wlib
(
L
, 
m©hlib
);

394 
	`lua_pushnumbî
(
L
, 
PI
);

395 
	`lua_£tfõld
(
L
, -2, "pi");

396 
	`lua_pushnumbî
(
L
, (
lua_Numbî
)
HUGE_VAL
);

397 
	`lua_£tfõld
(
L
, -2, "huge");

398 
	`lua_pushöãgî
(
L
, 
LUA_MAXINTEGER
);

399 
	`lua_£tfõld
(
L
, -2, "maxinteger");

400 
	`lua_pushöãgî
(
L
, 
LUA_MININTEGER
);

401 
	`lua_£tfõld
(
L
, -2, "mininteger");

403 
	}
}

	@lib/archive/lua-5.3.0/src/lmem.c

7 
	#lmem_c


	)

8 
	#LUA_CORE


	)

10 
	~"Õªfix.h
"

13 
	~<°ddef.h
>

15 
	~"lua.h
"

17 
	~"ldebug.h
"

18 
	~"ldo.h
"

19 
	~"lgc.h
"

20 
	~"lmem.h
"

21 
	~"lobje˘.h
"

22 
	~"l°©e.h
"

45 
	#MINSIZEARRAY
 4

	)

48 *
	$luaM_growaux_
 (
lua_Sèã
 *
L
, *
block
, *
size
, 
size_t
 
size_ñems
,

49 
limô
, c⁄° *
wh©
) {

50 *
√wblock
;

51 
√wsize
;

52 i‡(*
size
 >
limô
/2) {

53 i‡(*
size
 >
limô
)

54 
	`luaG_ru√º‹
(
L
, "toÿm™y %†÷imô i†%d)", 
wh©
, 
limô
);

55 
√wsize
 = 
limô
;

58 
√wsize
 = (*
size
)*2;

59 i‡(
√wsize
 < 
MINSIZEARRAY
)

60 
√wsize
 = 
MINSIZEARRAY
;

62 
√wblock
 = 
	`luaM_ªÆlocv
(
L
, 
block
, *
size
, 
√wsize
, 
size_ñems
);

63 *
size
 = 
√wsize
;

64  
√wblock
;

65 
	}
}

68 
l_n‹ë
 
	$luaM_toobig
 (
lua_Sèã
 *
L
) {

69 
	`luaG_ru√º‹
(
L
, "memoryállocationÉrror: blockÅoo big");

70 
	}
}

77 *
	$luaM_ªÆloc_
 (
lua_Sèã
 *
L
, *
block
, 
size_t
 
osize
, size_à
nsize
) {

78 *
√wblock
;

79 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

80 
size_t
 
ªÆosize
 = (
block
Ë? 
osize
 : 0;

81 
	`lua_as£π
((
ªÆosize
 =0Ë=(
block
 =
NULL
));

82 #i‡
	`deföed
(
HARDMEMTESTS
)

83 i‡(
nsize
 > 
ªÆosize
 && 
g
->
g¸u¬ög
)

84 
	`luaC_fuŒgc
(
L
, 1);

86 
√wblock
 = (*
g
->
‰óŒoc
)(g->
ud
, 
block
, 
osize
, 
nsize
);

87 i‡(
√wblock
 =
NULL
 && 
nsize
 > 0) {

88 
	`≠i_check
–
nsize
 > 
ªÆosize
,

90 
	`luaC_fuŒgc
(
L
, 1);

91 
√wblock
 = (*
g
->
‰óŒoc
)(g->
ud
, 
block
, 
osize
, 
nsize
);

92 i‡(
√wblock
 =
NULL
)

93 
	`luaD_throw
(
L
, 
LUA_ERRMEM
);

95 
	`lua_as£π
((
nsize
 =0Ë=(
√wblock
 =
NULL
));

96 
g
->
GCdebt
 = (g->GCdebà+ 
nsize
Ë- 
ªÆosize
;

97  
√wblock
;

98 
	}
}

	@lib/archive/lua-5.3.0/src/lmem.h

7 #i‚de‡
lmem_h


8 
	#lmem_h


	)

11 
	~<°ddef.h
>

13 
	~"Œimôs.h
"

14 
	~"lua.h
"

30 
	#luaM_ªÆlocv
(
L
,
b
,
⁄
,
n
,
e
) \

31 ((((
n
Ë>(
size_t
Ë&& 
	`ˇ°
(size_t, (n)Ë+ 1 > 
MAX_SIZET
/(
e
)) \

32 ? 
	`luaM_toobig
(
L
Ë: 
	`ˇ°_void
(0)) , \

33 
	`luaM_ªÆloc_
(
L
, (
b
), (
⁄
)*(
e
), (
n
)*”)))

	)

38 
	#luaM_ªÆlocvch¨
(
L
,
b
,
⁄
,
n
) \

39 
	`ˇ°
(*, 
	`luaM_ªÆloc_
(
L
, (
b
), (
⁄
)*(), (
n
)*()))

	)

41 
	#luaM_‰ìmem
(
L
, 
b
, 
s
Ë
	`luaM_ªÆloc_
(L, (b), (s), 0)

	)

42 
	#luaM_‰ì
(
L
, 
b
Ë
	`luaM_ªÆloc_
(L, (b), (*(b)), 0)

	)

43 
	#luaM_‰ì¨øy
(
L
, 
b
, 
n
Ë
	`luaM_ªÆloc_
(L, (b), (n)*(*(b)), 0)

	)

45 
	#luaM_mÆloc
(
L
,
s
Ë
	`luaM_ªÆloc_
(L, 
NULL
, 0, (s))

	)

46 
	#luaM_√w
(
L
,
t
Ë
	`ˇ°
— *, 
	`luaM_mÆloc
(L, —)))

	)

47 
	#luaM_√wve˘‹
(
L
,
n
,
t
) \

48 
	`ˇ°
(
t
 *, 
	`luaM_ªÆlocv
(
L
, 
NULL
, 0, 
n
, —)))

	)

50 
	#luaM_√wobje˘
(
L
,
èg
,
s
Ë
	`luaM_ªÆloc_
(L, 
NULL
,Åag, (s))

	)

52 
	#luaM_growve˘‹
(
L
,
v
,
√Àms
,
size
,
t
,
limô
,
e
) \

53 i‡((
√Àms
)+1 > (
size
)) \

54 ((
v
)=
	`ˇ°
(
t
 *, 
	`luaM_growaux_
(
L
,v,&(
size
),—),
limô
,
e
)))

	)

56 
	#luaM_ªÆlocve˘‹
(
L
, 
v
,
ﬁdn
,
n
,
t
) \

57 ((
v
)=
	`ˇ°
(
t
 *, 
	`luaM_ªÆlocv
(
L
, v, 
ﬁdn
, 
n
, —))))

	)

59 
LUAI_FUNC
 
l_n‹ë
 
luaM_toobig
 (
lua_Sèã
 *
L
);

62 
LUAI_FUNC
 *
luaM_ªÆloc_
 (
lua_Sèã
 *
L
, *
block
, 
size_t
 
ﬁdsize
,

63 
size_t
 
size
);

64 
LUAI_FUNC
 *
luaM_growaux_
 (
lua_Sèã
 *
L
, *
block
, *
size
,

65 
size_t
 
size_ñem
, 
limô
,

66 c⁄° *
wh©
);

	@lib/archive/lua-5.3.0/src/loadlib.c

11 
	#lﬂdlib_c


	)

12 
	#LUA_LIB


	)

14 
	~"Õªfix.h
"

17 
	~<°dlib.h
>

18 
	~<°rög.h
>

20 
	~"lua.h
"

22 
	~"œuxlib.h
"

23 
	~"luÆib.h
"

30 #i‡!
deföed
(
LUA_PATH_VAR
)

31 
	#LUA_PATH_VAR
 "LUA_PATH"

	)

34 #i‡!
deföed
(
LUA_CPATH_VAR
)

35 
	#LUA_CPATH_VAR
 "LUA_CPATH"

	)

38 
	#LUA_PATHSUFFIX
 "_" 
LUA_VERSION_MAJOR
 "_" 
LUA_VERSION_MINOR


	)

40 
	#LUA_PATHVARVERSION
 
LUA_PATH_VAR
 
LUA_PATHSUFFIX


	)

41 
	#LUA_CPATHVARVERSION
 
LUA_CPATH_VAR
 
LUA_PATHSUFFIX


	)

52 #i‡!
deföed
 (
LUA_PATH_SEP
)

53 
	#LUA_PATH_SEP
 ";"

	)

55 #i‡!
deföed
 (
LUA_PATH_MARK
)

56 
	#LUA_PATH_MARK
 "?"

	)

58 #i‡!
deföed
 (
LUA_EXEC_DIR
)

59 
	#LUA_EXEC_DIR
 "!"

	)

61 #i‡!
deföed
 (
LUA_IGMARK
)

62 
	#LUA_IGMARK
 "-"

	)

72 #i‡!
deföed
(
LUA_CSUBSEP
)

73 
	#LUA_CSUBSEP
 
LUA_DIRSEP


	)

76 #i‡!
deföed
(
LUA_LSUBSEP
)

77 
	#LUA_LSUBSEP
 
LUA_DIRSEP


	)

82 
	#LUA_POF
 "lua›í_"

	)

85 
	#LUA_OFSEP
 "_"

	)

92 c⁄° 
	gCLIBS
 = 0;

94 
	#LIB_FAIL
 "›í"

	)

96 
	#£çrogdú
(
L
Ë(()0)

	)

106 
lsys_u∆ﬂdlib
 (*
lib
);

114 *
lsys_lﬂd
 (
lua_Sèã
 *
L
, c⁄° *
∑th
, 
£eglb
);

121 
lua_CFun˘i⁄
 
lsys_sym
 (
lua_Sèã
 *
L
, *
lib
, c⁄° *
sym
);

126 #i‡
deföed
(
LUA_USE_DLOPEN
)

136 
	~<dlf˙.h
>

143 #i‡
deföed
(
__GNUC__
)

144 
	#ˇ°_func
(
p
Ë(
	`__exãnsi⁄__
 (
lua_CFun˘i⁄
)’))

	)

146 
	#ˇ°_func
(
p
Ë((
lua_CFun˘i⁄
)’))

	)

150 
	$lsys_u∆ﬂdlib
 (*
lib
) {

151 
	`dl˛o£
(
lib
);

152 
	}
}

155 *
	$lsys_lﬂd
 (
lua_Sèã
 *
L
, c⁄° *
∑th
, 
£eglb
) {

156 *
lib
 = 
	`dl›í
(
∑th
, 
RTLD_NOW
 | (
£eglb
 ? 
RTLD_GLOBAL
 : 
RTLD_LOCAL
));

157 i‡(
lib
 =
NULL
Ë
	`lua_push°rög
(
L
, 
	`dÀº‹
());

158  
lib
;

159 
	}
}

162 
lua_CFun˘i⁄
 
	$lsys_sym
 (
lua_Sèã
 *
L
, *
lib
, c⁄° *
sym
) {

163 
lua_CFun˘i⁄
 
f
 = 
	`ˇ°_func
(
	`dlsym
(
lib
, 
sym
));

164 i‡(
f
 =
NULL
Ë
	`lua_push°rög
(
L
, 
	`dÀº‹
());

165  
f
;

166 
	}
}

172 #ñi‡
deföed
(
LUA_DL_DLL
)

179 
	~<wödows.h
>

181 #unde‡
£çrogdú


186 #i‡!
deföed
(
LUA_LLE_FLAGS
)

187 
	#LUA_LLE_FLAGS
 0

	)

191 
	$£çrogdú
 (
lua_Sèã
 *
L
) {

192 
buff
[
MAX_PATH
 + 1];

193 *
lb
;

194 
DWORD
 
nsize
 = (
buff
)/();

195 
DWORD
 
n
 = 
	`GëModuÀFûeNameA
(
NULL
, 
buff
, 
nsize
);

196 i‡(
n
 =0 ||Ç =
nsize
 || (
lb
 = 
	`°ºchr
(
buff
, '\\')Ë=
NULL
)

197 
	`luaL_îr‹
(
L
, "unableÅo get ModuleFileName");

199 *
lb
 = '\0';

200 
	`luaL_gsub
(
L
, 
	`lua_to°rög
(L, -1), 
LUA_EXEC_DIR
, 
buff
);

201 
	`lua_ªmove
(
L
, -2);

203 
	}
}

206 
	$pushîr‹
 (
lua_Sèã
 *
L
) {

207 
îr‹
 = 
	`GëLa°Eº‹
();

208 
buf„r
[128];

209 i‡(
	`F‹m©MesßgeA
(
FORMAT_MESSAGE_IGNORE_INSERTS
 | 
FORMAT_MESSAGE_FROM_SYSTEM
,

210 
NULL
, 
îr‹
, 0, 
buf„r
, (buffer)/(), NULL))

211 
	`lua_push°rög
(
L
, 
buf„r
);

213 
	`lua_pushf°rög
(
L
, "sy°emÉº‹ %d\n", 
îr‹
);

214 
	}
}

216 
	$lsys_u∆ﬂdlib
 (*
lib
) {

217 
	`FªeLibøry
((
HMODULE
)
lib
);

218 
	}
}

221 *
	$lsys_lﬂd
 (
lua_Sèã
 *
L
, c⁄° *
∑th
, 
£eglb
) {

222 
HMODULE
 
lib
 = 
	`LﬂdLibøryExA
(
∑th
, 
NULL
, 
LUA_LLE_FLAGS
);

223 ()(
£eglb
);

224 i‡(
lib
 =
NULL
Ë
	`pushîr‹
(
L
);

225  
lib
;

226 
	}
}

229 
lua_CFun˘i⁄
 
	$lsys_sym
 (
lua_Sèã
 *
L
, *
lib
, c⁄° *
sym
) {

230 
lua_CFun˘i⁄
 
f
 = (lua_CFun˘i⁄)
	`GëProcAddªss
((
HMODULE
)
lib
, 
sym
);

231 i‡(
f
 =
NULL
Ë
	`pushîr‹
(
L
);

232  
f
;

233 
	}
}

245 #unde‡
LIB_FAIL


246 
	#LIB_FAIL
 "ab£¡"

	)

249 
	#DLMSG
 "dy«mi¯libørõ†nŸÉ«bÀd; check you∏Lu®ö°Æœti⁄"

	)

252 
	$lsys_u∆ﬂdlib
 (*
lib
) {

253 ()(
lib
);

254 
	}
}

257 *
	$lsys_lﬂd
 (
lua_Sèã
 *
L
, c⁄° *
∑th
, 
£eglb
) {

258 ()(
∑th
); ()(
£eglb
);

259 
	`lua_pushlôîÆ
(
L
, 
DLMSG
);

260  
NULL
;

261 
	}
}

264 
lua_CFun˘i⁄
 
	$lsys_sym
 (
lua_Sèã
 *
L
, *
lib
, c⁄° *
sym
) {

265 ()(
lib
); ()(
sym
);

266 
	`lua_pushlôîÆ
(
L
, 
DLMSG
);

267  
NULL
;

268 
	}
}

277 *
	$check˛ib
 (
lua_Sèã
 *
L
, c⁄° *
∑th
) {

278 *
∂ib
;

279 
	`lua_øwgëp
(
L
, 
LUA_REGISTRYINDEX
, &
CLIBS
);

280 
	`lua_gëfõld
(
L
, -1, 
∑th
);

281 
∂ib
 = 
	`lua_tou£rd©a
(
L
, -1);

282 
	`lua_p›
(
L
, 2);

283  
∂ib
;

284 
	}
}

291 
	$addto˛ib
 (
lua_Sèã
 *
L
, c⁄° *
∑th
, *
∂ib
) {

292 
	`lua_øwgëp
(
L
, 
LUA_REGISTRYINDEX
, &
CLIBS
);

293 
	`lua_pushlightu£rd©a
(
L
, 
∂ib
);

294 
	`lua_pushvÆue
(
L
, -1);

295 
	`lua_£tfõld
(
L
, -3, 
∑th
);

296 
	`lua_øw£ti
(
L
, -2, 
	`luaL_Àn
(L, -2) + 1);

297 
	`lua_p›
(
L
, 1);

298 
	}
}

305 
	$g˘m
 (
lua_Sèã
 *
L
) {

306 
lua_I¡egî
 
n
 = 
	`luaL_Àn
(
L
, 1);

307 ; 
n
 >= 1;Ç--) {

308 
	`lua_øwgëi
(
L
, 1, 
n
);

309 
	`lsys_u∆ﬂdlib
(
	`lua_tou£rd©a
(
L
, -1));

310 
	`lua_p›
(
L
, 1);

313 
	}
}

318 
	#ERRLIB
 1

	)

319 
	#ERRFUNC
 2

	)

332 
	$lookf‹func
 (
lua_Sèã
 *
L
, c⁄° *
∑th
, c⁄° *
sym
) {

333 *
ªg
 = 
	`check˛ib
(
L
, 
∑th
);

334 i‡(
ªg
 =
NULL
) {

335 
ªg
 = 
	`lsys_lﬂd
(
L
, 
∑th
, *
sym
 == '*');

336 i‡(
ªg
 =
NULL
Ë 
ERRLIB
;

337 
	`addto˛ib
(
L
, 
∑th
, 
ªg
);

339 i‡(*
sym
 == '*') {

340 
	`lua_pushboﬁón
(
L
, 1);

344 
lua_CFun˘i⁄
 
f
 = 
	`lsys_sym
(
L
, 
ªg
, 
sym
);

345 i‡(
f
 =
NULL
)

346  
ERRFUNC
;

347 
	`lua_pushcfun˘i⁄
(
L
, 
f
);

350 
	}
}

353 
	$Œ_lﬂdlib
 (
lua_Sèã
 *
L
) {

354 c⁄° *
∑th
 = 
	`luaL_check°rög
(
L
, 1);

355 c⁄° *
öô
 = 
	`luaL_check°rög
(
L
, 2);

356 
°©
 = 
	`lookf‹func
(
L
, 
∑th
, 
öô
);

357 i‡(
°©
 == 0)

360 
	`lua_pushnû
(
L
);

361 
	`lua_ö£π
(
L
, -2);

362 
	`lua_push°rög
(
L
, (
°©
 =
ERRLIB
Ë? 
LIB_FAIL
 : "init");

365 
	}
}

376 
	$ªadabÀ
 (c⁄° *
fûíame
) {

377 
FILE
 *
f
 = 
	`f›í
(
fûíame
, "r");

378 i‡(
f
 =
NULL
)  0;

379 
	`f˛o£
(
f
);

381 
	}
}

384 c⁄° *
	$push√xâem∂©e
 (
lua_Sèã
 *
L
, c⁄° *
∑th
) {

385 c⁄° *
l
;

386 *
∑th
 =*
LUA_PATH_SEP
)Öath++;

387 i‡(*
∑th
 ='\0'Ë 
NULL
;

388 
l
 = 
	`°rchr
(
∑th
, *
LUA_PATH_SEP
);

389 i‡(
l
 =
NULL
Ë»
∑th
 + 
	`°æí
(path);

390 
	`lua_pushl°rög
(
L
, 
∑th
, 
l
 -Öath);

391  
l
;

392 
	}
}

395 c⁄° *
	$£¨ch∑th
 (
lua_Sèã
 *
L
, c⁄° *
«me
,

396 c⁄° *
∑th
,

397 c⁄° *
£p
,

398 c⁄° *
dú£p
) {

399 
luaL_Buf„r
 
msg
;

400 
	`luaL_bufföô
(
L
, &
msg
);

401 i‡(*
£p
 != '\0')

402 
«me
 = 
	`luaL_gsub
(
L
,Çame, 
£p
, 
dú£p
);

403 (
∑th
 = 
	`push√xâem∂©e
(
L
,Ö©h)Ë!
NULL
) {

404 c⁄° *
fûíame
 = 
	`luaL_gsub
(
L
, 
	`lua_to°rög
(L, -1),

405 
LUA_PATH_MARK
, 
«me
);

406 
	`lua_ªmove
(
L
, -2);

407 i‡(
	`ªadabÀ
(
fûíame
))

408  
fûíame
;

409 
	`lua_pushf°rög
(
L
, "\n\äÿfûê'%s'", 
fûíame
);

410 
	`lua_ªmove
(
L
, -2);

411 
	`luaL_addvÆue
(&
msg
);

413 
	`luaL_pushªsu…
(&
msg
);

414  
NULL
;

415 
	}
}

418 
	$Œ_£¨ch∑th
 (
lua_Sèã
 *
L
) {

419 c⁄° *
f
 = 
	`£¨ch∑th
(
L
, 
	`luaL_check°rög
(L, 1),

420 
	`luaL_check°rög
(
L
, 2),

421 
	`luaL_›t°rög
(
L
, 3, "."),

422 
	`luaL_›t°rög
(
L
, 4, 
LUA_DIRSEP
));

423 i‡(
f
 !
NULL
)  1;

425 
	`lua_pushnû
(
L
);

426 
	`lua_ö£π
(
L
, -2);

429 
	}
}

432 c⁄° *
	$födfûe
 (
lua_Sèã
 *
L
, c⁄° *
«me
,

433 c⁄° *
≤ame
,

434 c⁄° *
dú£p
) {

435 c⁄° *
∑th
;

436 
	`lua_gëfõld
(
L
, 
	`lua_upvÆueödex
(1), 
≤ame
);

437 
∑th
 = 
	`lua_to°rög
(
L
, -1);

438 i‡(
∑th
 =
NULL
)

439 
	`luaL_îr‹
(
L
, "'∑ckage.%s' mu° bê®°rög", 
≤ame
);

440  
	`£¨ch∑th
(
L
, 
«me
, 
∑th
, ".", 
dú£p
);

441 
	}
}

444 
	$checklﬂd
 (
lua_Sèã
 *
L
, 
°©
, c⁄° *
fûíame
) {

445 i‡(
°©
) {

446 
	`lua_push°rög
(
L
, 
fûíame
);

450  
	`luaL_îr‹
(
L
, "errorÜoading module '%s' from file '%s':\n\t%s",

451 
	`lua_to°rög
(
L
, 1), 
fûíame
,Üua_tostring(L, -1));

452 
	}
}

455 
	$£¨chî_Lua
 (
lua_Sèã
 *
L
) {

456 c⁄° *
fûíame
;

457 c⁄° *
«me
 = 
	`luaL_check°rög
(
L
, 1);

458 
fûíame
 = 
	`födfûe
(
L
, 
«me
, "∑th", 
LUA_LSUBSEP
);

459 i‡(
fûíame
 =
NULL
)  1;

460  
	`checklﬂd
(
L
, (
	`luaL_lﬂdfûe
(L, 
fûíame
Ë=
LUA_OK
), filename);

461 
	}
}

472 
	$lﬂdfunc
 (
lua_Sèã
 *
L
, c⁄° *
fûíame
, c⁄° *
mod«me
) {

473 c⁄° *
›ífunc
;

474 c⁄° *
m¨k
;

475 
mod«me
 = 
	`luaL_gsub
(
L
, mod«me, ".", 
LUA_OFSEP
);

476 
m¨k
 = 
	`°rchr
(
mod«me
, *
LUA_IGMARK
);

477 i‡(
m¨k
) {

478 
°©
;

479 
›ífunc
 = 
	`lua_pushl°rög
(
L
, 
mod«me
, 
m¨k
 - modname);

480 
›ífunc
 = 
	`lua_pushf°rög
(
L
, 
LUA_POF
"%s", openfunc);

481 
°©
 = 
	`lookf‹func
(
L
, 
fûíame
, 
›ífunc
);

482 i‡(
°©
 !
ERRFUNC
)  stat;

483 
mod«me
 = 
m¨k
 + 1;

485 
›ífunc
 = 
	`lua_pushf°rög
(
L
, 
LUA_POF
"%s", 
mod«me
);

486  
	`lookf‹func
(
L
, 
fûíame
, 
›ífunc
);

487 
	}
}

490 
	$£¨chî_C
 (
lua_Sèã
 *
L
) {

491 c⁄° *
«me
 = 
	`luaL_check°rög
(
L
, 1);

492 c⁄° *
fûíame
 = 
	`födfûe
(
L
, 
«me
, "˝©h", 
LUA_CSUBSEP
);

493 i‡(
fûíame
 =
NULL
)  1;

494  
	`checklﬂd
(
L
, (
	`lﬂdfunc
(L, 
fûíame
, 
«me
) == 0), filename);

495 
	}
}

498 
	$£¨chî_CroŸ
 (
lua_Sèã
 *
L
) {

499 c⁄° *
fûíame
;

500 c⁄° *
«me
 = 
	`luaL_check°rög
(
L
, 1);

501 c⁄° *
p
 = 
	`°rchr
(
«me
, '.');

502 
°©
;

503 i‡(
p
 =
NULL
)  0;

504 
	`lua_pushl°rög
(
L
, 
«me
, 
p
 -Çame);

505 
fûíame
 = 
	`födfûe
(
L
, 
	`lua_to°rög
(L, -1), "˝©h", 
LUA_CSUBSEP
);

506 i‡(
fûíame
 =
NULL
)  1;

507 i‡((
°©
 = 
	`lﬂdfunc
(
L
, 
fûíame
, 
«me
)) != 0) {

508 i‡(
°©
 !
ERRFUNC
)

509  
	`checklﬂd
(
L
, 0, 
fûíame
);

511 
	`lua_pushf°rög
(
L
, "\n\äÿmoduÀ '%s' i¿fûê'%s'", 
«me
, 
fûíame
);

515 
	`lua_push°rög
(
L
, 
fûíame
);

517 
	}
}

520 
	$£¨chî_¥ñﬂd
 (
lua_Sèã
 *
L
) {

521 c⁄° *
«me
 = 
	`luaL_check°rög
(
L
, 1);

522 
	`lua_gëfõld
(
L
, 
LUA_REGISTRYINDEX
, "_PRELOAD");

523 i‡(
	`lua_gëfõld
(
L
, -1, 
«me
Ë=
LUA_TNIL
)

524 
	`lua_pushf°rög
(
L
, "\n\äÿfõldÖackage.¥ñﬂd['%s']", 
«me
);

526 
	}
}

529 
	$födlﬂdî
 (
lua_Sèã
 *
L
, c⁄° *
«me
) {

530 
i
;

531 
luaL_Buf„r
 
msg
;

532 
	`luaL_bufföô
(
L
, &
msg
);

534 i‡(
	`lua_gëfõld
(
L
, 
	`lua_upvÆueödex
(1), "£¨chîs"Ë!
LUA_TTABLE
)

535 
	`luaL_îr‹
(
L
, "'package.searchers' must beáÅable");

537 
i
 = 1; ; i++) {

538 i‡(
	`lua_øwgëi
(
L
, 3, 
i
Ë=
LUA_TNIL
) {

539 
	`lua_p›
(
L
, 1);

540 
	`luaL_pushªsu…
(&
msg
);

541 
	`luaL_îr‹
(
L
, "moduÀ '%s'ÇŸ found:%s", 
«me
, 
	`lua_to°rög
(L, -1));

543 
	`lua_push°rög
(
L
, 
«me
);

544 
	`lua_ˇŒ
(
L
, 1, 2);

545 i‡(
	`lua_isfun˘i⁄
(
L
, -2))

547 i‡(
	`lua_is°rög
(
L
, -2)) {

548 
	`lua_p›
(
L
, 1);

549 
	`luaL_addvÆue
(&
msg
);

552 
	`lua_p›
(
L
, 2);

554 
	}
}

557 
	$Œ_ªquúe
 (
lua_Sèã
 *
L
) {

558 c⁄° *
«me
 = 
	`luaL_check°rög
(
L
, 1);

559 
	`lua_£â›
(
L
, 1);

560 
	`lua_gëfõld
(
L
, 
LUA_REGISTRYINDEX
, "_LOADED");

561 
	`lua_gëfõld
(
L
, 2, 
«me
);

562 i‡(
	`lua_toboﬁón
(
L
, -1))

565 
	`lua_p›
(
L
, 1);

566 
	`födlﬂdî
(
L
, 
«me
);

567 
	`lua_push°rög
(
L
, 
«me
);

568 
	`lua_ö£π
(
L
, -2);

569 
	`lua_ˇŒ
(
L
, 2, 1);

570 i‡(!
	`lua_i¢û
(
L
, -1))

571 
	`lua_£tfõld
(
L
, 2, 
«me
);

572 i‡(
	`lua_gëfõld
(
L
, 2, 
«me
Ë=
LUA_TNIL
) {

573 
	`lua_pushboﬁón
(
L
, 1);

574 
	`lua_pushvÆue
(
L
, -1);

575 
	`lua_£tfõld
(
L
, 2, 
«me
);

578 
	}
}

589 #i‡
deföed
(
LUA_COMPAT_MODULE
)

594 
	$£t_ív
 (
lua_Sèã
 *
L
) {

595 
lua_Debug
 
¨
;

596 i‡(
	`lua_gë°ack
(
L
, 1, &
¨
) == 0 ||

597 
	`lua_gëöfo
(
L
, "f", &
¨
) == 0 ||

598 
	`lua_iscfun˘i⁄
(
L
, -1))

599 
	`luaL_îr‹
(
L
, "'module'Çot called fromá Lua function");

600 
	`lua_pushvÆue
(
L
, -2);

601 
	`lua_£tupvÆue
(
L
, -2, 1);

602 
	`lua_p›
(
L
, 1);

603 
	}
}

606 
	$do›ti⁄s
 (
lua_Sèã
 *
L
, 
n
) {

607 
i
;

608 
i
 = 2; i <
n
; i++) {

609 i‡(
	`lua_isfun˘i⁄
(
L
, 
i
)) {

610 
	`lua_pushvÆue
(
L
, 
i
);

611 
	`lua_pushvÆue
(
L
, -2);

612 
	`lua_ˇŒ
(
L
, 1, 0);

615 
	}
}

618 
	$modöô
 (
lua_Sèã
 *
L
, c⁄° *
mod«me
) {

619 c⁄° *
dŸ
;

620 
	`lua_pushvÆue
(
L
, -1);

621 
	`lua_£tfõld
(
L
, -2, "_M");

622 
	`lua_push°rög
(
L
, 
mod«me
);

623 
	`lua_£tfõld
(
L
, -2, "_NAME");

624 
dŸ
 = 
	`°ºchr
(
mod«me
, '.');

625 i‡(
dŸ
 =
NULL
ËdŸ = 
mod«me
;

626 
dŸ
++;

628 
	`lua_pushl°rög
(
L
, 
mod«me
, 
dŸ
 - modname);

629 
	`lua_£tfõld
(
L
, -2, "_PACKAGE");

630 
	}
}

633 
	$Œ_moduÀ
 (
lua_Sèã
 *
L
) {

634 c⁄° *
mod«me
 = 
	`luaL_check°rög
(
L
, 1);

635 
œ°¨g
 = 
	`lua_gët›
(
L
);

636 
	`luaL_pushmoduÀ
(
L
, 
mod«me
, 1);

638 i‡(
	`lua_gëfõld
(
L
, -1, "_NAME"Ë!
LUA_TNIL
)

639 
	`lua_p›
(
L
, 1);

641 
	`lua_p›
(
L
, 1);

642 
	`modöô
(
L
, 
mod«me
);

644 
	`lua_pushvÆue
(
L
, -1);

645 
	`£t_ív
(
L
);

646 
	`do›ti⁄s
(
L
, 
œ°¨g
);

648 
	}
}

651 
	$Œ_£óŒ
 (
lua_Sèã
 *
L
) {

652 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

653 i‡(!
	`lua_gëmë©abÀ
(
L
, 1)) {

654 
	`lua_¸óãèbÀ
(
L
, 0, 1);

655 
	`lua_pushvÆue
(
L
, -1);

656 
	`lua_£tmë©abÀ
(
L
, 1);

658 
	`lua_pushglobÆèbÀ
(
L
);

659 
	`lua_£tfõld
(
L
, -2, "__index");

661 
	}
}

669 
	#AUXMARK
 "\1"

	)

675 
	$n€nv
 (
lua_Sèã
 *
L
) {

676 
b
;

677 
	`lua_gëfõld
(
L
, 
LUA_REGISTRYINDEX
, "LUA_NOENV");

678 
b
 = 
	`lua_toboﬁón
(
L
, -1);

679 
	`lua_p›
(
L
, 1);

680  
b
;

681 
	}
}

684 
	$£ç©h
 (
lua_Sèã
 *
L
, c⁄° *
fõld«me
, c⁄° *
ív«me1
,

685 c⁄° *
ív«me2
, c⁄° *
def
) {

686 c⁄° *
∑th
 = 
	`gëív
(
ív«me1
);

687 i‡(
∑th
 =
NULL
)

688 
∑th
 = 
	`gëív
(
ív«me2
);

689 i‡(
∑th
 =
NULL
 || 
	`n€nv
(
L
))

690 
	`lua_push°rög
(
L
, 
def
);

693 
∑th
 = 
	`luaL_gsub
(
L
,Ö©h, 
LUA_PATH_SEP
 LUA_PATH_SEP,

694 
LUA_PATH_SEP
 
AUXMARK
 LUA_PATH_SEP);

695 
	`luaL_gsub
(
L
, 
∑th
, 
AUXMARK
, 
def
);

696 
	`lua_ªmove
(
L
, -2);

698 
	`£çrogdú
(
L
);

699 
	`lua_£tfõld
(
L
, -2, 
fõld«me
);

700 
	}
}

703 c⁄° 
luaL_Reg
 
	gpk_funcs
[] = {

704 {"lﬂdlib", 
Œ_lﬂdlib
},

705 {"£¨ch∑th", 
Œ_£¨ch∑th
},

706 #i‡
deföed
(
LUA_COMPAT_MODULE
)

707 {"£óŒ", 
Œ_£óŒ
},

710 {"¥ñﬂd", 
NULL
},

711 {"˝©h", 
NULL
},

712 {"∑th", 
NULL
},

713 {"£¨chîs", 
NULL
},

714 {"lﬂded", 
NULL
},

715 {
NULL
, NULL}

719 c⁄° 
luaL_Reg
 
	gŒ_funcs
[] = {

720 #i‡
deföed
(
LUA_COMPAT_MODULE
)

721 {"moduÀ", 
Œ_moduÀ
},

723 {"ªquúe", 
Œ_ªquúe
},

724 {
NULL
, NULL}

728 
	$¸óã£¨chî°abÀ
 (
lua_Sèã
 *
L
) {

729 c⁄° 
lua_CFun˘i⁄
 
£¨chîs
[] =

730 {
£¨chî_¥ñﬂd
, 
£¨chî_Lua
, 
£¨chî_C
, 
£¨chî_CroŸ
, 
NULL
};

731 
i
;

733 
	`lua_¸óãèbÀ
(
L
, (
£¨chîs
)/(searchers[0]) - 1, 0);

735 
i
=0; 
£¨chîs
[i] !
NULL
; i++) {

736 
	`lua_pushvÆue
(
L
, -2);

737 
	`lua_pushc˛osuª
(
L
, 
£¨chîs
[
i
], 1);

738 
	`lua_øw£ti
(
L
, -2, 
i
+1);

740 #i‡
	`deföed
(
LUA_COMPAT_LOADERS
)

741 
	`lua_pushvÆue
(
L
, -1);

742 
	`lua_£tfõld
(
L
, -3, "loaders");

744 
	`lua_£tfõld
(
L
, -2, "searchers");

745 
	}
}

752 
	$¸óã˛ib°abÀ
 (
lua_Sèã
 *
L
) {

753 
	`lua_√wèbÀ
(
L
);

754 
	`lua_¸óãèbÀ
(
L
, 0, 1);

755 
	`lua_pushcfun˘i⁄
(
L
, 
g˘m
);

756 
	`lua_£tfõld
(
L
, -2, "__gc");

757 
	`lua_£tmë©abÀ
(
L
, -2);

758 
	`lua_øw£ç
(
L
, 
LUA_REGISTRYINDEX
, &
CLIBS
);

759 
	}
}

762 
LUAMOD_API
 
	$lua›í_∑ckage
 (
lua_Sèã
 *
L
) {

763 
	`¸óã˛ib°abÀ
(
L
);

764 
	`luaL_√wlib
(
L
, 
pk_funcs
);

765 
	`¸óã£¨chî°abÀ
(
L
);

767 
	`£ç©h
(
L
, "∑th", 
LUA_PATHVARVERSION
, 
LUA_PATH_VAR
, 
LUA_PATH_DEFAULT
);

769 
	`£ç©h
(
L
, "˝©h", 
LUA_CPATHVARVERSION
, 
LUA_CPATH_VAR
, 
LUA_CPATH_DEFAULT
);

771 
	`lua_pushlôîÆ
(
L
, 
LUA_DIRSEP
 "\n" 
LUA_PATH_SEP
 "\n" 
LUA_PATH_MARK
 "\n"

772 
LUA_EXEC_DIR
 "\n" 
LUA_IGMARK
 "\n");

773 
	`lua_£tfõld
(
L
, -2, "config");

775 
	`luaL_gësubèbÀ
(
L
, 
LUA_REGISTRYINDEX
, "_LOADED");

776 
	`lua_£tfõld
(
L
, -2, "loaded");

778 
	`luaL_gësubèbÀ
(
L
, 
LUA_REGISTRYINDEX
, "_PRELOAD");

779 
	`lua_£tfõld
(
L
, -2, "preload");

780 
	`lua_pushglobÆèbÀ
(
L
);

781 
	`lua_pushvÆue
(
L
, -2);

782 
	`luaL_£tfuncs
(
L
, 
Œ_funcs
, 1);

783 
	`lua_p›
(
L
, 1);

785 
	}
}

	@lib/archive/lua-5.3.0/src/lobject.c

7 
	#lobje˘_c


	)

8 
	#LUA_CORE


	)

10 
	~"Õªfix.h
"

13 
	~<°d¨g.h
>

14 
	~<°dio.h
>

15 
	~<°dlib.h
>

16 
	~<°rög.h
>

18 
	~"lua.h
"

20 
	~"l˘y≥.h
"

21 
	~"ldebug.h
"

22 
	~"ldo.h
"

23 
	~"lmem.h
"

24 
	~"lobje˘.h
"

25 
	~"l°©e.h
"

26 
	~"l°rög.h
"

27 
	~"lvm.h
"

31 
LUAI_DDEF
 c⁄° 
TVÆue
 
	gluaO_nûobje˘_
 = {
NILCONSTANT
};

39 
	$luaO_öt2fb
 (
x
) {

40 
e
 = 0;

41 i‡(
x
 < 8)  x;

42 
x
 >= 0x10) {

43 
x
 = (x+1) >> 1;

44 
e
++;

46  ((
e
+1Ë<< 3Ë| (
	`ˇ°_öt
(
x
) - 8);

47 
	}
}

51 
	$luaO_fb2öt
 (
x
) {

52 
e
 = (
x
 >> 3) & 0x1f;

53 i‡(
e
 =0Ë 
x
;

54  ((
x
 & 7Ë+ 8Ë<< (
e
 - 1);

55 
	}
}

58 
	$luaO_˚ûlog2
 (
x
) {

59 c⁄° 
lu_byã
 
log_2
[256] = {

69 
l
 = 0;

70 
x
--;

71 
x
 >256Ë{ 
l
 += 8; x >>= 8; }

72  
l
 + 
log_2
[
x
];

73 
	}
}

76 
lua_I¡egî
 
	$öèrôh
 (
lua_Sèã
 *
L
, 
›
, 
lua_I¡egî
 
v1
,

77 
lua_I¡egî
 
v2
) {

78 
›
) {

79 
LUA_OPADD
:  
	`öt›
(+, 
v1
, 
v2
);

80 
LUA_OPSUB
: 
	`öt›
(-, 
v1
, 
v2
);

81 
LUA_OPMUL
: 
	`öt›
(*, 
v1
, 
v2
);

82 
LUA_OPMOD
:  
	`luaV_mod
(
L
, 
v1
, 
v2
);

83 
LUA_OPIDIV
:  
	`luaV_div
(
L
, 
v1
, 
v2
);

84 
LUA_OPBAND
:  
	`öt›
(&, 
v1
, 
v2
);

85 
LUA_OPBOR
:  
	`öt›
(|, 
v1
, 
v2
);

86 
LUA_OPBXOR
:  
	`öt›
(^, 
v1
, 
v2
);

87 
LUA_OPSHL
:  
	`luaV_shi·l
(
v1
, 
v2
);

88 
LUA_OPSHR
:  
	`luaV_shi·l
(
v1
, -
v2
);

89 
LUA_OPUNM
:  
	`öt›
(-, 0, 
v1
);

90 
LUA_OPBNOT
:  
	`öt›
(^, ~
	`l_ˇ°S2U
(0), 
v1
);

91 : 
	`lua_as£π
(0);  0;

93 
	}
}

96 
lua_Numbî
 
	$num¨ôh
 (
lua_Sèã
 *
L
, 
›
, 
lua_Numbî
 
v1
,

97 
lua_Numbî
 
v2
) {

98 
›
) {

99 
LUA_OPADD
:  
	`luai_numadd
(
L
, 
v1
, 
v2
);

100 
LUA_OPSUB
:  
	`luai_numsub
(
L
, 
v1
, 
v2
);

101 
LUA_OPMUL
:  
	`luai_nummul
(
L
, 
v1
, 
v2
);

102 
LUA_OPDIV
:  
	`luai_numdiv
(
L
, 
v1
, 
v2
);

103 
LUA_OPPOW
:  
	`luai_numpow
(
L
, 
v1
, 
v2
);

104 
LUA_OPIDIV
:  
	`luai_numidiv
(
L
, 
v1
, 
v2
);

105 
LUA_OPUNM
:  
	`luai_numunm
(
L
, 
v1
);

106 
LUA_OPMOD
: {

107 
lua_Numbî
 
m
;

108 
	`luai_nummod
(
L
, 
v1
, 
v2
, 
m
);

109  
m
;

111 : 
	`lua_as£π
(0);  0;

113 
	}
}

116 
	$luaO_¨ôh
 (
lua_Sèã
 *
L
, 
›
, c⁄° 
TVÆue
 *
p1
, c⁄° TVÆuê*
p2
,

117 
TVÆue
 *
ªs
) {

118 
›
) {

119 
LUA_OPBAND
: 
LUA_OPBOR
: 
LUA_OPBXOR
:

120 
LUA_OPSHL
: 
LUA_OPSHR
:

121 
LUA_OPBNOT
: {

122 
lua_I¡egî
 
i1
;Üua_I¡egî 
i2
;

123 i‡(
	`toöãgî
(
p1
, &
i1
Ë&&Åoöãgî(
p2
, &
i2
)) {

124 
	`£tivÆue
(
ªs
, 
	`öèrôh
(
L
, 
›
, 
i1
, 
i2
));

129 
LUA_OPDIV
: 
LUA_OPPOW
: {

130 
lua_Numbî
 
n1
;Üua_Numbî 
n2
;

131 i‡(
	`t⁄umbî
(
p1
, &
n1
Ë&&Å⁄umbî(
p2
, &
n2
)) {

132 
	`£tÊtvÆue
(
ªs
, 
	`num¨ôh
(
L
, 
›
, 
n1
, 
n2
));

138 
lua_Numbî
 
n1
;Üua_Numbî 
n2
;

139 i‡(
	`âisöãgî
(
p1
Ë&&Åtisöãgî(
p2
)) {

140 
	`£tivÆue
(
ªs
, 
	`öèrôh
(
L
, 
›
, 
	`ivÆue
(
p1
), ivÆue(
p2
)));

143 i‡(
	`t⁄umbî
(
p1
, &
n1
Ë&&Å⁄umbî(
p2
, &
n2
)) {

144 
	`£tÊtvÆue
(
ªs
, 
	`num¨ôh
(
L
, 
›
, 
n1
, 
n2
));

151 
	`lua_as£π
(
L
 !
NULL
);

152 
	`luaT_åyböTM
(
L
, 
p1
, 
p2
, 
ªs
, 
	`ˇ°
(
TMS
, 
›
 - 
LUA_OPADD
 + 
TM_ADD
));

153 
	}
}

156 
	$luaO_hexavÆue
 (
c
) {

157 i‡(
	`lisdigô
(
c
))  c - '0';

158  
	`…ﬁowî
(
c
) - 'a' + 10;

159 
	}
}

162 
	$i¢eg
 (c⁄° **
s
) {

163 i‡(**
s
 == '-') { (*s)++;  1; }

164 i‡(**
s
 == '+') (*s)++;

166 
	}
}

175 #i‡!
deföed
(
lua_°rx2numbî
)

177 
	~<m©h.h
>

181 
	#MAXSIGDIG
 30

	)

187 
lua_Numbî
 
	$lua_°rx2numbî
 (c⁄° *
s
, **
íd±r
) {

188 
lua_Numbî
 
r
 = 0.0;

189 
sigdig
 = 0;

190 
nosigdig
 = 0;

191 
e
 = 0;

192 
√g
;

193 
dŸ
 = 0;

194 *
íd±r
 = 
	`ˇ°
(*, 
s
);

195 
	`lis•a˚
(
	`ˇ°_uch¨
(*
s
))) s++;

196 
√g
 = 
	`i¢eg
(&
s
);

197 i‡(!(*
s
 == '0' && (*(s + 1) == 'x' || *(s + 1) == 'X')))

199 
s
 += 2; ; s++) {

200 i‡(*
s
 == '.') {

201 i‡(
dŸ
) ;

202 
dŸ
 = 1;

204 i‡(
	`lisxdigô
(
	`ˇ°_uch¨
(*
s
))) {

205 i‡(
sigdig
 =0 && *
s
 == '0')

206 
nosigdig
++;

207 i‡(++
sigdig
 <
MAXSIGDIG
)

208 
r
 = (∏* 
	`ˇ°_num
(16.0)Ë+ 
	`luaO_hexavÆue
(*
s
);

209 
e
++;

210 i‡(
dŸ
Ë
e
--;

214 i‡(
nosigdig
 + 
sigdig
 == 0)

216 *
íd±r
 = 
	`ˇ°
(*, 
s
);

217 
e
 *= 4;

218 i‡(*
s
 == 'p' || *s == 'P') {

219 
exp1
 = 0;

220 
√g1
;

221 
s
++;

222 
√g1
 = 
	`i¢eg
(&
s
);

223 i‡(!
	`lisdigô
(
	`ˇ°_uch¨
(*
s
)))

225 
	`lisdigô
(
	`ˇ°_uch¨
(*
s
)))

226 
exp1
 =Éxp1 * 10 + *(
s
++) - '0';

227 i‡(
√g1
Ë
exp1
 = -exp1;

228 
e
 +
exp1
;

229 *
íd±r
 = 
	`ˇ°
(*, 
s
);

231 i‡(
√g
Ë
r
 = -r;

232  
	`l_m©h›
(
ldexp
)(
r
, 
e
);

233 
	}
}

239 c⁄° *
	$l_°r2d
 (c⁄° *
s
, 
lua_Numbî
 *
ªsu…
) {

240 *
íd±r
;

241 i‡(
	`°Ωbrk
(
s
, "nN"))

242  
NULL
;

243 i‡(
	`°Ωbrk
(
s
, "xX"))

244 *
ªsu…
 = 
	`lua_°rx2numbî
(
s
, &
íd±r
);

246 *
ªsu…
 = 
	`lua_°r2numbî
(
s
, &
íd±r
);

247 i‡(
íd±r
 =
s
)  0;

248 
	`lis•a˚
(
	`ˇ°_uch¨
(*
íd±r
)))Éndptr++;

249  (*
íd±r
 ='\0' ?Énd±∏: 
NULL
);

250 
	}
}

253 c⁄° *
	$l_°r2öt
 (c⁄° *
s
, 
lua_I¡egî
 *
ªsu…
) {

254 
lua_Unsig√d
 
a
 = 0;

255 
em±y
 = 1;

256 
√g
;

257 
	`lis•a˚
(
	`ˇ°_uch¨
(*
s
))) s++;

258 
√g
 = 
	`i¢eg
(&
s
);

259 i‡(
s
[0] == '0' &&

260 (
s
[1] == 'x' || s[1] == 'X')) {

261 
s
 += 2;

262 ; 
	`lisxdigô
(
	`ˇ°_uch¨
(*
s
)); s++) {

263 
a
 =á * 16 + 
	`luaO_hexavÆue
(*
s
);

264 
em±y
 = 0;

268 ; 
	`lisdigô
(
	`ˇ°_uch¨
(*
s
)); s++) {

269 
a
 =á * 10 + *
s
 - '0';

270 
em±y
 = 0;

273 
	`lis•a˚
(
	`ˇ°_uch¨
(*
s
))) s++;

274 i‡(
em±y
 || *
s
 !'\0'Ë 
NULL
;

276 *
ªsu…
 = 
	`l_ˇ°U2S
((
√g
Ë? 0u - 
a
 :á);

277  
s
;

279 
	}
}

282 
size_t
 
	$luaO_°r2num
 (c⁄° *
s
, 
TVÆue
 *
o
) {

283 
lua_I¡egî
 
i
; 
lua_Numbî
 
n
;

284 c⁄° *
e
;

285 i‡((
e
 = 
	`l_°r2öt
(
s
, &
i
)Ë!
NULL
) {

286 
	`£tivÆue
(
o
, 
i
);

288 i‡((
e
 = 
	`l_°r2d
(
s
, &
n
)Ë!
NULL
) {

289 
	`£tÊtvÆue
(
o
, 
n
);

293  (
e
 - 
s
 + 1);

294 
	}
}

297 
	$luaO_utf8esc
 (*
buff
, 
x
) {

298 
n
 = 1;

299 
	`lua_as£π
(
x
 <= 0x10FFFF);

300 i‡(
x
 < 0x80)

301 
buff
[
UTF8BUFFSZ
 - 1] = 
	`ˇ°
(, 
x
);

303 
mfb
 = 0x3f;

305 
buff
[
UTF8BUFFSZ
 - (
n
++)] = 
	`ˇ°
(, 0x80 | (
x
 & 0x3f));

306 
x
 >>= 6;

307 
mfb
 >>= 1;

308 } 
x
 > 
mfb
);

309 
buff
[
UTF8BUFFSZ
 - 
n
] = 
	`ˇ°
(, (~
mfb
 << 1Ë| 
x
);

311  
n
;

312 
	}
}

316 
	#MAXNUMBER2STR
 50

	)

322 
	$luaO_to°rög
 (
lua_Sèã
 *
L
, 
StkId
 
obj
) {

323 
buff
[
MAXNUMBER2STR
];

324 
size_t
 
Àn
;

325 
	`lua_as£π
(
	`âi¢umbî
(
obj
));

326 i‡(
	`âisöãgî
(
obj
))

327 
Àn
 = 
	`lua_öãgî2°r
(
buff
, 
	`ivÆue
(
obj
));

329 
Àn
 = 
	`lua_numbî2°r
(
buff
, 
	`ÊtvÆue
(
obj
));

330 #i‡!
	`deföed
(
LUA_COMPAT_FLOATSTRING
)

331 i‡(
buff
[
	`°r•n
(buff, "-0123456789")] == '\0') {

332 
buff
[
Àn
++] = '.';

333 
buff
[
Àn
++] = '0';

337 
	`£tsvÆue2s
(
L
, 
obj
, 
	`luaS_√wl°r
(L, 
buff
, 
Àn
));

338 
	}
}

341 
	$push°r
 (
lua_Sèã
 *
L
, c⁄° *
°r
, 
size_t
 
l
) {

342 
	`£tsvÆue2s
(
L
, L->
t›
++, 
	`luaS_√wl°r
(L, 
°r
, 
l
));

343 
	}
}

348 c⁄° *
	$luaO_pushvf°rög
 (
lua_Sèã
 *
L
, c⁄° *
fmt
, 
va_li°
 
¨gp
) {

349 
n
 = 0;

351 c⁄° *
e
 = 
	`°rchr
(
fmt
, '%');

352 i‡(
e
 =
NULL
) ;

353 
	`luaD_check°ack
(
L
, 2);

354 
	`push°r
(
L
, 
fmt
, 
e
 - fmt);

355 *(
e
+1)) {

357 c⁄° *
s
 = 
	`va_¨g
(
¨gp
, *);

358 i‡(
s
 =
NULL
) s = "(null)";

359 
	`push°r
(
L
, 
s
, 
	`°æí
(s));

363 
buff
 = 
	`ˇ°
(, 
	`va_¨g
(
¨gp
, ));

364 i‡(
	`li•röt
(
	`ˇ°_uch¨
(
buff
)))

365 
	`push°r
(
L
, &
buff
, 1);

367 
	`luaO_pushf°rög
(
L
, "<\\%d>", 
	`ˇ°_uch¨
(
buff
));

371 
	`£tivÆue
(
L
->
t›
++, 
	`va_¨g
(
¨gp
, ));

372 
	`luaO_to°rög
(
L
, L->
t›
 - 1);

376 
	`£tivÆue
(
L
->
t›
++, 
	`ˇ°
(
lua_I¡egî
, 
	`va_¨g
(
¨gp
, 
l_uacI¡
)));

377 
	`luaO_to°rög
(
L
, L->
t›
 - 1);

381 
	`£tÊtvÆue
(
L
->
t›
++, 
	`ˇ°_num
(
	`va_¨g
(
¨gp
, 
l_uacNumbî
)));

382 
	`luaO_to°rög
(
L
, L->
t›
 - 1);

386 
buff
[4*(*) + 8];

387 
l
 = 
	`•rötf
(
buff
, "%p", 
	`va_¨g
(
¨gp
, *));

388 
	`push°r
(
L
, 
buff
, 
l
);

392 
buff
[
UTF8BUFFSZ
];

393 
l
 = 
	`luaO_utf8esc
(
buff
, 
	`ˇ°
(, 
	`va_¨g
(
¨gp
, )));

394 
	`push°r
(
L
, 
buff
 + 
UTF8BUFFSZ
 - 
l
,Ü);

398 
	`push°r
(
L
, "%", 1);

402 
	`luaG_ru√º‹
(
L
, "invalid option '%%%c'Åo 'lua_pushfstring'",

403 *(
e
 + 1));

406 
n
 += 2;

407 
fmt
 = 
e
+2;

409 
	`luaD_check°ack
(
L
, 1);

410 
	`push°r
(
L
, 
fmt
, 
	`°æí
(fmt));

411 i‡(
n
 > 0Ë
	`luaV_c⁄ˇt
(
L
,Ç + 1);

412  
	`svÆue
(
L
->
t›
 - 1);

413 
	}
}

416 c⁄° *
	$luaO_pushf°rög
 (
lua_Sèã
 *
L
, c⁄° *
fmt
, ...) {

417 c⁄° *
msg
;

418 
va_li°
 
¨gp
;

419 
	`va_°¨t
(
¨gp
, 
fmt
);

420 
msg
 = 
	`luaO_pushvf°rög
(
L
, 
fmt
, 
¨gp
);

421 
	`va_íd
(
¨gp
);

422  
msg
;

423 
	}
}

427 
	#LL
(
x
Ë((x)/(Ë- 1)

	)

429 
	#RETS
 "..."

	)

430 
	#PRE
 "[°rög \""

	)

431 
	#POS
 "\"]"

	)

433 
	#add°r
(
a
,
b
,
l
Ë–
	`mem˝y
◊,b,÷Ë* ()),á +÷Ë)

	)

435 
	$luaO_chunkid
 (*
out
, c⁄° *
sour˚
, 
size_t
 
bufÊí
) {

436 
size_t
 
l
 = 
	`°æí
(
sour˚
);

437 i‡(*
sour˚
 == '=') {

438 i‡(
l
 <
bufÊí
)

439 
	`mem˝y
(
out
, 
sour˚
 + 1, 
l
 * ());

441 
	`add°r
(
out
, 
sour˚
 + 1, 
bufÊí
 - 1);

442 *
out
 = '\0';

445 i‡(*
sour˚
 == '@') {

446 i‡(
l
 <
bufÊí
)

447 
	`mem˝y
(
out
, 
sour˚
 + 1, 
l
 * ());

449 
	`add°r
(
out
, 
RETS
, 
	`LL
(RETS));

450 
bufÊí
 -
	`LL
(
RETS
);

451 
	`mem˝y
(
out
, 
sour˚
 + 1 + 
l
 - 
bufÊí
, bufflen * ());

455 c⁄° *
∆
 = 
	`°rchr
(
sour˚
, '\n');

456 
	`add°r
(
out
, 
PRE
, 
	`LL
(PRE));

457 
bufÊí
 -
	`LL
(
PRE
 
RETS
 
POS
) + 1;

458 i‡(
l
 < 
bufÊí
 && 
∆
 =
NULL
) {

459 
	`add°r
(
out
, 
sour˚
, 
l
);

462 i‡(
∆
 !
NULL
Ë
l
 =Ç»- 
sour˚
;

463 i‡(
l
 > 
bufÊí
)Ü = bufflen;

464 
	`add°r
(
out
, 
sour˚
, 
l
);

465 
	`add°r
(
out
, 
RETS
, 
	`LL
(RETS));

467 
	`mem˝y
(
out
, 
POS
, (
	`LL
(POS) + 1) * ());

469 
	}
}

	@lib/archive/lua-5.3.0/src/lobject.h

8 #i‚de‡
lobje˘_h


9 
	#lobje˘_h


	)

12 
	~<°d¨g.h
>

15 
	~"Œimôs.h
"

16 
	~"lua.h
"

22 
	#LUA_TPROTO
 
LUA_NUMTAGS


	)

23 
	#LUA_TDEADKEY
 (
LUA_NUMTAGS
+1)

	)

28 
	#LUA_TOTALTAGS
 (
LUA_TPROTO
 + 2)

	)

38 
	#VARBITS
 (3 << 4)

	)

49 
	#LUA_TLCL
 (
LUA_TFUNCTION
 | (0 << 4)Ë

	)

50 
	#LUA_TLCF
 (
LUA_TFUNCTION
 | (1 << 4)Ë

	)

51 
	#LUA_TCCL
 (
LUA_TFUNCTION
 | (2 << 4)Ë

	)

55 
	#LUA_TSHRSTR
 (
LUA_TSTRING
 | (0 << 4)Ë

	)

56 
	#LUA_TLNGSTR
 (
LUA_TSTRING
 | (1 << 4)Ë

	)

60 
	#LUA_TNUMFLT
 (
LUA_TNUMBER
 | (0 << 4)Ë

	)

61 
	#LUA_TNUMINT
 (
LUA_TNUMBER
 | (1 << 4)Ë

	)

65 
	#BIT_ISCOLLECTABLE
 (1 << 6)

	)

68 
	#˘b
(
t
Ë(—Ë| 
BIT_ISCOLLECTABLE
)

	)

74 
GCObje˘
 
	tGCObje˘
;

81 
	#Comm⁄Hódî
 
GCObje˘
 *
√xt
; 
lu_byã
 
â
;Üu_byã 
m¨ked


	)

87 
	sGCObje˘
 {

88 
	mComm⁄Hódî
;

96 
VÆue
 
	tVÆue
;

106 
	#TVÆuefõlds
 
VÆue
 
vÆue_
; 
â_


	)

108 
lua_TVÆue
 
	tTVÆue
;

112 
	#NILCONSTANT
 {
NULL
}, 
LUA_TNIL


	)

115 
	#vÆ_
(
o
Ë((o)->
vÆue_
)

	)

119 
	#πty≥
(
o
Ë((o)->
â_
)

	)

122 
	#nov¨ü¡
(
x
Ë((xË& 0x0F)

	)

125 
	#ây≥
(
o
Ë(
	`πty≥
(oË& 0x3F)

	)

128 
	#ânov
(
o
Ë(
	`nov¨ü¡
(
	`πty≥
(o)))

	)

132 
	#checkèg
(
o
,
t
Ë(
	`πty≥
(oË=—))

	)

133 
	#checkty≥
(
o
,
t
Ë(
	`ânov
(oË=—))

	)

134 
	#âi¢umbî
(
o
Ë
	`checkty≥
((o), 
LUA_TNUMBER
)

	)

135 
	#âisÊﬂt
(
o
Ë
	`checkèg
((o), 
LUA_TNUMFLT
)

	)

136 
	#âisöãgî
(
o
Ë
	`checkèg
((o), 
LUA_TNUMINT
)

	)

137 
	#âi¢û
(
o
Ë
	`checkèg
((o), 
LUA_TNIL
)

	)

138 
	#âisboﬁón
(
o
Ë
	`checkèg
((o), 
LUA_TBOOLEAN
)

	)

139 
	#âi¶ightu£rd©a
(
o
Ë
	`checkèg
((o), 
LUA_TLIGHTUSERDATA
)

	)

140 
	#âis°rög
(
o
Ë
	`checkty≥
((o), 
LUA_TSTRING
)

	)

141 
	#âisshr°rög
(
o
Ë
	`checkèg
((o), 
	`˘b
(
LUA_TSHRSTR
))

	)

142 
	#âi¶ng°rög
(
o
Ë
	`checkèg
((o), 
	`˘b
(
LUA_TLNGSTR
))

	)

143 
	#âi°abÀ
(
o
Ë
	`checkèg
((o), 
	`˘b
(
LUA_TTABLE
))

	)

144 
	#âisfun˘i⁄
(
o
Ë
	`checkty≥
(o, 
LUA_TFUNCTION
)

	)

145 
	#âis˛osuª
(
o
Ë((
	`πty≥
(oË& 0x1FË=
LUA_TFUNCTION
)

	)

146 
	#âisC˛osuª
(
o
Ë
	`checkèg
((o), 
	`˘b
(
LUA_TCCL
))

	)

147 
	#âisL˛osuª
(
o
Ë
	`checkèg
((o), 
	`˘b
(
LUA_TLCL
))

	)

148 
	#âi¶cf
(
o
Ë
	`checkèg
((o), 
LUA_TLCF
)

	)

149 
	#âisfuŒu£rd©a
(
o
Ë
	`checkèg
((o), 
	`˘b
(
LUA_TUSERDATA
))

	)

150 
	#âi°hªad
(
o
Ë
	`checkèg
((o), 
	`˘b
(
LUA_TTHREAD
))

	)

151 
	#âisdódkey
(
o
Ë
	`checkèg
((o), 
LUA_TDEADKEY
)

	)

155 
	#ivÆue
(
o
Ë
	`check_exp
(
	`âisöãgî
(o), 
	`vÆ_
(o).
i
)

	)

156 
	#ÊtvÆue
(
o
Ë
	`check_exp
(
	`âisÊﬂt
(o), 
	`vÆ_
(o).
n
)

	)

157 
	#nvÆue
(
o
Ë
	`check_exp
(
	`âi¢umbî
(o), \

158 (
	`âisöãgî
(
o
Ë? 
	`ˇ°_num
(
	`ivÆue
(o)Ë: 
	`ÊtvÆue
(o)))

	)

159 
	#gcvÆue
(
o
Ë
	`check_exp
(
	`iscﬁÀ˘abÀ
(o), 
	`vÆ_
(o).
gc
)

	)

160 
	#pvÆue
(
o
Ë
	`check_exp
(
	`âi¶ightu£rd©a
(o), 
	`vÆ_
(o).
p
)

	)

161 
	#tsvÆue
(
o
Ë
	`check_exp
(
	`âis°rög
(o), 
	`gco2ts
(
	`vÆ_
(o).
gc
))

	)

162 
	#uvÆue
(
o
Ë
	`check_exp
(
	`âisfuŒu£rd©a
(o), 
	`gco2u
(
	`vÆ_
(o).
gc
))

	)

163 
	#˛vÆue
(
o
Ë
	`check_exp
(
	`âis˛osuª
(o), 
	`gco2˛
(
	`vÆ_
(o).
gc
))

	)

164 
	#˛LvÆue
(
o
Ë
	`check_exp
(
	`âisL˛osuª
(o), 
	`gco2l˛
(
	`vÆ_
(o).
gc
))

	)

165 
	#˛CvÆue
(
o
Ë
	`check_exp
(
	`âisC˛osuª
(o), 
	`gco2c˛
(
	`vÆ_
(o).
gc
))

	)

166 
	#fvÆue
(
o
Ë
	`check_exp
(
	`âi¶cf
(o), 
	`vÆ_
(o).
f
)

	)

167 
	#hvÆue
(
o
Ë
	`check_exp
(
	`âi°abÀ
(o), 
	`gco2t
(
	`vÆ_
(o).
gc
))

	)

168 
	#bvÆue
(
o
Ë
	`check_exp
(
	`âisboﬁón
(o), 
	`vÆ_
(o).
b
)

	)

169 
	#thvÆue
(
o
Ë
	`check_exp
(
	`âi°hªad
(o), 
	`gco2th
(
	`vÆ_
(o).
gc
))

	)

171 
	#dódvÆue
(
o
Ë
	`check_exp
(
	`âisdódkey
(o), 
	`ˇ°
(*, 
	`vÆ_
(o).
gc
))

	)

173 
	#l_isÁl£
(
o
Ë(
	`âi¢û
(oË|| (
	`âisboﬁón
(oË&& 
	`bvÆue
(oË=0))

	)

176 
	#iscﬁÀ˘abÀ
(
o
Ë(
	`πty≥
(oË& 
BIT_ISCOLLECTABLE
)

	)

180 
	#righât
(
obj
Ë(
	`ây≥
(objË=
	`gcvÆue
(obj)->
â
)

	)

182 
	#checklivíess
(
g
,
obj
) \

183 
	`lua_l⁄gas£π
(!
	`iscﬁÀ˘abÀ
(
obj
) || \

184 (
	`righât
(
obj
Ë&& !
	`isdód
(
g
,
	`gcvÆue
(obj))))

	)

188 
	#£ât_
(
o
,
t
Ë((o)->
â_
=—))

	)

190 
	#£tÊtvÆue
(
obj
,
x
) \

191 { 
TVÆue
 *
io
=(
obj
); 
	`vÆ_
(io).
n
=(
x
); 
	`£ât_
(io, 
LUA_TNUMFLT
); }

	)

193 
	#£tivÆue
(
obj
,
x
) \

194 { 
TVÆue
 *
io
=(
obj
); 
	`vÆ_
(io).
i
=(
x
); 
	`£ât_
(io, 
LUA_TNUMINT
); }

	)

196 
	#£äûvÆue
(
obj
Ë
	`£ât_
(obj, 
LUA_TNIL
)

	)

198 
	#£tfvÆue
(
obj
,
x
) \

199 { 
TVÆue
 *
io
=(
obj
); 
	`vÆ_
(io).
f
=(
x
); 
	`£ât_
(io, 
LUA_TLCF
); }

	)

201 
	#£çvÆue
(
obj
,
x
) \

202 { 
TVÆue
 *
io
=(
obj
); 
	`vÆ_
(io).
p
=(
x
); 
	`£ât_
(io, 
LUA_TLIGHTUSERDATA
); }

	)

204 
	#£tbvÆue
(
obj
,
x
) \

205 { 
TVÆue
 *
io
=(
obj
); 
	`vÆ_
(io).
b
=(
x
); 
	`£ât_
(io, 
LUA_TBOOLEAN
); }

	)

207 
	#£tgcovÆue
(
L
,
obj
,
x
) \

208 { 
TVÆue
 *
io
 = (
obj
); 
GCObje˘
 *
i_g
=(
x
); \

209 
	`vÆ_
(
io
).
gc
 = 
i_g
; 
	`£ât_
(io, 
	`˘b
(i_g->
â
)); }

	)

211 
	#£tsvÆue
(
L
,
obj
,
x
) \

212 { 
TVÆue
 *
io
 = (
obj
); 
TSåög
 *
x_
 = (
x
); \

213 
	`vÆ_
(
io
).
gc
 = 
	`obj2gco
(
x_
); 
	`£ât_
(io, 
	`˘b
(x_->
â
)); \

214 
	`checklivíess
(
	`G
(
L
),
io
); }

	)

216 
	#£tuvÆue
(
L
,
obj
,
x
) \

217 { 
TVÆue
 *
io
 = (
obj
); 
Ud©a
 *
x_
 = (
x
); \

218 
	`vÆ_
(
io
).
gc
 = 
	`obj2gco
(
x_
); 
	`£ât_
(io, 
	`˘b
(
LUA_TUSERDATA
)); \

219 
	`checklivíess
(
	`G
(
L
),
io
); }

	)

221 
	#£âhvÆue
(
L
,
obj
,
x
) \

222 { 
TVÆue
 *
io
 = (
obj
); 
lua_Sèã
 *
x_
 = (
x
); \

223 
	`vÆ_
(
io
).
gc
 = 
	`obj2gco
(
x_
); 
	`£ât_
(io, 
	`˘b
(
LUA_TTHREAD
)); \

224 
	`checklivíess
(
	`G
(
L
),
io
); }

	)

226 
	#£t˛LvÆue
(
L
,
obj
,
x
) \

227 { 
TVÆue
 *
io
 = (
obj
); 
LClosuª
 *
x_
 = (
x
); \

228 
	`vÆ_
(
io
).
gc
 = 
	`obj2gco
(
x_
); 
	`£ât_
(io, 
	`˘b
(
LUA_TLCL
)); \

229 
	`checklivíess
(
	`G
(
L
),
io
); }

	)

231 
	#£t˛CvÆue
(
L
,
obj
,
x
) \

232 { 
TVÆue
 *
io
 = (
obj
); 
CClosuª
 *
x_
 = (
x
); \

233 
	`vÆ_
(
io
).
gc
 = 
	`obj2gco
(
x_
); 
	`£ât_
(io, 
	`˘b
(
LUA_TCCL
)); \

234 
	`checklivíess
(
	`G
(
L
),
io
); }

	)

236 
	#£thvÆue
(
L
,
obj
,
x
) \

237 { 
TVÆue
 *
io
 = (
obj
); 
TabÀ
 *
x_
 = (
x
); \

238 
	`vÆ_
(
io
).
gc
 = 
	`obj2gco
(
x_
); 
	`£ât_
(io, 
	`˘b
(
LUA_TTABLE
)); \

239 
	`checklivíess
(
	`G
(
L
),
io
); }

	)

241 
	#£tdódvÆue
(
obj
Ë
	`£ât_
(obj, 
LUA_TDEADKEY
)

	)

245 
	#£tobj
(
L
,
obj1
,
obj2
) \

246 { 
TVÆue
 *
io1
=(
obj1
); *io1 = *(
obj2
); \

247 ()
L
; 
	`checklivíess
(
	`G
(L),
io1
); }

	)

255 
	#£tobjs2s
 
£tobj


	)

257 
	#£tobj2s
 
£tobj


	)

258 
	#£tsvÆue2s
 
£tsvÆue


	)

259 
	#£thvÆue2s
 
£thvÆue


	)

260 
	#£çtvÆue2s
 
£çtvÆue


	)

262 
	#£tobjt2t
 
£tobj


	)

264 
	#£tobj2t
 
£tobj


	)

266 
	#£tobj2n
 
£tobj


	)

267 
	#£tsvÆue2n
 
£tsvÆue


	)

279 
	uVÆue
 {

280 
GCObje˘
 *
	mgc
;

281 *
	mp
;

282 
	mb
;

283 
lua_CFun˘i⁄
 
	mf
;

284 
lua_I¡egî
 
	mi
;

285 
lua_Numbî
 
	mn
;

289 
	slua_TVÆue
 {

290 
	mTVÆuefõlds
;

294 
TVÆue
 *
	tStkId
;

303 
	sTSåög
 {

304 
	mComm⁄Hódî
;

305 
lu_byã
 
	mexåa
;

306 
	mhash
;

307 
size_t
 
	mÀn
;

308 
TSåög
 *
	mh√xt
;

309 } 
	tTSåög
;

315 
	uUTSåög
 {

316 
L_UmaxÆign
 
	mdummy
;

317 
TSåög
 
	mtsv
;

318 } 
	tUTSåög
;

325 
	#gëaddr°r
(
ts
Ë(
	`ˇ°
(*, (ts)Ë+ (
UTSåög
))

	)

326 
	#gë°r
(
ts
) \

327 
	`check_exp
(((
ts
)->
exåa
), 
	`ˇ°
(c⁄° *, 
	`gëaddr°r
—s)))

	)

330 
	#svÆue
(
o
Ë
	`gë°r
(
	`tsvÆue
(o))

	)

337 
	sUd©a
 {

338 
	mComm⁄Hódî
;

339 
lu_byã
 
	mâuv_
;

340 
TabÀ
 *
	mmë©abÀ
;

341 
size_t
 
	mÀn
;

342 
VÆue
 
	mu£r_
;

343 } 
	tUd©a
;

349 
	uUUd©a
 {

350 
L_UmaxÆign
 
	mdummy
;

351 
Ud©a
 
	muv
;

352 } 
	tUUd©a
;

359 
	#gëud©amem
(
u
) \

360 
	`check_exp
(((
u
)->
âuv_
), (
	`ˇ°
(*, (u)Ë+ (
UUd©a
)))

	)

362 
	#£tu£rvÆue
(
L
,
u
,
o
) \

363 { c⁄° 
TVÆue
 *
io
=(
o
); 
Ud©a
 *
iu
 = (
u
); \

364 
iu
->
u£r_
 = 
io
->
vÆue_
; iu->
âuv_
 = io->
â_
; \

365 
	`checklivíess
(
	`G
(
L
),
io
); }

	)

368 
	#gëu£rvÆue
(
L
,
u
,
o
) \

369 { 
TVÆue
 *
io
=(
o
); c⁄° 
Ud©a
 *
iu
 = (
u
); \

370 
io
->
vÆue_
 = 
iu
->
u£r_
; io->
â_
 = iu->
âuv_
; \

371 
	`checklivíess
(
	`G
(
L
),
io
); }

	)

377 
	sUpvÆdesc
 {

378 
TSåög
 *
	m«me
;

379 
lu_byã
 
	mö°ack
;

380 
lu_byã
 
	midx
;

381 } 
	tUpvÆdesc
;

388 
	sLocV¨
 {

389 
TSåög
 *
	mv¨«me
;

390 
	m°¨çc
;

391 
	mídpc
;

392 } 
	tLocV¨
;

398 
	sPrŸo
 {

399 
	mComm⁄Hódî
;

400 
lu_byã
 
	mnum∑øms
;

401 
lu_byã
 
	mis_v¨¨g
;

402 
lu_byã
 
	mmax°acksize
;

403 
	msizeupvÆues
;

404 
	msizek
;

405 
	msizecode
;

406 
	msizñöeöfo
;

407 
	msizï
;

408 
	msizñocv¨s
;

409 
	mlöedeföed
;

410 
	mœ°löedeföed
;

411 
TVÆue
 *
	mk
;

412 
In°ru˘i⁄
 *
	mcode
;

413 
PrŸo
 **
	mp
;

414 *
	mlöeöfo
;

415 
LocV¨
 *
	mlocv¨s
;

416 
UpvÆdesc
 *
	mupvÆues
;

417 
LClosuª
 *
	mˇche
;

418 
TSåög
 *
	msour˚
;

419 
GCObje˘
 *
	mg˛i°
;

420 } 
	tPrŸo
;

427 
UpVÆ
 
	tUpVÆ
;

434 
	#ClosuªHódî
 \

435 
Comm⁄Hódî
; 
lu_byã
 
nupvÆues
; 
GCObje˘
 *
g˛i°


	)

437 
	sCClosuª
 {

438 
	mClosuªHódî
;

439 
lua_CFun˘i⁄
 
	mf
;

440 
TVÆue
 
	mupvÆue
[1];

441 } 
	tCClosuª
;

444 
	sLClosuª
 {

445 
	mClosuªHódî
;

446 
PrŸo
 *
	mp
;

447 
UpVÆ
 *
	mupvÆs
[1];

448 } 
	tLClosuª
;

451 
	uClosuª
 {

452 
CClosuª
 
	mc
;

453 
LClosuª
 
	ml
;

454 } 
	tClosuª
;

457 
	#isLfun˘i⁄
(
o
Ë
	`âisL˛osuª
(o)

	)

459 
	#gë¥Ÿo
(
o
Ë(
	`˛LvÆue
(o)->
p
)

	)

466 
	uTKey
 {

468 
	mTVÆuefõlds
;

469 
	m√xt
;

470 } 
	mnk
;

471 
TVÆue
 
	mtvk
;

472 } 
	tTKey
;

476 
	#£äodekey
(
L
,
key
,
obj
) \

477 { 
TKey
 *
k_
=(
key
); c⁄° 
TVÆue
 *
io_
=(
obj
); \

478 
k_
->
nk
.
vÆue_
 = 
io_
->vÆue_; k_->nk.
â_
 = io_->tt_; \

479 ()
L
; 
	`checklivíess
(
	`G
(L),
io_
); }

	)

482 
	sNode
 {

483 
TVÆue
 
	mi_vÆ
;

484 
TKey
 
	mi_key
;

485 } 
	tNode
;

488 
	sTabÀ
 {

489 
	mComm⁄Hódî
;

490 
lu_byã
 
	mÊags
;

491 
lu_byã
 
	mlsizíode
;

492 
	msizóºay
;

493 
TVÆue
 *
	m¨øy
;

494 
Node
 *
	mnode
;

495 
Node
 *
	mœ°‰ì
;

496 
TabÀ
 *
	mmë©abÀ
;

497 
GCObje˘
 *
	mg˛i°
;

498 } 
	tTabÀ
;

505 
	#lmod
(
s
,
size
) \

506 (
	`check_exp
((
size
&(size-1))==0, (
	`ˇ°
(, (
s
Ë& ((size)-1)))))

	)

509 
	#twŸo
(
x
Ë(1<<(x))

	)

510 
	#sizíode
(
t
Ë(
	`twŸo
(—)->
lsizíode
))

	)

516 
	#luaO_nûobje˘
 (&
luaO_nûobje˘_
)

	)

519 
LUAI_DDEC
 c⁄° 
TVÆue
 
	gluaO_nûobje˘_
;

522 
	#UTF8BUFFSZ
 8

	)

524 
LUAI_FUNC
 
luaO_öt2fb
 (
x
);

525 
LUAI_FUNC
 
luaO_fb2öt
 (
x
);

526 
LUAI_FUNC
 
luaO_utf8esc
 (*
buff
, 
x
);

527 
LUAI_FUNC
 
luaO_˚ûlog2
 (
x
);

528 
LUAI_FUNC
 
luaO_¨ôh
 (
lua_Sèã
 *
L
, 
›
, c⁄° 
TVÆue
 *
p1
,

529 c⁄° 
TVÆue
 *
p2
, TVÆuê*
ªs
);

530 
LUAI_FUNC
 
size_t
 
luaO_°r2num
 (c⁄° *
s
, 
TVÆue
 *
o
);

531 
LUAI_FUNC
 
luaO_hexavÆue
 (
c
);

532 
LUAI_FUNC
 
luaO_to°rög
 (
lua_Sèã
 *
L
, 
StkId
 
obj
);

533 
LUAI_FUNC
 c⁄° *
luaO_pushvf°rög
 (
lua_Sèã
 *
L
, c⁄° *
fmt
,

534 
va_li°
 
¨gp
);

535 
LUAI_FUNC
 c⁄° *
luaO_pushf°rög
 (
lua_Sèã
 *
L
, c⁄° *
fmt
, ...);

536 
LUAI_FUNC
 
luaO_chunkid
 (*
out
, c⁄° *
sour˚
, 
size_t
 
Àn
);

	@lib/archive/lua-5.3.0/src/lopcodes.c

7 
	#l›codes_c


	)

8 
	#LUA_CORE


	)

10 
	~"Õªfix.h
"

13 
	~<°ddef.h
>

15 
	~"l›codes.h
"

20 
LUAI_DDEF
 c⁄° *c⁄° 
	gluaP_›«mes
[
NUM_OPCODES
+1] = {

68 
NULL


72 
	#›mode
(
t
,
a
,
b
,
c
,
m
Ë((—)<<7Ë| (◊)<<6Ë| ((b)<<4Ë| ((c)<<2Ë| (m))

	)

74 
LUAI_DDEF
 c⁄° 
lu_byã
 
	gluaP_›modes
[
NUM_OPCODES
] = {

76 
›mode
(0, 1, 
OpArgR
, 
OpArgN
, 
iABC
)

77 ,
›mode
(0, 1, 
OpArgK
, 
OpArgN
, 
iABx
)

78 ,
›mode
(0, 1, 
OpArgN
, OpArgN, 
iABx
)

79 ,
›mode
(0, 1, 
OpArgU
, OpArgU, 
iABC
)

80 ,
›mode
(0, 1, 
OpArgU
, 
OpArgN
, 
iABC
)

81 ,
›mode
(0, 1, 
OpArgU
, 
OpArgN
, 
iABC
)

82 ,
›mode
(0, 1, 
OpArgU
, 
OpArgK
, 
iABC
)

83 ,
›mode
(0, 1, 
OpArgR
, 
OpArgK
, 
iABC
)

84 ,
›mode
(0, 0, 
OpArgK
, OpArgK, 
iABC
)

85 ,
›mode
(0, 0, 
OpArgU
, 
OpArgN
, 
iABC
)

86 ,
›mode
(0, 0, 
OpArgK
, OpArgK, 
iABC
)

87 ,
›mode
(0, 1, 
OpArgU
, OpArgU, 
iABC
)

88 ,
›mode
(0, 1, 
OpArgR
, 
OpArgK
, 
iABC
)

89 ,
›mode
(0, 1, 
OpArgK
, OpArgK, 
iABC
)

90 ,
›mode
(0, 1, 
OpArgK
, OpArgK, 
iABC
)

91 ,
›mode
(0, 1, 
OpArgK
, OpArgK, 
iABC
)

92 ,
›mode
(0, 1, 
OpArgK
, OpArgK, 
iABC
)

93 ,
›mode
(0, 1, 
OpArgK
, OpArgK, 
iABC
)

94 ,
›mode
(0, 1, 
OpArgK
, OpArgK, 
iABC
)

95 ,
›mode
(0, 1, 
OpArgK
, OpArgK, 
iABC
)

96 ,
›mode
(0, 1, 
OpArgK
, OpArgK, 
iABC
)

97 ,
›mode
(0, 1, 
OpArgK
, OpArgK, 
iABC
)

98 ,
›mode
(0, 1, 
OpArgK
, OpArgK, 
iABC
)

99 ,
›mode
(0, 1, 
OpArgK
, OpArgK, 
iABC
)

100 ,
›mode
(0, 1, 
OpArgK
, OpArgK, 
iABC
)

101 ,
›mode
(0, 1, 
OpArgR
, 
OpArgN
, 
iABC
)

102 ,
›mode
(0, 1, 
OpArgR
, 
OpArgN
, 
iABC
)

103 ,
›mode
(0, 1, 
OpArgR
, 
OpArgN
, 
iABC
)

104 ,
›mode
(0, 1, 
OpArgR
, 
OpArgN
, 
iABC
)

105 ,
›mode
(0, 1, 
OpArgR
, OpArgR, 
iABC
)

106 ,
›mode
(0, 0, 
OpArgR
, 
OpArgN
, 
iAsBx
)

107 ,
›mode
(1, 0, 
OpArgK
, OpArgK, 
iABC
)

108 ,
›mode
(1, 0, 
OpArgK
, OpArgK, 
iABC
)

109 ,
›mode
(1, 0, 
OpArgK
, OpArgK, 
iABC
)

110 ,
›mode
(1, 0, 
OpArgN
, 
OpArgU
, 
iABC
)

111 ,
›mode
(1, 1, 
OpArgR
, 
OpArgU
, 
iABC
)

112 ,
›mode
(0, 1, 
OpArgU
, OpArgU, 
iABC
)

113 ,
›mode
(0, 1, 
OpArgU
, OpArgU, 
iABC
)

114 ,
›mode
(0, 0, 
OpArgU
, 
OpArgN
, 
iABC
)

115 ,
›mode
(0, 1, 
OpArgR
, 
OpArgN
, 
iAsBx
)

116 ,
›mode
(0, 1, 
OpArgR
, 
OpArgN
, 
iAsBx
)

117 ,
›mode
(0, 0, 
OpArgN
, 
OpArgU
, 
iABC
)

118 ,
›mode
(0, 1, 
OpArgR
, 
OpArgN
, 
iAsBx
)

119 ,
›mode
(0, 0, 
OpArgU
, OpArgU, 
iABC
)

120 ,
›mode
(0, 1, 
OpArgU
, 
OpArgN
, 
iABx
)

121 ,
›mode
(0, 1, 
OpArgU
, 
OpArgN
, 
iABC
)

122 ,
›mode
(0, 0, 
OpArgU
, OpArgU, 
iAx
)

	@lib/archive/lua-5.3.0/src/lopcodes.h

7 #i‚de‡
l›codes_h


8 
	#l›codes_h


	)

10 
	~"Œimôs.h
"

32 
	eOpMode
 {
	miABC
, 
	miABx
, 
	miAsBx
, 
	miAx
};

38 
	#SIZE_C
 9

	)

39 
	#SIZE_B
 9

	)

40 
	#SIZE_Bx
 (
SIZE_C
 + 
SIZE_B
)

	)

41 
	#SIZE_A
 8

	)

42 
	#SIZE_Ax
 (
SIZE_C
 + 
SIZE_B
 + 
SIZE_A
)

	)

44 
	#SIZE_OP
 6

	)

46 
	#POS_OP
 0

	)

47 
	#POS_A
 (
POS_OP
 + 
SIZE_OP
)

	)

48 
	#POS_C
 (
POS_A
 + 
SIZE_A
)

	)

49 
	#POS_B
 (
POS_C
 + 
SIZE_C
)

	)

50 
	#POS_Bx
 
POS_C


	)

51 
	#POS_Ax
 
POS_A


	)

59 #i‡
SIZE_Bx
 < 
LUAI_BITSINT
-1

60 
	#MAXARG_Bx
 ((1<<
SIZE_Bx
)-1)

	)

61 
	#MAXARG_sBx
 (
MAXARG_Bx
>>1Ë

	)

63 
	#MAXARG_Bx
 
MAX_INT


	)

64 
	#MAXARG_sBx
 
MAX_INT


	)

67 #i‡
SIZE_Ax
 < 
LUAI_BITSINT
-1

68 
	#MAXARG_Ax
 ((1<<
SIZE_Ax
)-1)

	)

70 
	#MAXARG_Ax
 
MAX_INT


	)

74 
	#MAXARG_A
 ((1<<
SIZE_A
)-1)

	)

75 
	#MAXARG_B
 ((1<<
SIZE_B
)-1)

	)

76 
	#MAXARG_C
 ((1<<
SIZE_C
)-1)

	)

80 
	#MASK1
(
n
,
p
Ë((~((~(
In°ru˘i⁄
)0)<<“)))<<’))

	)

83 
	#MASK0
(
n
,
p
Ë(~
	`MASK1
“,p))

	)

89 
	#GET_OPCODE
(
i
Ë(
	`ˇ°
(
OpCode
, ((i)>>
POS_OP
Ë& 
	`MASK1
(
SIZE_OP
,0)))

	)

90 
	#SET_OPCODE
(
i
,
o
Ë((iË(((i)&
	`MASK0
(
SIZE_OP
,
POS_OP
)) | \

91 ((
	`ˇ°
(
In°ru˘i⁄
, 
o
)<<
POS_OP
)&
	`MASK1
(
SIZE_OP
,POS_OP))))

	)

93 
	#gë¨g
(
i
,
pos
,
size
Ë(
	`ˇ°
(, ((i)>>posË& 
	`MASK1
(size,0)))

	)

94 
	#£èrg
(
i
,
v
,
pos
,
size
Ë((iË(((i)&
	`MASK0
(size,pos)) | \

95 ((
	`ˇ°
(
In°ru˘i⁄
, 
v
)<<
pos
)&
	`MASK1
(
size
,pos))))

	)

97 
	#GETARG_A
(
i
Ë
	`gë¨g
(i, 
POS_A
, 
SIZE_A
)

	)

98 
	#SETARG_A
(
i
,
v
Ë
	`£èrg
(i, v, 
POS_A
, 
SIZE_A
)

	)

100 
	#GETARG_B
(
i
Ë
	`gë¨g
(i, 
POS_B
, 
SIZE_B
)

	)

101 
	#SETARG_B
(
i
,
v
Ë
	`£èrg
(i, v, 
POS_B
, 
SIZE_B
)

	)

103 
	#GETARG_C
(
i
Ë
	`gë¨g
(i, 
POS_C
, 
SIZE_C
)

	)

104 
	#SETARG_C
(
i
,
v
Ë
	`£èrg
(i, v, 
POS_C
, 
SIZE_C
)

	)

106 
	#GETARG_Bx
(
i
Ë
	`gë¨g
(i, 
POS_Bx
, 
SIZE_Bx
)

	)

107 
	#SETARG_Bx
(
i
,
v
Ë
	`£èrg
(i, v, 
POS_Bx
, 
SIZE_Bx
)

	)

109 
	#GETARG_Ax
(
i
Ë
	`gë¨g
(i, 
POS_Ax
, 
SIZE_Ax
)

	)

110 
	#SETARG_Ax
(
i
,
v
Ë
	`£èrg
(i, v, 
POS_Ax
, 
SIZE_Ax
)

	)

112 
	#GETARG_sBx
(
i
Ë(
	`GETARG_Bx
(i)-
MAXARG_sBx
)

	)

113 
	#SETARG_sBx
(
i
,
b
Ë
	`SETARG_Bx
((i),
	`ˇ°
(, (b)+
MAXARG_sBx
))

	)

116 
	#CREATE_ABC
(
o
,
a
,
b
,
c
Ë((
	`ˇ°
(
In°ru˘i⁄
, o)<<
POS_OP
) \

117 | (
	`ˇ°
(
In°ru˘i⁄
, 
a
)<<
POS_A
) \

118 | (
	`ˇ°
(
In°ru˘i⁄
, 
b
)<<
POS_B
) \

119 | (
	`ˇ°
(
In°ru˘i⁄
, 
c
)<<
POS_C
))

	)

121 
	#CREATE_ABx
(
o
,
a
,
bc
Ë((
	`ˇ°
(
In°ru˘i⁄
, o)<<
POS_OP
) \

122 | (
	`ˇ°
(
In°ru˘i⁄
, 
a
)<<
POS_A
) \

123 | (
	`ˇ°
(
In°ru˘i⁄
, 
bc
)<<
POS_Bx
))

	)

125 
	#CREATE_Ax
(
o
,
a
Ë((
	`ˇ°
(
In°ru˘i⁄
, o)<<
POS_OP
) \

126 | (
	`ˇ°
(
In°ru˘i⁄
, 
a
)<<
POS_Ax
))

	)

134 
	#BITRK
 (1 << (
SIZE_B
 - 1))

	)

137 
	#ISK
(
x
Ë((xË& 
BITRK
)

	)

140 
	#INDEXK
(
r
Ë(()‘Ë& ~
BITRK
)

	)

142 
	#MAXINDEXRK
 (
BITRK
 - 1)

	)

145 
	#RKASK
(
x
Ë((xË| 
BITRK
)

	)

151 
	#NO_REG
 
MAXARG_A


	)

169 
	mOP_MOVE
,

170 
	mOP_LOADK
,

171 
	mOP_LOADKX
,

172 
	mOP_LOADBOOL
,

173 
	mOP_LOADNIL
,

174 
	mOP_GETUPVAL
,

176 
	mOP_GETTABUP
,

177 
	mOP_GETTABLE
,

179 
	mOP_SETTABUP
,

180 
	mOP_SETUPVAL
,

181 
	mOP_SETTABLE
,

183 
	mOP_NEWTABLE
,

185 
	mOP_SELF
,

187 
	mOP_ADD
,

188 
	mOP_SUB
,

189 
	mOP_MUL
,

190 
	mOP_MOD
,

191 
	mOP_POW
,

192 
	mOP_DIV
,

193 
	mOP_IDIV
,

194 
	mOP_BAND
,

195 
	mOP_BOR
,

196 
	mOP_BXOR
,

197 
	mOP_SHL
,

198 
	mOP_SHR
,

199 
	mOP_UNM
,

200 
	mOP_BNOT
,

201 
	mOP_NOT
,

202 
	mOP_LEN
,

204 
	mOP_CONCAT
,

206 
	mOP_JMP
,

207 
	mOP_EQ
,

208 
	mOP_LT
,

209 
	mOP_LE
,

211 
	mOP_TEST
,

212 
	mOP_TESTSET
,

214 
	mOP_CALL
,

215 
	mOP_TAILCALL
,

216 
	mOP_RETURN
,

218 
	mOP_FORLOOP
,

220 
	mOP_FORPREP
,

222 
	mOP_TFORCALL
,

223 
	mOP_TFORLOOP
,

225 
	mOP_SETLIST
,

227 
	mOP_CLOSURE
,

229 
	mOP_VARARG
,

231 
	mOP_EXTRAARG


232 } 
	tOpCode
;

235 
	#NUM_OPCODES
 (
	`ˇ°
(, 
OP_EXTRAARG
Ë+ 1)

	)

272 
	eOpArgMask
 {

273 
	mOpArgN
,

274 
	mOpArgU
,

275 
	mOpArgR
,

276 
	mOpArgK


279 
LUAI_DDEC
 c⁄° 
lu_byã
 
	gluaP_›modes
[
NUM_OPCODES
];

281 
	#gëOpMode
(
m
Ë(
	`ˇ°
(
OpMode
, 
luaP_›modes
[m] & 3))

	)

282 
	#gëBMode
(
m
Ë(
	`ˇ°
(
OpArgMask
, (
luaP_›modes
[m] >> 4Ë& 3))

	)

283 
	#gëCMode
(
m
Ë(
	`ˇ°
(
OpArgMask
, (
luaP_›modes
[m] >> 2Ë& 3))

	)

284 
	#ã°AMode
(
m
Ë(
luaP_›modes
[m] & (1 << 6))

	)

285 
	#ã°TMode
(
m
Ë(
luaP_›modes
[m] & (1 << 7))

	)

288 
LUAI_DDEC
 c⁄° *c⁄° 
	gluaP_›«mes
[
NUM_OPCODES
+1];

292 
	#LFIELDS_PER_FLUSH
 50

	)

	@lib/archive/lua-5.3.0/src/loslib.c

7 
	#lo¶ib_c


	)

8 
	#LUA_LIB


	)

10 
	~"Õªfix.h
"

13 
	~<î∫o.h
>

14 
	~<loˇÀ.h
>

15 
	~<°dlib.h
>

16 
	~<°rög.h
>

17 
	~<time.h
>

19 
	~"lua.h
"

21 
	~"œuxlib.h
"

22 
	~"luÆib.h
"

25 #i‡!
deföed
(
LUA_STRFTIMEOPTIONS
)

30 #i‡
deföed
(
LUA_USE_C89
)

31 
	#LUA_STRFTIMEOPTIONS
 { "aAbBcdHIjmMpSUwWxXyYz%", "" }

	)

33 
	#LUA_STRFTIMEOPTIONS
 \

36 "O", "deHImMSuUVwWy" }

	)

43 #i‡!
deföed
(
l_time_t
)

47 
	#l_timë
 
lua_I¡egî


	)

48 
	#l_pushtime
(
L
,
t
Ë
	`lua_pushöãgî
(L,(
lua_I¡egî
)—))

	)

49 
	#l_checktime
(
L
,
a
Ë((
time_t
)
	`luaL_checköãgî
(L,a))

	)

55 #i‡!
deföed
(
lua_tm≤am
)

61 #i‡
deföed
(
LUA_USE_POSIX
)

63 
	~<uni°d.h
>

65 
	#LUA_TMPNAMBUFSIZE
 32

	)

67 #i‡!
deföed
(
LUA_TMPNAMTEMPLATE
)

68 
	#LUA_TMPNAMTEMPLATE
 "/tmp/lua_XXXXXX"

	)

71 
	#lua_tm≤am
(
b
,
e
) { \

72 
	`°r˝y
(
b
, 
LUA_TMPNAMTEMPLATE
); \

73 
e
 = 
	`mk°emp
(
b
); \

74 i‡(
e
 !-1Ë
	`˛o£
(e); \

75 
e
 = (ê=-1); }

	)

80 
	#LUA_TMPNAMBUFSIZE
 
L_tm≤am


	)

81 
	#lua_tm≤am
(
b
,
e
Ë{É = (
	`tm≤am
(bË=
NULL
); }

	)

89 #i‡!
deföed
(
l_gmtime
)

95 #i‡
deföed
(
LUA_USE_POSIX
)

97 
	#l_gmtime
(
t
,
r
Ë
	`gmtime_r
—,r)

	)

98 
	#l_loˇ…ime
(
t
,
r
Ë
	`loˇ…ime_r
—,r)

	)

103 
	#l_gmtime
(
t
,
r
Ë(()‘)->
tm_£c
, 
	`gmtime
—))

	)

104 
	#l_loˇ…ime
(
t
,
r
Ë(()‘)->
tm_£c
, 
	`loˇ…ime
—))

	)

112 
	$os_execuã
 (
lua_Sèã
 *
L
) {

113 c⁄° *
cmd
 = 
	`luaL_›t°rög
(
L
, 1, 
NULL
);

114 
°©
 = 
	`sy°em
(
cmd
);

115 i‡(
cmd
 !
NULL
)

116  
	`luaL_exe¸esu…
(
L
, 
°©
);

118 
	`lua_pushboﬁón
(
L
, 
°©
);

121 
	}
}

124 
	$os_ªmove
 (
lua_Sèã
 *
L
) {

125 c⁄° *
fûíame
 = 
	`luaL_check°rög
(
L
, 1);

126  
	`luaL_fûîesu…
(
L
, 
	`ªmove
(
fûíame
) == 0, filename);

127 
	}
}

130 
	$os_ª«me
 (
lua_Sèã
 *
L
) {

131 c⁄° *
‰om«me
 = 
	`luaL_check°rög
(
L
, 1);

132 c⁄° *
t⁄ame
 = 
	`luaL_check°rög
(
L
, 2);

133  
	`luaL_fûîesu…
(
L
, 
	`ª«me
(
‰om«me
, 
t⁄ame
Ë=0, 
NULL
);

134 
	}
}

137 
	$os_tm≤ame
 (
lua_Sèã
 *
L
) {

138 
buff
[
LUA_TMPNAMBUFSIZE
];

139 
îr
;

140 
	`lua_tm≤am
(
buff
, 
îr
);

141 i‡(
îr
)

142  
	`luaL_îr‹
(
L
, "unableÅo generateá unique filename");

143 
	`lua_push°rög
(
L
, 
buff
);

145 
	}
}

148 
	$os_gëív
 (
lua_Sèã
 *
L
) {

149 
	`lua_push°rög
(
L
, 
	`gëív
(
	`luaL_check°rög
(L, 1)));

151 
	}
}

154 
	$os_˛ock
 (
lua_Sèã
 *
L
) {

155 
	`lua_pushnumbî
(
L
, ((
lua_Numbî
)
	`˛ock
())/÷ua_Numbî)
CLOCKS_PER_SEC
);

157 
	}
}

168 
	$£tfõld
 (
lua_Sèã
 *
L
, c⁄° *
key
, 
vÆue
) {

169 
	`lua_pushöãgî
(
L
, 
vÆue
);

170 
	`lua_£tfõld
(
L
, -2, 
key
);

171 
	}
}

173 
	$£tboﬁfõld
 (
lua_Sèã
 *
L
, c⁄° *
key
, 
vÆue
) {

174 i‡(
vÆue
 < 0)

176 
	`lua_pushboﬁón
(
L
, 
vÆue
);

177 
	`lua_£tfõld
(
L
, -2, 
key
);

178 
	}
}

180 
	$gëboﬁfõld
 (
lua_Sèã
 *
L
, c⁄° *
key
) {

181 
ªs
;

182 
ªs
 = (
	`lua_gëfõld
(
L
, -1, 
key
Ë=
LUA_TNIL
Ë? -1 : 
	`lua_toboﬁón
(L, -1);

183 
	`lua_p›
(
L
, 1);

184  
ªs
;

185 
	}
}

188 
	$gëfõld
 (
lua_Sèã
 *
L
, c⁄° *
key
, 
d
) {

189 
ªs
, 
i¢um
;

190 
	`lua_gëfõld
(
L
, -1, 
key
);

191 
ªs
 = ()
	`lua_toöãgîx
(
L
, -1, &
i¢um
);

192 i‡(!
i¢um
) {

193 i‡(
d
 < 0)

194  
	`luaL_îr‹
(
L
, "fõld '%s' missög i¿d©êèbÀ", 
key
);

195 
ªs
 = 
d
;

197 
	`lua_p›
(
L
, 1);

198  
ªs
;

199 
	}
}

202 c⁄° *
	$check›ti⁄
 (
lua_Sèã
 *
L
, c⁄° *
c⁄v
, *
buff
) {

203 c⁄° *c⁄° 
›ti⁄s
[] = 
LUA_STRFTIMEOPTIONS
;

204 
i
;

205 
i
 = 0; i < (
›ti⁄s
)/(options[0]); i += 2) {

206 i‡(*
c⁄v
 !'\0' && 
	`°rchr
(
›ti⁄s
[
i
], *c⁄vË!
NULL
) {

207 
buff
[1] = *
c⁄v
;

208 i‡(*
›ti⁄s
[
i
 + 1] == '\0') {

209 
buff
[2] = '\0';

210  
c⁄v
 + 1;

212 i‡(*(
c⁄v
 + 1) != '\0' &&

213 
	`°rchr
(
›ti⁄s
[
i
 + 1], *(
c⁄v
 + 1)Ë!
NULL
) {

214 
buff
[2] = *(
c⁄v
 + 1);

215 
buff
[3] = '\0';

216  
c⁄v
 + 2;

220 
	`luaL_¨gîr‹
(
L
, 1,

221 
	`lua_pushf°rög
(
L
, "övÆid c⁄vîsi⁄ s≥cifõ∏'%%%s'", 
c⁄v
));

222  
c⁄v
;

223 
	}
}

226 
	$os_d©e
 (
lua_Sèã
 *
L
) {

227 c⁄° *
s
 = 
	`luaL_›t°rög
(
L
, 1, "%c");

228 
time_t
 
t
 = 
	`luaL_›t
(
L
, 
l_checktime
, 2, 
	`time
(
NULL
));

229 
tm
 
tmr
, *
°m
;

230 i‡(*
s
 == '!') {

231 
°m
 = 
	`l_gmtime
(&
t
, &
tmr
);

232 
s
++;

235 
°m
 = 
	`l_loˇ…ime
(&
t
, &
tmr
);

236 i‡(
°m
 =
NULL
)

237 
	`lua_pushnû
(
L
);

238 i‡(
	`°rcmp
(
s
, "*t") == 0) {

239 
	`lua_¸óãèbÀ
(
L
, 0, 9);

240 
	`£tfõld
(
L
, "£c", 
°m
->
tm_£c
);

241 
	`£tfõld
(
L
, "mö", 
°m
->
tm_mö
);

242 
	`£tfõld
(
L
, "hour", 
°m
->
tm_hour
);

243 
	`£tfõld
(
L
, "day", 
°m
->
tm_mday
);

244 
	`£tfõld
(
L
, "m⁄th", 
°m
->
tm_m⁄
+1);

245 
	`£tfõld
(
L
, "yór", 
°m
->
tm_yór
+1900);

246 
	`£tfõld
(
L
, "wday", 
°m
->
tm_wday
+1);

247 
	`£tfõld
(
L
, "yday", 
°m
->
tm_yday
+1);

248 
	`£tboﬁfõld
(
L
, "isd°", 
°m
->
tm_isd°
);

251 
cc
[4];

252 
luaL_Buf„r
 
b
;

253 
cc
[0] = '%';

254 
	`luaL_bufföô
(
L
, &
b
);

255 *
s
) {

256 i‡(*
s
 != '%')

257 
	`luaL_addch¨
(&
b
, *
s
++);

259 
size_t
 
ª¶í
;

260 
buff
[200];

261 
s
 = 
	`check›ti⁄
(
L
, s + 1, 
cc
);

262 
ª¶í
 = 
	`°r·ime
(
buff
, (buff), 
cc
, 
°m
);

263 
	`luaL_addl°rög
(&
b
, 
buff
, 
ª¶í
);

266 
	`luaL_pushªsu…
(&
b
);

269 
	}
}

272 
	$os_time
 (
lua_Sèã
 *
L
) {

273 
time_t
 
t
;

274 i‡(
	`lua_i¢⁄e‹nû
(
L
, 1))

275 
t
 = 
	`time
(
NULL
);

277 
tm
 
ts
;

278 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

279 
	`lua_£â›
(
L
, 1);

280 
ts
.
tm_£c
 = 
	`gëfõld
(
L
, "sec", 0);

281 
ts
.
tm_mö
 = 
	`gëfõld
(
L
, "min", 0);

282 
ts
.
tm_hour
 = 
	`gëfõld
(
L
, "hour", 12);

283 
ts
.
tm_mday
 = 
	`gëfõld
(
L
, "day", -1);

284 
ts
.
tm_m⁄
 = 
	`gëfõld
(
L
, "month", -1) - 1;

285 
ts
.
tm_yór
 = 
	`gëfõld
(
L
, "year", -1) - 1900;

286 
ts
.
tm_isd°
 = 
	`gëboﬁfõld
(
L
, "isdst");

287 
t
 = 
	`mktime
(&
ts
);

289 i‡(
t
 !(
time_t
)(
l_timë
)t)

290 
	`luaL_îr‹
(
L
, "timeÑesult cannot beÑepresented inÅhis Lua instalation");

291 i‡(
t
 =(
time_t
)(-1))

292 
	`lua_pushnû
(
L
);

294 
	`l_pushtime
(
L
, 
t
);

296 
	}
}

299 
	$os_dif·ime
 (
lua_Sèã
 *
L
) {

300 
ªs
 = 
	`dif·ime
((
	`l_checktime
(
L
, 1)), (l_checktime(L, 2)));

301 
	`lua_pushnumbî
(
L
, (
lua_Numbî
)
ªs
);

303 
	}
}

308 
	$os_£éoˇÀ
 (
lua_Sèã
 *
L
) {

309 c⁄° 
ˇt
[] = {
LC_ALL
, 
LC_COLLATE
, 
LC_CTYPE
, 
LC_MONETARY
,

310 
LC_NUMERIC
, 
LC_TIME
};

311 c⁄° *c⁄° 
ˇäames
[] = {"all", "collate", "ctype", "monetary",

312 "numîic", "time", 
NULL
};

313 c⁄° *
l
 = 
	`luaL_›t°rög
(
L
, 1, 
NULL
);

314 
›
 = 
	`luaL_check›ti⁄
(
L
, 2, "Æl", 
ˇäames
);

315 
	`lua_push°rög
(
L
, 
	`£éoˇÀ
(
ˇt
[
›
], 
l
));

317 
	}
}

320 
	$os_exô
 (
lua_Sèã
 *
L
) {

321 
°©us
;

322 i‡(
	`lua_isboﬁón
(
L
, 1))

323 
°©us
 = (
	`lua_toboﬁón
(
L
, 1Ë? 
EXIT_SUCCESS
 : 
EXIT_FAILURE
);

325 
°©us
 = ()
	`luaL_›töãgî
(
L
, 1, 
EXIT_SUCCESS
);

326 i‡(
	`lua_toboﬁón
(
L
, 2))

327 
	`lua_˛o£
(
L
);

328 i‡(
L
Ë
	`exô
(
°©us
);

330 
	}
}

333 c⁄° 
luaL_Reg
 
	gsy¶ib
[] = {

334 {"˛ock", 
os_˛ock
},

335 {"d©e", 
os_d©e
},

336 {"dif·ime", 
os_dif·ime
},

337 {"execuã", 
os_execuã
},

338 {"exô", 
os_exô
},

339 {"gëív", 
os_gëív
},

340 {"ªmove", 
os_ªmove
},

341 {"ª«me", 
os_ª«me
},

342 {"£éoˇÀ", 
os_£éoˇÀ
},

343 {"time", 
os_time
},

344 {"tm≤ame", 
os_tm≤ame
},

345 {
NULL
, NULL}

352 
LUAMOD_API
 
	$lua›í_os
 (
lua_Sèã
 *
L
) {

353 
	`luaL_√wlib
(
L
, 
sy¶ib
);

355 
	}
}

	@lib/archive/lua-5.3.0/src/lparser.c

7 
	#Õ¨£r_c


	)

8 
	#LUA_CORE


	)

10 
	~"Õªfix.h
"

13 
	~<°rög.h
>

15 
	~"lua.h
"

17 
	~"lcode.h
"

18 
	~"ldebug.h
"

19 
	~"ldo.h
"

20 
	~"lfunc.h
"

21 
	~"Œex.h
"

22 
	~"lmem.h
"

23 
	~"lobje˘.h
"

24 
	~"l›codes.h
"

25 
	~"Õ¨£r.h
"

26 
	~"l°©e.h
"

27 
	~"l°rög.h
"

28 
	~"…abÀ.h
"

34 
	#MAXVARS
 200

	)

37 
	#hasmu…ªt
(
k
Ë((kË=
VCALL
 || (kË=
VVARARG
)

	)

42 
	#eq°r
(
a
,
b
Ë(◊Ë=(b))

	)

48 
	sBlockC¡
 {

49 
BlockC¡
 *
	m¥evious
;

50 
	mfú°œbñ
;

51 
	mfú°gŸo
;

52 
lu_byã
 
	m«˘v¨
;

53 
lu_byã
 
	mupvÆ
;

54 
lu_byã
 
	mi¶o›
;

55 } 
	tBlockC¡
;

62 
°©emít
 (
LexSèã
 *
ls
);

63 
ex¥
 (
LexSèã
 *
ls
, 
expdesc
 *
v
);

67 
l_n‹ë
 
	$£mîr‹
 (
LexSèã
 *
ls
, c⁄° *
msg
) {

68 
ls
->
t
.
tokí
 = 0;

69 
	`luaX_sy¡axîr‹
(
ls
, 
msg
);

70 
	}
}

73 
l_n‹ë
 
	$îr‹_ex≥˘ed
 (
LexSèã
 *
ls
, 
tokí
) {

74 
	`luaX_sy¡axîr‹
(
ls
,

75 
	`luaO_pushf°rög
(
ls
->
L
, "%†ex≥˘ed", 
	`luaX_tokí2°r
÷s, 
tokí
)));

76 
	}
}

79 
l_n‹ë
 
	$îr‹limô
 (
FuncSèã
 *
fs
, 
limô
, c⁄° *
wh©
) {

80 
lua_Sèã
 *
L
 = 
fs
->
ls
->L;

81 c⁄° *
msg
;

82 
löe
 = 
fs
->
f
->
löedeföed
;

83 c⁄° *
whîe
 = (
löe
 == 0)

85 : 
	`luaO_pushf°rög
(
L
, "fun˘i⁄áàlöê%d", 
löe
);

86 
msg
 = 
	`luaO_pushf°rög
(
L
, "too many %s (limit is %d) in %s",

87 
wh©
, 
limô
, 
whîe
);

88 
	`luaX_sy¡axîr‹
(
fs
->
ls
, 
msg
);

89 
	}
}

92 
	$checklimô
 (
FuncSèã
 *
fs
, 
v
, 
l
, c⁄° *
wh©
) {

93 i‡(
v
 > 
l
Ë
	`îr‹limô
(
fs
,Ü, 
wh©
);

94 
	}
}

97 
	$ã°√xt
 (
LexSèã
 *
ls
, 
c
) {

98 i‡(
ls
->
t
.
tokí
 =
c
) {

99 
	`luaX_√xt
(
ls
);

103 
	}
}

106 
	$check
 (
LexSèã
 *
ls
, 
c
) {

107 i‡(
ls
->
t
.
tokí
 !
c
)

108 
	`îr‹_ex≥˘ed
(
ls
, 
c
);

109 
	}
}

112 
	$check√xt
 (
LexSèã
 *
ls
, 
c
) {

113 
	`check
(
ls
, 
c
);

114 
	`luaX_√xt
(
ls
);

115 
	}
}

118 
	#check_c⁄dôi⁄
(
ls
,
c
,
msg
Ë{ i‡(!(c)Ë
	`luaX_sy¡axîr‹
÷s, msg); }

	)

122 
	$check_m©ch
 (
LexSèã
 *
ls
, 
wh©
, 
who
, 
whîe
) {

123 i‡(!
	`ã°√xt
(
ls
, 
wh©
)) {

124 i‡(
whîe
 =
ls
->
löíumbî
)

125 
	`îr‹_ex≥˘ed
(
ls
, 
wh©
);

127 
	`luaX_sy¡axîr‹
(
ls
, 
	`luaO_pushf°rög
÷s->
L
,

129 
	`luaX_tokí2°r
(
ls
, 
wh©
),ÜuaX_tokí2°r÷s, 
who
), 
whîe
));

132 
	}
}

135 
TSåög
 *
	$°r_check«me
 (
LexSèã
 *
ls
) {

136 
TSåög
 *
ts
;

137 
	`check
(
ls
, 
TK_NAME
);

138 
ts
 = 
ls
->
t
.
£möfo
.ts;

139 
	`luaX_√xt
(
ls
);

140  
ts
;

141 
	}
}

144 
	$öô_exp
 (
expdesc
 *
e
, 
expköd
 
k
, 
i
) {

145 
e
->
f
 =É->
t
 = 
NO_JUMP
;

146 
e
->
k
 = k;

147 
e
->
u
.
öfo
 = 
i
;

148 
	}
}

151 
	$code°rög
 (
LexSèã
 *
ls
, 
expdesc
 *
e
, 
TSåög
 *
s
) {

152 
	`öô_exp
(
e
, 
VK
, 
	`luaK_°rögK
(
ls
->
fs
, 
s
));

153 
	}
}

156 
	$check«me
 (
LexSèã
 *
ls
, 
expdesc
 *
e
) {

157 
	`code°rög
(
ls
, 
e
, 
	`°r_check«me
(ls));

158 
	}
}

161 
	$ªgi°îloˇlv¨
 (
LexSèã
 *
ls
, 
TSåög
 *
v¨«me
) {

162 
FuncSèã
 *
fs
 = 
ls
->fs;

163 
PrŸo
 *
f
 = 
fs
->f;

164 
ﬁdsize
 = 
f
->
sizñocv¨s
;

165 
	`luaM_growve˘‹
(
ls
->
L
, 
f
->
locv¨s
, 
fs
->
∆ocv¨s
, f->
sizñocv¨s
,

166 
LocV¨
, 
SHRT_MAX
, "local variables");

167 
ﬁdsize
 < 
f
->
sizñocv¨s
Ëf->
locv¨s
[ﬁdsize++].
v¨«me
 = 
NULL
;

168 
f
->
locv¨s
[
fs
->
∆ocv¨s
].
v¨«me
 = varname;

169 
	`luaC_objb¨rõr
(
ls
->
L
, 
f
, 
v¨«me
);

170  
fs
->
∆ocv¨s
++;

171 
	}
}

174 
	$√w_loˇlv¨
 (
LexSèã
 *
ls
, 
TSåög
 *
«me
) {

175 
FuncSèã
 *
fs
 = 
ls
->fs;

176 
Dynd©a
 *
dyd
 = 
ls
->dyd;

177 
ªg
 = 
	`ªgi°îloˇlv¨
(
ls
, 
«me
);

178 
	`checklimô
(
fs
, 
dyd
->
a˘v¨
.
n
 + 1 - fs->
fú°loˇl
,

179 
MAXVARS
, "local variables");

180 
	`luaM_growve˘‹
(
ls
->
L
, 
dyd
->
a˘v¨
.
¨r
, dyd->a˘v¨.
n
 + 1,

181 
dyd
->
a˘v¨
.
size
, 
V¨desc
, 
MAX_INT
, "local variables");

182 
dyd
->
a˘v¨
.
¨r
[dyd->a˘v¨.
n
++].
idx
 = 
	`ˇ°
(, 
ªg
);

183 
	}
}

186 
	$√w_loˇlv¨lôîÆ_
 (
LexSèã
 *
ls
, c⁄° *
«me
, 
size_t
 
sz
) {

187 
	`√w_loˇlv¨
(
ls
, 
	`luaX_√w°rög
÷s, 
«me
, 
sz
));

188 
	}
}

190 
	#√w_loˇlv¨lôîÆ
(
ls
,
v
) \

191 
	`√w_loˇlv¨lôîÆ_
(
ls
, "" 
v
, ((v)/())-1)

	)

194 
LocV¨
 *
	$gëlocv¨
 (
FuncSèã
 *
fs
, 
i
) {

195 
idx
 = 
fs
->
ls
->
dyd
->
a˘v¨
.
¨r
[fs->
fú°loˇl
 + 
i
].idx;

196 
	`lua_as£π
(
idx
 < 
fs
->
∆ocv¨s
);

197  &
fs
->
f
->
locv¨s
[
idx
];

198 
	}
}

201 
	$adju°loˇlv¨s
 (
LexSèã
 *
ls
, 
nv¨s
) {

202 
FuncSèã
 *
fs
 = 
ls
->fs;

203 
fs
->
«˘v¨
 = 
	`ˇ°_byã
(fs->«˘v¨ + 
nv¨s
);

204 ; 
nv¨s
;Çvars--) {

205 
	`gëlocv¨
(
fs
, fs->
«˘v¨
 - 
nv¨s
)->
°¨çc
 = fs->
pc
;

207 
	}
}

210 
	$ªmovev¨s
 (
FuncSèã
 *
fs
, 
tﬁevñ
) {

211 
fs
->
ls
->
dyd
->
a˘v¨
.
n
 -(fs->
«˘v¨
 - 
tﬁevñ
);

212 
fs
->
«˘v¨
 > 
tﬁevñ
)

213 
	`gëlocv¨
(
fs
, --fs->
«˘v¨
)->
ídpc
 = fs->
pc
;

214 
	}
}

217 
	$£¨chupvÆue
 (
FuncSèã
 *
fs
, 
TSåög
 *
«me
) {

218 
i
;

219 
UpvÆdesc
 *
up
 = 
fs
->
f
->
upvÆues
;

220 
i
 = 0; i < 
fs
->
nups
; i++) {

221 i‡(
	`eq°r
(
up
[
i
].
«me
,Çame))  i;

224 
	}
}

227 
	$√wupvÆue
 (
FuncSèã
 *
fs
, 
TSåög
 *
«me
, 
expdesc
 *
v
) {

228 
PrŸo
 *
f
 = 
fs
->f;

229 
ﬁdsize
 = 
f
->
sizeupvÆues
;

230 
	`checklimô
(
fs
, fs->
nups
 + 1, 
MAXUPVAL
, "upvalues");

231 
	`luaM_growve˘‹
(
fs
->
ls
->
L
, 
f
->
upvÆues
, fs->
nups
, f->
sizeupvÆues
,

232 
UpvÆdesc
, 
MAXUPVAL
, "upvalues");

233 
ﬁdsize
 < 
f
->
sizeupvÆues
Ëf->
upvÆues
[ﬁdsize++].
«me
 = 
NULL
;

234 
f
->
upvÆues
[
fs
->
nups
].
ö°ack
 = (
v
->
k
 =
VLOCAL
);

235 
f
->
upvÆues
[
fs
->
nups
].
idx
 = 
	`ˇ°_byã
(
v
->
u
.
öfo
);

236 
f
->
upvÆues
[
fs
->
nups
].
«me
 =Çame;

237 
	`luaC_objb¨rõr
(
fs
->
ls
->
L
, 
f
, 
«me
);

238  
fs
->
nups
++;

239 
	}
}

242 
	$£¨chv¨
 (
FuncSèã
 *
fs
, 
TSåög
 *
n
) {

243 
i
;

244 
i
 = 
	`ˇ°_öt
(
fs
->
«˘v¨
) - 1; i >= 0; i--) {

245 i‡(
	`eq°r
(
n
, 
	`gëlocv¨
(
fs
, 
i
)->
v¨«me
))

246  
i
;

249 
	}
}

256 
	$m¨kupvÆ
 (
FuncSèã
 *
fs
, 
Àvñ
) {

257 
BlockC¡
 *
bl
 = 
fs
->bl;

258 
bl
->
«˘v¨
 > 
Àvñ
Ëb»bl->
¥evious
;

259 
bl
->
upvÆ
 = 1;

260 
	}
}

267 
	$sögÀv¨aux
 (
FuncSèã
 *
fs
, 
TSåög
 *
n
, 
expdesc
 *
v¨
, 
ba£
) {

268 i‡(
fs
 =
NULL
)

269  
VVOID
;

271 
v
 = 
	`£¨chv¨
(
fs
, 
n
);

272 i‡(
v
 >= 0) {

273 
	`öô_exp
(
v¨
, 
VLOCAL
, 
v
);

274 i‡(!
ba£
)

275 
	`m¨kupvÆ
(
fs
, 
v
);

276  
VLOCAL
;

279 
idx
 = 
	`£¨chupvÆue
(
fs
, 
n
);

280 i‡(
idx
 < 0) {

281 i‡(
	`sögÀv¨aux
(
fs
->
¥ev
, 
n
, 
v¨
, 0Ë=
VVOID
)

282  
VVOID
;

284 
idx
 = 
	`√wupvÆue
(
fs
, 
n
, 
v¨
);

286 
	`öô_exp
(
v¨
, 
VUPVAL
, 
idx
);

287  
VUPVAL
;

290 
	}
}

293 
	$sögÀv¨
 (
LexSèã
 *
ls
, 
expdesc
 *
v¨
) {

294 
TSåög
 *
v¨«me
 = 
	`°r_check«me
(
ls
);

295 
FuncSèã
 *
fs
 = 
ls
->fs;

296 i‡(
	`sögÀv¨aux
(
fs
, 
v¨«me
, 
v¨
, 1Ë=
VVOID
) {

297 
expdesc
 
key
;

298 
	`sögÀv¨aux
(
fs
, 
ls
->
ívn
, 
v¨
, 1);

299 
	`lua_as£π
(
v¨
->
k
 =
VLOCAL
 || v¨->k =
VUPVAL
);

300 
	`code°rög
(
ls
, &
key
, 
v¨«me
);

301 
	`luaK_ödexed
(
fs
, 
v¨
, &
key
);

303 
	}
}

306 
	$adju°_assign
 (
LexSèã
 *
ls
, 
nv¨s
, 
√xps
, 
expdesc
 *
e
) {

307 
FuncSèã
 *
fs
 = 
ls
->fs;

308 
exåa
 = 
nv¨s
 - 
√xps
;

309 i‡(
	`hasmu…ªt
(
e
->
k
)) {

310 
exåa
++;

311 i‡(
exåa
 < 0)Éxtra = 0;

312 
	`luaK_£åëu∫s
(
fs
, 
e
, 
exåa
);

313 i‡(
exåa
 > 1Ë
	`luaK_ª£rvîegs
(
fs
,Éxtra-1);

316 i‡(
e
->
k
 !
VVOID
Ë
	`luaK_exp2√xåeg
(
fs
,É);

317 i‡(
exåa
 > 0) {

318 
ªg
 = 
fs
->
‰ìªg
;

319 
	`luaK_ª£rvîegs
(
fs
, 
exåa
);

320 
	`luaK_nû
(
fs
, 
ªg
, 
exåa
);

323 
	}
}

326 
	$íãæevñ
 (
LexSèã
 *
ls
) {

327 
lua_Sèã
 *
L
 = 
ls
->L;

328 ++
L
->
nCˇŒs
;

329 
	`checklimô
(
ls
->
fs
, 
L
->
nCˇŒs
, 
LUAI_MAXCCALLS
, "CÜevels");

330 
	}
}

333 
	#Àavñevñ
(
ls
Ë(÷s)->
L
->
nCˇŒs
--)

	)

336 
	$˛o£gŸo
 (
LexSèã
 *
ls
, 
g
, 
Labñdesc
 *
œbñ
) {

337 
i
;

338 
FuncSèã
 *
fs
 = 
ls
->fs;

339 
Labñli°
 *
gl
 = &
ls
->
dyd
->
gt
;

340 
Labñdesc
 *
gt
 = &
gl
->
¨r
[
g
];

341 
	`lua_as£π
(
	`eq°r
(
gt
->
«me
, 
œbñ
->name));

342 i‡(
gt
->
«˘v¨
 < 
œbñ
->nactvar) {

343 
TSåög
 *
v«me
 = 
	`gëlocv¨
(
fs
, 
gt
->
«˘v¨
)->
v¨«me
;

344 c⁄° *
msg
 = 
	`luaO_pushf°rög
(
ls
->
L
,

346 
	`gë°r
(
gt
->
«me
), gt->
löe
, gë°r(
v«me
));

347 
	`£mîr‹
(
ls
, 
msg
);

349 
	`luaK_∑tchli°
(
fs
, 
gt
->
pc
, 
œbñ
->pc);

351 
i
 = 
g
; i < 
gl
->
n
 - 1; i++)

352 
gl
->
¨r
[
i
] = gl->arr[i + 1];

353 
gl
->
n
--;

354 
	}
}

360 
	$födœbñ
 (
LexSèã
 *
ls
, 
g
) {

361 
i
;

362 
BlockC¡
 *
bl
 = 
ls
->
fs
->bl;

363 
Dynd©a
 *
dyd
 = 
ls
->dyd;

364 
Labñdesc
 *
gt
 = &
dyd
->gt.
¨r
[
g
];

366 
i
 = 
bl
->
fú°œbñ
; i < 
dyd
->
œbñ
.
n
; i++) {

367 
Labñdesc
 *
lb
 = &
dyd
->
œbñ
.
¨r
[
i
];

368 i‡(
	`eq°r
(
lb
->
«me
, 
gt
->name)) {

369 i‡(
gt
->
«˘v¨
 > 
lb
->nactvar &&

370 (
bl
->
upvÆ
 || 
dyd
->
œbñ
.
n
 > bl->
fú°œbñ
))

371 
	`luaK_∑tch˛o£
(
ls
->
fs
, 
gt
->
pc
, 
lb
->
«˘v¨
);

372 
	`˛o£gŸo
(
ls
, 
g
, 
lb
);

377 
	}
}

380 
	$√wœbñíåy
 (
LexSèã
 *
ls
, 
Labñli°
 *
l
, 
TSåög
 *
«me
,

381 
löe
, 
pc
) {

382 
n
 = 
l
->n;

383 
	`luaM_growve˘‹
(
ls
->
L
, 
l
->
¨r
, 
n
,Ü->
size
,

384 
Labñdesc
, 
SHRT_MAX
, "labels/gotos");

385 
l
->
¨r
[
n
].
«me
 =Çame;

386 
l
->
¨r
[
n
].
löe
 =Üine;

387 
l
->
¨r
[
n
].
«˘v¨
 = 
ls
->
fs
->nactvar;

388 
l
->
¨r
[
n
].
pc
 =Öc;

389 
l
->
n
 =Ç + 1;

390  
n
;

391 
	}
}

398 
	$födgŸos
 (
LexSèã
 *
ls
, 
Labñdesc
 *
lb
) {

399 
Labñli°
 *
gl
 = &
ls
->
dyd
->
gt
;

400 
i
 = 
ls
->
fs
->
bl
->
fú°gŸo
;

401 
i
 < 
gl
->
n
) {

402 i‡(
	`eq°r
(
gl
->
¨r
[
i
].
«me
, 
lb
->name))

403 
	`˛o£gŸo
(
ls
, 
i
, 
lb
);

405 
i
++;

407 
	}
}

416 
	$movegŸosout
 (
FuncSèã
 *
fs
, 
BlockC¡
 *
bl
) {

417 
i
 = 
bl
->
fú°gŸo
;

418 
Labñli°
 *
gl
 = &
fs
->
ls
->
dyd
->
gt
;

421 
i
 < 
gl
->
n
) {

422 
Labñdesc
 *
gt
 = &
gl
->
¨r
[
i
];

423 i‡(
gt
->
«˘v¨
 > 
bl
->nactvar) {

424 i‡(
bl
->
upvÆ
)

425 
	`luaK_∑tch˛o£
(
fs
, 
gt
->
pc
, 
bl
->
«˘v¨
);

426 
gt
->
«˘v¨
 = 
bl
->nactvar;

428 i‡(!
	`födœbñ
(
fs
->
ls
, 
i
))

429 
i
++;

431 
	}
}

434 
	$íãrblock
 (
FuncSèã
 *
fs
, 
BlockC¡
 *
bl
, 
lu_byã
 
i¶o›
) {

435 
bl
->
i¶o›
 = isloop;

436 
bl
->
«˘v¨
 = 
fs
->nactvar;

437 
bl
->
fú°œbñ
 = 
fs
->
ls
->
dyd
->
œbñ
.
n
;

438 
bl
->
fú°gŸo
 = 
fs
->
ls
->
dyd
->
gt
.
n
;

439 
bl
->
upvÆ
 = 0;

440 
bl
->
¥evious
 = 
fs
->bl;

441 
fs
->
bl
 = bl;

442 
	`lua_as£π
(
fs
->
‰ìªg
 =fs->
«˘v¨
);

443 
	}
}

449 
	$bªakœbñ
 (
LexSèã
 *
ls
) {

450 
TSåög
 *
n
 = 
	`luaS_√w
(
ls
->
L
, "break");

451 
l
 = 
	`√wœbñíåy
(
ls
, &ls->
dyd
->
œbñ
, 
n
, 0,Üs->
fs
->
pc
);

452 
	`födgŸos
(
ls
, &ls->
dyd
->
œbñ
.
¨r
[
l
]);

453 
	}
}

459 
l_n‹ë
 
	$undefgŸo
 (
LexSèã
 *
ls
, 
Labñdesc
 *
gt
) {

460 c⁄° *
msg
 = 
	`i§e£rved
(
gt
->
«me
)

463 
msg
 = 
	`luaO_pushf°rög
(
ls
->
L
, msg, 
	`gë°r
(
gt
->
«me
), gt->
löe
);

464 
	`£mîr‹
(
ls
, 
msg
);

465 
	}
}

468 
	$Àaveblock
 (
FuncSèã
 *
fs
) {

469 
BlockC¡
 *
bl
 = 
fs
->bl;

470 
LexSèã
 *
ls
 = 
fs
->ls;

471 i‡(
bl
->
¥evious
 && bl->
upvÆ
) {

473 
j
 = 
	`luaK_jump
(
fs
);

474 
	`luaK_∑tch˛o£
(
fs
, 
j
, 
bl
->
«˘v¨
);

475 
	`luaK_∑tchtohîe
(
fs
, 
j
);

477 i‡(
bl
->
i¶o›
)

478 
	`bªakœbñ
(
ls
);

479 
fs
->
bl
 = bl->
¥evious
;

480 
	`ªmovev¨s
(
fs
, 
bl
->
«˘v¨
);

481 
	`lua_as£π
(
bl
->
«˘v¨
 =
fs
->nactvar);

482 
fs
->
‰ìªg
 = fs->
«˘v¨
;

483 
ls
->
dyd
->
œbñ
.
n
 = 
bl
->
fú°œbñ
;

484 i‡(
bl
->
¥evious
)

485 
	`movegŸosout
(
fs
, 
bl
);

486 i‡(
bl
->
fú°gŸo
 < 
ls
->
dyd
->
gt
.
n
)

487 
	`undefgŸo
(
ls
, &ls->
dyd
->
gt
.
¨r
[
bl
->
fú°gŸo
]);

488 
	}
}

494 
PrŸo
 *
	$add¥ŸŸy≥
 (
LexSèã
 *
ls
) {

495 
PrŸo
 *
˛p
;

496 
lua_Sèã
 *
L
 = 
ls
->L;

497 
FuncSèã
 *
fs
 = 
ls
->fs;

498 
PrŸo
 *
f
 = 
fs
->f;

499 i‡(
fs
->
≈
 >
f
->
sizï
) {

500 
ﬁdsize
 = 
f
->
sizï
;

501 
	`luaM_growve˘‹
(
L
, 
f
->
p
, 
fs
->
≈
, f->
sizï
, 
PrŸo
 *, 
MAXARG_Bx
, "functions");

502 
ﬁdsize
 < 
f
->
sizï
Ëf->
p
[ﬁdsize++] = 
NULL
;

504 
f
->
p
[
fs
->
≈
++] = 
˛p
 = 
	`luaF_√w¥Ÿo
(
L
);

505 
	`luaC_objb¨rõr
(
L
, 
f
, 
˛p
);

506  
˛p
;

507 
	}
}

516 
	$code˛osuª
 (
LexSèã
 *
ls
, 
expdesc
 *
v
) {

517 
FuncSèã
 *
fs
 = 
ls
->fs->
¥ev
;

518 
	`öô_exp
(
v
, 
VRELOCABLE
, 
	`luaK_codeABx
(
fs
, 
OP_CLOSURE
, 0, fs->
≈
 - 1));

519 
	`luaK_exp2√xåeg
(
fs
, 
v
);

520 
	}
}

523 
	$›í_func
 (
LexSèã
 *
ls
, 
FuncSèã
 *
fs
, 
BlockC¡
 *
bl
) {

524 
PrŸo
 *
f
;

525 
fs
->
¥ev
 = 
ls
->fs;

526 
fs
->
ls
 =Üs;

527 
ls
->
fs
 = fs;

528 
fs
->
pc
 = 0;

529 
fs
->
œ°èrgë
 = 0;

530 
fs
->
jpc
 = 
NO_JUMP
;

531 
fs
->
‰ìªg
 = 0;

532 
fs
->
nk
 = 0;

533 
fs
->
≈
 = 0;

534 
fs
->
nups
 = 0;

535 
fs
->
∆ocv¨s
 = 0;

536 
fs
->
«˘v¨
 = 0;

537 
fs
->
fú°loˇl
 = 
ls
->
dyd
->
a˘v¨
.
n
;

538 
fs
->
bl
 = 
NULL
;

539 
f
 = 
fs
->f;

540 
f
->
sour˚
 = 
ls
->source;

541 
f
->
max°acksize
 = 2;

542 
	`íãrblock
(
fs
, 
bl
, 0);

543 
	}
}

546 
	$˛o£_func
 (
LexSèã
 *
ls
) {

547 
lua_Sèã
 *
L
 = 
ls
->L;

548 
FuncSèã
 *
fs
 = 
ls
->fs;

549 
PrŸo
 *
f
 = 
fs
->f;

550 
	`luaK_ªt
(
fs
, 0, 0);

551 
	`Àaveblock
(
fs
);

552 
	`luaM_ªÆlocve˘‹
(
L
, 
f
->
code
, f->
sizecode
, 
fs
->
pc
, 
In°ru˘i⁄
);

553 
f
->
sizecode
 = 
fs
->
pc
;

554 
	`luaM_ªÆlocve˘‹
(
L
, 
f
->
löeöfo
, f->
sizñöeöfo
, 
fs
->
pc
, );

555 
f
->
sizñöeöfo
 = 
fs
->
pc
;

556 
	`luaM_ªÆlocve˘‹
(
L
, 
f
->
k
, f->
sizek
, 
fs
->
nk
, 
TVÆue
);

557 
f
->
sizek
 = 
fs
->
nk
;

558 
	`luaM_ªÆlocve˘‹
(
L
, 
f
->
p
, f->
sizï
, 
fs
->
≈
, 
PrŸo
 *);

559 
f
->
sizï
 = 
fs
->
≈
;

560 
	`luaM_ªÆlocve˘‹
(
L
, 
f
->
locv¨s
, f->
sizñocv¨s
, 
fs
->
∆ocv¨s
, 
LocV¨
);

561 
f
->
sizñocv¨s
 = 
fs
->
∆ocv¨s
;

562 
	`luaM_ªÆlocve˘‹
(
L
, 
f
->
upvÆues
, f->
sizeupvÆues
, 
fs
->
nups
, 
UpvÆdesc
);

563 
f
->
sizeupvÆues
 = 
fs
->
nups
;

564 
	`lua_as£π
(
fs
->
bl
 =
NULL
);

565 
ls
->
fs
 = fs->
¥ev
;

566 
	`luaC_checkGC
(
L
);

567 
	}
}

581 
	$block_fﬁlow
 (
LexSèã
 *
ls
, 
wôhu¡û
) {

582 
ls
->
t
.
tokí
) {

583 
TK_ELSE
: 
TK_ELSEIF
:

584 
TK_END
: 
TK_EOS
:

586 
TK_UNTIL
:  
wôhu¡û
;

589 
	}
}

592 
	$°©li°
 (
LexSèã
 *
ls
) {

594 !
	`block_fﬁlow
(
ls
, 1)) {

595 i‡(
ls
->
t
.
tokí
 =
TK_RETURN
) {

596 
	`°©emít
(
ls
);

599 
	`°©emít
(
ls
);

601 
	}
}

604 
	$fõld£l
 (
LexSèã
 *
ls
, 
expdesc
 *
v
) {

606 
FuncSèã
 *
fs
 = 
ls
->fs;

607 
expdesc
 
key
;

608 
	`luaK_exp2™yªgup
(
fs
, 
v
);

609 
	`luaX_√xt
(
ls
);

610 
	`check«me
(
ls
, &
key
);

611 
	`luaK_ödexed
(
fs
, 
v
, &
key
);

612 
	}
}

615 
	$yödex
 (
LexSèã
 *
ls
, 
expdesc
 *
v
) {

617 
	`luaX_√xt
(
ls
);

618 
	`ex¥
(
ls
, 
v
);

619 
	`luaK_exp2vÆ
(
ls
->
fs
, 
v
);

620 
	`check√xt
(
ls
, ']');

621 
	}
}

631 
	sC⁄sC⁄åﬁ
 {

632 
expdesc
 
	mv
;

633 
expdesc
 *
	mt
;

634 
	mnh
;

635 
	m«
;

636 
	mto°‹e
;

640 
	$ªcfõld
 (
LexSèã
 *
ls
, 
C⁄sC⁄åﬁ
 *
cc
) {

642 
FuncSèã
 *
fs
 = 
ls
->fs;

643 
ªg
 = 
ls
->
fs
->
‰ìªg
;

644 
expdesc
 
key
, 
vÆ
;

645 
rkkey
;

646 i‡(
ls
->
t
.
tokí
 =
TK_NAME
) {

647 
	`checklimô
(
fs
, 
cc
->
nh
, 
MAX_INT
, "items iná constructor");

648 
	`check«me
(
ls
, &
key
);

651 
	`yödex
(
ls
, &
key
);

652 
cc
->
nh
++;

653 
	`check√xt
(
ls
, '=');

654 
rkkey
 = 
	`luaK_exp2RK
(
fs
, &
key
);

655 
	`ex¥
(
ls
, &
vÆ
);

656 
	`luaK_codeABC
(
fs
, 
OP_SETTABLE
, 
cc
->
t
->
u
.
öfo
, 
rkkey
, 
	`luaK_exp2RK
(fs, &
vÆ
));

657 
fs
->
‰ìªg
 = 
ªg
;

658 
	}
}

661 
	$˛o£li°fõld
 (
FuncSèã
 *
fs
, 
C⁄sC⁄åﬁ
 *
cc
) {

662 i‡(
cc
->
v
.
k
 =
VVOID
) ;

663 
	`luaK_exp2√xåeg
(
fs
, &
cc
->
v
);

664 
cc
->
v
.
k
 = 
VVOID
;

665 i‡(
cc
->
to°‹e
 =
LFIELDS_PER_FLUSH
) {

666 
	`luaK_£éi°
(
fs
, 
cc
->
t
->
u
.
öfo
, cc->
«
, cc->
to°‹e
);

667 
cc
->
to°‹e
 = 0;

669 
	}
}

672 
	$œ°li°fõld
 (
FuncSèã
 *
fs
, 
C⁄sC⁄åﬁ
 *
cc
) {

673 i‡(
cc
->
to°‹e
 == 0) ;

674 i‡(
	`hasmu…ªt
(
cc
->
v
.
k
)) {

675 
	`luaK_£tmu…ªt
(
fs
, &
cc
->
v
);

676 
	`luaK_£éi°
(
fs
, 
cc
->
t
->
u
.
öfo
, cc->
«
, 
LUA_MULTRET
);

677 
cc
->
«
--;

680 i‡(
cc
->
v
.
k
 !
VVOID
)

681 
	`luaK_exp2√xåeg
(
fs
, &
cc
->
v
);

682 
	`luaK_£éi°
(
fs
, 
cc
->
t
->
u
.
öfo
, cc->
«
, cc->
to°‹e
);

684 
	}
}

687 
	$li°fõld
 (
LexSèã
 *
ls
, 
C⁄sC⁄åﬁ
 *
cc
) {

689 
	`ex¥
(
ls
, &
cc
->
v
);

690 
	`checklimô
(
ls
->
fs
, 
cc
->
«
, 
MAX_INT
, "items iná constructor");

691 
cc
->
«
++;

692 
cc
->
to°‹e
++;

693 
	}
}

696 
	$fõld
 (
LexSèã
 *
ls
, 
C⁄sC⁄åﬁ
 *
cc
) {

698 
ls
->
t
.
tokí
) {

699 
TK_NAME
: {

700 i‡(
	`luaX_lookahód
(
ls
) != '=')

701 
	`li°fõld
(
ls
, 
cc
);

703 
	`ªcfõld
(
ls
, 
cc
);

707 
	`ªcfõld
(
ls
, 
cc
);

711 
	`li°fõld
(
ls
, 
cc
);

715 
	}
}

718 
	$c⁄°ru˘‹
 (
LexSèã
 *
ls
, 
expdesc
 *
t
) {

721 
FuncSèã
 *
fs
 = 
ls
->fs;

722 
löe
 = 
ls
->
löíumbî
;

723 
pc
 = 
	`luaK_codeABC
(
fs
, 
OP_NEWTABLE
, 0, 0, 0);

724 
C⁄sC⁄åﬁ
 
cc
;

725 
cc
.
«
 = cc.
nh
 = cc.
to°‹e
 = 0;

726 
cc
.
t
 =Å;

727 
	`öô_exp
(
t
, 
VRELOCABLE
, 
pc
);

728 
	`öô_exp
(&
cc
.
v
, 
VVOID
, 0);

729 
	`luaK_exp2√xåeg
(
ls
->
fs
, 
t
);

730 
	`check√xt
(
ls
, '{');

732 
	`lua_as£π
(
cc
.
v
.
k
 =
VVOID
 || cc.
to°‹e
 > 0);

733 i‡(
ls
->
t
.
tokí
 == '}') ;

734 
	`˛o£li°fõld
(
fs
, &
cc
);

735 
	`fõld
(
ls
, &
cc
);

736 } 
	`ã°√xt
(
ls
, ',') ||Åestnext(ls, ';'));

737 
	`check_m©ch
(
ls
, '}', '{', 
löe
);

738 
	`œ°li°fõld
(
fs
, &
cc
);

739 
	`SETARG_B
(
fs
->
f
->
code
[
pc
], 
	`luaO_öt2fb
(
cc
.
«
));

740 
	`SETARG_C
(
fs
->
f
->
code
[
pc
], 
	`luaO_öt2fb
(
cc
.
nh
));

741 
	}
}

747 
	$∑æi°
 (
LexSèã
 *
ls
) {

749 
FuncSèã
 *
fs
 = 
ls
->fs;

750 
PrŸo
 *
f
 = 
fs
->f;

751 
≈¨ams
 = 0;

752 
f
->
is_v¨¨g
 = 0;

753 i‡(
ls
->
t
.
tokí
 != ')') {

755 
ls
->
t
.
tokí
) {

756 
TK_NAME
: {

757 
	`√w_loˇlv¨
(
ls
, 
	`°r_check«me
(ls));

758 
≈¨ams
++;

761 
TK_DOTS
: {

762 
	`luaX_√xt
(
ls
);

763 
f
->
is_v¨¨g
 = 1;

766 : 
	`luaX_sy¡axîr‹
(
ls
, "<name> or '...'Éxpected");

768 } !
f
->
is_v¨¨g
 && 
	`ã°√xt
(
ls
, ','));

770 
	`adju°loˇlv¨s
(
ls
, 
≈¨ams
);

771 
f
->
num∑øms
 = 
	`ˇ°_byã
(
fs
->
«˘v¨
);

772 
	`luaK_ª£rvîegs
(
fs
, fs->
«˘v¨
);

773 
	}
}

776 
	$body
 (
LexSèã
 *
ls
, 
expdesc
 *
e
, 
ismëhod
, 
löe
) {

778 
FuncSèã
 
√w_fs
;

779 
BlockC¡
 
bl
;

780 
√w_fs
.
f
 = 
	`add¥ŸŸy≥
(
ls
);

781 
√w_fs
.
f
->
löedeföed
 = 
löe
;

782 
	`›í_func
(
ls
, &
√w_fs
, &
bl
);

783 
	`check√xt
(
ls
, '(');

784 i‡(
ismëhod
) {

785 
	`√w_loˇlv¨lôîÆ
(
ls
, "self");

786 
	`adju°loˇlv¨s
(
ls
, 1);

788 
	`∑æi°
(
ls
);

789 
	`check√xt
(
ls
, ')');

790 
	`°©li°
(
ls
);

791 
√w_fs
.
f
->
œ°löedeföed
 = 
ls
->
löíumbî
;

792 
	`check_m©ch
(
ls
, 
TK_END
, 
TK_FUNCTION
, 
löe
);

793 
	`code˛osuª
(
ls
, 
e
);

794 
	`˛o£_func
(
ls
);

795 
	}
}

798 
	$ex∂i°
 (
LexSèã
 *
ls
, 
expdesc
 *
v
) {

800 
n
 = 1;

801 
	`ex¥
(
ls
, 
v
);

802 
	`ã°√xt
(
ls
, ',')) {

803 
	`luaK_exp2√xåeg
(
ls
->
fs
, 
v
);

804 
	`ex¥
(
ls
, 
v
);

805 
n
++;

807  
n
;

808 
	}
}

811 
	$funˇrgs
 (
LexSèã
 *
ls
, 
expdesc
 *
f
, 
löe
) {

812 
FuncSèã
 *
fs
 = 
ls
->fs;

813 
expdesc
 
¨gs
;

814 
ba£
, 
≈¨ams
;

815 
ls
->
t
.
tokí
) {

817 
	`luaX_√xt
(
ls
);

818 i‡(
ls
->
t
.
tokí
 == ')')

819 
¨gs
.
k
 = 
VVOID
;

821 
	`ex∂i°
(
ls
, &
¨gs
);

822 
	`luaK_£tmu…ªt
(
fs
, &
¨gs
);

824 
	`check_m©ch
(
ls
, ')', '(', 
löe
);

828 
	`c⁄°ru˘‹
(
ls
, &
¨gs
);

831 
TK_STRING
: {

832 
	`code°rög
(
ls
, &
¨gs
,Üs->
t
.
£möfo
.
ts
);

833 
	`luaX_√xt
(
ls
);

837 
	`luaX_sy¡axîr‹
(
ls
, "functionárgumentsÉxpected");

840 
	`lua_as£π
(
f
->
k
 =
VNONRELOC
);

841 
ba£
 = 
f
->
u
.
öfo
;

842 i‡(
	`hasmu…ªt
(
¨gs
.
k
))

843 
≈¨ams
 = 
LUA_MULTRET
;

845 i‡(
¨gs
.
k
 !
VVOID
)

846 
	`luaK_exp2√xåeg
(
fs
, &
¨gs
);

847 
≈¨ams
 = 
fs
->
‰ìªg
 - (
ba£
+1);

849 
	`öô_exp
(
f
, 
VCALL
, 
	`luaK_codeABC
(
fs
, 
OP_CALL
, 
ba£
, 
≈¨ams
+1, 2));

850 
	`luaK_fixlöe
(
fs
, 
löe
);

851 
fs
->
‰ìªg
 = 
ba£
+1;

853 
	}
}

865 
	$¥im¨yexp
 (
LexSèã
 *
ls
, 
expdesc
 *
v
) {

867 
ls
->
t
.
tokí
) {

869 
löe
 = 
ls
->
löíumbî
;

870 
	`luaX_√xt
(
ls
);

871 
	`ex¥
(
ls
, 
v
);

872 
	`check_m©ch
(
ls
, ')', '(', 
löe
);

873 
	`luaK_disch¨gev¨s
(
ls
->
fs
, 
v
);

876 
TK_NAME
: {

877 
	`sögÀv¨
(
ls
, 
v
);

881 
	`luaX_sy¡axîr‹
(
ls
, "unexpected symbol");

884 
	}
}

887 
	$suffixedexp
 (
LexSèã
 *
ls
, 
expdesc
 *
v
) {

890 
FuncSèã
 *
fs
 = 
ls
->fs;

891 
löe
 = 
ls
->
löíumbî
;

892 
	`¥im¨yexp
(
ls
, 
v
);

894 
ls
->
t
.
tokí
) {

896 
	`fõld£l
(
ls
, 
v
);

900 
expdesc
 
key
;

901 
	`luaK_exp2™yªgup
(
fs
, 
v
);

902 
	`yödex
(
ls
, &
key
);

903 
	`luaK_ödexed
(
fs
, 
v
, &
key
);

907 
expdesc
 
key
;

908 
	`luaX_√xt
(
ls
);

909 
	`check«me
(
ls
, &
key
);

910 
	`luaK_£lf
(
fs
, 
v
, &
key
);

911 
	`funˇrgs
(
ls
, 
v
, 
löe
);

914 '(': 
TK_STRING
: '{': {

915 
	`luaK_exp2√xåeg
(
fs
, 
v
);

916 
	`funˇrgs
(
ls
, 
v
, 
löe
);

922 
	}
}

925 
	$sim∂ìxp
 (
LexSèã
 *
ls
, 
expdesc
 *
v
) {

928 
ls
->
t
.
tokí
) {

929 
TK_FLT
: {

930 
	`öô_exp
(
v
, 
VKFLT
, 0);

931 
v
->
u
.
nvÆ
 = 
ls
->
t
.
£möfo
.
r
;

934 
TK_INT
: {

935 
	`öô_exp
(
v
, 
VKINT
, 0);

936 
v
->
u
.
ivÆ
 = 
ls
->
t
.
£möfo
.
i
;

939 
TK_STRING
: {

940 
	`code°rög
(
ls
, 
v
,Üs->
t
.
£möfo
.
ts
);

943 
TK_NIL
: {

944 
	`öô_exp
(
v
, 
VNIL
, 0);

947 
TK_TRUE
: {

948 
	`öô_exp
(
v
, 
VTRUE
, 0);

951 
TK_FALSE
: {

952 
	`öô_exp
(
v
, 
VFALSE
, 0);

955 
TK_DOTS
: {

956 
FuncSèã
 *
fs
 = 
ls
->fs;

957 
	`check_c⁄dôi⁄
(
ls
, 
fs
->
f
->
is_v¨¨g
,

959 
	`öô_exp
(
v
, 
VVARARG
, 
	`luaK_codeABC
(
fs
, 
OP_VARARG
, 0, 1, 0));

963 
	`c⁄°ru˘‹
(
ls
, 
v
);

966 
TK_FUNCTION
: {

967 
	`luaX_√xt
(
ls
);

968 
	`body
(
ls
, 
v
, 0,Üs->
löíumbî
);

972 
	`suffixedexp
(
ls
, 
v
);

976 
	`luaX_√xt
(
ls
);

977 
	}
}

980 
UnO¥
 
	$gëun›r
 (
›
) {

981 
›
) {

982 
TK_NOT
:  
OPR_NOT
;

983 '-':  
OPR_MINUS
;

984 '~':  
OPR_BNOT
;

985 '#':  
OPR_LEN
;

986 :  
OPR_NOUNOPR
;

988 
	}
}

991 
BöO¥
 
	$gëbö›r
 (
›
) {

992 
›
) {

993 '+':  
OPR_ADD
;

994 '-':  
OPR_SUB
;

995 '*':  
OPR_MUL
;

996 '%':  
OPR_MOD
;

997 '^':  
OPR_POW
;

998 '/':  
OPR_DIV
;

999 
TK_IDIV
:  
OPR_IDIV
;

1000 '&':  
OPR_BAND
;

1001 '|':  
OPR_BOR
;

1002 '~':  
OPR_BXOR
;

1003 
TK_SHL
:  
OPR_SHL
;

1004 
TK_SHR
:  
OPR_SHR
;

1005 
TK_CONCAT
:  
OPR_CONCAT
;

1006 
TK_NE
:  
OPR_NE
;

1007 
TK_EQ
:  
OPR_EQ
;

1008 '<':  
OPR_LT
;

1009 
TK_LE
:  
OPR_LE
;

1010 '>':  
OPR_GT
;

1011 
TK_GE
:  
OPR_GE
;

1012 
TK_AND
:  
OPR_AND
;

1013 
TK_OR
:  
OPR_OR
;

1014 :  
OPR_NOBINOPR
;

1016 
	}
}

1020 
lu_byã
 
	mÀ·
;

1021 
lu_byã
 
	mright
;

1022 } 
	g¥i‹ôy
[] = {

1035 
	#UNARY_PRIORITY
 12

	)

1042 
BöO¥
 
	$subex¥
 (
LexSèã
 *
ls
, 
expdesc
 *
v
, 
limô
) {

1043 
BöO¥
 
›
;

1044 
UnO¥
 
u›
;

1045 
	`íãæevñ
(
ls
);

1046 
u›
 = 
	`gëun›r
(
ls
->
t
.
tokí
);

1047 i‡(
u›
 !
OPR_NOUNOPR
) {

1048 
löe
 = 
ls
->
löíumbî
;

1049 
	`luaX_√xt
(
ls
);

1050 
	`subex¥
(
ls
, 
v
, 
UNARY_PRIORITY
);

1051 
	`luaK_¥efix
(
ls
->
fs
, 
u›
, 
v
, 
löe
);

1053 
	`sim∂ìxp
(
ls
, 
v
);

1055 
›
 = 
	`gëbö›r
(
ls
->
t
.
tokí
);

1056 
›
 !
OPR_NOBINOPR
 && 
¥i‹ôy
[›].
À·
 > 
limô
) {

1057 
expdesc
 
v2
;

1058 
BöO¥
 
√xt›
;

1059 
löe
 = 
ls
->
löíumbî
;

1060 
	`luaX_√xt
(
ls
);

1061 
	`luaK_öfix
(
ls
->
fs
, 
›
, 
v
);

1063 
√xt›
 = 
	`subex¥
(
ls
, &
v2
, 
¥i‹ôy
[
›
].
right
);

1064 
	`luaK_posfix
(
ls
->
fs
, 
›
, 
v
, &
v2
, 
löe
);

1065 
›
 = 
√xt›
;

1067 
	`Àavñevñ
(
ls
);

1068  
›
;

1069 
	}
}

1072 
	$ex¥
 (
LexSèã
 *
ls
, 
expdesc
 *
v
) {

1073 
	`subex¥
(
ls
, 
v
, 0);

1074 
	}
}

1087 
	$block
 (
LexSèã
 *
ls
) {

1089 
FuncSèã
 *
fs
 = 
ls
->fs;

1090 
BlockC¡
 
bl
;

1091 
	`íãrblock
(
fs
, &
bl
, 0);

1092 
	`°©li°
(
ls
);

1093 
	`Àaveblock
(
fs
);

1094 
	}
}

1101 
	sLHS_assign
 {

1102 
LHS_assign
 *
	m¥ev
;

1103 
expdesc
 
	mv
;

1113 
	$check_c⁄Êi˘
 (
LexSèã
 *
ls
, 
LHS_assign
 *
lh
, 
expdesc
 *
v
) {

1114 
FuncSèã
 *
fs
 = 
ls
->fs;

1115 
exåa
 = 
fs
->
‰ìªg
;

1116 
c⁄Êi˘
 = 0;

1117 ; 
lh
;Üh =Üh->
¥ev
) {

1118 i‡(
lh
->
v
.
k
 =
VINDEXED
) {

1120 i‡(
lh
->
v
.
u
.
öd
.
vt
 =v->
k
 &&Üh->v.u.öd.
t
 =v->u.
öfo
) {

1121 
c⁄Êi˘
 = 1;

1122 
lh
->
v
.
u
.
öd
.
vt
 = 
VLOCAL
;

1123 
lh
->
v
.
u
.
öd
.
t
 = 
exåa
;

1126 i‡(
v
->
k
 =
VLOCAL
 && 
lh
->v.
u
.
öd
.
idx
 =v->u.
öfo
) {

1127 
c⁄Êi˘
 = 1;

1128 
lh
->
v
.
u
.
öd
.
idx
 = 
exåa
;

1132 i‡(
c⁄Êi˘
) {

1134 
OpCode
 
›
 = (
v
->
k
 =
VLOCAL
Ë? 
OP_MOVE
 : 
OP_GETUPVAL
;

1135 
	`luaK_codeABC
(
fs
, 
›
, 
exåa
, 
v
->
u
.
öfo
, 0);

1136 
	`luaK_ª£rvîegs
(
fs
, 1);

1138 
	}
}

1141 
	$assignmít
 (
LexSèã
 *
ls
, 
LHS_assign
 *
lh
, 
nv¨s
) {

1142 
expdesc
 
e
;

1143 
	`check_c⁄dôi⁄
(
ls
, 
	`vkisv¨
(
lh
->
v
.
k
), "syntaxÉrror");

1144 i‡(
	`ã°√xt
(
ls
, ',')) {

1145 
LHS_assign
 
nv
;

1146 
nv
.
¥ev
 = 
lh
;

1147 
	`suffixedexp
(
ls
, &
nv
.
v
);

1148 i‡(
nv
.
v
.
k
 !
VINDEXED
)

1149 
	`check_c⁄Êi˘
(
ls
, 
lh
, &
nv
.
v
);

1150 
	`checklimô
(
ls
->
fs
, 
nv¨s
 +Üs->
L
->
nCˇŒs
, 
LUAI_MAXCCALLS
,

1152 
	`assignmít
(
ls
, &
nv
, 
nv¨s
+1);

1155 
√xps
;

1156 
	`check√xt
(
ls
, '=');

1157 
√xps
 = 
	`ex∂i°
(
ls
, &
e
);

1158 i‡(
√xps
 !
nv¨s
) {

1159 
	`adju°_assign
(
ls
, 
nv¨s
, 
√xps
, &
e
);

1160 i‡(
√xps
 > 
nv¨s
)

1161 
ls
->
fs
->
‰ìªg
 -
√xps
 - 
nv¨s
;

1164 
	`luaK_£t⁄îë
(
ls
->
fs
, &
e
);

1165 
	`luaK_°‹ev¨
(
ls
->
fs
, &
lh
->
v
, &
e
);

1169 
	`öô_exp
(&
e
, 
VNONRELOC
, 
ls
->
fs
->
‰ìªg
-1);

1170 
	`luaK_°‹ev¨
(
ls
->
fs
, &
lh
->
v
, &
e
);

1171 
	}
}

1174 
	$c⁄d
 (
LexSèã
 *
ls
) {

1176 
expdesc
 
v
;

1177 
	`ex¥
(
ls
, &
v
);

1178 i‡(
v
.
k
 =
VNIL
Ëv.k = 
VFALSE
;

1179 
	`luaK_goi·rue
(
ls
->
fs
, &
v
);

1180  
v
.
f
;

1181 
	}
}

1184 
	$gŸo°©
 (
LexSèã
 *
ls
, 
pc
) {

1185 
löe
 = 
ls
->
löíumbî
;

1186 
TSåög
 *
œbñ
;

1187 
g
;

1188 i‡(
	`ã°√xt
(
ls
, 
TK_GOTO
))

1189 
œbñ
 = 
	`°r_check«me
(
ls
);

1191 
	`luaX_√xt
(
ls
);

1192 
œbñ
 = 
	`luaS_√w
(
ls
->
L
, "break");

1194 
g
 = 
	`√wœbñíåy
(
ls
, &ls->
dyd
->
gt
, 
œbñ
, 
löe
, 
pc
);

1195 
	`födœbñ
(
ls
, 
g
);

1196 
	}
}

1200 
	$checkª≥©ed
 (
FuncSèã
 *
fs
, 
Labñli°
 *
Œ
, 
TSåög
 *
œbñ
) {

1201 
i
;

1202 
i
 = 
fs
->
bl
->
fú°œbñ
; i < 
Œ
->
n
; i++) {

1203 i‡(
	`eq°r
(
œbñ
, 
Œ
->
¨r
[
i
].
«me
)) {

1204 c⁄° *
msg
 = 
	`luaO_pushf°rög
(
fs
->
ls
->
L
,

1206 
	`gë°r
(
œbñ
), 
Œ
->
¨r
[
i
].
löe
);

1207 
	`£mîr‹
(
fs
->
ls
, 
msg
);

1210 
	}
}

1214 
	$skùno›°©
 (
LexSèã
 *
ls
) {

1215 
ls
->
t
.
tokí
 =';' ||Üs->t.tokí =
TK_DBCOLON
)

1216 
	`°©emít
(
ls
);

1217 
	}
}

1220 
	$œbñ°©
 (
LexSèã
 *
ls
, 
TSåög
 *
œbñ
, 
löe
) {

1222 
FuncSèã
 *
fs
 = 
ls
->fs;

1223 
Labñli°
 *
Œ
 = &
ls
->
dyd
->
œbñ
;

1224 
l
;

1225 
	`checkª≥©ed
(
fs
, 
Œ
, 
œbñ
);

1226 
	`check√xt
(
ls
, 
TK_DBCOLON
);

1228 
l
 = 
	`√wœbñíåy
(
ls
, 
Œ
, 
œbñ
, 
löe
, 
fs
->
pc
);

1229 
	`skùno›°©
(
ls
);

1230 i‡(
	`block_fﬁlow
(
ls
, 0)) {

1232 
Œ
->
¨r
[
l
].
«˘v¨
 = 
fs
->
bl
->nactvar;

1234 
	`födgŸos
(
ls
, &
Œ
->
¨r
[
l
]);

1235 
	}
}

1238 
	$whûe°©
 (
LexSèã
 *
ls
, 
löe
) {

1240 
FuncSèã
 *
fs
 = 
ls
->fs;

1241 
whûeöô
;

1242 
c⁄dexô
;

1243 
BlockC¡
 
bl
;

1244 
	`luaX_√xt
(
ls
);

1245 
whûeöô
 = 
	`luaK_gëœbñ
(
fs
);

1246 
c⁄dexô
 = 
	`c⁄d
(
ls
);

1247 
	`íãrblock
(
fs
, &
bl
, 1);

1248 
	`check√xt
(
ls
, 
TK_DO
);

1249 
	`block
(
ls
);

1250 
	`luaK_jum±o
(
fs
, 
whûeöô
);

1251 
	`check_m©ch
(
ls
, 
TK_END
, 
TK_WHILE
, 
löe
);

1252 
	`Àaveblock
(
fs
);

1253 
	`luaK_∑tchtohîe
(
fs
, 
c⁄dexô
);

1254 
	}
}

1257 
	$ª≥©°©
 (
LexSèã
 *
ls
, 
löe
) {

1259 
c⁄dexô
;

1260 
FuncSèã
 *
fs
 = 
ls
->fs;

1261 
ª≥©_öô
 = 
	`luaK_gëœbñ
(
fs
);

1262 
BlockC¡
 
bl1
, 
bl2
;

1263 
	`íãrblock
(
fs
, &
bl1
, 1);

1264 
	`íãrblock
(
fs
, &
bl2
, 0);

1265 
	`luaX_√xt
(
ls
);

1266 
	`°©li°
(
ls
);

1267 
	`check_m©ch
(
ls
, 
TK_UNTIL
, 
TK_REPEAT
, 
löe
);

1268 
c⁄dexô
 = 
	`c⁄d
(
ls
);

1269 i‡(
bl2
.
upvÆ
)

1270 
	`luaK_∑tch˛o£
(
fs
, 
c⁄dexô
, 
bl2
.
«˘v¨
);

1271 
	`Àaveblock
(
fs
);

1272 
	`luaK_∑tchli°
(
fs
, 
c⁄dexô
, 
ª≥©_öô
);

1273 
	`Àaveblock
(
fs
);

1274 
	}
}

1277 
	$exp1
 (
LexSèã
 *
ls
) {

1278 
expdesc
 
e
;

1279 
ªg
;

1280 
	`ex¥
(
ls
, &
e
);

1281 
	`luaK_exp2√xåeg
(
ls
->
fs
, &
e
);

1282 
	`lua_as£π
(
e
.
k
 =
VNONRELOC
);

1283 
ªg
 = 
e
.
u
.
öfo
;

1284  
ªg
;

1285 
	}
}

1288 
	$f‹body
 (
LexSèã
 *
ls
, 
ba£
, 
löe
, 
nv¨s
, 
i¢um
) {

1290 
BlockC¡
 
bl
;

1291 
FuncSèã
 *
fs
 = 
ls
->fs;

1292 
¥ï
, 
ídf‹
;

1293 
	`adju°loˇlv¨s
(
ls
, 3);

1294 
	`check√xt
(
ls
, 
TK_DO
);

1295 
¥ï
 = 
i¢um
 ? 
	`luaK_codeAsBx
(
fs
, 
OP_FORPREP
, 
ba£
, 
NO_JUMP
Ë: 
	`luaK_jump
(fs);

1296 
	`íãrblock
(
fs
, &
bl
, 0);

1297 
	`adju°loˇlv¨s
(
ls
, 
nv¨s
);

1298 
	`luaK_ª£rvîegs
(
fs
, 
nv¨s
);

1299 
	`block
(
ls
);

1300 
	`Àaveblock
(
fs
);

1301 
	`luaK_∑tchtohîe
(
fs
, 
¥ï
);

1302 i‡(
i¢um
)

1303 
ídf‹
 = 
	`luaK_codeAsBx
(
fs
, 
OP_FORLOOP
, 
ba£
, 
NO_JUMP
);

1305 
	`luaK_codeABC
(
fs
, 
OP_TFORCALL
, 
ba£
, 0, 
nv¨s
);

1306 
	`luaK_fixlöe
(
fs
, 
löe
);

1307 
ídf‹
 = 
	`luaK_codeAsBx
(
fs
, 
OP_TFORLOOP
, 
ba£
 + 2, 
NO_JUMP
);

1309 
	`luaK_∑tchli°
(
fs
, 
ídf‹
, 
¥ï
 + 1);

1310 
	`luaK_fixlöe
(
fs
, 
löe
);

1311 
	}
}

1314 
	$f‹num
 (
LexSèã
 *
ls
, 
TSåög
 *
v¨«me
, 
löe
) {

1316 
FuncSèã
 *
fs
 = 
ls
->fs;

1317 
ba£
 = 
fs
->
‰ìªg
;

1318 
	`√w_loˇlv¨lôîÆ
(
ls
, "(for index)");

1319 
	`√w_loˇlv¨lôîÆ
(
ls
, "(forÜimit)");

1320 
	`√w_loˇlv¨lôîÆ
(
ls
, "(for step)");

1321 
	`√w_loˇlv¨
(
ls
, 
v¨«me
);

1322 
	`check√xt
(
ls
, '=');

1323 
	`exp1
(
ls
);

1324 
	`check√xt
(
ls
, ',');

1325 
	`exp1
(
ls
);

1326 i‡(
	`ã°√xt
(
ls
, ','))

1327 
	`exp1
(
ls
);

1329 
	`luaK_codek
(
fs
, fs->
‰ìªg
, 
	`luaK_ötK
(fs, 1));

1330 
	`luaK_ª£rvîegs
(
fs
, 1);

1332 
	`f‹body
(
ls
, 
ba£
, 
löe
, 1, 1);

1333 
	}
}

1336 
	$f‹li°
 (
LexSèã
 *
ls
, 
TSåög
 *
ödex«me
) {

1338 
FuncSèã
 *
fs
 = 
ls
->fs;

1339 
expdesc
 
e
;

1340 
nv¨s
 = 4;

1341 
löe
;

1342 
ba£
 = 
fs
->
‰ìªg
;

1344 
	`√w_loˇlv¨lôîÆ
(
ls
, "(for generator)");

1345 
	`√w_loˇlv¨lôîÆ
(
ls
, "(for state)");

1346 
	`√w_loˇlv¨lôîÆ
(
ls
, "(for control)");

1348 
	`√w_loˇlv¨
(
ls
, 
ödex«me
);

1349 
	`ã°√xt
(
ls
, ',')) {

1350 
	`√w_loˇlv¨
(
ls
, 
	`°r_check«me
(ls));

1351 
nv¨s
++;

1353 
	`check√xt
(
ls
, 
TK_IN
);

1354 
löe
 = 
ls
->
löíumbî
;

1355 
	`adju°_assign
(
ls
, 3, 
	`ex∂i°
÷s, &
e
), &e);

1356 
	`luaK_check°ack
(
fs
, 3);

1357 
	`f‹body
(
ls
, 
ba£
, 
löe
, 
nv¨s
 - 3, 0);

1358 
	}
}

1361 
	$f‹°©
 (
LexSèã
 *
ls
, 
löe
) {

1363 
FuncSèã
 *
fs
 = 
ls
->fs;

1364 
TSåög
 *
v¨«me
;

1365 
BlockC¡
 
bl
;

1366 
	`íãrblock
(
fs
, &
bl
, 1);

1367 
	`luaX_√xt
(
ls
);

1368 
v¨«me
 = 
	`°r_check«me
(
ls
);

1369 
ls
->
t
.
tokí
) {

1370 '=': 
	`f‹num
(
ls
, 
v¨«me
, 
löe
); ;

1371 ',': 
TK_IN
: 
	`f‹li°
(
ls
, 
v¨«me
); ;

1372 : 
	`luaX_sy¡axîr‹
(
ls
, "'=' or 'in'Éxpected");

1374 
	`check_m©ch
(
ls
, 
TK_END
, 
TK_FOR
, 
löe
);

1375 
	`Àaveblock
(
fs
);

1376 
	}
}

1379 
	$ã°_thí_block
 (
LexSèã
 *
ls
, *
esˇ≥li°
) {

1381 
BlockC¡
 
bl
;

1382 
FuncSèã
 *
fs
 = 
ls
->fs;

1383 
expdesc
 
v
;

1384 
jf
;

1385 
	`luaX_√xt
(
ls
);

1386 
	`ex¥
(
ls
, &
v
);

1387 
	`check√xt
(
ls
, 
TK_THEN
);

1388 i‡(
ls
->
t
.
tokí
 =
TK_GOTO
 ||Üs->t.tokí =
TK_BREAK
) {

1389 
	`luaK_goifÁl£
(
ls
->
fs
, &
v
);

1390 
	`íãrblock
(
fs
, &
bl
, 0);

1391 
	`gŸo°©
(
ls
, 
v
.
t
);

1392 
	`skùno›°©
(
ls
);

1393 i‡(
	`block_fﬁlow
(
ls
, 0)) {

1394 
	`Àaveblock
(
fs
);

1398 
jf
 = 
	`luaK_jump
(
fs
);

1401 
	`luaK_goi·rue
(
ls
->
fs
, &
v
);

1402 
	`íãrblock
(
fs
, &
bl
, 0);

1403 
jf
 = 
v
.
f
;

1405 
	`°©li°
(
ls
);

1406 
	`Àaveblock
(
fs
);

1407 i‡(
ls
->
t
.
tokí
 =
TK_ELSE
 ||

1408 
ls
->
t
.
tokí
 =
TK_ELSEIF
)

1409 
	`luaK_c⁄ˇt
(
fs
, 
esˇ≥li°
, 
	`luaK_jump
(fs));

1410 
	`luaK_∑tchtohîe
(
fs
, 
jf
);

1411 
	}
}

1414 
	$if°©
 (
LexSèã
 *
ls
, 
löe
) {

1416 
FuncSèã
 *
fs
 = 
ls
->fs;

1417 
esˇ≥li°
 = 
NO_JUMP
;

1418 
	`ã°_thí_block
(
ls
, &
esˇ≥li°
);

1419 
ls
->
t
.
tokí
 =
TK_ELSEIF
)

1420 
	`ã°_thí_block
(
ls
, &
esˇ≥li°
);

1421 i‡(
	`ã°√xt
(
ls
, 
TK_ELSE
))

1422 
	`block
(
ls
);

1423 
	`check_m©ch
(
ls
, 
TK_END
, 
TK_IF
, 
löe
);

1424 
	`luaK_∑tchtohîe
(
fs
, 
esˇ≥li°
);

1425 
	}
}

1428 
	$loˇlfunc
 (
LexSèã
 *
ls
) {

1429 
expdesc
 
b
;

1430 
FuncSèã
 *
fs
 = 
ls
->fs;

1431 
	`√w_loˇlv¨
(
ls
, 
	`°r_check«me
(ls));

1432 
	`adju°loˇlv¨s
(
ls
, 1);

1433 
	`body
(
ls
, &
b
, 0,Üs->
löíumbî
);

1435 
	`gëlocv¨
(
fs
, 
b
.
u
.
öfo
)->
°¨çc
 = fs->
pc
;

1436 
	}
}

1439 
	$loˇl°©
 (
LexSèã
 *
ls
) {

1441 
nv¨s
 = 0;

1442 
√xps
;

1443 
expdesc
 
e
;

1445 
	`√w_loˇlv¨
(
ls
, 
	`°r_check«me
(ls));

1446 
nv¨s
++;

1447 } 
	`ã°√xt
(
ls
, ','));

1448 i‡(
	`ã°√xt
(
ls
, '='))

1449 
√xps
 = 
	`ex∂i°
(
ls
, &
e
);

1451 
e
.
k
 = 
VVOID
;

1452 
√xps
 = 0;

1454 
	`adju°_assign
(
ls
, 
nv¨s
, 
√xps
, &
e
);

1455 
	`adju°loˇlv¨s
(
ls
, 
nv¨s
);

1456 
	}
}

1459 
	$fun˙ame
 (
LexSèã
 *
ls
, 
expdesc
 *
v
) {

1461 
ismëhod
 = 0;

1462 
	`sögÀv¨
(
ls
, 
v
);

1463 
ls
->
t
.
tokí
 == '.')

1464 
	`fõld£l
(
ls
, 
v
);

1465 i‡(
ls
->
t
.
tokí
 == ':') {

1466 
ismëhod
 = 1;

1467 
	`fõld£l
(
ls
, 
v
);

1469  
ismëhod
;

1470 
	}
}

1473 
	$func°©
 (
LexSèã
 *
ls
, 
löe
) {

1475 
ismëhod
;

1476 
expdesc
 
v
, 
b
;

1477 
	`luaX_√xt
(
ls
);

1478 
ismëhod
 = 
	`fun˙ame
(
ls
, &
v
);

1479 
	`body
(
ls
, &
b
, 
ismëhod
, 
löe
);

1480 
	`luaK_°‹ev¨
(
ls
->
fs
, &
v
, &
b
);

1481 
	`luaK_fixlöe
(
ls
->
fs
, 
löe
);

1482 
	}
}

1485 
	$ex¥°©
 (
LexSèã
 *
ls
) {

1487 
FuncSèã
 *
fs
 = 
ls
->fs;

1488 
LHS_assign
 
v
;

1489 
	`suffixedexp
(
ls
, &
v
.v);

1490 i‡(
ls
->
t
.
tokí
 == '=' ||Üs->t.token == ',') {

1491 
v
.
¥ev
 = 
NULL
;

1492 
	`assignmít
(
ls
, &
v
, 1);

1495 
	`check_c⁄dôi⁄
(
ls
, 
v
.v.
k
 =
VCALL
, "syntaxÉrror");

1496 
	`SETARG_C
(
	`gëcode
(
fs
, &
v
.v), 1);

1498 
	}
}

1501 
	$ªt°©
 (
LexSèã
 *
ls
) {

1503 
FuncSèã
 *
fs
 = 
ls
->fs;

1504 
expdesc
 
e
;

1505 
fú°
, 
ƒë
;

1506 i‡(
	`block_fﬁlow
(
ls
, 1Ë||Üs->
t
.
tokí
 == ';')

1507 
fú°
 = 
ƒë
 = 0;

1509 
ƒë
 = 
	`ex∂i°
(
ls
, &
e
);

1510 i‡(
	`hasmu…ªt
(
e
.
k
)) {

1511 
	`luaK_£tmu…ªt
(
fs
, &
e
);

1512 i‡(
e
.
k
 =
VCALL
 && 
ƒë
 == 1) {

1513 
	`SET_OPCODE
(
	`gëcode
(
fs
,&
e
), 
OP_TAILCALL
);

1514 
	`lua_as£π
(
	`GETARG_A
(
	`gëcode
(
fs
,&
e
)Ë=fs->
«˘v¨
);

1516 
fú°
 = 
fs
->
«˘v¨
;

1517 
ƒë
 = 
LUA_MULTRET
;

1520 i‡(
ƒë
 == 1)

1521 
fú°
 = 
	`luaK_exp2™yªg
(
fs
, &
e
);

1523 
	`luaK_exp2√xåeg
(
fs
, &
e
);

1524 
fú°
 = 
fs
->
«˘v¨
;

1525 
	`lua_as£π
(
ƒë
 =
fs
->
‰ìªg
 - 
fú°
);

1529 
	`luaK_ªt
(
fs
, 
fú°
, 
ƒë
);

1530 
	`ã°√xt
(
ls
, ';');

1531 
	}
}

1534 
	$°©emít
 (
LexSèã
 *
ls
) {

1535 
löe
 = 
ls
->
löíumbî
;

1536 
	`íãæevñ
(
ls
);

1537 
ls
->
t
.
tokí
) {

1539 
	`luaX_√xt
(
ls
);

1542 
TK_IF
: {

1543 
	`if°©
(
ls
, 
löe
);

1546 
TK_WHILE
: {

1547 
	`whûe°©
(
ls
, 
löe
);

1550 
TK_DO
: {

1551 
	`luaX_√xt
(
ls
);

1552 
	`block
(
ls
);

1553 
	`check_m©ch
(
ls
, 
TK_END
, 
TK_DO
, 
löe
);

1556 
TK_FOR
: {

1557 
	`f‹°©
(
ls
, 
löe
);

1560 
TK_REPEAT
: {

1561 
	`ª≥©°©
(
ls
, 
löe
);

1564 
TK_FUNCTION
: {

1565 
	`func°©
(
ls
, 
löe
);

1568 
TK_LOCAL
: {

1569 
	`luaX_√xt
(
ls
);

1570 i‡(
	`ã°√xt
(
ls
, 
TK_FUNCTION
))

1571 
	`loˇlfunc
(
ls
);

1573 
	`loˇl°©
(
ls
);

1576 
TK_DBCOLON
: {

1577 
	`luaX_√xt
(
ls
);

1578 
	`œbñ°©
(
ls
, 
	`°r_check«me
÷s), 
löe
);

1581 
TK_RETURN
: {

1582 
	`luaX_√xt
(
ls
);

1583 
	`ªt°©
(
ls
);

1586 
TK_BREAK
:

1587 
TK_GOTO
: {

1588 
	`gŸo°©
(
ls
, 
	`luaK_jump
÷s->
fs
));

1592 
	`ex¥°©
(
ls
);

1596 
	`lua_as£π
(
ls
->
fs
->
f
->
max°acksize
 >ls->fs->
‰ìªg
 &&

1597 
ls
->
fs
->
‰ìªg
 >ls->fs->
«˘v¨
);

1598 
ls
->
fs
->
‰ìªg
 =Üs->fs->
«˘v¨
;

1599 
	`Àavñevñ
(
ls
);

1600 
	}
}

1609 
	$maöfunc
 (
LexSèã
 *
ls
, 
FuncSèã
 *
fs
) {

1610 
BlockC¡
 
bl
;

1611 
expdesc
 
v
;

1612 
	`›í_func
(
ls
, 
fs
, &
bl
);

1613 
fs
->
f
->
is_v¨¨g
 = 1;

1614 
	`öô_exp
(&
v
, 
VLOCAL
, 0);

1615 
	`√wupvÆue
(
fs
, 
ls
->
ívn
, &
v
);

1616 
	`luaX_√xt
(
ls
);

1617 
	`°©li°
(
ls
);

1618 
	`check
(
ls
, 
TK_EOS
);

1619 
	`˛o£_func
(
ls
);

1620 
	}
}

1623 
LClosuª
 *
	$luaY_∑r£r
 (
lua_Sèã
 *
L
, 
ZIO
 *
z
, 
Mbuf„r
 *
buff
,

1624 
Dynd©a
 *
dyd
, c⁄° *
«me
, 
fú°ch¨
) {

1625 
LexSèã
 
Àx°©e
;

1626 
FuncSèã
 
func°©e
;

1627 
LClosuª
 *
˛
 = 
	`luaF_√wL˛osuª
(
L
, 1);

1628 
	`£t˛LvÆue
(
L
, L->
t›
, 
˛
);

1629 
	`ö¸_t›
(
L
);

1630 
Àx°©e
.
h
 = 
	`luaH_√w
(
L
);

1631 
	`£thvÆue
(
L
, L->
t›
, 
Àx°©e
.
h
);

1632 
	`ö¸_t›
(
L
);

1633 
func°©e
.
f
 = 
˛
->
p
 = 
	`luaF_√w¥Ÿo
(
L
);

1634 
func°©e
.
f
->
sour˚
 = 
	`luaS_√w
(
L
, 
«me
);

1635 
	`lua_as£π
(
	`iswhôe
(
func°©e
.
f
));

1636 
Àx°©e
.
buff
 = buff;

1637 
Àx°©e
.
dyd
 = dyd;

1638 
dyd
->
a˘v¨
.
n
 = dyd->
gt
.¿dyd->
œbñ
.n = 0;

1639 
	`luaX_£töput
(
L
, &
Àx°©e
, 
z
, 
func°©e
.
f
->
sour˚
, 
fú°ch¨
);

1640 
	`maöfunc
(&
Àx°©e
, &
func°©e
);

1641 
	`lua_as£π
(!
func°©e
.
¥ev
 && func°©e.
nups
 =1 && !
Àx°©e
.
fs
);

1643 
	`lua_as£π
(
dyd
->
a˘v¨
.
n
 =0 && dyd->
gt
.¿=0 && dyd->
œbñ
.n == 0);

1644 
L
->
t›
--;

1645  
˛
;

1646 
	}
}

	@lib/archive/lua-5.3.0/src/lparser.h

7 #i‚de‡
Õ¨£r_h


8 
	#Õ¨£r_h


	)

10 
	~"Œimôs.h
"

11 
	~"lobje˘.h
"

12 
	~"lzio.h
"

20 
	mVVOID
,

21 
	mVNIL
,

22 
	mVTRUE
,

23 
	mVFALSE
,

24 
	mVK
,

25 
	mVKFLT
,

26 
	mVKINT
,

27 
	mVNONRELOC
,

28 
	mVLOCAL
,

29 
	mVUPVAL
,

30 
	mVINDEXED
,

31 
	mVJMP
,

32 
	mVRELOCABLE
,

33 
	mVCALL
,

34 
	mVVARARG


35 } 
	texpköd
;

38 
	#vkisv¨
(
k
Ë(
VLOCAL
 <(kË&& (kË<
VINDEXED
)

	)

39 
	#vkisöªg
(
k
Ë((kË=
VNONRELOC
 || (kË=
VLOCAL
)

	)

41 
	sexpdesc
 {

42 
expköd
 
	mk
;

45 
	midx
;

46 
lu_byã
 
	mt
;

47 
lu_byã
 
	mvt
;

48 } 
	möd
;

49 
	möfo
;

50 
lua_Numbî
 
	mnvÆ
;

51 
lua_I¡egî
 
	mivÆ
;

52 } 
	mu
;

53 
	mt
;

54 
	mf
;

55 } 
	texpdesc
;

59 
	sV¨desc
 {

60 
	midx
;

61 } 
	tV¨desc
;

65 
	sLabñdesc
 {

66 
TSåög
 *
	m«me
;

67 
	mpc
;

68 
	mlöe
;

69 
lu_byã
 
	m«˘v¨
;

70 } 
	tLabñdesc
;

74 
	sLabñli°
 {

75 
Labñdesc
 *
	m¨r
;

76 
	mn
;

77 
	msize
;

78 } 
	tLabñli°
;

82 
	sDynd©a
 {

84 
V¨desc
 *
	m¨r
;

85 
	mn
;

86 
	msize
;

87 } 
	ma˘v¨
;

88 
Labñli°
 
	mgt
;

89 
Labñli°
 
	mœbñ
;

90 } 
	tDynd©a
;

94 
	gBlockC¡
;

98 
	sFuncSèã
 {

99 
PrŸo
 *
	mf
;

100 
FuncSèã
 *
	m¥ev
;

101 
LexSèã
 *
	mls
;

102 
BlockC¡
 *
	mbl
;

103 
	mpc
;

104 
	mœ°èrgë
;

105 
	mjpc
;

106 
	mnk
;

107 
	m≈
;

108 
	mfú°loˇl
;

109 
	m∆ocv¨s
;

110 
lu_byã
 
	m«˘v¨
;

111 
lu_byã
 
	mnups
;

112 
lu_byã
 
	m‰ìªg
;

113 } 
	tFuncSèã
;

116 
LUAI_FUNC
 
LClosuª
 *
luaY_∑r£r
 (
lua_Sèã
 *
L
, 
ZIO
 *
z
, 
Mbuf„r
 *
buff
,

117 
Dynd©a
 *
dyd
, c⁄° *
«me
, 
fú°ch¨
);

	@lib/archive/lua-5.3.0/src/lprefix.h

7 #i‚de‡
Õªfix_h


8 
	#Õªfix_h


	)

14 #i‡!
deföed
(
LUA_USE_C89
)

16 #i‡!
deföed
(
_XOPEN_SOURCE
)

17 
	#_XOPEN_SOURCE
 600

	)

18 #ñi‡
_XOPEN_SOURCE
 == 0

19 #unde‡
_XOPEN_SOURCE


25 #i‡!
deföed
(
LUA_32BITS
Ë&& !deföed(
_FILE_OFFSET_BITS
)

26 
	#_LARGEFILE_SOURCE
 1

	)

27 
	#_FILE_OFFSET_BITS
 64

	)

36 #i‡
deföed
(
_WIN32
)

38 #i‡!
deföed
(
_CRT_SECURE_NO_WARNINGS
)

39 
	#_CRT_SECURE_NO_WARNINGS


	)

	@lib/archive/lua-5.3.0/src/lstate.c

7 
	#l°©e_c


	)

8 
	#LUA_CORE


	)

10 
	~"Õªfix.h
"

13 
	~<°ddef.h
>

14 
	~<°rög.h
>

16 
	~"lua.h
"

18 
	~"œpi.h
"

19 
	~"ldebug.h
"

20 
	~"ldo.h
"

21 
	~"lfunc.h
"

22 
	~"lgc.h
"

23 
	~"Œex.h
"

24 
	~"lmem.h
"

25 
	~"l°©e.h
"

26 
	~"l°rög.h
"

27 
	~"…abÀ.h
"

28 
	~"…m.h
"

31 #i‡!
deföed
(
LUAI_GCPAUSE
)

32 
	#LUAI_GCPAUSE
 200

	)

35 #i‡!
deföed
(
LUAI_GCMUL
)

36 
	#LUAI_GCMUL
 200

	)

40 
	#MEMERRMSG
 "nŸÉnough mem‹y"

	)

47 #i‡!
deföed
(
luai_make£ed
)

48 
	~<time.h
>

49 
	#luai_make£ed
(Ë
	`ˇ°
(, 
	`time
(
NULL
))

	)

57 
	sLX
 {

58 
lu_byã
 
	mexåa_
[
LUA_EXTRASPACE
];

59 
lua_Sèã
 
	ml
;

60 } 
	tLX
;

66 
	sLG
 {

67 
LX
 
	ml
;

68 
globÆ_Sèã
 
	mg
;

69 } 
	tLG
;

73 
	#‰om°©e
(
L
Ë(
	`ˇ°
(
LX
 *, ca°(
lu_byã
 *, (L)Ë- 
	`off£tof
(LX, 
l
)))

	)

80 
	#addbuff
(
b
,
p
,
e
) \

81 { 
size_t
 
t
 = 
	`ˇ°
(size_t, 
e
); \

82 
	`mem˝y
(
buff
 + 
p
, &
t
, —));Ö +—); }

	)

84 
	$make£ed
 (
lua_Sèã
 *
L
) {

85 
buff
[4 * (
size_t
)];

86 
h
 = 
	`luai_make£ed
();

87 
p
 = 0;

88 
	`addbuff
(
buff
, 
p
, 
L
);

89 
	`addbuff
(
buff
, 
p
, &
h
);

90 
	`addbuff
(
buff
, 
p
, 
luaO_nûobje˘
);

91 
	`addbuff
(
buff
, 
p
, &
lua_√w°©e
);

92 
	`lua_as£π
(
p
 =(
buff
));

93  
	`luaS_hash
(
buff
, 
p
, 
h
);

94 
	}
}

101 
	$luaE_£tdebt
 (
globÆ_Sèã
 *
g
, 
l_mem
 
debt
) {

102 
g
->
tŸÆbyãs
 -(
debt
 - g->
GCdebt
);

103 
g
->
GCdebt
 = 
debt
;

104 
	}
}

107 
CÆlInfo
 *
	$luaE_exãndCI
 (
lua_Sèã
 *
L
) {

108 
CÆlInfo
 *
ci
 = 
	`luaM_√w
(
L
, CallInfo);

109 
	`lua_as£π
(
L
->
ci
->
√xt
 =
NULL
);

110 
L
->
ci
->
√xt
 = ci;

111 
ci
->
¥evious
 = 
L
->ci;

112 
ci
->
√xt
 = 
NULL
;

113  
ci
;

114 
	}
}

120 
	$luaE_‰ìCI
 (
lua_Sèã
 *
L
) {

121 
CÆlInfo
 *
ci
 = 
L
->ci;

122 
CÆlInfo
 *
√xt
 = 
ci
->next;

123 
ci
->
√xt
 = 
NULL
;

124 (
ci
 = 
√xt
Ë!
NULL
) {

125 
√xt
 = 
ci
->next;

126 
	`luaM_‰ì
(
L
, 
ci
);

128 
	}
}

134 
	$luaE_shrökCI
 (
lua_Sèã
 *
L
) {

135 
CÆlInfo
 *
ci
 = 
L
->ci;

136 
ci
->
√xt
 !
NULL
) {

137 
CÆlInfo
 *
√xt2
 = 
ci
->
√xt
->next;

138 i‡(
√xt2
 =
NULL
) ;

139 
	`luaM_‰ì
(
L
, 
ci
->
√xt
);

140 
ci
->
√xt
 = 
√xt2
;

141 
√xt2
->
¥evious
 = 
ci
;

142 
ci
 = 
√xt2
;

144 
	}
}

147 
	$°ack_öô
 (
lua_Sèã
 *
L1
,Üua_Sèã *
L
) {

148 
i
; 
CÆlInfo
 *
ci
;

150 
L1
->
°ack
 = 
	`luaM_√wve˘‹
(
L
, 
BASIC_STACK_SIZE
, 
TVÆue
);

151 
L1
->
°acksize
 = 
BASIC_STACK_SIZE
;

152 
i
 = 0; i < 
BASIC_STACK_SIZE
; i++)

153 
	`£äûvÆue
(
L1
->
°ack
 + 
i
);

154 
L1
->
t›
 = L1->
°ack
;

155 
L1
->
°ack_œ°
 = L1->
°ack
 + L1->
°acksize
 - 
EXTRA_STACK
;

157 
ci
 = &
L1
->
ba£_ci
;

158 
ci
->
√xt
 = ci->
¥evious
 = 
NULL
;

159 
ci
->
ˇŒ°©us
 = 0;

160 
ci
->
func
 = 
L1
->
t›
;

161 
	`£äûvÆue
(
L1
->
t›
++);

162 
ci
->
t›
 = 
L1
->t› + 
LUA_MINSTACK
;

163 
L1
->
ci
 = ci;

164 
	}
}

167 
	$‰ì°ack
 (
lua_Sèã
 *
L
) {

168 i‡(
L
->
°ack
 =
NULL
)

170 
L
->
ci
 = &L->
ba£_ci
;

171 
	`luaE_‰ìCI
(
L
);

172 
	`luaM_‰ì¨øy
(
L
, L->
°ack
, L->
°acksize
);

173 
	}
}

179 
	$öô_ªgi°ry
 (
lua_Sèã
 *
L
, 
globÆ_Sèã
 *
g
) {

180 
TVÆue
 
ãmp
;

182 
TabÀ
 *
ªgi°ry
 = 
	`luaH_√w
(
L
);

183 
	`£thvÆue
(
L
, &
g
->
l_ªgi°ry
, 
ªgi°ry
);

184 
	`luaH_ªsize
(
L
, 
ªgi°ry
, 
LUA_RIDX_LAST
, 0);

186 
	`£âhvÆue
(
L
, &
ãmp
, L);

187 
	`luaH_£töt
(
L
, 
ªgi°ry
, 
LUA_RIDX_MAINTHREAD
, &
ãmp
);

189 
	`£thvÆue
(
L
, &
ãmp
, 
	`luaH_√w
(L));

190 
	`luaH_£töt
(
L
, 
ªgi°ry
, 
LUA_RIDX_GLOBALS
, &
ãmp
);

191 
	}
}

198 
	$f_lua›í
 (
lua_Sèã
 *
L
, *
ud
) {

199 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

200 
	`UNUSED
(
ud
);

201 
	`°ack_öô
(
L
, L);

202 
	`öô_ªgi°ry
(
L
, 
g
);

203 
	`luaS_ªsize
(
L
, 
MINSTRTABSIZE
);

204 
	`luaT_öô
(
L
);

205 
	`luaX_öô
(
L
);

207 
g
->
memîrmsg
 = 
	`luaS_√wlôîÆ
(
L
, 
MEMERRMSG
);

208 
	`luaC_fix
(
L
, 
	`obj2gco
(
g
->
memîrmsg
));

209 
g
->
g¸u¬ög
 = 1;

210 
g
->
vîsi⁄
 = 
	`lua_vîsi⁄
(
NULL
);

211 
	`luai_u£r°©e›í
(
L
);

212 
	}
}

219 
	$¥eöô_thªad
 (
lua_Sèã
 *
L
, 
globÆ_Sèã
 *
g
) {

220 
	`G
(
L
Ë
g
;

221 
L
->
°ack
 = 
NULL
;

222 
L
->
ci
 = 
NULL
;

223 
L
->
°acksize
 = 0;

224 
L
->
twups
 = L;

225 
L
->
îr‹Jmp
 = 
NULL
;

226 
L
->
nCˇŒs
 = 0;

227 
L
->
hook
 = 
NULL
;

228 
L
->
hookmask
 = 0;

229 
L
->
ba£hookcou¡
 = 0;

230 
L
->
Ælowhook
 = 1;

231 
	`ª£thookcou¡
(
L
);

232 
L
->
›íupvÆ
 = 
NULL
;

233 
L
->
¬y
 = 1;

234 
L
->
°©us
 = 
LUA_OK
;

235 
L
->
îrfunc
 = 0;

236 
	}
}

239 
	$˛o£_°©e
 (
lua_Sèã
 *
L
) {

240 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

241 
	`luaF_˛o£
(
L
, L->
°ack
);

242 
	`luaC_‰ìÆlobje˘s
(
L
);

243 i‡(
g
->
vîsi⁄
)

244 
	`luai_u£r°©e˛o£
(
L
);

245 
	`luaM_‰ì¨øy
(
L
, 
	`G
(L)->
°π
.
hash
, G(L)->°π.
size
);

246 
	`luaZ_‰ìbuf„r
(
L
, &
g
->
buff
);

247 
	`‰ì°ack
(
L
);

248 
	`lua_as£π
(
	`gëtŸÆbyãs
(
g
Ë=(
LG
));

249 (*
g
->
‰óŒoc
)(g->
ud
, 
	`‰om°©e
(
L
), (
LG
), 0);

250 
	}
}

253 
LUA_API
 
lua_Sèã
 *
	$lua_√wthªad
 (
lua_Sèã
 *
L
) {

254 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

255 
lua_Sèã
 *
L1
;

256 
	`lua_lock
(
L
);

257 
	`luaC_checkGC
(
L
);

259 
L1
 = &
	`ˇ°
(
LX
 *, 
	`luaM_√wobje˘
(
L
, 
LUA_TTHREAD
, (LX)))->
l
;

260 
L1
->
m¨ked
 = 
	`luaC_whôe
(
g
);

261 
L1
->
â
 = 
LUA_TTHREAD
;

263 
L1
->
√xt
 = 
g
->
Ælgc
;

264 
g
->
Ælgc
 = 
	`obj2gco
(
L1
);

266 
	`£âhvÆue
(
L
, L->
t›
, 
L1
);

267 
	`≠i_ö¸_t›
(
L
);

268 
	`¥eöô_thªad
(
L1
, 
g
);

269 
L1
->
hookmask
 = 
L
->hookmask;

270 
L1
->
ba£hookcou¡
 = 
L
->basehookcount;

271 
L1
->
hook
 = 
L
->hook;

272 
	`ª£thookcou¡
(
L1
);

274 
	`mem˝y
(
	`lua_gëexåa•a˚
(
L1
),Üua_gëexåa•a˚(
g
->
maöthªad
),

275 
LUA_EXTRASPACE
);

276 
	`luai_u£r°©ëhªad
(
L
, 
L1
);

277 
	`°ack_öô
(
L1
, 
L
);

278 
	`lua_u∆ock
(
L
);

279  
L1
;

280 
	}
}

283 
	$luaE_‰ìthªad
 (
lua_Sèã
 *
L
,Üua_Sèã *
L1
) {

284 
LX
 *
l
 = 
	`‰om°©e
(
L1
);

285 
	`luaF_˛o£
(
L1
, L1->
°ack
);

286 
	`lua_as£π
(
L1
->
›íupvÆ
 =
NULL
);

287 
	`luai_u£r°©e‰ì
(
L
, 
L1
);

288 
	`‰ì°ack
(
L1
);

289 
	`luaM_‰ì
(
L
, 
l
);

290 
	}
}

293 
LUA_API
 
lua_Sèã
 *
	$lua_√w°©e
 (
lua_AŒoc
 
f
, *
ud
) {

294 
i
;

295 
lua_Sèã
 *
L
;

296 
globÆ_Sèã
 *
g
;

297 
LG
 *
l
 = 
	`ˇ°
(LG *, (*
f
)(
ud
, 
NULL
, 
LUA_TTHREAD
, (LG)));

298 i‡(
l
 =
NULL
)  NULL;

299 
L
 = &
l
->l.l;

300 
g
 = &
l
->g;

301 
L
->
√xt
 = 
NULL
;

302 
L
->
â
 = 
LUA_TTHREAD
;

303 
g
->
cuºítwhôe
 = 
	`bômask
(
WHITE0BIT
);

304 
L
->
m¨ked
 = 
	`luaC_whôe
(
g
);

305 
	`¥eöô_thªad
(
L
, 
g
);

306 
g
->
‰óŒoc
 = 
f
;

307 
g
->
ud
 = ud;

308 
g
->
maöthªad
 = 
L
;

309 
g
->
£ed
 = 
	`make£ed
(
L
);

310 
g
->
g¸u¬ög
 = 0;

311 
g
->
GCe°im©e
 = 0;

312 
g
->
°π
.
size
 = g->°π.
nu£
 = 0;

313 
g
->
°π
.
hash
 = 
NULL
;

314 
	`£äûvÆue
(&
g
->
l_ªgi°ry
);

315 
	`luaZ_öôbuf„r
(
L
, &
g
->
buff
);

316 
g
->
∑nic
 = 
NULL
;

317 
g
->
vîsi⁄
 = 
NULL
;

318 
g
->
gc°©e
 = 
GCS∑u£
;

319 
g
->
gcköd
 = 
KGC_NORMAL
;

320 
g
->
Ælgc
 = g->
föobj
 = g->
tobe‚z
 = g->
fixedgc
 = 
NULL
;

321 
g
->
swìpgc
 = 
NULL
;

322 
g
->
gøy
 = g->
gøyagaö
 = 
NULL
;

323 
g
->
wók
 = g->
ïhemî⁄
 = g->
Ælwók
 = 
NULL
;

324 
g
->
twups
 = 
NULL
;

325 
g
->
tŸÆbyãs
 = (
LG
);

326 
g
->
GCdebt
 = 0;

327 
g
->
gcfönum
 = 0;

328 
g
->
g˝au£
 = 
LUAI_GCPAUSE
;

329 
g
->
gc°ïmul
 = 
LUAI_GCMUL
;

330 
i
=0; i < 
LUA_NUMTAGS
; i++Ë
g
->
mt
[i] = 
NULL
;

331 i‡(
	`luaD_øwru≈rŸe˘ed
(
L
, 
f_lua›í
, 
NULL
Ë!
LUA_OK
) {

333 
	`˛o£_°©e
(
L
);

334 
L
 = 
NULL
;

336  
L
;

337 
	}
}

340 
LUA_API
 
	$lua_˛o£
 (
lua_Sèã
 *
L
) {

341 
L
 = 
	`G
(L)->
maöthªad
;

342 
	`lua_lock
(
L
);

343 
	`˛o£_°©e
(
L
);

344 
	}
}

	@lib/archive/lua-5.3.0/src/lstate.h

7 #i‚de‡
l°©e_h


8 
	#l°©e_h


	)

10 
	~"lua.h
"

12 
	~"lobje˘.h
"

13 
	~"…m.h
"

14 
	~"lzio.h
"

33 
	glua_l⁄gjmp
;

38 
	#EXTRA_STACK
 5

	)

41 
	#BASIC_STACK_SIZE
 (2*
LUA_MINSTACK
)

	)

45 
	#KGC_NORMAL
 0

	)

46 
	#KGC_EMERGENCY
 1

	)

49 
	s°rögèbÀ
 {

50 
TSåög
 **
	mhash
;

51 
	mnu£
;

52 
	msize
;

53 } 
	t°rögèbÀ
;

65 
	sCÆlInfo
 {

66 
StkId
 
	mfunc
;

67 
StkId
 
	mt›
;

68 
CÆlInfo
 *
	m¥evious
, *
	m√xt
;

71 
StkId
 
	mba£
;

72 c⁄° 
In°ru˘i⁄
 *
	mßvedpc
;

73 } 
	ml
;

75 
lua_KFun˘i⁄
 
	mk
;

76 
±rdiff_t
 
	mﬁd_îrfunc
;

77 
lua_KC⁄ãxt
 
	m˘x
;

78 } 
	mc
;

79 } 
	mu
;

80 
±rdiff_t
 
	mexåa
;

81 
	mƒesu…s
;

82 
lu_byã
 
	mˇŒ°©us
;

83 } 
	tCÆlInfo
;

89 
	#CIST_OAH
 (1<<0Ë

	)

90 
	#CIST_LUA
 (1<<1Ë

	)

91 
	#CIST_HOOKED
 (1<<2Ë

	)

92 
	#CIST_REENTRY
 (1<<3Ë

	)

94 
	#CIST_YPCALL
 (1<<4Ë

	)

95 
	#CIST_TAIL
 (1<<5Ë

	)

96 
	#CIST_HOOKYIELD
 (1<<6Ë

	)

98 
	#isLua
(
ci
Ë((ci)->
ˇŒ°©us
 & 
CIST_LUA
)

	)

101 
	#£tﬂh
(
°
,
v
Ë((°Ë((°Ë& ~
CIST_OAH
Ë| (v))

	)

102 
	#gëﬂh
(
°
Ë((°Ë& 
CIST_OAH
)

	)

108 
	sglobÆ_Sèã
 {

109 
lua_AŒoc
 
	m‰óŒoc
;

110 *
	mud
;

111 
lu_mem
 
	mtŸÆbyãs
;

112 
l_mem
 
	mGCdebt
;

113 
lu_mem
 
	mGCmemåav
;

114 
lu_mem
 
	mGCe°im©e
;

115 
°rögèbÀ
 
	m°π
;

116 
TVÆue
 
	ml_ªgi°ry
;

117 
	m£ed
;

118 
lu_byã
 
	mcuºítwhôe
;

119 
lu_byã
 
	mgc°©e
;

120 
lu_byã
 
	mgcköd
;

121 
lu_byã
 
	mg¸u¬ög
;

122 
GCObje˘
 *
	mÆlgc
;

123 
GCObje˘
 **
	mswìpgc
;

124 
GCObje˘
 *
	mföobj
;

125 
GCObje˘
 *
	mgøy
;

126 
GCObje˘
 *
	mgøyagaö
;

127 
GCObje˘
 *
	mwók
;

128 
GCObje˘
 *
	mïhemî⁄
;

129 
GCObje˘
 *
	mÆlwók
;

130 
GCObje˘
 *
	mtobe‚z
;

131 
GCObje˘
 *
	mfixedgc
;

132 
lua_Sèã
 *
	mtwups
;

133 
Mbuf„r
 
	mbuff
;

134 
	mgcfönum
;

135 
	mg˝au£
;

136 
	mgc°ïmul
;

137 
lua_CFun˘i⁄
 
	m∑nic
;

138 
lua_Sèã
 *
	mmaöthªad
;

139 c⁄° 
lua_Numbî
 *
	mvîsi⁄
;

140 
TSåög
 *
	mmemîrmsg
;

141 
TSåög
 *
	mtm«me
[
TM_N
];

142 
TabÀ
 *
	mmt
[
LUA_NUMTAGS
];

143 } 
	tglobÆ_Sèã
;

149 
	slua_Sèã
 {

150 
	mComm⁄Hódî
;

151 
lu_byã
 
	m°©us
;

152 
StkId
 
	mt›
;

153 
globÆ_Sèã
 *
	ml_G
;

154 
CÆlInfo
 *
	mci
;

155 c⁄° 
In°ru˘i⁄
 *
	mﬁdpc
;

156 
StkId
 
	m°ack_œ°
;

157 
StkId
 
	m°ack
;

158 
UpVÆ
 *
	m›íupvÆ
;

159 
GCObje˘
 *
	mg˛i°
;

160 
lua_Sèã
 *
	mtwups
;

161 
lua_l⁄gjmp
 *
	mîr‹Jmp
;

162 
CÆlInfo
 
	mba£_ci
;

163 
lua_Hook
 
	mhook
;

164 
±rdiff_t
 
	mîrfunc
;

165 
	m°acksize
;

166 
	mba£hookcou¡
;

167 
	mhookcou¡
;

168 
	m¬y
;

169 
	mnCˇŒs
;

170 
lu_byã
 
	mhookmask
;

171 
lu_byã
 
	mÆlowhook
;

173 * 
	m¥iv©e
;

177 
	#G
(
L
Ë(L->
l_G
)

	)

183 
	uGCUni⁄
 {

184 
GCObje˘
 
	mgc
;

185 
TSåög
 
	mts
;

186 
Ud©a
 
	mu
;

187 
Closuª
 
	m˛
;

188 
TabÀ
 
	mh
;

189 
PrŸo
 
	mp
;

190 
lua_Sèã
 
	mth
;

194 
	#ˇ°_u
(
o
Ë
	`ˇ°
(
GCUni⁄
 *, (o))

	)

197 
	#gco2ts
(
o
) \

198 
	`check_exp
(
	`nov¨ü¡
((
o
)->
â
Ë=
LUA_TSTRING
, &((
	`ˇ°_u
(o))->
ts
))

	)

199 
	#gco2u
(
o
Ë
	`check_exp
((o)->
â
 =
LUA_TUSERDATA
, &((
	`ˇ°_u
(o))->
u
))

	)

200 
	#gco2l˛
(
o
Ë
	`check_exp
((o)->
â
 =
LUA_TLCL
, &((
	`ˇ°_u
(o))->
˛
.
l
))

	)

201 
	#gco2c˛
(
o
Ë
	`check_exp
((o)->
â
 =
LUA_TCCL
, &((
	`ˇ°_u
(o))->
˛
.
c
))

	)

202 
	#gco2˛
(
o
) \

203 
	`check_exp
(
	`nov¨ü¡
((
o
)->
â
Ë=
LUA_TFUNCTION
, &((
	`ˇ°_u
(o))->
˛
))

	)

204 
	#gco2t
(
o
Ë
	`check_exp
((o)->
â
 =
LUA_TTABLE
, &((
	`ˇ°_u
(o))->
h
))

	)

205 
	#gco2p
(
o
Ë
	`check_exp
((o)->
â
 =
LUA_TPROTO
, &((
	`ˇ°_u
(o))->
p
))

	)

206 
	#gco2th
(
o
Ë
	`check_exp
((o)->
â
 =
LUA_TTHREAD
, &((
	`ˇ°_u
(o))->
th
))

	)

210 
	#obj2gco
(
v
) \

211 
	`check_exp
(
	`nov¨ü¡
((
v
)->
â
Ë< 
LUA_TDEADKEY
, (&(
	`ˇ°_u
(v)->
gc
)))

	)

215 
	#gëtŸÆbyãs
(
g
Ë((g)->
tŸÆbyãs
 + (g)->
GCdebt
)

	)

217 
LUAI_FUNC
 
luaE_£tdebt
 (
globÆ_Sèã
 *
g
, 
l_mem
 
debt
);

218 
LUAI_FUNC
 
luaE_‰ìthªad
 (
lua_Sèã
 *
L
,Üua_Sèã *
L1
);

219 
LUAI_FUNC
 
CÆlInfo
 *
luaE_exãndCI
 (
lua_Sèã
 *
L
);

220 
LUAI_FUNC
 
luaE_‰ìCI
 (
lua_Sèã
 *
L
);

221 
LUAI_FUNC
 
luaE_shrökCI
 (
lua_Sèã
 *
L
);

	@lib/archive/lua-5.3.0/src/lstring.c

7 
	#l°rög_c


	)

8 
	#LUA_CORE


	)

10 
	~"Õªfix.h
"

13 
	~<°rög.h
>

15 
	~"lua.h
"

17 
	~"ldebug.h
"

18 
	~"ldo.h
"

19 
	~"lmem.h
"

20 
	~"lobje˘.h
"

21 
	~"l°©e.h
"

22 
	~"l°rög.h
"

30 #i‡!
deföed
(
LUAI_HASHLIMIT
)

31 
	#LUAI_HASHLIMIT
 5

	)

38 
	$luaS_eq g°r
 (
TSåög
 *
a
, TSåög *
b
) {

39 
size_t
 
Àn
 = 
a
->len;

40 
	`lua_as£π
(
a
->
â
 =
LUA_TLNGSTR
 && 
b
->tt == LUA_TLNGSTR);

41  (
a
 =
b
) ||

42 ((
Àn
 =
b
->len) &&

43 (
	`memcmp
(
	`gë°r
(
a
), gë°r(
b
), 
Àn
) == 0));

44 
	}
}

47 
	$luaS_hash
 (c⁄° *
°r
, 
size_t
 
l
, 
£ed
) {

48 
h
 = 
£ed
 ^ 
	`ˇ°
(, 
l
);

49 
size_t
 
l1
;

50 
size_t
 
°ï
 = (
l
 >> 
LUAI_HASHLIMIT
) + 1;

51 
l1
 = 
l
;Ü1 >
°ï
;Ü1 -= step)

52 
h
 = h ^ ((h<<5Ë+ (h>>2Ë+ 
	`ˇ°_byã
(
°r
[
l1
 - 1]));

53  
h
;

54 
	}
}

60 
	$luaS_ªsize
 (
lua_Sèã
 *
L
, 
√wsize
) {

61 
i
;

62 
°rögèbÀ
 *
tb
 = &
	`G
(
L
)->
°π
;

63 i‡(
√wsize
 > 
tb
->
size
) {

64 
	`luaM_ªÆlocve˘‹
(
L
, 
tb
->
hash
,Åb->
size
, 
√wsize
, 
TSåög
 *);

65 
i
 = 
tb
->
size
; i < 
√wsize
; i++)

66 
tb
->
hash
[
i
] = 
NULL
;

68 
i
 = 0; i < 
tb
->
size
; i++) {

69 
TSåög
 *
p
 = 
tb
->
hash
[
i
];

70 
tb
->
hash
[
i
] = 
NULL
;

71 
p
) {

72 
TSåög
 *
h√xt
 = 
p
->hnext;

73 
h
 = 
	`lmod
(
p
->
hash
, 
√wsize
);

74 
p
->
h√xt
 = 
tb
->
hash
[
h
];

75 
tb
->
hash
[
h
] = 
p
;

76 
p
 = 
h√xt
;

79 i‡(
√wsize
 < 
tb
->
size
) {

81 
	`lua_as£π
(
tb
->
hash
[
√wsize
] =
NULL
 &&Åb->hash[tb->
size
 - 1] == NULL);

82 
	`luaM_ªÆlocve˘‹
(
L
, 
tb
->
hash
,Åb->
size
, 
√wsize
, 
TSåög
 *);

84 
tb
->
size
 = 
√wsize
;

85 
	}
}

92 
TSåög
 *
	$¸óã°robj
 (
lua_Sèã
 *
L
, c⁄° *
°r
, 
size_t
 
l
,

93 
èg
, 
h
) {

94 
TSåög
 *
ts
;

95 
GCObje˘
 *
o
;

96 
size_t
 
tŸÆsize
;

97 
tŸÆsize
 = 
	`sizñ°rög
(
l
);

98 
o
 = 
	`luaC_√wobj
(
L
, 
èg
, 
tŸÆsize
);

99 
ts
 = 
	`gco2ts
(
o
);

100 
ts
->
Àn
 = 
l
;

101 
ts
->
hash
 = 
h
;

102 
ts
->
exåa
 = 0;

103 
	`mem˝y
(
	`gëaddr°r
(
ts
), 
°r
, 
l
 * ());

104 
	`gëaddr°r
(
ts
)[
l
] = '\0';

105  
ts
;

106 
	}
}

109 
	$luaS_ªmove
 (
lua_Sèã
 *
L
, 
TSåög
 *
ts
) {

110 
°rögèbÀ
 *
tb
 = &
	`G
(
L
)->
°π
;

111 
TSåög
 **
p
 = &
tb
->
hash
[
	`lmod
(
ts
->hash,Åb->
size
)];

112 *
p
 !
ts
)

113 
p
 = &(*p)->
h√xt
;

114 *
p
 = (*p)->
h√xt
;

115 
tb
->
nu£
--;

116 
	}
}

122 
TSåög
 *
	$öã∫shr°r
 (
lua_Sèã
 *
L
, c⁄° *
°r
, 
size_t
 
l
) {

123 
TSåög
 *
ts
;

124 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

125 
h
 = 
	`luaS_hash
(
°r
, 
l
, 
g
->
£ed
);

126 
TSåög
 **
li°
 = &
g
->
°π
.
hash
[
	`lmod
(
h
, g->°π.
size
)];

127 
ts
 = *
li°
;Å†!
NULL
;Å†ts->
h√xt
) {

128 i‡(
l
 =
ts
->
Àn
 &&

129 (
	`memcmp
(
°r
, 
	`gë°r
(
ts
), 
l
 * ()) == 0)) {

131 i‡(
	`isdód
(
g
, 
ts
))

132 
	`ch™gewhôe
(
ts
);

133  
ts
;

136 i‡(
g
->
°π
.
nu£
 >g->°π.
size
 && g->°π.sizê<
MAX_INT
/2) {

137 
	`luaS_ªsize
(
L
, 
g
->
°π
.
size
 * 2);

138 
li°
 = &
g
->
°π
.
hash
[
	`lmod
(
h
, g->°π.
size
)];

140 
ts
 = 
	`¸óã°robj
(
L
, 
°r
, 
l
, 
LUA_TSHRSTR
, 
h
);

141 
ts
->
h√xt
 = *
li°
;

142 *
li°
 = 
ts
;

143 
g
->
°π
.
nu£
++;

144  
ts
;

145 
	}
}

151 
TSåög
 *
	$luaS_√wl°r
 (
lua_Sèã
 *
L
, c⁄° *
°r
, 
size_t
 
l
) {

152 i‡(
l
 <
LUAI_MAXSHORTLEN
)

153  
	`öã∫shr°r
(
L
, 
°r
, 
l
);

155 i‡(
l
 + 1 > (
MAX_SIZE
 - (
TSåög
))/())

156 
	`luaM_toobig
(
L
);

157  
	`¸óã°robj
(
L
, 
°r
, 
l
, 
LUA_TLNGSTR
, 
	`G
(L)->
£ed
);

159 
	}
}

165 
TSåög
 *
	$luaS_√w
 (
lua_Sèã
 *
L
, c⁄° *
°r
) {

166  
	`luaS_√wl°r
(
L
, 
°r
, 
	`°æí
(str));

167 
	}
}

170 
Ud©a
 *
	$luaS_√wud©a
 (
lua_Sèã
 *
L
, 
size_t
 
s
) {

171 
Ud©a
 *
u
;

172 
GCObje˘
 *
o
;

173 i‡(
s
 > 
MAX_SIZE
 - (
Ud©a
))

174 
	`luaM_toobig
(
L
);

175 
o
 = 
	`luaC_√wobj
(
L
, 
LUA_TUSERDATA
, 
	`sizñud©a
(
s
));

176 
u
 = 
	`gco2u
(
o
);

177 
u
->
Àn
 = 
s
;

178 
u
->
më©abÀ
 = 
NULL
;

179 
	`£tu£rvÆue
(
L
, 
u
, 
luaO_nûobje˘
);

180  
u
;

181 
	}
}

	@lib/archive/lua-5.3.0/src/lstring.h

7 #i‚de‡
l°rög_h


8 
	#l°rög_h


	)

10 
	~"lgc.h
"

11 
	~"lobje˘.h
"

12 
	~"l°©e.h
"

15 
	#sizñ°rög
(
l
Ë((
UTSåög
Ë+ (÷Ë+ 1Ë* ())

	)

16 
	#size°rög
(
s
Ë
	`sizñ°rög
((s)->
Àn
)

	)

18 
	#sizñud©a
(
l
Ë((
UUd©a
Ë+ (l))

	)

19 
	#sizeud©a
(
u
Ë
	`sizñud©a
((u)->
Àn
)

	)

21 
	#luaS_√wlôîÆ
(
L
, 
s
Ë(
	`luaS_√wl°r
(L, "" s, \

22 ((
s
)/())-1))

	)

28 
	#i§e£rved
(
s
Ë((s)->
â
 =
LUA_TSHRSTR
 && (s)->
exåa
 > 0)

	)

34 
	#eqshr°r
(
a
,
b
Ë
	`check_exp
(◊)->
â
 =
LUA_TSHRSTR
, (aË=(b))

	)

37 
LUAI_FUNC
 
luaS_hash
 (c⁄° *
°r
, 
size_t
 
l
, 
£ed
);

38 
LUAI_FUNC
 
luaS_eq g°r
 (
TSåög
 *
a
, TSåög *
b
);

39 
LUAI_FUNC
 
luaS_ªsize
 (
lua_Sèã
 *
L
, 
√wsize
);

40 
LUAI_FUNC
 
luaS_ªmove
 (
lua_Sèã
 *
L
, 
TSåög
 *
ts
);

41 
LUAI_FUNC
 
Ud©a
 *
luaS_√wud©a
 (
lua_Sèã
 *
L
, 
size_t
 
s
);

42 
LUAI_FUNC
 
TSåög
 *
luaS_√wl°r
 (
lua_Sèã
 *
L
, c⁄° *
°r
, 
size_t
 
l
);

43 
LUAI_FUNC
 
TSåög
 *
luaS_√w
 (
lua_Sèã
 *
L
, c⁄° *
°r
);

	@lib/archive/lua-5.3.0/src/lstrlib.c

7 
	#l°æib_c


	)

8 
	#LUA_LIB


	)

10 
	~"Õªfix.h
"

13 
	~<˘y≥.h
>

14 
	~<limôs.h
>

15 
	~<°ddef.h
>

16 
	~<°dio.h
>

17 
	~<°dlib.h
>

18 
	~<°rög.h
>

20 
	~"lua.h
"

22 
	~"œuxlib.h
"

23 
	~"luÆib.h
"

30 #i‡!
deföed
(
LUA_MAXCAPTURES
)

31 
	#LUA_MAXCAPTURES
 32

	)

36 
	#uch¨
(
c
Ë(()(c))

	)

43 
	#MAXSIZE
 \

44 ((
size_t
Ë< (Ë? (~(size_t)0Ë: (size_t)(
INT_MAX
))

	)

49 
	$°r_Àn
 (
lua_Sèã
 *
L
) {

50 
size_t
 
l
;

51 
	`luaL_checkl°rög
(
L
, 1, &
l
);

52 
	`lua_pushöãgî
(
L
, (
lua_I¡egî
)
l
);

54 
	}
}

58 
lua_I¡egî
 
	$po§ñ©
 (
lua_I¡egî
 
pos
, 
size_t
 
Àn
) {

59 i‡(
pos
 >= 0) Öos;

60 i‡(0u - (
size_t
)
pos
 > 
Àn
)  0;

61  (
lua_I¡egî
)
Àn
 + 
pos
 + 1;

62 
	}
}

65 
	$°r_sub
 (
lua_Sèã
 *
L
) {

66 
size_t
 
l
;

67 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
l
);

68 
lua_I¡egî
 
°¨t
 = 
	`po§ñ©
(
	`luaL_checköãgî
(
L
, 2), 
l
);

69 
lua_I¡egî
 
íd
 = 
	`po§ñ©
(
	`luaL_›töãgî
(
L
, 3, -1), 
l
);

70 i‡(
°¨t
 < 1) start = 1;

71 i‡(
íd
 > (
lua_I¡egî
)
l
)Énd =Ü;

72 i‡(
°¨t
 <
íd
)

73 
	`lua_pushl°rög
(
L
, 
s
 + 
°¨t
 - 1, (
size_t
)(
íd
 - start + 1));

74 
	`lua_pushlôîÆ
(
L
, "");

76 
	}
}

79 
	$°r_ªvî£
 (
lua_Sèã
 *
L
) {

80 
size_t
 
l
, 
i
;

81 
luaL_Buf„r
 
b
;

82 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
l
);

83 *
p
 = 
	`luaL_bufföôsize
(
L
, &
b
, 
l
);

84 
i
 = 0; i < 
l
; i++)

85 
p
[
i
] = 
s
[
l
 - i - 1];

86 
	`luaL_pushªsu…size
(&
b
, 
l
);

88 
	}
}

91 
	$°r_lowî
 (
lua_Sèã
 *
L
) {

92 
size_t
 
l
;

93 
size_t
 
i
;

94 
luaL_Buf„r
 
b
;

95 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
l
);

96 *
p
 = 
	`luaL_bufföôsize
(
L
, &
b
, 
l
);

97 
i
=0; i<
l
; i++)

98 
p
[
i
] = 
	`tﬁowî
(
	`uch¨
(
s
[i]));

99 
	`luaL_pushªsu…size
(&
b
, 
l
);

101 
	}
}

104 
	$°r_uµî
 (
lua_Sèã
 *
L
) {

105 
size_t
 
l
;

106 
size_t
 
i
;

107 
luaL_Buf„r
 
b
;

108 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
l
);

109 *
p
 = 
	`luaL_bufföôsize
(
L
, &
b
, 
l
);

110 
i
=0; i<
l
; i++)

111 
p
[
i
] = 
	`touµî
(
	`uch¨
(
s
[i]));

112 
	`luaL_pushªsu…size
(&
b
, 
l
);

114 
	}
}

117 
	$°r_ªp
 (
lua_Sèã
 *
L
) {

118 
size_t
 
l
, 
l£p
;

119 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
l
);

120 
lua_I¡egî
 
n
 = 
	`luaL_checköãgî
(
L
, 2);

121 c⁄° *
£p
 = 
	`luaL_›é°rög
(
L
, 3, "", &
l£p
);

122 i‡(
n
 <0Ë
	`lua_pushlôîÆ
(
L
, "");

123 i‡(
l
 + 
l£p
 <Ü ||Ü +Ü£∞> 
MAXSIZE
 / 
n
)

124  
	`luaL_îr‹
(
L
, "resulting stringÅooÜarge");

126 
size_t
 
tŸÆÀn
 = (size_t)
n
 * 
l
 + (size_t)“ - 1Ë* 
l£p
;

127 
luaL_Buf„r
 
b
;

128 *
p
 = 
	`luaL_bufföôsize
(
L
, &
b
, 
tŸÆÀn
);

129 
n
-- > 1) {

130 
	`mem˝y
(
p
, 
s
, 
l
 * ());Ö +=Ü;

131 i‡(
l£p
 > 0) {

132 
	`mem˝y
(
p
, 
£p
, 
l£p
 * ());

133 
p
 +
l£p
;

136 
	`mem˝y
(
p
, 
s
, 
l
 * ());

137 
	`luaL_pushªsu…size
(&
b
, 
tŸÆÀn
);

140 
	}
}

143 
	$°r_byã
 (
lua_Sèã
 *
L
) {

144 
size_t
 
l
;

145 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
l
);

146 
lua_I¡egî
 
posi
 = 
	`po§ñ©
(
	`luaL_›töãgî
(
L
, 2, 1), 
l
);

147 
lua_I¡egî
 
po£
 = 
	`po§ñ©
(
	`luaL_›töãgî
(
L
, 3, 
posi
), 
l
);

148 
n
, 
i
;

149 i‡(
posi
 < 1)Öosi = 1;

150 i‡(
po£
 > (
lua_I¡egî
)
l
)Öose =Ü;

151 i‡(
posi
 > 
po£
)  0;

152 
n
 = ()(
po£
 - 
posi
 + 1);

153 i‡(
posi
 + 
n
 <
po£
)

154  
	`luaL_îr‹
(
L
, "string sliceÅooÜong");

155 
	`luaL_check°ack
(
L
, 
n
, "string sliceÅooÜong");

156 
i
=0; i<
n
; i++)

157 
	`lua_pushöãgî
(
L
, 
	`uch¨
(
s
[
posi
+
i
-1]));

158  
n
;

159 
	}
}

162 
	$°r_ch¨
 (
lua_Sèã
 *
L
) {

163 
n
 = 
	`lua_gët›
(
L
);

164 
i
;

165 
luaL_Buf„r
 
b
;

166 *
p
 = 
	`luaL_bufföôsize
(
L
, &
b
, 
n
);

167 
i
=1; i<=
n
; i++) {

168 
lua_I¡egî
 
c
 = 
	`luaL_checköãgî
(
L
, 
i
);

169 
	`luaL_¨gcheck
(
L
, 
	`uch¨
(
c
Ë=c, 
i
, "value out ofÑange");

170 
p
[
i
 - 1] = 
	`uch¨
(
c
);

172 
	`luaL_pushªsu…size
(&
b
, 
n
);

174 
	}
}

177 
	$wrôî
 (
lua_Sèã
 *
L
, c⁄° *
b
, 
size_t
 
size
, *
B
) {

178 ()
L
;

179 
	`luaL_addl°rög
((
luaL_Buf„r
 *Ë
B
, (c⁄° *)
b
, 
size
);

181 
	}
}

184 
	$°r_dump
 (
lua_Sèã
 *
L
) {

185 
luaL_Buf„r
 
b
;

186 
°rù
 = 
	`lua_toboﬁón
(
L
, 2);

187 
	`luaL_checkty≥
(
L
, 1, 
LUA_TFUNCTION
);

188 
	`lua_£â›
(
L
, 1);

189 
	`luaL_bufföô
(
L
,&
b
);

190 i‡(
	`lua_dump
(
L
, 
wrôî
, &
b
, 
°rù
) != 0)

191  
	`luaL_îr‹
(
L
, "unableÅo dump given function");

192 
	`luaL_pushªsu…
(&
b
);

194 
	}
}

205 
	#CAP_UNFINISHED
 (-1)

	)

206 
	#CAP_POSITION
 (-2)

	)

209 
	sM©chSèã
 {

210 
	mm©chdïth
;

211 c⁄° *
	m§c_öô
;

212 c⁄° *
	m§c_íd
;

213 c⁄° *
	mp_íd
;

214 
lua_Sèã
 *
	mL
;

215 
	mÀvñ
;

217 c⁄° *
	möô
;

218 
±rdiff_t
 
	mÀn
;

219 } 
	mˇ±uª
[
LUA_MAXCAPTURES
];

220 } 
	tM©chSèã
;

224 c⁄° *
m©ch
 (
M©chSèã
 *
ms
, c⁄° *
s
, c⁄° *
p
);

228 #i‡!
deföed
(
MAXCCALLS
)

229 
	#MAXCCALLS
 200

	)

233 
	#L_ESC
 '%'

	)

234 
	#SPECIALS
 "^$*+?.([%-"

	)

237 
	$check_ˇ±uª
 (
M©chSèã
 *
ms
, 
l
) {

238 
l
 -= '1';

239 i‡(
l
 < 0 ||Ü >
ms
->
Àvñ
 || ms->
ˇ±uª
[l].
Àn
 =
CAP_UNFINISHED
)

240  
	`luaL_îr‹
(
ms
->
L
, "övÆid c≠tuª index %%%d", 
l
 + 1);

241  
l
;

242 
	}
}

245 
	$ˇ±uª_to_˛o£
 (
M©chSèã
 *
ms
) {

246 
Àvñ
 = 
ms
->level;

247 
Àvñ
--;Üevel>=0;Üevel--)

248 i‡(
ms
->
ˇ±uª
[
Àvñ
].
Àn
 =
CAP_UNFINISHED
) Üevel;

249  
	`luaL_îr‹
(
ms
->
L
, "invalidÖattern capture");

250 
	}
}

253 c⁄° *
	$˛as£nd
 (
M©chSèã
 *
ms
, c⁄° *
p
) {

254 *
p
++) {

255 
L_ESC
: {

256 i‡(
p
 =
ms
->
p_íd
)

257 
	`luaL_îr‹
(
ms
->
L
, "malformedÖattern (ends with '%%')");

258  
p
+1;

261 i‡(*
p
 == '^')Ö++;

263 i‡(
p
 =
ms
->
p_íd
)

264 
	`luaL_îr‹
(
ms
->
L
, "malformedÖattern (missing ']')");

265 i‡(*(
p
++Ë=
L_ESC
 &&Ö < 
ms
->
p_íd
)

266 
p
++;

267 } *
p
 != ']');

268  
p
+1;

271  
p
;

274 
	}
}

277 
	$m©ch_˛ass
 (
c
, 
˛
) {

278 
ªs
;

279 
	`tﬁowî
(
˛
)) {

280 'a' : 
ªs
 = 
	`ißÕha
(
c
); ;

281 'c' : 
ªs
 = 
	`is˙ål
(
c
); ;

282 'd' : 
ªs
 = 
	`isdigô
(
c
); ;

283 'g' : 
ªs
 = 
	`isgøph
(
c
); ;

284 'l' : 
ªs
 = 
	`i¶owî
(
c
); ;

285 'p' : 
ªs
 = 
	`i•un˘
(
c
); ;

286 's' : 
ªs
 = 
	`is•a˚
(
c
); ;

287 'u' : 
ªs
 = 
	`isuµî
(
c
); ;

288 'w' : 
ªs
 = 
	`iß um
(
c
); ;

289 'x' : 
ªs
 = 
	`isxdigô
(
c
); ;

290 'z' : 
ªs
 = (
c
 == 0); ;

291 :  (
˛
 =
c
);

293  (
	`i¶owî
(
˛
Ë? 
ªs
 : !res);

294 
	}
}

297 
	$m©chbøckë˛ass
 (
c
, c⁄° *
p
, c⁄° *
ec
) {

298 
sig
 = 1;

299 i‡(*(
p
+1) == '^') {

300 
sig
 = 0;

301 
p
++;

303 ++
p
 < 
ec
) {

304 i‡(*
p
 =
L_ESC
) {

305 
p
++;

306 i‡(
	`m©ch_˛ass
(
c
, 
	`uch¨
(*
p
)))

307  
sig
;

309 i‡((*(
p
+1Ë='-'Ë&& (p+2 < 
ec
)) {

310 
p
+=2;

311 i‡(
	`uch¨
(*(
p
-2)Ë<
c
 && c <= uchar(*p))

312  
sig
;

314 i‡(
	`uch¨
(*
p
Ë=
c
Ë 
sig
;

316  !
sig
;

317 
	}
}

320 
	$sögÀm©ch
 (
M©chSèã
 *
ms
, c⁄° *
s
, c⁄° *
p
,

321 c⁄° *
ï
) {

322 i‡(
s
 >
ms
->
§c_íd
)

325 
c
 = 
	`uch¨
(*
s
);

326 *
p
) {

328 
L_ESC
:  
	`m©ch_˛ass
(
c
, 
	`uch¨
(*(
p
+1)));

329 '[':  
	`m©chbøckë˛ass
(
c
, 
p
, 
ï
-1);

330 :  (
	`uch¨
(*
p
Ë=
c
);

333 
	}
}

336 c⁄° *
	$m©chbÆ™˚
 (
M©chSèã
 *
ms
, c⁄° *
s
,

337 c⁄° *
p
) {

338 i‡(
p
 >
ms
->
p_íd
 - 1)

339 
	`luaL_îr‹
(
ms
->
L
, "malformedÖattern (missingárgumentsÅo '%%b')");

340 i‡(*
s
 !*
p
Ë 
NULL
;

342 
b
 = *
p
;

343 
e
 = *(
p
+1);

344 
c⁄t
 = 1;

345 ++
s
 < 
ms
->
§c_íd
) {

346 i‡(*
s
 =
e
) {

347 i‡(--
c⁄t
 =0Ë 
s
+1;

349 i‡(*
s
 =
b
Ë
c⁄t
++;

352  
NULL
;

353 
	}
}

356 c⁄° *
	$max_ex∑nd
 (
M©chSèã
 *
ms
, c⁄° *
s
,

357 c⁄° *
p
, c⁄° *
ï
) {

358 
±rdiff_t
 
i
 = 0;

359 
	`sögÀm©ch
(
ms
, 
s
 + 
i
, 
p
, 
ï
))

360 
i
++;

362 
i
>=0) {

363 c⁄° *
ªs
 = 
	`m©ch
(
ms
, (
s
+
i
), 
ï
+1);

364 i‡(
ªs
) Ñes;

365 
i
--;

367  
NULL
;

368 
	}
}

371 c⁄° *
	$mö_ex∑nd
 (
M©chSèã
 *
ms
, c⁄° *
s
,

372 c⁄° *
p
, c⁄° *
ï
) {

374 c⁄° *
ªs
 = 
	`m©ch
(
ms
, 
s
, 
ï
+1);

375 i‡(
ªs
 !
NULL
)

376  
ªs
;

377 i‡(
	`sögÀm©ch
(
ms
, 
s
, 
p
, 
ï
))

378 
s
++;

379  
NULL
;

381 
	}
}

384 c⁄° *
	$°¨t_ˇ±uª
 (
M©chSèã
 *
ms
, c⁄° *
s
,

385 c⁄° *
p
, 
wh©
) {

386 c⁄° *
ªs
;

387 
Àvñ
 = 
ms
->level;

388 i‡(
Àvñ
 >
LUA_MAXCAPTURES
Ë
	`luaL_îr‹
(
ms
->
L
, "too many captures");

389 
ms
->
ˇ±uª
[
Àvñ
].
öô
 = 
s
;

390 
ms
->
ˇ±uª
[
Àvñ
].
Àn
 = 
wh©
;

391 
ms
->
Àvñ
 =Üevel+1;

392 i‡((
ªs
=
	`m©ch
(
ms
, 
s
, 
p
)Ë=
NULL
)

393 
ms
->
Àvñ
--;

394  
ªs
;

395 
	}
}

398 c⁄° *
	$íd_ˇ±uª
 (
M©chSèã
 *
ms
, c⁄° *
s
,

399 c⁄° *
p
) {

400 
l
 = 
	`ˇ±uª_to_˛o£
(
ms
);

401 c⁄° *
ªs
;

402 
ms
->
ˇ±uª
[
l
].
Àn
 = 
s
 - ms->ˇ±uª[l].
öô
;

403 i‡((
ªs
 = 
	`m©ch
(
ms
, 
s
, 
p
)Ë=
NULL
)

404 
ms
->
ˇ±uª
[
l
].
Àn
 = 
CAP_UNFINISHED
;

405  
ªs
;

406 
	}
}

409 c⁄° *
	$m©ch_ˇ±uª
 (
M©chSèã
 *
ms
, c⁄° *
s
, 
l
) {

410 
size_t
 
Àn
;

411 
l
 = 
	`check_ˇ±uª
(
ms
,Ü);

412 
Àn
 = 
ms
->
ˇ±uª
[
l
].len;

413 i‡((
size_t
)(
ms
->
§c_íd
-
s
Ë>
Àn
 &&

414 
	`memcmp
(
ms
->
ˇ±uª
[
l
].
öô
, 
s
, 
Àn
) == 0)

415  
s
+
Àn
;

416  
NULL
;

417 
	}
}

420 c⁄° *
	$m©ch
 (
M©chSèã
 *
ms
, c⁄° *
s
, c⁄° *
p
) {

421 i‡(
ms
->
m©chdïth
-- == 0)

422 
	`luaL_îr‹
(
ms
->
L
, "patternÅoo complex");

423 
öô
:

424 i‡(
p
 !
ms
->
p_íd
) {

425 *
p
) {

427 i‡(*(
p
 + 1) == ')')

428 
s
 = 
	`°¨t_ˇ±uª
(
ms
, s, 
p
 + 2, 
CAP_POSITION
);

430 
s
 = 
	`°¨t_ˇ±uª
(
ms
, s, 
p
 + 1, 
CAP_UNFINISHED
);

434 
s
 = 
	`íd_ˇ±uª
(
ms
, s, 
p
 + 1);

438 i‡((
p
 + 1Ë!
ms
->
p_íd
)

439 
dÊt
;

440 
s
 = (†=
ms
->
§c_íd
Ë? s : 
NULL
;

443 
L_ESC
: {

444 *(
p
 + 1)) {

446 
s
 = 
	`m©chbÆ™˚
(
ms
, s, 
p
 + 2);

447 i‡(
s
 !
NULL
) {

448 
p
 +4; 
öô
;

453 c⁄° *
ï
; 
¥evious
;

454 
p
 += 2;

455 i‡(*
p
 != '[')

456 
	`luaL_îr‹
(
ms
->
L
, "missing '['áfter '%%f' inÖattern");

457 
ï
 = 
	`˛as£nd
(
ms
, 
p
);

458 
¥evious
 = (
s
 =
ms
->
§c_öô
) ? '\0' : *(s - 1);

459 i‡(!
	`m©chbøckë˛ass
(
	`uch¨
(
¥evious
), 
p
, 
ï
 - 1) &&

460 
	`m©chbøckë˛ass
(
	`uch¨
(*
s
), 
p
, 
ï
 - 1)) {

461 
p
 = 
ï
; 
öô
;

463 
s
 = 
NULL
;

469 
s
 = 
	`m©ch_ˇ±uª
(
ms
, s, 
	`uch¨
(*(
p
 + 1)));

470 i‡(
s
 !
NULL
) {

471 
p
 +2; 
öô
;

475 : 
dÊt
;

479 : 
dÊt
: {

480 c⁄° *
ï
 = 
	`˛as£nd
(
ms
, 
p
);

482 i‡(!
	`sögÀm©ch
(
ms
, 
s
, 
p
, 
ï
)) {

483 i‡(*
ï
 == '*' || *ep == '?' || *ep == '-') {

484 
p
 = 
ï
 + 1; 
öô
;

487 
s
 = 
NULL
;

490 *
ï
) {

492 c⁄° *
ªs
;

493 i‡((
ªs
 = 
	`m©ch
(
ms
, 
s
 + 1, 
ï
 + 1)Ë!
NULL
)

494 
s
 = 
ªs
;

496 
p
 = 
ï
 + 1; 
öô
;

501 
s
++;

504 
s
 = 
	`max_ex∑nd
(
ms
, s, 
p
, 
ï
);

507 
s
 = 
	`mö_ex∑nd
(
ms
, s, 
p
, 
ï
);

510 
s
++; 
p
 = 
ï
; 
öô
;

517 
ms
->
m©chdïth
++;

518  
s
;

519 
	}
}

523 c⁄° *
	$lmemföd
 (c⁄° *
s1
, 
size_t
 
l1
,

524 c⁄° *
s2
, 
size_t
 
l2
) {

525 i‡(
l2
 =0Ë 
s1
;

526 i‡(
l2
 > 
l1
Ë 
NULL
;

528 c⁄° *
öô
;

529 
l2
--;

530 
l1
 =Ü1-
l2
;

531 
l1
 > 0 && (
öô
 = (c⁄° *)
	`memchr
(
s1
, *
s2
,Ü1)Ë!
NULL
) {

532 
öô
++;

533 i‡(
	`memcmp
(
öô
, 
s2
+1, 
l2
) == 0)

534  
öô
-1;

536 
l1
 -
öô
-
s1
;

537 
s1
 = 
öô
;

540  
NULL
;

542 
	}
}

545 
	$push_⁄eˇ±uª
 (
M©chSèã
 *
ms
, 
i
, c⁄° *
s
,

546 c⁄° *
e
) {

547 i‡(
i
 >
ms
->
Àvñ
) {

548 i‡(
i
 == 0)

549 
	`lua_pushl°rög
(
ms
->
L
, 
s
, 
e
 - s);

551 
	`luaL_îr‹
(
ms
->
L
, "övÆid c≠tuª index %%%d", 
i
 + 1);

554 
±rdiff_t
 
l
 = 
ms
->
ˇ±uª
[
i
].
Àn
;

555 i‡(
l
 =
CAP_UNFINISHED
Ë
	`luaL_îr‹
(
ms
->
L
, "unfinished capture");

556 i‡(
l
 =
CAP_POSITION
)

557 
	`lua_pushöãgî
(
ms
->
L
, ms->
ˇ±uª
[
i
].
öô
 - ms->
§c_öô
 + 1);

559 
	`lua_pushl°rög
(
ms
->
L
, ms->
ˇ±uª
[
i
].
öô
, 
l
);

561 
	}
}

564 
	$push_ˇ±uªs
 (
M©chSèã
 *
ms
, c⁄° *
s
, c⁄° *
e
) {

565 
i
;

566 
∆evñs
 = (
ms
->
Àvñ
 =0 && 
s
) ? 1 : ms->level;

567 
	`luaL_check°ack
(
ms
->
L
, 
∆evñs
, "too many captures");

568 
i
 = 0; i < 
∆evñs
; i++)

569 
	`push_⁄eˇ±uª
(
ms
, 
i
, 
s
, 
e
);

570  
∆evñs
;

571 
	}
}

575 
	$no•ecüls
 (c⁄° *
p
, 
size_t
 
l
) {

576 
size_t
 
u±o
 = 0;

578 i‡(
	`°Ωbrk
(
p
 + 
u±o
, 
SPECIALS
))

580 
u±o
 +
	`°æí
(
p
 + upto) + 1;

581 } 
u±o
 <
l
);

583 
	}
}

586 
	$°r_föd_aux
 (
lua_Sèã
 *
L
, 
föd
) {

587 
size_t
 
ls
, 
Õ
;

588 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
ls
);

589 c⁄° *
p
 = 
	`luaL_checkl°rög
(
L
, 2, &
Õ
);

590 
lua_I¡egî
 
öô
 = 
	`po§ñ©
(
	`luaL_›töãgî
(
L
, 3, 1), 
ls
);

591 i‡(
öô
 < 1) init = 1;

592 i‡(
öô
 > (
lua_I¡egî
)
ls
 + 1) {

593 
	`lua_pushnû
(
L
);

597 i‡(
föd
 && (
	`lua_toboﬁón
(
L
, 4Ë|| 
	`no•ecüls
(
p
, 
Õ
))) {

599 c⁄° *
s2
 = 
	`lmemföd
(
s
 + 
öô
 - 1, 
ls
 - (
size_t
)öô + 1, 
p
, 
Õ
);

600 i‡(
s2
) {

601 
	`lua_pushöãgî
(
L
, 
s2
 - 
s
 + 1);

602 
	`lua_pushöãgî
(
L
, 
s2
 - 
s
 + 
Õ
);

607 
M©chSèã
 
ms
;

608 c⁄° *
s1
 = 
s
 + 
öô
 - 1;

609 
™ch‹
 = (*
p
 == '^');

610 i‡(
™ch‹
) {

611 
p
++; 
Õ
--;

613 
ms
.
L
 = L;

614 
ms
.
m©chdïth
 = 
MAXCCALLS
;

615 
ms
.
§c_öô
 = 
s
;

616 
ms
.
§c_íd
 = 
s
 + 
ls
;

617 
ms
.
p_íd
 = 
p
 + 
Õ
;

619 c⁄° *
ªs
;

620 
ms
.
Àvñ
 = 0;

621 
	`lua_as£π
(
ms
.
m©chdïth
 =
MAXCCALLS
);

622 i‡((
ªs
=
	`m©ch
(&
ms
, 
s1
, 
p
)Ë!
NULL
) {

623 i‡(
föd
) {

624 
	`lua_pushöãgî
(
L
, 
s1
 - 
s
 + 1);

625 
	`lua_pushöãgî
(
L
, 
ªs
 - 
s
);

626  
	`push_ˇ±uªs
(&
ms
, 
NULL
, 0) + 2;

629  
	`push_ˇ±uªs
(&
ms
, 
s1
, 
ªs
);

631 } 
s1
++ < 
ms
.
§c_íd
 && !
™ch‹
);

633 
	`lua_pushnû
(
L
);

635 
	}
}

638 
	$°r_föd
 (
lua_Sèã
 *
L
) {

639  
	`°r_föd_aux
(
L
, 1);

640 
	}
}

643 
	$°r_m©ch
 (
lua_Sèã
 *
L
) {

644  
	`°r_föd_aux
(
L
, 0);

645 
	}
}

648 
	$gm©ch_aux
 (
lua_Sèã
 *
L
) {

649 
M©chSèã
 
ms
;

650 
size_t
 
ls
, 
Õ
;

651 c⁄° *
s
 = 
	`lua_tﬁ°rög
(
L
, 
	`lua_upvÆueödex
(1), &
ls
);

652 c⁄° *
p
 = 
	`lua_tﬁ°rög
(
L
, 
	`lua_upvÆueödex
(2), &
Õ
);

653 c⁄° *
§c
;

654 
ms
.
L
 = L;

655 
ms
.
m©chdïth
 = 
MAXCCALLS
;

656 
ms
.
§c_öô
 = 
s
;

657 
ms
.
§c_íd
 = 
s
+
ls
;

658 
ms
.
p_íd
 = 
p
 + 
Õ
;

659 
§c
 = 
s
 + (
size_t
)
	`lua_toöãgî
(
L
, 
	`lua_upvÆueödex
(3));

660 
§c
 <
ms
.
§c_íd
;

661 
§c
++) {

662 c⁄° *
e
;

663 
ms
.
Àvñ
 = 0;

664 
	`lua_as£π
(
ms
.
m©chdïth
 =
MAXCCALLS
);

665 i‡((
e
 = 
	`m©ch
(&
ms
, 
§c
, 
p
)Ë!
NULL
) {

666 
lua_I¡egî
 
√w°¨t
 = 
e
-
s
;

667 i‡(
e
 =
§c
Ë
√w°¨t
++;

668 
	`lua_pushöãgî
(
L
, 
√w°¨t
);

669 
	`lua_ª∂a˚
(
L
, 
	`lua_upvÆueödex
(3));

670  
	`push_ˇ±uªs
(&
ms
, 
§c
, 
e
);

674 
	}
}

677 
	$gm©ch
 (
lua_Sèã
 *
L
) {

678 
	`luaL_check°rög
(
L
, 1);

679 
	`luaL_check°rög
(
L
, 2);

680 
	`lua_£â›
(
L
, 2);

681 
	`lua_pushöãgî
(
L
, 0);

682 
	`lua_pushc˛osuª
(
L
, 
gm©ch_aux
, 3);

684 
	}
}

687 
	$add_s
 (
M©chSèã
 *
ms
, 
luaL_Buf„r
 *
b
, c⁄° *
s
,

688 c⁄° *
e
) {

689 
size_t
 
l
, 
i
;

690 
lua_Sèã
 *
L
 = 
ms
->L;

691 c⁄° *
√ws
 = 
	`lua_tﬁ°rög
(
L
, 3, &
l
);

692 
i
 = 0; i < 
l
; i++) {

693 i‡(
√ws
[
i
] !
L_ESC
)

694 
	`luaL_addch¨
(
b
, 
√ws
[
i
]);

696 
i
++;

697 i‡(!
	`isdigô
(
	`uch¨
(
√ws
[
i
]))) {

698 i‡(
√ws
[
i
] !
L_ESC
)

699 
	`luaL_îr‹
(
L
, "övÆid u£ o‡'%c' i¿ª∂a˚míà°rög", 
L_ESC
);

700 
	`luaL_addch¨
(
b
, 
√ws
[
i
]);

702 i‡(
√ws
[
i
] == '0')

703 
	`luaL_addl°rög
(
b
, 
s
, 
e
 - s);

705 
	`push_⁄eˇ±uª
(
ms
, 
√ws
[
i
] - '1', 
s
, 
e
);

706 
	`luaL_tﬁ°rög
(
L
, -1, 
NULL
);

707 
	`lua_ªmove
(
L
, -2);

708 
	`luaL_addvÆue
(
b
);

712 
	}
}

715 
	$add_vÆue
 (
M©chSèã
 *
ms
, 
luaL_Buf„r
 *
b
, c⁄° *
s
,

716 c⁄° *
e
, 
å
) {

717 
lua_Sèã
 *
L
 = 
ms
->L;

718 
å
) {

719 
LUA_TFUNCTION
: {

720 
n
;

721 
	`lua_pushvÆue
(
L
, 3);

722 
n
 = 
	`push_ˇ±uªs
(
ms
, 
s
, 
e
);

723 
	`lua_ˇŒ
(
L
, 
n
, 1);

726 
LUA_TTABLE
: {

727 
	`push_⁄eˇ±uª
(
ms
, 0, 
s
, 
e
);

728 
	`lua_gëèbÀ
(
L
, 3);

732 
	`add_s
(
ms
, 
b
, 
s
, 
e
);

736 i‡(!
	`lua_toboﬁón
(
L
, -1)) {

737 
	`lua_p›
(
L
, 1);

738 
	`lua_pushl°rög
(
L
, 
s
, 
e
 - s);

740 i‡(!
	`lua_is°rög
(
L
, -1))

741 
	`luaL_îr‹
(
L
, "övÆidÑïœ˚míàvÆuê◊ %s)", 
	`luaL_ty≥«me
(L, -1));

742 
	`luaL_addvÆue
(
b
);

743 
	}
}

746 
	$°r_gsub
 (
lua_Sèã
 *
L
) {

747 
size_t
 
§˛
, 
Õ
;

748 c⁄° *
§c
 = 
	`luaL_checkl°rög
(
L
, 1, &
§˛
);

749 c⁄° *
p
 = 
	`luaL_checkl°rög
(
L
, 2, &
Õ
);

750 
å
 = 
	`lua_ty≥
(
L
, 3);

751 
lua_I¡egî
 
max_s
 = 
	`luaL_›töãgî
(
L
, 4, 
§˛
 + 1);

752 
™ch‹
 = (*
p
 == '^');

753 
lua_I¡egî
 
n
 = 0;

754 
M©chSèã
 
ms
;

755 
luaL_Buf„r
 
b
;

756 
	`luaL_¨gcheck
(
L
, 
å
 =
LUA_TNUMBER
 ||Å∏=
LUA_TSTRING
 ||

757 
å
 =
LUA_TFUNCTION
 ||Å∏=
LUA_TTABLE
, 3,

759 
	`luaL_bufföô
(
L
, &
b
);

760 i‡(
™ch‹
) {

761 
p
++; 
Õ
--;

763 
ms
.
L
 = L;

764 
ms
.
m©chdïth
 = 
MAXCCALLS
;

765 
ms
.
§c_öô
 = 
§c
;

766 
ms
.
§c_íd
 = 
§c
+
§˛
;

767 
ms
.
p_íd
 = 
p
 + 
Õ
;

768 
n
 < 
max_s
) {

769 c⁄° *
e
;

770 
ms
.
Àvñ
 = 0;

771 
	`lua_as£π
(
ms
.
m©chdïth
 =
MAXCCALLS
);

772 
e
 = 
	`m©ch
(&
ms
, 
§c
, 
p
);

773 i‡(
e
) {

774 
n
++;

775 
	`add_vÆue
(&
ms
, &
b
, 
§c
, 
e
, 
å
);

777 i‡(
e
 &&É>
§c
)

778 
§c
 = 
e
;

779 i‡(
§c
 < 
ms
.
§c_íd
)

780 
	`luaL_addch¨
(&
b
, *
§c
++);

782 i‡(
™ch‹
) ;

784 
	`luaL_addl°rög
(&
b
, 
§c
, 
ms
.
§c_íd
-src);

785 
	`luaL_pushªsu…
(&
b
);

786 
	`lua_pushöãgî
(
L
, 
n
);

788 
	}
}

801 
	#MAX_ITEM
 512

	)

804 
	#FLAGS
 "-+ #0"

	)

810 
	#MAX_FORMAT
 ((
FLAGS
Ë+ 2 + 10)

	)

813 
	$addquŸed
 (
lua_Sèã
 *
L
, 
luaL_Buf„r
 *
b
, 
¨g
) {

814 
size_t
 
l
;

815 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 
¨g
, &
l
);

816 
	`luaL_addch¨
(
b
, '"');

817 
l
--) {

818 i‡(*
s
 == '"' || *s == '\\' || *s == '\n') {

819 
	`luaL_addch¨
(
b
, '\\');

820 
	`luaL_addch¨
(
b
, *
s
);

822 i‡(*
s
 ='\0' || 
	`is˙ål
(
	`uch¨
(*s))) {

823 
buff
[10];

824 i‡(!
	`isdigô
(
	`uch¨
(*(
s
+1))))

825 
	`•rötf
(
buff
, "\\%d", ()
	`uch¨
(*
s
));

827 
	`•rötf
(
buff
, "\\%03d", ()
	`uch¨
(*
s
));

828 
	`luaL_add°rög
(
b
, 
buff
);

831 
	`luaL_addch¨
(
b
, *
s
);

832 
s
++;

834 
	`luaL_addch¨
(
b
, '"');

835 
	}
}

837 c⁄° *
	$sˇnf‹m©
 (
lua_Sèã
 *
L
, c⁄° *
°r‰mt
, *
f‹m
) {

838 c⁄° *
p
 = 
°r‰mt
;

839 *
p
 !'\0' && 
	`°rchr
(
FLAGS
, *pË!
NULL
)Ö++;

840 i‡((
size_t
)(
p
 - 
°r‰mt
Ë>(
FLAGS
)/())

841 
	`luaL_îr‹
(
L
, "invalid format (repeated flags)");

842 i‡(
	`isdigô
(
	`uch¨
(*
p
)))Ö++;

843 i‡(
	`isdigô
(
	`uch¨
(*
p
)))Ö++;

844 i‡(*
p
 == '.') {

845 
p
++;

846 i‡(
	`isdigô
(
	`uch¨
(*
p
)))Ö++;

847 i‡(
	`isdigô
(
	`uch¨
(*
p
)))Ö++;

849 i‡(
	`isdigô
(
	`uch¨
(*
p
)))

850 
	`luaL_îr‹
(
L
, "invalid format (width orÖrecisionÅooÜong)");

851 *(
f‹m
++) = '%';

852 
	`mem˝y
(
f‹m
, 
°r‰mt
, (
p
 - strfrmt + 1) * ());

853 
f‹m
 +
p
 - 
°r‰mt
 + 1;

854 *
f‹m
 = '\0';

855  
p
;

856 
	}
}

862 
	$addÀnmod
 (*
f‹m
, c⁄° *
Ànmod
) {

863 
size_t
 
l
 = 
	`°æí
(
f‹m
);

864 
size_t
 
lm
 = 
	`°æí
(
Ànmod
);

865 
•ec
 = 
f‹m
[
l
 - 1];

866 
	`°r˝y
(
f‹m
 + 
l
 - 1, 
Ànmod
);

867 
f‹m
[
l
 + 
lm
 - 1] = 
•ec
;

868 
f‹m
[
l
 + 
lm
] = '\0';

869 
	}
}

872 
	$°r_f‹m©
 (
lua_Sèã
 *
L
) {

873 
t›
 = 
	`lua_gët›
(
L
);

874 
¨g
 = 1;

875 
size_t
 
sÊ
;

876 c⁄° *
°r‰mt
 = 
	`luaL_checkl°rög
(
L
, 
¨g
, &
sÊ
);

877 c⁄° *
°r‰mt_íd
 = 
°r‰mt
+
sÊ
;

878 
luaL_Buf„r
 
b
;

879 
	`luaL_bufföô
(
L
, &
b
);

880 
°r‰mt
 < 
°r‰mt_íd
) {

881 i‡(*
°r‰mt
 !
L_ESC
)

882 
	`luaL_addch¨
(&
b
, *
°r‰mt
++);

883 i‡(*++
°r‰mt
 =
L_ESC
)

884 
	`luaL_addch¨
(&
b
, *
°r‰mt
++);

886 
f‹m
[
MAX_FORMAT
];

887 *
buff
 = 
	`luaL_¥ïbuffsize
(&
b
, 
MAX_ITEM
);

888 
nb
 = 0;

889 i‡(++
¨g
 > 
t›
)

890 
	`luaL_¨gîr‹
(
L
, 
¨g
, "no value");

891 
°r‰mt
 = 
	`sˇnf‹m©
(
L
, så‰mt, 
f‹m
);

892 *
°r‰mt
++) {

894 
nb
 = 
	`•rötf
(
buff
, 
f‹m
, ()
	`luaL_checköãgî
(
L
, 
¨g
));

899 
lua_I¡egî
 
n
 = 
	`luaL_checköãgî
(
L
, 
¨g
);

900 
	`addÀnmod
(
f‹m
, 
LUA_INTEGER_FRMLEN
);

901 
nb
 = 
	`•rötf
(
buff
, 
f‹m
, 
n
);

904 #i‡
	`deföed
(
LUA_USE_AFORMAT
)

909 
	`addÀnmod
(
f‹m
, 
LUA_NUMBER_FRMLEN
);

910 
nb
 = 
	`•rötf
(
buff
, 
f‹m
, 
	`luaL_checknumbî
(
L
, 
¨g
));

914 
	`addquŸed
(
L
, &
b
, 
¨g
);

918 
size_t
 
l
;

919 c⁄° *
s
 = 
	`luaL_tﬁ°rög
(
L
, 
¨g
, &
l
);

920 i‡(!
	`°rchr
(
f‹m
, '.'Ë&& 
l
 >= 100) {

923 
	`luaL_addvÆue
(&
b
);

927 
nb
 = 
	`•rötf
(
buff
, 
f‹m
, 
s
);

928 
	`lua_p›
(
L
, 1);

933  
	`luaL_îr‹
(
L
, "invalid option '%%%c'Åo 'format'",

934 *(
°r‰mt
 - 1));

937 
	`luaL_addsize
(&
b
, 
nb
);

940 
	`luaL_pushªsu…
(&
b
);

942 
	}
}

955 #i‡!
deföed
(
LUA_PACKPADBYTE
)

956 
	#LUA_PACKPADBYTE
 0x00

	)

960 
	#MAXINTSIZE
 16

	)

963 
	#NB
 
CHAR_BIT


	)

966 
	#MC
 ((1 << 
NB
Ë- 1)

	)

969 
	#SZINT
 (()(
lua_I¡egî
))

	)

974 
	mdummy
;

975 
	mlôée
;

976 } 
	g«tivìndün
 = {1};

980 
	scD
 {

981 
	mc
;

982 uni⁄ { 
	md
; *
	mp
; 
lua_I¡egî
 
	mi
; 
lua_Numbî
 
	mn
; } 
	mu
;

985 
	#MAXALIGN
 (
	`off£tof
(
cD
, 
u
))

	)

991 
	uFty≥s
 {

992 
	mf
;

993 
	md
;

994 
lua_Numbî
 
	mn
;

995 
	mbuff
[5 * (
lua_Numbî
)];

996 } 
	tFty≥s
;

1002 
	sHódî
 {

1003 
lua_Sèã
 *
	mL
;

1004 
	mi¶ôée
;

1005 
	mmaxÆign
;

1006 } 
	tHódî
;

1012 
	eKO±i⁄
 {

1013 
	mKöt
,

1014 
	mKuöt
,

1015 
	mKÊﬂt
,

1016 
	mKch¨
,

1017 
	mK°rög
,

1018 
	mKz°r
,

1019 
	mK∑ddög
,

1020 
	mK∑ddÆign
,

1021 
	mKn›


1022 } 
	tKO±i⁄
;

1029 
	$digô
 (
c
Ë{  '0' <¯&& c <'9'; 
	}
}

1031 
	$gënum
 (c⁄° **
fmt
, 
df
) {

1032 i‡(!
	`digô
(**
fmt
))

1033  
df
;

1035 
a
 = 0;

1037 
a
 =á*10 + (*((*
fmt
)++) - '0');

1038 } 
	`digô
(**
fmt
Ë&& 
a
 <(()
MAXSIZE
 - 9)/10);

1039  
a
;

1041 
	}
}

1048 
	$gënumlimô
 (
Hódî
 *
h
, c⁄° **
fmt
, 
df
) {

1049 
sz
 = 
	`gënum
(
fmt
, 
df
);

1050 i‡(
sz
 > 
MAXINTSIZE
 || sz <= 0)

1051 
	`luaL_îr‹
(
h
->
L
, "integral size (%d) out ofÜimits [1,%d]",

1052 
sz
, 
MAXINTSIZE
);

1053  
sz
;

1054 
	}
}

1060 
	$öôhódî
 (
lua_Sèã
 *
L
, 
Hódî
 *
h
) {

1061 
h
->
L
 = L;

1062 
h
->
i¶ôée
 = 
«tivìndün
.
lôée
;

1063 
h
->
maxÆign
 = 1;

1064 
	}
}

1070 
KO±i⁄
 
	$gë›ti⁄
 (
Hódî
 *
h
, c⁄° **
fmt
, *
size
) {

1071 
›t
 = *((*
fmt
)++);

1072 *
size
 = 0;

1073 
›t
) {

1074 'b': *
size
 = ();  
Köt
;

1075 'B': *
size
 = ();  
Kuöt
;

1076 'h': *
size
 = ();  
Köt
;

1077 'H': *
size
 = ();  
Kuöt
;

1078 'l': *
size
 = ();  
Köt
;

1079 'L': *
size
 = ();  
Kuöt
;

1080 'j': *
size
 = (
lua_I¡egî
);  
Köt
;

1081 'J': *
size
 = (
lua_I¡egî
);  
Kuöt
;

1082 'T': *
size
 = (
size_t
);  
Kuöt
;

1083 'f': *
size
 = ();  
KÊﬂt
;

1084 'd': *
size
 = ();  
KÊﬂt
;

1085 'n': *
size
 = (
lua_Numbî
);  
KÊﬂt
;

1086 'i': *
size
 = 
	`gënumlimô
(
h
, 
fmt
, ());  
Köt
;

1087 'I': *
size
 = 
	`gënumlimô
(
h
, 
fmt
, ());  
Kuöt
;

1088 's': *
size
 = 
	`gënumlimô
(
h
, 
fmt
, (
size_t
));  
K°rög
;

1090 *
size
 = 
	`gënum
(
fmt
, -1);

1091 i‡(*
size
 == -1)

1092 
	`luaL_îr‹
(
h
->
L
, "missing size for format option 'c'");

1093  
Kch¨
;

1094 'z':  
Kz°r
;

1095 'x': *
size
 = 1;  
K∑ddög
;

1096 'X':  
K∑ddÆign
;

1098 '<': 
h
->
i¶ôée
 = 1; ;

1099 '>': 
h
->
i¶ôée
 = 0; ;

1100 '=': 
h
->
i¶ôée
 = 
«tivìndün
.
lôée
; ;

1101 '!': 
h
->
maxÆign
 = 
	`gënumlimô
(h, 
fmt
, 
MAXALIGN
); ;

1102 : 
	`luaL_îr‹
(
h
->
L
, "övÆid f‹m© o±i⁄ '%c'", 
›t
);

1104  
Kn›
;

1105 
	}
}

1117 
KO±i⁄
 
	$gëdëaûs
 (
Hódî
 *
h
, 
size_t
 
tŸÆsize
,

1118 c⁄° **
fmt
, *
psize
, *
¡ﬂlign
) {

1119 
KO±i⁄
 
›t
 = 
	`gë›ti⁄
(
h
, 
fmt
, 
psize
);

1120 
Æign
 = *
psize
;

1121 i‡(
›t
 =
K∑ddÆign
) {

1122 i‡(**
fmt
 ='\0' || 
	`gë›ti⁄
(
h
, fmt, &
Æign
Ë=
Kch¨
 ||álign == 0)

1123 
	`luaL_¨gîr‹
(
h
->
L
, 1, "invalidÇext option for option 'X'");

1125 i‡(
Æign
 <1 || 
›t
 =
Kch¨
)

1126 *
¡ﬂlign
 = 0;

1128 i‡(
Æign
 > 
h
->
maxÆign
)

1129 
Æign
 = 
h
->
maxÆign
;

1130 i‡((
Æign
 & (align - 1)) != 0)

1131 
	`luaL_¨gîr‹
(
h
->
L
, 1, "formatásks forálignmentÇotÖower of 2");

1132 *
¡ﬂlign
 = (
Æign
 - ()(
tŸÆsize
 & (align - 1))) & (align - 1);

1134  
›t
;

1135 
	}
}

1144 
	$∑cköt
 (
luaL_Buf„r
 *
b
, 
lua_Unsig√d
 
n
,

1145 
i¶ôée
, 
size
, 
√g
) {

1146 *
buff
 = 
	`luaL_¥ïbuffsize
(
b
, 
size
);

1147 
i
;

1148 
buff
[
i¶ôée
 ? 0 : 
size
 - 1] = ()(
n
 & 
MC
);

1149 
i
 = 1; i < 
size
; i++) {

1150 
n
 >>
NB
;

1151 
buff
[
i¶ôée
 ? 
i
 : 
size
 - 1 - i] = ()(
n
 & 
MC
);

1153 i‡(
√g
 && 
size
 > 
SZINT
) {

1154 
i
 = 
SZINT
; i < 
size
; i++)

1155 
buff
[
i¶ôée
 ? 
i
 : 
size
 - 1 - i] = ()
MC
;

1157 
	`luaL_addsize
(
b
, 
size
);

1158 
	}
}

1165 
	$c›ywôhídün
 (vﬁ©ûê*
de°
, vﬁ©ûêc⁄° *
§c
,

1166 
size
, 
i¶ôée
) {

1167 i‡(
i¶ôée
 =
«tivìndün
.
lôée
) {

1168 
size
-- != 0)

1169 *(
de°
++Ë*(
§c
++);

1172 
de°
 +
size
 - 1;

1173 
size
-- != 0)

1174 *(
de°
--Ë*(
§c
++);

1176 
	}
}

1179 
	$°r_∑ck
 (
lua_Sèã
 *
L
) {

1180 
luaL_Buf„r
 
b
;

1181 
Hódî
 
h
;

1182 c⁄° *
fmt
 = 
	`luaL_check°rög
(
L
, 1);

1183 
¨g
 = 1;

1184 
size_t
 
tŸÆsize
 = 0;

1185 
	`öôhódî
(
L
, &
h
);

1186 
	`lua_pushnû
(
L
);

1187 
	`luaL_bufföô
(
L
, &
b
);

1188 *
fmt
 != '\0') {

1189 
size
, 
¡ﬂlign
;

1190 
KO±i⁄
 
›t
 = 
	`gëdëaûs
(&
h
, 
tŸÆsize
, &
fmt
, &
size
, &
¡ﬂlign
);

1191 
tŸÆsize
 +
¡ﬂlign
 + 
size
;

1192 
¡ﬂlign
-- > 0)

1193 
	`luaL_addch¨
(&
b
, 
LUA_PACKPADBYTE
);

1194 
¨g
++;

1195 
›t
) {

1196 
Köt
: {

1197 
lua_I¡egî
 
n
 = 
	`luaL_checköãgî
(
L
, 
¨g
);

1198 i‡(
size
 < 
SZINT
) {

1199 
lua_I¡egî
 
lim
 = (lua_I¡egî)1 << ((
size
 * 
NB
) - 1);

1200 
	`luaL_¨gcheck
(
L
, -
lim
 <
n
 &&Ç <Üim, 
¨g
, "integer overflow");

1202 
	`∑cköt
(&
b
, (
lua_Unsig√d
)
n
, 
h
.
i¶ôée
, 
size
, (n < 0));

1205 
Kuöt
: {

1206 
lua_I¡egî
 
n
 = 
	`luaL_checköãgî
(
L
, 
¨g
);

1207 i‡(
size
 < 
SZINT
)

1208 
	`luaL_¨gcheck
(
L
, (
lua_Unsig√d
)
n
 < (÷ua_Unsig√d)1 << (
size
 * 
NB
)),

1209 
¨g
, "unsigned overflow");

1210 
	`∑cköt
(&
b
, (
lua_Unsig√d
)
n
, 
h
.
i¶ôée
, 
size
, 0);

1213 
KÊﬂt
: {

1214 vﬁ©ûê
Fty≥s
 
u
;

1215 *
buff
 = 
	`luaL_¥ïbuffsize
(&
b
, 
size
);

1216 
lua_Numbî
 
n
 = 
	`luaL_checknumbî
(
L
, 
¨g
);

1217 i‡(
size
 =(
u
.
f
)Ëu.‡()
n
;

1218 i‡(
size
 =(
u
.
d
)Ëu.d = ()
n
;

1219 
u
.
n
 =Ç;

1221 
	`c›ywôhídün
(
buff
, 
u
.buff, 
size
, 
h
.
i¶ôée
);

1222 
	`luaL_addsize
(&
b
, 
size
);

1225 
Kch¨
: {

1226 
size_t
 
Àn
;

1227 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 
¨g
, &
Àn
);

1228 
	`luaL_¨gcheck
(
L
, 
Àn
 =(
size_t
)
size
, 
¨g
, "wrongÜength");

1229 
	`luaL_addl°rög
(&
b
, 
s
, 
size
);

1232 
K°rög
: {

1233 
size_t
 
Àn
;

1234 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 
¨g
, &
Àn
);

1235 
	`luaL_¨gcheck
(
L
, 
size
 >()(
size_t
) ||

1236 
Àn
 < ((
size_t
)1 << (
size
 * 
NB
)),

1237 
¨g
, "stringÜength doesÇot fit in given size");

1238 
	`∑cköt
(&
b
, (
lua_Unsig√d
)
Àn
, 
h
.
i¶ôée
, 
size
, 0);

1239 
	`luaL_addl°rög
(&
b
, 
s
, 
Àn
);

1240 
tŸÆsize
 +
Àn
;

1243 
Kz°r
: {

1244 
size_t
 
Àn
;

1245 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 
¨g
, &
Àn
);

1246 
	`luaL_¨gcheck
(
L
, 
	`°æí
(
s
Ë=
Àn
, 
¨g
, "string contains zeros");

1247 
	`luaL_addl°rög
(&
b
, 
s
, 
Àn
);

1248 
	`luaL_addch¨
(&
b
, '\0');

1249 
tŸÆsize
 +
Àn
 + 1;

1252 
K∑ddög
: 
	`luaL_addch¨
(&
b
, 
LUA_PACKPADBYTE
);

1253 
K∑ddÆign
: 
Kn›
:

1254 
¨g
--;

1258 
	`luaL_pushªsu…
(&
b
);

1260 
	}
}

1263 
	$°r_∑cksize
 (
lua_Sèã
 *
L
) {

1264 
Hódî
 
h
;

1265 c⁄° *
fmt
 = 
	`luaL_check°rög
(
L
, 1);

1266 
size_t
 
tŸÆsize
 = 0;

1267 
	`öôhódî
(
L
, &
h
);

1268 *
fmt
 != '\0') {

1269 
size
, 
¡ﬂlign
;

1270 
KO±i⁄
 
›t
 = 
	`gëdëaûs
(&
h
, 
tŸÆsize
, &
fmt
, &
size
, &
¡ﬂlign
);

1271 
size
 +
¡ﬂlign
;

1272 
	`luaL_¨gcheck
(
L
, 
tŸÆsize
 <
MAXSIZE
 - 
size
, 1,

1274 
tŸÆsize
 +
size
;

1275 
›t
) {

1276 
K°rög
:

1277 
Kz°r
:

1278 
	`luaL_¨gîr‹
(
L
, 1, "variable-length format");

1283 
	`lua_pushöãgî
(
L
, (
lua_I¡egî
)
tŸÆsize
);

1285 
	}
}

1296 
lua_I¡egî
 
	$u≈acköt
 (
lua_Sèã
 *
L
, c⁄° *
°r
,

1297 
i¶ôée
, 
size
, 
issig√d
) {

1298 
lua_Unsig√d
 
ªs
 = 0;

1299 
i
;

1300 
limô
 = (
size
 <
SZINT
) ? size : SZINT;

1301 
i
 = 
limô
 - 1; i >= 0; i--) {

1302 
ªs
 <<
NB
;

1303 
ªs
 |(
lua_Unsig√d
)()
°r
[
i¶ôée
 ? 
i
 : 
size
 - 1 - i];

1305 i‡(
size
 < 
SZINT
) {

1306 i‡(
issig√d
) {

1307 
lua_Unsig√d
 
mask
 = (lua_Unsig√d)1 << (
size
*
NB
 - 1);

1308 
ªs
 = (‘e†^ 
mask
) - mask);

1311 i‡(
size
 > 
SZINT
) {

1312 
mask
 = (!
issig√d
 || (
lua_I¡egî
)
ªs
 >0Ë? 0 : 
MC
;

1313 
i
 = 
limô
; i < 
size
; i++) {

1314 i‡(()
°r
[
i¶ôée
 ? 
i
 : 
size
 - 1 - i] !
mask
)

1315 
	`luaL_îr‹
(
L
, "%d-byã i¡egî d€†nŸ fô i¡ÿLu®I¡egî", 
size
);

1318  (
lua_I¡egî
)
ªs
;

1319 
	}
}

1322 
	$°r_u≈ack
 (
lua_Sèã
 *
L
) {

1323 
Hódî
 
h
;

1324 c⁄° *
fmt
 = 
	`luaL_check°rög
(
L
, 1);

1325 
size_t
 
ld
;

1326 c⁄° *
d©a
 = 
	`luaL_checkl°rög
(
L
, 2, &
ld
);

1327 
size_t
 
pos
 = (size_t)
	`po§ñ©
(
	`luaL_›töãgî
(
L
, 3, 1), 
ld
) - 1;

1328 
n
 = 0;

1329 
	`luaL_¨gcheck
(
L
, 
pos
 <
ld
, 3, "initialÖosition out of string");

1330 
	`öôhódî
(
L
, &
h
);

1331 *
fmt
 != '\0') {

1332 
size
, 
¡ﬂlign
;

1333 
KO±i⁄
 
›t
 = 
	`gëdëaûs
(&
h
, 
pos
, &
fmt
, &
size
, &
¡ﬂlign
);

1334 i‡((
size_t
)
¡ﬂlign
 + 
size
 > ~
pos
 ||Öo†+Çtﬂlig¿+ sizê> 
ld
)

1335 
	`luaL_¨gîr‹
(
L
, 2, "data stringÅoo short");

1336 
pos
 +
¡ﬂlign
;

1338 
	`luaL_check°ack
(
L
, 2, "too manyÑesults");

1339 
n
++;

1340 
›t
) {

1341 
Köt
:

1342 
Kuöt
: {

1343 
lua_I¡egî
 
ªs
 = 
	`u≈acköt
(
L
, 
d©a
 + 
pos
, 
h
.
i¶ôée
, 
size
,

1344 (
›t
 =
Köt
));

1345 
	`lua_pushöãgî
(
L
, 
ªs
);

1348 
KÊﬂt
: {

1349 vﬁ©ûê
Fty≥s
 
u
;

1350 
lua_Numbî
 
num
;

1351 
	`c›ywôhídün
(
u
.
buff
, 
d©a
 + 
pos
, 
size
, 
h
.
i¶ôée
);

1352 i‡(
size
 =(
u
.
f
)Ë
num
 = (
lua_Numbî
)u.f;

1353 i‡(
size
 =(
u
.
d
)Ë
num
 = (
lua_Numbî
)u.d;

1354 
num
 = 
u
.
n
;

1355 
	`lua_pushnumbî
(
L
, 
num
);

1358 
Kch¨
: {

1359 
	`lua_pushl°rög
(
L
, 
d©a
 + 
pos
, 
size
);

1362 
K°rög
: {

1363 
size_t
 
Àn
 = (size_t)
	`u≈acköt
(
L
, 
d©a
 + 
pos
, 
h
.
i¶ôée
, 
size
, 0);

1364 
	`luaL_¨gcheck
(
L
, 
pos
 + 
Àn
 + 
size
 <
ld
, 2, "data stringÅoo short");

1365 
	`lua_pushl°rög
(
L
, 
d©a
 + 
pos
 + 
size
, 
Àn
);

1366 
pos
 +
Àn
;

1369 
Kz°r
: {

1370 
size_t
 
Àn
 = ()
	`°æí
(
d©a
 + 
pos
);

1371 
	`lua_pushl°rög
(
L
, 
d©a
 + 
pos
, 
Àn
);

1372 
pos
 +
Àn
 + 1;

1375 
K∑ddÆign
: 
K∑ddög
: 
Kn›
:

1376 
n
--;

1379 
pos
 +
size
;

1381 
	`lua_pushöãgî
(
L
, 
pos
 + 1);

1382  
n
 + 1;

1383 
	}
}

1388 c⁄° 
luaL_Reg
 
	g°æib
[] = {

1389 {"byã", 
°r_byã
},

1390 {"ch¨", 
°r_ch¨
},

1391 {"dump", 
°r_dump
},

1392 {"föd", 
°r_föd
},

1393 {"f‹m©", 
°r_f‹m©
},

1394 {"gm©ch", 
gm©ch
},

1395 {"gsub", 
°r_gsub
},

1396 {"Àn", 
°r_Àn
},

1397 {"lowî", 
°r_lowî
},

1398 {"m©ch", 
°r_m©ch
},

1399 {"ªp", 
°r_ªp
},

1400 {"ªvî£", 
°r_ªvî£
},

1401 {"sub", 
°r_sub
},

1402 {"uµî", 
°r_uµî
},

1403 {"∑ck", 
°r_∑ck
},

1404 {"∑cksize", 
°r_∑cksize
},

1405 {"u≈ack", 
°r_u≈ack
},

1406 {
NULL
, NULL}

1410 
	$¸óãmë©abÀ
 (
lua_Sèã
 *
L
) {

1411 
	`lua_¸óãèbÀ
(
L
, 0, 1);

1412 
	`lua_pushlôîÆ
(
L
, "");

1413 
	`lua_pushvÆue
(
L
, -2);

1414 
	`lua_£tmë©abÀ
(
L
, -2);

1415 
	`lua_p›
(
L
, 1);

1416 
	`lua_pushvÆue
(
L
, -2);

1417 
	`lua_£tfõld
(
L
, -2, "__index");

1418 
	`lua_p›
(
L
, 1);

1419 
	}
}

1425 
LUAMOD_API
 
	$lua›í_°rög
 (
lua_Sèã
 *
L
) {

1426 
	`luaL_√wlib
(
L
, 
°æib
);

1427 
	`¸óãmë©abÀ
(
L
);

1429 
	}
}

	@lib/archive/lua-5.3.0/src/ltable.c

7 
	#…abÀ_c


	)

8 
	#LUA_CORE


	)

10 
	~"Õªfix.h
"

26 
	~<Êﬂt.h
>

27 
	~<m©h.h
>

28 
	~<°rög.h
>

29 
	~<limôs.h
>

31 
	~"lua.h
"

33 
	~"ldebug.h
"

34 
	~"ldo.h
"

35 
	~"lgc.h
"

36 
	~"lmem.h
"

37 
	~"lobje˘.h
"

38 
	~"l°©e.h
"

39 
	~"l°rög.h
"

40 
	~"…abÀ.h
"

41 
	~"lvm.h
"

48 
	#MAXABITS
 
	`ˇ°_öt
((Ë* 
CHAR_BIT
 - 1)

	)

49 
	#MAXASIZE
 (1u << 
MAXABITS
)

	)

57 
	#MAXHBITS
 (
MAXABITS
 - 1)

	)

60 
	#hashpow2
(
t
,
n
Ë(
	`gnode
—, 
	`lmod
(“), 
	`sizíode
—))))

	)

62 
	#hash°r
(
t
,
°r
Ë
	`hashpow2
—, (°r)->
hash
)

	)

63 
	#hashboﬁón
(
t
,
p
Ë
	`hashpow2
—,Ö)

	)

64 
	#hashöt
(
t
,
i
Ë
	`hashpow2
—, i)

	)

71 
	#hashmod
(
t
,
n
Ë(
	`gnode
—, (“Ë% ((
	`sizíode
—)-1)|1))))

	)

74 
	#hashpoöãr
(
t
,
p
Ë
	`hashmod
—, 
	`poöt2öt
’))

	)

77 
	#dummynode
 (&
dummynode_
)

	)

79 
	#isdummy
(
n
Ë(“Ë=
dummynode
)

	)

81 c⁄° 
Node
 
	gdummynode_
 = {

82 {
NILCONSTANT
},

83 {{
NILCONSTANT
, 0}}

91 
	$numisöãgî
 (
lua_Numbî
 
x
, 
lua_I¡egî
 *
p
) {

92 i‡((
x
Ë=
	`l_Êo‹
(x))

93  
	`lua_numbîtoöãgî
(
x
, 
p
);

95 
	}
}

101 
Node
 *
	$hashÊﬂt
 (c⁄° 
TabÀ
 *
t
, 
lua_Numbî
 
n
) {

102 
i
;

103 
n
 = 
	`l_m©h›
(
‰exp
)“, &
i
Ë* 
	`ˇ°_num
(
INT_MAX
 - 
DBL_MAX_EXP
);

104 
i
 +
	`ˇ°_öt
(
n
);

105 i‡(
i
 < 0) {

106 i‡(
	`ˇ°
(, 
i
) == 0u - i)

107 
i
 = 0;

108 
i
 = -i;

110  
	`hashmod
(
t
, 
i
);

111 
	}
}

119 
Node
 *
	$maöposôi⁄
 (c⁄° 
TabÀ
 *
t
, c⁄° 
TVÆue
 *
key
) {

120 
	`ây≥
(
key
)) {

121 
LUA_TNUMINT
:

122  
	`hashöt
(
t
, 
	`ivÆue
(
key
));

123 
LUA_TNUMFLT
:

124  
	`hashÊﬂt
(
t
, 
	`ÊtvÆue
(
key
));

125 
LUA_TSHRSTR
:

126  
	`hash°r
(
t
, 
	`tsvÆue
(
key
));

127 
LUA_TLNGSTR
: {

128 
TSåög
 *
s
 = 
	`tsvÆue
(
key
);

129 i‡(
s
->
exåa
 == 0) {

130 
s
->
hash
 = 
	`luaS_hash
(
	`gë°r
(s), s->
Àn
, s->hash);

131 
s
->
exåa
 = 1;

133  
	`hash°r
(
t
, 
	`tsvÆue
(
key
));

135 
LUA_TBOOLEAN
:

136  
	`hashboﬁón
(
t
, 
	`bvÆue
(
key
));

137 
LUA_TLIGHTUSERDATA
:

138  
	`hashpoöãr
(
t
, 
	`pvÆue
(
key
));

139 
LUA_TLCF
:

140  
	`hashpoöãr
(
t
, 
	`fvÆue
(
key
));

142  
	`hashpoöãr
(
t
, 
	`gcvÆue
(
key
));

144 
	}
}

151 
	$¨øyödex
 (c⁄° 
TVÆue
 *
key
) {

152 i‡(
	`âisöãgî
(
key
)) {

153 
lua_I¡egî
 
k
 = 
	`ivÆue
(
key
);

154 i‡(0 < 
k
 && (
lua_Unsig√d
)k <
MAXASIZE
)

155  
	`ˇ°
(, 
k
);

158 
	}
}

166 
	$födödex
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
StkId
 
key
) {

167 
i
;

168 i‡(
	`âi¢û
(
key
))  0;

169 
i
 = 
	`¨øyödex
(
key
);

170 i‡(
i
 !0 && i <
t
->
sizóºay
)

171  
i
;

173 
nx
;

174 
Node
 *
n
 = 
	`maöposôi⁄
(
t
, 
key
);

177 i‡(
	`luaV_øwequÆobj
(
	`gkey
(
n
), 
key
) ||

178 (
	`âisdódkey
(
	`gkey
(
n
)Ë&& 
	`iscﬁÀ˘abÀ
(
key
) &&

179 
	`dódvÆue
(
	`gkey
(
n
)Ë=
	`gcvÆue
(
key
))) {

180 
i
 = 
	`ˇ°_öt
(
n
 - 
	`gnode
(
t
, 0));

182  (
i
 + 1Ë+ 
t
->
sizóºay
;

184 
nx
 = 
	`g√xt
(
n
);

185 i‡(
nx
 == 0)

186 
	`luaG_ru√º‹
(
L
, "invalid keyÅo 'next'");

187 
n
 +
nx
;

190 
	}
}

193 
	$luaH_√xt
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
StkId
 
key
) {

194 
i
 = 
	`födödex
(
L
, 
t
, 
key
);

195 ; 
i
 < 
t
->
sizóºay
; i++) {

196 i‡(!
	`âi¢û
(&
t
->
¨øy
[
i
])) {

197 
	`£tivÆue
(
key
, 
i
 + 1);

198 
	`£tobj2s
(
L
, 
key
+1, &
t
->
¨øy
[
i
]);

202 
i
 -
t
->
sizóºay
; 
	`ˇ°_öt
(iË< 
	`sizíode
(t); i++) {

203 i‡(!
	`âi¢û
(
	`gvÆ
(
	`gnode
(
t
, 
i
)))) {

204 
	`£tobj2s
(
L
, 
key
, 
	`gkey
(
	`gnode
(
t
, 
i
)));

205 
	`£tobj2s
(
L
, 
key
+1, 
	`gvÆ
(
	`gnode
(
t
, 
i
)));

210 
	}
}

225 
	$compuãsizes
 (
nums
[], *
«ºay
) {

226 
i
;

227 
twŸoi
;

228 
a
 = 0;

229 
«
 = 0;

230 
n
 = 0;

231 
i
 = 0, 
twŸoi
 = 1;ÅwŸoi/2 < *
«ºay
; i++,Åwotoi *= 2) {

232 i‡(
nums
[
i
] > 0) {

233 
a
 +
nums
[
i
];

234 i‡(
a
 > 
twŸoi
/2) {

235 
n
 = 
twŸoi
;

236 
«
 = 
a
;

239 i‡(
a
 =*
«ºay
) ;

241 *
«ºay
 = 
n
;

242 
	`lua_as£π
(*
«ºay
/2 <
«
 &&Ça <= *narray);

243  
«
;

244 
	}
}

247 
	$cou¡öt
 (c⁄° 
TVÆue
 *
key
, *
nums
) {

248 
k
 = 
	`¨øyödex
(
key
);

249 i‡(
k
 != 0) {

250 
nums
[
	`luaO_˚ûlog2
(
k
)]++;

255 
	}
}

258 
	$numu£¨øy
 (c⁄° 
TabÀ
 *
t
, *
nums
) {

259 
lg
;

260 
âlg
;

261 
au£
 = 0;

262 
i
 = 1;

264 
lg
 = 0, 
âlg
 = 1;Üg <
MAXABITS
;Üg++,Åtlg *= 2) {

265 
lc
 = 0;

266 
lim
 = 
âlg
;

267 i‡(
lim
 > 
t
->
sizóºay
) {

268 
lim
 = 
t
->
sizóºay
;

269 i‡(
i
 > 
lim
)

273 ; 
i
 <
lim
; i++) {

274 i‡(!
	`âi¢û
(&
t
->
¨øy
[
i
-1]))

275 
lc
++;

277 
nums
[
lg
] +
lc
;

278 
au£
 +
lc
;

280  
au£
;

281 
	}
}

284 
	$numu£hash
 (c⁄° 
TabÀ
 *
t
, *
nums
,

285 *
≤asize
) {

286 
tŸÆu£
 = 0;

287 
au£
 = 0;

288 
i
 = 
	`sizíode
(
t
);

289 
i
--) {

290 
Node
 *
n
 = &
t
->
node
[
i
];

291 i‡(!
	`âi¢û
(
	`gvÆ
(
n
))) {

292 
au£
 +
	`cou¡öt
(
	`gkey
(
n
), 
nums
);

293 
tŸÆu£
++;

296 *
≤asize
 +
au£
;

297  
tŸÆu£
;

298 
	}
}

301 
	$£èºayve˘‹
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
size
) {

302 
i
;

303 
	`luaM_ªÆlocve˘‹
(
L
, 
t
->
¨øy
,Å->
sizóºay
, 
size
, 
TVÆue
);

304 
i
=
t
->
sizóºay
; i<
size
; i++)

305 
	`£äûvÆue
(&
t
->
¨øy
[
i
]);

306 
t
->
sizóºay
 = 
size
;

307 
	}
}

310 
	$£äodeve˘‹
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
size
) {

311 
lsize
;

312 i‡(
size
 == 0) {

313 
t
->
node
 = 
	`ˇ°
(
Node
 *, 
dummynode
);

314 
lsize
 = 0;

317 
i
;

318 
lsize
 = 
	`luaO_˚ûlog2
(
size
);

319 i‡(
lsize
 > 
MAXHBITS
)

320 
	`luaG_ru√º‹
(
L
, "table overflow");

321 
size
 = 
	`twŸo
(
lsize
);

322 
t
->
node
 = 
	`luaM_√wve˘‹
(
L
, 
size
, 
Node
);

323 
i
 = 0; i < ()
size
; i++) {

324 
Node
 *
n
 = 
	`gnode
(
t
, 
i
);

325 
	`g√xt
(
n
) = 0;

326 
	`£äûvÆue
(
	`wgkey
(
n
));

327 
	`£äûvÆue
(
	`gvÆ
(
n
));

330 
t
->
lsizíode
 = 
	`ˇ°_byã
(
lsize
);

331 
t
->
œ°‰ì
 = 
	`gnode
—, 
size
);

332 
	}
}

335 
	$luaH_ªsize
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
«size
,

336 
nhsize
) {

337 
i
;

338 
j
;

339 
ﬁdasize
 = 
t
->
sizóºay
;

340 
ﬁdhsize
 = 
t
->
lsizíode
;

341 
Node
 *
nﬁd
 = 
t
->
node
;

342 i‡(
«size
 > 
ﬁdasize
)

343 
	`£èºayve˘‹
(
L
, 
t
, 
«size
);

345 
	`£äodeve˘‹
(
L
, 
t
, 
nhsize
);

346 i‡(
«size
 < 
ﬁdasize
) {

347 
t
->
sizóºay
 = 
«size
;

349 
i
=
«size
; i<
ﬁdasize
; i++) {

350 i‡(!
	`âi¢û
(&
t
->
¨øy
[
i
]))

351 
	`luaH_£töt
(
L
, 
t
, 
i
 + 1, &t->
¨øy
[i]);

354 
	`luaM_ªÆlocve˘‹
(
L
, 
t
->
¨øy
, 
ﬁdasize
, 
«size
, 
TVÆue
);

357 
j
 = 
	`twŸo
(
ﬁdhsize
) - 1; j >= 0; j--) {

358 
Node
 *
ﬁd
 = 
nﬁd
 + 
j
;

359 i‡(!
	`âi¢û
(
	`gvÆ
(
ﬁd
))) {

362 
	`£tobjt2t
(
L
, 
	`luaH_£t
(L, 
t
, 
	`gkey
(
ﬁd
)), 
	`gvÆ
(old));

365 i‡(!
	`isdummy
(
nﬁd
))

366 
	`luaM_‰ì¨øy
(
L
, 
nﬁd
, 
	`ˇ°
(
size_t
, 
	`twŸo
(
ﬁdhsize
)));

367 
	}
}

370 
	$luaH_ªsizóºay
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
«size
) {

371 
nsize
 = 
	`isdummy
(
t
->
node
Ë? 0 : 
	`sizíode
(t);

372 
	`luaH_ªsize
(
L
, 
t
, 
«size
, 
nsize
);

373 
	}
}

378 
	$ªhash
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, c⁄° 
TVÆue
 *
ek
) {

379 
«size
, 
«
;

380 
nums
[
MAXABITS
 + 1];

381 
i
;

382 
tŸÆu£
;

383 
i
 = 0; i <
MAXABITS
; i++Ë
nums
[i] = 0;

384 
«size
 = 
	`numu£¨øy
(
t
, 
nums
);

385 
tŸÆu£
 = 
«size
;

386 
tŸÆu£
 +
	`numu£hash
(
t
, 
nums
, &
«size
);

388 
«size
 +
	`cou¡öt
(
ek
, 
nums
);

389 
tŸÆu£
++;

391 
«
 = 
	`compuãsizes
(
nums
, &
«size
);

393 
	`luaH_ªsize
(
L
, 
t
, 
«size
, 
tŸÆu£
 - 
«
);

394 
	}
}

403 
TabÀ
 *
	$luaH_√w
 (
lua_Sèã
 *
L
) {

404 
GCObje˘
 *
o
 = 
	`luaC_√wobj
(
L
, 
LUA_TTABLE
, (
TabÀ
));

405 
TabÀ
 *
t
 = 
	`gco2t
(
o
);

406 
t
->
më©abÀ
 = 
NULL
;

407 
t
->
Êags
 = 
	`ˇ°_byã
(~0);

408 
t
->
¨øy
 = 
NULL
;

409 
t
->
sizóºay
 = 0;

410 
	`£äodeve˘‹
(
L
, 
t
, 0);

411  
t
;

412 
	}
}

415 
	$luaH_‰ì
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
) {

416 i‡(!
	`isdummy
(
t
->
node
))

417 
	`luaM_‰ì¨øy
(
L
, 
t
->
node
, 
	`ˇ°
(
size_t
, 
	`sizíode
(t)));

418 
	`luaM_‰ì¨øy
(
L
, 
t
->
¨øy
,Å->
sizóºay
);

419 
	`luaM_‰ì
(
L
, 
t
);

420 
	}
}

423 
Node
 *
	$gë‰ìpos
 (
TabÀ
 *
t
) {

424 
t
->
œ°‰ì
 >Å->
node
) {

425 
t
->
œ°‰ì
--;

426 i‡(
	`âi¢û
(
	`gkey
(
t
->
œ°‰ì
)))

427  
t
->
œ°‰ì
;

429  
NULL
;

430 
	}
}

441 
TVÆue
 *
	$luaH_√wkey
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, c⁄° 
TVÆue
 *
key
) {

442 
Node
 *
mp
;

443 
TVÆue
 
aux
;

444 i‡(
	`âi¢û
(
key
)Ë
	`luaG_ru√º‹
(
L
, "table index isÇil");

445 i‡(
	`âisÊﬂt
(
key
)) {

446 
lua_Numbî
 
n
 = 
	`ÊtvÆue
(
key
);

447 
lua_I¡egî
 
k
;

448 i‡(
	`luai_numi¢™
(
n
))

449 
	`luaG_ru√º‹
(
L
, "table index is NaN");

450 i‡(
	`numisöãgî
(
n
, &
k
)) {

451 
	`£tivÆue
(&
aux
, 
k
);

452 
key
 = &
aux
;

455 
mp
 = 
	`maöposôi⁄
(
t
, 
key
);

456 i‡(!
	`âi¢û
(
	`gvÆ
(
mp
)Ë|| 
	`isdummy
(mp)) {

457 
Node
 *
Ÿhîn
;

458 
Node
 *
f
 = 
	`gë‰ìpos
(
t
);

459 i‡(
f
 =
NULL
) {

460 
	`ªhash
(
L
, 
t
, 
key
);

462  
	`luaH_£t
(
L
, 
t
, 
key
);

464 
	`lua_as£π
(!
	`isdummy
(
f
));

465 
Ÿhîn
 = 
	`maöposôi⁄
(
t
, 
	`gkey
(
mp
));

466 i‡(
Ÿhîn
 !
mp
) {

468 
Ÿhîn
 + 
	`g√xt
(ŸhînË!
mp
)

469 
Ÿhîn
 +
	`g√xt
(othern);

470 
	`g√xt
(
Ÿhîn
Ë
	`ˇ°_öt
(
f
 - othern);

471 *
f
 = *
mp
;

472 i‡(
	`g√xt
(
mp
) != 0) {

473 
	`g√xt
(
f
Ë+
	`ˇ°_öt
(
mp
 - f);

474 
	`g√xt
(
mp
) = 0;

476 
	`£äûvÆue
(
	`gvÆ
(
mp
));

480 i‡(
	`g√xt
(
mp
) != 0)

481 
	`g√xt
(
f
Ë
	`ˇ°_öt
((
mp
 + gnext(mp)) - f);

482 
	`lua_as£π
(
	`g√xt
(
f
) == 0);

483 
	`g√xt
(
mp
Ë
	`ˇ°_öt
(
f
 - mp);

484 
mp
 = 
f
;

487 
	`£äodekey
(
L
, &
mp
->
i_key
, 
key
);

488 
	`luaC_b¨rõrback
(
L
, 
t
, 
key
);

489 
	`lua_as£π
(
	`âi¢û
(
	`gvÆ
(
mp
)));

490  
	`gvÆ
(
mp
);

491 
	}
}

497 c⁄° 
TVÆue
 *
	$luaH_gëöt
 (
TabÀ
 *
t
, 
lua_I¡egî
 
key
) {

499 i‡(
	`l_ˇ°S2U
(
key
 - 1Ë< 
t
->
sizóºay
)

500  &
t
->
¨øy
[
key
 - 1];

502 
Node
 *
n
 = 
	`hashöt
(
t
, 
key
);

504 i‡(
	`âisöãgî
(
	`gkey
(
n
)Ë&& 
	`ivÆue
(gkey“)Ë=
key
)

505  
	`gvÆ
(
n
);

507 
nx
 = 
	`g√xt
(
n
);

508 i‡(
nx
 == 0) ;

509 
n
 +
nx
;

512  
luaO_nûobje˘
;

514 
	}
}

520 c⁄° 
TVÆue
 *
	$luaH_gë°r
 (
TabÀ
 *
t
, 
TSåög
 *
key
) {

521 
Node
 *
n
 = 
	`hash°r
(
t
, 
key
);

522 
	`lua_as£π
(
key
->
â
 =
LUA_TSHRSTR
);

524 c⁄° 
TVÆue
 *
k
 = 
	`gkey
(
n
);

525 i‡(
	`âisshr°rög
(
k
Ë&& 
	`eqshr°r
(
	`tsvÆue
(k), 
key
))

526  
	`gvÆ
(
n
);

528 
nx
 = 
	`g√xt
(
n
);

529 i‡(
nx
 == 0) ;

530 
n
 +
nx
;

533  
luaO_nûobje˘
;

534 
	}
}

540 c⁄° 
TVÆue
 *
	$luaH_gë
 (
TabÀ
 *
t
, c⁄° 
TVÆue
 *
key
) {

541 
	`ây≥
(
key
)) {

542 
LUA_TSHRSTR
:  
	`luaH_gë°r
(
t
, 
	`tsvÆue
(
key
));

543 
LUA_TNUMINT
:  
	`luaH_gëöt
(
t
, 
	`ivÆue
(
key
));

544 
LUA_TNIL
:  
luaO_nûobje˘
;

545 
LUA_TNUMFLT
: {

546 
lua_I¡egî
 
k
;

547 i‡(
	`numisöãgî
(
	`ÊtvÆue
(
key
), &
k
))

548  
	`luaH_gëöt
(
t
, 
k
);

552 
Node
 *
n
 = 
	`maöposôi⁄
(
t
, 
key
);

554 i‡(
	`luaV_øwequÆobj
(
	`gkey
(
n
), 
key
))

555  
	`gvÆ
(
n
);

557 
nx
 = 
	`g√xt
(
n
);

558 i‡(
nx
 == 0) ;

559 
n
 +
nx
;

562  
luaO_nûobje˘
;

565 
	}
}

572 
TVÆue
 *
	$luaH_£t
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, c⁄° 
TVÆue
 *
key
) {

573 c⁄° 
TVÆue
 *
p
 = 
	`luaH_gë
(
t
, 
key
);

574 i‡(
p
 !
luaO_nûobje˘
)

575  
	`ˇ°
(
TVÆue
 *, 
p
);

576  
	`luaH_√wkey
(
L
, 
t
, 
key
);

577 
	}
}

580 
	$luaH_£töt
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
lua_I¡egî
 
key
, 
TVÆue
 *
vÆue
) {

581 c⁄° 
TVÆue
 *
p
 = 
	`luaH_gëöt
(
t
, 
key
);

582 
TVÆue
 *
˚Œ
;

583 i‡(
p
 !
luaO_nûobje˘
)

584 
˚Œ
 = 
	`ˇ°
(
TVÆue
 *, 
p
);

586 
TVÆue
 
k
;

587 
	`£tivÆue
(&
k
, 
key
);

588 
˚Œ
 = 
	`luaH_√wkey
(
L
, 
t
, &
k
);

590 
	`£tobj2t
(
L
, 
˚Œ
, 
vÆue
);

591 
	}
}

594 
	$unbound_£¨ch
 (
TabÀ
 *
t
, 
j
) {

595 
i
 = 
j
;

596 
j
++;

598 !
	`âi¢û
(
	`luaH_gëöt
(
t
, 
j
))) {

599 
i
 = 
j
;

600 i‡(
j
 > 
	`ˇ°
(, 
MAX_INT
)/2) {

602 
i
 = 1;

603 !
	`âi¢û
(
	`luaH_gëöt
(
t
, 
i
))) i++;

604  
i
 - 1;

606 
j
 *= 2;

609 
j
 - 
i
 > 1) {

610 
m
 = (
i
+
j
)/2;

611 i‡(
	`âi¢û
(
	`luaH_gëöt
(
t
, 
m
))Ë
j
 = m;

612 
i
 = 
m
;

614  
i
;

615 
	}
}

622 
	$luaH_gën
 (
TabÀ
 *
t
) {

623 
j
 = 
t
->
sizóºay
;

624 i‡(
j
 > 0 && 
	`âi¢û
(&
t
->
¨øy
[j - 1])) {

626 
i
 = 0;

627 
j
 - 
i
 > 1) {

628 
m
 = (
i
+
j
)/2;

629 i‡(
	`âi¢û
(&
t
->
¨øy
[
m
 - 1])Ë
j
 = m;

630 
i
 = 
m
;

632  
i
;

635 i‡(
	`isdummy
(
t
->
node
))

636  
j
;

637  
	`unbound_£¨ch
(
t
, 
j
);

638 
	}
}

642 #i‡
deföed
(
LUA_DEBUG
)

644 
Node
 *
	$luaH_maöposôi⁄
 (c⁄° 
TabÀ
 *
t
, c⁄° 
TVÆue
 *
key
) {

645  
	`maöposôi⁄
(
t
, 
key
);

646 
	}
}

648 
	$luaH_isdummy
 (
Node
 *
n
Ë{  
	`isdummy
“); 
	}
}

	@lib/archive/lua-5.3.0/src/ltable.h

7 #i‚de‡
…abÀ_h


8 
	#…abÀ_h


	)

10 
	~"lobje˘.h
"

13 
	#gnode
(
t
,
i
Ë(&—)->
node
[i])

	)

14 
	#gvÆ
(
n
Ë(&“)->
i_vÆ
)

	)

15 
	#g√xt
(
n
Ë(“)->
i_key
.
nk
.
√xt
)

	)

19 
	#gkey
(
n
Ë
	`ˇ°
(c⁄° 
TVÆue
*, (&“)->
i_key
.
tvk
))

	)

21 
	#wgkey
(
n
Ë(&“)->
i_key
.
nk
)

	)

23 
	#övÆid©eTMˇche
(
t
Ë(—)->
Êags
 = 0)

	)

27 
	#key‰omvÆ
(
v
) \

28 (
	`gkey
(
	`ˇ°
(
Node
 *, ca°(*, (
v
)Ë- 
	`off£tof
(Node, 
i_vÆ
))))

	)

31 
LUAI_FUNC
 c⁄° 
TVÆue
 *
luaH_gëöt
 (
TabÀ
 *
t
, 
lua_I¡egî
 
key
);

32 
LUAI_FUNC
 
luaH_£töt
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
lua_I¡egî
 
key
,

33 
TVÆue
 *
vÆue
);

34 
LUAI_FUNC
 c⁄° 
TVÆue
 *
luaH_gë°r
 (
TabÀ
 *
t
, 
TSåög
 *
key
);

35 
LUAI_FUNC
 c⁄° 
TVÆue
 *
luaH_gë
 (
TabÀ
 *
t
, c⁄° TVÆuê*
key
);

36 
LUAI_FUNC
 
TVÆue
 *
luaH_√wkey
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, c⁄° TVÆuê*
key
);

37 
LUAI_FUNC
 
TVÆue
 *
luaH_£t
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, c⁄° TVÆuê*
key
);

38 
LUAI_FUNC
 
TabÀ
 *
luaH_√w
 (
lua_Sèã
 *
L
);

39 
LUAI_FUNC
 
luaH_ªsize
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
«size
,

40 
nhsize
);

41 
LUAI_FUNC
 
luaH_ªsizóºay
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
«size
);

42 
LUAI_FUNC
 
luaH_‰ì
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
);

43 
LUAI_FUNC
 
luaH_√xt
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
StkId
 
key
);

44 
LUAI_FUNC
 
luaH_gën
 (
TabÀ
 *
t
);

47 #i‡
deföed
(
LUA_DEBUG
)

48 
LUAI_FUNC
 
Node
 *
luaH_maöposôi⁄
 (c⁄° 
TabÀ
 *
t
, c⁄° 
TVÆue
 *
key
);

49 
LUAI_FUNC
 
luaH_isdummy
 (
Node
 *
n
);

	@lib/archive/lua-5.3.0/src/ltablib.c

7 
	#…ablib_c


	)

8 
	#LUA_LIB


	)

10 
	~"Õªfix.h
"

13 
	~<limôs.h
>

14 
	~<°ddef.h
>

16 
	~"lua.h
"

18 
	~"œuxlib.h
"

19 
	~"luÆib.h
"

27 (*
	mgëi
Ë(
lua_Sèã
 *
	mL
, 
	midx
, 
lua_I¡egî
 
	mn
);

28 (*
	m£ti
Ë(
lua_Sèã
 *
	mL
, 
	midx
, 
lua_I¡egî
 
	mn
);

29 } 
	tTabA
;

36 
	$checkèb
 (
lua_Sèã
 *
L
, 
¨g
, 
TabA
 *
è
) {

37 
è
->
gëi
 = 
NULL
;Åa->
£ti
 = NULL;

38 i‡(
	`lua_gëmë©abÀ
(
L
, 
¨g
)) {

39 
	`lua_pushlôîÆ
(
L
, "__index");

40 i‡(
	`lua_øwgë
(
L
, -2Ë!
LUA_TNIL
)

41 
è
->
gëi
 = 
lua_gëi
;

42 
	`lua_pushlôîÆ
(
L
, "__newindex");

43 i‡(
	`lua_øwgë
(
L
, -3Ë!
LUA_TNIL
)

44 
è
->
£ti
 = 
lua_£ti
;

45 
	`lua_p›
(
L
, 3);

47 i‡(
è
->
gëi
 =
NULL
 ||Åa->
£ti
 == NULL) {

48 
	`luaL_checkty≥
(
L
, 
¨g
, 
LUA_TTABLE
);

49 i‡(
è
->
gëi
 =
NULL
Ëè->gëò
lua_øwgëi
;

50 i‡(
è
->
£ti
 =
NULL
Ëè->£tò
lua_øw£ti
;

52 
	}
}

55 
	#aux_gën
(
L
,
n
,
è
Ë(
	`checkèb
(L,Ç,Åa), 
	`luaL_Àn
(L,Ç))

	)

58 #i‡
deföed
(
LUA_COMPAT_MAXN
)

59 
	$maxn
 (
lua_Sèã
 *
L
) {

60 
lua_Numbî
 
max
 = 0;

61 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

62 
	`lua_pushnû
(
L
);

63 
	`lua_√xt
(
L
, 1)) {

64 
	`lua_p›
(
L
, 1);

65 i‡(
	`lua_ty≥
(
L
, -1Ë=
LUA_TNUMBER
) {

66 
lua_Numbî
 
v
 = 
	`lua_t⁄umbî
(
L
, -1);

67 i‡(
v
 > 
max
) max = v;

70 
	`lua_pushnumbî
(
L
, 
max
);

72 
	}
}

76 
	$tö£π
 (
lua_Sèã
 *
L
) {

77 
TabA
 
è
;

78 
lua_I¡egî
 
e
 = 
	`aux_gën
(
L
, 1, &
è
) + 1;

79 
lua_I¡egî
 
pos
;

80 
	`lua_gët›
(
L
)) {

82 
pos
 = 
e
;

86 
lua_I¡egî
 
i
;

87 
pos
 = 
	`luaL_checköãgî
(
L
, 2);

88 
	`luaL_¨gcheck
(
L
, 1 <
pos
 &&Öo†<
e
, 2, "position out of bounds");

89 
i
 = 
e
; i > 
pos
; i--) {

90 (*
è
.
gëi
)(
L
, 1, 
i
 - 1);

91 (*
è
.
£ti
)(
L
, 1, 
i
);

96  
	`luaL_îr‹
(
L
, "wrongÇumber ofárgumentsÅo 'insert'");

99 (*
è
.
£ti
)(
L
, 1, 
pos
);

101 
	}
}

104 
	$åemove
 (
lua_Sèã
 *
L
) {

105 
TabA
 
è
;

106 
lua_I¡egî
 
size
 = 
	`aux_gën
(
L
, 1, &
è
);

107 
lua_I¡egî
 
pos
 = 
	`luaL_›töãgî
(
L
, 2, 
size
);

108 i‡(
pos
 !
size
)

109 
	`luaL_¨gcheck
(
L
, 1 <
pos
 &&Öo†<
size
 + 1, 1, "position out of bounds");

110 (*
è
.
gëi
)(
L
, 1, 
pos
);

111  ; 
pos
 < 
size
;Öos++) {

112 (*
è
.
gëi
)(
L
, 1, 
pos
 + 1);

113 (*
è
.
£ti
)(
L
, 1, 
pos
);

115 
	`lua_pushnû
(
L
);

116 (*
è
.
£ti
)(
L
, 1, 
pos
);

118 
	}
}

121 
	$tmove
 (
lua_Sèã
 *
L
) {

122 
TabA
 
è
;

123 
lua_I¡egî
 
f
 = 
	`luaL_checköãgî
(
L
, 2);

124 
lua_I¡egî
 
e
 = 
	`luaL_checköãgî
(
L
, 3);

125 
lua_I¡egî
 
t
 = 
	`luaL_checköãgî
(
L
, 4);

126 
â
 = !
	`lua_i¢⁄e‹nû
(
L
, 5) ? 5 : 1;

128 
	`luaL_¨gcheck
(
L
, 
f
 > 0, 2, "initialÖosition must beÖositive");

129 i‡(
e
 >
f
) {

130 
lua_I¡egî
 
n
, 
i
;

131 
è
.
gëi
 = (
	`luaL_gëmëafõld
(
L
, 1, "__ödex"Ë=
LUA_TNIL
)

132 ? (
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
), 
lua_øwgëi
)

133 : 
lua_gëi
;

134 
è
.
£ti
 = (
	`luaL_gëmëafõld
(
L
, 
â
, "__√wödex"Ë=
LUA_TNIL
)

135 ? (
	`luaL_checkty≥
(
L
, 
â
, 
LUA_TTABLE
), 
lua_øw£ti
)

136 : 
lua_£ti
;

137 
n
 = 
e
 - 
f
 + 1;

138 i‡(
t
 > 
f
) {

139 
i
 = 
n
 - 1; i >= 0; i--) {

140 (*
è
.
gëi
)(
L
, 1, 
f
 + 
i
);

141 (*
è
.
£ti
)(
L
, 
â
, 
t
 + 
i
);

145 
i
 = 0; i < 
n
; i++) {

146 (*
è
.
gëi
)(
L
, 1, 
f
 + 
i
);

147 (*
è
.
£ti
)(
L
, 
â
, 
t
 + 
i
);

151 
	`lua_pushvÆue
(
L
, 
â
);

153 
	}
}

156 
	$addfõld
 (
lua_Sèã
 *
L
, 
luaL_Buf„r
 *
b
, 
TabA
 *
è
, 
lua_I¡egî
 
i
) {

157 (*
è
->
gëi
)(
L
, 1, 
i
);

158 i‡(!
	`lua_is°rög
(
L
, -1))

159 
	`luaL_îr‹
(
L
, "invalid value (%s)át index %d inÅable for 'concat'",

160 
	`luaL_ty≥«me
(
L
, -1), 
i
);

161 
	`luaL_addvÆue
(
b
);

162 
	}
}

165 
	$tc⁄ˇt
 (
lua_Sèã
 *
L
) {

166 
TabA
 
è
;

167 
luaL_Buf„r
 
b
;

168 
size_t
 
l£p
;

169 
lua_I¡egî
 
i
, 
œ°
;

170 c⁄° *
£p
 = 
	`luaL_›é°rög
(
L
, 2, "", &
l£p
);

171 
	`checkèb
(
L
, 1, &
è
);

172 
i
 = 
	`luaL_›töãgî
(
L
, 3, 1);

173 
œ°
 = 
	`luaL_›t
(
L
, 
luaL_checköãgî
, 4, 
	`luaL_Àn
(L, 1));

174 
	`luaL_bufföô
(
L
, &
b
);

175 ; 
i
 < 
œ°
; i++) {

176 
	`addfõld
(
L
, &
b
, &
è
, 
i
);

177 
	`luaL_addl°rög
(&
b
, 
£p
, 
l£p
);

179 i‡(
i
 =
œ°
)

180 
	`addfõld
(
L
, &
b
, &
è
, 
i
);

181 
	`luaL_pushªsu…
(&
b
);

183 
	}
}

192 
	$∑ck
 (
lua_Sèã
 *
L
) {

193 
i
;

194 
n
 = 
	`lua_gët›
(
L
);

195 
	`lua_¸óãèbÀ
(
L
, 
n
, 1);

196 
	`lua_ö£π
(
L
, 1);

197 
i
 = 
n
; i >= 1; i--)

198 
	`lua_øw£ti
(
L
, 1, 
i
);

199 
	`lua_pushöãgî
(
L
, 
n
);

200 
	`lua_£tfõld
(
L
, 1, "n");

202 
	}
}

205 
	$u≈ack
 (
lua_Sèã
 *
L
) {

206 
TabA
 
è
;

207 
lua_I¡egî
 
i
, 
e
;

208 
lua_Unsig√d
 
n
;

209 
	`checkèb
(
L
, 1, &
è
);

210 
i
 = 
	`luaL_›töãgî
(
L
, 2, 1);

211 
e
 = 
	`luaL_›t
(
L
, 
luaL_checköãgî
, 3, 
	`luaL_Àn
(L, 1));

212 i‡(
i
 > 
e
)  0;

213 
n
 = (
lua_Unsig√d
)
e
 - 
i
;

214 i‡(
n
 >()
INT_MAX
 || !
	`lua_check°ack
(
L
, ()(++n)))

215  
	`luaL_îr‹
(
L
, "too manyÑesultsÅo unpack");

217 (*
è
.
gëi
)(
L
, 1, 
i
);

218 } 
i
++ < 
e
);

220  ()
n
;

221 
	}
}

236 
	$£t2
 (
lua_Sèã
 *
L
, 
TabA
 *
è
, 
i
, 
j
) {

237 (*
è
->
£ti
)(
L
, 1, 
i
);

238 (*
è
->
£ti
)(
L
, 1, 
j
);

239 
	}
}

241 
	$s‹t_comp
 (
lua_Sèã
 *
L
, 
a
, 
b
) {

242 i‡(!
	`lua_i¢û
(
L
, 2)) {

243 
ªs
;

244 
	`lua_pushvÆue
(
L
, 2);

245 
	`lua_pushvÆue
(
L
, 
a
-1);

246 
	`lua_pushvÆue
(
L
, 
b
-2);

247 
	`lua_ˇŒ
(
L
, 2, 1);

248 
ªs
 = 
	`lua_toboﬁón
(
L
, -1);

249 
	`lua_p›
(
L
, 1);

250  
ªs
;

253  
	`lua_com∑ª
(
L
, 
a
, 
b
, 
LUA_OPLT
);

254 
	}
}

256 
	$auxs‹t
 (
lua_Sèã
 *
L
, 
TabA
 *
è
, 
l
, 
u
) {

257 
l
 < 
u
) {

258 
i
, 
j
;

260 (*
è
->
gëi
)(
L
, 1, 
l
);

261 (*
è
->
gëi
)(
L
, 1, 
u
);

262 i‡(
	`s‹t_comp
(
L
, -1, -2))

263 
	`£t2
(
L
, 
è
, 
l
, 
u
);

265 
	`lua_p›
(
L
, 2);

266 i‡(
u
-
l
 == 1) ;

267 
i
 = (
l
+
u
)/2;

268 (*
è
->
gëi
)(
L
, 1, 
i
);

269 (*
è
->
gëi
)(
L
, 1, 
l
);

270 i‡(
	`s‹t_comp
(
L
, -2, -1))

271 
	`£t2
(
L
, 
è
, 
i
, 
l
);

273 
	`lua_p›
(
L
, 1);

274 (*
è
->
gëi
)(
L
, 1, 
u
);

275 i‡(
	`s‹t_comp
(
L
, -1, -2))

276 
	`£t2
(
L
, 
è
, 
i
, 
u
);

278 
	`lua_p›
(
L
, 2);

280 i‡(
u
-
l
 == 2) ;

281 (*
è
->
gëi
)(
L
, 1, 
i
);

282 
	`lua_pushvÆue
(
L
, -1);

283 (*
è
->
gëi
)(
L
, 1, 
u
-1);

284 
	`£t2
(
L
, 
è
, 
i
, 
u
-1);

286 
i
 = 
l
; 
j
 = 
u
-1;

289 (*
è
->
gëi
)(
L
, 1, ++
i
), 
	`s‹t_comp
(L, -1, -2)) {

290 i‡(
i
>=
u
Ë
	`luaL_îr‹
(
L
, "invalid order function for sorting");

291 
	`lua_p›
(
L
, 1);

294 (*
è
->
gëi
)(
L
, 1, --
j
), 
	`s‹t_comp
(L, -3, -1)) {

295 i‡(
j
<=
l
Ë
	`luaL_îr‹
(
L
, "invalid order function for sorting");

296 
	`lua_p›
(
L
, 1);

298 i‡(
j
<
i
) {

299 
	`lua_p›
(
L
, 3);

302 
	`£t2
(
L
, 
è
, 
i
, 
j
);

304 (*
è
->
gëi
)(
L
, 1, 
u
-1);

305 (*
è
->
gëi
)(
L
, 1, 
i
);

306 
	`£t2
(
L
, 
è
, 
u
-1, 
i
);

309 i‡(
i
-
l
 < 
u
-i) {

310 
j
=
l
; 
i
=i-1;Ü=i+2;

313 
j
=
i
+1; i=
u
; u=j-2;

315 
	`auxs‹t
(
L
, 
è
, 
j
, 
i
);

317 
	}
}

319 
	$s‹t
 (
lua_Sèã
 *
L
) {

320 
TabA
 
è
;

321 
n
 = ()
	`aux_gën
(
L
, 1, &
è
);

322 
	`luaL_check°ack
(
L
, 50, "");

323 i‡(!
	`lua_i¢⁄e‹nû
(
L
, 2))

324 
	`luaL_checkty≥
(
L
, 2, 
LUA_TFUNCTION
);

325 
	`lua_£â›
(
L
, 2);

326 
	`auxs‹t
(
L
, &
è
, 1, 
n
);

328 
	}
}

333 c⁄° 
luaL_Reg
 
	gèb_funcs
[] = {

334 {"c⁄ˇt", 
tc⁄ˇt
},

335 #i‡
deföed
(
LUA_COMPAT_MAXN
)

336 {"maxn", 
maxn
},

338 {"ö£π", 
tö£π
},

339 {"∑ck", 
∑ck
},

340 {"u≈ack", 
u≈ack
},

341 {"ªmove", 
åemove
},

342 {"move", 
tmove
},

343 {"s‹t", 
s‹t
},

344 {
NULL
, NULL}

348 
LUAMOD_API
 
	$lua›í_èbÀ
 (
lua_Sèã
 *
L
) {

349 
	`luaL_√wlib
(
L
, 
èb_funcs
);

350 #i‡
	`deföed
(
LUA_COMPAT_UNPACK
)

352 
	`lua_gëfõld
(
L
, -1, "unpack");

353 
	`lua_£tglobÆ
(
L
, "unpack");

356 
	}
}

	@lib/archive/lua-5.3.0/src/ltm.c

7 
	#…m_c


	)

8 
	#LUA_CORE


	)

10 
	~"Õªfix.h
"

13 
	~<°rög.h
>

15 
	~"lua.h
"

17 
	~"ldebug.h
"

18 
	~"ldo.h
"

19 
	~"lobje˘.h
"

20 
	~"l°©e.h
"

21 
	~"l°rög.h
"

22 
	~"…abÀ.h
"

23 
	~"…m.h
"

24 
	~"lvm.h
"

27 c⁄° 
	gud©©y≥«me
[] = "userdata";

29 
LUAI_DDEF
 c⁄° *c⁄° 
	gluaT_ty≥«mes_
[
LUA_TOTALTAGS
] = {

31 "nû", "boﬁón", 
ud©©y≥«me
, "number",

32 "°rög", "èbÀ", "fun˘i⁄", 
ud©©y≥«me
, "thread",

37 
	$luaT_öô
 (
lua_Sèã
 *
L
) {

38 c⁄° *c⁄° 
luaT_evíäame
[] = {

47 
i
;

48 
i
=0; i<
TM_N
; i++) {

49 
	`G
(
L
)->
tm«me
[
i
] = 
	`luaS_√w
(L, 
luaT_evíäame
[i]);

50 
	`luaC_fix
(
L
, 
	`obj2gco
(
	`G
(L)->
tm«me
[
i
]));

52 
	}
}

59 c⁄° 
TVÆue
 *
	$luaT_gëtm
 (
TabÀ
 *
evíts
, 
TMS
 
evít
, 
TSåög
 *
íame
) {

60 c⁄° 
TVÆue
 *
tm
 = 
	`luaH_gë°r
(
evíts
, 
íame
);

61 
	`lua_as£π
(
evít
 <
TM_EQ
);

62 i‡(
	`âi¢û
(
tm
)) {

63 
evíts
->
Êags
 |
	`ˇ°_byã
(1u<<
evít
);

64  
NULL
;

66  
tm
;

67 
	}
}

70 c⁄° 
TVÆue
 *
	$luaT_gëtmbyobj
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
o
, 
TMS
 
evít
) {

71 
TabÀ
 *
mt
;

72 
	`ânov
(
o
)) {

73 
LUA_TTABLE
:

74 
mt
 = 
	`hvÆue
(
o
)->
më©abÀ
;

76 
LUA_TUSERDATA
:

77 
mt
 = 
	`uvÆue
(
o
)->
më©abÀ
;

80 
mt
 = 
	`G
(
L
)->mt[
	`ânov
(
o
)];

82  (
mt
 ? 
	`luaH_gë°r
(mt, 
	`G
(
L
)->
tm«me
[
evít
]Ë: 
luaO_nûobje˘
);

83 
	}
}

86 
	$luaT_ˇŒTM
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
f
, c⁄° TVÆuê*
p1
,

87 c⁄° 
TVÆue
 *
p2
, TVÆuê*
p3
, 
ha§es
) {

88 
±rdiff_t
 
ªsu…
 = 
	`ßve°ack
(
L
, 
p3
);

89 
	`£tobj2s
(
L
, L->
t›
++, 
f
);

90 
	`£tobj2s
(
L
, L->
t›
++, 
p1
);

91 
	`£tobj2s
(
L
, L->
t›
++, 
p2
);

92 i‡(!
ha§es
)

93 
	`£tobj2s
(
L
, L->
t›
++, 
p3
);

95 
	`luaD_ˇŒ
(
L
, L->
t›
 - (4 - 
ha§es
), ha§es, 
	`isLua
(L->
ci
));

96 i‡(
ha§es
) {

97 
p3
 = 
	`ª°‹e°ack
(
L
, 
ªsu…
);

98 
	`£tobjs2s
(
L
, 
p3
, --L->
t›
);

100 
	}
}

103 
	$luaT_ˇŒböTM
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
p1
, c⁄° TVÆuê*
p2
,

104 
StkId
 
ªs
, 
TMS
 
evít
) {

105 c⁄° 
TVÆue
 *
tm
 = 
	`luaT_gëtmbyobj
(
L
, 
p1
, 
evít
);

106 i‡(
	`âi¢û
(
tm
))

107 
tm
 = 
	`luaT_gëtmbyobj
(
L
, 
p2
, 
evít
);

108 i‡(
	`âi¢û
(
tm
))  0;

109 
	`luaT_ˇŒTM
(
L
, 
tm
, 
p1
, 
p2
, 
ªs
, 1);

111 
	}
}

114 
	$luaT_åyböTM
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
p1
, c⁄° TVÆuê*
p2
,

115 
StkId
 
ªs
, 
TMS
 
evít
) {

116 i‡(!
	`luaT_ˇŒböTM
(
L
, 
p1
, 
p2
, 
ªs
, 
evít
)) {

117 
evít
) {

118 
TM_CONCAT
:

119 
	`luaG_c⁄ˇãº‹
(
L
, 
p1
, 
p2
);

120 
TM_BAND
: 
TM_BOR
: 
TM_BXOR
:

121 
TM_SHL
: 
TM_SHR
: 
TM_BNOT
: {

122 
lua_Numbî
 
dummy
;

123 i‡(
	`t⁄umbî
(
p1
, &
dummy
Ë&&Å⁄umbî(
p2
, &dummy))

124 
	`luaG_toöãº‹
(
L
, 
p1
, 
p2
);

126 
	`luaG_›öãº‹
(
L
, 
p1
, 
p2
, "perform bitwise operation on");

130 
	`luaG_›öãº‹
(
L
, 
p1
, 
p2
, "performárithmetic on");

133 
	}
}

136 
	$luaT_ˇŒ‹dîTM
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
p1
, c⁄° TVÆuê*
p2
,

137 
TMS
 
evít
) {

138 i‡(!
	`luaT_ˇŒböTM
(
L
, 
p1
, 
p2
, L->
t›
, 
evít
))

141  !
	`l_isÁl£
(
L
->
t›
);

142 
	}
}

	@lib/archive/lua-5.3.0/src/ltm.h

7 #i‚de‡
…m_h


8 
	#…m_h


	)

11 
	~"lobje˘.h
"

19 
	mTM_INDEX
,

20 
	mTM_NEWINDEX
,

21 
	mTM_GC
,

22 
	mTM_MODE
,

23 
	mTM_LEN
,

24 
	mTM_EQ
,

25 
	mTM_ADD
,

26 
	mTM_SUB
,

27 
	mTM_MUL
,

28 
	mTM_MOD
,

29 
	mTM_POW
,

30 
	mTM_DIV
,

31 
	mTM_IDIV
,

32 
	mTM_BAND
,

33 
	mTM_BOR
,

34 
	mTM_BXOR
,

35 
	mTM_SHL
,

36 
	mTM_SHR
,

37 
	mTM_UNM
,

38 
	mTM_BNOT
,

39 
	mTM_LT
,

40 
	mTM_LE
,

41 
	mTM_CONCAT
,

42 
	mTM_CALL
,

43 
	mTM_N


44 } 
	tTMS
;

48 
	#gÁ°tm
(
g
,
ë
,
e
Ë(”tË=
NULL
 ? NULL : \

49 ((
ë
)->
Êags
 & (1u<<(
e
))Ë? 
NULL
 : 
	`luaT_gëtm
”t,É, (
g
)->
tm«me
[e]))

	)

51 
	#Á°tm
(
l
,
ë
,
e
Ë
	`gÁ°tm
(
	`G
÷),Ét,É)

	)

53 
	#ây≥«me
(
x
Ë
luaT_ty≥«mes_
[(xË+ 1]

	)

54 
	#objty≥«me
(
x
Ë
	`ây≥«me
(
	`ânov
(x))

	)

56 
LUAI_DDEC
 c⁄° *c⁄° 
	gluaT_ty≥«mes_
[
LUA_TOTALTAGS
];

59 
LUAI_FUNC
 c⁄° 
TVÆue
 *
luaT_gëtm
 (
TabÀ
 *
evíts
, 
TMS
 
evít
, 
TSåög
 *
íame
);

60 
LUAI_FUNC
 c⁄° 
TVÆue
 *
luaT_gëtmbyobj
 (
lua_Sèã
 *
L
, c⁄° TVÆuê*
o
,

61 
TMS
 
evít
);

62 
LUAI_FUNC
 
luaT_öô
 (
lua_Sèã
 *
L
);

64 
LUAI_FUNC
 
luaT_ˇŒTM
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
f
, c⁄° TVÆuê*
p1
,

65 c⁄° 
TVÆue
 *
p2
, TVÆuê*
p3
, 
ha§es
);

66 
LUAI_FUNC
 
luaT_ˇŒböTM
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
p1
, c⁄° TVÆuê*
p2
,

67 
StkId
 
ªs
, 
TMS
 
evít
);

68 
LUAI_FUNC
 
luaT_åyböTM
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
p1
, c⁄° TVÆuê*
p2
,

69 
StkId
 
ªs
, 
TMS
 
evít
);

70 
LUAI_FUNC
 
luaT_ˇŒ‹dîTM
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
p1
,

71 c⁄° 
TVÆue
 *
p2
, 
TMS
 
evít
);

	@lib/archive/lua-5.3.0/src/lua-socket.c

37 
	~<°dio.h
>

38 
	~<°dlib.h
>

39 
	~<°döt.h
>

40 
	~<sig«l.h
>

41 
	~<öây≥s.h
>

42 
	~<sys/ty≥s.h
>

43 
	~<uni°d.h
>

44 
	~<°rög.h
>

45 
	~<sys/queue.h
>

46 
	~<√töë/ö.h
>

47 
	~<√t/if.h
>

48 
	~<f˙é.h
>

49 
	~<£tjmp.h
>

50 
	~<°d¨g.h
>

51 
	~<˘y≥.h
>

52 
	~<î∫o.h
>

53 
	~<gë›t.h
>

54 
	~<ãrmios.h
>

55 
	~<sys/io˘l.h
>

56 
	~<libgí.h
>

57 
	~<löux/if_tun.h
>

58 
	~<¨∑/öë.h
>

59 
	~<√tdb.h
>

60 
	~<as£π.h
>

62 
	~<πe_c⁄fig.h
>

63 
	~<πe_vîsi⁄.h
>

65 
	~<πe_log.h
>

66 
	~<πe_èûq.h
>

67 
	~<πe_comm⁄.h
>

68 
	~<πe_mem‹y.h
>

69 
	~<πe_mem˝y.h
>

70 
	~<πe_memz⁄e.h
>

71 
	~<πe_mÆloc.h
>

72 
	~<πe_ól.h
>

73 
	~<πe_≥r_lc‹e.h
>

74 
	~<πe_œunch.h
>

75 
	~<πe_©omic.h
>

76 
	~<πe_cy˛es.h
>

77 
	~<πe_¥e„tch.h
>

78 
	~<πe_lc‹e.h
>

79 
	~<πe_≥r_lc‹e.h
>

80 
	~<πe_bønch_¥edi˘i⁄.h
>

81 
	~<πe_pci.h
>

82 
	~<πe_øndom.h
>

83 
	~<πe_timî.h
>

84 
	~<πe_debug.h
>

85 
	~<πe_ëhî.h
>

86 
	~<πe_ëhdev.h
>

87 
	~<πe_rög.h
>

88 
	~<πe_mempoﬁ.h
>

89 
	~<πe_mbuf.h
>

91 
	#lua_c


	)

92 
	~"lua.h
"

93 
	~"luÆib.h
"

94 
	~"œuxlib.h
"

96 
	~"lua-sockë.h
"

97 
	~"lua_shñl.h
"

99 * 
lua_gë_¥iv©e
(* 
L
);

100 
lua_shñl
(*);

101 
lua_£t_°dfûes
(
lua_Sèã
 * 
L
, 
FILE
 * 
ö
, FILE * 
out
, FILE * 
îr
);

102 
lua_ª£t_°dfûes
(
lua_Sèã
 * 
L
);

103 
execuã_lua_°rög
(
lua_Sèã
 * 
L
, * 
°r
);

104 
execuã_lua_˛o£
(
lua_Sèã
 * 
L
);

107 
	$_sockë_›í
(
luaSîvî_t
 * 
pSîvî
)

109 i‡–
pSîvî
 !
NULL
 ) {

110 
pSîvî
->
ö
 = 
	`fd›í
’Sîvî->
˛õ¡_sockë
, "r");

111 
pSîvî
->
out
 = 
	`fd›í
’Sîvî->
˛õ¡_sockë
, "w");

112 
pSîvî
->
îr
 = 
	`fd›í
’Sîvî->
˛õ¡_sockë
, "w");

114 
	}
}

117 
	$_sockë_˛o£
(
luaSîvî_t
 * 
pSîvî
)

119 i‡–
pSîvî
 !
NULL
 ) {

120 
	`f˛o£
(
pSîvî
->
ö
);

121 
	`f˛o£
(
pSîvî
->
out
);

122 
	`f˛o£
(
pSîvî
->
îr
);

124 
	}
}

127 
	$_gë_°dout
(* 
¨g
)

129 
luaSîvî_t
 * 
s
;

131 i‡–
¨g
 =
NULL
 )

132  
°dout
;

133 
s
 = 
	`luaL_gë¥iv©e
(
¨g
);

134 i‡–(
s
 =
NULL
Ë|| (s->
out
 == NULL) )

135  
°dout
;

136  
s
->
out
;

137 
	}
}

140 
	$_gë_°dö
(* 
¨g
)

142 
luaSîvî_t
 * 
s
;

144 i‡–
¨g
 =
NULL
 )

145  
°dö
;

146 
s
 = 
	`luaL_gë¥iv©e
(
¨g
);

147 i‡–(
s
 =
NULL
Ë|| (s->
ö
 == NULL) )

148  
°dö
;

149  
s
->
ö
;

150 
	}
}

153 
	$_gë_°dîr
(* 
¨g
)

155 
luaSîvî_t
 * 
s
;

157 i‡–
¨g
 =
NULL
 )

158  
°dîr
;

159 
s
 = 
	`luaL_gë¥iv©e
(
¨g
);

160 i‡–(
s
 =
NULL
Ë|| (s->
îr
 == NULL) )

161  
°dîr
;

162  
s
->
îr
;

163 
	}
}

166 
	$_£t_°dfûes
(
lua_Sèã
 * 
L
, 
luaSîvî_t
 * 
pSîvî
)

168 
	`lua_£t_°dfûes
(
L
, 
pSîvî
->
ö
,ÖSîvî->
out
,ÖSîvî->
îr
);

169 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

170 
	}
}

173 
	$_ª£t_°dfûes
(
lua_Sèã
 * 
L
)

175 
	`sig«l
(
SIGPIPE
, 
SIG_DFL
);

176 
	`lua_ª£t_°dfûes
(
L
);

177 
	}
}

192 
	$¥o˚ss_£rvî_ªque°s
–
luaSîvî_t
 * 
pSîvî
 )

194 
sockaddr_ö
 
ùaddr
;

195 
sockÀn_t
 
Àn
;

197 
pSîvî
->
˛õ¡_sockë
 = -1;

199 
Àn
 = (
sockaddr_ö
);

200 i‡–(
pSîvî
->
˛õ¡_sockë
 = 
	`ac˚±
’Sîvî->
£rvî_sockë
, (
sockaddr
 *)&
ùaddr
, &
Àn
)) < 0) {

201 
	`≥º‹
("accept failed");

205 i‡–
pSîvî
->
˛õ¡_sockë
 > 0 ) {

207 
	`_sockë_›í
(
pSîvî
);

208 
	`lua_shñl
(
pSîvî
);

209 
	`_sockë_˛o£
(
pSîvî
);

211 
	`˛o£
(
pSîvî
->
˛õ¡_sockë
);

212 
pSîvî
->
˛õ¡_sockë
 = -1;

216 i‡–
pSîvî
->
£rvî_sockë
 > 0 ) {

217 
	`˛o£
(
pSîvî
->
£rvî_sockë
);

218 
pSîvî
->
£rvî_sockë
 = -1;

220 
	}
}

235 
	$£rvî_¸óã
–* 
¨g
 )

237 
luaSîvî_t
 * 
pSîvî
 = (luaSîvî_à*)
¨g
;

238 * 
îr_msg
 = 
NULL
;

239 
sockaddr_ö
 
ùaddr
;

240 
ho°ít
 * 
pHo°
;

241 
lögî
 = 1;

243 
îr_msg
 = "gethostbyname failed";

244 if–(
pHo°
 = 
	`gëho°by«me
(
pSîvî
->
ho°«me
)Ë=
NULL
 )

245 
îr‹_exô
;

247 
îr_msg
 = "Socket create failed";

248 i‡–(
pSîvî
->
£rvî_sockë
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0)) < 0 )

249 
îr‹_exô
;

251 
	`mem£t
(&
ùaddr
, 0, (ipaddr));

252 
ùaddr
.
sö_Ámûy
 = 
AF_INET
;

253 
ùaddr
.
sö_p‹t
 = 
	`ht⁄s
(
pSîvî
->
sockë_p‹t
);

254 
ùaddr
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

256 
îr_msg
 = "Setsockopt failed";

257 i‡(
	`£tsock›t
(
pSîvî
->
£rvî_sockë
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
lögî
, (linger)) == -1)

258 
îr‹_exô
;

260 
îr_msg
 = "Bind failed";

261 i‡(
	`böd
(
pSîvî
->
£rvî_sockë
, (
sockaddr
 *Ë&
ùaddr
, (ipaddr)) < 0)

262 
îr‹_exô
;

264 
îr_msg
 = "Listen failed";

265 i‡(
	`li°í
(
pSîvî
->
£rvî_sockë
, 5) < 0)

266 
îr‹_exô
;

268 
	`¥o˚ss_£rvî_ªque°s
(
pSîvî
);

272 
îr‹_exô
:

273 i‡–
pSîvî
->
£rvî_sockë
 != -1 )

274 
	`˛o£
–
pSîvî
->
£rvî_sockë
 );

275 
pSîvî
->
£rvî_sockë
 = -1;

276 i‡–
îr_msg
 ) {

277 
	`≥º‹
(
îr_msg
);

278 
	`fÊush
(
°dout
);

281 
	}
}

296 
	$lua_£rvî
(* 
¨g
) {

298 
	`±hªad_dëach
–
	`±hªad_£lf
() );

300 
	`£rvî_¸óã
((
luaSîvî_t
 *)
¨g
);

302  
NULL
;

303 
	}
}

318 
	$lua_öô_sockë
(
lua_Sèã
 * 
L
, 
±hªad_t
 * 
±hªad
, * 
ho°«me
, 
p‹t
)

320 
luaSîvî_t
 * 
p
;

321 
r
;

323 
p
 = 
	`luaL_gë¥iv©e
(
L
);

324 i‡–
p
 =
NULL
 )

327 
p
->
˛õ¡_sockë
 = -1;

328 
p
->
£rvî_sockë
 = -1;

329 
p
->
sockë_p‹t
 = 
p‹t
;

330 
p
->
ho°«me
 = 
	`°rdup
( (hostname) ? hostname : "localhost" );

333 
r
 = 
	`±hªad_¸óã
(
±hªad
, 
NULL
, 
lua_£rvî
, 
p
);

334 
	`as£π
–
r
 == 0 );

336 
	}
}

351 
	$lua_¸óã_ö°™˚
()

353 
luaSîvî_t
 * 
p
;

354 
lua_Sèã
 * 
L
;

356 
p
 = (
luaSîvî_t
 *)
	`ˇŒoc
(1, (luaServer_t));

357 i‡(
p
 =
NULL
)

358  
NULL
;

360 
L
 = 
	`luaL_√w°©e
();

361 i‡–
L
 =
NULL
 ) {

362 
	`‰ì
(
p
);

363  
NULL
;

366 
p
->
˛õ¡_sockë
 = -1;

367 
p
->
£rvî_sockë
 = -1;

368 
p
->
ö
 = 
NULL
;

369 
p
->
out
 = 
NULL
;

370 
p
->
îr
 = 
NULL
;

372 
	`luaL_£çriv©e
(
L
, 
p
);

375 
	`lua_wrôe°rög
(
L
, 
LUA_COPYRIGHT
, 
	`°æí
(LUA_COPYRIGHT));

376 
	`lua_wrôñöe
(
L
);

378 
	`lua_√wlibs_öô
(
L
);

380  
L
;

381 
	}
}

	@lib/archive/lua-5.3.0/src/lua-socket.h

37 #i‚de‡
_LUA_SOCKET_H_


38 
	#_LUA_SOCKET_H_


	)

40 
	~"lua.h
"

43 
	#MAX_LUA_BUFFER_SIZE
 1024

	)

45 
	sluaSîvî_s
 {

46 
öt32_t
 
	m£rvî_sockë
;

47 
öt32_t
 
	m˛õ¡_sockë
;

48 
öt32_t
 
	msockë_p‹t
;

49 * 
	mout
, * 
	mö
, * 
	mîr
;

50 * 
	mho°«me
;

51 
	md©a
[
MAX_LUA_BUFFER_SIZE
];

52 } 
	tluaSîvî_t
;

54 
_lua_›ílib
(
lua_Sèã
 *
L
);

55 * 
_gë_°dout
(* 
¨g
);

56 * 
_gë_°dö
(* 
¨g
);

57 * 
_gë_°dîr
(* 
¨g
);

58 
_£t_°dfûes
(
lua_Sèã
 * 
L
, 
luaSîvî_t
 * 
pSîvî
);

59 
_ª£t_°dfûes
(
lua_Sèã
 * 
L
);

61 
lua_öô_sockë
(
lua_Sèã
 * 
L
, 
±hªad_t
 * 
±hªad
, * 
ho°«me
, 
p‹t
);

62 * 
lua_¸óã_ö°™˚
();

	@lib/archive/lua-5.3.0/src/lua.c

7 
	#lua_c


	)

9 
	~"Õªfix.h
"

12 
	~<sig«l.h
>

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<°rög.h
>

17 
	~"lua.h
"

19 
	~"œuxlib.h
"

20 
	~"luÆib.h
"

23 #i‡!
deföed
(
LUA_PROMPT
)

24 
	#LUA_PROMPT
 "> "

	)

25 
	#LUA_PROMPT2
 ">> "

	)

28 #i‡!
deföed
(
LUA_PROGNAME
)

29 
	#LUA_PROGNAME
 "lua"

	)

32 #i‡!
deföed
(
LUA_MAXINPUT
)

33 
	#LUA_MAXINPUT
 512

	)

36 #i‡!
deföed
(
LUA_INIT_VAR
)

37 
	#LUA_INIT_VAR
 "LUA_INIT"

	)

40 
	#LUA_INITVARVERSION
 \

41 
LUA_INIT_VAR
 "_" 
LUA_VERSION_MAJOR
 "_" 
LUA_VERSION_MINOR


	)

48 #i‡!
deföed
(
lua_°dö_is_ây
)

50 #i‡
deföed
(
LUA_USE_POSIX
)

52 
	~<uni°d.h
>

53 
	#lua_°dö_is_ây
(Ë
	`ißây
(0)

	)

55 #ñi‡
deföed
(
LUA_USE_WINDOWS
)

57 
	~<io.h
>

58 
	#lua_°dö_is_ây
(Ë
	`_ißây
(
	`_fûío
(
°dö
))

	)

63 
	#lua_°dö_is_ây
(Ë1

	)

76 #i‡!
deföed
(
lua_ªadlöe
)

78 #i‡
deföed
(
LUA_USE_READLINE
)

80 
	~<ªadlöe/ªadlöe.h
>

81 
	~<ªadlöe/hi°‹y.h
>

82 
	#lua_ªadlöe
(
L
,
b
,
p
Ë(()L, ((b)=
	`ªadlöe
’)Ë!
NULL
)

	)

83 
	#lua_ßvñöe
(
L
,
idx
) \

84 i‡(
	`lua_øwÀn
(
L
,
idx
) > 0) \

85 
	`add_hi°‹y
(
	`lua_to°rög
(
L
, 
idx
));

	)

86 
	#lua_‰ìlöe
(
L
,
b
Ë(()L, 
	`‰ì
(b))

	)

90 
	#lua_ªadlöe
(
L
,
b
,
p
) \

91 (()
L
, 
	`Âuts
(
p
, 
°dout
), 
	`fÊush
(stdout), \

92 
	`fgës
(
b
, 
LUA_MAXINPUT
, 
°dö
Ë!
NULL
Ë

	)

93 
	#lua_ßvñöe
(
L
,
idx
Ë{ ()L; ()idx; }

	)

94 
	#lua_‰ìlöe
(
L
,
b
Ë{ ()L; ()b; }

	)

103 
lua_Sèã
 *
	gglobÆL
 = 
NULL
;

105 c⁄° *
	g¥og«me
 = 
LUA_PROGNAME
;

111 
	$l°›
 (
lua_Sèã
 *
L
, 
lua_Debug
 *
¨
) {

112 ()
¨
;

113 
	`lua_£thook
(
L
, 
NULL
, 0, 0);

114 
	`luaL_îr‹
(
L
, "interrupted!");

115 
	}
}

124 
	$œ˘i⁄
 (
i
) {

125 
	`sig«l
(
i
, 
SIG_DFL
);

126 
	`lua_£thook
(
globÆL
, 
l°›
, 
LUA_MASKCALL
 | 
LUA_MASKRET
 | 
LUA_MASKCOUNT
, 1);

127 
	}
}

130 
	$¥öt_ußge
 (
lua_Sèã
 * 
L
, c⁄° *
bad›ti⁄
) {

131 
	`lua_wrôe°rögîr‹
(
L
, "%s: ", 
¥og«me
);

132 i‡(
bad›ti⁄
[1] == 'e' || badoption[1] == 'l')

133 
	`lua_wrôe°rögîr‹
(
L
, "'%s'Çìd†¨gumít\n", 
bad›ti⁄
);

135 
	`lua_wrôe°rögîr‹
(
L
, "uƒecognized o±i⁄ '%s'\n", 
bad›ti⁄
);

136 
	`lua_wrôe°rögîr‹
(
L
,

147 
¥og«me
);

148 
	}
}

155 
	$l_mesßge
 (
lua_Sèã
 * 
L
, c⁄° *
≤ame
, c⁄° *
msg
) {

156 i‡(
≤ame
Ë
	`lua_wrôe°rögîr‹
(
L
, "%s: ",Öname);

157 
	`lua_wrôe°rögîr‹
(
L
, "%s\n", 
msg
);

158 
	}
}

166 
	$ªp‹t
 (
lua_Sèã
 *
L
, 
°©us
) {

167 i‡(
°©us
 !
LUA_OK
) {

168 c⁄° *
msg
 = 
	`lua_to°rög
(
L
, -1);

169 
	`l_mesßge
(
¥og«me
, 
msg
);

170 
	`lua_p›
(
L
, 1);

172  
°©us
;

173 
	}
}

179 
	$msgh™dÀr
 (
lua_Sèã
 *
L
) {

180 c⁄° *
msg
 = 
	`lua_to°rög
(
L
, 1);

181 i‡(
msg
 =
NULL
) {

182 i‡(
	`luaL_ˇŒmëa
(
L
, 1, "__tostring") &&

183 
	`lua_ty≥
(
L
, -1Ë=
LUA_TSTRING
)

186 
msg
 = 
	`lua_pushf°rög
(
L
, "(error object isá %s value)",

187 
	`luaL_ty≥«me
(
L
, 1));

189 
	`luaL_åa˚back
(
L
, L, 
msg
, 1);

191 
	}
}

198 
	$doˇŒ
 (
lua_Sèã
 *
L
, 
«rg
, 
ƒes
) {

199 
°©us
;

200 
ba£
 = 
	`lua_gët›
(
L
Ë- 
«rg
;

201 
	`lua_pushcfun˘i⁄
(
L
, 
msgh™dÀr
);

202 
	`lua_ö£π
(
L
, 
ba£
);

203 
globÆL
 = 
L
;

204 
	`sig«l
(
SIGINT
, 
œ˘i⁄
);

205 
°©us
 = 
	`lua_pˇŒ
(
L
, 
«rg
, 
ƒes
, 
ba£
);

206 
	`sig«l
(
SIGINT
, 
SIG_DFL
);

207 
	`lua_ªmove
(
L
, 
ba£
);

208  
°©us
;

209 
	}
}

212 
	$¥öt_vîsi⁄
 (
lua_Sèã
 * 
L
) {

213 
	`lua_wrôe°rög
(
L
, 
LUA_COPYRIGHT
, 
	`°æí
(LUA_COPYRIGHT));

214 
	`lua_wrôñöe
(
L
);

215 
	}
}

226 
	$¸óã¨gèbÀ
 (
lua_Sèã
 *
L
, **
¨gv
, 
¨gc
, 
s¸ùt
) {

227 
i
, 
«rg
;

228 i‡(
s¸ùt
 =
¨gc
) script = 0;

229 
«rg
 = 
¨gc
 - (
s¸ùt
 + 1);

230 
	`lua_¸óãèbÀ
(
L
, 
«rg
, 
s¸ùt
 + 1);

231 
i
 = 0; i < 
¨gc
; i++) {

232 
	`lua_push°rög
(
L
, 
¨gv
[
i
]);

233 
	`lua_øw£ti
(
L
, -2, 
i
 - 
s¸ùt
);

235 
	`lua_£tglobÆ
(
L
, "arg");

236 
	}
}

239 
	$dochunk
 (
lua_Sèã
 *
L
, 
°©us
) {

240 i‡(
°©us
 =
LUA_OK
Ë°©u†
	`doˇŒ
(
L
, 0, 0);

241  
	`ªp‹t
(
L
, 
°©us
);

242 
	}
}

245 
	$dofûe
 (
lua_Sèã
 *
L
, c⁄° *
«me
) {

246  
	`dochunk
(
L
, 
	`luaL_lﬂdfûe
(L, 
«me
));

247 
	}
}

250 
	$do°rög
 (
lua_Sèã
 *
L
, c⁄° *
s
, c⁄° *
«me
) {

251  
	`dochunk
(
L
, 
	`luaL_lﬂdbuf„r
(L, 
s
, 
	`°æí
(s), 
«me
));

252 
	}
}

259 
	$dﬁibøry
 (
lua_Sèã
 *
L
, c⁄° *
«me
) {

260 
°©us
;

261 
	`lua_gëglobÆ
(
L
, "require");

262 
	`lua_push°rög
(
L
, 
«me
);

263 
°©us
 = 
	`doˇŒ
(
L
, 1, 1);

264 i‡(
°©us
 =
LUA_OK
)

265 
	`lua_£tglobÆ
(
L
, 
«me
);

266  
	`ªp‹t
(
L
, 
°©us
);

267 
	}
}

273 c⁄° *
	$gë_¥om±
 (
lua_Sèã
 *
L
, 
fú°löe
) {

274 c⁄° *
p
;

275 
	`lua_gëglobÆ
(
L
, 
fú°löe
 ? "_PROMPT" : "_PROMPT2");

276 
p
 = 
	`lua_to°rög
(
L
, -1);

277 i‡(
p
 =
NULL
Ë∞(
fú°löe
 ? 
LUA_PROMPT
 : 
LUA_PROMPT2
);

278  
p
;

279 
	}
}

282 
	#EOFMARK
 "<eof>"

	)

283 
	#m¨kÀn
 ((
EOFMARK
)/(Ë- 1)

	)

291 
	$öcom∂ëe
 (
lua_Sèã
 *
L
, 
°©us
) {

292 i‡(
°©us
 =
LUA_ERRSYNTAX
) {

293 
size_t
 
lmsg
;

294 c⁄° *
msg
 = 
	`lua_tﬁ°rög
(
L
, -1, &
lmsg
);

295 i‡(
lmsg
 >
m¨kÀn
 && 
	`°rcmp
(
msg
 +Ümsg - m¨kÀn, 
EOFMARK
) == 0) {

296 
	`lua_p›
(
L
, 1);

301 
	}
}

307 
	$pushlöe
 (
lua_Sèã
 *
L
, 
fú°löe
) {

308 
buf„r
[
LUA_MAXINPUT
];

309 *
b
 = 
buf„r
;

310 
size_t
 
l
;

311 c⁄° *
¥mt
 = 
	`gë_¥om±
(
L
, 
fú°löe
);

312 
ªad°©us
 = 
	`lua_ªadlöe
(
L
, 
b
, 
¥mt
);

313 i‡(
ªad°©us
 == 0)

315 
	`lua_p›
(
L
, 1);

316 
l
 = 
	`°æí
(
b
);

317 i‡(
l
 > 0 && 
b
[l-1] == '\n')

318 
b
[
l
-1] = '\0';

319 i‡(
fú°löe
 && 
b
[0] == '=')

320 
	`lua_pushf°rög
(
L
, "ªtu∫ %s", 
b
 + 1);

322 
	`lua_push°rög
(
L
, 
b
);

323 
	`lua_‰ìlöe
(
L
, 
b
);

325 
	}
}

332 
	$addªtu∫
 (
lua_Sèã
 *
L
) {

333 
°©us
;

334 
size_t
 
Àn
; c⁄° *
löe
;

335 
	`lua_pushlôîÆ
(
L
, "return ");

336 
	`lua_pushvÆue
(
L
, -2);

337 
	`lua_c⁄ˇt
(
L
, 2);

338 
löe
 = 
	`lua_tﬁ°rög
(
L
, -1, &
Àn
);

339 i‡((
°©us
 = 
	`luaL_lﬂdbuf„r
(
L
, 
löe
, 
Àn
, "=°dö")Ë=
LUA_OK
)

340 
	`lua_ªmove
(
L
, -3);

342 
	`lua_p›
(
L
, 2);

343  
°©us
;

344 
	}
}

350 
	$mu…ûöe
 (
lua_Sèã
 *
L
) {

352 
size_t
 
Àn
;

353 c⁄° *
löe
 = 
	`lua_tﬁ°rög
(
L
, 1, &
Àn
);

354 
°©us
 = 
	`luaL_lﬂdbuf„r
(
L
, 
löe
, 
Àn
, "=stdin");

355 i‡(!
	`öcom∂ëe
(
L
, 
°©us
Ë|| !
	`pushlöe
(L, 0))

356  
°©us
;

357 
	`lua_pushlôîÆ
(
L
, "\n");

358 
	`lua_ö£π
(
L
, -2);

359 
	`lua_c⁄ˇt
(
L
, 3);

361 
	}
}

370 
	$lﬂdlöe
 (
lua_Sèã
 *
L
) {

371 
°©us
;

372 
	`lua_£â›
(
L
, 0);

373 i‡(!
	`pushlöe
(
L
, 1))

375 i‡((
°©us
 = 
	`addªtu∫
(
L
)Ë!
LUA_OK
)

376 
°©us
 = 
	`mu…ûöe
(
L
);

377 
	`lua_ßvñöe
(
L
, 1);

378 
	`lua_ªmove
(
L
, 1);

379 
	`lua_as£π
(
	`lua_gët›
(
L
) == 1);

380  
°©us
;

381 
	}
}

387 
	$l_¥öt
 (
lua_Sèã
 *
L
) {

388 
n
 = 
	`lua_gët›
(
L
);

389 i‡(
n
 > 0) {

390 
	`luaL_check°ack
(
L
, 
LUA_MINSTACK
, "too manyÑesultsÅoÖrint");

391 
	`lua_gëglobÆ
(
L
, "print");

392 
	`lua_ö£π
(
L
, 1);

393 i‡(
	`lua_pˇŒ
(
L
, 
n
, 0, 0Ë!
LUA_OK
)

394 
	`l_mesßge
(
¥og«me
, 
	`lua_pushf°rög
(
L
, "error calling 'print' (%s)",

395 
	`lua_to°rög
(
L
, -1)));

397 
	}
}

404 
	$doREPL
 (
lua_Sèã
 *
L
) {

405 
°©us
;

406 c⁄° *
ﬁd¥og«me
 = 
¥og«me
;

407 
¥og«me
 = 
NULL
;

408 (
°©us
 = 
	`lﬂdlöe
(
L
)) != -1) {

409 i‡(
°©us
 =
LUA_OK
)

410 
°©us
 = 
	`doˇŒ
(
L
, 0, 
LUA_MULTRET
);

411 i‡(
°©us
 =
LUA_OK
Ë
	`l_¥öt
(
L
);

412 
	`ªp‹t
(
L
, 
°©us
);

414 
	`lua_£â›
(
L
, 0);

415 
	`lua_wrôñöe
();

416 
¥og«me
 = 
ﬁd¥og«me
;

417 
	}
}

423 
	$push¨gs
 (
lua_Sèã
 *
L
) {

424 
i
, 
n
;

425 i‡(
	`lua_gëglobÆ
(
L
, "¨g"Ë!
LUA_TTABLE
)

426 
	`luaL_îr‹
(
L
, "'arg' isÇotáÅable");

427 
n
 = ()
	`luaL_Àn
(
L
, -1);

428 
	`luaL_check°ack
(
L
, 
n
 + 3, "too manyárgumentsÅo script");

429 
i
 = 1; i <
n
; i++)

430 
	`lua_øwgëi
(
L
, -
i
, i);

431 
	`lua_ªmove
(
L
, -
i
);

432  
n
;

433 
	}
}

436 
	$h™dÀ_s¸ùt
 (
lua_Sèã
 *
L
, **
¨gv
) {

437 
°©us
;

438 c⁄° *
‚ame
 = 
¨gv
[0];

439 i‡(
	`°rcmp
(
‚ame
, "-"Ë=0 && såcmp(
¨gv
[-1], "--") != 0)

440 
‚ame
 = 
NULL
;

441 
°©us
 = 
	`luaL_lﬂdfûe
(
L
, 
‚ame
);

442 i‡(
°©us
 =
LUA_OK
) {

443 
n
 = 
	`push¨gs
(
L
);

444 
°©us
 = 
	`doˇŒ
(
L
, 
n
, 
LUA_MULTRET
);

446  
	`ªp‹t
(
L
, 
°©us
);

447 
	}
}

452 
	#has_îr‹
 1

	)

453 
	#has_i
 2

	)

454 
	#has_v
 4

	)

455 
	#has_e
 8

	)

456 
	#has_E
 16

	)

464 
	$cﬁÀ˘¨gs
 (**
¨gv
, *
fú°
) {

465 
¨gs
 = 0;

466 
i
;

467 
i
 = 1; 
¨gv
[i] !
NULL
; i++) {

468 *
fú°
 = 
i
;

469 i‡(
¨gv
[
i
][0] != '-')

470  
¨gs
;

471 
¨gv
[
i
][1]) {

473 i‡(
¨gv
[
i
][2] != '\0')

474  
has_îr‹
;

475 *
fú°
 = 
i
 + 1;

476  
¨gs
;

478  
¨gs
;

480 i‡(
¨gv
[
i
][2] != '\0')

481  
has_îr‹
;

482 
¨gs
 |
has_E
;

485 
¨gs
 |
has_i
;

487 i‡(
¨gv
[
i
][2] != '\0')

488  
has_îr‹
;

489 
¨gs
 |
has_v
;

492 
¨gs
 |
has_e
;

494 i‡(
¨gv
[
i
][2] == '\0') {

495 
i
++;

496 i‡(
¨gv
[
i
] =
NULL
 ||árgv[i][0] == '-')

497  
has_îr‹
;

501  
has_îr‹
;

504 *
fú°
 = 
i
;

505  
¨gs
;

506 
	}
}

513 
	$ru«rgs
 (
lua_Sèã
 *
L
, **
¨gv
, 
n
) {

514 
i
;

515 
i
 = 1; i < 
n
; i++) {

516 
°©us
;

517 
›ti⁄
 = 
¨gv
[
i
][1];

518 
	`lua_as£π
(
¨gv
[
i
][0] == '-');

519 i‡(
›ti⁄
 == 'e' || option == 'l') {

520 c⁄° *
exåa
 = 
¨gv
[
i
] + 2;

521 i‡(*
exåa
 ='\0'Ëexå®
¨gv
[++
i
];

522 
	`lua_as£π
(
exåa
 !
NULL
);

523 i‡(
›ti⁄
 == 'e')

524 
°©us
 = 
	`do°rög
(
L
, 
exåa
, "=(commandÜine)");

526 
°©us
 = 
	`dﬁibøry
(
L
, 
exåa
);

527 i‡(
°©us
 !
LUA_OK
)  0;

531 
	}
}

534 
	$h™dÀ_luaöô
 (
lua_Sèã
 *
L
) {

535 c⁄° *
«me
 = "=" 
LUA_INITVARVERSION
;

536 c⁄° *
öô
 = 
	`gëív
(
«me
 + 1);

537 i‡(
öô
 =
NULL
) {

538 
«me
 = "=" 
LUA_INIT_VAR
;

539 
öô
 = 
	`gëív
(
«me
 + 1);

541 i‡(
öô
 =
NULL
Ë 
LUA_OK
;

542 i‡(
öô
[0] == '@')

543  
	`dofûe
(
L
, 
öô
+1);

545  
	`do°rög
(
L
, 
öô
, 
«me
);

546 
	}
}

553 
	$pmaö
 (
lua_Sèã
 *
L
) {

554 
¨gc
 = ()
	`lua_toöãgî
(
L
, 1);

555 **
¨gv
 = (**)
	`lua_tou£rd©a
(
L
, 2);

556 
s¸ùt
;

557 
¨gs
 = 
	`cﬁÀ˘¨gs
(
¨gv
, &
s¸ùt
);

558 
	`luaL_checkvîsi⁄
(
L
);

559 i‡(
¨gv
[0] &&árgv[0][0]Ë
¥og«me
 =árgv[0];

560 i‡(
¨gs
 =
has_îr‹
) {

561 
	`¥öt_ußge
(
L
, 
¨gv
[
s¸ùt
]);

564 i‡(
¨gs
 & 
has_v
)

565 
	`¥öt_vîsi⁄
(
L
);

566 i‡(
¨gs
 & 
has_E
) {

567 
	`lua_pushboﬁón
(
L
, 1);

568 
	`lua_£tfõld
(
L
, 
LUA_REGISTRYINDEX
, "LUA_NOENV");

570 
	`luaL_›ílibs
(
L
);

571 
	`¸óã¨gèbÀ
(
L
, 
¨gv
, 
¨gc
, 
s¸ùt
);

572 i‡(!(
¨gs
 & 
has_E
)) {

573 i‡(
	`h™dÀ_luaöô
(
L
Ë!
LUA_OK
)

576 i‡(!
	`ru«rgs
(
L
, 
¨gv
, 
s¸ùt
))

578 i‡(
s¸ùt
 < 
¨gc
 &&

579 
	`h™dÀ_s¸ùt
(
L
, 
¨gv
 + 
s¸ùt
Ë!
LUA_OK
)

581 i‡(
¨gs
 & 
has_i
)

582 
	`doREPL
(
L
);

583 i‡(
s¸ùt
 =
¨gc
 && !(
¨gs
 & (
has_e
 | 
has_v
))) {

584 i‡(
	`lua_°dö_is_ây
()) {

585 
	`¥öt_vîsi⁄
(
L
);

586 
	`doREPL
(
L
);

588 
	`dofûe
(
L
, 
NULL
);

590 
	`lua_pushboﬁón
(
L
, 1);

592 
	}
}

595 
	$maö
 (
¨gc
, **
¨gv
) {

596 
°©us
, 
ªsu…
;

597 
lua_Sèã
 *
L
 = 
	`luaL_√w°©e
();

598 i‡(
L
 =
NULL
) {

599 
	`l_mesßge
(
¨gv
[0], "cannot create state:ÇotÉnough memory");

600  
EXIT_FAILURE
;

602 
	`lua_pushcfun˘i⁄
(
L
, &
pmaö
);

603 
	`lua_pushöãgî
(
L
, 
¨gc
);

604 
	`lua_pushlightu£rd©a
(
L
, 
¨gv
);

605 
°©us
 = 
	`lua_pˇŒ
(
L
, 2, 1, 0);

606 
ªsu…
 = 
	`lua_toboﬁón
(
L
, -1);

607 
	`ªp‹t
(
L
, 
°©us
);

608 
	`lua_˛o£
(
L
);

609  (
ªsu…
 && 
°©us
 =
LUA_OK
Ë? 
EXIT_SUCCESS
 : 
EXIT_FAILURE
;

610 
	}
}

	@lib/archive/lua-5.3.0/src/lua.h

9 #i‚de‡
lua_h


10 
	#lua_h


	)

12 
	~<°d¨g.h
>

13 
	~<°ddef.h
>

16 
	~"luac⁄f.h
"

19 
	#LUA_VERSION_MAJOR
 "5"

	)

20 
	#LUA_VERSION_MINOR
 "3"

	)

21 
	#LUA_VERSION_NUM
 503

	)

22 
	#LUA_VERSION_RELEASE
 "0"

	)

24 
	#LUA_VERSION
 "Lu®" 
LUA_VERSION_MAJOR
 "." 
LUA_VERSION_MINOR


	)

25 
	#LUA_RELEASE
 
LUA_VERSION
 "." 
LUA_VERSION_RELEASE


	)

26 
	#LUA_COPYRIGHT
 
LUA_RELEASE
 " C›yrighà(CË1994-2015 Lua.‹g, PUC-Rio"

	)

27 
	#LUA_AUTHORS
 "R. Iîußlimschy, L. H. dêFigueúedo, W. Cñes"

	)

31 
	#LUA_SIGNATURE
 "\x1bLua"

	)

34 
	#LUA_MULTRET
 (-1)

	)

40 
	#LUA_REGISTRYINDEX
 
LUAI_FIRSTPSEUDOIDX


	)

41 
	#lua_upvÆueödex
(
i
Ë(
LUA_REGISTRYINDEX
 - (i))

	)

45 
	#LUA_OK
 0

	)

46 
	#LUA_YIELD
 1

	)

47 
	#LUA_ERRRUN
 2

	)

48 
	#LUA_ERRSYNTAX
 3

	)

49 
	#LUA_ERRMEM
 4

	)

50 
	#LUA_ERRGCMM
 5

	)

51 
	#LUA_ERRERR
 6

	)

54 
lua_Sèã
 
	tlua_Sèã
;

60 
	#LUA_TNONE
 (-1)

	)

62 
	#LUA_TNIL
 0

	)

63 
	#LUA_TBOOLEAN
 1

	)

64 
	#LUA_TLIGHTUSERDATA
 2

	)

65 
	#LUA_TNUMBER
 3

	)

66 
	#LUA_TSTRING
 4

	)

67 
	#LUA_TTABLE
 5

	)

68 
	#LUA_TFUNCTION
 6

	)

69 
	#LUA_TUSERDATA
 7

	)

70 
	#LUA_TTHREAD
 8

	)

72 
	#LUA_NUMTAGS
 9

	)

77 
	#LUA_MINSTACK
 20

	)

81 
	#LUA_RIDX_MAINTHREAD
 1

	)

82 
	#LUA_RIDX_GLOBALS
 2

	)

83 
	#LUA_RIDX_LAST
 
LUA_RIDX_GLOBALS


	)

87 
LUA_NUMBER
 
	tlua_Numbî
;

91 
LUA_INTEGER
 
	tlua_I¡egî
;

94 
LUA_UNSIGNED
 
	tlua_Unsig√d
;

97 
LUA_KCONTEXT
 
	tlua_KC⁄ãxt
;

103 (*
	tlua_CFun˘i⁄
Ë(
	tlua_Sèã
 *
	tL
);

108 (*
	tlua_KFun˘i⁄
Ë(
	tlua_Sèã
 *
	tL
, 
	t°©us
, 
	tlua_KC⁄ãxt
 
	t˘x
);

114 c⁄° * (*
	tlua_Ródî
Ë(
	tlua_Sèã
 *
	tL
, *
	tud
, 
	tsize_t
 *
	tsz
);

116 (*
	tlua_Wrôî
Ë(
	tlua_Sèã
 *
	tL
, c⁄° *
	tp
, 
	tsize_t
 
	tsz
, *
	tud
);

122 * (*
	tlua_AŒoc
Ë(*
	tud
, *
	t±r
, 
	tsize_t
 
	tosize
, size_à
	tnsize
);

129 #i‡
	`deföed
(
LUA_USER_H
)

130 #ö˛udê
LUA_USER_H


137 c⁄° 
lua_idít
[];

143 
LUA_API
 
lua_Sèã
 *(
lua_√w°©e
Ë(
lua_AŒoc
 
f
, *
ud
);

144 
LUA_API
 (
lua_˛o£
Ë(
lua_Sèã
 *
L
);

145 
LUA_API
 
lua_Sèã
 *(
lua_√wthªad
Ë÷ua_Sèã *
L
);

147 
LUA_API
 
	$lua_CFun˘i⁄
 (
lua_©∑nic
Ë(
lua_Sèã
 *
L
, 
lua_CFun˘i⁄
 
∑nicf
);

150 
LUA_API
 c⁄° 
lua_Numbî
 *(
lua_vîsi⁄
Ë(
lua_Sèã
 *
L
);

156 
LUA_API
 (
lua_absödex
Ë(
lua_Sèã
 *
L
, 
idx
);

157 
LUA_API
 (
lua_gët›
Ë(
lua_Sèã
 *
L
);

158 
LUA_API
 (
lua_£â›
Ë(
lua_Sèã
 *
L
, 
idx
);

159 
LUA_API
 (
lua_pushvÆue
Ë(
lua_Sèã
 *
L
, 
idx
);

160 
LUA_API
 (
lua_rŸ©e
Ë(
lua_Sèã
 *
L
, 
idx
, 
n
);

161 
LUA_API
 (
lua_c›y
Ë(
lua_Sèã
 *
L
, 
‰omidx
, 
toidx
);

162 
LUA_API
 (
lua_check°ack
Ë(
lua_Sèã
 *
L
, 
n
);

164 
LUA_API
 (
lua_xmove
Ë(
lua_Sèã
 *
‰om
,Üua_Sèã *
to
, 
n
);

171 
LUA_API
 (
lua_i¢umbî
Ë(
lua_Sèã
 *
L
, 
idx
);

172 
LUA_API
 (
lua_is°rög
Ë(
lua_Sèã
 *
L
, 
idx
);

173 
LUA_API
 (
lua_iscfun˘i⁄
Ë(
lua_Sèã
 *
L
, 
idx
);

174 
LUA_API
 (
lua_isöãgî
Ë(
lua_Sèã
 *
L
, 
idx
);

175 
LUA_API
 (
lua_isu£rd©a
Ë(
lua_Sèã
 *
L
, 
idx
);

176 
LUA_API
 (
lua_ty≥
Ë(
lua_Sèã
 *
L
, 
idx
);

177 
LUA_API
 c⁄° *(
lua_ty≥«me
Ë(
lua_Sèã
 *
L
, 
ç
);

179 
LUA_API
 
	$lua_Numbî
 (
lua_t⁄umbîx
Ë(
lua_Sèã
 *
L
, 
idx
, *
i¢um
);

180 
LUA_API
 
	$lua_I¡egî
 (
lua_toöãgîx
Ë(
lua_Sèã
 *
L
, 
idx
, *
i¢um
);

181 
LUA_API
 (
lua_toboﬁón
Ë(
lua_Sèã
 *
L
, 
idx
);

182 
LUA_API
 c⁄° *(
lua_tﬁ°rög
Ë(
lua_Sèã
 *
L
, 
idx
, 
size_t
 *
Àn
);

183 
LUA_API
 
	$size_t
 (
lua_øwÀn
Ë(
lua_Sèã
 *
L
, 
idx
);

184 
LUA_API
 
	$lua_CFun˘i⁄
 (
lua_tocfun˘i⁄
Ë(
lua_Sèã
 *
L
, 
idx
);

185 
LUA_API
 *(
lua_tou£rd©a
Ë(
lua_Sèã
 *
L
, 
idx
);

186 
LUA_API
 
lua_Sèã
 *(
lua_tŸhªad
Ë÷ua_Sèã *
L
, 
idx
);

187 
LUA_API
 c⁄° *(
lua_t›oöãr
Ë(
lua_Sèã
 *
L
, 
idx
);

194 
	#LUA_OPADD
 0

	)

195 
	#LUA_OPSUB
 1

	)

196 
	#LUA_OPMUL
 2

	)

197 
	#LUA_OPMOD
 3

	)

198 
	#LUA_OPPOW
 4

	)

199 
	#LUA_OPDIV
 5

	)

200 
	#LUA_OPIDIV
 6

	)

201 
	#LUA_OPBAND
 7

	)

202 
	#LUA_OPBOR
 8

	)

203 
	#LUA_OPBXOR
 9

	)

204 
	#LUA_OPSHL
 10

	)

205 
	#LUA_OPSHR
 11

	)

206 
	#LUA_OPUNM
 12

	)

207 
	#LUA_OPBNOT
 13

	)

209 
LUA_API
 (
lua_¨ôh
Ë(
lua_Sèã
 *
L
, 
›
);

211 
	#LUA_OPEQ
 0

	)

212 
	#LUA_OPLT
 1

	)

213 
	#LUA_OPLE
 2

	)

215 
LUA_API
 (
lua_øwequÆ
Ë(
lua_Sèã
 *
L
, 
idx1
, 
idx2
);

216 
LUA_API
 (
lua_com∑ª
Ë(
lua_Sèã
 *
L
, 
idx1
, 
idx2
, 
›
);

222 
LUA_API
 (
lua_pushnû
Ë(
lua_Sèã
 *
L
);

223 
LUA_API
 (
lua_pushnumbî
Ë(
lua_Sèã
 *
L
, 
lua_Numbî
 
n
);

224 
LUA_API
 (
lua_pushöãgî
Ë(
lua_Sèã
 *
L
, 
lua_I¡egî
 
n
);

225 
LUA_API
 c⁄° *(
lua_pushl°rög
Ë(
lua_Sèã
 *
L
, c⁄° *
s
, 
size_t
 
Àn
);

226 
LUA_API
 c⁄° *(
lua_push°rög
Ë(
lua_Sèã
 *
L
, c⁄° *
s
);

227 
LUA_API
 c⁄° *(
lua_pushvf°rög
Ë(
lua_Sèã
 *
L
, c⁄° *
fmt
,

228 
va_li°
 
¨gp
);

229 
LUA_API
 c⁄° *(
lua_pushf°rög
Ë(
lua_Sèã
 *
L
, c⁄° *
fmt
, ...);

230 
LUA_API
 (
lua_pushc˛osuª
Ë(
lua_Sèã
 *
L
, 
lua_CFun˘i⁄
 
‚
, 
n
);

231 
LUA_API
 (
lua_pushboﬁón
Ë(
lua_Sèã
 *
L
, 
b
);

232 
LUA_API
 (
lua_pushlightu£rd©a
Ë(
lua_Sèã
 *
L
, *
p
);

233 
LUA_API
 (
lua_pushthªad
Ë(
lua_Sèã
 *
L
);

239 
LUA_API
 (
lua_gëglobÆ
Ë(
lua_Sèã
 *
L
, c⁄° *
«me
);

240 
LUA_API
 (
lua_gëèbÀ
Ë(
lua_Sèã
 *
L
, 
idx
);

241 
LUA_API
 (
lua_gëfõld
Ë(
lua_Sèã
 *
L
, 
idx
, c⁄° *
k
);

242 
LUA_API
 (
lua_gëi
Ë(
lua_Sèã
 *
L
, 
idx
, 
lua_I¡egî
 
n
);

243 
LUA_API
 (
lua_øwgë
Ë(
lua_Sèã
 *
L
, 
idx
);

244 
LUA_API
 (
lua_øwgëi
Ë(
lua_Sèã
 *
L
, 
idx
, 
lua_I¡egî
 
n
);

245 
LUA_API
 (
lua_øwgëp
Ë(
lua_Sèã
 *
L
, 
idx
, c⁄° *
p
);

247 
LUA_API
 (
lua_¸óãèbÀ
Ë(
lua_Sèã
 *
L
, 
«º
, 
ƒec
);

248 
LUA_API
 *(
lua_√wu£rd©a
Ë(
lua_Sèã
 *
L
, 
size_t
 
sz
);

249 
LUA_API
 (
lua_gëmë©abÀ
Ë(
lua_Sèã
 *
L
, 
objödex
);

250 
LUA_API
 (
lua_gëu£rvÆue
Ë(
lua_Sèã
 *
L
, 
idx
);

256 
LUA_API
 (
lua_£tglobÆ
Ë(
lua_Sèã
 *
L
, c⁄° *
«me
);

257 
LUA_API
 (
lua_£âabÀ
Ë(
lua_Sèã
 *
L
, 
idx
);

258 
LUA_API
 (
lua_£tfõld
Ë(
lua_Sèã
 *
L
, 
idx
, c⁄° *
k
);

259 
LUA_API
 (
lua_£ti
Ë(
lua_Sèã
 *
L
, 
idx
, 
lua_I¡egî
 
n
);

260 
LUA_API
 (
lua_øw£t
Ë(
lua_Sèã
 *
L
, 
idx
);

261 
LUA_API
 (
lua_øw£ti
Ë(
lua_Sèã
 *
L
, 
idx
, 
lua_I¡egî
 
n
);

262 
LUA_API
 (
lua_øw£ç
Ë(
lua_Sèã
 *
L
, 
idx
, c⁄° *
p
);

263 
LUA_API
 (
lua_£tmë©abÀ
Ë(
lua_Sèã
 *
L
, 
objödex
);

264 
LUA_API
 (
lua_£tu£rvÆue
Ë(
lua_Sèã
 *
L
, 
idx
);

270 
LUA_API
 (
lua_ˇŒk
Ë(
lua_Sèã
 *
L
, 
«rgs
, 
ƒesu…s
,

271 
lua_KC⁄ãxt
 
˘x
, 
lua_KFun˘i⁄
 
k
);

272 
	#lua_ˇŒ
(
L
,
n
,
r
Ë
	`lua_ˇŒk
(L, (n), (r), 0, 
NULL
)

	)

274 
LUA_API
 (
lua_pˇŒk
Ë(
lua_Sèã
 *
L
, 
«rgs
, 
ƒesu…s
, 
îrfunc
,

275 
lua_KC⁄ãxt
 
˘x
, 
lua_KFun˘i⁄
 
k
);

276 
	#lua_pˇŒ
(
L
,
n
,
r
,
f
Ë
	`lua_pˇŒk
(L, (n), (r), (f), 0, 
NULL
)

	)

278 
LUA_API
 (
lua_lﬂd
Ë(
lua_Sèã
 *
L
, 
lua_Ródî
 
ªadî
, *
dt
,

279 c⁄° *
chunk«me
, c⁄° *
mode
);

281 
LUA_API
 (
lua_dump
Ë(
lua_Sèã
 *
L
, 
lua_Wrôî
 
wrôî
, *
d©a
, 
°rù
);

287 
LUA_API
 (
lua_yõldk
Ë(
lua_Sèã
 *
L
, 
ƒesu…s
, 
lua_KC⁄ãxt
 
˘x
,

288 
lua_KFun˘i⁄
 
k
);

289 
LUA_API
 (
lua_ªsume
Ë(
lua_Sèã
 *
L
,Üua_Sèã *
‰om
, 
«rg
);

290 
LUA_API
 (
lua_°©us
Ë(
lua_Sèã
 *
L
);

291 
LUA_API
 (
lua_isyõldabÀ
Ë(
lua_Sèã
 *
L
);

293 
	#lua_yõld
(
L
,
n
Ë
	`lua_yõldk
(L, (n), 0, 
NULL
)

	)

300 
	#LUA_GCSTOP
 0

	)

301 
	#LUA_GCRESTART
 1

	)

302 
	#LUA_GCCOLLECT
 2

	)

303 
	#LUA_GCCOUNT
 3

	)

304 
	#LUA_GCCOUNTB
 4

	)

305 
	#LUA_GCSTEP
 5

	)

306 
	#LUA_GCSETPAUSE
 6

	)

307 
	#LUA_GCSETSTEPMUL
 7

	)

308 
	#LUA_GCISRUNNING
 9

	)

310 
LUA_API
 (
lua_gc
Ë(
lua_Sèã
 *
L
, 
wh©
, 
d©a
);

317 
LUA_API
 (
lua_îr‹
Ë(
lua_Sèã
 *
L
);

319 
LUA_API
 (
lua_√xt
Ë(
lua_Sèã
 *
L
, 
idx
);

321 
LUA_API
 (
lua_c⁄ˇt
Ë(
lua_Sèã
 *
L
, 
n
);

322 
LUA_API
 (
lua_Àn
Ë(
lua_Sèã
 *
L
, 
idx
);

324 
LUA_API
 
	$size_t
 (
lua_°rögt⁄umbî
Ë(
lua_Sèã
 *
L
, c⁄° *
s
);

326 
LUA_API
 
	$lua_AŒoc
 (
lua_gëÆlocf
Ë(
lua_Sèã
 *
L
, **
ud
);

327 
LUA_API
 (
lua_£èŒocf
Ë(
lua_Sèã
 *
L
, 
lua_AŒoc
 
f
, *
ud
);

337 
	#lua_gëexåa•a˚
(
L
Ë((*)((*)(LË- 
LUA_EXTRASPACE
))

	)

339 
	#lua_t⁄umbî
(
L
,
i
Ë
	`lua_t⁄umbîx
(L,(i),
NULL
)

	)

340 
	#lua_toöãgî
(
L
,
i
Ë
	`lua_toöãgîx
(L,(i),
NULL
)

	)

342 
	#lua_p›
(
L
,
n
Ë
	`lua_£â›
(L, -“)-1)

	)

344 
	#lua_√wèbÀ
(
L
Ë
	`lua_¸óãèbÀ
(L, 0, 0)

	)

346 
	#lua_ªgi°î
(
L
,
n
,
f
Ë(
	`lua_pushcfun˘i⁄
(L, (f)), 
	`lua_£tglobÆ
(L, (n)))

	)

348 
	#lua_pushcfun˘i⁄
(
L
,
f
Ë
	`lua_pushc˛osuª
(L, (f), 0)

	)

350 
	#lua_isfun˘i⁄
(
L
,
n
Ë(
	`lua_ty≥
(L, (n)Ë=
LUA_TFUNCTION
)

	)

351 
	#lua_i°abÀ
(
L
,
n
Ë(
	`lua_ty≥
(L, (n)Ë=
LUA_TTABLE
)

	)

352 
	#lua_i¶ightu£rd©a
(
L
,
n
Ë(
	`lua_ty≥
(L, (n)Ë=
LUA_TLIGHTUSERDATA
)

	)

353 
	#lua_i¢û
(
L
,
n
Ë(
	`lua_ty≥
(L, (n)Ë=
LUA_TNIL
)

	)

354 
	#lua_isboﬁón
(
L
,
n
Ë(
	`lua_ty≥
(L, (n)Ë=
LUA_TBOOLEAN
)

	)

355 
	#lua_i°hªad
(
L
,
n
Ë(
	`lua_ty≥
(L, (n)Ë=
LUA_TTHREAD
)

	)

356 
	#lua_i¢⁄e
(
L
,
n
Ë(
	`lua_ty≥
(L, (n)Ë=
LUA_TNONE
)

	)

357 
	#lua_i¢⁄e‹nû
(
L
, 
n
Ë(
	`lua_ty≥
(L, (n)Ë<0)

	)

359 
	#lua_pushlôîÆ
(
L
, 
s
) \

360 
	`lua_pushl°rög
(
L
, "" 
s
, ((s)/())-1)

	)

362 
	#lua_pushglobÆèbÀ
(
L
) \

363 
	`lua_øwgëi
(
L
, 
LUA_REGISTRYINDEX
, 
LUA_RIDX_GLOBALS
)

	)

365 
	#lua_to°rög
(
L
,
i
Ë
	`lua_tﬁ°rög
(L, (i), 
NULL
)

	)

368 
	#lua_ö£π
(
L
,
idx
Ë
	`lua_rŸ©e
(L, (idx), 1)

	)

370 
	#lua_ªmove
(
L
,
idx
Ë(
	`lua_rŸ©e
(L, (idx), -1), 
	`lua_p›
(L, 1))

	)

372 
	#lua_ª∂a˚
(
L
,
idx
Ë(
	`lua_c›y
(L, -1, (idx)), 
	`lua_p›
(L, 1))

	)

382 #i‡
	`deföed
(
LUA_COMPAT_APIINTCASTS
)

384 
	#lua_pushunsig√d
(
L
,
n
Ë
	`lua_pushöãgî
(L, (
lua_I¡egî
)“))

	)

385 
	#lua_tounsig√dx
(
L
,
i
,
is
Ë((
lua_Unsig√d
)
	`lua_toöãgîx
(L,i,is))

	)

386 
	#lua_tounsig√d
(
L
,
i
Ë
	`lua_tounsig√dx
(L,(i),
NULL
)

	)

401 
	#LUA_HOOKCALL
 0

	)

402 
	#LUA_HOOKRET
 1

	)

403 
	#LUA_HOOKLINE
 2

	)

404 
	#LUA_HOOKCOUNT
 3

	)

405 
	#LUA_HOOKTAILCALL
 4

	)

411 
	#LUA_MASKCALL
 (1 << 
LUA_HOOKCALL
)

	)

412 
	#LUA_MASKRET
 (1 << 
LUA_HOOKRET
)

	)

413 
	#LUA_MASKLINE
 (1 << 
LUA_HOOKLINE
)

	)

414 
	#LUA_MASKCOUNT
 (1 << 
LUA_HOOKCOUNT
)

	)

416 
lua_Debug
 
	tlua_Debug
;

420 (*
	tlua_Hook
Ë(
	tlua_Sèã
 *
	tL
, 
	tlua_Debug
 *
	t¨
);

423 
LUA_API
 (
lua_gë°ack
Ë(
lua_Sèã
 *
L
, 
Àvñ
, 
lua_Debug
 *
¨
);

424 
LUA_API
 (
lua_gëöfo
Ë(
lua_Sèã
 *
L
, c⁄° *
wh©
, 
lua_Debug
 *
¨
);

425 
LUA_API
 c⁄° *(
lua_gëloˇl
Ë(
lua_Sèã
 *
L
, c⁄° 
lua_Debug
 *
¨
, 
n
);

426 
LUA_API
 c⁄° *(
lua_£éoˇl
Ë(
lua_Sèã
 *
L
, c⁄° 
lua_Debug
 *
¨
, 
n
);

427 
LUA_API
 c⁄° *(
lua_gëupvÆue
Ë(
lua_Sèã
 *
L
, 
funcödex
, 
n
);

428 
LUA_API
 c⁄° *(
lua_£tupvÆue
Ë(
lua_Sèã
 *
L
, 
funcödex
, 
n
);

430 
LUA_API
 *(
lua_upvÆueid
Ë(
lua_Sèã
 *
L
, 
fidx
, 
n
);

431 
LUA_API
 (
lua_upvÆuejoö
Ë(
lua_Sèã
 *
L
, 
fidx1
, 
n1
,

432 
fidx2
, 
n2
);

434 
LUA_API
 (
lua_£thook
Ë(
lua_Sèã
 *
L
, 
lua_Hook
 
func
, 
mask
, 
cou¡
);

435 
LUA_API
 
	$lua_Hook
 (
lua_gëhook
Ë(
lua_Sèã
 *
L
);

436 
LUA_API
 (
lua_gëhookmask
Ë(
lua_Sèã
 *
L
);

437 
LUA_API
 (
lua_gëhookcou¡
Ë(
lua_Sèã
 *
L
);

439 
LUA_API
 (
lua_£çriv©e
Ë(
lua_Sèã
 * 
L
, * 
vÆ
) ;

440 
LUA_API
 * (
lua_gë¥iv©e
Ë(
lua_Sèã
 * 
L
);

443 
	slua_Debug
 {

444 
evít
;

445 c⁄° *
«me
;

446 c⁄° *
«mewh©
;

447 c⁄° *
wh©
;

448 c⁄° *
sour˚
;

449 
cuºíéöe
;

450 
löedeföed
;

451 
œ°löedeföed
;

452 
nups
;

453 
≈¨ams
;

454 
isv¨¨g
;

455 
i°aûˇŒ
;

456 
sh‹t_§c
[
LUA_IDSIZE
];

458 
CÆlInfo
 *
i_ci
;

487 
	`lua_ˇŒback_routöe
(*);

	@lib/archive/lua-5.3.0/src/lua.hpp

6 
	~"lua.h
"

7 
	~"luÆib.h
"

8 
	~"œuxlib.h
"

	@lib/archive/lua-5.3.0/src/lua_shell.c

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<°rög.h
>

10 
	~<sig«l.h
>

12 
	#lua_c


	)

14 
	~"lua.h
"

15 
	~"l°©e.h
"

17 
	~"œuxlib.h
"

18 
	~"luÆib.h
"

19 
	~"lua-sockë.h
"

20 
	~"lua_shñl.h
"

22 #i‡!
deföed
(
LUA_PROGNAME
)

23 
	#LUA_PROGNAME
 "lua-shñl"

	)

26 #i‡!
deföed
(
LUA_MAXINPUT
)

27 
	#LUA_MAXINPUT
 1024

	)

30 #i‡!
deföed
(
LUA_INIT
)

31 
	#LUA_INIT
 "LUA_INIT"

	)

34 
	#LUA_INITVERSION
 \

35 
LUA_INIT
 "_" 
LUA_VERSION_MAJOR
 "_" 
LUA_VERSION_MINOR


	)

43 #i‡
deföed
(
LUA_USE_READLINE
)

45 
	~<°dio.h
>

46 
	~<ªadlöe/ªadlöe.h
>

47 
	~<ªadlöe/hi°‹y.h
>

48 
	#lua_ªadlöe
(
L
,
b
Ë(()L, ((b)=
	`ªadlöe
(
NULL
)Ë!NULL)

	)

49 
	#lua_ßvñöe
(
L
,
idx
) \

50 i‡(
	`lua_øwÀn
(
L
,
idx
) > 0) \

51 
	`add_hi°‹y
(
	`lua_to°rög
(
L
, 
idx
));

	)

52 
	#lua_‰ìlöe
(
L
,
b
Ë(()L, 
	`‰ì
(b))

	)

54 #ñi‡!
deföed
(
lua_ªadlöe
)

56 
	#lua_ªadlöe
(
L
,
b
) \

57 (()
L
, 
	`fgës
(
b
, 
LUA_MAXINPUT
, 
	`_gë_°dö
(L)Ë!
NULL
Ë

	)

58 
	#lua_ßvñöe
(
L
,
idx
Ë{ ()L; ()idx; }

	)

59 
	#lua_‰ìlöe
(
L
,
b
Ë{ ()L; ()b; }

	)

63 
lua_Sèã
 *
	gglobÆL
 = 
NULL
;

65 c⁄° *
	g¥og«me
 = 
LUA_PROGNAME
;

67 
	$l°›
(
lua_Sèã
 *
L
, 
lua_Debug
 *
¨
) {

68 (Ë
¨
;

69 
	`lua_£thook
(
L
, 
NULL
, 0, 0);

70 
	`luaL_îr‹
(
L
, "interrupted!");

71 
	}
}

73 
	$œ˘i⁄
(
i
) {

74 
	`sig«l
(
i
, 
SIG_DFL
 );

76 
	`lua_£thook
(
globÆL
, 
l°›
, 
LUA_MASKCALL
 | 
LUA_MASKRET
 | 
LUA_MASKCOUNT
, 1);

77 
	}
}

79 
	$l_mesßge
(
lua_Sèã
 * 
L
, c⁄° *
≤ame
, c⁄° *
msg
) {

80 i‡(
≤ame
)

81 
	`lua_wrôe°rögîr‹
("%s: ", 
≤ame
);

82 
	`lua_wrôe°rögîr‹
("%s\n", 
msg
);

83 
	}
}

85 
	$ªp‹t
(
lua_Sèã
 *
L
, 
°©us
) {

86 i‡(
°©us
 !
LUA_OK
 && !
	`lua_i¢û
(
L
, -1)) {

87 c⁄° *
msg
 = 
	`lua_to°rög
(
L
, -1);

88 i‡(
msg
 =
NULL
 )

89 
msg
 = "(error object isÇotá string)";

90 
	`l_mesßge
(
L
, 
¥og«me
, 
msg
);

91 
	`lua_p›
(
L
, 1);

93 
	`lua_gc
(
L
, 
LUA_GCCOLLECT
, 0);

95  
°©us
;

96 
	}
}

99 
	$föÆªp‹t
(
lua_Sèã
 *
L
, 
°©us
) {

100 i‡(
°©us
 !
LUA_OK
) {

101 c⁄° *
msg
 =

102 (
	`lua_ty≥
(
L
, -1Ë=
LUA_TSTRING
Ë? 
	`lua_to°rög
(L, -1Ë: 
NULL
;

103 i‡(
msg
 =
NULL
 )

104 
msg
 = "(error object isÇotá string)";

105 
	`l_mesßge
(
L
, 
¥og«me
, 
msg
);

106 
	`lua_p›
(
L
, 1);

108 
	}
}

110 
	$åa˚back
(
lua_Sèã
 *
L
) {

111 c⁄° *
msg
 = 
	`lua_to°rög
(
L
, 1);

112 i‡(
msg
)

113 
	`luaL_åa˚back
(
L
, L, 
msg
, 1);

114 i‡(!
	`lua_i¢⁄e‹nû
(
L
, 1)) {

115 i‡(!
	`luaL_ˇŒmëa
(
L
, 1, "__tostring"))

116 
	`lua_pushlôîÆ
(
L
, "(noÉrror message)");

119 
	}
}

121 
	$doˇŒ
(
lua_Sèã
 *
L
, 
«rg
, 
ƒes
) {

122 
°©us
;

123 
ba£
 = 
	`lua_gët›
(
L
Ë- 
«rg
;

125 
	`lua_pushcfun˘i⁄
(
L
, 
åa˚back
);

127 
	`lua_ö£π
(
L
, 
ba£
);

128 
globÆL
 = 
L
;

129 
	`sig«l
(
SIGINT
, 
œ˘i⁄
);

130 
°©us
 = 
	`lua_pˇŒ
(
L
, 
«rg
, 
ƒes
, 
ba£
);

131 
	`sig«l
(
SIGINT
, 
SIG_DFL
 );

132 
globÆL
 = 
NULL
;

133 
	`lua_ªmove
(
L
, 
ba£
);

135  
°©us
;

136 
	}
}

138 
	$dofûe
(
lua_Sèã
 *
L
, c⁄° *
«me
) {

139 
°©us
 = 
	`luaL_lﬂdfûe
(
L
, 
«me
);

140 i‡(
°©us
 =
LUA_OK
)

141 
°©us
 = 
	`doˇŒ
(
L
, 0, 0);

142  
	`ªp‹t
(
L
, 
°©us
);

143 
	}
}

145 
	$do°rög
(
lua_Sèã
 *
L
, c⁄° *
s
, c⁄° *
«me
) {

146 
°©us
 = 
	`luaL_lﬂdbuf„r
(
L
, 
s
, 
	`°æí
(s), 
«me
);

147 i‡(
°©us
 =
LUA_OK
)

148 
°©us
 = 
	`doˇŒ
(
L
, 0, 0);

149  
	`ªp‹t
(
L
, 
°©us
);

150 
	}
}

152 
	$dﬁibøry
(
lua_Sèã
 *
L
, c⁄° *
«me
) {

153 
°©us
;

154 
	`lua_gëglobÆ
(
L
, "require");

155 
	`lua_push°rög
(
L
, 
«me
);

156 
°©us
 = 
	`doˇŒ
(
L
, 1, 1);

157 i‡(
°©us
 =
LUA_OK
)

158 
	`lua_£tglobÆ
(
L
, 
«me
);

159  
	`ªp‹t
(
L
, 
°©us
);

160 
	}
}

163 
	#EOFMARK
 "<eof>"

	)

164 
	#m¨kÀn
 ((
EOFMARK
)/(Ë- 1)

	)

166 
	$öcom∂ëe
(
lua_Sèã
 *
L
, 
°©us
) {

167 i‡(
°©us
 =
LUA_ERRSYNTAX
) {

168 
size_t
 
lmsg
;

169 c⁄° *
msg
 = 
	`lua_tﬁ°rög
(
L
, -1, &
lmsg
);

170 i‡(
lmsg
 >
m¨kÀn
 && 
	`°rcmp
(
msg
 +Ümsg - m¨kÀn, 
EOFMARK
) == 0) {

171 
	`lua_p›
(
L
, 1);

176 
	}
}

178 
	$pushlöe
(
lua_Sèã
 *
L
, 
fú°löe
) {

179 
buf„r
[
LUA_MAXINPUT
];

180 *
b
 = 
buf„r
;

181 
size_t
 
l
;

183 i‡(
	`lua_ªadlöe
(
L
, 
b
) == 0)

186 
l
 = 
	`°æí
(
b
);

187 i‡(
l
 > 0 && 
b
[l - 1] == '\n')

188 
b
[
l
 - 1] = '\0';

189 i‡(
fú°löe
 && 
b
[0] == '=')

190 
	`lua_pushf°rög
(
L
, "ªtu∫ %s", 
b
 + 1);

192 
	`lua_push°rög
(
L
, 
b
);

193 
	`lua_‰ìlöe
(
L
, 
b
);

196 
	}
}

198 
	$lﬂdlöe
(
lua_Sèã
 *
L
) {

199 
°©us
;

201 
	`lua_£â›
(
L
, 0);

202 i‡(!
	`pushlöe
(
L
, 1))

206 
size_t
 
l
;

207 c⁄° *
löe
 = 
	`lua_tﬁ°rög
(
L
, 1, &
l
);

209 
°©us
 = 
	`luaL_lﬂdbuf„r
(
L
, 
löe
, 
l
, "=stdin");

210 i‡(!
	`öcom∂ëe
(
L
, 
°©us
))

213 i‡(!
	`pushlöe
(
L
, 0))

216 
	`lua_pushlôîÆ
(
L
, "\n");

217 
	`lua_ö£π
(
L
, -2);

218 
	`lua_c⁄ˇt
(
L
, 3);

220 
	`lua_ßvñöe
(
L
, 1);

221 
	`lua_ªmove
(
L
, 1);

222  
°©us
;

223 
	}
}

225 
	$dŸty
(
lua_Sèã
 *
L
) {

226 
°©us
;

227 c⁄° *
ﬁd¥og«me
 = 
¥og«me
;

228 
¥og«me
 = 
NULL
;

230 (
°©us
 = 
	`lﬂdlöe
(
L
)) != -1) {

231 i‡(
°©us
 =
LUA_OK
)

232 
°©us
 = 
	`doˇŒ
(
L
, 0, 
LUA_MULTRET
);

233 
	`ªp‹t
(
L
, 
°©us
);

234 i‡(
°©us
 =
LUA_OK
 && 
	`lua_gët›
(
L
) > 0) {

235 
	`luaL_check°ack
(
L
, 
LUA_MINSTACK
, "too manyÑesultsÅoÖrint");

236 
	`lua_gëglobÆ
(
L
, "print");

237 
	`lua_ö£π
(
L
, 1);

238 i‡(
	`lua_pˇŒ
(
L
, 
	`lua_gët›
(L)-1, 0, 0Ë!
LUA_OK
)

239 
	`l_mesßge
(
L
, 
¥og«me
,

240 
	`lua_pushf°rög
(
L
,

241 "îr‹ cÆlög " 
	`LUA_QL
("print") " (%s)",

242 
	`lua_to°rög
(
L
, -1)));

245 
	`lua_£â›
(
L
, 0);

246 
	`lua_wrôñöe
(
L
);

248 
¥og«me
 = 
ﬁd¥og«me
;

249 
	}
}

251 
	$h™dÀ_luaöô
(
lua_Sèã
 *
L
) {

252 c⁄° *
«me
 = "=" 
LUA_INITVERSION
;

253 c⁄° *
öô
 = 
	`gëív
(
«me
 + 1);

254 i‡(
öô
 =
NULL
 ) {

255 
«me
 = "=" 
LUA_INIT
;

256 
öô
 = 
	`gëív
(
«me
 + 1);

258 i‡(
öô
 =
NULL
 )

259  
LUA_OK
;

260 i‡(
öô
[0] == '@')

261  
	`dofûe
(
L
, 
öô
 + 1);

263  
	`do°rög
(
L
, 
öô
, 
«me
);

264 
	}
}

266 
√wlib_t
 
	g√wlibs
[
MAX_NEW_LIBS
];

267 
	g√wlibs_idx
 = 0;

269 
	$lua_√wlib_add
(
√wlib_t
 
n
) {

270 i‡–
√wlibs_idx
 >
MAX_NEW_LIBS
 )

272 
√wlibs
[
√wlibs_idx
++] = 
n
;

274 
	}
}

276 
	$lua_√wlibs_öô
(
lua_Sèã
 * 
L
) {

277 
i
;

279 
i
 = 0; i < 
√wlibs_idx
; i++)

280 
√wlibs
[
i
](
L
);

282 
	}
}

284 
	$pmaö
(
lua_Sèã
 *
L
) {

287 
	`luaL_checkvîsi⁄
(
L
);

289 
	`lua_√wlibs_öô
(
L
);

291 i‡(
	`h™dÀ_luaöô
(
L
Ë!
LUA_OK
)

294 
	`_£t_°dfûes
(
L
, 
	`luaL_gë¥iv©e
(L));

296 
	`dŸty
(
L
);

298 
	`_ª£t_°dfûes
(
L
);

300 
	`lua_pushboﬁón
(
L
, 1);

303 
	}
}

305 
	$lua_shñl
(* 
pSîvî
) {

306 
°©us
, 
ªsu…
;

307 
lua_Sèã
 *
L
;

309 
L
 = 
	`luaL_√w°©e
();

310 i‡(
L
 =
NULL
 ) {

311 
	`l_mesßge
(
NULL
, "Lua-Shell", "cannot create state:ÇotÉnough memory");

312  
EXIT_FAILURE
;

314 
	`luaL_£çriv©e
(
L
, 
pSîvî
);

317 
	`lua_pushcfun˘i⁄
(
L
, &
pmaö
);

318 
°©us
 = 
	`lua_pˇŒ
(
L
, 0, 1, 0);

319 
ªsu…
 = 
	`lua_toboﬁón
(
L
, -1);

320 
	`föÆªp‹t
(
L
, 
°©us
);

321 
	`lua_˛o£
(
L
);

323  (
ªsu…
 && 
°©us
 =
LUA_OK
Ë? 
EXIT_SUCCESS
 : 
EXIT_FAILURE
;

324 
	}
}

339 
	$execuã_lua_°rög
–
lua_Sèã
 * 
L
, * 
buf„r
 )

341 i‡–(
buf„r
 =
NULL
Ë|| (
L
 == NULL) )

344 i‡–
	`luaL_do°rög
(
L
, 
buf„r
) != 0 ) {

345 
	`Ârötf
(
°dîr
,"%s\n", 
	`lua_to°rög
(
L
,-1));

350 
	}
}

365 
	$execuã_lua_˛o£
(
lua_Sèã
 * 
L
)

367 i‡–
L
 )

368 
	`lua_˛o£
(
L
);

369 
	}
}

	@lib/archive/lua-5.3.0/src/lua_shell.h

36 #i‚de‡
LUA_SHELL_H_


37 
	#LUA_SHELL_H_


	)

39 
	#lua_c


	)

40 
	~"lua.h
"

41 
	~"œuxlib.h
"

43 
	#MAX_NEW_LIBS
 16

	)

44 (*
	t√wlib_t
)(
	tlua_Sèã
 * 
	tL
);

46 
	`lua_√wlib_add
(
√wlib_t
 
n
);

47 
	`lua_√wlibs_öô
(
lua_Sèã
 * 
L
);

	@lib/archive/lua-5.3.0/src/luac.c

7 
	#luac_c


	)

8 
	#LUA_CORE


	)

10 
	~"Õªfix.h
"

12 
	~<˘y≥.h
>

13 
	~<î∫o.h
>

14 
	~<°dio.h
>

15 
	~<°dlib.h
>

16 
	~<°rög.h
>

18 
	~"lua.h
"

19 
	~"œuxlib.h
"

21 
	~"lobje˘.h
"

22 
	~"l°©e.h
"

23 
	~"lundump.h
"

25 
PrötFun˘i⁄
(c⁄° 
PrŸo
* 
f
, 
fuŒ
);

26 
	#luaU_¥öt
 
PrötFun˘i⁄


	)

28 
	#PROGNAME
 "luac"

	)

29 
	#OUTPUT
 
PROGNAME
 ".out"

	)

31 
	gli°ög
=0;

32 
	gdumpög
=1;

33 
	g°rùpög
=0;

34 
	gOuçut
[]={ 
OUTPUT
 };

35 c⁄° * 
	gouçut
=
Ouçut
;

36 c⁄° * 
	g¥og«me
=
PROGNAME
;

38 
	$Áèl
(c⁄° * 
mesßge
)

40 
	`Ârötf
(
°dîr
,"%s: %s\n",
¥og«me
,
mesßge
);

41 
	`exô
(
EXIT_FAILURE
);

42 
	}
}

44 
	$ˇ¬Ÿ
(c⁄° * 
wh©
)

46 
	`Ârötf
(
°dîr
,"%s: c™nŸ %†%s: %s\n",
¥og«me
,
wh©
,
ouçut
,
	`°ªº‹
(
î∫o
));

47 
	`exô
(
EXIT_FAILURE
);

48 
	}
}

50 
	$ußge
(c⁄° * 
mesßge
)

52 i‡(*
mesßge
=='-')

53 
	`Ârötf
(
°dîr
,"%s: uƒecognized o±i⁄ '%s'\n",
¥og«me
,
mesßge
);

55 
	`Ârötf
(
°dîr
,"%s: %s\n",
¥og«me
,
mesßge
);

56 
	`Ârötf
(
°dîr
,

66 ,
¥og«me
,
Ouçut
);

67 
	`exô
(
EXIT_FAILURE
);

68 
	}
}

70 
	#IS
(
s
Ë(
	`°rcmp
(
¨gv
[
i
],s)==0)

	)

72 
	$dﬂrgs
(
¨gc
, * 
¨gv
[])

74 
i
;

75 
vîsi⁄
=0;

76 i‡(
¨gv
[0]!=
NULL
 && *¨gv[0]!=0Ë
¥og«me
=argv[0];

77 
i
=1; i<
¨gc
; i++)

79 i‡(*
¨gv
[
i
]!='-')

81 i‡(
	`IS
("--"))

83 ++
i
;

84 i‡(
vîsi⁄
) ++version;

87 i‡(
	`IS
("-"))

89 i‡(
	`IS
("-l"))

90 ++
li°ög
;

91 i‡(
	`IS
("-o"))

93 
ouçut
=
¨gv
[++
i
];

94 i‡(
ouçut
==
NULL
 || *output==0 || (*output=='-' && output[1]!=0))

95 
	`ußge
("'-o'Çeedsárgument");

96 i‡(
	`IS
("-")Ë
ouçut
=
NULL
;

98 i‡(
	`IS
("-p"))

99 
dumpög
=0;

100 i‡(
	`IS
("-s"))

101 
°rùpög
=1;

102 i‡(
	`IS
("-v"))

103 ++
vîsi⁄
;

105 
	`ußge
(
¨gv
[
i
]);

107 i‡(
i
==
¨gc
 && (
li°ög
 || !
dumpög
))

109 
dumpög
=0;

110 
¨gv
[--
i
]=
Ouçut
;

112 i‡(
vîsi⁄
)

114 
	`¥ötf
("%s\n",
LUA_COPYRIGHT
);

115 i‡(
vîsi⁄
==
¨gc
-1Ë
	`exô
(
EXIT_SUCCESS
);

117  
i
;

118 
	}
}

120 
	#FUNCTION
 "(fun˘i⁄(Înd)();"

	)

122 c⁄° * 
	$ªadî
(
lua_Sèã
 *
L
, *
ud
, 
size_t
 *
size
)

124 
	`UNUSED
(
L
);

125 i‡((*(*)
ud
)--)

127 *
size
=(
FUNCTION
)-1;

128  
FUNCTION
;

132 *
size
=0;

133  
NULL
;

135 
	}
}

137 
	#t›rŸo
(
L
,
i
Ë
	`gë¥Ÿo
(L->
t›
+(i))

	)

139 c⁄° 
PrŸo
* 
	$comböe
(
lua_Sèã
* 
L
, 
n
)

141 i‡(
n
==1)

142  
	`t›rŸo
(
L
,-1);

145 
PrŸo
* 
f
;

146 
i
=
n
;

147 i‡(
	`lua_lﬂd
(
L
,
ªadî
,&
i
,"=(" 
PROGNAME
 ")",
NULL
)!=
LUA_OK
Ë
	`Áèl
(
	`lua_to°rög
(L,-1));

148 
f
=
	`t›rŸo
(
L
,-1);

149 
i
=0; i<
n
; i++)

151 
f
->
p
[
i
]=
	`t›rŸo
(
L
,i-
n
-1);

152 i‡(
f
->
p
[
i
]->
sizeupvÆues
>0Ëf->p[i]->
upvÆues
[0].
ö°ack
=0;

154 
f
->
sizñöeöfo
=0;

155  
f
;

157 
	}
}

159 
	$wrôî
(
lua_Sèã
* 
L
, c⁄° * 
p
, 
size_t
 
size
, * 
u
)

161 
	`UNUSED
(
L
);

162  (
	`fwrôe
(
p
,
size
,1,(
FILE
*)
u
)!=1) && (size!=0);

163 
	}
}

165 
	$pmaö
(
lua_Sèã
* 
L
)

167 
¨gc
=()
	`lua_toöãgî
(
L
,1);

168 ** 
¨gv
=(**)
	`lua_tou£rd©a
(
L
,2);

169 c⁄° 
PrŸo
* 
f
;

170 
i
;

171 i‡(!
	`lua_check°ack
(
L
,
¨gc
)Ë
	`Áèl
("too many input files");

172 
i
=0; i<
¨gc
; i++)

174 c⁄° * 
fûíame
=
	`IS
("-"Ë? 
NULL
 : 
¨gv
[
i
];

175 i‡(
	`luaL_lﬂdfûe
(
L
,
fûíame
)!=
LUA_OK
Ë
	`Áèl
(
	`lua_to°rög
(L,-1));

177 
f
=
	`comböe
(
L
,
¨gc
);

178 i‡(
li°ög
Ë
	`luaU_¥öt
(
f
,listing>1);

179 i‡(
dumpög
)

181 
FILE
* 
D
(
ouçut
==
NULL
Ë? 
°dout
 : 
	`f›í
(output,"wb");

182 i‡(
D
==
NULL
Ë
	`ˇ¬Ÿ
("open");

183 
	`lua_lock
(
L
);

184 
	`luaU_dump
(
L
,
f
,
wrôî
,
D
,
°rùpög
);

185 
	`lua_u∆ock
(
L
);

186 i‡(
	`„º‹
(
D
)Ë
	`ˇ¬Ÿ
("write");

187 i‡(
	`f˛o£
(
D
)Ë
	`ˇ¬Ÿ
("close");

190 
	}
}

192 
	$maö
(
¨gc
, * 
¨gv
[])

194 
lua_Sèã
* 
L
;

195 
i
=
	`dﬂrgs
(
¨gc
,
¨gv
);

196 
¨gc
-=
i
; 
¨gv
+=i;

197 i‡(
¨gc
<=0Ë
	`ußge
("no input files given");

198 
L
=
	`luaL_√w°©e
();

199 i‡(
L
==
NULL
Ë
	`Áèl
("cannot create state:ÇotÉnough memory");

200 
	`lua_pushcfun˘i⁄
(
L
,&
pmaö
);

201 
	`lua_pushöãgî
(
L
,
¨gc
);

202 
	`lua_pushlightu£rd©a
(
L
,
¨gv
);

203 i‡(
	`lua_pˇŒ
(
L
,2,0,0)!=
LUA_OK
Ë
	`Áèl
(
	`lua_to°rög
(L,-1));

204 
	`lua_˛o£
(
L
);

205  
EXIT_SUCCESS
;

206 
	}
}

214 
	~<˘y≥.h
>

215 
	~<°dio.h
>

217 
	#luac_c


	)

218 
	#LUA_CORE


	)

220 
	~"ldebug.h
"

221 
	~"lobje˘.h
"

222 
	~"l›codes.h
"

224 
	#VOID
(
p
Ë((c⁄° *)’))

	)

226 
	$PrötSåög
(c⁄° 
TSåög
* 
ts
)

228 c⁄° * 
s
=
	`gë°r
(
ts
);

229 
size_t
 
i
,
n
=
ts
->
Àn
;

230 
	`¥ötf
("%c",'"');

231 
i
=0; i<
n
; i++)

233 
c
=()()
s
[
i
];

234 
c
)

236 '"': 
	`¥ötf
("\\\""); ;

237 '\\': 
	`¥ötf
("\\\\"); ;

238 '\a': 
	`¥ötf
("\\a"); ;

239 '\b': 
	`¥ötf
("\\b"); ;

240 '\f': 
	`¥ötf
("\\f"); ;

241 '\n': 
	`¥ötf
("\\n"); ;

242 '\r': 
	`¥ötf
("\\r"); ;

243 '\t': 
	`¥ötf
("\\t"); ;

244 '\v': 
	`¥ötf
("\\v"); ;

245 : i‡(
	`i•röt
(
c
))

246 
	`¥ötf
("%c",
c
);

248 
	`¥ötf
("\\%03d",
c
);

251 
	`¥ötf
("%c",'"');

252 
	}
}

254 
	$PrötC⁄°™t
(c⁄° 
PrŸo
* 
f
, 
i
)

256 c⁄° 
TVÆue
* 
o
=&
f
->
k
[
i
];

257 
	`ây≥
(
o
))

259 
LUA_TNIL
:

260 
	`¥ötf
("nil");

262 
LUA_TBOOLEAN
:

263 
	`¥ötf
(
	`bvÆue
(
o
) ? "true" : "false");

265 
LUA_TNUMFLT
:

267 
buff
[100];

268 
	`•rötf
(
buff
,
LUA_NUMBER_FMT
,
	`ÊtvÆue
(
o
));

269 
	`¥ötf
("%s",
buff
);

270 i‡(
buff
[
	`°r•n
(buff,"-0123456789")]=='\0'Ë
	`¥ötf
(".0");

273 
LUA_TNUMINT
:

274 
	`¥ötf
(
LUA_INTEGER_FMT
,
	`ivÆue
(
o
));

276 
LUA_TSHRSTR
: 
LUA_TLNGSTR
:

277 
	`PrötSåög
(
	`tsvÆue
(
o
));

280 
	`¥ötf
("?Åy≥=%d",
	`ây≥
(
o
));

283 
	}
}

285 
	#UPVALNAME
(
x
Ë((
f
->
upvÆues
[x].
«me
Ë? 
	`gë°r
(f->upvÆues[x].«meË: "-")

	)

286 
	#MYK
(
x
Ë(-1-(x))

	)

288 
	$PrötCode
(c⁄° 
PrŸo
* 
f
)

290 c⁄° 
In°ru˘i⁄
* 
code
=
f
->code;

291 
pc
,
n
=
f
->
sizecode
;

292 
pc
=0;Öc<
n
;Öc++)

294 
In°ru˘i⁄
 
i
=
code
[
pc
];

295 
OpCode
 
o
=
	`GET_OPCODE
(
i
);

296 
a
=
	`GETARG_A
(
i
);

297 
b
=
	`GETARG_B
(
i
);

298 
c
=
	`GETARG_C
(
i
);

299 
ax
=
	`GETARG_Ax
(
i
);

300 
bx
=
	`GETARG_Bx
(
i
);

301 
sbx
=
	`GETARG_sBx
(
i
);

302 
löe
=
	`gëfun˛öe
(
f
,
pc
);

303 
	`¥ötf
("\t%d\t",
pc
+1);

304 i‡(
löe
>0Ë
	`¥ötf
("[%d]\t",line); printf("[-]\t");

305 
	`¥ötf
("%-9s\t",
luaP_›«mes
[
o
]);

306 
	`gëOpMode
(
o
))

308 
iABC
:

309 
	`¥ötf
("%d",
a
);

310 i‡(
	`gëBMode
(
o
)!=
OpArgN
Ë
	`¥ötf
(" %d",
	`ISK
(
b
Ë? (
	`MYK
(
	`INDEXK
(b))) : b);

311 i‡(
	`gëCMode
(
o
)!=
OpArgN
Ë
	`¥ötf
(" %d",
	`ISK
(
c
Ë? (
	`MYK
(
	`INDEXK
(c))) : c);

313 
iABx
:

314 
	`¥ötf
("%d",
a
);

315 i‡(
	`gëBMode
(
o
)==
OpArgK
Ë
	`¥ötf
(" %d",
	`MYK
(
bx
));

316 i‡(
	`gëBMode
(
o
)==
OpArgU
Ë
	`¥ötf
(" %d",
bx
);

318 
iAsBx
:

319 
	`¥ötf
("%d %d",
a
,
sbx
);

321 
iAx
:

322 
	`¥ötf
("%d",
	`MYK
(
ax
));

325 
o
)

327 
OP_LOADK
:

328 
	`¥ötf
("\t; "); 
	`PrötC⁄°™t
(
f
,
bx
);

330 
OP_GETUPVAL
:

331 
OP_SETUPVAL
:

332 
	`¥ötf
("\t; %s",
	`UPVALNAME
(
b
));

334 
OP_GETTABUP
:

335 
	`¥ötf
("\t; %s",
	`UPVALNAME
(
b
));

336 i‡(
	`ISK
(
c
)Ë{ 
	`¥ötf
(" "); 
	`PrötC⁄°™t
(
f
,
	`INDEXK
(c)); }

338 
OP_SETTABUP
:

339 
	`¥ötf
("\t; %s",
	`UPVALNAME
(
a
));

340 i‡(
	`ISK
(
b
)Ë{ 
	`¥ötf
(" "); 
	`PrötC⁄°™t
(
f
,
	`INDEXK
(b)); }

341 i‡(
	`ISK
(
c
)Ë{ 
	`¥ötf
(" "); 
	`PrötC⁄°™t
(
f
,
	`INDEXK
(c)); }

343 
OP_GETTABLE
:

344 
OP_SELF
:

345 i‡(
	`ISK
(
c
)Ë{ 
	`¥ötf
("\t; "); 
	`PrötC⁄°™t
(
f
,
	`INDEXK
(c)); }

347 
OP_SETTABLE
:

348 
OP_ADD
:

349 
OP_SUB
:

350 
OP_MUL
:

351 
OP_POW
:

352 
OP_DIV
:

353 
OP_IDIV
:

354 
OP_BAND
:

355 
OP_BOR
:

356 
OP_BXOR
:

357 
OP_SHL
:

358 
OP_SHR
:

359 
OP_EQ
:

360 
OP_LT
:

361 
OP_LE
:

362 i‡(
	`ISK
(
b
Ë|| ISK(
c
))

364 
	`¥ötf
("\t; ");

365 i‡(
	`ISK
(
b
)Ë
	`PrötC⁄°™t
(
f
,
	`INDEXK
(b)); 
	`¥ötf
("-");

366 
	`¥ötf
(" ");

367 i‡(
	`ISK
(
c
)Ë
	`PrötC⁄°™t
(
f
,
	`INDEXK
(c)); 
	`¥ötf
("-");

370 
OP_JMP
:

371 
OP_FORLOOP
:

372 
OP_FORPREP
:

373 
OP_TFORLOOP
:

374 
	`¥ötf
("\t;Åÿ%d",
sbx
+
pc
+2);

376 
OP_CLOSURE
:

377 
	`¥ötf
("\t; %p",
	`VOID
(
f
->
p
[
bx
]));

379 
OP_SETLIST
:

380 i‡(
c
==0Ë
	`¥ötf
("\t; %d",()
code
[++
pc
]); printf("\t; %d",c);

382 
OP_EXTRAARG
:

383 
	`¥ötf
("\t; "); 
	`PrötC⁄°™t
(
f
,
ax
);

388 
	`¥ötf
("\n");

390 
	}
}

392 
	#SS
(
x
Ë((x==1)?"":"s")

	)

393 
	#S
(
x
Ë()(x),
	`SS
(x)

	)

395 
	$PrötHódî
(c⁄° 
PrŸo
* 
f
)

397 c⁄° * 
s
=
f
->
sour˚
 ? 
	`gë°r
(f->source) : "=?";

398 i‡(*
s
=='@' || *s=='=')

399 
s
++;

400 i‡(*
s
==
LUA_SIGNATURE
[0])

401 
s
="(bstring)";

403 
s
="(string)";

404 
	`¥ötf
("\n%s <%s:%d,%d> (%d instruction%sát %p)\n",

405 (
f
->
löedeföed
==0)?"maö":"fun˘i⁄",
s
,

406 
f
->
löedeföed
,f->
œ°löedeföed
,

407 
	`S
(
f
->
sizecode
),
	`VOID
(f));

408 
	`¥ötf
("%d%sÖaram%s, %d slot%s, %d upvalue%s, ",

409 ()(
f
->
num∑øms
),f->
is_v¨¨g
?"+":"",
	`SS
(f->numparams),

410 
	`S
(
f
->
max°acksize
),S(f->
sizeupvÆues
));

411 
	`¥ötf
("%dÜocal%s, %d constant%s, %d function%s\n",

412 
	`S
(
f
->
sizñocv¨s
),S(f->
sizek
),S(f->
sizï
));

413 
	}
}

415 
	$PrötDebug
(c⁄° 
PrŸo
* 
f
)

417 
i
,
n
;

418 
n
=
f
->
sizek
;

419 
	`¥ötf
("c⁄°™t†(%dËf‹ %p:\n",
n
,
	`VOID
(
f
));

420 
i
=0; i<
n
; i++)

422 
	`¥ötf
("\t%d\t",
i
+1);

423 
	`PrötC⁄°™t
(
f
,
i
);

424 
	`¥ötf
("\n");

426 
n
=
f
->
sizñocv¨s
;

427 
	`¥ötf
("loˇl†(%dËf‹ %p:\n",
n
,
	`VOID
(
f
));

428 
i
=0; i<
n
; i++)

430 
	`¥ötf
("\t%d\t%s\t%d\t%d\n",

431 
i
,
	`gë°r
(
f
->
locv¨s
[i].
v¨«me
),f->locv¨s[i].
°¨çc
+1,f->locv¨s[i].
ídpc
+1);

433 
n
=
f
->
sizeupvÆues
;

434 
	`¥ötf
("upvÆue†(%dËf‹ %p:\n",
n
,
	`VOID
(
f
));

435 
i
=0; i<
n
; i++)

437 
	`¥ötf
("\t%d\t%s\t%d\t%d\n",

438 
i
,
	`UPVALNAME
(i),
f
->
upvÆues
[i].
ö°ack
,f->upvÆues[i].
idx
);

440 
	}
}

442 
	$PrötFun˘i⁄
(c⁄° 
PrŸo
* 
f
, 
fuŒ
)

444 
i
,
n
=
f
->
sizï
;

445 
	`PrötHódî
(
f
);

446 
	`PrötCode
(
f
);

447 i‡(
fuŒ
Ë
	`PrötDebug
(
f
);

448 
i
=0; i<
n
; i++Ë
	`PrötFun˘i⁄
(
f
->
p
[i],
fuŒ
);

449 
	}
}

	@lib/archive/lua-5.3.0/src/luaconf.h

8 #i‚de‡
luac⁄f_h


9 
	#luac⁄f_h


	)

11 
	~<limôs.h
>

12 
	~<°ddef.h
>

50 #i‡!
deföed
(
LUA_USE_C89
Ë&& deföed(
_WIN32
Ë&& !deföed(
_WIN32_WCE
)

51 
	#LUA_USE_WINDOWS


	)

55 #i‡
deföed
(
LUA_USE_WINDOWS
)

56 
	#LUA_DL_DLL


	)

57 
	#LUA_USE_C89


	)

61 #i‡
deföed
(
LUA_USE_LINUX
)

62 
	#LUA_USE_POSIX


	)

63 
	#LUA_USE_DLOPEN


	)

64 #unde‡
LUA_USE_READLINE


68 #i‡
deföed
(
LUA_USE_MACOSX
)

69 
	#LUA_USE_POSIX


	)

70 
	#LUA_USE_DLOPEN


	)

71 
	#LUA_USE_READLINE


	)

80 #i‡
deföed
(
LUA_USE_C89
Ë&& !deföed(
LUA_USE_WINDOWS
)

81 
	#LUA_C89_NUMBERS


	)

90 #i‡((
INT_MAX
 >> 15) >> 15) >= 1

91 
	#LUAI_BITSINT
 32

	)

94 
	#LUAI_BITSINT
 16

	)

110 #i‡
deföed
(
LUA_32BITS
)

114 #i‡
LUAI_BITSINT
 >= 32

115 
	#LUA_INT_INT


	)

117 
	#LUA_INT_LONG


	)

119 
	#LUA_REAL_FLOAT


	)

121 #ñi‡
deföed
(
LUA_C89_NUMBERS
)

125 
	#LUA_INT_LONG


	)

126 
	#LUA_REAL_DOUBLE


	)

132 
	#LUA_INT_LONGLONG


	)

133 
	#LUA_REAL_DOUBLE


	)

157 
	#LUA_VDIR
 
LUA_VERSION_MAJOR
 "." 
LUA_VERSION_MINOR


	)

158 #i‡
deföed
(
_WIN32
)

163 
	#LUA_LDIR
 "!\\lua\\"

	)

164 
	#LUA_CDIR
 "!\\"

	)

165 
	#LUA_SHRDIR
 "!\\..\\sh¨e\\lua\\" 
LUA_VDIR
 "\\"

	)

166 
	#LUA_PATH_DEFAULT
 \

167 
LUA_LDIR
"?.lua;" LUA_LDIR"?\\init.lua;" \

168 
LUA_CDIR
"?.lua;" LUA_CDIR"?\\init.lua;" \

169 
LUA_SHRDIR
"?.lua;" LUA_SHRDIR"?\\init.lua;" \

170 ".\\?.lua;" ".\\?\\öô.lua"

	)

171 
	#LUA_CPATH_DEFAULT
 \

172 
LUA_CDIR
"?.dll;" \

173 
LUA_CDIR
"..\\lib\\lua\\" 
LUA_VDIR
 "\\?.dll;" \

174 
LUA_CDIR
"lﬂdÆl.dŒ;" ".\\?.dŒ"

	)

178 
	#LUA_ROOT
 "/u§/loˇl/"

	)

179 
	#LUA_LDIR
 
LUA_ROOT
 "sh¨e/lua/" 
LUA_VDIR
 "/"

	)

180 
	#LUA_CDIR
 
LUA_ROOT
 "lib/lua/" 
LUA_VDIR
 "/"

	)

181 
	#LUA_PATH_DEFAULT
 \

182 
LUA_LDIR
"?.lua;" LUA_LDIR"?/init.lua;" \

183 
LUA_CDIR
"?.lua;" LUA_CDIR"?/init.lua;" \

184 "./?.lua;" "./?/öô.lua"

	)

185 
	#LUA_CPATH_DEFAULT
 \

186 
LUA_CDIR
"?.so;" LUA_CDIR"lﬂdÆl.so;" "./?.so"

	)

195 #i‡
deföed
(
_WIN32
)

196 
	#LUA_DIRSEP
 "\\"

	)

198 
	#LUA_DIRSEP
 "/"

	)

219 #i‡
deföed
(
LUA_BUILD_AS_DLL
)

221 #i‡
deföed
(
LUA_CORE
Ë|| deföed(
LUA_LIB
)

222 
	#LUA_API
 
	`__de˛•ec
(
dŒexp‹t
)

	)

224 
	#LUA_API
 
	`__de˛•ec
(
dŒimp‹t
)

	)

229 
	#LUA_API
 

	)

235 
	#LUALIB_API
 
LUA_API


	)

236 
	#LUAMOD_API
 
LUALIB_API


	)

253 #i‡
deföed
(
__GNUC__
Ë&& ((__GNUC__*100 + 
__GNUC_MINOR__
) >= 302) && \

254 
	$deföed
(
__ELF__
)

255 
	#LUAI_FUNC
 
	`__©åibuã__
((
	`visibûôy
("hiddí"))Ë

	)

257 
	#LUAI_FUNC
 

	)

260 
	#LUAI_DDEC
 
LUAI_FUNC


	)

261 
	#LUAI_DDEF


	)

278 #i‡
	`deföed
(
LUA_COMPAT_5_2
)

284 
	#LUA_COMPAT_MATHLIB


	)

289 
	#LUA_COMPAT_BITLIB


	)

294 
	#LUA_COMPAT_IPAIRS


	)

301 
	#LUA_COMPAT_APIINTCASTS


	)

315 #i‡
	`deföed
(
LUA_COMPAT_5_1
)

321 
	#LUA_COMPAT_UNPACK


	)

327 
	#LUA_COMPAT_LOADERS


	)

333 
	#lua_˝ˇŒ
(
L
,
f
,
u
) \

334 (
	`lua_pushcfun˘i⁄
(
L
, (
f
)), \

335 
	`lua_pushlightu£rd©a
(
L
,(
u
)), \

336 
	`lua_pˇŒ
(
L
,1,0,0))

	)

343 
	#LUA_COMPAT_LOG10


	)

349 
	#LUA_COMPAT_LOADSTRING


	)

354 
	#LUA_COMPAT_MAXN


	)

361 
	#lua_°æí
(
L
,
i
Ë
	`lua_øwÀn
(L, (i))

	)

363 
	#lua_objÀn
(
L
,
i
Ë
	`lua_øwÀn
(L, (i))

	)

365 
	#lua_equÆ
(
L
,
idx1
,
idx2
Ë
	`lua_com∑ª
(L,(idx1),(idx2),
LUA_OPEQ
)

	)

366 
	#lua_Às°h™
(
L
,
idx1
,
idx2
Ë
	`lua_com∑ª
(L,(idx1),(idx2),
LUA_OPLT
)

	)

372 
	#LUA_COMPAT_MODULE


	)

403 #i‡
	`deföed
(
LUA_REAL_FLOAT
)

405 
	#LUA_NUMBER
 

	)

407 
	#LUAI_UACNUMBER
 

	)

409 
	#LUA_NUMBER_FRMLEN
 ""

	)

410 
	#LUA_NUMBER_FMT
 "%.7g"

	)

412 
	#l_m©h›
(
›
Ë›##
f


	)

414 
	#lua_°r2numbî
(
s
,
p
Ë
	`°πof
((s), (p))

	)

417 #ñi‡
	`deföed
(
LUA_REAL_LONGDOUBLE
)

419 
	#LUA_NUMBER
 

	)

421 
	#LUAI_UACNUMBER
 

	)

423 
	#LUA_NUMBER_FRMLEN
 "L"

	)

424 
	#LUA_NUMBER_FMT
 "%.19Lg"

	)

426 
	#l_m©h›
(
›
Ë›##
l


	)

428 
	#lua_°r2numbî
(
s
,
p
Ë
	`°πﬁd
((s), (p))

	)

430 #ñi‡
	`deföed
(
LUA_REAL_DOUBLE
)

432 
	#LUA_NUMBER
 

	)

434 
	#LUAI_UACNUMBER
 

	)

436 
	#LUA_NUMBER_FRMLEN
 ""

	)

437 
	#LUA_NUMBER_FMT
 "%.14g"

	)

439 
	#l_m©h›
(
›
Ë
	)
op

441 
	#lua_°r2numbî
(
s
,
p
Ë
	`°πod
((s), (p))

	)

450 
	#l_Êo‹
(
x
Ë(
	`l_m©h›
(
Êo‹
)(x))

	)

452 
	#lua_numbî2°r
(
s
,
n
Ë
	`•rötf
((s), 
LUA_NUMBER_FMT
, (n))

	)

463 
	#lua_numbîtoöãgî
(
n
,
p
) \

464 ((
n
Ë>(
LUA_NUMBER
)(
LUA_MININTEGER
) && \

465 (
n
Ë< -(
LUA_NUMBER
)(
LUA_MININTEGER
) && \

466 (*(
p
Ë(
LUA_INTEGER
)(
n
), 1))

	)

475 #i‡
	`deföed
(
lobje˘_c
Ë|| deföed(
lvm_c
)

476 
	~<m©h.h
>

479 
	#luai_numidiv
(
L
,
a
,
b
Ë(()L, 
	`l_m©h›
(
Êo‹
)(
	`luai_numdiv
(L,a,b)))

	)

488 
	#luai_nummod
(
L
,
a
,
b
,
m
) \

489 { (
m
Ë
	`l_m©h›
(
fmod
)(
a
,
b
); i‡((m)*(bË< 0Ë(mË+(b); 
	}

	)
}

492 
	#luai_numpow
(
L
,
a
,
b
Ë(()L, 
	`l_m©h›
(
pow
)◊,b))

	)

497 #i‡
deföed
(
LUA_CORE
)

498 
	#luai_numadd
(
L
,
a
,
b
Ë(◊)+(b))

	)

499 
	#luai_numsub
(
L
,
a
,
b
Ë(◊)-(b))

	)

500 
	#luai_nummul
(
L
,
a
,
b
Ë(◊)*(b))

	)

501 
	#luai_numdiv
(
L
,
a
,
b
Ë(◊)/(b))

	)

502 
	#luai_numunm
(
L
,
a
Ë(-◊))

	)

503 
	#luai_numeq
(
a
,
b
Ë(◊)==(b))

	)

504 
	#luai_num…
(
a
,
b
Ë(◊)<(b))

	)

505 
	#luai_numÀ
(
a
,
b
Ë(◊)<=(b))

	)

506 
	#luai_numi¢™
(
a
Ë(!
	`luai_numeq
(◊), (a)))

	)

527 
	#LUA_INTEGER_FMT
 "%" 
LUA_INTEGER_FRMLEN
 "d"

	)

528 
	#lua_öãgî2°r
(
s
,
n
Ë
	`•rötf
((s), 
LUA_INTEGER_FMT
, (n))

	)

530 
	#LUAI_UACINT
 
LUA_INTEGER


	)

536 
	#LUA_UNSIGNED
 
LUAI_UACINT


	)

541 #i‡
deföed
(
LUA_INT_INT
)

543 
	#LUA_INTEGER
 

	)

544 
	#LUA_INTEGER_FRMLEN
 ""

	)

546 
	#LUA_MAXINTEGER
 
INT_MAX


	)

547 
	#LUA_MININTEGER
 
INT_MIN


	)

549 #ñi‡
deföed
(
LUA_INT_LONG
)

551 
	#LUA_INTEGER
 

	)

552 
	#LUA_INTEGER_FRMLEN
 "l"

	)

554 
	#LUA_MAXINTEGER
 
LONG_MAX


	)

555 
	#LUA_MININTEGER
 
LONG_MIN


	)

557 #ñi‡
deföed
(
LUA_INT_LONGLONG
)

559 #i‡
deföed
(
LLONG_MAX
)

562 
	#LUA_INTEGER
 

	)

563 
	#LUA_INTEGER_FRMLEN
 "Œ"

	)

565 
	#LUA_MAXINTEGER
 
LLONG_MAX


	)

566 
	#LUA_MININTEGER
 
LLONG_MIN


	)

568 #ñi‡
deföed
(
LUA_USE_WINDOWS
)

571 
	#LUA_INTEGER
 
__öt64


	)

572 
	#LUA_INTEGER_FRMLEN
 "I64"

	)

574 
	#LUA_MAXINTEGER
 
_I64_MAX


	)

575 
	#LUA_MININTEGER
 
_I64_MIN


	)

605 #i‡!
deföed
(
LUA_USE_C89
)

606 
	#lua_°rx2numbî
(
s
,
p
Ë
	`lua_°r2numbî
(s,p)

	)

615 #i‡!
deföed
(
LUA_USE_C89
Ë|| deföed(
LUA_USE_WINDOWS
)

616 
	#LUA_USE_AFORMAT


	)

626 #i‡
deföed
(
LUA_USE_C89
Ë|| (deföed(
HUGE_VAL
Ë&& !deföed(
HUGE_VALF
))

627 #unde‡
l_m©h›


628 #unde‡
lua_°r2numbî


629 
	#l_m©h›
(
›
Ë(
lua_Numbî
)›

	)

630 
	#lua_°r2numbî
(
s
,
p
Ë((
lua_Numbî
)
	`°πod
((s), (p)))

	)

640 
	#LUA_KCONTEXT
 
±rdiff_t


	)

642 #i‡!
deföed
(
LUA_USE_C89
Ë&& deföed(
__STDC_VERSION__
) && \

643 
__STDC_VERSION__
 >= 199901L

644 
	~<°döt.h
>

645 #i‡
deföed
 (
INTPTR_MAX
)

646 #unde‡
LUA_KCONTEXT


647 
	#LUA_KCONTEXT
 
öçå_t


	)

668 #i‡
LUAI_BITSINT
 >= 32

669 
	#LUAI_MAXSTACK
 1000000

	)

671 
	#LUAI_MAXSTACK
 15000

	)

675 
	#LUAI_FIRSTPSEUDOIDX
 (-
LUAI_MAXSTACK
 - 1000)

	)

683 
	#LUA_EXTRASPACE
 ((*))

	)

691 
	#LUA_IDSIZE
 60

	)

700 
	#LUAI_MAXSHORTLEN
 40

	)

707 
	#LUAL_BUFFERSIZE
 (()(0x80 * (*Ë* (
lua_I¡egî
)))

	)

717 
	#LUA_QL
(
x
Ë"'" x "'"

	)

718 
	#LUA_QS
 
	`LUA_QL
("%s")

	)

737 #i‡
deföed
(
LUA_LIB
Ë|| deföed(
lua_c
)

738 
	~<°dio.h
>

739 * 
_gë_°dout
(* 
L
);

740 
	#lua_put°rög
(
L
, 
s
Ë(
	`fwrôe
((s), (), 
	`°æí
(s), 
	`_gë_°dout
(L)), 
	`fÊush
(_gë_°dout(L)))

	)

741 
	#lua_wrôe°rög
(
_L
, 
s
,
l
Ë(
	`fwrôe
((s), (), (l), 
	`_gë_°dout
(_L)), 
	`fÊush
(_gë_°dout(
L
)))

	)

742 
	#lua_wrôñöe
(
_L
Ë(
	`lua_wrôe°rög
(_L, "\n", 1), 
	`fÊush
(
	`_gë_°dout
(_L)))

	)

749 * 
_gë_°dîr
(* 
L
);

750 
	#lua_wrôe°rögîr‹
(
_L
, 
s
, 
p
) \

751 (
	`Ârötf
(
	`_gë_°dîr
(
_L
), (
s
), (
p
)), 
	`fÊush
(_gë_°dîr(_L)))

	)

	@lib/archive/lua-5.3.0/src/lualib.h

8 #i‚de‡
luÆib_h


9 
	#luÆib_h


	)

11 
	~"lua.h
"

15 
LUAMOD_API
 (
lua›í_ba£
Ë(
lua_Sèã
 *
L
);

17 
	#LUA_COLIBNAME
 "c‹outöe"

	)

18 
LUAMOD_API
 (
lua›í_c‹outöe
Ë(
lua_Sèã
 *
L
);

20 
	#LUA_TABLIBNAME
 "èbÀ"

	)

21 
LUAMOD_API
 (
lua›í_èbÀ
Ë(
lua_Sèã
 *
L
);

23 
	#LUA_IOLIBNAME
 "io"

	)

24 
LUAMOD_API
 (
lua›í_io
Ë(
lua_Sèã
 *
L
);

26 
	#LUA_OSLIBNAME
 "os"

	)

27 
LUAMOD_API
 (
lua›í_os
Ë(
lua_Sèã
 *
L
);

29 
	#LUA_STRLIBNAME
 "°rög"

	)

30 
LUAMOD_API
 (
lua›í_°rög
Ë(
lua_Sèã
 *
L
);

32 
	#LUA_UTF8LIBNAME
 "utf8"

	)

33 
LUAMOD_API
 (
lua›í_utf8
Ë(
lua_Sèã
 *
L
);

35 
	#LUA_BITLIBNAME
 "bô32"

	)

36 
LUAMOD_API
 (
lua›í_bô32
Ë(
lua_Sèã
 *
L
);

38 
	#LUA_MATHLIBNAME
 "m©h"

	)

39 
LUAMOD_API
 (
lua›í_m©h
Ë(
lua_Sèã
 *
L
);

41 
	#LUA_DBLIBNAME
 "debug"

	)

42 
LUAMOD_API
 (
lua›í_debug
Ë(
lua_Sèã
 *
L
);

44 
	#LUA_LOADLIBNAME
 "∑ckage"

	)

45 
LUAMOD_API
 (
lua›í_∑ckage
Ë(
lua_Sèã
 *
L
);

49 
LUALIB_API
 (
luaL_›ílibs
Ë(
lua_Sèã
 *
L
);

53 #i‡!
	`deföed
(
lua_as£π
)

54 
	#lua_as£π
(
x
Ë(()0)

	)

	@lib/archive/lua-5.3.0/src/lundump.c

7 
	#lundump_c


	)

8 
	#LUA_CORE


	)

10 
	~"Õªfix.h
"

13 
	~<°rög.h
>

15 
	~"lua.h
"

17 
	~"ldebug.h
"

18 
	~"ldo.h
"

19 
	~"lfunc.h
"

20 
	~"lmem.h
"

21 
	~"lobje˘.h
"

22 
	~"l°rög.h
"

23 
	~"lundump.h
"

24 
	~"lzio.h
"

27 #i‡!
deföed
(
luai_vîifycode
)

28 
	#luai_vîifycode
(
L
,
b
,
f
Ë

	)

33 
lua_Sèã
 *
	mL
;

34 
ZIO
 *
	mZ
;

35 
Mbuf„r
 *
	mb
;

36 c⁄° *
	m«me
;

37 } 
	tLﬂdSèã
;

40 
l_n‹ë
 
	$îr‹
(
LﬂdSèã
 *
S
, c⁄° *
why
) {

41 
	`luaO_pushf°rög
(
S
->
L
, "%s: %†¥ecompûed chunk", S->
«me
, 
why
);

42 
	`luaD_throw
(
S
->
L
, 
LUA_ERRSYNTAX
);

43 
	}
}

50 
	#LﬂdVe˘‹
(
S
,
b
,
n
Ë
	`LﬂdBlock
(S,b,“)*((b)[0]))

	)

52 
	$LﬂdBlock
 (
LﬂdSèã
 *
S
, *
b
, 
size_t
 
size
) {

53 i‡(
	`luaZ_ªad
(
S
->
Z
, 
b
, 
size
) != 0)

54 
	`îr‹
(
S
, "truncated");

55 
	}
}

58 
	#LﬂdV¨
(
S
,
x
Ë
	`LﬂdVe˘‹
(S,&x,1)

	)

61 
lu_byã
 
	$LﬂdByã
 (
LﬂdSèã
 *
S
) {

62 
lu_byã
 
x
;

63 
	`LﬂdV¨
(
S
, 
x
);

64  
x
;

65 
	}
}

68 
	$LﬂdI¡
 (
LﬂdSèã
 *
S
) {

69 
x
;

70 
	`LﬂdV¨
(
S
, 
x
);

71  
x
;

72 
	}
}

75 
lua_Numbî
 
	$LﬂdNumbî
 (
LﬂdSèã
 *
S
) {

76 
lua_Numbî
 
x
;

77 
	`LﬂdV¨
(
S
, 
x
);

78  
x
;

79 
	}
}

82 
lua_I¡egî
 
	$LﬂdI¡egî
 (
LﬂdSèã
 *
S
) {

83 
lua_I¡egî
 
x
;

84 
	`LﬂdV¨
(
S
, 
x
);

85  
x
;

86 
	}
}

89 
TSåög
 *
	$LﬂdSåög
 (
LﬂdSèã
 *
S
) {

90 
size_t
 
size
 = 
	`LﬂdByã
(
S
);

91 i‡(
size
 == 0xFF)

92 
	`LﬂdV¨
(
S
, 
size
);

93 i‡(
size
 == 0)

94  
NULL
;

96 *
s
 = 
	`luaZ_›í•a˚
(
S
->
L
, S->
b
, --
size
);

97 
	`LﬂdVe˘‹
(
S
, 
s
, 
size
);

98  
	`luaS_√wl°r
(
S
->
L
, 
s
, 
size
);

100 
	}
}

103 
	$LﬂdCode
 (
LﬂdSèã
 *
S
, 
PrŸo
 *
f
) {

104 
n
 = 
	`LﬂdI¡
(
S
);

105 
f
->
code
 = 
	`luaM_√wve˘‹
(
S
->
L
, 
n
, 
In°ru˘i⁄
);

106 
f
->
sizecode
 = 
n
;

107 
	`LﬂdVe˘‹
(
S
, 
f
->
code
, 
n
);

108 
	}
}

111 
LﬂdFun˘i⁄
(
LﬂdSèã
 *
S
, 
PrŸo
 *
f
, 
TSåög
 *
psour˚
);

114 
	$LﬂdC⁄°™ts
 (
LﬂdSèã
 *
S
, 
PrŸo
 *
f
) {

115 
i
;

116 
n
 = 
	`LﬂdI¡
(
S
);

117 
f
->
k
 = 
	`luaM_√wve˘‹
(
S
->
L
, 
n
, 
TVÆue
);

118 
f
->
sizek
 = 
n
;

119 
i
 = 0; i < 
n
; i++)

120 
	`£äûvÆue
(&
f
->
k
[
i
]);

121 
i
 = 0; i < 
n
; i++) {

122 
TVÆue
 *
o
 = &
f
->
k
[
i
];

123 
t
 = 
	`LﬂdByã
(
S
);

124 
t
) {

125 
LUA_TNIL
:

126 
	`£äûvÆue
(
o
);

128 
LUA_TBOOLEAN
:

129 
	`£tbvÆue
(
o
, 
	`LﬂdByã
(
S
));

131 
LUA_TNUMFLT
:

132 
	`£tÊtvÆue
(
o
, 
	`LﬂdNumbî
(
S
));

134 
LUA_TNUMINT
:

135 
	`£tivÆue
(
o
, 
	`LﬂdI¡egî
(
S
));

137 
LUA_TSHRSTR
:

138 
LUA_TLNGSTR
:

139 
	`£tsvÆue2n
(
S
->
L
, 
o
, 
	`LﬂdSåög
(S));

142 
	`lua_as£π
(0);

145 
	}
}

148 
	$LﬂdPrŸos
 (
LﬂdSèã
 *
S
, 
PrŸo
 *
f
) {

149 
i
;

150 
n
 = 
	`LﬂdI¡
(
S
);

151 
f
->
p
 = 
	`luaM_√wve˘‹
(
S
->
L
, 
n
, 
PrŸo
 *);

152 
f
->
sizï
 = 
n
;

153 
i
 = 0; i < 
n
; i++)

154 
f
->
p
[
i
] = 
NULL
;

155 
i
 = 0; i < 
n
; i++) {

156 
f
->
p
[
i
] = 
	`luaF_√w¥Ÿo
(
S
->
L
);

157 
	`LﬂdFun˘i⁄
(
S
, 
f
->
p
[
i
], f->
sour˚
);

159 
	}
}

162 
	$LﬂdUpvÆues
 (
LﬂdSèã
 *
S
, 
PrŸo
 *
f
) {

163 
i
, 
n
;

164 
n
 = 
	`LﬂdI¡
(
S
);

165 
f
->
upvÆues
 = 
	`luaM_√wve˘‹
(
S
->
L
, 
n
, 
UpvÆdesc
);

166 
f
->
sizeupvÆues
 = 
n
;

167 
i
 = 0; i < 
n
; i++)

168 
f
->
upvÆues
[
i
].
«me
 = 
NULL
;

169 
i
 = 0; i < 
n
; i++) {

170 
f
->
upvÆues
[
i
].
ö°ack
 = 
	`LﬂdByã
(
S
);

171 
f
->
upvÆues
[
i
].
idx
 = 
	`LﬂdByã
(
S
);

173 
	}
}

176 
	$LﬂdDebug
 (
LﬂdSèã
 *
S
, 
PrŸo
 *
f
) {

177 
i
, 
n
;

178 
n
 = 
	`LﬂdI¡
(
S
);

179 
f
->
löeöfo
 = 
	`luaM_√wve˘‹
(
S
->
L
, 
n
, );

180 
f
->
sizñöeöfo
 = 
n
;

181 
	`LﬂdVe˘‹
(
S
, 
f
->
löeöfo
, 
n
);

182 
n
 = 
	`LﬂdI¡
(
S
);

183 
f
->
locv¨s
 = 
	`luaM_√wve˘‹
(
S
->
L
, 
n
, 
LocV¨
);

184 
f
->
sizñocv¨s
 = 
n
;

185 
i
 = 0; i < 
n
; i++)

186 
f
->
locv¨s
[
i
].
v¨«me
 = 
NULL
;

187 
i
 = 0; i < 
n
; i++) {

188 
f
->
locv¨s
[
i
].
v¨«me
 = 
	`LﬂdSåög
(
S
);

189 
f
->
locv¨s
[
i
].
°¨çc
 = 
	`LﬂdI¡
(
S
);

190 
f
->
locv¨s
[
i
].
ídpc
 = 
	`LﬂdI¡
(
S
);

192 
n
 = 
	`LﬂdI¡
(
S
);

193 
i
 = 0; i < 
n
; i++)

194 
f
->
upvÆues
[
i
].
«me
 = 
	`LﬂdSåög
(
S
);

195 
	}
}

198 
	$LﬂdFun˘i⁄
 (
LﬂdSèã
 *
S
, 
PrŸo
 *
f
, 
TSåög
 *
psour˚
) {

199 
f
->
sour˚
 = 
	`LﬂdSåög
(
S
);

200 i‡(
f
->
sour˚
 =
NULL
)

201 
f
->
sour˚
 = 
psour˚
;

202 
f
->
löedeföed
 = 
	`LﬂdI¡
(
S
);

203 
f
->
œ°löedeföed
 = 
	`LﬂdI¡
(
S
);

204 
f
->
num∑øms
 = 
	`LﬂdByã
(
S
);

205 
f
->
is_v¨¨g
 = 
	`LﬂdByã
(
S
);

206 
f
->
max°acksize
 = 
	`LﬂdByã
(
S
);

207 
	`LﬂdCode
(
S
, 
f
);

208 
	`LﬂdC⁄°™ts
(
S
, 
f
);

209 
	`LﬂdUpvÆues
(
S
, 
f
);

210 
	`LﬂdPrŸos
(
S
, 
f
);

211 
	`LﬂdDebug
(
S
, 
f
);

212 
	}
}

215 
	$checklôîÆ
 (
LﬂdSèã
 *
S
, c⁄° *
s
, c⁄° *
msg
) {

216 
buff
[(
LUA_SIGNATURE
Ë+ (
LUAC_DATA
)];

217 
size_t
 
Àn
 = 
	`°æí
(
s
);

218 
	`LﬂdVe˘‹
(
S
, 
buff
, 
Àn
);

219 i‡(
	`memcmp
(
s
, 
buff
, 
Àn
) != 0)

220 
	`îr‹
(
S
, 
msg
);

221 
	}
}

224 
	$fchecksize
 (
LﬂdSèã
 *
S
, 
size_t
 
size
, c⁄° *
äame
) {

225 i‡(
	`LﬂdByã
(
S
Ë!
size
)

226 
	`îr‹
(
S
, 
	`luaO_pushf°rög
(S->
L
, "%†sizêmism©ch in", 
äame
));

227 
	}
}

230 
	#checksize
(
S
,
t
Ë
	`fchecksize
(S,—),#t)

	)

232 
	$checkHódî
 (
LﬂdSèã
 *
S
) {

233 
	`checklôîÆ
(
S
, 
LUA_SIGNATURE
 + 1, "notá");

234 i‡(
	`LﬂdByã
(
S
Ë!
LUAC_VERSION
)

235 
	`îr‹
(
S
, "version mismatch in");

236 i‡(
	`LﬂdByã
(
S
Ë!
LUAC_FORMAT
)

237 
	`îr‹
(
S
, "format mismatch in");

238 
	`checklôîÆ
(
S
, 
LUAC_DATA
, "corrupted");

239 
	`checksize
(
S
, );

240 
	`checksize
(
S
, 
size_t
);

241 
	`checksize
(
S
, 
In°ru˘i⁄
);

242 
	`checksize
(
S
, 
lua_I¡egî
);

243 
	`checksize
(
S
, 
lua_Numbî
);

244 i‡(
	`LﬂdI¡egî
(
S
Ë!
LUAC_INT
)

245 
	`îr‹
(
S
, "endianness mismatch in");

246 i‡(
	`LﬂdNumbî
(
S
Ë!
LUAC_NUM
)

247 
	`îr‹
(
S
, "float format mismatch in");

248 
	}
}

254 
LClosuª
 *
	$luaU_undump
(
lua_Sèã
 *
L
, 
ZIO
 *
Z
, 
Mbuf„r
 *
buff
,

255 c⁄° *
«me
) {

256 
LﬂdSèã
 
S
;

257 
LClosuª
 *
˛
;

258 i‡(*
«me
 == '@' || *name == '=')

259 
S
.
«me
 =Çame + 1;

260 i‡(*
«me
 =
LUA_SIGNATURE
[0])

261 
S
.
«me
 = "binary string";

263 
S
.
«me
 =Çame;

264 
S
.
L
 = L;

265 
S
.
Z
 = Z;

266 
S
.
b
 = 
buff
;

267 
	`checkHódî
(&
S
);

268 
˛
 = 
	`luaF_√wL˛osuª
(
L
, 
	`LﬂdByã
(&
S
));

269 
	`£t˛LvÆue
(
L
, L->
t›
, 
˛
);

270 
	`ö¸_t›
(
L
);

271 
˛
->
p
 = 
	`luaF_√w¥Ÿo
(
L
);

272 
	`LﬂdFun˘i⁄
(&
S
, 
˛
->
p
, 
NULL
);

273 
	`lua_as£π
(
˛
->
nupvÆues
 =˛->
p
->
sizeupvÆues
);

274 
	`luai_vîifycode
(
L
, 
buff
, 
˛
->
p
);

275  
˛
;

276 
	}
}

	@lib/archive/lua-5.3.0/src/lundump.h

7 #i‚de‡
lundump_h


8 
	#lundump_h


	)

10 
	~"Œimôs.h
"

11 
	~"lobje˘.h
"

12 
	~"lzio.h
"

16 
	#LUAC_DATA
 "\x19\x93\r\n\x1a\n"

	)

18 
	#LUAC_INT
 0x5678

	)

19 
	#LUAC_NUM
 
	`ˇ°_num
(370.5)

	)

21 
	#MYINT
(
s
Ë(s[0]-'0')

	)

22 
	#LUAC_VERSION
 (
	`MYINT
(
LUA_VERSION_MAJOR
)*16+MYINT(
LUA_VERSION_MINOR
))

	)

23 
	#LUAC_FORMAT
 0

	)

26 
LUAI_FUNC
 
LClosuª
* 
luaU_undump
 (
lua_Sèã
* 
L
, 
ZIO
* 
Z
, 
Mbuf„r
* 
buff
,

27 c⁄° * 
«me
);

30 
LUAI_FUNC
 
luaU_dump
 (
lua_Sèã
* 
L
, c⁄° 
PrŸo
* 
f
, 
lua_Wrôî
 
w
,

31 * 
d©a
, 
°rù
);

	@lib/archive/lua-5.3.0/src/lutf8lib.c

7 
	#lutf8lib_c


	)

8 
	#LUA_LIB


	)

10 
	~"Õªfix.h
"

13 
	~<as£π.h
>

14 
	~<°dlib.h
>

15 
	~<°rög.h
>

17 
	~"lua.h
"

19 
	~"œuxlib.h
"

20 
	~"luÆib.h
"

22 
	#MAXUNICODE
 0x10FFFF

	)

24 
	#isc⁄t
(
p
Ë((*’Ë& 0xC0Ë=0x80)

	)

29 
lua_I¡egî
 
	$u_po§ñ©
 (
lua_I¡egî
 
pos
, 
size_t
 
Àn
) {

30 i‡(
pos
 >= 0) Öos;

31 i‡(0u - (
size_t
)
pos
 > 
Àn
)  0;

32  (
lua_I¡egî
)
Àn
 + 
pos
 + 1;

33 
	}
}

39 c⁄° *
	$utf8_decode
 (c⁄° *
o
, *
vÆ
) {

40 
limôs
[] = {0xFF, 0x7F, 0x7FF, 0xFFFF};

41 c⁄° *
s
 = (c⁄° *)
o
;

42 
c
 = 
s
[0];

43 
ªs
 = 0;

44 i‡(
c
 < 0x80)

45 
ªs
 = 
c
;

47 
cou¡
 = 0;

48 
c
 & 0x40) {

49 
cc
 = 
s
[++
cou¡
];

50 i‡((
cc
 & 0xC0) != 0x80)

51  
NULL
;

52 
ªs
 = (ª†<< 6Ë| (
cc
 & 0x3F);

53 
c
 <<= 1;

55 
ªs
 |((
c
 & 0x7FË<< (
cou¡
 * 5));

56 i‡(
cou¡
 > 3 || 
ªs
 > 
MAXUNICODE
 ||Ñe†<
limôs
[count])

57  
NULL
;

58 
s
 +
cou¡
;

60 i‡(
vÆ
Ë*vÆ = 
ªs
;

61  (c⁄° *)
s
 + 1;

62 
	}
}

70 
	$utÊí
 (
lua_Sèã
 *
L
) {

71 
n
 = 0;

72 
size_t
 
Àn
;

73 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
Àn
);

74 
lua_I¡egî
 
posi
 = 
	`u_po§ñ©
(
	`luaL_›töãgî
(
L
, 2, 1), 
Àn
);

75 
lua_I¡egî
 
posj
 = 
	`u_po§ñ©
(
	`luaL_›töãgî
(
L
, 3, -1), 
Àn
);

76 
	`luaL_¨gcheck
(
L
, 1 <
posi
 && --posò<(
lua_I¡egî
)
Àn
, 2,

78 
	`luaL_¨gcheck
(
L
, --
posj
 < (
lua_I¡egî
)
Àn
, 3,

80 
posi
 <
posj
) {

81 c⁄° *
s1
 = 
	`utf8_decode
(
s
 + 
posi
, 
NULL
);

82 i‡(
s1
 =
NULL
) {

83 
	`lua_pushnû
(
L
);

84 
	`lua_pushöãgî
(
L
, 
posi
 + 1);

87 
posi
 = 
s1
 - 
s
;

88 
n
++;

90 
	`lua_pushöãgî
(
L
, 
n
);

92 
	}
}

99 
	$codïoöt
 (
lua_Sèã
 *
L
) {

100 
size_t
 
Àn
;

101 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
Àn
);

102 
lua_I¡egî
 
posi
 = 
	`u_po§ñ©
(
	`luaL_›töãgî
(
L
, 2, 1), 
Àn
);

103 
lua_I¡egî
 
po£
 = 
	`u_po§ñ©
(
	`luaL_›töãgî
(
L
, 3, 
posi
), 
Àn
);

104 
n
;

105 c⁄° *
£
;

106 
	`luaL_¨gcheck
(
L
, 
posi
 >= 1, 2, "out ofÑange");

107 
	`luaL_¨gcheck
(
L
, 
po£
 <(
lua_I¡egî
)
Àn
, 3, "out ofÑange");

108 i‡(
posi
 > 
po£
)  0;

109 
n
 = ()(
po£
 - 
posi
 + 1);

110 i‡(
posi
 + 
n
 <
po£
)

111  
	`luaL_îr‹
(
L
, "string sliceÅooÜong");

112 
	`luaL_check°ack
(
L
, 
n
, "string sliceÅooÜong");

113 
n
 = 0;

114 
£
 = 
s
 + 
po£
;

115 
s
 +
posi
 - 1; s < 
£
;) {

116 
code
;

117 
s
 = 
	`utf8_decode
(s, &
code
);

118 i‡(
s
 =
NULL
)

119  
	`luaL_îr‹
(
L
, "invalid UTF-8 code");

120 
	`lua_pushöãgî
(
L
, 
code
);

121 
n
++;

123  
n
;

124 
	}
}

127 
	$pushutfch¨
 (
lua_Sèã
 *
L
, 
¨g
) {

128 
lua_I¡egî
 
code
 = 
	`luaL_checköãgî
(
L
, 
¨g
);

129 
	`luaL_¨gcheck
(
L
, 0 <
code
 && codê<
MAXUNICODE
, 
¨g
, "value out ofÑange");

130 
	`lua_pushf°rög
(
L
, "%U", ()
code
);

131 
	}
}

137 
	$utfch¨
 (
lua_Sèã
 *
L
) {

138 
n
 = 
	`lua_gët›
(
L
);

139 i‡(
n
 == 1)

140 
	`pushutfch¨
(
L
, 1);

142 
i
;

143 
luaL_Buf„r
 
b
;

144 
	`luaL_bufföô
(
L
, &
b
);

145 
i
 = 1; i <
n
; i++) {

146 
	`pushutfch¨
(
L
, 
i
);

147 
	`luaL_addvÆue
(&
b
);

149 
	`luaL_pushªsu…
(&
b
);

152 
	}
}

159 
	$byãoff£t
 (
lua_Sèã
 *
L
) {

160 
size_t
 
Àn
;

161 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
Àn
);

162 
lua_I¡egî
 
n
 = 
	`luaL_checköãgî
(
L
, 2);

163 
lua_I¡egî
 
posi
 = (
n
 >0Ë? 1 : 
Àn
 + 1;

164 
posi
 = 
	`u_po§ñ©
(
	`luaL_›töãgî
(
L
, 3,Öosi), 
Àn
);

165 
	`luaL_¨gcheck
(
L
, 1 <
posi
 && --posò<(
lua_I¡egî
)
Àn
, 3,

167 i‡(
n
 == 0) {

169 
posi
 > 0 && 
	`isc⁄t
(
s
 +Öosi))Öosi--;

172 i‡(
	`isc⁄t
(
s
 + 
posi
))

173 
	`luaL_îr‹
(
L
, "initialÖosition isá continuation byte");

174 i‡(
n
 < 0) {

175 
n
 < 0 && 
posi
 > 0) {

177 
posi
--;

178 } 
posi
 > 0 && 
	`isc⁄t
(
s
 +Öosi));

179 
n
++;

183 
n
--;

184 
n
 > 0 && 
posi
 < (
lua_I¡egî
)
Àn
) {

186 
posi
++;

187 } 
	`isc⁄t
(
s
 + 
posi
));

188 
n
--;

192 i‡(
n
 == 0)

193 
	`lua_pushöãgî
(
L
, 
posi
 + 1);

195 
	`lua_pushnû
(
L
);

197 
	}
}

200 
	$ôî_aux
 (
lua_Sèã
 *
L
) {

201 
size_t
 
Àn
;

202 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
Àn
);

203 
lua_I¡egî
 
n
 = 
	`lua_toöãgî
(
L
, 2) - 1;

204 i‡(
n
 < 0)

205 
n
 = 0;

206 i‡(
n
 < (
lua_I¡egî
)
Àn
) {

207 
n
++;

208 
	`isc⁄t
(
s
 + 
n
))Ç++;

210 i‡(
n
 >(
lua_I¡egî
)
Àn
)

213 
code
;

214 c⁄° *
√xt
 = 
	`utf8_decode
(
s
 + 
n
, &
code
);

215 i‡(
√xt
 =
NULL
 || 
	`isc⁄t
(next))

216  
	`luaL_îr‹
(
L
, "invalid UTF-8 code");

217 
	`lua_pushöãgî
(
L
, 
n
 + 1);

218 
	`lua_pushöãgî
(
L
, 
code
);

221 
	}
}

224 
	$ôî_codes
 (
lua_Sèã
 *
L
) {

225 
	`luaL_check°rög
(
L
, 1);

226 
	`lua_pushcfun˘i⁄
(
L
, 
ôî_aux
);

227 
	`lua_pushvÆue
(
L
, 1);

228 
	`lua_pushöãgî
(
L
, 0);

230 
	}
}

234 
	#UTF8PATT
 "[\0-\x7F\xC2-\xF4][\x80-\xBF]*"

	)

237 
luaL_Reg
 
	gfuncs
[] = {

238 {"off£t", 
byãoff£t
},

239 {"codïoöt", 
codïoöt
},

240 {"ch¨", 
utfch¨
},

241 {"Àn", 
utÊí
},

242 {"codes", 
ôî_codes
},

244 {"ch¨∑âîn", 
NULL
},

245 {
NULL
, NULL}

249 
LUAMOD_API
 
	$lua›í_utf8
 (
lua_Sèã
 *
L
) {

250 
	`luaL_√wlib
(
L
, 
funcs
);

251 
	`lua_pushlôîÆ
(
L
, 
UTF8PATT
);

252 
	`lua_£tfõld
(
L
, -2, "charpattern");

254 
	}
}

	@lib/archive/lua-5.3.0/src/lvm.c

7 
	#lvm_c


	)

8 
	#LUA_CORE


	)

10 
	~"Õªfix.h
"

13 
	~<limôs.h
>

14 
	~<°dio.h
>

15 
	~<°dlib.h
>

16 
	~<°rög.h
>

18 
	~"lua.h
"

20 
	~"ldebug.h
"

21 
	~"ldo.h
"

22 
	~"lfunc.h
"

23 
	~"lgc.h
"

24 
	~"lobje˘.h
"

25 
	~"l›codes.h
"

26 
	~"l°©e.h
"

27 
	~"l°rög.h
"

28 
	~"…abÀ.h
"

29 
	~"…m.h
"

30 
	~"lvm.h
"

38 #i‡!
deföed
(
LUA_FLOORN2I
)

39 
	#LUA_FLOORN2I
 0

	)

44 
	#MAXTAGLOOP
 2000

	)

51 
	$toÊﬂt
 (c⁄° 
TVÆue
 *
obj
, 
lua_Numbî
 *
n
) {

52 i‡(
	`âisÊﬂt
(
obj
)Ë*
n
 = 
	`ÊtvÆue
(obj);

53 i‡(
	`âisöãgî
(
obj
)) {

54 vﬁ©ûê
lua_Numbî
 
x
 = 
	`ˇ°_num
(
	`ivÆue
(
obj
));

55 *
n
 = 
x
;

58 *
n
 = 0;

62 
	}
}

69 
	$luaV_t⁄umbî_
 (c⁄° 
TVÆue
 *
obj
, 
lua_Numbî
 *
n
) {

70 
TVÆue
 
v
;

71 i‡(
	`âisöãgî
(
obj
)) {

72 *
n
 = 
	`ˇ°_num
(
	`ivÆue
(
obj
));

75 i‡(
	`cvt2num
(
obj
) &&

76 
	`luaO_°r2num
(
	`svÆue
(
obj
), &
v
Ë=
	`tsvÆue
(obj)->
Àn
 + 1) {

77 *
n
 = 
	`nvÆue
(&
v
);

82 
	}
}

91 
	$toöãgî_aux
 (c⁄° 
TVÆue
 *
obj
, 
lua_I¡egî
 *
p
, 
mode
) {

92 
TVÆue
 
v
;

93 
agaö
:

94 i‡(
	`âisÊﬂt
(
obj
)) {

95 
lua_Numbî
 
n
 = 
	`ÊtvÆue
(
obj
);

96 
lua_Numbî
 
f
 = 
	`l_Êo‹
(
n
);

97 i‡(
n
 !
f
) {

98 i‡(
mode
 == 0)  0;

99 i‡(
mode
 > 1)

100 
f
 += 1;

102  
	`lua_numbîtoöãgî
(
f
, 
p
);

104 i‡(
	`âisöãgî
(
obj
)) {

105 *
p
 = 
	`ivÆue
(
obj
);

108 i‡(
	`cvt2num
(
obj
) &&

109 
	`luaO_°r2num
(
	`svÆue
(
obj
), &
v
Ë=
	`tsvÆue
(obj)->
Àn
 + 1) {

110 
obj
 = &
v
;

111 
agaö
;

114 
	}
}

120 
	$luaV_toöãgî_
 (c⁄° 
TVÆue
 *
obj
, 
lua_I¡egî
 *
p
) {

121  
	`toöãgî_aux
(
obj
, 
p
, 
LUA_FLOORN2I
);

122 
	}
}

140 
	$f‹limô
 (c⁄° 
TVÆue
 *
obj
, 
lua_I¡egî
 *
p
,Üua_I¡egî 
°ï
,

141 *
°›now
) {

142 *
°›now
 = 0;

143 i‡(!
	`toöãgî_aux
(
obj
, 
p
, (
°ï
 < 0 ? 2 : 1))) {

144 
lua_Numbî
 
n
;

145 i‡(!
	`t⁄umbî
(
obj
, &
n
))

147 i‡(
n
 > 0) {

148 *
p
 = 
LUA_MAXINTEGER
;

149 i‡(
°ï
 < 0Ë*
°›now
 = 1;

152 *
p
 = 
LUA_MININTEGER
;

153 i‡(
°ï
 >0Ë*
°›now
 = 1;

157 
	}
}

164 
	$luaV_gëèbÀ
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
t
, TVÆuê*
key
, 
StkId
 
vÆ
) {

165 
lo›
;

166 
lo›
 = 0;Üo› < 
MAXTAGLOOP
;Üoop++) {

167 c⁄° 
TVÆue
 *
tm
;

168 i‡(
	`âi°abÀ
(
t
)) {

169 
TabÀ
 *
h
 = 
	`hvÆue
(
t
);

170 c⁄° 
TVÆue
 *
ªs
 = 
	`luaH_gë
(
h
, 
key
);

171 i‡(!
	`âi¢û
(
ªs
) ||

172 (
tm
 = 
	`Á°tm
(
L
, 
h
->
më©abÀ
, 
TM_INDEX
)Ë=
NULL
) {

173 
	`£tobj2s
(
L
, 
vÆ
, 
ªs
);

178 i‡(
	`âi¢û
(
tm
 = 
	`luaT_gëtmbyobj
(
L
, 
t
, 
TM_INDEX
)))

179 
	`luaG_ty≥îr‹
(
L
, 
t
, "index");

180 i‡(
	`âisfun˘i⁄
(
tm
)) {

181 
	`luaT_ˇŒTM
(
L
, 
tm
, 
t
, 
key
, 
vÆ
, 1);

184 
t
 = 
tm
;

186 
	`luaG_ru√º‹
(
L
, "gettable chainÅooÜong;ÖossibleÜoop");

187 
	}
}

194 
	$luaV_£âabÀ
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
t
, TVÆuê*
key
, 
StkId
 
vÆ
) {

195 
lo›
;

196 
lo›
 = 0;Üo› < 
MAXTAGLOOP
;Üoop++) {

197 c⁄° 
TVÆue
 *
tm
;

198 i‡(
	`âi°abÀ
(
t
)) {

199 
TabÀ
 *
h
 = 
	`hvÆue
(
t
);

200 
TVÆue
 *
ﬁdvÆ
 = 
	`ˇ°
(TVÆuê*, 
	`luaH_gë
(
h
, 
key
));

203 i‡(!
	`âi¢û
(
ﬁdvÆ
) ||

205 ((
tm
 = 
	`Á°tm
(
L
, 
h
->
më©abÀ
, 
TM_NEWINDEX
)Ë=
NULL
 &&

207 (
ﬁdvÆ
 !
luaO_nûobje˘
 ||

210 (
ﬁdvÆ
 = 
	`luaH_√wkey
(
L
, 
h
, 
key
), 1)))) {

212 
	`£tobj2t
(
L
, 
ﬁdvÆ
, 
vÆ
);

213 
	`övÆid©eTMˇche
(
h
);

214 
	`luaC_b¨rõrback
(
L
, 
h
, 
vÆ
);

220 i‡(
	`âi¢û
(
tm
 = 
	`luaT_gëtmbyobj
(
L
, 
t
, 
TM_NEWINDEX
)))

221 
	`luaG_ty≥îr‹
(
L
, 
t
, "index");

223 i‡(
	`âisfun˘i⁄
(
tm
)) {

224 
	`luaT_ˇŒTM
(
L
, 
tm
, 
t
, 
key
, 
vÆ
, 0);

227 
t
 = 
tm
;

229 
	`luaG_ru√º‹
(
L
, "settable chainÅooÜong;ÖossibleÜoop");

230 
	}
}

240 
	$l_°rcmp
 (c⁄° 
TSåög
 *
ls
, c⁄° TSåög *
rs
) {

241 c⁄° *
l
 = 
	`gë°r
(
ls
);

242 
size_t
 
Œ
 = 
ls
->
Àn
;

243 c⁄° *
r
 = 
	`gë°r
(
rs
);

244 
size_t
 
Ã
 = 
rs
->
Àn
;

246 
ãmp
 = 
	`°rcﬁl
(
l
, 
r
);

247 i‡(
ãmp
 != 0)

248  
ãmp
;

250 
size_t
 
Àn
 = 
	`°æí
(
l
);

251 i‡(
Àn
 =
Ã
)

252  (
Àn
 =
Œ
) ? 0 : 1;

253 i‡(
Àn
 =
Œ
)

256 
Àn
++;

257 
l
 +
Àn
; 
Œ
 -Àn; 
r
 +Àn; 
Ã
 -=Üen;

260 
	}
}

266 
	$luaV_Às°h™
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
l
, c⁄° TVÆuê*
r
) {

267 
ªs
;

268 
lua_Numbî
 
∆
, 
ƒ
;

269 i‡(
	`âisöãgî
(
l
Ë&&Åtisöãgî(
r
))

270  (
	`ivÆue
(
l
Ë< ivÆue(
r
));

271 i‡(
	`toÊﬂt
(
l
, &
∆
Ë&&ÅoÊﬂt(
r
, &
ƒ
))

272  
	`luai_num…
(
∆
, 
ƒ
);

273 i‡(
	`âis°rög
(
l
Ë&&Åtis°rög(
r
))

274  
	`l_°rcmp
(
	`tsvÆue
(
l
),ÅsvÆue(
r
)) < 0;

275 i‡((
ªs
 = 
	`luaT_ˇŒ‹dîTM
(
L
, 
l
, 
r
, 
TM_LT
)) < 0)

276 
	`luaG_‹dîîr‹
(
L
, 
l
, 
r
);

277  
ªs
;

278 
	}
}

284 
	$luaV_Às£quÆ
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
l
, c⁄° TVÆuê*
r
) {

285 
ªs
;

286 
lua_Numbî
 
∆
, 
ƒ
;

287 i‡(
	`âisöãgî
(
l
Ë&&Åtisöãgî(
r
))

288  (
	`ivÆue
(
l
Ë<ivÆue(
r
));

289 i‡(
	`toÊﬂt
(
l
, &
∆
Ë&&ÅoÊﬂt(
r
, &
ƒ
))

290  
	`luai_numÀ
(
∆
, 
ƒ
);

291 i‡(
	`âis°rög
(
l
Ë&&Åtis°rög(
r
))

292  
	`l_°rcmp
(
	`tsvÆue
(
l
),ÅsvÆue(
r
)) <= 0;

293 i‡((
ªs
 = 
	`luaT_ˇŒ‹dîTM
(
L
, 
l
, 
r
, 
TM_LE
)) >= 0)

294  
ªs
;

295 i‡((
ªs
 = 
	`luaT_ˇŒ‹dîTM
(
L
, 
r
, 
l
, 
TM_LT
)) < 0)

296 
	`luaG_‹dîîr‹
(
L
, 
l
, 
r
);

297  !
ªs
;

298 
	}
}

305 
	$luaV_equÆobj
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
t1
, c⁄° TVÆuê*
t2
) {

306 c⁄° 
TVÆue
 *
tm
;

307 i‡(
	`ây≥
(
t1
Ë!ây≥(
t2
)) {

308 i‡(
	`ânov
(
t1
Ë!ânov(
t2
Ë||Åäov—1Ë!
LUA_TNUMBER
)

311 
lua_Numbî
 
n1
, 
n2
;

312 
	`lua_as£π
(
	`âi¢umbî
(
t1
Ë&&Åti¢umbî(
t2
));

313 
	`ˇ°_void
(
	`toÊﬂt
(
t1
, &
n1
)); ca°_void—oÊﬂt(
t2
, &
n2
));

314  
	`luai_numeq
(
n1
, 
n2
);

318 
	`ây≥
(
t1
)) {

319 
LUA_TNIL
:  1;

320 
LUA_TNUMINT
:  (
	`ivÆue
(
t1
Ë=ivÆue(
t2
));

321 
LUA_TNUMFLT
:  
	`luai_numeq
(
	`ÊtvÆue
(
t1
), f…vÆue(
t2
));

322 
LUA_TBOOLEAN
:  
	`bvÆue
(
t1
Ë=bvÆue(
t2
);

323 
LUA_TLIGHTUSERDATA
:  
	`pvÆue
(
t1
Ë=pvÆue(
t2
);

324 
LUA_TLCF
:  
	`fvÆue
(
t1
Ë=fvÆue(
t2
);

325 
LUA_TSHRSTR
:  
	`eqshr°r
(
	`tsvÆue
(
t1
),ÅsvÆue(
t2
));

326 
LUA_TLNGSTR
:  
	`luaS_eq g°r
(
	`tsvÆue
(
t1
),ÅsvÆue(
t2
));

327 
LUA_TUSERDATA
: {

328 i‡(
	`uvÆue
(
t1
Ë=uvÆue(
t2
))  1;

329 i‡(
L
 =
NULL
)  0;

330 
tm
 = 
	`Á°tm
(
L
, 
	`uvÆue
(
t1
)->
më©abÀ
, 
TM_EQ
);

331 i‡(
tm
 =
NULL
)

332 
tm
 = 
	`Á°tm
(
L
, 
	`uvÆue
(
t2
)->
më©abÀ
, 
TM_EQ
);

335 
LUA_TTABLE
: {

336 i‡(
	`hvÆue
(
t1
Ë=hvÆue(
t2
))  1;

337 i‡(
L
 =
NULL
)  0;

338 
tm
 = 
	`Á°tm
(
L
, 
	`hvÆue
(
t1
)->
më©abÀ
, 
TM_EQ
);

339 i‡(
tm
 =
NULL
)

340 
tm
 = 
	`Á°tm
(
L
, 
	`hvÆue
(
t2
)->
më©abÀ
, 
TM_EQ
);

344  
	`gcvÆue
(
t1
Ë=gcvÆue(
t2
);

346 i‡(
tm
 =
NULL
)

348 
	`luaT_ˇŒTM
(
L
, 
tm
, 
t1
, 
t2
, L->
t›
, 1);

349  !
	`l_isÁl£
(
L
->
t›
);

350 
	}
}

354 
	#to°rög
(
L
,
o
) \

355 (
	`âis°rög
(
o
Ë|| (
	`cvt2°r
(oË&& (
	`luaO_to°rög
(
L
, o), 1)))

	)

361 
	$luaV_c⁄ˇt
 (
lua_Sèã
 *
L
, 
tŸÆ
) {

362 
	`lua_as£π
(
tŸÆ
 >= 2);

364 
StkId
 
t›
 = 
L
->top;

365 
n
 = 2;

366 i‡(!(
	`âis°rög
(
t›
-2Ë|| 
	`cvt2°r
—›-2)Ë|| !
	`to°rög
(
L
,Åop-1))

367 
	`luaT_åyböTM
(
L
, 
t›
-2,Å›-1,Å›-2, 
TM_CONCAT
);

368 i‡(
	`tsvÆue
(
t›
-1)->
Àn
 == 0)

369 
	`ˇ°_void
(
	`to°rög
(
L
, 
t›
 - 2));

370 i‡(
	`âis°rög
(
t›
-2Ë&& 
	`tsvÆue
—›-2)->
Àn
 == 0) {

371 
	`£tobjs2s
(
L
, 
t›
 - 2,Åop - 1);

375 
size_t
 
é
 = 
	`tsvÆue
(
t›
-1)->
Àn
;

376 *
buf„r
;

377 
i
;

379 
i
 = 1; i < 
tŸÆ
 && 
	`to°rög
(
L
, 
t›
-i-1); i++) {

380 
size_t
 
l
 = 
	`tsvÆue
(
t›
-
i
-1)->
Àn
;

381 i‡(
l
 >(
MAX_SIZE
/()Ë- 
é
)

382 
	`luaG_ru√º‹
(
L
, "stringÜength overflow");

383 
é
 +
l
;

385 
buf„r
 = 
	`luaZ_›í•a˚
(
L
, &
	`G
(L)->
buff
, 
é
);

386 
é
 = 0;

387 
n
 = 
i
;

389 
size_t
 
l
 = 
	`tsvÆue
(
t›
-
i
)->
Àn
;

390 
	`mem˝y
(
buf„r
+
é
, 
	`svÆue
(
t›
-
i
), 
l
 * ());

391 
é
 +
l
;

392 } --
i
 > 0);

393 
	`£tsvÆue2s
(
L
, 
t›
-
n
, 
	`luaS_√wl°r
(L, 
buf„r
, 
é
));

395 
tŸÆ
 -
n
-1;

396 
L
->
t›
 -
n
-1;

397 } 
tŸÆ
 > 1);

398 
	}
}

404 
	$luaV_objÀn
 (
lua_Sèã
 *
L
, 
StkId
 
ø
, c⁄° 
TVÆue
 *
rb
) {

405 c⁄° 
TVÆue
 *
tm
;

406 
	`ânov
(
rb
)) {

407 
LUA_TTABLE
: {

408 
TabÀ
 *
h
 = 
	`hvÆue
(
rb
);

409 
tm
 = 
	`Á°tm
(
L
, 
h
->
më©abÀ
, 
TM_LEN
);

410 i‡(
tm
) ;

411 
	`£tivÆue
(
ø
, 
	`luaH_gën
(
h
));

414 
LUA_TSTRING
: {

415 
	`£tivÆue
(
ø
, 
	`tsvÆue
(
rb
)->
Àn
);

419 
tm
 = 
	`luaT_gëtmbyobj
(
L
, 
rb
, 
TM_LEN
);

420 i‡(
	`âi¢û
(
tm
))

421 
	`luaG_ty≥îr‹
(
L
, 
rb
, "getÜength of");

425 
	`luaT_ˇŒTM
(
L
, 
tm
, 
rb
,Ñb, 
ø
, 1);

426 
	}
}

435 
lua_I¡egî
 
	$luaV_div
 (
lua_Sèã
 *
L
, 
lua_I¡egî
 
m
,Üua_I¡egî 
n
) {

436 i‡(
	`l_ˇ°S2U
(
n
) + 1u <= 1u) {

437 i‡(
n
 == 0)

438 
	`luaG_ru√º‹
(
L
, "attemptÅo divide by zero");

439  
	`öt›
(-, 0, 
m
);

442 
lua_I¡egî
 
q
 = 
m
 / 
n
;

443 i‡((
m
 ^ 
n
) < 0 && m %Ç != 0)

444 
q
 -= 1;

445  
q
;

447 
	}
}

455 
lua_I¡egî
 
	$luaV_mod
 (
lua_Sèã
 *
L
, 
lua_I¡egî
 
m
,Üua_I¡egî 
n
) {

456 i‡(
	`l_ˇ°S2U
(
n
) + 1u <= 1u) {

457 i‡(
n
 == 0)

458 
	`luaG_ru√º‹
(
L
, "attemptÅoÖerform 'n%%0'");

462 
lua_I¡egî
 
r
 = 
m
 % 
n
;

463 i‡(
r
 !0 && (
m
 ^ 
n
) < 0)

464 
r
 +
n
;

465  
r
;

467 
	}
}

471 
	#NBITS
 
	`ˇ°_öt
((
lua_I¡egî
Ë* 
CHAR_BIT
)

	)

476 
lua_I¡egî
 
	$luaV_shi·l
 (
lua_I¡egî
 
x
,Üua_I¡egî 
y
) {

477 i‡(
y
 < 0) {

478 i‡(
y
 <-
NBITS
)  0;

479  
	`öt›
(>>, 
x
, -
y
);

482 i‡(
y
 >
NBITS
)  0;

483  
	`öt›
(<<, 
x
, 
y
);

485 
	}
}

493 
LClosuª
 *
	$gëˇched
 (
PrŸo
 *
p
, 
UpVÆ
 **
ícup
, 
StkId
 
ba£
) {

494 
LClosuª
 *
c
 = 
p
->
ˇche
;

495 i‡(
c
 !
NULL
) {

496 
nup
 = 
p
->
sizeupvÆues
;

497 
UpvÆdesc
 *
uv
 = 
p
->
upvÆues
;

498 
i
;

499 
i
 = 0; i < 
nup
; i++) {

500 
TVÆue
 *
v
 = 
uv
[
i
].
ö°ack
 ? 
ba£
 + uv[i].
idx
 : 
ícup
[uv[i].idx]->v;

501 i‡(
c
->
upvÆs
[
i
]->
v
 != v)

502  
NULL
;

505  
c
;

506 
	}
}

515 
	$push˛osuª
 (
lua_Sèã
 *
L
, 
PrŸo
 *
p
, 
UpVÆ
 **
ícup
, 
StkId
 
ba£
,

516 
StkId
 
ø
) {

517 
nup
 = 
p
->
sizeupvÆues
;

518 
UpvÆdesc
 *
uv
 = 
p
->
upvÆues
;

519 
i
;

520 
LClosuª
 *
n˛
 = 
	`luaF_√wL˛osuª
(
L
, 
nup
);

521 
n˛
->
p
 =Ö;

522 
	`£t˛LvÆue
(
L
, 
ø
, 
n˛
);

523 
i
 = 0; i < 
nup
; i++) {

524 i‡(
uv
[
i
].
ö°ack
)

525 
n˛
->
upvÆs
[
i
] = 
	`luaF_födupvÆ
(
L
, 
ba£
 + 
uv
[i].
idx
);

527 
n˛
->
upvÆs
[
i
] = 
ícup
[
uv
[i].
idx
];

528 
n˛
->
upvÆs
[
i
]->
ªfcou¡
++;

531 i‡(!
	`isbœck
(
p
))

532 
p
->
ˇche
 = 
n˛
;

533 
	}
}

539 
	$luaV_föishOp
 (
lua_Sèã
 *
L
) {

540 
CÆlInfo
 *
ci
 = 
L
->ci;

541 
StkId
 
ba£
 = 
ci
->
u
.
l
.base;

542 
In°ru˘i⁄
 
ö°
 = *(
ci
->
u
.
l
.
ßvedpc
 - 1);

543 
OpCode
 
›
 = 
	`GET_OPCODE
(
ö°
);

544 
›
) {

545 
OP_ADD
: 
OP_SUB
: 
OP_MUL
: 
OP_DIV
: 
OP_IDIV
:

546 
OP_BAND
: 
OP_BOR
: 
OP_BXOR
: 
OP_SHL
: 
OP_SHR
:

547 
OP_MOD
: 
OP_POW
:

548 
OP_UNM
: 
OP_BNOT
: 
OP_LEN
:

549 
OP_GETTABUP
: 
OP_GETTABLE
: 
OP_SELF
: {

550 
	`£tobjs2s
(
L
, 
ba£
 + 
	`GETARG_A
(
ö°
), --L->
t›
);

553 
OP_LE
: 
OP_LT
: 
OP_EQ
: {

554 
ªs
 = !
	`l_isÁl£
(
L
->
t›
 - 1);

555 
L
->
t›
--;

557 
	`lua_as£π
(!
	`ISK
(
	`GETARG_B
(
ö°
)));

558 i‡(
›
 =
OP_LE
 &&

559 
	`âi¢û
(
	`luaT_gëtmbyobj
(
L
, 
ba£
 + 
	`GETARG_B
(
ö°
), 
TM_LE
)))

560 
ªs
 = !res;

561 
	`lua_as£π
(
	`GET_OPCODE
(*
ci
->
u
.
l
.
ßvedpc
Ë=
OP_JMP
);

562 i‡(
ªs
 !
	`GETARG_A
(
ö°
))

563 
ci
->
u
.
l
.
ßvedpc
++;

566 
OP_CONCAT
: {

567 
StkId
 
t›
 = 
L
->top - 1;

568 
b
 = 
	`GETARG_B
(
ö°
);

569 
tŸÆ
 = 
	`ˇ°_öt
(
t›
 - 1 - (
ba£
 + 
b
));

570 
	`£tobj2s
(
L
, 
t›
 - 2,Åop);

571 i‡(
tŸÆ
 > 1) {

572 
L
->
t›
 =Åop - 1;

573 
	`luaV_c⁄ˇt
(
L
, 
tŸÆ
);

576 
	`£tobj2s
(
L
, 
ci
->
u
.
l
.
ba£
 + 
	`GETARG_A
(
ö°
), L->
t›
 - 1);

577 
L
->
t›
 = 
ci
->top;

580 
OP_TFORCALL
: {

581 
	`lua_as£π
(
	`GET_OPCODE
(*
ci
->
u
.
l
.
ßvedpc
Ë=
OP_TFORLOOP
);

582 
L
->
t›
 = 
ci
->top;

585 
OP_CALL
: {

586 i‡(
	`GETARG_C
(
ö°
) - 1 >= 0)

587 
L
->
t›
 = 
ci
->top;

590 
OP_TAILCALL
: 
OP_SETTABUP
: 
OP_SETTABLE
:

592 : 
	`lua_as£π
(0);

594 
	}
}

610 #i‡!
deföed
 
luai_ru¡imecheck


611 
	#luai_ru¡imecheck
(
L
, 
c
Ë

	)

615 
	#RA
(
i
Ë(
ba£
+
	`GETARG_A
(i))

	)

617 
	#RB
(
i
Ë
	`check_exp
(
	`gëBMode
(
	`GET_OPCODE
(i)Ë=
OpArgR
, 
ba£
+
	`GETARG_B
(i))

	)

618 
	#RC
(
i
Ë
	`check_exp
(
	`gëCMode
(
	`GET_OPCODE
(i)Ë=
OpArgR
, 
ba£
+
	`GETARG_C
(i))

	)

619 
	#RKB
(
i
Ë
	`check_exp
(
	`gëBMode
(
	`GET_OPCODE
(i)Ë=
OpArgK
, \

620 
	`ISK
(
	`GETARG_B
(
i
)Ë? 
k
+
	`INDEXK
(GETARG_B(i)Ë: 
ba£
+GETARG_B(i))

	)

621 
	#RKC
(
i
Ë
	`check_exp
(
	`gëCMode
(
	`GET_OPCODE
(i)Ë=
OpArgK
, \

622 
	`ISK
(
	`GETARG_C
(
i
)Ë? 
k
+
	`INDEXK
(GETARG_C(i)Ë: 
ba£
+GETARG_C(i))

	)

623 
	#KBx
(
i
) \

624 (
k
 + (
	`GETARG_Bx
(
i
Ë!0 ? GETARG_Bx(iË- 1 : 
	`GETARG_Ax
(*
ci
->
u
.
l
.
ßvedpc
++)))

	)

628 
	#dojump
(
ci
,
i
,
e
) \

629 { 
a
 = 
	`GETARG_A
(
i
); \

630 i‡(
a
 > 0Ë
	`luaF_˛o£
(
L
, 
ci
->
u
.
l
.
ba£
 +á - 1); \

631 
ci
->
u
.
l
.
ßvedpc
 +
	`GETARG_sBx
(
i
Ë+ 
e
; }

	)

634 
	#d⁄extjump
(
ci
Ë{ 
i
 = *ci->
u
.
l
.
ßvedpc
; 
	`dojump
(ci, i, 1); }

	)

637 
	#PrŸe˘
(
x
Ë{ {x;}; 
ba£
 = 
ci
->
u
.
l
.ba£; }

	)

639 
	#checkGC
(
L
,
c
) \

640 
	`PrŸe˘
–
	`luaC_c⁄dGC
(
L
,{L->
t›
 = (
c
); \

641 
	`luaC_°ï
(
L
); \

642 
L
->
t›
 = 
ci
->top;}) \

643 
	`luai_thªadyõld
(
L
); )

	)

646 
	#vmdi•©ch
(
o
Ëo)

	)

647 
	#vmˇ£
(
l
Ël:

	)

648 
	#vmbªak
 

	)

650 
	$luaV_execuã
 (
lua_Sèã
 *
L
) {

651 
CÆlInfo
 *
ci
 = 
L
->ci;

652 
LClosuª
 *
˛
;

653 
TVÆue
 *
k
;

654 
StkId
 
ba£
;

655 
√w‰ame
:

656 
	`lua_as£π
(
ci
 =
L
->ci);

657 
˛
 = 
	`˛LvÆue
(
ci
->
func
);

658 
k
 = 
˛
->
p
->k;

659 
ba£
 = 
ci
->
u
.
l
.base;

662 
In°ru˘i⁄
 
i
 = *(
ci
->
u
.
l
.
ßvedpc
++);

663 
StkId
 
ø
;

664 i‡((
L
->
hookmask
 & (
LUA_MASKLINE
 | 
LUA_MASKCOUNT
)) &&

665 (--
L
->
hookcou¡
 =0 || L->
hookmask
 & 
LUA_MASKLINE
)) {

666 
	`PrŸe˘
(
	`luaG_åa˚exec
(
L
));

669 
ø
 = 
	`RA
(
i
);

670 
	`lua_as£π
(
ba£
 =
ci
->
u
.
l
.base);

671 
	`lua_as£π
(
ba£
 <
L
->
t›
 && L->t› < L->
°ack
 + L->
°acksize
);

672 
	`vmdi•©ch
 (
	`GET_OPCODE
(
i
)) {

673 
	`vmˇ£
(
OP_MOVE
) {

674 
	`£tobjs2s
(
L
, 
ø
, 
	`RB
(
i
));

675 
vmbªak
;

677 
	`vmˇ£
(
OP_LOADK
) {

678 
TVÆue
 *
rb
 = 
k
 + 
	`GETARG_Bx
(
i
);

679 
	`£tobj2s
(
L
, 
ø
, 
rb
);

680 
vmbªak
;

682 
	`vmˇ£
(
OP_LOADKX
) {

683 
TVÆue
 *
rb
;

684 
	`lua_as£π
(
	`GET_OPCODE
(*
ci
->
u
.
l
.
ßvedpc
Ë=
OP_EXTRAARG
);

685 
rb
 = 
k
 + 
	`GETARG_Ax
(*
ci
->
u
.
l
.
ßvedpc
++);

686 
	`£tobj2s
(
L
, 
ø
, 
rb
);

687 
vmbªak
;

689 
	`vmˇ£
(
OP_LOADBOOL
) {

690 
	`£tbvÆue
(
ø
, 
	`GETARG_B
(
i
));

691 i‡(
	`GETARG_C
(
i
)Ë
ci
->
u
.
l
.
ßvedpc
++;

692 
vmbªak
;

694 
	`vmˇ£
(
OP_LOADNIL
) {

695 
b
 = 
	`GETARG_B
(
i
);

697 
	`£äûvÆue
(
ø
++);

698 } 
b
--);

699 
vmbªak
;

701 
	`vmˇ£
(
OP_GETUPVAL
) {

702 
b
 = 
	`GETARG_B
(
i
);

703 
	`£tobj2s
(
L
, 
ø
, 
˛
->
upvÆs
[
b
]->
v
);

704 
vmbªak
;

706 
	`vmˇ£
(
OP_GETTABUP
) {

707 
b
 = 
	`GETARG_B
(
i
);

708 
	`PrŸe˘
(
	`luaV_gëèbÀ
(
L
, 
˛
->
upvÆs
[
b
]->
v
, 
	`RKC
(
i
), 
ø
));

709 
vmbªak
;

711 
	`vmˇ£
(
OP_GETTABLE
) {

712 
	`PrŸe˘
(
	`luaV_gëèbÀ
(
L
, 
	`RB
(
i
), 
	`RKC
(i), 
ø
));

713 
vmbªak
;

715 
	`vmˇ£
(
OP_SETTABUP
) {

716 
a
 = 
	`GETARG_A
(
i
);

717 
	`PrŸe˘
(
	`luaV_£âabÀ
(
L
, 
˛
->
upvÆs
[
a
]->
v
, 
	`RKB
(
i
), 
	`RKC
(i)));

718 
vmbªak
;

720 
	`vmˇ£
(
OP_SETUPVAL
) {

721 
UpVÆ
 *
uv
 = 
˛
->
upvÆs
[
	`GETARG_B
(
i
)];

722 
	`£tobj
(
L
, 
uv
->
v
, 
ø
);

723 
	`luaC_upvÆb¨rõr
(
L
, 
uv
);

724 
vmbªak
;

726 
	`vmˇ£
(
OP_SETTABLE
) {

727 
	`PrŸe˘
(
	`luaV_£âabÀ
(
L
, 
ø
, 
	`RKB
(
i
), 
	`RKC
(i)));

728 
vmbªak
;

730 
	`vmˇ£
(
OP_NEWTABLE
) {

731 
b
 = 
	`GETARG_B
(
i
);

732 
c
 = 
	`GETARG_C
(
i
);

733 
TabÀ
 *
t
 = 
	`luaH_√w
(
L
);

734 
	`£thvÆue
(
L
, 
ø
, 
t
);

735 i‡(
b
 !0 || 
c
 != 0)

736 
	`luaH_ªsize
(
L
, 
t
, 
	`luaO_fb2öt
(
b
),ÜuaO_fb2öt(
c
));

737 
	`checkGC
(
L
, 
ø
 + 1);

738 
vmbªak
;

740 
	`vmˇ£
(
OP_SELF
) {

741 
StkId
 
rb
 = 
	`RB
(
i
);

742 
	`£tobjs2s
(
L
, 
ø
+1, 
rb
);

743 
	`PrŸe˘
(
	`luaV_gëèbÀ
(
L
, 
rb
, 
	`RKC
(
i
), 
ø
));

744 
vmbªak
;

746 
	`vmˇ£
(
OP_ADD
) {

747 
TVÆue
 *
rb
 = 
	`RKB
(
i
);

748 
TVÆue
 *
rc
 = 
	`RKC
(
i
);

749 
lua_Numbî
 
nb
;Üua_Numbî 
nc
;

750 i‡(
	`âisöãgî
(
rb
Ë&&Åtisöãgî(
rc
)) {

751 
lua_I¡egî
 
ib
 = 
	`ivÆue
(
rb
);Üua_I¡egî 
ic
 = ivÆue(
rc
);

752 
	`£tivÆue
(
ø
, 
	`öt›
(+, 
ib
, 
ic
));

754 i‡(
	`t⁄umbî
(
rb
, &
nb
Ë&&Å⁄umbî(
rc
, &
nc
)) {

755 
	`£tÊtvÆue
(
ø
, 
	`luai_numadd
(
L
, 
nb
, 
nc
));

757 { 
	`PrŸe˘
(
	`luaT_åyböTM
(
L
, 
rb
, 
rc
, 
ø
, 
TM_ADD
)); }

758 
vmbªak
;

760 
	`vmˇ£
(
OP_SUB
) {

761 
TVÆue
 *
rb
 = 
	`RKB
(
i
);

762 
TVÆue
 *
rc
 = 
	`RKC
(
i
);

763 
lua_Numbî
 
nb
;Üua_Numbî 
nc
;

764 i‡(
	`âisöãgî
(
rb
Ë&&Åtisöãgî(
rc
)) {

765 
lua_I¡egî
 
ib
 = 
	`ivÆue
(
rb
);Üua_I¡egî 
ic
 = ivÆue(
rc
);

766 
	`£tivÆue
(
ø
, 
	`öt›
(-, 
ib
, 
ic
));

768 i‡(
	`t⁄umbî
(
rb
, &
nb
Ë&&Å⁄umbî(
rc
, &
nc
)) {

769 
	`£tÊtvÆue
(
ø
, 
	`luai_numsub
(
L
, 
nb
, 
nc
));

771 { 
	`PrŸe˘
(
	`luaT_åyböTM
(
L
, 
rb
, 
rc
, 
ø
, 
TM_SUB
)); }

772 
vmbªak
;

774 
	`vmˇ£
(
OP_MUL
) {

775 
TVÆue
 *
rb
 = 
	`RKB
(
i
);

776 
TVÆue
 *
rc
 = 
	`RKC
(
i
);

777 
lua_Numbî
 
nb
;Üua_Numbî 
nc
;

778 i‡(
	`âisöãgî
(
rb
Ë&&Åtisöãgî(
rc
)) {

779 
lua_I¡egî
 
ib
 = 
	`ivÆue
(
rb
);Üua_I¡egî 
ic
 = ivÆue(
rc
);

780 
	`£tivÆue
(
ø
, 
	`öt›
(*, 
ib
, 
ic
));

782 i‡(
	`t⁄umbî
(
rb
, &
nb
Ë&&Å⁄umbî(
rc
, &
nc
)) {

783 
	`£tÊtvÆue
(
ø
, 
	`luai_nummul
(
L
, 
nb
, 
nc
));

785 { 
	`PrŸe˘
(
	`luaT_åyböTM
(
L
, 
rb
, 
rc
, 
ø
, 
TM_MUL
)); }

786 
vmbªak
;

788 
	`vmˇ£
(
OP_DIV
) {

789 
TVÆue
 *
rb
 = 
	`RKB
(
i
);

790 
TVÆue
 *
rc
 = 
	`RKC
(
i
);

791 
lua_Numbî
 
nb
;Üua_Numbî 
nc
;

792 i‡(
	`t⁄umbî
(
rb
, &
nb
Ë&&Å⁄umbî(
rc
, &
nc
)) {

793 
	`£tÊtvÆue
(
ø
, 
	`luai_numdiv
(
L
, 
nb
, 
nc
));

795 { 
	`PrŸe˘
(
	`luaT_åyböTM
(
L
, 
rb
, 
rc
, 
ø
, 
TM_DIV
)); }

796 
vmbªak
;

798 
	`vmˇ£
(
OP_BAND
) {

799 
TVÆue
 *
rb
 = 
	`RKB
(
i
);

800 
TVÆue
 *
rc
 = 
	`RKC
(
i
);

801 
lua_I¡egî
 
ib
;Üua_I¡egî 
ic
;

802 i‡(
	`toöãgî
(
rb
, &
ib
Ë&&Åoöãgî(
rc
, &
ic
)) {

803 
	`£tivÆue
(
ø
, 
	`öt›
(&, 
ib
, 
ic
));

805 { 
	`PrŸe˘
(
	`luaT_åyböTM
(
L
, 
rb
, 
rc
, 
ø
, 
TM_BAND
)); }

806 
vmbªak
;

808 
	`vmˇ£
(
OP_BOR
) {

809 
TVÆue
 *
rb
 = 
	`RKB
(
i
);

810 
TVÆue
 *
rc
 = 
	`RKC
(
i
);

811 
lua_I¡egî
 
ib
;Üua_I¡egî 
ic
;

812 i‡(
	`toöãgî
(
rb
, &
ib
Ë&&Åoöãgî(
rc
, &
ic
)) {

813 
	`£tivÆue
(
ø
, 
	`öt›
(|, 
ib
, 
ic
));

815 { 
	`PrŸe˘
(
	`luaT_åyböTM
(
L
, 
rb
, 
rc
, 
ø
, 
TM_BOR
)); }

816 
vmbªak
;

818 
	`vmˇ£
(
OP_BXOR
) {

819 
TVÆue
 *
rb
 = 
	`RKB
(
i
);

820 
TVÆue
 *
rc
 = 
	`RKC
(
i
);

821 
lua_I¡egî
 
ib
;Üua_I¡egî 
ic
;

822 i‡(
	`toöãgî
(
rb
, &
ib
Ë&&Åoöãgî(
rc
, &
ic
)) {

823 
	`£tivÆue
(
ø
, 
	`öt›
(^, 
ib
, 
ic
));

825 { 
	`PrŸe˘
(
	`luaT_åyböTM
(
L
, 
rb
, 
rc
, 
ø
, 
TM_BXOR
)); }

826 
vmbªak
;

828 
	`vmˇ£
(
OP_SHL
) {

829 
TVÆue
 *
rb
 = 
	`RKB
(
i
);

830 
TVÆue
 *
rc
 = 
	`RKC
(
i
);

831 
lua_I¡egî
 
ib
;Üua_I¡egî 
ic
;

832 i‡(
	`toöãgî
(
rb
, &
ib
Ë&&Åoöãgî(
rc
, &
ic
)) {

833 
	`£tivÆue
(
ø
, 
	`luaV_shi·l
(
ib
, 
ic
));

835 { 
	`PrŸe˘
(
	`luaT_åyböTM
(
L
, 
rb
, 
rc
, 
ø
, 
TM_SHL
)); }

836 
vmbªak
;

838 
	`vmˇ£
(
OP_SHR
) {

839 
TVÆue
 *
rb
 = 
	`RKB
(
i
);

840 
TVÆue
 *
rc
 = 
	`RKC
(
i
);

841 
lua_I¡egî
 
ib
;Üua_I¡egî 
ic
;

842 i‡(
	`toöãgî
(
rb
, &
ib
Ë&&Åoöãgî(
rc
, &
ic
)) {

843 
	`£tivÆue
(
ø
, 
	`luaV_shi·l
(
ib
, -
ic
));

845 { 
	`PrŸe˘
(
	`luaT_åyböTM
(
L
, 
rb
, 
rc
, 
ø
, 
TM_SHR
)); }

846 
vmbªak
;

848 
	`vmˇ£
(
OP_MOD
) {

849 
TVÆue
 *
rb
 = 
	`RKB
(
i
);

850 
TVÆue
 *
rc
 = 
	`RKC
(
i
);

851 
lua_Numbî
 
nb
;Üua_Numbî 
nc
;

852 i‡(
	`âisöãgî
(
rb
Ë&&Åtisöãgî(
rc
)) {

853 
lua_I¡egî
 
ib
 = 
	`ivÆue
(
rb
);Üua_I¡egî 
ic
 = ivÆue(
rc
);

854 
	`£tivÆue
(
ø
, 
	`luaV_mod
(
L
, 
ib
, 
ic
));

856 i‡(
	`t⁄umbî
(
rb
, &
nb
Ë&&Å⁄umbî(
rc
, &
nc
)) {

857 
lua_Numbî
 
m
;

858 
	`luai_nummod
(
L
, 
nb
, 
nc
, 
m
);

859 
	`£tÊtvÆue
(
ø
, 
m
);

861 { 
	`PrŸe˘
(
	`luaT_åyböTM
(
L
, 
rb
, 
rc
, 
ø
, 
TM_MOD
)); }

862 
vmbªak
;

864 
	`vmˇ£
(
OP_IDIV
) {

865 
TVÆue
 *
rb
 = 
	`RKB
(
i
);

866 
TVÆue
 *
rc
 = 
	`RKC
(
i
);

867 
lua_Numbî
 
nb
;Üua_Numbî 
nc
;

868 i‡(
	`âisöãgî
(
rb
Ë&&Åtisöãgî(
rc
)) {

869 
lua_I¡egî
 
ib
 = 
	`ivÆue
(
rb
);Üua_I¡egî 
ic
 = ivÆue(
rc
);

870 
	`£tivÆue
(
ø
, 
	`luaV_div
(
L
, 
ib
, 
ic
));

872 i‡(
	`t⁄umbî
(
rb
, &
nb
Ë&&Å⁄umbî(
rc
, &
nc
)) {

873 
	`£tÊtvÆue
(
ø
, 
	`luai_numidiv
(
L
, 
nb
, 
nc
));

875 { 
	`PrŸe˘
(
	`luaT_åyböTM
(
L
, 
rb
, 
rc
, 
ø
, 
TM_IDIV
)); }

876 
vmbªak
;

878 
	`vmˇ£
(
OP_POW
) {

879 
TVÆue
 *
rb
 = 
	`RKB
(
i
);

880 
TVÆue
 *
rc
 = 
	`RKC
(
i
);

881 
lua_Numbî
 
nb
;Üua_Numbî 
nc
;

882 i‡(
	`t⁄umbî
(
rb
, &
nb
Ë&&Å⁄umbî(
rc
, &
nc
)) {

883 
	`£tÊtvÆue
(
ø
, 
	`luai_numpow
(
L
, 
nb
, 
nc
));

885 { 
	`PrŸe˘
(
	`luaT_åyböTM
(
L
, 
rb
, 
rc
, 
ø
, 
TM_POW
)); }

886 
vmbªak
;

888 
	`vmˇ£
(
OP_UNM
) {

889 
TVÆue
 *
rb
 = 
	`RB
(
i
);

890 
lua_Numbî
 
nb
;

891 i‡(
	`âisöãgî
(
rb
)) {

892 
lua_I¡egî
 
ib
 = 
	`ivÆue
(
rb
);

893 
	`£tivÆue
(
ø
, 
	`öt›
(-, 0, 
ib
));

895 i‡(
	`t⁄umbî
(
rb
, &
nb
)) {

896 
	`£tÊtvÆue
(
ø
, 
	`luai_numunm
(
L
, 
nb
));

899 
	`PrŸe˘
(
	`luaT_åyböTM
(
L
, 
rb
,Ñb, 
ø
, 
TM_UNM
));

901 
vmbªak
;

903 
	`vmˇ£
(
OP_BNOT
) {

904 
TVÆue
 *
rb
 = 
	`RB
(
i
);

905 
lua_I¡egî
 
ib
;

906 i‡(
	`toöãgî
(
rb
, &
ib
)) {

907 
	`£tivÆue
(
ø
, 
	`öt›
(^, ~
	`l_ˇ°S2U
(0), 
ib
));

910 
	`PrŸe˘
(
	`luaT_åyböTM
(
L
, 
rb
,Ñb, 
ø
, 
TM_BNOT
));

912 
vmbªak
;

914 
	`vmˇ£
(
OP_NOT
) {

915 
TVÆue
 *
rb
 = 
	`RB
(
i
);

916 
ªs
 = 
	`l_isÁl£
(
rb
);

917 
	`£tbvÆue
(
ø
, 
ªs
);

918 
vmbªak
;

920 
	`vmˇ£
(
OP_LEN
) {

921 
	`PrŸe˘
(
	`luaV_objÀn
(
L
, 
ø
, 
	`RB
(
i
)));

922 
vmbªak
;

924 
	`vmˇ£
(
OP_CONCAT
) {

925 
b
 = 
	`GETARG_B
(
i
);

926 
c
 = 
	`GETARG_C
(
i
);

927 
StkId
 
rb
;

928 
L
->
t›
 = 
ba£
 + 
c
 + 1;

929 
	`PrŸe˘
(
	`luaV_c⁄ˇt
(
L
, 
c
 - 
b
 + 1));

930 
ø
 = 
	`RA
(
i
);

931 
rb
 = 
b
 + 
ba£
;

932 
	`£tobjs2s
(
L
, 
ø
, 
rb
);

933 
	`checkGC
(
L
, (
ø
 >
rb
 ?Ña + 1 :Ñb));

934 
L
->
t›
 = 
ci
->top;

935 
vmbªak
;

937 
	`vmˇ£
(
OP_JMP
) {

938 
	`dojump
(
ci
, 
i
, 0);

939 
vmbªak
;

941 
	`vmˇ£
(
OP_EQ
) {

942 
TVÆue
 *
rb
 = 
	`RKB
(
i
);

943 
TVÆue
 *
rc
 = 
	`RKC
(
i
);

944 
	`PrŸe˘
(

945 i‡(
	`ˇ°_öt
(
	`luaV_equÆobj
(
L
, 
rb
, 
rc
)Ë!
	`GETARG_A
(
i
))

946 
ci
->
u
.
l
.
ßvedpc
++;

948 
	`d⁄extjump
(
ci
);

950 
vmbªak
;

952 
	`vmˇ£
(
OP_LT
) {

953 
	`PrŸe˘
(

954 i‡(
	`luaV_Às°h™
(
L
, 
	`RKB
(
i
), 
	`RKC
(i)Ë!
	`GETARG_A
(i))

955 
ci
->
u
.
l
.
ßvedpc
++;

957 
	`d⁄extjump
(
ci
);

959 
vmbªak
;

961 
	`vmˇ£
(
OP_LE
) {

962 
	`PrŸe˘
(

963 i‡(
	`luaV_Às£quÆ
(
L
, 
	`RKB
(
i
), 
	`RKC
(i)Ë!
	`GETARG_A
(i))

964 
ci
->
u
.
l
.
ßvedpc
++;

966 
	`d⁄extjump
(
ci
);

968 
vmbªak
;

970 
	`vmˇ£
(
OP_TEST
) {

971 i‡(
	`GETARG_C
(
i
Ë? 
	`l_isÁl£
(
ø
) : !l_isfalse(ra))

972 
ci
->
u
.
l
.
ßvedpc
++;

974 
	`d⁄extjump
(
ci
);

975 
vmbªak
;

977 
	`vmˇ£
(
OP_TESTSET
) {

978 
TVÆue
 *
rb
 = 
	`RB
(
i
);

979 i‡(
	`GETARG_C
(
i
Ë? 
	`l_isÁl£
(
rb
) : !l_isfalse(rb))

980 
ci
->
u
.
l
.
ßvedpc
++;

982 
	`£tobjs2s
(
L
, 
ø
, 
rb
);

983 
	`d⁄extjump
(
ci
);

985 
vmbªak
;

987 
	`vmˇ£
(
OP_CALL
) {

988 
b
 = 
	`GETARG_B
(
i
);

989 
ƒesu…s
 = 
	`GETARG_C
(
i
) - 1;

990 i‡(
b
 !0Ë
L
->
t›
 = 
ø
+b;

991 i‡(
	`luaD_¥eˇŒ
(
L
, 
ø
, 
ƒesu…s
)) {

992 i‡(
ƒesu…s
 >0Ë
L
->
t›
 = 
ci
->top;

993 
ba£
 = 
ci
->
u
.
l
.base;

996 
ci
 = 
L
->ci;

997 
ci
->
ˇŒ°©us
 |
CIST_REENTRY
;

998 
√w‰ame
;

1000 
vmbªak
;

1002 
	`vmˇ£
(
OP_TAILCALL
) {

1003 
b
 = 
	`GETARG_B
(
i
);

1004 i‡(
b
 !0Ë
L
->
t›
 = 
ø
+b;

1005 
	`lua_as£π
(
	`GETARG_C
(
i
Ë- 1 =
LUA_MULTRET
);

1006 i‡(
	`luaD_¥eˇŒ
(
L
, 
ø
, 
LUA_MULTRET
))

1007 
ba£
 = 
ci
->
u
.
l
.base;

1010 
CÆlInfo
 *
nci
 = 
L
->
ci
;

1011 
CÆlInfo
 *
oci
 = 
nci
->
¥evious
;

1012 
StkId
 
nfunc
 = 
nci
->
func
;

1013 
StkId
 
ofunc
 = 
oci
->
func
;

1015 
StkId
 
lim
 = 
nci
->
u
.
l
.
ba£
 + 
	`gë¥Ÿo
(
nfunc
)->
num∑øms
;

1016 
aux
;

1018 i‡(
˛
->
p
->
sizï
 > 0Ë
	`luaF_˛o£
(
L
, 
oci
->
u
.
l
.
ba£
);

1020 
aux
 = 0; 
nfunc
 +áux < 
lim
;áux++)

1021 
	`£tobjs2s
(
L
, 
ofunc
 + 
aux
, 
nfunc
 +áux);

1022 
oci
->
u
.
l
.
ba£
 = 
ofunc
 + (
nci
->u.l.ba£ - 
nfunc
);

1023 
oci
->
t›
 = 
L
->t› = 
ofunc
 + (L->t› - 
nfunc
);

1024 
oci
->
u
.
l
.
ßvedpc
 = 
nci
->u.l.savedpc;

1025 
oci
->
ˇŒ°©us
 |
CIST_TAIL
;

1026 
ci
 = 
L
->cò
oci
;

1027 
	`lua_as£π
(
L
->
t›
 =
oci
->
u
.
l
.
ba£
 + 
	`gë¥Ÿo
(
ofunc
)->
max°acksize
);

1028 
√w‰ame
;

1030 
vmbªak
;

1032 
	`vmˇ£
(
OP_RETURN
) {

1033 
b
 = 
	`GETARG_B
(
i
);

1034 i‡(
b
 !0Ë
L
->
t›
 = 
ø
+b-1;

1035 i‡(
˛
->
p
->
sizï
 > 0Ë
	`luaF_˛o£
(
L
, 
ba£
);

1036 
b
 = 
	`luaD_posˇŒ
(
L
, 
ø
);

1037 i‡(!(
ci
->
ˇŒ°©us
 & 
CIST_REENTRY
))

1040 
ci
 = 
L
->ci;

1041 i‡(
b
Ë
L
->
t›
 = 
ci
->top;

1042 
	`lua_as£π
(
	`isLua
(
ci
));

1043 
	`lua_as£π
(
	`GET_OPCODE
(*((
ci
)->
u
.
l
.
ßvedpc
 - 1)Ë=
OP_CALL
);

1044 
√w‰ame
;

1047 
	`vmˇ£
(
OP_FORLOOP
) {

1048 i‡(
	`âisöãgî
(
ø
)) {

1049 
lua_I¡egî
 
°ï
 = 
	`ivÆue
(
ø
 + 2);

1050 
lua_I¡egî
 
idx
 = 
	`ivÆue
(
ø
Ë+ 
°ï
;

1051 
lua_I¡egî
 
limô
 = 
	`ivÆue
(
ø
 + 1);

1052 i‡((0 < 
°ï
Ë? (
idx
 <
limô
) : (limit <= idx)) {

1053 
ci
->
u
.
l
.
ßvedpc
 +
	`GETARG_sBx
(
i
);

1054 
	`£tivÆue
(
ø
, 
idx
);

1055 
	`£tivÆue
(
ø
 + 3, 
idx
);

1059 
lua_Numbî
 
°ï
 = 
	`ÊtvÆue
(
ø
 + 2);

1060 
lua_Numbî
 
idx
 = 
	`luai_numadd
(
L
, 
	`ÊtvÆue
(
ø
), 
°ï
);

1061 
lua_Numbî
 
limô
 = 
	`ÊtvÆue
(
ø
 + 1);

1062 i‡(
	`luai_num…
(0, 
°ï
Ë? 
	`luai_numÀ
(
idx
, 
limô
)

1063 : 
	`luai_numÀ
(
limô
, 
idx
)) {

1064 
ci
->
u
.
l
.
ßvedpc
 +
	`GETARG_sBx
(
i
);

1065 
	`£tÊtvÆue
(
ø
, 
idx
);

1066 
	`£tÊtvÆue
(
ø
 + 3, 
idx
);

1069 
vmbªak
;

1071 
	`vmˇ£
(
OP_FORPREP
) {

1072 
TVÆue
 *
öô
 = 
ø
;

1073 
TVÆue
 *
∂imô
 = 
ø
 + 1;

1074 
TVÆue
 *
p°ï
 = 
ø
 + 2;

1075 
lua_I¡egî
 
ûimô
;

1076 
°›now
;

1077 i‡(
	`âisöãgî
(
öô
Ë&&Åtisöãgî(
p°ï
) &&

1078 
	`f‹limô
(
∂imô
, &
ûimô
, 
	`ivÆue
(
p°ï
), &
°›now
)) {

1080 
lua_I¡egî
 
öôv
 = (
°›now
 ? 0 : 
	`ivÆue
(
öô
));

1081 
	`£tivÆue
(
∂imô
, 
ûimô
);

1082 
	`£tivÆue
(
öô
, 
öôv
 - 
	`ivÆue
(
p°ï
));

1085 
lua_Numbî
 
nöô
;Üua_Numbî 
∆imô
;Üua_Numbî 
n°ï
;

1086 i‡(!
	`t⁄umbî
(
∂imô
, &
∆imô
))

1087 
	`luaG_ru√º‹
(
L
, "'for'Üimit must beáÇumber");

1088 
	`£tÊtvÆue
(
∂imô
, 
∆imô
);

1089 i‡(!
	`t⁄umbî
(
p°ï
, &
n°ï
))

1090 
	`luaG_ru√º‹
(
L
, "'for' step must beáÇumber");

1091 
	`£tÊtvÆue
(
p°ï
, 
n°ï
);

1092 i‡(!
	`t⁄umbî
(
öô
, &
nöô
))

1093 
	`luaG_ru√º‹
(
L
, "'for' initial value must beáÇumber");

1094 
	`£tÊtvÆue
(
öô
, 
	`luai_numsub
(
L
, 
nöô
, 
n°ï
));

1096 
ci
->
u
.
l
.
ßvedpc
 +
	`GETARG_sBx
(
i
);

1097 
vmbªak
;

1099 
	`vmˇ£
(
OP_TFORCALL
) {

1100 
StkId
 
cb
 = 
ø
 + 3;

1101 
	`£tobjs2s
(
L
, 
cb
+2, 
ø
+2);

1102 
	`£tobjs2s
(
L
, 
cb
+1, 
ø
+1);

1103 
	`£tobjs2s
(
L
, 
cb
, 
ø
);

1104 
L
->
t›
 = 
cb
 + 3;

1105 
	`PrŸe˘
(
	`luaD_ˇŒ
(
L
, 
cb
, 
	`GETARG_C
(
i
), 1));

1106 
L
->
t›
 = 
ci
->top;

1107 
i
 = *(
ci
->
u
.
l
.
ßvedpc
++);

1108 
ø
 = 
	`RA
(
i
);

1109 
	`lua_as£π
(
	`GET_OPCODE
(
i
Ë=
OP_TFORLOOP
);

1110 
l_tf‹lo›
;

1112 
	`vmˇ£
(
OP_TFORLOOP
) {

1113 
l_tf‹lo›
:

1114 i‡(!
	`âi¢û
(
ø
 + 1)) {

1115 
	`£tobjs2s
(
L
, 
ø
,Ña + 1);

1116 
ci
->
u
.
l
.
ßvedpc
 +
	`GETARG_sBx
(
i
);

1118 
vmbªak
;

1120 
	`vmˇ£
(
OP_SETLIST
) {

1121 
n
 = 
	`GETARG_B
(
i
);

1122 
c
 = 
	`GETARG_C
(
i
);

1123 
œ°
;

1124 
TabÀ
 *
h
;

1125 i‡(
n
 =0Ë¿
	`ˇ°_öt
(
L
->
t›
 - 
ø
) - 1;

1126 i‡(
c
 == 0) {

1127 
	`lua_as£π
(
	`GET_OPCODE
(*
ci
->
u
.
l
.
ßvedpc
Ë=
OP_EXTRAARG
);

1128 
c
 = 
	`GETARG_Ax
(*
ci
->
u
.
l
.
ßvedpc
++);

1130 
	`luai_ru¡imecheck
(
L
, 
	`âi°abÀ
(
ø
));

1131 
h
 = 
	`hvÆue
(
ø
);

1132 
œ°
 = ((
c
-1)*
LFIELDS_PER_FLUSH
Ë+ 
n
;

1133 i‡(
œ°
 > 
h
->
sizóºay
)

1134 
	`luaH_ªsizóºay
(
L
, 
h
, 
œ°
);

1135 ; 
n
 > 0;Ç--) {

1136 
TVÆue
 *
vÆ
 = 
ø
+
n
;

1137 
	`luaH_£töt
(
L
, 
h
, 
œ°
--, 
vÆ
);

1138 
	`luaC_b¨rõrback
(
L
, 
h
, 
vÆ
);

1140 
L
->
t›
 = 
ci
->top;

1141 
vmbªak
;

1143 
	`vmˇ£
(
OP_CLOSURE
) {

1144 
PrŸo
 *
p
 = 
˛
->p->p[
	`GETARG_Bx
(
i
)];

1145 
LClosuª
 *
n˛
 = 
	`gëˇched
(
p
, 
˛
->
upvÆs
, 
ba£
);

1146 i‡(
n˛
 =
NULL
)

1147 
	`push˛osuª
(
L
, 
p
, 
˛
->
upvÆs
, 
ba£
, 
ø
);

1149 
	`£t˛LvÆue
(
L
, 
ø
, 
n˛
);

1150 
	`checkGC
(
L
, 
ø
 + 1);

1151 
vmbªak
;

1153 
	`vmˇ£
(
OP_VARARG
) {

1154 
b
 = 
	`GETARG_B
(
i
) - 1;

1155 
j
;

1156 
n
 = 
	`ˇ°_öt
(
ba£
 - 
ci
->
func
Ë- 
˛
->
p
->
num∑øms
 - 1;

1157 i‡(
b
 < 0) {

1158 
b
 = 
n
;

1159 
	`PrŸe˘
(
	`luaD_check°ack
(
L
, 
n
));

1160 
ø
 = 
	`RA
(
i
);

1161 
L
->
t›
 = 
ø
 + 
n
;

1163 
j
 = 0; j < 
b
; j++) {

1164 i‡(
j
 < 
n
) {

1165 
	`£tobjs2s
(
L
, 
ø
 + 
j
, 
ba£
 - 
n
 + j);

1168 
	`£äûvÆue
(
ø
 + 
j
);

1171 
vmbªak
;

1173 
	`vmˇ£
(
OP_EXTRAARG
) {

1174 
	`lua_as£π
(0);

1175 
vmbªak
;

1179 
	}
}

	@lib/archive/lua-5.3.0/src/lvm.h

7 #i‚de‡
lvm_h


8 
	#lvm_h


	)

11 
	~"ldo.h
"

12 
	~"lobje˘.h
"

13 
	~"…m.h
"

16 #i‡!
deföed
(
LUA_NOCVTN2S
)

17 
	#cvt2°r
(
o
Ë
	`âi¢umbî
(o)

	)

19 
	#cvt2°r
(
o
Ë0

	)

23 #i‡!
deföed
(
LUA_NOCVTS2N
)

24 
	#cvt2num
(
o
Ë
	`âis°rög
(o)

	)

26 
	#cvt2num
(
o
Ë0

	)

30 
	#t⁄umbî
(
o
,
n
) \

31 (
	`âisÊﬂt
(
o
Ë? (*(
n
Ë
	`ÊtvÆue
(o), 1Ë: 
	`luaV_t⁄umbî_
(o,n))

	)

33 
	#toöãgî
(
o
,
i
) \

34 (
	`âisöãgî
(
o
Ë? (*(
i
Ë
	`ivÆue
(o), 1Ë: 
	`luaV_toöãgî_
(o,i))

	)

36 
	#öt›
(
›
,
v1
,
v2
Ë
	`l_ˇ°U2S
(
	`l_ˇ°S2U
(v1Ë›Ü_ˇ°S2U(v2))

	)

38 
	#luaV_øwequÆobj
(
t1
,
t2
Ë
	`luaV_equÆobj
(
NULL
,t1,t2)

	)

41 
LUAI_FUNC
 
luaV_equÆobj
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
t1
, c⁄° TVÆuê*
t2
);

42 
LUAI_FUNC
 
luaV_Às°h™
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
l
, c⁄° TVÆuê*
r
);

43 
LUAI_FUNC
 
luaV_Às£quÆ
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
l
, c⁄° TVÆuê*
r
);

44 
LUAI_FUNC
 
luaV_t⁄umbî_
 (c⁄° 
TVÆue
 *
obj
, 
lua_Numbî
 *
n
);

45 
LUAI_FUNC
 
luaV_toöãgî_
 (c⁄° 
TVÆue
 *
obj
, 
lua_I¡egî
 *
p
);

46 
LUAI_FUNC
 
luaV_gëèbÀ
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
t
, TVÆuê*
key
,

47 
StkId
 
vÆ
);

48 
LUAI_FUNC
 
luaV_£âabÀ
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
t
, TVÆuê*
key
,

49 
StkId
 
vÆ
);

50 
LUAI_FUNC
 
luaV_föishOp
 (
lua_Sèã
 *
L
);

51 
LUAI_FUNC
 
luaV_execuã
 (
lua_Sèã
 *
L
);

52 
LUAI_FUNC
 
luaV_c⁄ˇt
 (
lua_Sèã
 *
L
, 
tŸÆ
);

53 
LUAI_FUNC
 
lua_I¡egî
 
luaV_div
 (
lua_Sèã
 *
L
,Üua_I¡egî 
x
,Üua_I¡egî 
y
);

54 
LUAI_FUNC
 
lua_I¡egî
 
luaV_mod
 (
lua_Sèã
 *
L
,Üua_I¡egî 
x
,Üua_I¡egî 
y
);

55 
LUAI_FUNC
 
lua_I¡egî
 
luaV_shi·l
 (lua_I¡egî 
x
,Üua_I¡egî 
y
);

56 
LUAI_FUNC
 
luaV_objÀn
 (
lua_Sèã
 *
L
, 
StkId
 
ø
, c⁄° 
TVÆue
 *
rb
);

	@lib/archive/lua-5.3.0/src/lzio.c

7 
	#lzio_c


	)

8 
	#LUA_CORE


	)

10 
	~"Õªfix.h
"

13 
	~<°rög.h
>

15 
	~"lua.h
"

17 
	~"Œimôs.h
"

18 
	~"lmem.h
"

19 
	~"l°©e.h
"

20 
	~"lzio.h
"

23 
	$luaZ_fûl
 (
ZIO
 *
z
) {

24 
size_t
 
size
;

25 
lua_Sèã
 *
L
 = 
z
->L;

26 c⁄° *
buff
;

27 
	`lua_u∆ock
(
L
);

28 
buff
 = 
z
->
	`ªadî
(
L
, z->
d©a
, &
size
);

29 
	`lua_lock
(
L
);

30 i‡(
buff
 =
NULL
 || 
size
 == 0)

31  
EOZ
;

32 
z
->
n
 = 
size
 - 1;

33 
z
->
p
 = 
buff
;

34  
	`ˇ°_uch¨
(*(
z
->
p
++));

35 
	}
}

38 
	$luaZ_öô
 (
lua_Sèã
 *
L
, 
ZIO
 *
z
, 
lua_Ródî
 
ªadî
, *
d©a
) {

39 
z
->
L
 = L;

40 
z
->
ªadî
 =Ñeader;

41 
z
->
d©a
 = data;

42 
z
->
n
 = 0;

43 
z
->
p
 = 
NULL
;

44 
	}
}

48 
size_t
 
	$luaZ_ªad
 (
ZIO
 *
z
, *
b
, 
size_t
 
n
) {

49 
n
) {

50 
size_t
 
m
;

51 i‡(
z
->
n
 == 0) {

52 i‡(
	`luaZ_fûl
(
z
Ë=
EOZ
)

53  
n
;

55 
z
->
n
++;

56 
z
->
p
--;

59 
m
 = (
n
 <
z
->n) ?Ç : z->n;

60 
	`mem˝y
(
b
, 
z
->
p
, 
m
);

61 
z
->
n
 -
m
;

62 
z
->
p
 +
m
;

63 
b
 = (*)b + 
m
;

64 
n
 -
m
;

67 
	}
}

70 *
	$luaZ_›í•a˚
 (
lua_Sèã
 *
L
, 
Mbuf„r
 *
buff
, 
size_t
 
n
) {

71 i‡(
n
 > 
buff
->
buffsize
) {

72 i‡(
n
 < 
LUA_MINBUFFER
)Ç = LUA_MINBUFFER;

73 
	`luaZ_ªsizebuf„r
(
L
, 
buff
, 
n
);

75  
buff
->
buf„r
;

76 
	}
}

	@lib/archive/lua-5.3.0/src/lzio.h

8 #i‚de‡
lzio_h


9 
	#lzio_h


	)

11 
	~"lua.h
"

13 
	~"lmem.h
"

16 
	#EOZ
 (-1Ë

	)

18 
Zio
 
	tZIO
;

20 
	#zgëc
(
z
Ë(((z)->
n
--)>0 ? 
	`ˇ°_uch¨
(*(z)->
p
++Ë: 
	`luaZ_fûl
(z))

	)

23 
	sMbuf„r
 {

24 *
	mbuf„r
;

25 
size_t
 
	mn
;

26 
size_t
 
	mbuffsize
;

27 } 
	tMbuf„r
;

29 
	#luaZ_öôbuf„r
(
L
, 
buff
Ë((buff)->
buf„r
 = 
NULL
, (buff)->
buffsize
 = 0)

	)

31 
	#luaZ_buf„r
(
buff
Ë((buff)->
buf„r
)

	)

32 
	#luaZ_sizebuf„r
(
buff
Ë((buff)->
buffsize
)

	)

33 
	#luaZ_bufÊí
(
buff
Ë((buff)->
n
)

	)

35 
	#luaZ_buf‰emove
(
buff
,
i
Ë((buff)->
n
 -(i))

	)

36 
	#luaZ_ª£tbuf„r
(
buff
Ë((buff)->
n
 = 0)

	)

39 
	#luaZ_ªsizebuf„r
(
L
, 
buff
, 
size
) \

40 ((
buff
)->
buf„r
 = 
	`luaM_ªÆlocvch¨
(
L
, (buff)->buffer, \

41 (
buff
)->
buffsize
, 
size
), \

42 (
buff
)->
buffsize
 = 
size
)

	)

44 
	#luaZ_‰ìbuf„r
(
L
, 
buff
Ë
	`luaZ_ªsizebuf„r
(L, buff, 0)

	)

47 
LUAI_FUNC
 *
luaZ_›í•a˚
 (
lua_Sèã
 *
L
, 
Mbuf„r
 *
buff
, 
size_t
 
n
);

48 
LUAI_FUNC
 
luaZ_öô
 (
lua_Sèã
 *
L
, 
ZIO
 *
z
, 
lua_Ródî
 
ªadî
,

49 *
d©a
);

50 
LUAI_FUNC
 
size_t
 
luaZ_ªad
 (
ZIO
* 
z
, *
b
, size_à
n
);

56 
	sZio
 {

57 
size_t
 
	mn
;

58 c⁄° *
	mp
;

59 
lua_Ródî
 
	mªadî
;

60 *
	md©a
;

61 
lua_Sèã
 *
	mL
;

65 
LUAI_FUNC
 
luaZ_fûl
 (
ZIO
 *
z
);

	@lib/cli/cli.c

8 
	~<°dio.h
>

9 
	~<pﬁl.h
>

10 
	~<°rög.h
>

12 
	~<πe_vîsi⁄.h
>

13 
	~<πe_timî.h
>

14 
	~<πe_log.h
>

15 
	~<πe_°rög_‚s.h
>

17 
	~"˛i.h
"

18 
	~"˛i_öput.h
"

19 
	~"˛i_°rög_‚s.h
"

21 (*
lua_dofûe
)(*, const *);

23 
	`RTE_DEFINE_PER_LCORE
(
˛i
 *, cli);

26 
	$˛i_u£_timîs
()

28 i‡(!
this_˛i
)

30  
this_˛i
->
Êags
 & 
CLI_USE_TIMERS
;

31 
	}
}

34 
	$˛i_nodes_u∆imôed
()

36 i‡(!
this_˛i
)

38  
this_˛i
->
Êags
 & 
CLI_NODES_UNLIMITED
;

39 
	}
}

42 
ölöe
 
˛i_node
 *

43 
	$˛i_Æloc
()

45 
˛i
 *˛ò
this_˛i
;

46 
˛i_node
 *
node
;

48 
node
 = (
˛i_node
 *)
	`TAILQ_FIRST
(&
˛i
->
‰ì_nodes
);

49 i‡(
node
)

50 
	`TAILQ_REMOVE
(&
˛i
->
‰ì_nodes
, 
node
, 
√xt
);

51 i‡(
	`˛i_nodes_u∆imôed
()) {

52 
˛i_node
 *
‹ig
 = 
˛i
->
node_mem
;

53 
size_t
 
size
;

55 
size
 = (
˛i
->
nb_nodes
 + 
CLI_DEFAULT_NB_NODES
) *

56 (
˛i_node
);

57 
˛i
->
node_mem
 = 
	`ªÆloc
(˛i->node_mem, 
size
);

58 i‡(
˛i
->
node_mem
 =
NULL
) {

59 
˛i
->
node_mem
 = 
‹ig
;

60  
NULL
;

62 i‡(
˛i
->
node_mem
 =
‹ig
) {

63 
uöt32_t
 
i
;

65 
node
 = &
˛i
->
node_mem
[˛i->
nb_nodes
];

66 
i
 = 0; i < 
CLI_DEFAULT_NB_NODES
; i++, 
node
++)

67 
	`TAILQ_INSERT_TAIL
(&
˛i
->
‰ì_nodes
, 
node
, 
√xt
);

68 
˛i
->
nb_nodes
 +
CLI_DEFAULT_NB_NODES
;

70  
NULL
;

73  
node
;

74 
	}
}

77 
ölöe
 

78 
	$˛i_‰ì
(
˛i_node
 *
node
)

80 
	`TAILQ_INSERT_TAIL
(&
this_˛i
->
‰ì_nodes
, 
node
, 
√xt
);

81 
	}
}

85 
	$˛i_add_bö
(
˛i_node
 *
dú
)

87 
˛i
 *˛ò
this_˛i
;

88 
i
;

90 i‡(!
dú
 || !
	`is_dúe˘‹y
(dir))

93 
i
 = 1; i < 
CLI_MAX_BINS
; i++)

94 i‡(
˛i
->
bös
[
i
] =
dú
) {

95 
	`RTE_LOG
(
WARNING
, 
EAL
,

97 
dú
->
«me
);

102 
i
 = 1; i < 
CLI_MAX_BINS
; i++)

103 i‡(
˛i
->
bös
[
i
] =
NULL
) {

104 
˛i
->
bös
[
i
] = 
dú
;

108 
	}
}

112 
	$˛i_dñ_bö
(
˛i_node
 *
dú
)

114 
˛i
 *˛ò
this_˛i
;

115 
i
;

117 i‡(!
dú
 || !
	`is_dúe˘‹y
(dir))

120 
i
 = 0; i < 
CLI_MAX_BINS
; i++)

121 i‡(
˛i
->
bös
[
i
] =
dú
) {

122 
˛i
->
bös
[
i
] = 
NULL
;

125 i‡((
i
 + 1Ë< 
CLI_MAX_BINS
) {

126 
	`memmove
(&
˛i
->
bös
[
i
], &cli->bins[i + 1],

127 (
CLI_MAX_BINS
 - (
i
 + 1)) *

129 
˛i
->
bös
[
CLI_MAX_BINS
 - 1] = 
NULL
;

134 
	}
}

138 
	$˛i_add_bö_∑th
(c⁄° *
∑th
)

140 
˛i_node
 *
node
;

142 i‡(
	`˛i_föd_node
(
∑th
, &
node
)) {

143 i‡(
	`˛i_add_bö
(
node
))

149 
	}
}

153 
	$˛i_ªmove_node
(
˛i_node
 *
node
)

155 
˛i_node
 *
∑ª¡
, *
n
;

157 i‡(!
node
)

160 
∑ª¡
 = 
node
->parent;

161 i‡(!
∑ª¡
)

164 
node
->
ty≥
) {

165 
CLI_DIR_NODE
:

166 i‡(!
	`TAILQ_EMPTY
(&
node
->
ôems
))

167 !
	`TAILQ_EMPTY
(&
node
->
ôems
)) {

168 
n
 = 
	`TAILQ_FIRST
(&
node
->
ôems
);

169 i‡(
	`˛i_ªmove_node
(
n
))

173 
CLI_CMD_NODE
:

174 
CLI_FILE_NODE
:

175 
CLI_ALIAS_NODE
:

176 
CLI_STR_NODE
:

182 i‡(
	`is_dúe˘‹y
(
node
))

183 
	`˛i_dñ_bö
(
node
);

185 
	`TAILQ_REMOVE
(&
∑ª¡
->
ôems
, 
node
, 
√xt
);

186 
	`˛i_‰ì
(
node
);

189 
	}
}

192 
˛i_node
 *

193 
	$__add_node
(c⁄° *
«me
, 
˛i_node
 *
∑ª¡
,

194 
ty≥
, 
˛i_funcs_t
 
func
, c⁄° *
sh‹t_desc
)

196 
˛i_node
 *
node
;

198 i‡(!
«me
)

199  
NULL
;

201 
ty≥
) {

202 
CLI_DIR_NODE
:

203 i‡(
∑ª¡
 && (
	`°rcmp
(
«me
, 
CLI_ROOT_NAME
) == 0))

204  
NULL
;

205 i‡(!
∑ª¡
 && 
	`°rcmp
(
«me
, 
CLI_ROOT_NAME
))

206  
NULL
;

207 i‡(
func
.
cfunc
)

208  
NULL
;

210 
CLI_CMD_NODE
:

211 i‡(!
∑ª¡
 || !
func
.
cfunc
)

212  
NULL
;

214 
CLI_FILE_NODE
:

215 i‡(!
∑ª¡
 || !
func
.
ffunc
)

216  
NULL
;

218 
CLI_ALIAS_NODE
:

219 i‡(!
∑ª¡
 || 
func
.
cfunc
)

220  
NULL
;

222 
CLI_STR_NODE
:

223 i‡(!
func
.
sfunc
 && !
sh‹t_desc
)

224  
NULL
;

227  
NULL
;

230 
node
 = 
	`˛i_Æloc
();

231 i‡(
node
 =
NULL
) {

232 
	`˛i_¥ötf
("%s: Nÿnode†À·\n", 
__func__
);

233  
NULL
;

236 
node
->
ty≥
 =Åype;

237 
node
->
∑ª¡
 =Öarent;

239 
ty≥
) {

240 
CLI_CMD_NODE
:

241 
CLI_ALIAS_NODE
:

242 
node
->
cfunc
 = 
func
.cfunc;

244 
CLI_FILE_NODE
:

245 
node
->
ffunc
 = 
func
.ffunc;

247 
CLI_DIR_NODE
:

248 
CLI_STR_NODE
:

253 
node
->
sh‹t_desc
 = short_desc;

254 
	`¢¥ötf
(
node
->
«me
, (node->name), "%s",Çame);

255 
node
->
«me_sz
 = 
	`°æí
“ode->
«me
);

257 i‡(
∑ª¡
)

258 
	`TAILQ_INSERT_HEAD
(&
∑ª¡
->
ôems
, 
node
, 
√xt
);

260  
node
;

261 
	}
}

264 
˛i_node
 *

265 
	$˛i_add_dú
(c⁄° *
«me
, 
˛i_node
 *
dú
)

267 
˛i
 *˛ò
this_˛i
;

268 *
¨gv
[
CLI_MAX_ARGVS
], *
p
;

269 
∑th
[
CLI_MAX_PATH_LENGTH
];

270 
˙t
, 
i
;

271 
˛i_node
 *
n
, *
ªt
;

272 
˛i_funcs_t
 
funcs
;

274 
	`RTE_ASSERT
(
˛i
 !
NULL
);

275 i‡(!
«me
)

276  
NULL
;

279 i‡(
	`˛i_föd_node
((*)(
uöçå_t
)
«me
, &
ªt
))

280  
ªt
;

283 
funcs
.
cfunc
 = 
NULL
;

285 
p
 = 
˛i
->
s¸©ch
;

286 i‡(!
dú
)

287 
dú
 = 
˛i
->
roŸ
.
tqh_fú°
;

289 
	`mem£t
(
∑th
, '\0', (path));

291 
p
 = 
˛i
->
s¸©ch
;

294 
	`°∫˝y
(
p
, 
«me
, 
CLI_MAX_SCRATCH_LENGTH
);

296 i‡(
p
[0] == '/') {

297 
dú
 = 
˛i
->
roŸ
.
tqh_fú°
;

298 
p
++;

299 
∑th
[0] = '/';

302 
˙t
 = 
	`πe_°πok
(
p
, "/", 
¨gv
, 
CLI_MAX_ARGVS
);

304 
n
 = 
NULL
;

305 
i
 = 0; i < 
˙t
; i++) {

307 
	`°rˇt
(
∑th
, 
¨gv
[
i
]);

309 i‡(
	`˛i_föd_node
(
∑th
, &
ªt
)) {

310 
dú
 = 
ªt
;

314 
n
 = 
	`__add_node
(
¨gv
[
i
], 
dú
, 
CLI_DIR_NODE
, 
funcs
, 
NULL
);

315 i‡(
n
 =
NULL
)

317 
dú
 = 
n
;

319  
n
;

320 
	}
}

323 
˛i_node
 *

324 
	$˛i_add_cmd
(c⁄° * 
«me
,

325 
˛i_node
 *
dú
, 
˛i_cfunc_t
 
func
,

326 c⁄° *
sh‹t_desc
)

328 
˛i_funcs_t
 
funcs
;

330 
funcs
.
cfunc
 = 
func
;

331  
	`__add_node
(
«me
, 
dú
, 
CLI_CMD_NODE
, 
funcs
, 
sh‹t_desc
);

332 
	}
}

335 
˛i_node
 *

336 
	$˛i_add_Æüs
(c⁄° *
«me
,

337 
˛i_node
 *
dú
,

338 c⁄° *
löe
, c⁄° *
sh‹t_desc
)

340 
˛i_node
 *
Æüs
;

341 
˛i_funcs_t
 
funcs
;

343 
funcs
.
cfunc
 = 
NULL
;

344 
Æüs
 = 
	`__add_node
(
«me
, 
dú
, 
CLI_ALIAS_NODE
, 
funcs
, 
sh‹t_desc
);

345 
Æüs
->
Æüs_°r
 = (c⁄° *)
	`°rdup
(
löe
);

347  
Æüs
;

348 
	}
}

351 
˛i_node
 *

352 
	$˛i_add_fûe
(c⁄° * 
«me
,

353 
˛i_node
 *
dú
, 
˛i_ffunc_t
 
func
,

354 c⁄° *
sh‹t_desc
)

356 
˛i_funcs_t
 
funcs
;

358 
funcs
.
ffunc
 = 
func
;

359  
	`__add_node
(
«me
, 
dú
, 
CLI_FILE_NODE
, 
funcs
, 
sh‹t_desc
);

360 
	}
}

364 
	$˛i_add_°r
(c⁄° * 
«me
, 
˛i_sfunc_t
 
func
, c⁄° *
°r
)

366  
	`˛i_ív_°rög
(
this_˛i
->
ív
, 
«me
, 
func
, 
°r
);

367 
	}
}

371 
	$˛i_add_åì
(
˛i_node
 *
∑ª¡
, 
˛i_åì
 *
åì
)

373 
˛i
 *˛ò
this_˛i
;

374 
˛i_åì
 *
t
;

375 
˛i_dú
 *
d
;

376 
˛i_cmd
 *
c
;

377 
˛i_fûe
 *
f
;

378 
˛i_Æüs
 *
a
;

379 
˛i_°r
 *
s
;

380 
˛i_node
 *
n
;

382 i‡(!
åì
)

385 i‡(!
∑ª¡
)

386 
∑ª¡
 = 
˛i
->
roŸ
.
tqh_fú°
;

388 
t
 = 
åì
;Å->
ty≥
 !
CLI_UNK_NODE
;Å++) {

389 
t
->
ty≥
) {

390 
CLI_DIR_NODE
:

391 
d
 = &
t
->
dú
;

393 i‡(!(
n
 = 
	`˛i_add_dú
(
d
->
«me
, 
∑ª¡
))) {

394 
	`RTE_LOG
(
ERR
, 
EAL
,

395 "Add dúe˘‹y %†Áûed\n", 
d
->
«me
);

398 i‡(
d
->
bö
)

399 
	`˛i_add_bö_∑th
(
d
->
«me
);

401 
∑ª¡
 = 
n
;

404 
CLI_CMD_NODE
:

405 
c
 = &
t
->
cmd
;

406 i‡(!
	`˛i_add_cmd
(
c
->
«me
, 
∑ª¡
,

407 
c
->
cfunc
, c->
sh‹t_desc
)) {

408 
	`RTE_LOG
(
ERR
, 
EAL
,

409 "Add comm™d %†Áûed\n", 
c
->
«me
);

414 
CLI_FILE_NODE
:

415 
f
 = &
t
->
fûe
;

416 i‡(!
	`˛i_add_fûe
(
f
->
«me
, 
∑ª¡
,

417 
f
->
ffunc
, f->
sh‹t_desc
)) {

418 
	`RTE_LOG
(
ERR
, 
EAL
,

419 "Add fûê%†Áûed\n", 
f
->
«me
);

424 
CLI_ALIAS_NODE
:

425 
a
 = &
t
->
Æüs
;

426 i‡(!
	`˛i_add_Æüs
(
a
->
«me
, 
∑ª¡
,

427 
a
->
Æüs_©r
,á->
sh‹t_desc
)) {

428 
	`RTE_LOG
(
ERR
, 
EAL
,

429 "Addálü†%†Áûed\n", 
a
->
«me
);

434 
CLI_STR_NODE
:

435 
s
 = &
t
->
°r
;

436 i‡(
	`˛i_add_°r
(
s
->
«me
, s->
sfunc
, s->
°rög
)) {

437 
	`RTE_LOG
(
ERR
, 
EAL
,

438 "Add såög %†Áûed\n", 
s
->
«me
);

443 
CLI_UNK_NODE
:

445 
	`RTE_LOG
(
ERR
, 
EAL
, "Unknow¿Nodêty≥ %d\n", 
t
->
ty≥
);

451 
	}
}

455 
	$˛i_execuã
()

457 
˛i
 *˛ò
this_˛i
;

458 
˛i_node
 *
node
;

459 
¨gc
, 
ªt
, 
sz
;

460 
g≠buf
 *
gb
 = 
˛i
->gb;

461 *
löe
, *
p
, *
hi°
;

463 
	`RTE_ASSERT
(
˛i
 !
NULL
);

465 
sz
 = 
	`gb_d©a_size
(
gb
);

466 
sz
 = 
	`RTE_MAX
(sz, 
CLI_MAX_PATH_LENGTH
);

468 
löe
 = 
	`Æloˇ
(
sz
 + 1);

469 i‡(!
löe
)

472 
	`mem£t
(
löe
, '\0', 
sz
 + 1);

475 
	`gb_c›y_to_buf
(
gb
, 
löe
, 
sz
);

478 
p
 = 
	`πe_°πrim
(
löe
);

479 i‡(!
	`°æí
(
p
))

482 i‡(
p
[0] == '#')

484 i‡(
p
[0] == '!') {

485 
hi°
 = 
	`˛i_hi°‹y_löe
(
	`©oi
(&
p
[1]));

486 i‡(!
hi°
) {

487 
	`˛i_¥ötf
("Unknow¿hi°‹yÜöênumbî %d\n", 
	`©oi
(&
p
[1]));

491 
	`°r˝y
(
löe
, 
hi°
);

492 #ifde‡
RTE_CLI_HOST_COMMANDS


493 } i‡(
p
[0] == '@') {

494 
ªt
 = 
	`˛i_sy°em
(&
p
[1]);

495 i‡(!
ªt
)

496 
	`˛i_hi°‹y_add
(
p
);

497  
ªt
;

500 
	`˛i_hi°‹y_add
(
p
);

503 
	`˛i_ív_sub°ôuti⁄
(
˛i
->
ív
, 
p
, 
sz
 - (∞- 
löe
));

505 
¨gc
 = 
	`πe_°rqtok
(
p
, " \r\n", 
˛i
->
¨gv
, 
CLI_MAX_ARGVS
);

507 i‡(!
¨gc
)

510 
node
 = 
	`˛i_föd_cmd
(
˛i
->
¨gv
[0]);

511 i‡(!
node
) {

512 
	`˛i_¥ötf
("** comm™dÇŸ found (%s)\n", 
˛i
->
¨gv
[0]);

516 
ªt
 = -1;

517 
node
->
ty≥
) {

518 
CLI_CMD_NODE
:

519 
˛i
->
exe_node
 = 
node
;

520 
ªt
 = 
node
->
	`cfunc
(
¨gc
, 
˛i
->
¨gv
);

521 
˛i
->
exe_node
 = 
NULL
;

524 
CLI_ALIAS_NODE
:

526 
	`˛i_hi°‹y_dñ
();

528 
˛i
->
s¸©ch
[0] = '\0';

531 i‡(
	`gb_d©a_size
(
gb
Ë> 
node
->
«me_sz
)

532 
	`gb_c›y_to_buf
(
˛i
->
gb
, cli->
s¸©ch
, 
	`gb_d©a_size
(gb));

534 
sz
 = 
	`°æí
(
˛i
->
s¸©ch
);

536 
	`gb_ª£t_buf
(
gb
);

538 
	`gb_°r_ö£π
(
gb
, (*)(
uöçå_t
)
node
->
Æüs_°r
,

539 
	`°æí
(
node
->
Æüs_°r
));

542 
sz
 = sz - 
node
->
«me_sz
;

543 i‡(
sz
 > 0)

544 
	`gb_°r_ö£π
(
gb
, &
˛i
->
s¸©ch
[
node
->
«me_sz
], 
sz
);

545 
ªt
 = 
	`˛i_execuã
();

548 
CLI_DIR_NODE
:

549 
	`˛i_¥ötf
("** (%sËi†®dúe˘‹y\n", 
˛i
->
¨gv
[0]);

552 
CLI_FILE_NODE
:

553 
	`˛i_¥ötf
("** (%sËi†®fûe\n", 
˛i
->
¨gv
[0]);

556 
CLI_STR_NODE
:

557 
	`˛i_¥ötf
("** (%sËi†®°rög\n", 
˛i
->
¨gv
[0]);

560 
CLI_UNK_NODE
:

562 
	`˛i_¥ötf
("** unknow¿ty≥ (%s)\n", 
˛i
->
¨gv
[0]);

565 
	`˛i_hi°‹y_ª£t
();

566  
ªt
;

567 
	}
}

571 
	$˛i_°¨t
(c⁄° *
msg
)

573 
c
;

575 
	`RTE_ASSERT
(
this_˛i
 !
NULL
);

577 
	`˛i_¥ötf
("\n** Vîsi⁄: %s, %†wôh%†timîs\n", 
	`πe_vîsi⁄
(),

578 (
msg
 =
NULL
) ? "Command Line Interface" : msg,

579 (
this_˛i
->
Êags
 & 
CLI_USE_TIMERS
) ? "" : "out");

581 
this_˛i
->
∂í
 =Åhis_˛i->
	`¥om±
(0);

584 
this_˛i
->
quô_Êag
 = 0;

586 
	`˛i_execuã_cmdfûes
();

588 !
this_˛i
->
quô_Êag
)

589 i‡(
	`˛i_pﬁl
(&
c
))

590 
	`˛i_öput
(&
c
, 1);

592 
	`˛i_¥ötf
("\n");

593 
	}
}

596 
	$˛i_°¨t_wôh_timîs
(c⁄° *
msg
)

598 
	`RTE_ASSERT
(
this_˛i
 !
NULL
);

600 
this_˛i
->
Êags
 |
CLI_USE_TIMERS
;

602 
	`˛i_°¨t
(
msg
);

603 
	}
}

606 
˛i_node
 *

607 
	$˛i_¸óã_roŸ
(c⁄° *
dú«me
)

609 
˛i_node
 *
roŸ
;

610 
˛i_funcs_t
 
funcs
;

612 
funcs
.
cfunc
 = 
NULL
;

615 
roŸ
 = 
	`__add_node
(
dú«me
, 
NULL
, 
CLI_DIR_NODE
, 
funcs
, NULL);

616 i‡(!
roŸ
)

617  
NULL
;

619 
	`TAILQ_INSERT_HEAD
(&
this_˛i
->
roŸ
,ÑoŸ, 
√xt
);

622 
	`£t_cwd
(
roŸ
);

624  
roŸ
;

625 
	}
}

629 
	$__deÁu…_¥om±
(
c⁄t
)

631 *
°r
 = 
	`˛i_cwd_∑th
();

632 
Àn
 = 0;

634 i‡(
	`°æí
(
°r
) > 1)

635 
°r
[
	`°æí
(str) - 1] = '\0';

637 
	`s¸n_cﬁ‹
(
SCRN_GREEN
, 
SCRN_NO_CHANGE
, 
SCRN_OFF
);

638 
Àn
 +
	`˛i_¥ötf
("%s:", (
c⁄t
) ? " >> " : "DPDK-cli");

639 
	`s¸n_cﬁ‹
(
SCRN_CYAN
, 
SCRN_NO_CHANGE
, 
SCRN_OFF
);

640 
Àn
 +
	`˛i_¥ötf
("%s", 
°r
);

641 
	`s¸n_cﬁ‹
(
SCRN_DEFAULT_FG
, 
SCRN_DEFAULT_BG
, 
SCRN_OFF
);

642 
Àn
 +
	`˛i_¥ötf
("> ");

644  
Àn
;

645 
	}
}

649 
	$˛i_öô
(
nb_íåõs
, 
uöt32_t
 
nb_hi°
)

651 
i
;

652 
size_t
 
size
;

653 
˛i
 *cli;

654 
˛i_node
 *
node
;

655 
˛i_node
 *
roŸ
;

657 
˛i
 = 
	`mÆloc
((cli));

658 i‡(
˛i
 =
NULL
) {

659 
	`RTE_LOG
(
ERR
, 
EAL
, "UnableÅoállocate CLI structure\n");

662 
	`mem£t
(
˛i
, '\0', (cli));

664 
this_˛i
 = 
˛i
;

666 
˛i
->
¥om±
 = 
__deÁu…_¥om±
;

668 i‡(
nb_íåõs
 == 0)

669 
nb_íåõs
 = 
CLI_DEFAULT_NB_NODES
;

670 i‡(
nb_íåõs
 == -1) {

671 
˛i
->
Êags
 |
CLI_NODES_UNLIMITED
;

672 
nb_íåõs
 = 
CLI_DEFAULT_NB_NODES
;

674 
˛i
->
nb_nodes
 = 
nb_íåõs
;

676 i‡(
nb_hi°
 =(
uöt32_t
)
CLI_DEFAULT_HISTORY
)

677 
nb_hi°
 = 
CLI_DEFAULT_HIST_LINES
;

679 
size
 = (
nb_íåõs
 * (
˛i_node
));

680 
˛i
->
node_mem
 = 
	`mÆloc
(
size
);

681 i‡(
˛i
->
node_mem
 =
NULL
) {

682 
	`RTE_LOG
(
ERR
, 
EAL
, "UnableÅoállocate CLIÇode structures\n");

683 
îr‹_exô
;

685 
	`mem£t
(
˛i
->
node_mem
, '\0', 
size
);

687 
˛i
->
nb_hi°
 =Çb_hist;

689 
	`TAILQ_INIT
(&
˛i
->
roŸ
);

690 
	`TAILQ_INIT
(&
˛i
->
‰ì_nodes
);

691 
	`TAILQ_INIT
(&
˛i
->
hñp_nodes
);

693 
	`CIRCLEQ_INIT
(&
˛i
->
‰ì_hi°
);

694 
	`CIRCLEQ_INIT
(&
˛i
->
hd_hi°
);

696 i‡(
	`s¸n_¸óã_wôh_deÁu…s
(
SCRN_THEME_ON
))

697 
îr‹_exô
;

699 
˛i
->
vt
 = 
	`vt100_£tup
();

700 i‡(!
˛i
->
vt
)

701 
îr‹_exô
;

703 
˛i
->
s¸©ch
 = 
	`ˇŒoc
(
CLI_MAX_SCRATCH_LENGTH
 + 1, 1);

704 i‡(!
˛i
->
s¸©ch
)

705 
îr‹_exô
;

707 
˛i
->
¨gv
 = 
	`ˇŒoc
(
CLI_MAX_ARGVS
, (*));

708 i‡(!
˛i
->
¨gv
)

709 
îr‹_exô
;

712 
node
 = 
˛i
->
node_mem
;

713 
i
 = 0; i < 
nb_íåõs
; i++, 
node
++)

714 
	`TAILQ_INSERT_TAIL
(&
˛i
->
‰ì_nodes
, 
node
, 
√xt
);

716 
roŸ
 = 
	`˛i_¸óã_roŸ
(
CLI_ROOT_NAME
);

717 i‡(!
roŸ
) {

718 
	`RTE_LOG
(
ERR
, 
EAL
, "UnableÅo createÑoot directory\n");

719 
îr‹_exô
;

723 
	`£t_cwd
(
roŸ
);

725 i‡(
	`˛i_£t_hi°‹y
(
nb_hi°
)) {

726 
	`RTE_LOG
(
ERR
, 
EAL
, "UnableÅo create history\n");

727 
îr‹_exô
;

731 
˛i
->
gb
 = 
	`gb_¸óã
();

732 i‡(!
˛i
->
gb
) {

733 
	`RTE_LOG
(
ERR
, 
EAL
, "UnableÅo create Gap Buffer\n");

734 
îr‹_exô
;

738 
˛i
->
ív
 = 
	`˛i_ív_¸óã
();

739 i‡(!
˛i
->
ív
)

740 
îr‹_exô
;

744 
îr‹_exô
:

745 
	`˛i_de°roy
();

747 
	}
}

750 
	$˛i_¸óã
()

752  
	`˛i_öô
(
CLI_DEFAULT_NODES
, 
CLI_DEFAULT_HIST_LINES
);

753 
	}
}

756 
	$˛i_¸óã_wôh_deÁu…s
()

758 i‡(
	`˛i_öô
(
CLI_DEFAULT_NODES
, 
CLI_DEFAULT_HIST_LINES
) == 0)

759  
	`˛i_£tup_wôh_deÁu…s
();

761 
	}
}

765 
	$˛i_de°roy
()

767 
˛i
 *˛ò
this_˛i
;

769 i‡(!
˛i
)

772 
	`gb_de°roy
(
˛i
->
gb
);

773 
	`vt100_‰ì
(
˛i
->
vt
);

774 
	`s¸n_de°roy
();

775 
	`˛i_hi°‹y_dñëe
();

777 
	`‰ì
(
˛i
->
s¸©ch
);

778 
	`‰ì
(
˛i
->
kûl
);

779 
	`‰ì
(
˛i
->
¨gv
);

780 
	`‰ì
(
˛i
->
hi°_mem
);

781 
	`‰ì
(
˛i
->
node_mem
);

782 
	`‰ì
(
˛i
);

784 
this_˛i
 = 
NULL
;

785 
	}
}

788 
	$˛i_£tup
(
˛i_¥om±_t
 
¥om±
, 
˛i_åì_t
 
deÁu…_func
)

790 i‡(!
this_˛i
)

794 
this_˛i
->
¥om±
 = (¥om± =
NULL
Ë? 
__deÁu…_¥om±
 :Örompt;

797 i‡(
deÁu…_func
 =
NULL
)

798 
deÁu…_func
 = 
˛i_deÁu…_åì_öô
;

801  
	`deÁu…_func
();

802 
	}
}

806 
	$˛i_£tup_wôh_deÁu…s
()

808  
	`˛i_£tup
(
NULL
, NULL);

809 
	}
}

813 
	$˛i_£tup_wôh_åì
(
˛i_åì_t
 
åì
)

815  
	`˛i_£tup
(
NULL
, 
åì
);

816 
	}
}

819 
˛i_¥om±_t


820 
	$˛i_£t_¥om±
(
˛i_¥om±_t
 
¥om±
)

822 
˛i
 *˛ò
this_˛i
;

823 
˛i_¥om±_t
 
ﬁd
;

825 
ﬁd
 = 
˛i
->
¥om±
;

826 
˛i
->
¥om±
 =Örompt;

828 i‡(
˛i
->
¥om±
 =
NULL
)

829 
˛i
->
¥om±
 = 
__deÁu…_¥om±
;

831  
ﬁd
;

832 
	}
}

838 
	$˛i_£t_lua_ˇŒback
–(*
func
)(*, const *))

840 
lua_dofûe
 = 
func
;

841 
	}
}

848 
	$˛i_execuã_cmdfûe
(c⁄° *
fûíame
)

850 i‡(
fûíame
 =
NULL
)

853 
	`gb_ª£t_buf
(
this_˛i
->
gb
);

855 i‡(
	`°r°r
(
fûíame
, ".lua") || strstr(filename, ".LUA") ) {

856 i‡(!
this_˛i
->
u£r_°©e
) {

857 
	`˛i_¥ötf
(">>> User State for CLIÇot set for Lua\n");

860 i‡(
lua_dofûe
) {

862 i‡(
	`lua_dofûe
(
this_˛i
->
u£r_°©e
, 
fûíame
) != 0)

865 
	`˛i_¥ötf
(">>> Lua isÇotÉnabled in configuration!\n");

867 
FILE
 *
fd
;

868 
buff
[256];

870 
fd
 = 
	`f›í
(
fûíame
, "r");

871 i‡(
fd
 =
NULL
)

875 
	`fgës
(
buff
, (buff), 
fd
))

876 
	`˛i_öput
(
buff
, 
	`°æí
(buff));

878 
	`f˛o£
(
fd
);

881 
	}
}

884 
	$˛i_execuã_cmdfûes
()

886 
i
, 
˙t
;

888 
˙t
 = 
this_˛i
->
cmd_fûes
.
idx
;

890 
i
 = 0; i < 
˙t
; i++) {

891 c⁄° *
∑th
;

892 i‡((
∑th
 = 
this_˛i
->
cmd_fûes
.
fûíame
[
i
]Ë=
NULL
)

895 i‡(
	`˛i_execuã_cmdfûe
(
∑th
))

898 
	`‰ì
((*)(
uöçå_t
)
∑th
);

899 
this_˛i
->
cmd_fûes
.
fûíame
[
i
] = 
NULL
;

901 
this_˛i
->
cmd_fûes
.
idx
 = 0;

903 
	}
}

	@lib/cli/cli.h

8 #i‚de‡
_CLI_H_


9 
	#_CLI_H_


	)

16 
	~<libgí.h
>

17 
	~<sys/queue.h
>

19 
	~<πe_comm⁄.h
>

20 
	~<πe_debug.h
>

21 
	~<πe_mem‹y.h
>

22 
	~<πe_≥r_lc‹e.h
>

24 
	~<˛i_comm⁄.h
>

25 
	~<˛i_ív.h
>

26 
	~<˛i_£¨ch.h
>

28 
	~<˛i_fûe.h
>

29 
	~<˛i_g≠buf.h
>

30 
	~<˛i_hñp.h
>

31 
	~<˛i_hi°‹y.h
>

32 
	~<˛i_m≠.h
>

34 
	~<πe_°rög_‚s.h
>

36 #ifde‡
__˝lu•lus


40 
	#CLI_USE_TIMERS
 0x0001

	)

41 
	#CLI_NODES_UNLIMITED
 0x0002

	)

42 
	#CLI_YIELD_IO
 0x0004

	)

44 
	#CLI_ROOT_NAME
 "/"

	)

45 
	#CLI_BIN_NAME
 "bö"

	)

48 
CLI_MAX_ARGVS
 = 64,

49 
CLI_DEFAULT_NB_NODES
 = 256,

50 
CLI_DEFAULT_HIST_LINES
 = 128,

51 
CLI_MAX_PATH_LENGTH
 = 2048,

52 
CLI_MAX_SCRATCH_LENGTH
 = 4096,

53 
CLI_NAME_LEN
 = 64,

54 
CLI_MAX_LIST_NODES
 = 128,

55 
CLI_MAX_BINS
 = 32,

56 
CLI_DEFAULT_NODES
 = 0,

57 
CLI_SCREEN_WIDTH
 = 80

60 
	#CLI_RECURSE_FLAG
 (1 << 0)

	)

61 
	#CLI_LONG_LIST_FLAG
 (1 << 1)

	)

65 
CLI_UNK_NODE
 = 0x0000,

66 
CLI_DIR_NODE
 = 0x0001,

67 
CLI_CMD_NODE
 = 0x0002,

68 
CLI_FILE_NODE
 = 0x0004,

69 
CLI_ALIAS_NODE
 = 0x0008,

70 
CLI_STR_NODE
 = 0x0010,

71 } 
	tnode_ty≥_t
;

74 
	#CLI_NODE_TYPES
 \

75 { "Unknown", "Dúe˘‹y", "Comm™d", "Fûe", "Alüs", "Såög", 
NULL
 }

	)

78 
CLI_EXE_TYPE
 = (
CLI_CMD_NODE
 | 
CLI_ALIAS_NODE
),

79 
CLI_ALL_TYPE
 = (
CLI_EXE_TYPE
 | 
CLI_FILE_NODE
 | 
CLI_DIR_NODE
),

80 
CLI_OTHER_TYPE
 = (
CLI_DIR_NODE
 | 
CLI_FILE_NODE
)

83 
˛i
;

84 
˛i_node
;

86 (*
˛i_cfunc_t
)(
	t¨gc
, **
	t¨gv
);

88 (*
˛i_ffunc_t
)(
	t˛i_node
 *
	tnode
, *
	tbuff
, 
	tÀn
,

89 
	tuöt32_t
 
	t›t
);

92 (*
˛i_¥om±_t
)(
	tc⁄töu©i⁄
);

93 (*
˛i_åì_t
)();

97 
	s˛i_node
 {

98 
TAILQ_ENTRY
(
˛i_node
Ë
√xt
;

99 
˛i_node
 *
∑ª¡
;

100 
«me
[
CLI_NAME_LEN
];

101 
uöt16_t
 
«me_sz
;

102 
uöt16_t
 
f°©e
;

103 
uöt16_t
 
fÊags
;

104 
uöt16_t
 
∑d0
;

105 
node_ty≥_t
 
ty≥
;

107 
˛i_cfunc_t
 
cfunc
;

108 
˛i_ffunc_t
 
ffunc
;

109 
˛i_sfunc_t
 
sfunc
;

111 c⁄° *
sh‹t_desc
;

112 c⁄° *
Æüs_°r
;

113 
size_t
 
foff£t
;

114 
size_t
 
fûe_size
;

115 *
fûe_d©a
;

116 
TAILQ_HEAD
(, 
˛i_node
Ë
ôems
;

117 } 
__πe_ˇche_Æig√d
;

119 
	#MAX_CMD_FILES
 16

	)

122 *
fûíame
[
MAX_CMD_FILES
];

123 
uöt32_t
 
idx
;

124 } 
	t˛i_fûes_t
;

126 
	s˛i
 {

127 
TAILQ_HEAD
(, 
˛i_node
Ë
roŸ
;

128 
CIRCLEQ_HEAD
(, 
˛i_hi°
Ë
hd_hi°
;

130 
uöt32_t
 
Êags
;

131 
uöt32_t
 
nb_nodes
;

132 vﬁ©ûê
uöt16_t
 
quô_Êag
;

134 
uöt16_t
 
∂í
;

136 
uöt32_t
 
nb_hi°
;

137 
˛i_fûes_t
 
cmd_fûes
;

138 
˛i_hi°
 *
cuº_hi°
;

139 
˛i_node
 *
bös
[
CLI_MAX_BINS
];

141 
˛i_node
 *
exe_node
;

143 
˛i_ív
 *
ív
;

144 
g≠buf
 *
gb
;

145 
˛i_vt100
 *
vt
;

146 **
¨gv
;

148 
˛i_¥om±_t
 
¥om±
;

149 *
s¸©ch
;

150 *
kûl
;

152 
˛i_node
 *
node_mem
;

153 
˛i_hi°
 *
hi°_mem
;

155 
TAILQ_HEAD
(, 
hñp_node
Ë
hñp_nodes
;

156 
TAILQ_HEAD
(, 
˛i_node
Ë
‰ì_nodes
;

157 
CIRCLEQ_HEAD
(, 
˛i_hi°
Ë
‰ì_hi°
;

158 *
u£r_°©e
;

159 } 
__πe_ˇche_Æig√d
;

161 
RTE_DECLARE_PER_LCORE
(
˛i
 *, cli);

162 
	#this_˛i
 
	`RTE_PER_LCORE
(
˛i
)

	)

165 
	#DISPLAY_LINE
 (1 << 0)

	)

166 
	#CLEAR_TO_EOL
 (1 << 1)

	)

167 
	#DISPLAY_PROMPT
 (1 << 2)

	)

168 
	#PROMPT_CONTINUE
 (1 << 3)

	)

169 
	#DELETE_CHAR
 (1 << 4)

	)

170 
	#CLEAR_LINE
 (1 << 5)

	)

172 
	#CLI_DEFAULT_TREE
 (1 << 16)

	)

174 
ölöe
 

175 
˛i_£t_Êag
(
uöt32_t
 
x
)

177 
this_˛i
->
Êags
 |
x
;

180 
ölöe
 

181 
˛i_˛r_Êag
(
uöt32_t
 
x
)

183 
this_˛i
->
Êags
 &~
x
;

186 
ölöe
 

187 
˛i_t°_Êag
(
uöt32_t
 
x
)

189  
this_˛i
->
Êags
 & 
x
;

193 
˛i_cfunc_t
 
cfunc
;

194 
˛i_ffunc_t
 
ffunc
;

195 
˛i_sfunc_t
 
sfunc
;

196 } 
	t˛i_funcs_t
;

198 
	s˛i_dú
 {

199 c⁄° *
«me
;

200 
uöt8_t
 
bö
;

203 
	s˛i_cmd
 {

204 c⁄° *
«me
;

205 
˛i_cfunc_t
 
cfunc
;

206 c⁄° *
sh‹t_desc
;

209 
	s˛i_Æüs
 {

210 c⁄° *
«me
;

211 c⁄° *
Æüs_©r
;

212 c⁄° *
sh‹t_desc
;

215 
	s˛i_fûe
 {

216 c⁄° *
«me
;

217 
˛i_ffunc_t
 
ffunc
;

218 c⁄° *
sh‹t_desc
;

221 
	s˛i_°r
 {

222 c⁄° *
«me
;

223 
˛i_sfunc_t
 
sfunc
;

224 c⁄° *
°rög
;

227 
	s˛i_åì
 {

228 
node_ty≥_t
 
ty≥
;

230 
˛i_dú
 
dú
;

231 
˛i_cmd
 
cmd
;

232 
˛i_fûe
 
fûe
;

233 
˛i_Æüs
 
Æüs
;

234 
˛i_°r
 
°r
;

239 
	#c_dú
(
n
Ë{ 
CLI_DIR_NODE
, .
dú
 = {“), 0} }

	)

240 
	#c_bö
(
n
Ë{ 
CLI_DIR_NODE
, .
dú
 = {“), 1} }

	)

241 
	#c_cmd
(
n
, 
f
, 
h
Ë{ 
CLI_CMD_NODE
, .
cmd
 = {“), (f), (h)} }

	)

242 
	#c_fûe
(
n
, 
rw
, 
h
Ë{ 
CLI_FILE_NODE
, .
fûe
 = {“), (rw), (h)} }

	)

243 
	#c_Æüs
(
n
, 
l
, 
h
Ë{ 
CLI_ALIAS_NODE
, .
Æüs
 = {“), (l), (h)} }

	)

244 
	#c_°r
(
n
, 
f
, 
s
Ë{ 
CLI_STR_NODE
, .
°r
 = {“), (f), (s)} }

	)

245 
	#c_íd
(Ë{ 
CLI_UNK_NODE
, .
dú
 = { 
NULL
 } }

	)

247 
ölöe
 

248 
˛i_£t_u£r_°©e
(*
vÆ
)

250 
this_˛i
->
u£r_°©e
 = 
vÆ
;

261 
ölöe
 
˛i_node
 *

262 
gë_roŸ
()

264 
RTE_ASSERT
(
this_˛i
 !
NULL
);

265  
this_˛i
->
roŸ
.
tqh_fú°
;

276 
ölöe
 
˛i_node
 *

277 
gë_cwd
()

279 
RTE_ASSERT
(
this_˛i
 !
NULL
);

280  
this_˛i
->
bös
[0];

293 
ölöe
 

294 
£t_cwd
(
˛i_node
 *
node
)

296 
RTE_ASSERT
(
this_˛i
 !
NULL
);

297 
this_˛i
->
bös
[0] = 
node
;

306 
ölöe
 

307 
is_˛i_vÆid
()

309  (
this_˛i
) ? 1 : 0;

322 
ölöe
 

323 
is_m©ch
(c⁄° *
s1
, c⁄° *
s2
)

325 i‡(!
s1
 || !
s2
)

328 (*
s1
 !'\0'Ë&& (*
s2
 != '\0')) {

329 i‡(*
s1
++ !*
s2
++)

332 i‡(*
s1
 !*
s2
)

346 
ölöe
 

347 
is_node
(
˛i_node
 *
node
, 
uöt32_t
 
ty≥s
)

349  
node
->
ty≥
 & 
ty≥s
;

360 
ölöe
 

361 
is_comm™d
(
˛i_node
 *
node
)

363  
is_node
(
node
, 
CLI_CMD_NODE
);

374 
ölöe
 

375 
is_Æüs
(
˛i_node
 *
node
)

377  
is_node
(
node
, 
CLI_ALIAS_NODE
);

388 
ölöe
 

389 
is_fûe
(
˛i_node
 *
node
)

391  
is_node
(
node
, 
CLI_FILE_NODE
);

402 
ölöe
 

403 
is_dúe˘‹y
(
˛i_node
 *
node
)

405  
is_node
(
node
, 
CLI_DIR_NODE
);

416 
ölöe
 

417 
is_execuèbÀ
(
˛i_node
 *
node
)

419  
is_comm™d
(
node
Ë|| 
is_Æüs
(node);

430 
ölöe
 

431 
˛i_ußge
()

433 i‡(
this_˛i
 &&Åhis_˛i->
exe_node
) {

434 c⁄° *
p
 = 
this_˛i
->
exe_node
->
sh‹t_desc
;

436 
˛i_¥ötf
(" Ußge: %s\n", (
p
) ?Ö : "No description found");

449 
ölöe
 const *

450 
˛i_node_ty≥
(
˛i_node
 *
node
)

452 c⁄° *
node_°r
[] = 
CLI_NODE_TYPES
;

453 
node
->
ty≥
) {

454 
CLI_UNK_NODE
:

457 
CLI_DIR_NODE
:

458  
node_°r
[1];

459 
CLI_CMD_NODE
:

460  
node_°r
[2];

461 
CLI_FILE_NODE
:

462  
node_°r
[3];

463 
CLI_ALIAS_NODE
:

464  
node_°r
[4];

466  
node_°r
[0];

482 
ölöe
 *

483 
˛i_∑th_°rög
(
˛i_node
 *
node
, *
∑th
)

485 i‡(!
∑th
)

486 
∑th
 = 
this_˛i
->
s¸©ch
;

488 i‡(!
node
)

489 
node
 = 
gë_cwd
();

491 i‡(
node
->
∑ª¡
) {

492 
˛i_∑th_°rög
(
node
->
∑ª¡
, 
∑th
);

493 
°rˇt
(
∑th
, 
node
->
«me
);

494 
°rˇt
(
∑th
, "/");

496 
°r˝y
(
∑th
, "/");

498  
∑th
;

511 
ölöe
 *

512 
˛i_cwd_∑th
()

514  
˛i_∑th_°rög
(
gë_cwd
(), 
NULL
);

528 
ölöe
 

529 
˛i_pwd
(
˛i_node
 *
node
)

531 
˛i_¥ötf
("%s", 
˛i_∑th_°rög
(
node
, 
NULL
));

545 
ölöe
 

546 
˛i_£t_hi°‹y_size
(
uöt32_t
 
nb_hi°
)

548  
˛i_£t_hi°‹y
(
nb_hi°
);

559 
ölöe
 
uöt32_t


560 
˛i_gë_hi°‹y_size
()

562  
this_˛i
->
nb_hi°
;

573 
ölöe
 

574 
˛i_hi°‹y_li°
()

576 
˛i_hi°‹y_dump
();

585 
ölöe
 
˛i_node
 *

586 
˛i_roŸ_node
()

588  
this_˛i
->
roŸ
.
tqh_fú°
;

603 
˛i_öô
(
nb_íåõs
, 
uöt32_t
 
nb_hi°
);

611 
˛i_¸óã_wôh_deÁu…s
();

613 
˛i_¸óã
();

615 
˛i_£tup
(
˛i_¥om±_t
 
¥om±
, 
˛i_åì_t
 
deÁu…_func
);

623 
˛i_£tup_wôh_deÁu…s
();

634 
˛i_£tup_wôh_åì
(
˛i_åì_t
 
åì
);

644 
˛i_¥om±_t
 
˛i_£t_¥om±
(˛i_¥om±_à
¥om±
);

656 
˛i_node
 *
˛i_¸óã_roŸ
(c⁄° *
dú«me
);

666 
˛i_deÁu…_åì_öô
();

676 
˛i_de°roy
();

688 
˛i_°¨t
(c⁄° *
msg
);

700 
˛i_°¨t_wôh_timîs
(c⁄° *
msg
);

710 
˛i_execuã
();

722 
˛i_add_bö
(
˛i_node
 *
node
);

734 
˛i_dñ_bö
(
˛i_node
 *
node
);

746 
˛i_add_bö_∑th
(c⁄° *
∑th
);

760 
˛i_node
 *
˛i_add_dú
(c⁄° *
dú«me
, ˛i_nodê*
∑ª¡
);

778 
˛i_node
 *
˛i_add_cmd
(c⁄° *
«me
, ˛i_nodê*
dú
,

779 
˛i_cfunc_t
 
func
, c⁄° *
sh‹t_desc
);

797 
˛i_node
 *
˛i_add_Æüs
(c⁄° *
«me
, ˛i_nodê*
dú
,

798 c⁄° *
löe
, c⁄° *
sh‹t_desc
);

816 
˛i_node
 *
˛i_add_fûe
(c⁄° *
«me
, ˛i_nodê*
dú
,

817 
˛i_ffunc_t
 
func
, c⁄° *
sh‹t_desc
);

835 
˛i_add_°r
(c⁄° *
«me
, 
˛i_sfunc_t
 
func
, c⁄° *
°r
);

849 
˛i_add_åì
(
˛i_node
 *
dú
, 
˛i_åì
 *
åì
);

859 
ölöe
 

860 
˛i_add_cmdfûe
(c⁄° *
fûíame
)

862 i‡(
this_˛i
->
cmd_fûes
.
idx
 >
MAX_CMD_FILES
)

865 
this_˛i
->
cmd_fûes
.
fûíame
[this_˛i->cmd_fûes.
idx
++] =

866 
°rdup
(
fûíame
);

881 
˛i_execuã_cmdfûe
(c⁄° *
∑th
);

891 
˛i_execuã_cmdfûes
();

903 
˛i_ªmove_node
(
˛i_node
 *
node
);

913 
˛i_u£_timîs
();

923 
˛i_nodes_u∆imôed
();

929 
ölöe
 

930 
˛i_quô
()

932 
Ârötf
(
°dîr
, "Quiting....\n");

933 
this_˛i
->
quô_Êag
 = 1;

936 
˛i_£t_lua_ˇŒback
–(*
func
)(*, const *));

938 #ifde‡
__˝lu•lus


	@lib/cli/cli_auto_complete.c

7 
	~<‚m©ch.h
>

9 
	~<πe_°rög_‚s.h
>

11 
	~"˛i.h
"

12 
	~"˛i_öput.h
"

13 
	~"˛i_auto_com∂ëe.h
"

14 
	~"˛i_°rög_‚s.h
"

16 
uöt32_t


17 
	$_cﬁumn_cou¡
(
˛i_node
 **
nodes
, 
uöt32_t
 
node_˙t
, uöt32_à*
Àn
)

19 
uöt32_t
 
i
, 
mÀn
 = 8, 
cs
;

21 i‡(!
nodes
 || !
Àn
)

22  
CLI_SCREEN_WIDTH
 / 
mÀn
;

25 
i
 = 0; i < 
node_˙t
; i++)

26 
mÀn
 = 
	`RTE_MAX
(mÀn, 
	`°æí
(
nodes
[
i
]->
«me
));

27 
mÀn
++;

29 *
Àn
 = 
mÀn
;

30 
cs
 = 
CLI_SCREEN_WIDTH
 / 
mÀn
;

32  
cs
;

33 
	}
}

36 
	$_¥öt_nodes
(
˛i_node
 **
nodes
, 
uöt32_t
 
node_˙t
,

37 
uöt32_t
 
dú_⁄ly
, *
m©ch
, 
˛i_node
 **
ªt
)

39 
˛i_node
 *
n
;

40 
uöt32_t
 
i
, 
˙t
 = 0, 
c˙t
, 
found
 = 0, 
¶í
, 
csize
;

42 i‡(!
node_˙t
 || !
nodes
)

45 
c˙t
 = 
	`_cﬁumn_cou¡
(
nodes
, 
node_˙t
, &
csize
);

47 
¶í
 = (
m©ch
Ë? 
	`°æí
(match) : 0;

50 
i
 = 0; i < 
node_˙t
; i++) {

51 
n
 = 
nodes
[
i
];

53 i‡(
dú_⁄ly
 && !
	`is_dúe˘‹y
(
n
))

56 i‡(
¶í
 && 
	`°∫cmp
(
n
->
«me
, 
m©ch
, slen))

59 i‡(!
˙t
)

60 
	`˛i_¥ötf
("\n");

62 
	`˛i_¥ötf
("%-*s", 
csize
, 
n
->
«me
);

63 i‡((++
˙t
 % 
c˙t
) == 0)

64 
	`˛i_¥ötf
("\n");

67 i‡(
ªt
)

68 *
ªt
 = 
n
;

69 
found
++;

73 i‡(
˙t
 % 
c˙t
)

74 
	`˛i_¥ötf
("\n");

76  
found
;

77 
	}
}

80 
	$qs‹t_com∑ª
(c⁄° *
p1
, c⁄° *
p2
)

82 c⁄° 
˛i_node
 *
n1
, *
n2
;

84 
n1
 = *(c⁄° 
˛i_node
 *c⁄° *)
p1
;

85 
n2
 = *(c⁄° 
˛i_node
 *c⁄° *)
p2
;

87  
	`°rcmp
(
n1
->
«me
, 
n2
->name);

88 
	}
}

91 
	$com∂ëe_¨gs
(
¨gc
, **
¨gv
, 
uöt32_t
 
ty≥s
)

93 
˛i_node
 **
nodes
 = 
NULL
, *
node
 = NULL;

94 
g≠buf
 *
gb
;

95 *
m©ch
;

96 
uöt32_t
 
node_˙t
, 
found
 = 0, 
dú_⁄ly
 = 0, 
¶í
;

98 i‡(
¨gc
)

99 
m©ch
 = 
¨gv
[
¨gc
 - 1];

101 
m©ch
 = 
NULL
;

103 
gb
 = 
this_˛i
->gb;

105 i‡(
m©ch
) {

106 
uöt32_t
 
°y≥
;

107 
uöt32_t
 
¶ashes
;

108 *
p
;

111 
¶ashes
 = 
	`πe_°r˙t
(
m©ch
, '/');

113 i‡(
¶ashes
) {

115 i‡(
	`˛i_föd_node
(
m©ch
, &
node
))

116 i‡(
	`is_execuèbÀ
(
node
))

120 
node
 = 
	`˛i_œ°_node_ö_∑th
(
m©ch
);

122 i‡((
¶ashes
 =1Ë&& (
m©ch
 && (match[0] == '/'))) {

123 
m©ch
++;

124 
dú_⁄ly
++;

128 
°y≥
 = 
CLI_ALL_TYPE
;

129 i‡(
¨gc
 > 1)

130 
°y≥
 = 
CLI_OTHER_TYPE
;

132 
node_˙t
 = 
	`˛i_node_li°_wôh_ty≥
(
node
, 
°y≥
,

133 (* *)&
nodes
);

134 
p
 = 
	`°ºchr
(
m©ch
, '/');

135 i‡(
p
)

136 
m©ch
 = ++
p
;

138 
node_˙t
 = 
	`˛i_node_li°_wôh_ty≥
(
NULL
, 
ty≥s
,

139 (* *)&
nodes
);

141 i‡(
node_˙t
) {

142 
˛i_node
 *
mnode
 = 
NULL
;

144 i‡(
node_˙t
 > 1)

145 
	`qs‹t
(
nodes
, 
node_˙t
, (*), 
qs‹t_com∑ª
);

147 
found
 = 
	`_¥öt_nodes
(
nodes
, 
node_˙t
, 
dú_⁄ly
, 
m©ch
, &
mnode
);

153 i‡(
mnode
 && (
found
 == 1)) {

154 
˛i_node
 *
node
 = (˛i_nodê*)
mnode
;

155 *
s
;

156 
∆í
;

158 
s
 = 
	`°ºchr
(
m©ch
, '/');

159 i‡(
s
)

160 
m©ch
 = ++
s
;

162 
¶í
 = 
	`°æí
(
m©ch
);

163 
∆í
 = (
	`°æí
(
node
->
«me
Ë- 
¶í
);

165 i‡(
∆í
 > 0)

166 
	`gb_°r_ö£π
(
gb
, &
node
->
«me
[
¶í
], 
∆í
);

168 i‡(
	`is_dúe˘‹y
(
node
))

169 
	`gb_°r_ö£π
(
gb
, (*)(
uöçå_t
)"/", 1);

171 
	`gb_°r_ö£π
(
gb
, (*)(
uöçå_t
)" ", 1);

174 
	`˛i_node_li°_‰ì
(
nodes
);

176  
found
;

177 
	}
}

180 
	$˛i_auto_com∂ëe
()

182 *
¨gv
[
CLI_MAX_ARGVS
 + 1];

183 *
löe
;

184 
¨gc
, 
size
, 
ªt
;

186 
	`mem£t
(
¨gv
, '\0', (argv));

188 
size
 = 
	`gb_d©a_size
(
this_˛i
->
gb
);

189 i‡(!
size
)

192 
löe
 = 
	`Æloˇ
(
size
 + 1);

193 i‡(!
löe
)

195 
	`mem£t
(
löe
, '\0', 
size
 + 1);

197 
	`gb_c›y_to_buf
(
this_˛i
->
gb
, 
löe
, 
size
);

199 
¨gc
 = 
	`πe_°πok
(
löe
, " \r\n", 
¨gv
, 
CLI_MAX_ARGVS
);

201 i‡(
¨gc
 == 0) {

202 
ªt
 = 
	`com∂ëe_¨gs
(
¨gc
, 
¨gv
, 
CLI_ALL_TYPE
);

204 i‡(
ªt
)

205 
	`˛i_ªdi•œy_löe
();

210 i‡(
	`gb_gë_¥ev
(
this_˛i
->
gb
) != ' ') {

211 i‡(
¨gc
 == 1)

212 
ªt
 = 
	`com∂ëe_¨gs
(
¨gc
, 
¨gv
, 
CLI_ALL_TYPE
);

214 
ªt
 = 
	`com∂ëe_¨gs
(
¨gc
, 
¨gv
,

215 
CLI_FILE_NODE
 | 
CLI_DIR_NODE
);

218 i‡(
ªt
)

219 
	`˛i_ªdi•œy_löe
();

221 *
ßve
 = 
	`Æloˇ
(
size
 + 1);

223 i‡(!
ßve
)

226 
	`mem£t
(
ßve
, '\0', 
size
 + 1);

229 
	`gb_c›y_to_buf
(
this_˛i
->
gb
, 
ßve
, 
size
);

232 
	`gb_°r_ö£π
(
this_˛i
->
gb
, (*)(
uöçå_t
)"-?", 2);

234 
	`˛i_execuã
();

237 
	`gb_ª£t_buf
(
this_˛i
->
gb
);

240 
	`gb_°r_ö£π
(
this_˛i
->
gb
, 
ßve
, 
size
);

242 
	`˛i_ªdi•œy_löe
();

244 
	}
}

	@lib/cli/cli_auto_complete.h

7 #i‚de‡
_CLI_AUTO_COMPLETE_H_


8 
	#_CLI_AUTO_COMPLETE_H_


	)

16 
	~"˛i.h
"

18 #ifde‡
__˝lu•lus


28 
˛i_auto_com∂ëe
();

30 #ifde‡
__˝lu•lus


	@lib/cli/cli_cmap.c

25 
	~<°dio.h
>

26 
	~<°dlib.h
>

27 
	~<°rög.h
>

28 
	~<gë›t.h
>

29 
	~<°döt.h
>

30 
	~<uni°d.h
>

31 
	~<f˙é.h
>

33 
	~"˛i_cm≠.h
"

35 *
	gmodñ_«me
;

38 
	$cm≠_˝u_modñ
()

40  
modñ_«me
;

41 
	}
}

44 
	$as_°r
(c⁄° *
löe
)

46 i‡(*
löe
 != ':')

47  
	`as_°r
(
löe
 + 1);

48  
löe
 + 1;

49 
	}
}

52 
	$as_öt
(c⁄° *
löe
)

54  
	`©oi
(
	`as_°r
(
löe
));

55 
	}
}

57 
lc‹e_t
 *

58 
	$√w_lc‹e
(c⁄° *
löe
, 
lc‹e_t
 *
ª°
)

60 
lc‹e_t
 *
lc
 = 
	`ˇŒoc
(1, (lcore_t));

62 
lc
->
√xt
 = 
ª°
;

63 
lc
->
u
.
lid
 = 
	`as_öt
(
löe
);

65  
lc
;

66 
	}
}

68 
lc‹e_t
 *

69 
	$£t_øw_sockë_id
(c⁄° *
löe
, 
lc‹e_t
 *
lc
)

71 
lc
->
u
.
sid
 = 
	`as_öt
(
löe
);

72  
lc
;

73 
	}
}

75 
lc‹e_t
 *

76 
	$£t_øw_c‹e_id
(c⁄° *
löe
, 
lc‹e_t
 *
lc
)

78 
lc
->
u
.
cid
 = 
	`as_öt
(
löe
);

79  
lc
;

80 
	}
}

82 
lc‹e_t
 *

83 
	$£t_modñ_«me
(c⁄° *
löe
, 
lc‹e_t
 *
lc
)

85 i‡(!
modñ_«me
)

86 
modñ_«me
 = 
	`°rdup
(
	`as_°r
(
löe
));

87  
lc
;

88 
	}
}

91 
	$gë_√xt_thªad_id
(c⁄° 
lc‹e_t
 *
lc
, 
sockë_id
, 
c‹e_id
)

93 i‡(
lc
 =
NULL
)

95 i‡(
lc
->
u
.
sid
 =
sockë_id
 &&Üc->u.
cid
 =
c‹e_id
)

96  
lc
->
u
.
tid
 + 1;

97  
	`gë_√xt_thªad_id
(
lc
->
√xt
, 
sockë_id
, 
c‹e_id
);

98 
	}
}

100 
lc‹e_t
 *

101 
	$£t_thªad_id_°r
(c⁄° *
unu£d
, 
lc‹e_t
 *
lc
)

103 ()
unu£d
;

104 
lc
->
u
.
tid
 = 
	`gë_√xt_thªad_id
÷c->
√xt
,Üc->u.
sid
,Üc->u.
cid
);

105  
lc
;

106 
	}
}

108 
lc‹e_t
 *

109 
	$ign‹e_löe
(c⁄° *
unu£d
, 
lc‹e_t
 *
lc
)

111 ()
unu£d
;

112  
lc
;

113 
	}
}

115 
do_löe_‚


116 
	$gë_m©chög_a˘i⁄
(c⁄° *
löe
)

118 
a˘i⁄
 
a˘i⁄s
[] = {

119 { "¥o˚ss‹", 
√w_lc‹e
 },

120 { "physiˇ»id", 
£t_øw_sockë_id
 },

121 { "c‹êid", 
£t_øw_c‹e_id
 },

122 { "modñÇame", 
£t_modñ_«me
 },

123 { "\n", 
£t_thªad_id_°r
 },

124 { 
NULL
, NULL }

126 
a˘i⁄
 *action;

128 
a˘i⁄
 = 
a˘i⁄s
;á˘i⁄->
‚
 !
NULL
; ++action)

129 i‡(
	`°∫cmp
(
a˘i⁄
->
desc
, 
löe
, 
	`°æí
(action->desc)) == 0)

130  
a˘i⁄
->
‚
;

132  
ign‹e_löe
;

133 
	}
}

140 
	$ªm≠
(
lc‹e_t
 *
lc
,

141 
‰om
,

142 
to
,

143 
gëãr_‚
 
gë
,

144 
£âî_‚
 
£t
)

146 i‡(
lc
) {

147 i‡(
	`gë
(
lc
Ë=
‰om
)

148 
	`£t
(
lc
, 
to
);

150 
	`ªm≠
(
lc
->
√xt
, 
‰om
, 
to
, 
gë
, 
£t
);

152 
	}
}

158 
lc‹e_t
 *

159 
	$˛o£°_gã
(
lc‹e_t
 *
lc
,Üc‹e_à*
£l
, 
v
, 
gëãr_‚
 
gë
)

161 i‡(
lc
 =
NULL
)

162  
£l
;

164 i‡(
	`gë
(
lc
Ë>
v
 && (
£l
 =
NULL
 || get(sel) - v > get(lc) - v))

165  
	`˛o£°_gã
(
lc
->
√xt
,Üc, 
v
, 
gë
);

167  
	`˛o£°_gã
(
lc
->
√xt
, 
£l
, 
v
, 
gë
);

168 
	}
}

176 
	$zîo_ba£
(
lc‹e_t
 *
hód
, 
gëãr_‚
 
gë
, 
£âî_‚
 
£t
)

178 
id
 = 0;

179 
lc‹e_t
 *
lc
;

181 (
lc
 = 
	`˛o£°_gã
(
hód
, 
NULL
, 
id
, 
gë
)) != NULL) {

182 
	`ªm≠
(
lc
, 
	`gë
÷c), 
id
, 
gë
, 
£t
);

183 ++
id
;

185 
	}
}

188 
	$gë_™d_‰ì_lc‹e_öfo
(
lc‹e_t
 *
lc
, 
lc_öfo_t
 *
gë
)

190 i‡(
lc
) {

191 
	`gë_™d_‰ì_lc‹e_öfo
(
lc
->
√xt
, 
gë
 + 1);

192 
gë
->
w‹d
 = 
lc
->
u
.word;

193 
	`‰ì
(
lc
);

195 
	}
}

197 
ölöe
 

198 
	$cou¡_c‹es
(
lc‹e_t
 *
lc‹es
)

200 
num
 = 0;

202 
lc‹es
) {

203 
lc‹es
 =Üc‹es->
√xt
;

204 
num
++;

206  
num
;

207 
	}
}

210 
	$my_gëlöe
(**
löe
, 
size_t
 *
löe_sz
, 
fd
)

212 *
l
, 
c
;

213 
size_t
 
sz
, 
i
;

215 i‡(*
löe
 =
NULL
) {

216 i‡(*
löe_sz
 == 0)

217 *
löe_sz
 = 
MAX_LINE_SIZE
;

218 
l
 = 
	`mÆloc
(*
löe_sz
);

219 i‡(
l
 =
NULL
)

221 *
löe
 = 
l
;

223 
l
 = *
löe
;

225 
i
 = 0, 
sz
 = 0; i < *
löe_sz
; i++) {

226 i‡(
	`ªad
(
fd
, &
c
, 1) != 1)

228 *
l
++ = 
c
;

229 
sz
++;

230 i‡(
c
 == '\n')

233 *
l
 = '\0';

234  
sz
;

235 
	}
}

237 
	#MAX_CNT
 256

	)

238 
lc_öfo_t
 
	glc‹e_öfo
[
MAX_CNT
];

240 
cm≠
 *

241 
	$cm≠_¸óã
()

243 
fd
;

244 *
löe
 = 
NULL
;

245 
cm≠
 *cmap;

246 
lc_öfo_t
 *
lc_öfo
 = &
lc‹e_öfo
[0];

247 
size_t
 
löe_sz
 = 0;

248 
lc‹e_t
 *
lc‹es
 = 
NULL
;

250 
	`mem£t
(
lc‹e_öfo
, '\0', (lcore_info));

252 
cm≠
 = 
	`mÆloc
((cmap));

253 i‡(!
cm≠
)

254  
NULL
;

256 i‡–(
fd
 = 
	`›í
(
PROC_CPUINFO
, 
O_RDONLY
)) < 0) {

257 
	`Ârötf
(
°dîr
, "Cannot open %s onÅhis system\n",

258 
PROC_CPUINFO
);

259 
	`‰ì
(
cm≠
);

260  
NULL
;

263 
	`my_gëlöe
(&
löe
, &
löe_sz
, 
fd
) >= 0)

264 
lc‹es
 = 
	`gë_m©chög_a˘i⁄
(
löe
) (line,Ücores);

266 i‡(
fd
Ë
	`˛o£
(fd);

267 i‡(
löe
Ë
	`‰ì
(line);

269 
	`zîo_ba£
(
lc‹es
, 
cm≠_sockë_id
, 
cm≠_£t_sockë_id
);

270 
	`zîo_ba£
(
lc‹es
, 
cm≠_c‹e_id
, 
cm≠_£t_c‹e_id
);

272 
cm≠
->
löfo
 = 
lc_öfo
;

274 
cm≠
->
modñ
 = 
modñ_«me
;

275 
cm≠
->
num_c‹es
 = 
	`cou¡_c‹es
(
lc‹es
);

276 
cm≠
->
sid_˙t
 = 
	`cm≠_˙t
(
lc‹es
, 
cm≠_sockë_id
);

277 
cm≠
->
cid_˙t
 = 
	`cm≠_˙t
(
lc‹es
, 
cm≠_c‹e_id
);

278 
cm≠
->
tid_˙t
 = 
	`cm≠_˙t
(
lc‹es
, 
cm≠_thªad_id
);

280 
	`gë_™d_‰ì_lc‹e_öfo
(
lc‹es
, 
lc_öfo
);

282  
cm≠
;

283 
	}
}

286 
	$cm≠_‰ì
(
cm≠
 *cmap)

288 
	`‰ì
(
cm≠
);

289 
	}
}

296 
	#°∫ˇtf
(
de°
, 
fmt
, ...) do { \

297 
_buff
[1024]; \

298 
	`¢¥ötf
(
_buff
, (_buff), 
fmt
, ## 
__VA_ARGS__
); \

299 
	`°∫ˇt
(
de°
, 
_buff
, (de°Ë- 
	`°æí
(dest) - 1); \

300 } 0)

	)

302 
__ölöe__
 
uöt8_t


303 
	$s˘
(
cm≠
 *
cm
, 
uöt8_t
 
s
, uöt8_à
c
, uöt8_à
t
) {

304 
lc_öfo_t
 *
lc
 = 
cm
->
löfo
;

305 
uöt8_t
 
i
;

307 
i
 = 0; i < 
cm
->
num_c‹es
; i++, 
lc
++)

308 i‡(
lc
->
sid
 =
s
 &&Üc->
cid
 =
c
 &&Üc->
tid
 =
t
)

309  
lc
->
lid
;

312 
	}
}

	@lib/cli/cli_cmap.h

7 #i‚de‡
__CLI_CMAP_H


8 
	#__CLI_CMAP_H


	)

10 
	~<°döt.h
>

12 
	#MAX_LINE_SIZE
 4096

	)

14 
	#PROC_CPUINFO
 "/¥oc/˝uöfo"

	)

18 
uöt8_t
 
	mlid
;

19 
uöt8_t
 
	msid
;

20 
uöt8_t
 
	mcid
;

21 
uöt8_t
 
	mtid
;

23 
uöt32_t
 
	mw‹d
;

24 } 
	tlc_öfo_t
;

26 
	slc‹e
 {

27 
lc‹e
 *
	m√xt
;

28 
lc_öfo_t
 
	mu
;

29 } 
	tlc‹e_t
;

31 
	scm≠
 {

32 
uöt16_t
 
	mnum_c‹es
;

33 
uöt16_t
 
	msid_˙t
;

34 
uöt16_t
 
	mcid_˙t
;

35 
uöt16_t
 
	mtid_˙t
;

36 
lc_öfo_t
 *
	mlöfo
;

37 *
	mmodñ
;

40 
	glc‹e_t
 *(*
	tdo_löe_‚
)(c⁄° *
	tlöe
, 
	tlc‹e_t
 *);

41 (*
	tgëãr_‚
)(c⁄° 
	tlc‹e_t
 *);

42 (*
	t£âî_‚
)(
	tlc‹e_t
 *, 
	t√w_vÆ
);

44 
	sa˘i⁄
 {

45 c⁄° *
desc
;

46 
do_löe_‚
 
‚
;

47 } 
	ta˘i⁄_t
;

55 
cm≠
 *
	`cm≠_¸óã
();

63 *
	`cm≠_˝u_modñ
();

71 
	`cm≠_‰ì
(
cm≠
 *cmap);

81 
ölöe
 

82 
	$cm≠_sockë_id
(c⁄° 
lc‹e_t
 *
lc
)

84  
lc
->
u
.
sid
;

85 
	}
}

97 
ölöe
 

98 
	$cm≠_£t_sockë_id
(
lc‹e_t
 *
lc
, 
v
)

100 
lc
->
u
.
sid
 = 
v
;

101 
	}
}

111 
ölöe
 

112 
	$cm≠_c‹e_id
(c⁄° 
lc‹e_t
 *
lc
)

114  
lc
->
u
.
cid
;

115 
	}
}

127 
ölöe
 

128 
	$cm≠_£t_c‹e_id
(
lc‹e_t
 *
lc
, 
v
)

130 
lc
->
u
.
cid
 = 
v
;

131 
	}
}

141 
ölöe
 

142 
	$cm≠_thªad_id
(c⁄° 
lc‹e_t
 *
lc
)

144  
lc
->
u
.
tid
;

145 
	}
}

155 
ölöe
 

156 
	$cm≠_˙t
(
lc‹e_t
 *
lc
, 
gëãr_‚
 
gë
)

158 
˙t
 = 0;

160 i‡(!
gë
)

161  
˙t
;

163 
lc
) {

164 i‡(
˙t
 < 
	`gë
(
lc
))

165 
˙t
 = 
	`gë
(
lc
);

166 
lc
 =Üc->
√xt
;

168  
˙t
 + 1;

169 
	}
}

	@lib/cli/cli_cmds.c

7 
	~<°dio.h
>

9 
	~<πe_vîsi⁄.h
>

10 
	~<πe_cy˛es.h
>

11 
	~<πe_timî.h
>

12 
	~<πe_dev¨gs.h
>

13 
	~<πe_pci.h
>

14 
	~<πe_debug.h
>

15 
	~<πe_log.h
>

16 
	~<πe_°rög_‚s.h
>

18 
	~"˛i.h
"

19 
	~"˛i_öput.h
"

20 
	~"˛i_cmds.h
"

21 
	~"˛i_cm≠.h
"

22 
	~"˛i_m≠.h
"

23 
	~"˛i_fûe.h
"

24 
	~"˛i_hñp.h
"

25 
	~"˛i_°rög_‚s.h
"

28 
	$__¥öt_hñp
(
˛i_node
 *
node
, *
£¨ch
)

30 
˛i_node
 *
cmd
;

32 i‡(!
node
)

33 
node
 = 
	`gë_cwd
();

34 i‡(!
	`is_dúe˘‹y
(
node
))

37 
	`TAILQ_FOREACH
(
cmd
, &
node
->
ôems
, 
√xt
) {

38 i‡(
	`is_execuèbÀ
(
cmd
)) {

39 i‡(
£¨ch
) {

40 i‡(
	`°rcmp
(
cmd
->
«me
, 
£¨ch
) == 0) {

41 
	`˛i_¥ötf
(" %-16†%s\n", 
cmd
->
«me
,

42 
cmd
->
sh‹t_desc
);

46 
	`˛i_¥ötf
(" %-16†%s\n", 
cmd
->
«me
,

47 
cmd
->
sh‹t_desc
);

51 
	}
}

54 
	$chñp_cmd
(
¨gc
, **
¨gv
)

56 
˛i
 *˛ò
this_˛i
;

57 
˛i_node
 *
bö
;

58 *
£¨ch
 = 
NULL
;

59 
i
, 
›t
, 
Æl
 = 0;

61 
›töd
 = 0;

62 (
›t
 = 
	`gë›t
(
¨gc
, 
¨gv
, "a?")) != -1) {

63 
›t
) {

64 '?': 
	`˛i_ußge
();  0;

65 'a': 
Æl
 = 1; ;

70 i‡(
›töd
 < 
¨gc
)

71 
£¨ch
 = 
¨gv
[
›töd
];

73 
	`˛i_¥ötf
("*** CLI Help ***\n");

74 
	`˛i_¥ötf
(" Use <command> -?Åo show usage forá command\n");

75 
	`˛i_¥ötf
(" Use !<NN>ÅoÉxecuteá historyÜine\n");

76 
	`˛i_¥ötf
(" Use @<host command>ÅoÉxecuteá host binary\n");

77 
	`˛i_¥ötf
(" Use Up/DownárrowsÅoáccess history commands\n\n");

78 
	`˛i_¥ötf
(" Use 'chelp -a'ÅoÜistáll commands\n");

80 i‡(
Æl
 == 0) {

82 
	`˛i_¥ötf
("*** Current directory commands ***\n");

84  
	`__¥öt_hñp
(
NULL
, 
£¨ch
);

87 
	`˛i_¥ötf
("*** AllÉxecutable commands inÖath ***\n");

90 
i
 = 0; i < 
CLI_MAX_BINS
; i++) {

91 
bö
 = 
˛i
->
bös
[
i
];

92 i‡(
bö
 =
NULL
)

95 
	`˛i_¥ötf
("%s:\n", 
bö
->
«me
);

97 i‡(
	`__¥öt_hñp
(
bö
, 
£¨ch
))

102 
	}
}

105 
	$cd_cmd
(
¨gc
, **
¨gv
)

107 
˛i_node
 *
node
;

109 i‡(
¨gc
 > 1) {

110 i‡(!
	`°rcmp
(
¨gv
[1], "-?")) {

111 
	`˛i_ußge
();

115 i‡(!
	`˛i_föd_node
(
¨gv
[1], &
node
)) {

116 
	`˛i_¥ötf
("** InvÆid dúe˘‹y: %s\n", 
¨gv
[1]);

119 
	`£t_cwd
(
node
);

123 
	}
}

126 
	$pwd_cmd
(
¨gc
, **
¨gv
)

128 *
°r
 = 
	`˛i_cwd_∑th
();

130 i‡(
¨gc
 > 1 && !
	`°rcmp
(
¨gv
[1], "-?")) {

131 
	`˛i_ußge
();

136 i‡(
	`°æí
(
°r
) > 1)

137 
°r
[
	`°æí
(str) - 1] = '\0';

139 
	`˛i_¥ötf
("%s\n", 
°r
);

141 
	}
}

144 
	$__li°_l⁄g_dú
(
˛i_node
 *
node
,

145 
uöt32_t
 
ty≥
 
__πe_unu£d
, 
¨gs_t
 *
¨gs
)

147 
uöt16_t
 
Êags
 = 
¨gs
->
¨g1
.
u16
[3];

148 
uöt16_t
 
•c
 = 
¨gs
->
¨g2
.
u16
[0];

150 i‡(
	`is_Æüs
(
node
))

151 
	`˛i_¥ötf
(" %*s%-16†%†: %s\n", 
•c
, "",

152 
node
->
«me
, 
	`˛i_node_ty≥
“ode),Çode->
Æüs_°r
);

153 i‡(
	`is_comm™d
(
node
))

154 
	`˛i_¥ötf
(" %*s%-16†%†: %s\n", 
•c
, "",

155 
node
->
«me
, 
	`˛i_node_ty≥
“ode),Çode->
sh‹t_desc
);

157 
	`˛i_¥ötf
(" %*s%-16†%s\n", 
•c
, "",

158 
node
->
«me
, 
	`˛i_node_ty≥
(node));

160 i‡((
Êags
 & 
CLI_RECURSE_FLAG
Ë&& 
	`is_dúe˘‹y
(
node
)) {

161 
¨gs
->
¨g2
.
u16
[0] += 2;

162 
	`˛i_sˇn_dúe˘‹y
(
node
, 
__li°_l⁄g_dú
, 
ty≥
, 
¨gs
);

163 
¨gs
->
¨g2
.
u16
[0] = 
•c
;

167 
	}
}

170 
	$__li°_dú
(
˛i_node
 *
node
, 
uöt32_t
 
Êag
 
__πe_unu£d
, 
¨gs_t
 *
¨gs
)

173 
buf
[
CLI_NAME_LEN
 + 1];

174 
uöt16_t
 
˙t
 = 
¨gs
->
¨g1
.
u16
[0];

175 
uöt16_t
 
mÀn
 = 
¨gs
->
¨g1
.
u16
[1];

176 
uöt16_t
 
cﬁ
 = 
¨gs
->
¨g1
.
u16
[2];

177 
uöt16_t
 
Êags
 = 
¨gs
->
¨g1
.
u16
[3];

179 i‡(!
node
)

182 i‡(
	`is_dúe˘‹y
(
node
)) {

183 
dbuf
[
CLI_NAME_LEN
 + 1];

184 
	`¢¥ötf
(
dbuf
, (dbuf), "[%s]", 
node
->
«me
);

185 
	`¢¥ötf
(
buf
, (buf), "%-*s", 
mÀn
, 
dbuf
);

187 
	`¢¥ötf
(
buf
, (buf), "%-*s", 
mÀn
, 
node
->
«me
);

189 
	`˛i_¥ötf
("%s", 
buf
);

190 i‡((++
˙t
 % 
cﬁ
) == 0)

191 
	`˛i_¥ötf
("\n");

193 i‡((
Êags
 & 
CLI_RECURSE_FLAG
Ë&& 
	`is_dúe˘‹y
(
node
)) {

194 
	`˛i_¥ötf
("\n");

195 
¨gs
->
¨g1
.
u16
[0] = 0;

196 
	`˛i_sˇn_dúe˘‹y
(
node
, 
__li°_dú
, 
CLI_ALL_TYPE
, 
¨gs
);

197 
¨gs
->
¨g1
.
u16
[0] = 
˙t
;

198 
	`˛i_¥ötf
("\n");

201 
¨gs
->
¨g1
.
u16
[0] = 
˙t
;

203 
	}
}

206 
	$ls_cmd
(
¨gc
, **
¨gv
)

208 
˛i_node
 *
node
 = 
	`gë_cwd
();

209 
¨gs_t
 
¨gs
;

210 
uöt32_t
 
Êags
 = 0;

211 
›t
;

213 
›töd
 = 0;

214 (
›t
 = 
	`gë›t
(
¨gc
, 
¨gv
, "?rl")) != -1) {

215 
›t
) {

216 '?': 
	`˛i_ußge
();  0;

217 'r': 
Êags
 |
CLI_RECURSE_FLAG
; ;

218 'l': 
Êags
 |
CLI_LONG_LIST_FLAG
; ;

224 i‡(
›töd
 < 
¨gc
)

225 i‡(
	`˛i_föd_node
(
¨gv
[
›töd
], &
node
) == 0) {

226 
	`˛i_¥ötf
("InvÆid dúe˘‹y (%s)!!\n", 
¨gv
[
›töd
]);

230 
	`mem£t
(&
¨gs
, 0, (args));

232 
¨gs
.
¨g1
.
u16
[0] = 0;

233 
¨gs
.
¨g1
.
u16
[1] = 16;

234 
¨gs
.
¨g1
.
u16
[2] = 80 / 16;

235 
¨gs
.
¨g1
.
u16
[3] = 
Êags
;

236 
¨gs
.
¨g2
.
u16
[0] = 0;

238 i‡(
Êags
 & 
CLI_LONG_LIST_FLAG
)

239 
	`˛i_sˇn_dúe˘‹y
(
node
, 
__li°_l⁄g_dú
, 
CLI_ALL_TYPE
, &
¨gs
);

241 
	`˛i_sˇn_dúe˘‹y
(
node
, 
__li°_dú
, 
CLI_ALL_TYPE
, &
¨gs
);

243 
	`¥ötf
("\n");

245 
	}
}

248 
	$s¸n_cmd
(
¨gc
 
__πe_unu£d
, **
¨gv
 __rte_unused)

250 
	`˛i_˛ór_s¸ìn
();

252 
	}
}

255 
	$quô_cmd
(
¨gc
 
__πe_unu£d
, **
¨gv
 __rte_unused)

257 
	`˛i_quô
();

259 
	}
}

262 
	$hi°_cmd
(
¨gc
, **
¨gv
)

264 i‡(
¨gc
 > 1 && !
	`°rcmp
(
¨gv
[1], "-?"))

265 
	`˛i_ußge
();

267 
	`˛i_hi°‹y_li°
();

269 
	}
}

272 
	$m‹e_cmd
(
¨gc
, **
¨gv
)

274 
˛i_node
 *
node
;

275 *
buf
, 
c
;

276 
i
, 
Àn
, 
n
, 
k
, 
löes
 = 24;

277 
›t
;

279 
›töd
 = 0;

280 (
›t
 = 
	`gë›t
(
¨gc
, 
¨gv
, "?n:")) != -1) {

281 
›t
) {

282 '?': 
	`˛i_ußge
();  0;

283 'n': 
löes
 = 
	`©oi
(
›èrg
); ;

289 i‡(
›töd
 >
¨gc
)

292 
Àn
 = 256;

293 
buf
 = 
	`Æloˇ
(
Àn
 + 1);

294 i‡(!
buf
)

297 
i
 = 
›töd
; i < 
¨gc
; i++) {

298 
k
 = 0;

299 
node
 = 
	`˛i_fûe_›í
(
¨gv
[
i
], "r");

300 i‡(!
node
) {

301 
	`˛i_¥ötf
("** (%sËi†nŸá fûe\n", 
¨gv
[
i
]);

305 
n
 = 
	`˛i_ªadlöe
(
node
, 
buf
, 
Àn
);

306 i‡(
n
 > 0)

307 
	`˛i_¥ötf
("%s", 
buf
);

308 i‡(++
k
 >
löes
) {

309 
k
 = 0;

310 
c
 = 
	`˛i_∑u£
("M‹e", 
NULL
);

311 i‡((
c
 =
vt100_esˇ≥
) ||

312 (
c
 == 'q') || (c == 'Q'))

315 } 
n
 > 0);

316 
	`˛i_fûe_˛o£
(
node
);

319 
	`˛i_¥ötf
("\n");

322 
	}
}

329 
	#°∫ˇtf
(
de°
, 
fmt
, ...) do { \

330 
_buff
[1024]; \

331 
	`¢¥ötf
(
_buff
, (_buff), 
fmt
, ## 
__VA_ARGS__
); \

332 
	`°∫ˇt
(
de°
, 
_buff
, (de°Ë- 
	`°æí
(dest) - 1); \

333 } 0)

	)

335 
__ölöe__
 
uöt8_t


336 
	$s˘
(
cm≠
 *
cm
, 
uöt8_t
 
s
, uöt8_à
c
, uöt8_à
t
) {

337 
lc_öfo_t
 *
lc
 = 
cm
->
löfo
;

338 
uöt8_t
 
i
;

340 
i
 = 0; i < 
cm
->
num_c‹es
; i++, 
lc
++)

341 i‡(
lc
->
sid
 =
s
 &&Üc->
cid
 =
c
 &&Üc->
tid
 =
t
)

342  
lc
->
lid
;

345 
	}
}

348 
	$c‹e_cmd
(
¨gc
 
__πe_unu£d
, **
¨gv
 __rte_unused)

350 
cm≠
 *
c
;

351 
i
;

353 
c
 = 
	`cm≠_¸óã
();

355 
	`˛i_¥ötf
("CPU : %s", 
c
->
modñ
);

356 
	`˛i_¥ötf
(" %dÜcores, %u socket%s, %u core%sÖer socketánd "

358 
c
->
num_c‹es
,

359 
c
->
sid_˙t
, c->sid_cnt > 1 ? "s" : "",

360 
c
->
cid_˙t
, c->cid_cnt > 1 ? "s" : "",

361 
c
->
tid_˙t
, c->tid_cnt > 1 ? "s" : "");

363 
	`˛i_¥ötf
("Socket : ");

364 
i
 = 0; i < 
c
->
sid_˙t
; i++)

365 
	`˛i_¥ötf
("%4d ", 
i
);

366 
	`˛i_¥ötf
("\n");

368 
i
 = 0; i < 
c
->
cid_˙t
; i++) {

369 
	`˛i_¥ötf
(" C‹ê%3d : [%2d,%2d] ", 
i
,

370 
	`s˘
(
c
, 0, 
i
, 0), sct(c, 0, i, 1));

371 i‡(
c
->
sid_˙t
 > 1)

372 
	`˛i_¥ötf
("[%2d,%2d] ",

373 
	`s˘
(
c
, 1, 
i
, 0), sct(c, 1, i, 1));

374 i‡(
c
->
sid_˙t
 > 2)

375 
	`˛i_¥ötf
("[%2d,%2d] ",

376 
	`s˘
(
c
, 2, 
i
, 0), sct(c, 2, i, 1));

377 i‡(
c
->
sid_˙t
 > 3)

378 
	`˛i_¥ötf
("[%2d,%2d] ",

379 
	`s˘
(
c
, 3, 
i
, 0), sct(c, 3, i, 1));

380 
	`˛i_¥ötf
("\n");

383 
	`cm≠_‰ì
(
c
);

386 
	}
}

389 
	$huge_cmd
(
¨gc
 
__πe_unu£d
, **
¨gv
 __rte_unused)

391 i‡(
	`sy°em
("cat /proc/meminfo | grep -i huge"))

394 
	}
}

396 #ifde‡
CLI_DEBUG_CMDS


398 
	$sizes_cmd
(
¨gc
, **
¨gv
)

400 i‡(
¨gc
 > 1 && !
	`°rcmp
(
¨gv
[1], "-?")) {

401 
	`˛i_ußge
();

405 
	`˛i_¥ötf
(" sizeof(°ru˘ cliË %zu\n", (
˛i
));

406 
	`˛i_¥ötf
(" sizeof(°ru˘ cli_nodeË%zu\n", (
˛i_node
));

407 
	`˛i_¥ötf
(" sizeof◊rgs_tË %zu\n", (
¨gs_t
));

408 
	`˛i_¥ötf
(" TŸÆÇumbî o‡Node† %d\n", 
this_˛i
->
nb_nodes
);

409 
	`˛i_¥ötf
(" Numbî Hi°‹yÜöe† %d\n", 
this_˛i
->
nb_hi°
);

410 
	`˛i_¥ötf
(" CLI_DEFAULT_NB_NODES %d\n", 
CLI_DEFAULT_NB_NODES
);

411 
	`˛i_¥ötf
(" CLI_DEFAULT_HIST_LINES %d\n", 
CLI_DEFAULT_HIST_LINES
);

412 
	`˛i_¥ötf
(" CLI_MAX_SCRATCH_LENGTH %d\n", 
CLI_MAX_SCRATCH_LENGTH
);

413 
	`˛i_¥ötf
(" CLI_MAX_PATH_LENGTH %d\n", 
CLI_MAX_PATH_LENGTH
);

414 
	`˛i_¥ötf
(" CLI_NAME_LEN %d\n", 
CLI_NAME_LEN
);

415 
	`˛i_¥ötf
(" CLI_MAX_ARGVS %d\n", 
CLI_MAX_ARGVS
);

416 
	`˛i_¥ötf
(" CLI_MAX_BINS %d\n", 
CLI_MAX_BINS
);

419 
	}
}

423 
	$∑th_cmd
(
¨gc
 
__πe_unu£d
, **
¨gv
 __rte_unused)

425 
i
;

426 *
°r
;

428 
	`˛i_¥ötf
(" Path = .:");

429 
i
 = 1; i < 
CLI_MAX_BINS
; i++) {

430 i‡(
this_˛i
->
bös
[
i
] =
NULL
)

432 
°r
 = 
	`˛i_∑th_°rög
(
this_˛i
->
bös
[
i
], 
NULL
);

435 i‡(
	`°æí
(
°r
) > 1)

436 
°r
[
	`°æí
(str) - 1] = '\0';

438 
	`˛i_¥ötf
("%s:", 
°r
);

440 
	`˛i_¥ötf
("\n");

443 
	}
}

445 c⁄° *
	gc›yright
 =

479 
	$c›yright_fûe
(
˛i_node
 *
node
, *
buff
, 
Àn
, 
uöt32_t
 
Êags
)

482 i‡(
	`is_fûe_›í
(
Êags
)) {

483 
node
->
fûe_d©a
 = (*)(
uöçå_t
)
c›yright
;

484 
node
->
fûe_size
 = 
	`°æí
(
c›yright
);

485 
node
->
fÊags
 = 
CLI_DATA_RDONLY
;

486 i‡(
	`is_fûe_eq
(
Êags
, (
CLI_FILE_APPEND
 | 
CLI_FILE_WR
)))

487 
node
->
foff£t
 =Çode->
fûe_size
;

490  
	`˛i_fûe_h™dÀr
(
node
, 
buff
, 
Àn
, 
Êags
);

491 
	}
}

494 
	$vîsi⁄_fûe
(
˛i_node
 *
node
, *
buff
, 
Àn
, 
uöt32_t
 
Êags
)

496 c⁄° *
d©a
 = 
	`πe_vîsi⁄
();

498 i‡(
	`is_fûe_›í
(
Êags
)) {

499 
node
->
fûe_d©a
 = (*)(
uöçå_t
)
d©a
;

500 
node
->
fûe_size
 = 
	`°æí
(
d©a
);

501 
node
->
fÊags
 = 
CLI_DATA_RDONLY
;

502 i‡(
	`is_fûe_eq
(
Êags
, (
CLI_FILE_APPEND
 | 
CLI_FILE_WR
)))

503 
node
->
foff£t
 =Çode->
fûe_size
;

506  
	`˛i_fûe_h™dÀr
(
node
, 
buff
, 
Àn
, 
Êags
);

507 
	}
}

510 
	$¶ìp_cmd
(
¨gc
 
__πe_unu£d
, **
¨gv
)

512 
uöt32_t
 
˙t
 = (
	`©oi
(
¨gv
[1]) * 4);

514 i‡(
	`πe_gë_timî_hz
() == 0) {

515 
	`˛i_¥ötf
("rte_get_timer_hz()Ñeturned zero\n");

519 i‡(
	`˛i_u£_timîs
()) {

520 
˙t
--) {

521 
	`πe_timî_m™age
();

522 
	`πe_dñay_ms
(250);

525 
˙t
--)

526 
	`πe_dñay_ms
(250);

529 
	}
}

532 
	$dñay_cmd
(
¨gc
 
__πe_unu£d
, **
¨gv
)

534 
ms
 = 
	`©oi
(
¨gv
[1]);

535 
˙t
 = (
ms
 / 1000) * 4;

537 
˙t
--) {

538 i‡(
	`˛i_u£_timîs
())

539 
	`πe_timî_m™age
();

540 
	`πe_dñay_ms
(250);

541 
ms
 -= 250;

543 i‡(
ms
 > 0)

544 
	`πe_dñay_ms
(
ms
);

546 
	}
}

549 
	$mkdú_cmd
(
¨gc
, **
¨gv
)

551 i‡(
¨gc
 != 2) {

552 
	`˛i_¥ötf
("Must haveátÜeast oneÖath/driectory\n");

556 i‡(!
	`˛i_add_dú
(
¨gv
[1], 
	`gë_cwd
()))

559 
	}
}

562 
	$rm_cmd
(
¨gc
, **
¨gv
)

564 
˛i_node
 *
node
;

566 i‡(
¨gc
 != 2) {

567 
	`˛i_¥ötf
("usage:Ñm [dir|file|command]\n");

571 i‡(!
	`˛i_föd_node
(
¨gv
[1], &
node
)) {

572 
	`˛i_¥ötf
("U«bÀÅÿföd: %s\n", 
¨gv
[1]);

576  
	`˛i_ªmove_node
(
node
);

577 
	}
}

580 
	$vî_cmd
(c⁄° *
vÆ
 
__πe_unu£d
)

582  (*)(
uöçå_t
)
	`πe_vîsi⁄
();

583 
	}
}

585 
˛i_m≠
 
	g˛i_ív_m≠
[] = {

590 { -1, 
NULL
 }

593 c⁄° *
	g˛i_ív_hñp
[] = {

598 
NULL


602 
	$ív_cmd
(
¨gc
, **
¨gv
)

604 
˛i_m≠
 *
m
;

606 
m
 = 
	`˛i_m≠pög
(
˛i_ív_m≠
, 
¨gc
, 
¨gv
);

607 i‡(!
m
)

608 
	`˛i_cmd_îr‹
("Envú⁄míàcomm™dÉº‹:", "Env", 
¨gc
, 
¨gv
);

609 
m
->
ödex
) {

610 10: 
	`˛i_ív_show
(
this_˛i
->
ív
); ;

612 
	`˛i_¥ötf
(" \"%s\" = \"%s\"\n", 
¨gv
[2],

613 
	`˛i_ív_gë
(
this_˛i
->
ív
, 
¨gv
[2]));

615 30: 
	`˛i_ív_£t
(
this_˛i
->
ív
, 
¨gv
[2],árgv[3]); ;

616 40: 
	`˛i_ív_dñ
(
this_˛i
->
ív
, 
¨gv
[2]); ;

618 
	`˛i_hñp_show_group
("env");

622 
	}
}

625 
	$s¸ùt_cmd
(
¨gc
, **
¨gv
)

627 
i
;

629 i‡(
¨gc
 <= 1)

632 
i
 = 1; i < 
¨gc
; i++)

633 i‡(
	`˛i_execuã_cmdfûe
(
¨gv
[1]))

636 
	}
}

639 
	$echo_cmd
(
¨gc
, **
¨gv
)

641 
i
;

643 
i
 = 1; i < 
¨gc
; i++)

644 
	`˛i_¥ötf
("%†",
¨gv
[
i
]);

645 
	`˛i_¥ötf
("\n");

647 
	}
}

650 
	$vîsi⁄_cmd
(
¨gc
 
__πe_unu£d
, **
¨gv
 __rte_unused)

652 
	`˛i_¥ötf
("Vîsi⁄: %s\n", 
	`πe_vîsi⁄
());

654 
	}
}

656 
˛i_åì
 
	g˛i_deÁu…_åì
[] = {

657 
c_fûe
("c›yright", 
c›yright_fûe
, "DPDK copyright information"),

658 
c_fûe
("dpdk-vîsi⁄", 
vîsi⁄_fûe
, "DPDK version"),

659 
c_bö
("/sbin"),

661 
c_cmd
("dñay", 
dñay_cmd
, "delayáÇumber of milliseconds"),

662 
c_cmd
("¶ìp", 
¶ìp_cmd
, "delayáÇumber of seconds"),

663 
c_cmd
("chñp", 
chñp_cmd
, "CLI help - display information for DPDK"),

664 
c_cmd
("mkdú", 
mkdú_cmd
, "createá directory"),

665 
c_cmd
("rm", 
rm_cmd
, "removeá file or directory"),

666 
c_cmd
("ls", 
ls_cmd
, "ls [-lr] <dir> #Üist current directory"),

667 
c_cmd
("cd", 
cd_cmd
, "cd <dir> # change working directory"),

668 
c_cmd
("pwd", 
pwd_cmd
, "pwd # display current working directory"),

669 
c_cmd
("s¸ìn.˛ór", 
s¸n_cmd
, "screen.clear # clearÅhe screen"),

670 
c_cmd
("quô", 
quô_cmd
, "quit # quitÅheápplication"),

671 
c_cmd
("hi°‹y", 
hi°_cmd
, "history # displayÅhe current history"),

672 
c_cmd
("m‹e", 
m‹e_cmd
, "more <file> # displayá file content"),

673 #ifde‡
CLI_DEBUG_CMDS


674 
c_cmd
("sizes", 
sizes_cmd
, "sizes # display some internal sizes"),

676 
c_cmd
("cm≠", 
c‹e_cmd
, "cmap # displayÅhe core mapping"),

677 
c_cmd
("hugïages", 
huge_cmd
, "hugepages # display hugepage info"),

678 
c_cmd
("∑th", 
∑th_cmd
, "displayÅheÉxecutionÖath for commands"),

679 
c_cmd
("ív", 
ív_cmd
, "Show/del/get/setÉnvironment variables"),

680 
c_cmd
("s¸ùt", 
s¸ùt_cmd
, "loadándÖrocess cli command files"),

681 
c_cmd
("echo", 
echo_cmd
, "simpleÉchoá stringÅoÅhe screen"),

682 
c_cmd
("vîsi⁄", 
vîsi⁄_cmd
,"Display version information"),

685 
c_°r
("SHELL", 
NULL
, "CLI shell"),

686 
c_°r
("DPDK_VER", 
vî_cmd
, ""),

687 
c_íd
()

691 
	$˛i_deÁu…_åì_öô
()

693 
ªt
 = 0;

695 i‡(
this_˛i
->
Êags
 & 
CLI_DEFAULT_TREE
)

696  
ªt
;

698 
this_˛i
->
Êags
 |
CLI_DEFAULT_TREE
;

701 i‡((
ªt
 = 
	`˛i_add_åì
(
NULL
, 
˛i_deÁu…_åì
)) == 0)

702 
	`˛i_hñp_add
("Env", 
˛i_ív_m≠
, 
˛i_ív_hñp
);

704 i‡(
ªt
) {

705 
	`RTE_LOG
(
ERR
, 
EAL
, "UnableÅoádd commands or directoies\n");

706 
this_˛i
->
Êags
 &~
CLI_DEFAULT_TREE
;

709  
ªt
;

710 
	}
}

	@lib/cli/cli_cmds.h

7 #i‚de‡
_CLI_CMDS_H_


8 
	#_CLI_CMDS_H_


	)

16 #ifde‡
__˝lu•lus


28 
˛i_deÁu…_åì_öô
();

30 #ifde‡
__˝lu•lus


	@lib/cli/cli_common.h

7 #i‚de‡
_CLI_COMMON_H_


8 
	#_CLI_COMMON_H_


	)

10 
	~<°dio.h
>

11 
	~<°döt.h
>

12 
	~<°dlib.h
>

13 
	~<°rög.h
>

14 
	~<°d¨g.h
>

15 
	~<uni°d.h
>

16 
	~<°döt.h
>

17 
	~<öây≥s.h
>

19 
	~<˛i_s¸n.h
>

27 #ifde‡
__˝lu•lus


31 #i‚de‡
RTE_ASSERT


32 
	#RTE_ASSERT
 
RTE_VERIFY


	)

46 
ölöe
 

47 
__©åibuã__
((
f‹m©
(
¥ötf
, 1, 2)))

48 
˛i_¥ötf
(c⁄° *
fmt
, ...)

50 
va_li°
 
vaLi°
;

51 
n
;

53 
va_°¨t
(
vaLi°
, 
fmt
);

54 
n
 = 
vÂrötf
(
this_s¸n
->
fd_out
, 
fmt
, 
vaLi°
);

55 
va_íd
(
vaLi°
);

57 
fÊush
(
this_s¸n
->
fd_out
);

59  
n
;

62 #ifde‡
__˝lu•lus


	@lib/cli/cli_env.c

7 
	~<°dlib.h
>

9 
	~"˛i.h
"

10 
	~"˛i_ív.h
"

13 
	$ív_‰ì
(
˛i_ív
 *
ív
, 
ív_node
 *
n
)

15 i‡(!
ív
 || !
n
)

18 
	`TAILQ_REMOVE
(&
ív
->
hód
, 
n
, 
√xt
);

20 
	`‰ì
((*)(
uöçå_t
)
n
->
v¨
);

21 
	`‰ì
((*)(
uöçå_t
)
n
->
vÆ
);

22 
	`‰ì
(
n
);

23 
ív
->
cou¡
--;

26 
	}
}

28 
˛i_ív
 *

29 
	$˛i_ív_¸óã
()

31 
˛i_ív
 *
ív
;

33 
ív
 = (
˛i_ív
 *)
	`mÆloc
((cli_env));

34 i‡(!
ív
)

35  
NULL
;

36 
	`mem£t
(
ív
, '\0', (
˛i_ív
));

38 
	`TAILQ_INIT
(&
ív
->
hód
);

40  
ív
;

41 
	}
}

44 
	$˛i_ív_de°roy
(
˛i_ív
 *
ív
)

46 
ív_node
 *
n
;

48 i‡(!
ív
)

51 !
	`TAILQ_EMPTY
(&
ív
->
hód
)) {

52 
n
 = 
	`TAILQ_FIRST
(&
ív
->
hód
);

53 
	`ív_‰ì
(
ív
, 
n
);

55 
	`‰ì
(
ív
);

56 
	}
}

58 
ív_node
 *

59 
	$föd_ív
(
˛i_ív
 *
ív
, c⁄° *
v¨
)

61 
ív_node
 *
n
;

63 
	`TAILQ_FOREACH
(
n
, &
ív
->
hód
, 
√xt
) {

64 i‡(!
	`°rcmp
(
v¨
, 
n
->var))

65  
n
;

67  
NULL
;

68 
	}
}

70 
ív_node
 *

71 
	$__ív_£t
(
˛i_ív
 *
ív
, c⁄° *
v¨
, c⁄° *
vÆ
)

73 
ív_node
 *
n
;

75 i‡(!
ív
 || !
v¨
)

76  
NULL
;

78 
n
 = 
	`föd_ív
(
ív
, 
v¨
);

79 i‡(
n
) {

80 
	`‰ì
((*)(
uöçå_t
)
n
->
vÆ
);

81 
n
->
v¨
 = 
	`°rdup
(
vÆ
);

82  
n
;

85 
n
 = (
ív_node
 *)
	`mÆloc
((env_node));

86 i‡(!
n
)

87  
NULL
;

89 
n
->
v¨
 = 
	`°rdup
(var);

90 
n
->
vÆ
 = 
	`°rdup
(val);

92 
	`TAILQ_INSERT_TAIL
(&
ív
->
hód
, 
n
, 
√xt
);

93 
ív
->
cou¡
++;

95  
n
;

96 
	}
}

99 
	$˛i_ív_£t
(
˛i_ív
 *
ív
, c⁄° *
v¨
, c⁄° *
vÆ
)

101  (
	`__ív_£t
(
ív
, 
v¨
, 
vÆ
Ë=
NULL
)? -1 : 0;

102 
	}
}

105 
	$˛i_ív_°rög
(
˛i_ív
 *
ív
, c⁄° *
v¨
,

106 
˛i_sfunc_t
 
sfunc
, c⁄° *
vÆ
)

108 
ív_node
 *
n
;

110 
n
 = 
	`__ív_£t
(
ív
, 
v¨
, 
vÆ
);

111 i‡(!
n
)

113 
n
->
sfunc
 = sfunc;

115 
	}
}

118 
	$˛i_ív_gë
(
˛i_ív
 *
ív
, c⁄° *
v¨
)

120 
ív_node
 *
n
;

122 
n
 = 
	`föd_ív
(
ív
, 
v¨
);

123 i‡(!
n
)

124  
NULL
;

126  (
n
->
sfunc
)?Ç->
	`sfunc
“->
vÆ
) :Ç->val;

127 
	}
}

130 
	$˛i_ív_dñ
(
˛i_ív
 *
ív
, c⁄° *
v¨
)

132  
	`ív_‰ì
(
ív
, 
	`föd_ív
”nv, 
v¨
));

133 
	}
}

137 
	$˛i_ív_sub°ôuti⁄
(
˛i_ív
 *
ív
, *
löe
, 
sz
)

139 *
p
, *
s
, *
e
, *
t
, *
tmp
;

140 c⁄° *
v
;

142 i‡(!
ív
 || !
löe
 || 
sz
 <= 0)

146 
tmp
 = 
	`Æloˇ
(
sz
 + 1);

147 i‡(!
tmp
)

150 
	`mem£t
(
tmp
, '\0', 
sz
 + 1);

153 
e
 = 
löe
 + 
sz
;

155 
p
 = 
löe
, 
t
 = 
tmp
; (p[0] !'\0'Ë&& (∞< 
e
);Ö++) {

157 i‡(
p
[0] != '$')

158 
√xt
;

161 i‡((
p
[1] != '{') && (p[1] != '('))

162 
√xt
;

165 
s
 = 
	`°rchr
(
p
, (p[1] == '{') ? '}' : ')');

166 i‡(!
s
)

167 
√xt
;

170 *
s
 = '\0';

172 
v
 = 
	`˛i_ív_gë
(
ív
, &
p
[2]);

173 i‡(!
v
)

174 
v
 = "oops!";

176 
	`mem˝y
(
t
, 
v
, 
	`°æí
(v));

177 
t
 +
	`°æí
(
v
);

178 
p
 = 
s
;

180 
√xt
:

181 *
t
++ = *
p
;

183 *
t
 = '\0';

185 
	`¢¥ötf
(
löe
, 
sz
, "%s", 
tmp
);

186 
	}
}

189 
	$˛i_ív_gë_Æl
(
˛i_ív
 *
ív
, 
ív_node
 **
li°
, 
max_size
)

191 
ív_node
 *
node
;

192 
n
 = 0;

194 i‡(!
ív
)

197 
	`TAILQ_FOREACH
(
node
, &
ív
->
hód
, 
√xt
) {

198 
li°
[
n
++] = 
node
;

199 i‡(
n
 =
max_size
)

203  
n
;

204 
	}
}

207 
	$˛i_ív_show
(
˛i_ív
 *
ív
)

209 
ív_node
 *
node
;

211 
	`TAILQ_FOREACH
(
node
, &
ív
->
hód
, 
√xt
) {

212 i‡(
node
->
sfunc
)

213 
	`˛i_¥ötf
(" \"%s\" = \"%s\"\n",

214 
node
->
v¨
,Çode->
	`sfunc
“ode->
vÆ
));

216 
	`˛i_¥ötf
(" \"%s\" = \"%s\"\n",

217 
node
->
v¨
,Çode->
vÆ
);

219 
	}
}

	@lib/cli/cli_env.h

8 
	~<sys/queue.h
>

10 #i‚de‡
_CLI_ENV_H_


11 
	#_CLI_ENV_H_


	)

19 #ifde‡
__˝lu•lus


22 
˛i
;

24 * (*
	t˛i_sfunc_t
)(c⁄° *
	t°r
);

27 
	sív_node
 {

28 
TAILQ_ENTRY
(
ív_node
Ë
√xt
;

29 c⁄° *
v¨
;

30 c⁄° *
vÆ
;

31 
˛i_sfunc_t
 
sfunc
;

34 
	s˛i_ív
 {

35 
TAILQ_HEAD
(, 
ív_node
Ë
hód
;

36 
cou¡
;

45 
˛i_ív
 *
˛i_ív_¸óã
();

53 
˛i_ív_de°roy
(
˛i_ív
 *
ív
);

67 
˛i_ív_£t
(
˛i_ív
 *
ív
, c⁄° *
v¨
, c⁄° *
vÆ
);

83 
˛i_ív_°rög
(
˛i_ív
 *
ív
, c⁄° *
v¨
,

84 
˛i_sfunc_t
 
sfunc
, c⁄° *
vÆ
);

96 c⁄° *
˛i_ív_gë
(
˛i_ív
 *
ív
, c⁄° *
v¨
);

108 
˛i_ív_dñ
(
˛i_ív
 *
ív
, c⁄° *
v¨
);

122 
˛i_ív_sub°ôuti⁄
(
˛i_ív
 *
ív
, *
löe
, 
sz
);

132 
ölöe
 

133 
˛i_ív_cou¡
(
˛i_ív
 *
ív
)

135  
ív
->
cou¡
;

148 
˛i_ív_gë_Æl
(
˛i_ív
 *
ív
, 
ív_node
 **
li°
, 
max_size
);

156 
˛i_ív_show
(
˛i_ív
 *
ív
);

158 #ifde‡
__˝lu•lus


	@lib/cli/cli_file.c

7 
	~"˛i.h
"

8 
	~"˛i_öput.h
"

9 
	~"˛i_fûe.h
"

11 
˛i_node
 *

12 
	$˛i_fûe_›í
(c⁄° *
∑th
, c⁄° *
ty≥
)

14 
˛i_node
 *
node
;

15 
uöt32_t
 
Êags
 = 0;

17 i‡(!
∑th
)

18  
NULL
;

20 i‡(!
	`˛i_föd_node
(
∑th
, &
node
))

21  
NULL
;

23 i‡(!
	`is_fûe
(
node
))

24  
NULL
;

26 i‡(
ty≥
 && 
	`°æí
(type)) {

27 i‡(
	`°rchr
(
ty≥
, 'r'))

28 
	`fûe_£t
(
Êags
, 
CLI_FILE_RD
);

29 i‡(
	`°rchr
(
ty≥
, 'w'))

30 
	`fûe_£t
(
Êags
, 
CLI_FILE_WR
);

31 i‡(
	`°rchr
(
ty≥
, '+'))

32 
	`fûe_£t
(
Êags
, 
CLI_FILE_APPEND
);

34 
	`fûe_£t
(
Êags
, 
CLI_FILE_RD
);

36 
	`fûe_£t
(
Êags
, 
CLI_FILE_OPEN
);

38 i‡(
node
->
	`ffunc
“ode, 
NULL
, 0, 
Êags
))

39  
NULL
;

41  
node
;

42 
	}
}

45 
	$˛i_fûe_˛o£
(
˛i_node
 *
node
)

47 
uöt32_t
 
Êags
 = 
CLI_FILE_CLOSE
;

49 i‡(!
node
)

51  
node
->
	`ffunc
“ode, 
NULL
, 0, 
Êags
);

52 
	}
}

55 
	$˛i_fûe_ªad
(
˛i_node
 *
node
, *
buff
, 
Àn
)

57 
uöt32_t
 
Êags
 = 
CLI_FILE_RD
;

59 i‡(!
node
 || !
	`is_fûe
(node))

61  
node
->
	`ffunc
“ode, 
buff
, 
Àn
, 
Êags
);

62 
	}
}

65 
	$˛i_fûe_wrôe
(
˛i_node
 *
node
, *
buff
, 
Àn
)

67 
uöt32_t
 
Êags
 = 
CLI_FILE_WR
;

69 i‡(!
node
 || !
	`is_fûe
(node))

71 i‡(
	`is_d©a_rd⁄ly
(
node
->
fÊags
))

73  
node
->
	`ffunc
“ode, 
buff
, 
Àn
, 
Êags
);

74 
	}
}

77 
	$˛i_fûe_£ek
(
˛i_node
 *
node
, 
off£t
, 
uöt32_t
 
whí˚
)

79 i‡(!
node
 || !
	`is_fûe
(node))

82 
whí˚
) {

83 
CLI_SEEK_SET
:

84 
CLI_SEEK_CUR
:

85 
CLI_SEEK_END
:

90  
node
->
	`ffunc
“ode, 
NULL
, 
off£t
, 
whí˚
);

91 
	}
}

94 
	$˛i_ªadlöe
(
˛i_node
 *
node
, *
buff
, 
Àn
)

96 
i
, 
n
;

97 
c
;

99 i‡(!
node
 || !
buff
 || !
	`is_fûe
(node))

102 
i
 = 0, 
c
 = '\0'; i < 
Àn
 && c != '\n'; i++) {

103 
n
 = 
	`˛i_fûe_ªad
(
node
, &
c
, 1);

104 i‡(
n
 <= 0)

106 
buff
[
i
] = 
c
;

108 
buff
[
i
] = '\0';

109  
i
;

110 
	}
}

114 
	$˛i_fûe_h™dÀr
(
˛i_node
 *
node
, *
buff
, 
Àn
, 
uöt32_t
 
›t
)

116 *
p
;

118 i‡(!
node
 || !
	`is_fûe
(node))

121 i‡(
›t
 & (
CLI_SEEK_SET
 | 
CLI_SEEK_CUR
 | 
CLI_SEEK_END
)) {

122 
size_t
 
ßved
 = 
node
->
foff£t
;

124 i‡(
	`is_£ek_£t
(
›t
)) {

125 i‡(
Àn
 < 0)

127 
node
->
foff£t
 = 
Àn
;

128 } i‡(
	`is_£ek_cur
(
›t
)) {

129 i‡(
Àn
 < 0) {

130 
Àn
 = 
	`abs
(len);

131 i‡((
size_t
)
Àn
 > 
node
->
fûe_size
)

132 
node
->
foff£t
 = 0;

134 
node
->
foff£t
 -
Àn
;

136 
node
->
foff£t
 +
Àn
;

137 } i‡(
	`is_£ek_íd
(
›t
)) {

138 i‡(
Àn
 < 0) {

139 
Àn
 = 
	`abs
(len);

140 i‡((
size_t
)
Àn
 > 
node
->
fûe_size
)

141 
node
->
foff£t
 = 0;

143 
node
->
foff£t
 =Çode->
fûe_size
 - 
Àn
;

145 
node
->
foff£t
 =Çode->
fûe_size
 + 
Àn
;

148 i‡(
node
->
foff£t
 >Çode->
fûe_size
) {

149 i‡(!(
node
->
fÊags
 & 
CLI_FILE_APPEND
)) {

150 
node
->
foff£t
 = 
ßved
;

151 i‡(
node
->
fÊags
 & (
CLI_FREE_DATA
 |

152 
CLI_DATA_EXPAND
)) {

153 *
d©a
;

154 
d©a
 = 
	`ªÆloc
(
node
->
fûe_d©a
,

155 
node
->
foff£t
);

156 i‡(!
d©a
)

158 
node
->
fûe_d©a
 = 
d©a
;

159 
node
->
fûe_size
 =Çode->
foff£t
;

163 
node
->
foff£t
 = 
ßved
;

167 } i‡(
	`is_£ek_cur
(
›t
))

168 
node
->
foff£t
 +
Àn
;

169 i‡(
	`is_£ek_íd
(
›t
))

170 
node
->
foff£t
 +
Àn
;

171 i‡(
	`is_fûe_˛o£
(
›t
)) {

172 i‡(
node
->
fûe_d©a
 && (node->
fÊags
 & 
CLI_FREE_DATA
)) {

173 
	`‰ì
(
node
->
fûe_d©a
);

174 
node
->
fûe_d©a
 = 
NULL
;

175 
node
->
fûe_size
 = 0;

177 
node
->
foff£t
 = 0;

178 } i‡(
	`is_fûe_›í
(
›t
)) {

179 i‡(
	`is_fûe_≠≥nd
(
›t
)) {

180 
node
->
fÊags
 |
CLI_FILE_APPEND
;

181 
node
->
foff£t
 =Çode->
fûe_size
;

183 i‡(
	`is_fûe_wr
(
›t
))

184 
node
->
fÊags
 |
CLI_FILE_WR
;

185 } i‡(
	`is_fûe_rd
(
›t
)) {

186 i‡(
Àn
 <= 0)

189 
Àn
 = 
	`RTE_MIN
÷í, ()(
node
->
fûe_size
 -Çode->
foff£t
));

191 
p
 = 
node
->
fûe_d©a
 +Çode->
foff£t
;

193 
	`mem˝y
(
buff
, 
p
, 
Àn
);

195 
node
->
foff£t
 +
Àn
;

196 } i‡(
	`is_fûe_wr
(
›t
)) {

197 i‡(!
	`is_d©a_rd⁄ly
(
node
->
fÊags
))

199 i‡(
Àn
 <= 0)

201 i‡((
node
->
foff£t
 + 
Àn
Ë<Çode->
fûe_size
) {

202 
p
 = 
node
->
fûe_d©a
 +Çode->
foff£t
;

203 
	`mem˝y
(
p
, 
buff
, 
Àn
);

204 
node
->
foff£t
 +
Àn
;

206 
p
 = 
	`ªÆloc
(
node
->
fûe_d©a
, (node->
foff£t
 + 
Àn
));

207 
node
->
fûe_d©a
 = 
p
;

208 
node
->
fûe_size
 =Çode->
foff£t
 + 
Àn
;

209 
node
->
foff£t
 +
Àn
;

213  
Àn
;

214 
	}
}

216 
˛i_node
 *

217 
	$˛i_fûe_¸óã
(c⁄° *
∑th
, c⁄° *
ty≥
)

219 
˛i_node
 *
node
, *
∑ª¡
;

220 *
fûe
, *
my∑th
;

221 *
d©a
 = 
NULL
;

223 
node
 = 
	`˛i_fûe_›í
(
∑th
, 
ty≥
);

224 i‡(
node
)

225  
node
;

227 
my∑th
 = 
	`Æloˇ
(
	`°æí
(
∑th
) + 1);

229 
	`°r˝y
(
my∑th
, 
∑th
);

231 
fûe
 = 
	`ba£«me
(
my∑th
);

233 
d©a
 = 
	`mÆloc
(
CLI_FILE_SIZE
);

234 i‡(
d©a
) {

235 
∑ª¡
 = 
	`˛i_œ°_node_ö_∑th
(
∑th
);

236 i‡(
∑ª¡
) {

237 
node
 = 
	`˛i_add_fûe
(
fûe
, 
∑ª¡
, 
˛i_fûe_h™dÀr
, "");

238 i‡(
node
) {

239 
node
->
fûe_d©a
 = 
d©a
;

240 
node
->
fûe_size
 = 
CLI_FILE_SIZE
;

241 
node
->
fÊags
 = 
CLI_FREE_DATA
;

242 i‡(
	`°rchr
(
ty≥
, 'r') && !strchr(type, 'w'))

243 
node
->
fÊags
 |
CLI_DATA_RDONLY
;

244 
node
->
foff£t
 = 0;

245 
node
->
fÊags
 = 0;

246 
node
->
f°©e
 = 0;

247  
node
;

252 
	`‰ì
(
d©a
);

253  
NULL
;

254 
	}
}

257 
	$˛i_sy°em
(*
p
)

259 
buf
[256];

260 
size_t
 
n
, 
tŸ
 = 0;

261 
FILE
 *
f
;

263 
f
 = 
	`p›í
(
p
, "r");

264 i‡(!
f
)

267 (
n
 = 
	`‰ód
(
buf
, 1, (buf), 
f
)) > 0) {

268 
	`˛i_wrôe
(
buf
, 
n
);

269 
tŸ
 +
n
;

272 
	`p˛o£
(
f
);

274  
n
;

275 
	}
}

	@lib/cli/cli_file.h

7 #i‚de‡
_CLI_FILE_H_


8 
	#_CLI_FILE_H_


	)

16 
	~"˛i.h
"

18 #ifde‡
__˝lu•lus


22 
	#CLI_FILE_SIZE
 1024

	)

26 
CLI_FILE_RD
 = 0x0001,

27 
CLI_FILE_WR
 = 0x0002,

28 
CLI_FILE_APPEND
 = 0x0004,

29 
CLI_FILE_OPEN
 = 0x0008,

30 
CLI_FILE_CLOSE
 = 0x0010,

31 
CLI_FILE_CREATE
 = 0x0020,

34 
CLI_SEEK_SET
 = 0x0100,

35 
CLI_SEEK_CUR
 = 0x0200,

36 
CLI_SEEK_END
 = 0x0400,

39 
CLI_DATA_RDONLY
 = 0x1000,

40 
CLI_FREE_DATA
 = 0x2000,

41 
CLI_DATA_EXPAND
 = 0x4000

44 
	#fûe_£t
(
f
, 
v
Ëdÿ{ (fË|(v); } (0))

	)

45 
	#fûe_˛r
(
f
, 
v
Ëdÿ{ (fË&~(v); } (0))

	)

47 
ölöe
 

48 
is_fûe_£t
(
uöt32_t
 
›t
, uöt32_à
cmpÊags
)

50  
›t
 & 
cmpÊags
;

53 
ölöe
 

54 
is_fûe_rd
(
uöt32_t
 
›t
)

56  
is_fûe_£t
(
›t
, 
CLI_FILE_RD
);

59 
ölöe
 

60 
is_fûe_wr
(
uöt32_t
 
›t
)

62  
is_fûe_£t
(
›t
, 
CLI_FILE_WR
);

65 
ölöe
 

66 
is_fûe_≠≥nd
(
uöt32_t
 
›t
)

68  
is_fûe_£t
(
›t
, 
CLI_FILE_APPEND
);

71 
ölöe
 

72 
is_fûe_›í
(
uöt32_t
 
›t
)

74  
is_fûe_£t
(
›t
, 
CLI_FILE_OPEN
);

77 
ölöe
 

78 
is_fûe_˛o£
(
uöt32_t
 
›t
)

80  
is_fûe_£t
(
›t
, 
CLI_FILE_CLOSE
);

83 
ölöe
 

84 
is_fûe_¸óã
(
uöt32_t
 
›t
)

86  
is_fûe_£t
(
›t
, 
CLI_FILE_CREATE
);

89 
ölöe
 

90 
is_d©a_rd⁄ly
(
uöt32_t
 
Êags
)

92  
is_fûe_£t
(
Êags
, 
CLI_DATA_RDONLY
);

95 
ölöe
 

96 
is_fûe_eq
(
uöt32_t
 
›t
, uöt32_à
cmpÊags
)

98  ((
›t
 & 
cmpÊags
) == cmpflags);

101 
ölöe
 

102 
is_£ek_£t
(
uöt32_t
 
›t
)

104  
is_fûe_£t
(
›t
, 
CLI_SEEK_SET
);

107 
ölöe
 

108 
is_£ek_cur
(
uöt32_t
 
›t
)

110  
is_fûe_£t
(
›t
, 
CLI_SEEK_CUR
);

113 
ölöe
 

114 
is_£ek_íd
(
uöt32_t
 
›t
)

116  
is_fûe_£t
(
›t
, 
CLI_SEEK_END
);

129 
˛i_node
 *
˛i_fûe_›í
(c⁄° *
∑th
, c⁄° *
ty≥
);

139 
˛i_fûe_˛o£
(
˛i_node
 *
node
);

153 
˛i_fûe_ªad
(
˛i_node
 *
node
, * 
buff
, 
Àn
);

167 
˛i_fûe_wrôe
(
˛i_node
 *
node
, * 
buff
, 
Àn
);

181 
˛i_fûe_£ek
(
˛i_node
 *
node
, 
off£t
, 
uöt32_t
 
whí˚
);

195 
˛i_ªadlöe
(
˛i_node
 *
node
, *
buff
, 
Àn
);

207 
˛i_node
 *
˛i_fûe_¸óã
(c⁄° *
∑th
, c⁄° *
ty≥
);

223 
˛i_fûe_h™dÀr
(
˛i_node
 *
node
,

224 *
buff
, 
Àn
, 
uöt32_t
 
›t
);

240 
˛i_sy°em
(*
p
);

242 #ifde‡
__˝lu•lus


	@lib/cli/cli_gapbuf.c

8 
	~<πe_mem˝y.h
>

10 
	~"˛i.h
"

13 
uöt32_t


14 
	$gb_c›y_to_buf
(
g≠buf
 *
gb
, *
d°
, 
uöt32_t
 
size
)

16 
uöt32_t
 
˙t
, 
t˙t
 = 0;

18 
	`RTE_ASSERT
(
gb
 !
NULL
);

19 
	`RTE_ASSERT
(
d°
 !
NULL
);

22 
size
 = 
	`RTE_MIN
(size, 
	`gb_d©a_size
(
gb
));

24 i‡(
size
) {

26 
˙t
 = 
gb
->
g≠
 - gb->
buf
;

27 
	`πe_mem˝y
(
d°
, 
gb
->
buf
, 
˙t
);

28 
d°
 +
˙t
;

29 
t˙t
 +
˙t
;

32 
˙t
 = 
gb
->
ebuf
 - gb->
eg≠
;

33 
	`πe_mem˝y
(
d°
, 
gb
->
eg≠
, 
˙t
);

34 
d°
 +
˙t
;

35 
t˙t
 +
˙t
;

39 *
d°
 = '\0';

41  
t˙t
;

42 
	}
}

45 
	$gb_ª£t_buf
(
g≠buf
 *
gb
)

47 
size
;

49 
	`RTE_ASSERT
(
gb
 !
NULL
);

51 
size
 = 
	`gb_buf_size
(
gb
);

52 
	`mem£t
(
gb
->
buf
, ' ', 
size
);

54 
gb
->
poöt
 = gb->
buf
;

55 
gb
->
g≠
 = gb->
buf
;

56 
gb
->
eg≠
 = gb->
buf
 + 
size
;

57 
gb
->
ebuf
 = gb->
eg≠
;

60 
	}
}

64 
	$gb_öô_buf
(
g≠buf
 *
gb
, 
size
)

66 
	`RTE_ASSERT
(
gb
 !
NULL
);

68 
	`‰ì
(
gb
->
buf
);

70 
gb
->
buf
 = 
	`mÆloc
(
size
);

71 i‡(!
gb
->
buf
)

74 
gb
->
ebuf
 = gb->
buf
 + 
size
;

76  
	`gb_ª£t_buf
(
gb
);

77 
	}
}

80 
g≠buf
 *

81 
	$gb_¸óã
()

83 
g≠buf
 *
gb
;

85 
gb
 = 
	`mÆloc
((
g≠buf
));

86 i‡(!
gb
)

87  
NULL
;

89 
	`mem£t
(
gb
, '\0', (
g≠buf
));

91 
	`gb_öô_buf
(
gb
, 
GB_DEFAULT_GAP_SIZE
);

93  
gb
;

94 
	}
}

98 
	$gb_de°roy
(
g≠buf
 *
gb
)

100 i‡(
gb
) {

101 
	`‰ì
(
gb
->
buf
);

102 
	`‰ì
(
gb
);

104 
	}
}

108 
	$gb_dump
(
g≠buf
 *
gb
, c⁄° *
msg
)

110 #ifde‡
CLI_DEBUG_ENABLED


111 *
p
;

112 
uöt32_t
 
i
;

114 i‡(
msg
)

115 
	`Ârötf
(
°dîr
, "\n%s Gap: buf_size %u, gap_size %u\n",

116 
msg
, 
	`gb_buf_size
(
gb
), 
	`gb_g≠_size
(gb));

118 
	`Ârötf
(
°dîr
, "\nGap: buf_size %u, gap_size %u\n",

119 
	`gb_buf_size
(
gb
), 
	`gb_g≠_size
(gb));

121 
	`Ârötf
(
°dîr
, " bu‡ %p, ", 
gb
->
buf
);

122 
	`Ârötf
(
°dîr
, "g≠ %p, ", 
gb
->
g≠
);

123 
	`Ârötf
(
°dîr
, "poöà%p, ", 
gb
->
poöt
);

124 
	`Ârötf
(
°dîr
, "eg≠ %p, ", 
gb
->
eg≠
);

125 
	`Ârötf
(
°dîr
, "ebu‡ %p\n", 
gb
->
ebuf
);

127 
	`Ârötf
(
°dîr
, " ");

128 
i
 = 0, 
p
 = 
gb
->
buf
;Ö < gb->
ebuf
; i++,Ö++)

129 
	`Ârötf
(
°dîr
, "%c", "0123456789"[
i
 % 10]);

130 
	`Ârötf
(
°dîr
, "\n");

131 
	`Ârötf
(
°dîr
, "<");

132 
p
 = 
gb
->
buf
;Ö < gb->
ebuf
;Ö++)

133 
	`Ârötf
(
°dîr
, "%c", ((*
p
 >= ' ') && (*p <= '~')) ? *p : '.');

134 
	`Ârötf
(
°dîr
, ">\n ");

135 
p
 = 
gb
->
buf
;Ö <gb->
ebuf
;Ö++) {

136 i‡((
p
 =
gb
->
g≠
Ë&& (∞=gb->
eg≠
))

137 
	`Ârötf
(
°dîr
, "*");

138 i‡(
p
 =
gb
->
g≠
)

139 
	`Ârötf
(
°dîr
, "[");

140 i‡(
p
 =
gb
->
eg≠
)

141 
	`Ârötf
(
°dîr
, "]");

143 
	`Ârötf
(
°dîr
, " ");

145 
	`Ârötf
(
°dîr
, "\n ");

146 
p
 = 
gb
->
buf
;Ö <gb->
ebuf
;Ö++)

147 
	`Ârötf
(
°dîr
, "%c", (
p
 =
gb
->
poöt
) ? '^' : ' ');

148 
	`Ârötf
(
°dîr
, "\n");

149 
	`˛i_ªdi•œy_löe
();

151 ()
gb
;

152 ()
msg
;

154 
	}
}

	@lib/cli/cli_gapbuf.h

8 
	~<°dlib.h
>

9 
	~<°rög.h
>

11 
	~<πe_debug.h
>

13 #i‚de‡
_CLI_GAPBUF_H_


14 
	#_CLI_GAPBUF_H_


	)

22 #ifde‡
__˝lu•lus


26 
	#GB_DEFAULT_GAP_SIZE
 8

	)

28 
	sg≠buf
 {

29 *
buf
;

30 *
ebuf
;

31 *
poöt
;

32 *
g≠
;

33 *
eg≠
;

42 
g≠buf
 *
gb_¸óã
();

52 
gb_de°roy
(
g≠buf
 *
gb
);

64 
gb_öô_buf
(
g≠buf
 *
gb
, 
size
);

74 
gb_ª£t_buf
(
g≠buf
 *
gb
);

88 
uöt32_t
 
gb_c›y_to_buf
(
g≠buf
 *
gb
, *
d°
, uöt32_à
size
);

100 
gb_dump
(
g≠buf
 *
gb
, c⁄° * 
msg
);

112 
ölöe
 
uöt32_t


113 
gb_buf_size
(
g≠buf
 *
gb
)

115  
gb
->
ebuf
 - gb->
buf
;

126 
ölöe
 
uöt32_t


127 
gb_g≠_size
(
g≠buf
 *
gb
)

129  
gb
->
eg≠
 - gb->
g≠
;

140 
ölöe
 
uöt32_t


141 
gb_d©a_size
(
g≠buf
 *
gb
)

143  (
gb
->
ebuf
 - gb->
buf
Ë- (gb->
eg≠
 - gb->
g≠
);

154 
ölöe
 *

155 
gb_°¨t_of_buf
(
g≠buf
 *
gb
)

157  
gb
->
buf
;

168 
ölöe
 *

169 
gb_°¨t_of_g≠
(
g≠buf
 *
gb
)

171  
gb
->
g≠
;

182 
ölöe
 *

183 
gb_íd_of_g≠
(
g≠buf
 *
gb
)

185  
gb
->
eg≠
;

196 
ölöe
 *

197 
gb_íd_of_buf
(
g≠buf
 *
gb
)

199  
gb
->
ebuf
;

210 
ölöe
 *

211 
gb_poöt_©
(
g≠buf
 *
gb
)

213  
gb
->
poöt
;

224 
ölöe
 

225 
gb_poöt_©_°¨t
(
g≠buf
 *
gb
)

227  (
gb
->
poöt
 =gb->
buf
);

238 
ölöe
 

239 
gb_poöt_©_íd
(
g≠buf
 *
gb
)

241  (
gb
->
ebuf
 =gb->
poöt
);

252 
ölöe
 

253 
gb_poöt_©_g≠
(
g≠buf
 *
gb
)

255  (
gb
->
g≠
 =gb->
poöt
);

268 
ölöe
 

269 
gb_£t_poöt
(
g≠buf
 *
gb
, 
idx
)

271 i‡(
idx
 == -1) {

272 
gb
->
poöt
 = gb->
ebuf
;

275 
gb
->
poöt
 = gb->
buf
 + 
idx
;

276 i‡(
gb
->
poöt
 > gb->
g≠
)

277 
gb
->
poöt
 +gb->
eg≠
 - gb->
g≠
;

288 
ölöe
 

289 
gb_poöt_off£t
(
g≠buf
 *
gb
)

291 i‡(
gb
->
poöt
 > gb->
eg≠
)

292  (
gb
->
poöt
 - gb->
buf
Ë- (gb->
eg≠
 - gb->
g≠
);

294  
gb
->
poöt
 - gb->
buf
;

305 
ölöe
 

306 
gb_eof
(
g≠buf
 *
gb
)

308  (
gb
->
poöt
 =gb->
g≠
)?

309 (
gb
->
eg≠
 =gb->
ebuf
Ë: (gb->
poöt
 == gb->ebuf);

322 
ölöe
 

323 
gb_move_g≠_to_poöt
(
g≠buf
 *
gb
)

325 i‡(
gb
->
poöt
 =gb->
g≠
)

328 i‡(
gb
->
poöt
 =gb->
eg≠
)

329 
gb
->
poöt
 = gb->
g≠
;

331 
˙t
;

333 i‡(
gb
->
poöt
 < gb->
g≠
) {

334 
˙t
 = 
gb
->
g≠
 - gb->
poöt
;

335 
memmove
(
gb
->
eg≠
 - 
˙t
, gb->
poöt
, cnt);

336 
gb
->
eg≠
 -
˙t
;

337 
gb
->
g≠
 = gb->
poöt
;

338 } i‡(
gb
->
poöt
 > gb->
eg≠
) {

339 
˙t
 = 
gb
->
poöt
 - gb->
eg≠
;

340 
memmove
(
gb
->
g≠
, gb->
eg≠
, 
˙t
);

341 
gb
->
g≠
 +
˙t
;

342 
gb
->
eg≠
 = gb->
poöt
;

343 
gb
->
poöt
 = gb->
g≠
;

345 
˙t
 = 
gb
->
poöt
 - gb->
g≠
;

346 
memmove
(
gb
->
g≠
, gb->
eg≠
, 
˙t
);

347 
gb
->
eg≠
 +
˙t
;

348 
gb
->
g≠
 +
˙t
;

349 
gb
->
poöt
 = gb->
g≠
;

364 
ölöe
 

365 
gb_ex∑nd_buf
(
g≠buf
 *
gb
, 
uöt32_t
 
m‹e
)

367 i‡(((
gb
->
ebuf
 - gb->
buf
Ë+ 
m‹e
Ë> 
gb_buf_size
(gb)) {

368 *
ﬁd
 = 
gb
->
buf
;

370 
m‹e
 = (
gb
->
ebuf
 - gb->
buf
Ë+ m‹ê+ 
GB_DEFAULT_GAP_SIZE
;

372 
gb
->
buf
 = (*)
ªÆloc
(gb->buf, 
m‹e
);

373 i‡(
gb
->
buf
 =
NULL
)

374 
πe_∑nic
("ªÆloc(%dËö %†Áûed\n", 
m‹e
, 
__func__
);

376 
gb
->
poöt
 +(gb->
buf
 - 
ﬁd
);

377 
gb
->
ebuf
 +(gb->
buf
 - 
ﬁd
);

378 
gb
->
g≠
 +(gb->
buf
 - 
ﬁd
);

379 
gb
->
eg≠
 +(gb->
buf
 - 
ﬁd
);

393 
ölöe
 

394 
gb_ex∑nd_g≠
(
g≠buf
 *
gb
, 
uöt32_t
 
size
)

396 i‡(
size
 > 
gb_g≠_size
(
gb
)) {

397 
size
 +
GB_DEFAULT_GAP_SIZE
;

399 
gb_ex∑nd_buf
(
gb
, 
size
);

401 
memmove
(
gb
->
eg≠
 + 
size
, gb->eg≠, gb->
ebuf
 - gb->egap);

403 
gb
->
eg≠
 +
size
;

404 
gb
->
ebuf
 +
size
;

416 
ölöe
 

417 
gb_gë
(
g≠buf
 *
gb
)

419 i‡(
gb
->
poöt
 =gb->
g≠
)

420 
gb
->
poöt
 = gb->
eg≠
;

422  *
gb
->
poöt
;

433 
ölöe
 

434 
gb_gë_¥ev
(
g≠buf
 *
gb
)

436 i‡(
gb
->
poöt
 =gb->
eg≠
)

437 
gb
->
poöt
 = gb->
g≠
;

439 i‡(
gb
->
poöt
 =gb->
buf
) {

440 i‡(
gb
->
poöt
 =gb->
g≠
)

443  *
gb
->
poöt
;

446  *(
gb
->
poöt
 - 1);

457 
ölöe
 

458 
gb_gë_√xt
(
g≠buf
 *
gb
)

460 i‡(
gb
->
poöt
 =gb->
g≠
)

461 
gb
->
poöt
 = gb->
eg≠
;

463 i‡(
gb
->
poöt
 =gb->
ebuf
)

464  *
gb
->
poöt
;

466  *(
gb
->
poöt
 + 1);

479 
ölöe
 

480 
gb_put
(
g≠buf
 *
gb
, 
c
)

482 i‡(
gb
->
poöt
 =gb->
g≠
)

483 
gb
->
poöt
 = gb->
eg≠
;

485 i‡(
gb
->
poöt
 =gb->
ebuf
) {

486 
gb_ex∑nd_buf
(
gb
, 1);

487 
gb
->
ebuf
++;

490 *
gb
->
poöt
 = 
c
;

501 
ölöe
 

502 
gb_gëc
(
g≠buf
 *
gb
)

504 i‡(
gb
->
poöt
 =gb->
g≠
) {

505 
gb
->
poöt
 = gb->
eg≠
 + 1;

506  *
gb
->
eg≠
;

509  *(
gb
->
poöt
++);

522 
ölöe
 

523 
gb_gëc_¥ev
(
g≠buf
 *
gb
)

525 i‡(
gb
->
poöt
 =gb->
eg≠
)

526 
gb
->
poöt
 = gb->
g≠
;

528  *(--
gb
->
poöt
);

541 
ölöe
 

542 
gb_putc
(
g≠buf
 *
gb
, 
c
)

544 
gb_move_g≠_to_poöt
(
gb
);

546 i‡(
gb
->
poöt
 =gb->
ebuf
) {

547 
gb_ex∑nd_buf
(
gb
, 1);

548 
gb
->
ebuf
++;

550 *(
gb
->
g≠
++Ë
c
;

551 
gb
->
poöt
++;

564 
ölöe
 

565 
gb_ö£π
(
g≠buf
 *
gb
, 
c
)

567 i‡(
gb
->
poöt
 !gb->
g≠
)

568 
gb_move_g≠_to_poöt
(
gb
);

570 i‡(
gb
->
g≠
 =gb->
eg≠
)

571 
gb_ex∑nd_g≠
(
gb
, 1);

573 
gb_putc
(
gb
, 
c
);

586 
ölöe
 

587 
gb_dñ
(
g≠buf
 *
gb
, 
˙t
)

589 i‡(
gb
->
poöt
 !gb->
g≠
)

590 
gb_move_g≠_to_poöt
(
gb
);

592 
gb
->
eg≠
 +
˙t
;

607 
ölöe
 
uöt32_t


608 
gb_°r_ö£π
(
g≠buf
 *
gb
, *
°r
, 
uöt32_t
 
size
)

610 
Àn
;

612 i‡(
size
 == 0)

613 
size
 = 
°æí
(
°r
);

614 i‡(
size
 == 0)

617 
gb_move_g≠_to_poöt
(
gb
);

619 i‡(
size
 > 
gb_g≠_size
(
gb
))

620 
gb_ex∑nd_g≠
(
gb
, 
size
);

622 
Àn
 = 
size
;

624 
gb_putc
(
gb
, *
°r
++);

625 } --
size
);

627  
Àn
;

640 
ölöe
 
uöt32_t


641 
gb_À·_d©a_size
(
g≠buf
 *
gb
)

643  
gb
->
g≠
 - gb->
buf
;

654 
ölöe
 
uöt32_t


655 
gb_right_d©a_size
(
g≠buf
 *
gb
)

657 i‡(
gb_eof
(
gb
))

659  
gb
->
ebuf
 - gb->
eg≠
;

670 
ölöe
 

671 
gb_move_right
(
g≠buf
 *
gb
)

673 i‡(
gb
->
poöt
 =gb->
g≠
)

674 
gb
->
poöt
 = gb->
eg≠
;

675 
gb
->
poöt
 = ((gb->poöà+ 1Ë> gb->
ebuf
)? gb->ebuf : (gb->point + 1);

686 
ölöe
 

687 
gb_move_À·
(
g≠buf
 *
gb
)

689 i‡(
gb
->
poöt
 =gb->
eg≠
)

690 
gb
->
poöt
 = gb->
g≠
;

691 
gb
->
poöt
 = ((gb->poöà- 1Ë< gb->
buf
)? gb->buf : (gb->point - 1);

694 #ifde‡
__˝lu•lus


	@lib/cli/cli_help.c

7 
	~"˛i.h
"

8 
	~"˛i_öput.h
"

11 
	$˛i_hñp_add
(const

12 *
group
, 
˛i_m≠
 *
m≠
, c⁄° **
hñp_d©a
)

14 
hñp_node
 *
node
;

16 i‡(!
group
)

19 
node
 = 
	`mÆloc
((
hñp_node
));

20 i‡(!
node
)

23 
	`mem£t
(
node
, 0, (
hñp_node
));

25 
node
->
m≠
 = map;

26 
node
->
hñp_d©a
 = help_data;

27 
	`¢¥ötf
(
node
->
group
, (node->group), "%s", group);

29 
	`TAILQ_INSERT_TAIL
(&
this_˛i
->
hñp_nodes
, 
node
, 
√xt
);

32 
	}
}

35 
	$_show_hñp_löes
(c⁄° **
h
, 
Ælow_∑u£
)

37 
j
;

38 
key
;

40 
j
 = 0; 
h
[j] !
NULL
; j++) {

41 i‡(
	`°rcmp
(
h
[
j
], 
CLI_HELP_PAUSE
)) {

42 
	`˛i_¥ötf
("%s\n", 
h
[
j
]);

45 i‡(
Ælow_∑u£
) {

46 
key
 = 
	`˛i_∑u£
("\¿ Rëu∫ÅÿC⁄töuê‹ ESC:", 
NULL
);

47 i‡((
key
 =
vt100_esˇ≥
) ||

48 (
key
 == 'q') || (key == 'Q'))

54 
	}
}

57 
	$_˛i_hñp_tôÀ
(c⁄° *
msg
)

59 
	`s¸n_pos
(1,1);

60 
	`s¸n_˛s
();

62 i‡(
msg
)

63 
	`s¸n_˝rötf
(1, -1, "%s\n", 
msg
);

64 
	}
}

67 
	$˛i_hñp_show_Æl
(c⁄° *
msg
)

69 
hñp_node
 *
n
;

71 
	`_˛i_hñp_tôÀ
(
msg
);

73 
	`TAILQ_FOREACH
(
n
, &
this_˛i
->
hñp_nodes
, 
√xt
) {

74 i‡(
	`_show_hñp_löes
(
n
->
hñp_d©a
, 1))

76 
	`_˛i_hñp_tôÀ
(
msg
);

80 
	}
}

83 
	$˛i_hñp_f‹óch
((*
func
)(*
¨g
, c⁄° **
h
), *arg)

85 
hñp_node
 *
n
;

87 
	`TAILQ_FOREACH
(
n
, &
this_˛i
->
hñp_nodes
, 
√xt
) {

88 
	`func
(
¨g
, 
n
->
hñp_d©a
);

90 
	}
}

92 
hñp_node
 *

93 
	$˛i_hñp_föd_group
(c⁄° *
group
)

95 
hñp_node
 *
n
;

97 
	`TAILQ_FOREACH
(
n
, &
this_˛i
->
hñp_nodes
, 
√xt
) {

98 i‡(!
	`°rcmp
(
group
, 
n
->group))

99  
n
;

101  
NULL
;

102 
	}
}

105 
	$˛i_hñp_show_group
(c⁄° *
group
)

107 
hñp_node
 *
n
;

109 
n
 = 
	`˛i_hñp_föd_group
(
group
);

110 i‡(!
n
)

113  
	`_show_hñp_löes
(
n
->
hñp_d©a
, 0);

114 
	}
}

117 
	$˛i_cmd_îr‹
(c⁄° * 
msg
, c⁄° *
group
, 
¨gc
, **
¨gv
)

119 
n
;

121 i‡(
group
)

122 
	`˛i_hñp_show_group
(
group
);

123 i‡(
msg
)

124 
	`˛i_¥ötf
("%s:\n", 
msg
);

125 
	`˛i_¥ötf
(" InvalidÜine: <");

126 
n
 = 0;Ç < 
¨gc
;Ç++)

127 
	`˛i_¥ötf
("%†", 
¨gv
[
n
]);

128 
	`˛i_¥ötf
(">\n");

130 
	}
}

	@lib/cli/cli_help.h

7 #i‚de‡
_CLI_HELP_H_


8 
	#_CLI_HELP_H_


	)

10 
	~<°dio.h
>

11 
	~<°döt.h
>

12 
	~<°dlib.h
>

13 
	~<°rög.h
>

14 
	~<°d¨g.h
>

15 
	~<uni°d.h
>

16 
	~<öây≥s.h
>

17 
	~<sys/queue.h
>

25 #ifde‡
__˝lu•lus


29 
	#CLI_HELP_PAUSE
 "<<Pau£Ouçut>>"

	)

30 
	#CLI_HELP_NAME_LEN
 32

	)

32 
	shñp_node
 {

33 
TAILQ_ENTRY
(
hñp_node
Ë
√xt
;

34 
group
[
CLI_HELP_NAME_LEN
];

35 
˛i_m≠
 *
m≠
;

36 c⁄° **
hñp_d©a
;

49 
hñp_node
 *

50 
˛i_hñp_föd_group
(c⁄° *
group
);

60 
˛i_hñp_show_Æl
(c⁄° *
msg
);

70 
˛i_hñp_show_group
–c⁄° *
group
);

86 
˛i_hñp_add
(c⁄° *
group
, 
˛i_m≠
 *
m≠
, c⁄° **
hd
);

98 
ölöe
 

99 
is_hñp
(
¨gc
, **
¨gv
)

101 i‡(
¨gc
 == 0)

104  !
°rcmp
("-?", 
¨gv
[
¨gc
 - 1]) || !strcmp("?",árgv[argc - 1]);

117 
˛i_hñp_f‹óch
((*
func
)(*
¨g
, c⁄° **
h
), *arg);

119 
˛i_cmd_îr‹
(c⁄° * 
msg
, c⁄° *
group
, 
¨gc
, **
¨gv
);

121 #ifde‡
__˝lu•lus


	@lib/cli/cli_history.c

7 
	~"˛i.h
"

9 
˛i_hi°
 *

10 
	$˛i_hi°_Æloc
()

12 
˛i
 *˛ò
this_˛i
;

13 
˛i_hi°
 *
hi°
 = 
NULL
;

15 i‡(!
˛i
)

16  
hi°
;

18 i‡(!
	`CIRCLEQ_EMPTY
(&
˛i
->
‰ì_hi°
)) {

19 
hi°
 = (
˛i_hi°
 *)
	`CIRCLEQ_FIRST
(&
˛i
->
‰ì_hi°
);

20 
	`CIRCLEQ_REMOVE
(&
˛i
->
‰ì_hi°
, 
hi°
, 
√xt
);

22  
hi°
;

23 
	}
}

26 
	$˛i_hi°_‰ì
(
˛i_hi°
 *
hi°
)

28 
˛i
 *˛ò
this_˛i
;

30 i‡(!
˛i
 || !
hi°
)

33 
	`‰ì
(
hi°
->
löe
);

35 
hi°
->
löe
 = 
NULL
;

37 
	`CIRCLEQ_INSERT_TAIL
(&
˛i
->
‰ì_hi°
, 
hi°
, 
√xt
);

38 
	}
}

41 
	$˛i_hi°‹y_add
(*
löe
)

43 
˛i
 *˛ò
this_˛i
;

44 
˛i_hi°
 *
h
;

46 i‡(!
˛i
 || !˛i->
hi°_mem
 || !
löe
)

50 i‡(!
	`CIRCLEQ_EMPTY
(&
˛i
->
hd_hi°
)) {

51 
h
 = 
	`CIRCLEQ_LAST
(&
˛i
->
hd_hi°
);

52 i‡(
	`°rcmp
(
h
->
löe
,Üine) == 0)

56 
h
 = 
	`˛i_hi°_Æloc
();

57 i‡(!
h
) {

58 
h
 = 
	`CIRCLEQ_FIRST
(&
˛i
->
hd_hi°
);

60 
	`CIRCLEQ_REMOVE
(&
˛i
->
hd_hi°
, 
h
, 
√xt
);

63 
	`‰ì
(
h
->
löe
);

64 
h
->
löe
 = 
	`°rdup
(line);

65 
	`CIRCLEQ_INSERT_TAIL
(&
˛i
->
hd_hi°
, 
h
, 
√xt
);

66 
	}
}

69 
	$˛i_hi°‹y_dñ
()

71 
˛i
 *˛ò
this_˛i
;

72 
˛i_hi°
 *
h
;

74 i‡(!
˛i
 || !˛i->
hi°_mem
)

77 i‡(!
	`CIRCLEQ_EMPTY
(&
˛i
->
hd_hi°
)) {

78 
h
 = 
	`CIRCLEQ_LAST
(&
˛i
->
hd_hi°
);

79 
	`CIRCLEQ_REMOVE
(&
˛i
->
hd_hi°
, 
h
, 
√xt
);

81 
	}
}

84 
	$˛i_hi°‹y_löe
(
löío
)

86 
˛i
 *˛ò
this_˛i
;

87 
˛i_hi°
 *
h
;

88 
i
 = 0;

90 i‡(!
˛i
 || !˛i->
hi°_mem
)

91  
NULL
;

93 i‡(!
	`CIRCLEQ_EMPTY
(&
˛i
->
hd_hi°
)) {

94 
	`CIRCLEQ_FOREACH
(
h
, &
˛i
->
hd_hi°
, 
√xt
) {

95 i‡(
i
++ =
löío
)

96  
h
->
löe
;

99  
NULL
;

100 
	}
}

103 
	$˛i_hi°‹y_¥ev
()

105 
˛i
 *˛ò
this_˛i
;

107 i‡(!
˛i
 || !˛i->
hi°_mem
)

108  
NULL
;

110 i‡(!
	`CIRCLEQ_EMPTY
(&
˛i
->
hd_hi°
)) {

111 
˛i_hi°
 *
hi°
;

113 i‡(!
˛i
->
cuº_hi°
) {

114 
˛i
->
cuº_hi°
 = 
	`CIRCLEQ_LAST
(&˛i->
hd_hi°
);

115  
˛i
->
cuº_hi°
->
löe
;

118 i‡(
˛i
->
cuº_hi°
 =
	`CIRCLEQ_FIRST
(&˛i->
hd_hi°
))

119  
˛i
->
cuº_hi°
->
löe
;

121 
hi°
 = 
	`CIRCLEQ_LOOP_PREV
(&
˛i
->
hd_hi°
, cli->
cuº_hi°
, 
√xt
);

122 
˛i
->
cuº_hi°
 = 
hi°
;

124  
hi°
->
löe
;

126  
NULL
;

127 
	}
}

130 
	$˛i_hi°‹y_√xt
()

132 
˛i
 *˛ò
this_˛i
;

134 i‡(!
˛i
 || !˛i->
hi°_mem
)

135  
NULL
;

137 i‡(!
	`CIRCLEQ_EMPTY
(&
˛i
->
hd_hi°
)) {

138 
˛i_hi°
 *
hi°
;

140 i‡(!
˛i
->
cuº_hi°
)

141  
NULL
;

143 i‡(
˛i
->
cuº_hi°
 =
	`CIRCLEQ_LAST
(&˛i->
hd_hi°
))

144  (*)(
uöçå_t
)"";

146 
hi°
 = 
	`CIRCLEQ_LOOP_NEXT
(&
˛i
->
hd_hi°
, cli->
cuº_hi°
, 
√xt
);

147 
˛i
->
cuº_hi°
 = 
hi°
;

149  
hi°
->
löe
;

151  
NULL
;

152 
	}
}

155 
	$˛i_hi°‹y_˛ór
()

157 
˛i
 *˛ò
this_˛i
;

158 
˛i_hi°
 *
h
;

160 i‡(!
˛i
 || !˛i->
hi°_mem
)

163 !
	`CIRCLEQ_EMPTY
(&
˛i
->
hd_hi°
)) {

164 
h
 = 
	`CIRCLEQ_FIRST
(&
˛i
->
hd_hi°
);

165 
	`CIRCLEQ_REMOVE
(&
˛i
->
hd_hi°
, 
h
, 
√xt
);

166 
	`˛i_hi°_‰ì
(
h
);

168 
	}
}

171 
	$˛i_hi°‹y_dñëe
()

173 
˛i
 *˛ò
this_˛i
;

175 i‡(
˛i
) {

176 
	`˛i_hi°‹y_˛ór
();

178 
	`CIRCLEQ_INIT
(&
˛i
->
hd_hi°
);

180 
˛i
->
hi°_mem
 = 
NULL
;

181 
˛i
->
nb_hi°
 = 0;

183 
	}
}

186 
	$˛i_£t_hi°‹y
(
uöt32_t
 
nb_hi°
)

188 
˛i
 *˛ò
this_˛i
;

189 
size_t
 
size
;

191 i‡(!
˛i
)

194 i‡(
nb_hi°
 == 0) {

195 
	`˛i_hi°‹y_dñëe
();

199 i‡(
˛i
->
hi°_mem
 && (
nb_hi°
 == cli->nb_hist))

202 i‡(
˛i
->
hi°_mem
)

203 
	`˛i_hi°‹y_dñëe
();

205 
˛i
->
nb_hi°
 =Çb_hist;

207 
size
 = 
nb_hi°
 * (
˛i_hi°
);

209 
˛i
->
hi°_mem
 = 
	`mÆloc
(
size
);

210 i‡(
˛i
->
hi°_mem
) {

211 
uöt32_t
 
i
;

212 
˛i_hi°
 *
hi°
 = 
˛i
->
hi°_mem
;

214 
	`mem£t
(
˛i
->
hi°_mem
, '\0', 
size
);

217 
i
 = 0; i < 
nb_hi°
; i++, 
hi°
++)

218 
	`CIRCLEQ_INSERT_TAIL
(&
˛i
->
‰ì_hi°
, 
hi°
, 
√xt
);

224 
	}
}

227 
	$˛i_hi°‹y_ª£t
()

229 
this_˛i
->
cuº_hi°
 = 
	`CIRCLEQ_FIRST
(&this_˛i->
hd_hi°
);

230 
	}
}

233 
	$˛i_hi°‹y_dump
()

235 
˛i
 *˛ò
this_˛i
;

236 
˛i_hi°
 *
h
;

237 
i
 = 0;

239 i‡(!
˛i
 || !˛i->
hi°_mem
 || 
	`CIRCLEQ_EMPTY
(&˛i->
hd_hi°
))

242 
	`CIRCLEQ_FOREACH
(
h
, &
˛i
->
hd_hi°
, 
√xt
) {

243 
	`¥ötf
("%4d: %s\n", 
i
++, 
h
->
löe
);

245 
	}
}

	@lib/cli/cli_history.h

7 #i‚de‡
_CLI_HISTORY_H_


8 
	#_CLI_HISTORY_H_


	)

16 
	~"˛i.h
"

17 
	~<sys/queue.h
>

19 #ifde‡
__˝lu•lus


24 
CLI_DEFAULT_HISTORY
 = -1,

25 
CLI_NO_HISTORY
 = 0,

28 
	s˛i_hi°
 {

29 
CIRCLEQ_ENTRY
(
˛i_hi°
Ë
√xt
;

30 *
löe
;

33 
˛i
;

43 
˛i_hi°
 *
˛i_hi°_Æloc
();

55 
˛i_hi°_‰ì
(
˛i_hi°
 *
hi°
);

67 
˛i_hi°‹y_add
(*
löe
);

77 
˛i_hi°‹y_dñ
();

89 *
˛i_hi°‹y_löe
(
löío
);

99 
˛i_hi°‹y_˛ór
();

109 
˛i_hi°‹y_dñëe
();

121 
˛i_£t_hi°‹y
(
uöt32_t
 
nb_hi°
);

131 *
˛i_hi°‹y_¥ev
();

141 * 
˛i_hi°‹y_√xt
();

148 
˛i_hi°‹y_ª£t
();

158 
˛i_hi°‹y_dump
();

160 #ifde‡
__˝lu•lus


	@lib/cli/cli_input.c

7 
	~<°dio.h
>

8 
	~<pﬁl.h
>

9 
	~<°rög.h
>

11 
	~<πe_vîsi⁄.h
>

12 
	~<πe_timî.h
>

13 
	~<πe_log.h
>

14 
	~<πe_°rög_‚s.h
>

16 
	~"˛i.h
"

17 
	~"˛i_öput.h
"

18 
	~"˛i_°rög_‚s.h
"

20 (*
lua_dofûe
)(*, const *);

23 
	$˛i_yõld_io
()

25 i‡(!
this_˛i
)

27  
this_˛i
->
Êags
 & 
CLI_YIELD_IO
;

28 
	}
}

32 
	$˛i_wrôe
(c⁄° *
msg
, 
Àn
)

34  
	`s¸n_wrôe
(
msg
, 
Àn
);

35 
	}
}

38 
	$˛i_ªad
(*
buf
, 
Àn
)

40  
	`s¸n_ªad
(
buf
, 
Àn
);

41 
	}
}

44 
	$h™dÀ_öput_di•œy
(
c
)

47 i‡((
c
 >= ' ') && (c <= '~')) {

49 
	`˛i_wrôe
(&
c
, 1);

52 
	`gb_ö£π
(
this_˛i
->
gb
, 
c
);

53 i‡(!
	`gb_poöt_©_íd
(
this_˛i
->
gb
))

54 
	`˛i_£t_Êag
(
DISPLAY_LINE
);

55 i‡(!
	`gb_poöt_©_°¨t
(
this_˛i
->
gb
))

56 
	`˛i_£t_Êag
(
DISPLAY_LINE
);

58 
	`˛i_di•œy_löe
();

59 
	}
}

63 
	$˛i_öput
(*
°r
, 
n
)

65 
	`RTE_ASSERT
(
this_˛i
->
gb
 !
NULL
);

66 
	`RTE_ASSERT
(
°r
 !
NULL
);

68 
n
--) {

69 
c
 = *
°r
++;

71 
ªt
 = 
	`vt100_∑r£_öput
(
this_˛i
->
vt
, 
c
);

73 i‡(
ªt
 > 0) {

74 
	`vt100_do_cmd
(
ªt
);

75 
	`h™dÀ_öput_di•œy
(0);

76 } i‡(
ªt
 =
VT100_DONE
)

77 
	`h™dÀ_öput_di•œy
(
c
);

79 
	}
}

83 
	$˛i_pﬁl
(*
c
)

85 
pﬁlfd
 
fds
;

87 
fds
.
fd
 = 
	`fûío
(
this_s¸n
->
fd_ö
);

88 
fds
.
evíts
 = 
POLLIN
;

89 
fds
.
ªvíts
 = 0;

91 i‡(
	`˛i_u£_timîs
())

92 
	`πe_timî_m™age
();

94 i‡(
	`pﬁl
(&
fds
, 1, 0)) {

95 i‡((
fds
.
ªvíts
 & (
POLLERR
 | 
POLLNVAL
)) == 0) {

96 i‡((
fds
.
ªvíts
 & 
POLLHUP
))

97 
this_˛i
->
quô_Êag
 = 1;

98 i‡((
fds
.
ªvíts
 & 
POLLIN
)) {

99 
n
 = 
	`ªad
(
fds
.
fd
, 
c
, 1);

100 i‡(
n
 > 0)

104 
	`˛i_quô
();

107 
	}
}

111 
	$˛i_∑u£
(c⁄° *
msg
, c⁄° *
keys
)

113 
¥om±
[128], 
c
;

115 
¥om±
[0] = '\0';

117 i‡(
msg
) {

118 
	`°r˝y
(
¥om±
, 
msg
);

119 
	`°rˇt
(
¥om±
, ": ");

120 
	`˛i_¥ötf
("%s", 
¥om±
);

123 i‡(!
keys
)

124 
keys
 = " qQ\n\r" 
ESC
;

127 i‡(
	`˛i_pﬁl
(&
c
))

128 i‡(
	`°rchr
(
keys
, 
c
)) {

130 
	`˛i_¥ötf
("\r%*s\r", ()
	`°æí
(
¥om±
), " ");

131  
c
;

133 } 
this_˛i
->
quô_Êag
 == 0);

136 
	}
}

	@lib/cli/cli_input.h

7 #i‚de‡
_CLI_INPUT_H_


8 
	#_CLI_INPUT_H_


	)

15 #ifde‡
__˝lu•lus


27 
˛i_pﬁl
(*
c
);

41 
˛i_wrôe
(c⁄° *
msg
, 
Àn
);

53 
˛i_ªad
(*
buf
, 
Àn
);

58 
ölöe
 

59 
˛i_gë_curs‹
(*
row
, *
cﬁ
)

61 
buf
[32], *
p
, 
ch
;

62 
r
, 
c
, 
l
;

64 
agaö
:

65 
s¸n_˝os
();

67 
mem£t
(
buf
, 0, (buf));

68 
p
 = 
buf
;

69 
l
 = (
buf
) - 1;

72 
˛i_ªad
(&
ch
, 1);

73 i‡(
ch
 == 'R')

75 i‡(
ch
 == '\0')

77 *
p
++ = 
ch
;

78 } 
l
--);

80 
p
 = 
ödex
(
buf
, ';');

81 i‡(!
p
)

82 
agaö
;

84 
r
 = 
©oi
(&
buf
[2]);

85 
c
 = 
©oi
(++
p
);

86 i‡(!
r
 || !
c
)

87 
agaö
;

89 *
row
 = 
r
;

90 *
cﬁ
 = 
c
;

101 
ölöe
 

102 
˛i_curs‹_À·
()

104 
˛i_wrôe
(
vt100_À·_¨r
, -1);

115 
ölöe
 

116 
˛i_curs‹_right
()

118 
˛i_wrôe
(
vt100_right_¨r
, -1);

129 
ölöe
 

130 
˛i_ßve_curs‹
()

132 
˛i_wrôe
(
vt100_ßve_curs‹
, -1);

143 
ölöe
 

144 
˛i_ª°‹e_curs‹
()

146 
˛i_wrôe
(
vt100_ª°‹e_curs‹
, -1);

157 
ölöe
 

158 
˛i_di•œy_À·
()

160 i‡(
gb_À·_d©a_size
(
this_˛i
->
gb
))

161 
˛i_wrôe
(
gb_°¨t_of_buf
(
this_˛i
->
gb
),

162 
gb_À·_d©a_size
(
this_˛i
->
gb
));

173 
ölöe
 

174 
˛i_di•œy_right
()

176 i‡(
gb_right_d©a_size
(
this_˛i
->
gb
))

177 
˛i_wrôe
(
gb_íd_of_g≠
(
this_˛i
->
gb
),

178 
gb_right_d©a_size
(
this_˛i
->
gb
));

189 
ölöe
 

190 
˛i_˛ór_s¸ìn
()

192 
˛i_wrôe
(
vt100_˛ór_s¸ìn
, -1);

203 
ölöe
 

204 
˛i_˛ór_to_eﬁ
()

206 
˛i_wrôe
(
vt100_˛ór_right
, -1);

219 
ölöe
 

220 
˛i_˛ór_löe
(
löío
)

222 i‡(
löío
 > 0)

223 
˛i_¥ötf
(
vt100_pos_curs‹
, 
löío
, 0);

225 
˛i_wrôe
("\r", 1);

227 
˛i_wrôe
(
vt100_˛ór_löe
, -1);

240 
ölöe
 

241 
˛i_move_curs‹_up
(
löío
)

243 
löío
--)

244 
˛i_¥ötf
(
vt100_up_¨r
);

247 
ölöe
 

248 
˛i_di•œy_¥om±
(
t
)

250 
˛i_wrôe
("\r", 1);

251 
this_˛i
->
∂í
 =Åhis_˛i->
¥om±
(
t
);

252 
˛i_˛ór_to_eﬁ
();

256 
ölöe
 

257 
˛i_di•œy_löe
()

259 
g≠buf
 *
gb
 = 
this_˛i
->gb;

260 
buf
[
gb_d©a_size
(
gb
) + 16];

261 
poöt
 = 
gb_poöt_off£t
(
gb
);

262 
Àn
 = 
gb_c›y_to_buf
(
gb
, 
buf
, 
gb_d©a_size
(gb));

263 
wödow
 = (
this_s¸n
->
ncﬁs
 - 
this_˛i
->
∂í
) - 1;

264 
w°¨t
, 
wíd
;

266 i‡(
˛i_t°_Êag
(
DELETE_CHAR
)) {

267 
˛i_˛r_Êag
(
DELETE_CHAR
);

268 
˛i_wrôe
(" \b", 2);

269 
˛i_£t_Êag
(
DISPLAY_LINE
 | 
CLEAR_TO_EOL
);

271 i‡(
˛i_t°_Êag
(
CLEAR_LINE
)) {

272 
˛i_˛r_Êag
(
CLEAR_LINE
);

273 
s¸n_bﬁ
();

274 
˛i_˛ór_to_eﬁ
();

275 
˛i_£t_Êag
(
DISPLAY_LINE
 | 
DISPLAY_PROMPT
);

277 i‡(
˛i_t°_Êag
(
CLEAR_TO_EOL
)) {

278 
˛i_˛r_Êag
(
CLEAR_TO_EOL
);

279 
˛i_˛ór_to_eﬁ
();

281 i‡(
˛i_t°_Êag
(
DISPLAY_PROMPT
)) {

282 
˛i_˛r_Êag
(
DISPLAY_PROMPT
 | 
PROMPT_CONTINUE
);

283 
˛i_di•œy_¥om±
(0);

286 i‡(
poöt
 < 
wödow
) {

287 
w°¨t
 = 0;

288 i‡(
Àn
 < 
wödow
)

289 
wíd
 = 
poöt
 + (
Àn
 -Öoint);

291 
wíd
 = 
poöt
 + (
wödow
 -Öoint);

293 
w°¨t
 = 
poöt
 - 
wödow
;

294 
wíd
 = 
w°¨t
 + 
wödow
;

297 
s¸n_bﬁ
();

298 
s¸n_˙right
(
this_˛i
->
∂í
);

300 
˛i_wrôe
(&
buf
[
w°¨t
], 
wíd
 - wstart);

302 
˛i_˛ór_to_eﬁ
();

304 
s¸n_bﬁ
();

305 
s¸n_˙right
(
this_˛i
->
∂í
 + 
poöt
);

316 
ölöe
 

317 
˛i_ªdi•œy_löe
()

319 
uöt32_t
 
i
;

321 
this_˛i
->
Êags
 |
DISPLAY_PROMPT
;

323 
˛i_di•œy_löe
();

325 
gb_move_g≠_to_poöt
(
this_˛i
->
gb
);

327 
i
 = 0;

328 
i
 < (
gb_d©a_size
(
this_˛i
->
gb
Ë- 
gb_poöt_off£t
(this_cli->gb));

329 
i
++)

330 
˛i_curs‹_À·
();

345 
˛i_öput
(*
°r
, 
n
);

355 
˛i_¥om±_t
 
˛i_£t_¥om±
(˛i_¥om±_à
¥om±
);

369 
˛i_£t_io
(
FILE
 *
ö
, FILE *
out
);

379 
˛i_°dö_£tup
();

389 
˛i_°dö_ª°‹e
();

401 
˛i_∑u£
(c⁄° *
msg
, c⁄° *
keys
);

411 
˛i_yõld_io
();

413 #ifde‡
__˝lu•lus


	@lib/cli/cli_map.c

7 
	~<πe_°rög_‚s.h
>

9 
	~"˛i.h
"

10 
	~"˛i_°rög_‚s.h
"

13 
	$˛i_m≠_li°_£¨ch
(c⁄° *
fmt
, *
ôem
, 
ödex
)

15 *
buf
;

16 
size
;

17 *
›ts
[
CLI_MAX_ARGVS
 + 1];

19 
size
 = 
	`°æí
(
fmt
) + 1;

20 
buf
 = 
	`Æloˇ
(
size
);

21 i‡(!
buf
)

24 
	`mem£t
(
buf
, '\0', 
size
);

25 
	`mem£t
(
›ts
, '\0', (opts));

27 
	`¢¥ötf
(
buf
, 
size
, "%s", 
fmt
);

28 
	`πe_°πok
(
buf
, " ", 
›ts
, 
CLI_MAX_ARGVS
);

31  
	`πe_°r›t
(&
›ts
[
ödex
][2], 
ôem
, "|");

32 
	}
}

35 
	$is_m≠_vÆid
(c⁄° *
fmt
, *
¨g
)

37 
ªt
 = 0;

39 i‡(
	`°rchr
("%dDhH¢46mkPC|l", 
fmt
[1]Ë=
NULL
)

40  
ªt
;

44 
ªt
 = 0;

45 
fmt
[1]) {

47 
ªt
 = 1;

50 i‡(
	`isdigô
(*
¨g
)Ë
ªt
 = 1;

53 i‡(
	`isdigô
(*
¨g
)Ë
ªt
 = 1;

56 i‡(
	`isxdigô
(*
¨g
)Ë
ªt
 = 1;

59 i‡(
	`isxdigô
(*
¨g
)Ë
ªt
 = 1;

62 i‡(
	`i•röt
(*
¨g
)Ë
ªt
 = 1;

66 i‡(
	`isdigô
(*
¨g
)Ë
ªt
 = 1;

70 i‡(
	`isdigô
(*
¨g
)Ë
ªt
 = 1;

74 i‡(
	`isdigô
(*
¨g
)Ë
ªt
 = 1;

78 i‡(
	`isxdigô
(*
¨g
)Ë
ªt
 = 1;

84 i‡(
	`isdigô
(*
¨g
Ë|| (*¨g ='a')Ë
ªt
 = 1;

87 i‡(
	`isdigô
(*
¨g
Ë|| (*¨g ='a')Ë
ªt
 = 1;

90  (
	`πe_°r›t
(&
fmt
[1], 
¨g
, "|") == -1) ? 0 : 1;

92 
ªt
 = 1;

97 
¨g
++;

98 } *
¨g
 && (
ªt
 == 0));

100  
ªt
;

101 
	}
}

103 
˛i_m≠
 *

104 
	$˛i_m≠pög
(
˛i_m≠
 *
m≠s
, 
¨gc
, **
¨gv
)

106 
nb_¨gs
, 
i
, 
j
, 
ok
;

107 c⁄° *
m
;

108 
löe
[
CLI_MAX_PATH_LENGTH
 + 1], *
m≠
[
CLI_MAX_ARGVS
], *
p
;

110 
	`mem£t
(
löe
, '\0', (line));

111 
	`mem£t
(
m≠
, '\0', (map));

113 
p
 = 
löe
;

114 
i
 = 0; (
m
 = 
m≠s
[i].
fmt
Ë!
NULL
; i++) {

115 
	`°r˝y
(
p
, 
m
);

117 
nb_¨gs
 = 
	`πe_°πok
(
p
, " ", 
m≠
, 
CLI_MAX_ARGVS
);

120 i‡(!
	`°rcmp
("-?", 
¨gv
[
¨gc
 - 1]) ||

121 !
	`°rcmp
("?", 
¨gv
[
¨gc
 - 1])) {

122 
	`˛i_m≠s_show
(
m≠s
, 
¨gc
, 
¨gv
);

123  
NULL
;

126 i‡(
nb_¨gs
 !
¨gc
)

130 
j
 = 0, 
ok
 = 1; ok && (j < 
¨gc
); j++) {

131 i‡(
m≠
[
j
][0] == '%') {

133 i‡(!
	`is_m≠_vÆid
(
m≠
[
j
], 
¨gv
[j]))

134 
ok
 = 0;

136 } i‡(!
	`πe_°rm©ch
(
m≠
[
j
], 
¨gv
[j]))

137 
ok
 = 0;

140 i‡(
ok
)

141  &
m≠s
[
i
];

144  
NULL
;

145 
	}
}

148 
	$decode_m≠
(c⁄° *
fmt
)

150 *
¨gv
[
CLI_MAX_ARGVS
 + 1];

151 
löe
[
CLI_MAX_PATH_LENGTH
 + 1];

152 
n
, 
i
;

154 
	`mem£t
(
¨gv
, '\0', (argv));

156 
	`°r˝y
(
löe
, 
fmt
);

157 i‡(
fmt
[0] != '%') {

158 
	`˛i_¥ötf
("%†", 
fmt
);

162 
fmt
[1]) {

164 
	`˛i_¥ötf
("%% ");

167 
	`˛i_¥ötf
("<32bitÇumber> ");

170 
	`˛i_¥ötf
("<64bitÇumber> ");

173 
	`˛i_¥ötf
("<32bit hex> ");

176 
	`˛i_¥ötf
("<64bit hex> ");

179 
	`˛i_¥ötf
("<string> ");

182 
	`˛i_¥ötf
("<IPv4 Address> ");

185 
	`˛i_¥ötf
("<IPv6 Address> ");

188 
	`˛i_¥ötf
("<MACáddress> ");

191 
	`˛i_¥ötf
("<kvargs> ");

194 
	`˛i_¥ötf
("<portlist> ");

197 
	`˛i_¥ötf
("<corelist> ");

200 
	`˛i_¥ötf
("[");

201 
n
 = 
	`πe_°πok
(&
löe
[2], "|", 
¨gv
, 
CLI_MAX_ARGVS
);

202 
i
 = 0; i < 
n
; i++)

203 
	`˛i_¥ötf
("%s%s", 
¨gv
[
i
], (ò< (
n
 - 1)) ? "|" : "");

204 
	`˛i_¥ötf
("] ");

207 
	`˛i_¥ötf
("<list> ");

210 
	`˛i_¥ötf
("<unknown> ");

213 
	}
}

216 
	$˛i_m≠_show
(
˛i_m≠
 *
m
)

218 
i
, 
nb_¨gs
;

219 
löe
[
CLI_MAX_PATH_LENGTH
 + 1], *
m≠
[
CLI_MAX_ARGVS
 + 1], *
p
;

221 
	`mem£t
(
löe
, '\0', (line));

222 
	`mem£t
(
m≠
, '\0', (map));

224 
p
 = 
löe
;

226 
	`°r˝y
(
p
, 
m
->
fmt
);

228 
nb_¨gs
 = 
	`πe_°πok
(
p
, " ", 
m≠
, 
CLI_MAX_ARGVS
);

230 
	`˛i_¥ötf
(" %†", 
m≠
[0]);

231 
i
 = 1; i < 
nb_¨gs
; i++)

232 
	`decode_m≠
(
m≠
[
i
]);

233 
	`˛i_¥ötf
("\n");

234 
	}
}

237 
	$˛i_m≠s_show
(
˛i_m≠
 *
m≠s
, 
¨gc
, **
¨gv
)

239 
˛i_m≠
 *
m
;

240 
löe
[
CLI_MAX_PATH_LENGTH
 + 1], *
m≠
[
CLI_MAX_ARGVS
 + 1];

241 
nb_¨gs
;

243 i‡(!
¨gc
)

246 
	`˛i_¥ötf
("\nUsage:\n");

247 
m
 = 
m≠s
; m->
fmt
 !
NULL
; m++) {

248 
löe
[0] = '\0';

249 
m≠
[0] = 
NULL
;

251 
	`°r˝y
(
löe
, 
m
->
fmt
);

253 
nb_¨gs
 = 
	`πe_°πok
(
löe
, " ", 
m≠
, 
CLI_MAX_ARGVS
);

255 i‡(
nb_¨gs
 && !
	`°rcmp
(
¨gv
[0], 
m≠
[0]))

256 
	`˛i_m≠_show
(
m
);

258 
	}
}

261 
	$˛i_m≠_dump
(
˛i_m≠
 *
m≠s
, 
¨gc
, **
¨gv
)

263 
i
, 
nb_¨gs
;

264 
˛i_m≠
 *
m
;

265 
löe
[
CLI_MAX_PATH_LENGTH
 + 1], *
m≠
[
CLI_MAX_ARGVS
 + 1], *
p
;

267 
	`mem£t
(
löe
, '\0', (line));

268 
	`mem£t
(
m≠
, '\0', (map));

270 
p
 = 
löe
;

272 
m
 = 
	`˛i_m≠pög
(
m≠s
, 
¨gc
, 
¨gv
);

273 i‡(!
m
) {

274 
	`˛i_¥ötf
("M≠ f‹ %d/", 
¨gc
);

275 
i
 = 0; i < 
¨gc
; i++) {

276 
	`˛i_¥ötf
("<%s>", 
¨gv
[
i
]);

277 i‡((
i
 + 1Ë< 
¨gc
)

278 
	`˛i_¥ötf
(",");

280 
	`˛i_¥ötf
("\n");

283 
	`°r˝y
(
p
, 
m
->
fmt
);

285 
nb_¨gs
 = 
	`πe_°πok
(
p
, " ", 
m≠
, 
CLI_MAX_ARGVS
);

287 
	`˛i_¥ötf
("%4d - %†=%s\n", 
m
->
ödex
, 
¨gv
[0], 
m≠
[0]);

288 
i
 = 1; i < 
¨gc
 && i < 
nb_¨gs
; i++)

289 
	`˛i_¥ötf
(" %†=%s\n", 
¨gv
[
i
], 
m≠
[i]);

290 
	}
}

	@lib/cli/cli_map.h

13 #i‚de‡
_CLI_MAP_H_


14 
	#_CLI_MAP_H_


	)

16 
	~<√töë/ö.h
>

18 #ifde‡
__˝lu•lus


22 
	s˛i_m≠
 {

23 
ödex
;

24 c⁄° *
fmt
;

52 
˛i_m≠
 *
˛i_m≠pög
(˛i_m≠ *
m≠s
,

53 
¨gc
, **
¨gv
);

63 
˛i_m≠_show
(
˛i_m≠
 *
m
);

73 
˛i_m≠s_show
(
˛i_m≠
 *
m≠s
, 
¨gc
, **
¨gv
);

87 
˛i_m≠_dump
(
˛i_m≠
 *
m≠s
, 
¨gc
, **
¨gv
);

101 
˛i_m≠_li°_£¨ch
(c⁄° *
fmt
, *
ôem
, 
ödex
);

103 #ifde‡
__˝lu•lus


	@lib/cli/cli_scrn.c

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<°döt.h
>

12 
	~<°rög.h
>

13 
	~<°d¨g.h
>

14 
	~<uni°d.h
>

15 
	~<sig«l.h
>

16 
	~<sys/io˘l.h
>

18 
	~<πe_©omic.h
>

19 
	~<πe_mÆloc.h
>

20 
	~<πe_•ölock.h
>

22 
	~<˛i.h
>

23 
	~"˛i_s¸n.h
"

24 
	~"˛i_öput.h
"

26 
RTE_DEFINE_PER_LCORE
(
˛i_s¸n
 *, 
s¸n
);

29 
__©åibuã__
((
	$f‹m©
(
¥ötf
, 3, 4)))

30 
	$s¸n_¥ötf
(
öt16_t
 
r
, i¡16_à
c
, c⁄° *
fmt
, ...)

32 
va_li°
 
vaLi°
;

34 i‡–(
r
 !0Ë&& (
c
 != 0) )

35 
	`s¸n_pos
(
r
, 
c
);

36 
	`va_°¨t
(
vaLi°
, 
fmt
);

37 
	`vÂrötf
(
this_s¸n
->
fd_out
, 
fmt
, 
vaLi°
);

38 
	`va_íd
(
vaLi°
);

39 
	`fÊush
(
this_s¸n
->
fd_out
);

40 
	}
}

43 
__©åibuã__
((
	$f‹m©
(
¥ötf
, 3, 4)))

44 
	$s¸n_˝rötf
(
öt16_t
 
r
, i¡16_à
ncﬁs
, c⁄° *
fmt
, ...)

46 
va_li°
 
vaLi°
;

47 
°r
[512];

49 i‡(
ncﬁs
 == -1)

50 
ncﬁs
 = 
this_s¸n
->ncols;

52 
	`va_°¨t
(
vaLi°
, 
fmt
);

53 
	`v¢¥ötf
(
°r
, (°r), 
fmt
, 
vaLi°
);

54 
	`va_íd
(
vaLi°
);

56 
	`s¸n_pos
(
r
, 
	`s¸n_˚¡î_cﬁ
(
ncﬁs
, 
°r
));

57 
	`s¸n_puts
("%s", 
°r
);

58 
	}
}

61 
__©åibuã__
((
	$f‹m©
(
¥ötf
, 4, 5)))

62 
	$s¸n_Ârötf
(
öt16_t
 
r
, i¡16_à
c
, 
FILE
 *
f
, c⁄° *
fmt
, ...)

64 
va_li°
 
vaLi°
;

66 i‡–(
r
 !0Ë&& (
c
 != 0) )

67 
	`s¸n_pos
(
r
, 
c
);

68 
	`va_°¨t
(
vaLi°
, 
fmt
);

69 
	`vÂrötf
(
f
, 
fmt
, 
vaLi°
);

70 
	`va_íd
(
vaLi°
);

71 
	`fÊush
(
f
);

72 
	}
}

75 
	$s¸n_£t_io
(
FILE
 *
ö
, FILE *
out
)

77 
˛i_s¸n
 *
s¸n
 = 
this_s¸n
;

79 i‡(
s¸n
) {

80 i‡(
s¸n
->
fd_ö
 && (s¸n->fd_ö !
°dö
))

81 
	`f˛o£
(
s¸n
->
fd_ö
);

83 i‡(
s¸n
->
fd_out
 && (s¸n->fd_ouà!
°dout
))

84 
	`f˛o£
(
s¸n
->
fd_ö
);

86 
s¸n
->
fd_ö
 = 
ö
;

87 
s¸n
->
fd_out
 = 
out
;

89 
	}
}

92 
	$s¸n_°dö_£tup
()

94 
˛i_s¸n
 *
s¸n
 = 
this_s¸n
;

95 
ãrmios
 
ãrm
;

97 i‡(!
s¸n
)

100 
	`s¸n_£t_io
(
°dö
, 
°dout
);

102 
	`mem£t
(&
s¸n
->
ﬁdãrm
, 0, (
ãrm
));

103 i‡(
	`tcgë©å
(
	`fûío
(
s¸n
->
fd_ö
), &s¸n->
ﬁdãrm
) ||

104 
	`tcgë©å
(
	`fûío
(
s¸n
->
fd_ö
), &
ãrm
)) {

105 
	`¥ötf
("%s: sëu∞Áûed f‹Åty\n", 
__func__
);

109 
ãrm
.
c_lÊag
 &~(
ICANON
 | 
ECHO
 | 
ISIG
 | 
IEXTEN
);

111 i‡(
	`tc£èâr
(
	`fûío
(
s¸n
->
fd_ö
), 
TCSANOW
, &
ãrm
)) {

112 
	`¥ötf
("%s: faûedÅÿ£àây\n", 
__func__
);

117 
	}
}

120 
	$s¸n_°dö_ª°‹e
()

122 
˛i_s¸n
 *
s¸n
 = 
this_s¸n
;

124 i‡(!
s¸n
)

127 i‡(
	`tc£èâr
(
	`fûío
(
s¸n
->
fd_ö
), 
TCSANOW
, &s¸n->
ﬁdãrm
))

128 
	`¥ötf
("%s: faûedÅÿ£àây\n", 
__func__
);

130 i‡(
	`sy°em
("stty sane"))

131 
	`¥ötf
("%s: sy°em comm™d faûed\n", 
__func__
);

132 
	}
}

135 
	$h™dÀ_wöch
(
sig
)

137 
wösize
 
w
;

139 i‡(
sig
 !
SIGWINCH
)

142 
	`io˘l
(0, 
TIOCGWINSZ
, &
w
);

144 
this_s¸n
->
ƒows
 = 
w
.
ws_row
;

145 
this_s¸n
->
ncﬁs
 = 
w
.
ws_cﬁ
;

149 
	`˛i_˛ór_löe
(-1);

150 
	`˛i_ªdi•œy_löe
();

151 
	}
}

154 
	$s¸n_¸óã
(
s¸n_ty≥
, 
theme
)

156 
wösize
 
w
;

157 
˛i_s¸n
 *
s¸n
 = 
this_s¸n
;

158 
siga˘i⁄
 
ß
;

160 
	`mem£t
(&
ß
, 0, (
siga˘i⁄
));

161 
ß
.
ß_h™dÀr
 = 
h™dÀ_wöch
;

162 
	`siga˘i⁄
(
SIGWINCH
, &
ß
, 
NULL
);

164 i‡(!
s¸n
) {

165 
s¸n
 = 
	`mÆloc
((
˛i_s¸n
));

166 i‡(!
s¸n
)

168 
	`mem£t
(
s¸n
, 0, (
˛i_s¸n
));

170 
this_s¸n
 = 
s¸n
;

173 
	`πe_©omic32_£t
(&
s¸n
->
∑u£
, 
SCRN_SCRN_PAUSED
);

175 
	`io˘l
(0, 
TIOCGWINSZ
, &
w
);

177 
s¸n
->
ƒows
 = 
w
.
ws_row
;

178 
s¸n
->
ncﬁs
 = 
w
.
ws_cﬁ
;

179 
s¸n
->
theme
 =Åheme;

180 
s¸n
->
ty≥
 = 
s¸n_ty≥
;

182 i‡(
s¸n_ty≥
 =
SCRN_STDIN_TYPE
) {

183 i‡(
	`s¸n_°dö_£tup
()) {

184 
	`‰ì
(
s¸n
);

188 
	`‰ì
(
s¸n
);

192 
	`s¸n_cﬁ‹
(
SCRN_DEFAULT_FG
, 
SCRN_DEFAULT_BG
, 
SCRN_OFF
);

195 
	}
}

198 
	$s¸n_¸óã_wôh_deÁu…s
(
theme
)

200  
	`s¸n_¸óã
(
SCRN_STDIN_TYPE
,

201 (
theme
)? 
SCRN_THEME_ON
 : 
SCRN_THEME_OFF
);

202 
	}
}

205 
	$s¸n_de°roy
()

207 i‡(
this_s¸n
 && (this_s¸n->
ty≥
 =
SCRN_STDIN_TYPE
))

208 
	`s¸n_°dö_ª°‹e
();

209 
	}
}

	@lib/cli/cli_scrn.h

9 #i‚de‡
__CLI_SCRN_H_


10 
	#__CLI_SCRN_H_


	)

12 
	~<ãrmios.h
>

14 #ifde‡
__˝lu•lus


24 
	~<°rög.h
>

25 
	~<°dio.h
>

26 
	~<°d¨g.h
>

27 
	~<uni°d.h
>

29 
	~<πe_©omic.h
>

30 
	~<πe_≥r_lc‹e.h
>

32 
	#VT100_INITIALIZE
 -1

	)

34 
	#vt100_›í_squ¨e
 '['

	)

35 
	#vt100_esˇ≥
 0x1b

	)

36 
	#vt100_dñ
 0x7f

	)

37 
	#ESC
 "\033"

	)

40 
	#vt100_w‹d_À·
 
ESC
 "b"

	)

41 
	#vt100_w‹d_right
 
ESC
 "f"

	)

42 
	#vt100_suµr
 
ESC
 "[3~"

	)

43 
	#vt100_èb
 "\011"

	)

46 
	#vt100_bñl
 "\007"

	)

47 
	#vt100_bs
 "\010"

	)

48 
	#vt100_bs_˛ór
 "\b \b"

	)

51 
	#vt100_curs‹_off
 
ESC
 "[?25l"

	)

52 
	#vt100_curs‹_⁄
 
ESC
 "[?25h"

	)

53 
	#vt100_ßve_curs‹
 
ESC
 "7"

	)

54 
	#vt100_ª°‹e_curs‹
 
ESC
 "8"

	)

55 
	#vt100_löe_„ed
 
ESC
 "D"

	)

56 
	#vt100_¸∆
 
ESC
 "E"

	)

57 
	#vt100_ªvî£_löe_„ed
 
ESC
 "M"

	)

58 
	#vt100_up_¨r
 
ESC
 "[A"

	)

59 
	#vt100_down_¨r
 
ESC
 "[B"

	)

60 
	#vt100_right_¨r
 
ESC
 "[C"

	)

61 
	#vt100_À·_¨r
 
ESC
 "[D"

	)

62 
	#vt100_up_löes
 
ESC
 "[%dA"

	)

63 
	#vt100_down_löes
 
ESC
 "[%dB"

	)

64 
	#vt100_right_cﬁumns
 
ESC
 "[%dC"

	)

65 
	#vt100_À·_cﬁumns
 
ESC
 "[%dD"

	)

66 
	#vt100_home
 
ESC
 "[H"

	)

68 
	#vt100_pos
 
ESC
 "[%d;%dH"

	)

69 
	#vt100_£tw
 
ESC
 "[%d;r"

	)

70 
	#vt100_˛ór_right
 
ESC
 "[0K"

	)

71 
	#vt100_˛ór_À·
 
ESC
 "[1K"

	)

72 
	#vt100_˛ór_down
 
ESC
 "[0J"

	)

73 
	#vt100_˛ór_up
 
ESC
 "[1J"

	)

74 
	#vt100_˛ór_löe
 
ESC
 "[2K"

	)

75 
	#vt100_˛ór_s¸ìn
 
ESC
 "[2J"

	)

76 
	#vt100_pos_curs‹
 
ESC
 "[%d;%dH"

	)

77 
	#vt100_mu…i_right
 
ESC
 "\133%uC"

	)

78 
	#vt100_mu…i_À·
 
ESC
 "\133%uD"

	)

83 
VT100_INVALID_KEY
 = 0,

84 
VT100_KEY_UP_ARR
,

85 
VT100_KEY_DOWN_ARR
,

86 
VT100_KEY_RIGHT_ARR
,

87 
VT100_KEY_LEFT_ARR
,

88 
VT100_KEY_BKSPACE
,

89 
VT100_KEY_RETURN
,

90 
VT100_KEY_CTRL_A
,

91 
VT100_KEY_CTRL_E
,

92 
VT100_KEY_CTRL_K
,

93 
VT100_KEY_CTRL_Y
,

94 
VT100_KEY_CTRL_C
,

95 
VT100_KEY_CTRL_F
,

96 
VT100_KEY_CTRL_B
,

97 
VT100_KEY_SUPPR
,

98 
VT100_KEY_TAB
,

99 
VT100_KEY_CTRL_D
,

100 
VT100_KEY_CTRL_L
,

101 
VT100_KEY_RETURN2
,

102 
VT100_KEY_META_BKSPACE
,

103 
VT100_KEY_WLEFT
,

104 
VT100_KEY_WRIGHT
,

105 
VT100_KEY_CTRL_W
,

106 
VT100_KEY_CTRL_P
,

107 
VT100_KEY_CTRL_N
,

108 
VT100_KEY_META_D
,

109 
VT100_KEY_CTRL_X
,

110 
VT100_MAX_KEYS


113 c⁄° *
vt100_comm™ds
[];

115 
	evt100_∑r£_°©e
 {

116 
	gVT100_INIT
,

117 
	gVT100_ESCAPE
,

118 
	gVT100_ESCAPE_CSI
,

119 
	gVT100_DONE
 = -1,

120 
	gVT100_CONTINUE
 = -2

123 
	#VT100_BUF_SIZE
 8

	)

124 
	s˛i_vt100
 {

125 
	gbuÂos
;

126 
	gbuf
[
VT100_BUF_SIZE
];

127 
vt100_∑r£_°©e
 
	g°©e
;

130 
	svt100_cmds
 {

131 c⁄° *
	g°r
;

132 (*
	gfunc
)();

136 
	#SCRN_VERSION
 "2.0.0"

	)

139 
	#SCRN_STDIN_TYPE
 0

	)

142 
	s˛i_s¸n
 {

143 
πe_©omic32_t
 
	g∑u£
;

144 
πe_©omic32_t
 
	g°©e
;

145 
uöt16_t
 
	gƒows
;

146 
uöt16_t
 
	gncﬁs
;

147 
uöt16_t
 
	gtheme
;

148 
uöt16_t
 
	gty≥
;

149 
ãrmios
 
	gﬁdãrm
;

150 
FILE
 *
	gfd_out
;

151 
FILE
 *
	gfd_ö
;

155 
uöt8_t
 
	ts¸n_rgb_t
;

157 
RTE_DECLARE_PER_LCORE
(
˛i_s¸n
 *, 
s¸n
);

158 
	#this_s¸n
 
	`RTE_PER_LCORE
(
s¸n
)

	)

161 íum { 
	gSCRN_SCRN_RUNNING
 = 0, 
	gSCRN_SCRN_PAUSED
 = 1 };

164 íum { 
	gSCRN_THEME_OFF
 = 0, 
	gSCRN_THEME_ON
 = 1 };

169 
	gSCRN_BLACK
 = 0, 
	gSCRN_RED
 = 1, 
	gSCRN_GREEN
 = 2, 
	gSCRN_YELLOW
 = 3,

170 
	gSCRN_BLUE
 = 4, 
	gSCRN_MAGENTA
 = 5, 
	gSCRN_CYAN
 = 6, 
	gSCRN_WHITE
 = 7,

171 
	gSCRN_RGB
 = 8, 
	gSCRN_DEFAULT_FG
 = 9, 
	gSCRN_DEFAULT_BG
 = 9,

172 
	gSCRN_NO_CHANGE
 = 98, 
	gSCRN_UNKNOWN_COLOR
 = 99

173 } 
	ts¸n_cﬁ‹_e
;

177 
	gSCRN_OFF
 = 0, 
	gSCRN_BOLD
 = 1, 
	gSCRN_FAINT
 = 2, 
	gSCRN_ITALIC
 = 3,

178 
	gSCRN_UNDERSCORE
 = 4, 
	gSCRN_SLOW_BLINK
 = 5, 
	gSCRN_FAST_BLINK
 = 6,

179 
	gSCRN_REVERSE
 = 7, 
	gSCRN_CONCEALED
 = 8, 
	gSCRN_CROSSOUT
 = 9,

180 
	gSCRN_DEFAULT_FONT
 = 10, 
	gSCRN_UNDERLINE_OFF
 = 24, 
	gSCRN_BLINK_OFF
 = 25,

181 
	gSCRN_INVERSE_OFF
 = 27, 
	gSCRN_REVEAL
 = 28, 
	gSCRN_NOT_CROSSED_OUT
 = 29,

183 
	gSCRN_FRAMED
 = 51, 
	gSCRN_ENCIRCLED
 = 52, 
	gSCRN_OVERLINED
 = 53,

184 
	gSCRN_NOT_FRAMED
 = 54, 
	gSCRN_NOT_OVERLINED
 = 55,

185 
	gSCRN_NO_ATTR
 = 98, 
	gSCRN_UNKNOWN_ATTR
 = 99

186 } 
	ts¸n_©å_e
;

188 
	#SCRN_BLINK
 
SCRN_SLOW_BLINK


	)

191 
uöt8_t
 
	t˛i_rgb_t
;

193 
ölöe
 

194 
s¸n_wrôe
(c⁄° *
°r
, 
Àn
)

196 i‡(
	gÀn
 <= 0)

197 
Àn
 = 
°æí
(
°r
);

199 i‡(
wrôe
(
fûío
(
this_s¸n
->
fd_out
), 
°r
, 
Àn
) !=Üen)

200 
Ârötf
(
°dîr
, "%s: WrôêÁûed\n", 
__func__
);

202  
	gÀn
;

205 
ölöe
 

206 
s¸n_ªad
(*
buf
, 
Àn
)

208 
	gn
 = 0;

210 i‡(!
	gbuf
 || !
	gÀn
)

213 
	gÀn
--)

214 
	gn
 +
ªad
(
fûío
(
this_s¸n
->
fd_ö
), 
buf
++, 1);

215  
	gn
;

218 
ölöe
 

219 
__©åibuã__
((
f‹m©
(
¥ötf
, 1, 2)))

220 
s¸n_puts
(c⁄° *
fmt
, ...)

222 
˛i_s¸n
 *
	gs¸n
 = 
this_s¸n
;

223 
FILE
 * 
	gf
;

224 
va_li°
 
	gvaLi°
;

226 
	gf
 = (!
s¸n
 || !s¸n->
fd_out
)? 
°dout
 : scrn->fd_out;

227 
va_°¨t
(
vaLi°
, 
fmt
);

228 
vÂrötf
(
f
, 
fmt
, 
vaLi°
);

229 
va_íd
(
vaLi°
);

230 
fÊush
(
f
);

233 
s¸n_˝rötf
(
öt16_t
 
r
, i¡16_à
ncﬁs
, c⁄° *
fmt
, ...);

234 
s¸n_¥ötf
(
öt16_t
 
r
, i¡16_à
c
, c⁄° *
fmt
, ...);

235 
s¸n_Ârötf
(
öt16_t
 
r
, i¡16_à
c
, 
FILE
 *
f
, c⁄° *
fmt
, ...);

237 
	#_s
(
_x
, 
_y
Ë
__ölöe__
 _x { _y; }

	)

240 
_s
(
s¸n_pos
(
r
, 
c
), 
s¸n_puts
(
vt100_pos
,Ñ, c))

243 
_s
(
s¸n_t›
(), 
s¸n_puts
("\033H"))

246 
_s
(
s¸n_home
(), 
s¸n_puts
("\033H"))

249 
_s
(
s¸n_coff
(), 
s¸n_puts
("\033[?25l"))

252 
_s
(
s¸n_c⁄
(), 
s¸n_puts
("\033[?25h"))

255 
_s
(
s¸n_tu∫_⁄
(), 
s¸n_puts
("\033[?25h"))

258 
_s
(
s¸n_tu∫_off
(), 
s¸n_puts
("\033[?25l"))

261 
_s
(
s¸n_ßve
(), 
s¸n_puts
("\0337"))

264 
_s
(
s¸n_ª°‹e
(), 
s¸n_puts
("\0338"))

267 
_s
(
s¸n_eﬁ
(), 
s¸n_puts
("\033[K"))

270 
_s
(
s¸n_cbl
(), 
s¸n_puts
("\033[1K"))

273 
_s
(
s¸n_˚l
(), 
s¸n_puts
("\033[2K"))

276 
_s
(
s¸n_˛w
(), 
s¸n_puts
("\033[J"))

279 
_s
(
s¸n_˛b
(), 
s¸n_puts
("\033[1J"))

282 
_s
(
s¸n_˛s
(), 
s¸n_puts
("\033[2J"))

285 
_s
(
s¸n_ªvî£
(), 
s¸n_puts
("\033[7m"))

288 
_s
(
s¸n_n‹mÆ
(), 
s¸n_puts
("\033[0m"))

291 
_s
(
s¸n_s¸ﬁl
(
r
), 
s¸n_puts
("\033[%d;r",Ñ))

294 
_s
(
s¸n_s¸ﬁl_up
(
r
), 
s¸n_puts
("\033[%dS",Ñ))

297 
_s
(
s¸n_s¸ﬁl_down
(
r
), 
s¸n_puts
("\033[%dT",Ñ))

300 
_s
(
s¸n_∆öes
(
r
), 
s¸n_puts
("\033[%dE",Ñ))

303 
_s
(
s¸n_£tw
(
t
), 
s¸n_puts
("\033[%d;r",Å))

306 
_s
(
s¸n_˝os
(), 
s¸n_puts
("\033[6n"))

309 
_s
(
s¸n_˙right
(
n
), 
s¸n_puts
("\033[%dC",Ç))

312 
_s
(
s¸n_˙À·
(
n
), 
s¸n_puts
("\033[%dD",Ç))

315 
_s
(
s¸n_√wlöe
(), 
s¸n_puts
("\033[20h"))

318 
_s
(
s¸n_¸ight
(), 
s¸n_puts
("\033[C"))

321 
_s
(
s¸n_˛e·
(), 
s¸n_puts
("\033[D"))

324 
_s
(
s¸n_bﬁ
(), 
s¸n_puts
("\r"))

327 
__ölöe__
 const *

328 
s¸n_vîsi⁄
()

330  
	gSCRN_VERSION
;

334 
__ölöe__
 

335 
s¸n_˛r_löe
(
r
)

337 
s¸n_pos
(
r
, 0);

338 
s¸n_˚l
();

342 
__ölöe__
 

343 
s¸n_eﬁ_pos
(
r
, 
c
)

345 
s¸n_pos
(
r
, 
c
);

346 
s¸n_eﬁ
();

349 
__£t_¥om±
();

352 
__ölöe__
 

353 
s¸n_∑u£
()

355 
πe_©omic32_£t
(&
this_s¸n
->
∑u£
, 
SCRN_SCRN_PAUSED
);

356 
__£t_¥om±
();

360 
__ölöe__
 

361 
s¸n_ªsume
()

363 
πe_©omic32_£t
(&
this_s¸n
->
∑u£
, 
SCRN_SCRN_RUNNING
);

364 
__£t_¥om±
();

368 
__ölöe__
 

369 
s¸n_is_∑u£d
()

371  
πe_©omic32_ªad
(&
this_s¸n
->
∑u£
Ë=
SCRN_SCRN_PAUSED
;

375 
__ölöe__
 

376 
s¸n_˚¡î_cﬁ
(
öt16_t
 
ncﬁs
, c⁄° *
msg
)

378 
öt16_t
 
	gs
;

380 
	gs
 = ((
ncﬁs
 / 2Ë- (
°æí
(
msg
) / 2));

381  (
	gs
 <0Ë? 1 : 
s
;

386 
__ölöe__
 

387 
s¸n_îa£
(
öt16_t
 
ƒows
)

389 
s¸n_£tw
(1);

390 
s¸n_pos
(
ƒows
 + 1, 1);

394 
__ölöe__
 

395 
s¸n_ª≥©
(
öt16_t
 
r
, i¡16_à
c
, c⁄° *
°r
, 
˙t
)

397 
	gi
;

399 
s¸n_pos
(
r
, 
c
);

400 
	gi
 = 0; i < 
	g˙t
; i++)

401 
s¸n_¥ötf
(0, 0, "%s", 
°r
);

406 
__ölöe__
 

407 
s¸n_cﬁ_ª≥©
(
öt16_t
 
r
, i¡16_à
c
, c⁄° *
°r
, 
˙t
)

409 
	gi
;

411 
	gi
 = 0; i < 
	g˙t
; i++) {

412 
s¸n_pos
(
r
++, 
c
);

413 
s¸n_¥ötf
(0, 0, "%s", 
°r
);

418 
__ölöe__
 

419 
s¸n_fgcﬁ‹
(
s¸n_cﬁ‹_e
 
cﬁ‹
, 
s¸n_©å_e
 
©å
)

421 
s¸n_puts
("\033[%d;%dm", 
©å
, 
cﬁ‹
 + 30);

425 
__ölöe__
 

426 
s¸n_bgcﬁ‹
(
s¸n_cﬁ‹_e
 
cﬁ‹
, 
s¸n_©å_e
 
©å
)

428 
s¸n_puts
("\033[%d;%dm", 
©å
, 
cﬁ‹
 + 40);

433 
__ölöe__
 

434 
s¸n_fgbgcﬁ‹
(
s¸n_cﬁ‹_e
 
fg
, s¸n_cﬁ‹_ê
bg
, 
s¸n_©å_e
 
©å
)

436 
s¸n_puts
("\033[%d;%d;%dm", 
©å
, 
fg
 + 30, 
bg
 + 40);

441 
__ölöe__
 

442 
s¸n_cﬁ‹
(
s¸n_cﬁ‹_e
 
fg
, s¸n_cﬁ‹_ê
bg
, 
s¸n_©å_e
 
©å
)

445 i‡–(
	gfg
 !
SCRN_NO_CHANGE
Ë&& (
bg
 != SCRN_NO_CHANGE) )

446 
s¸n_fgbgcﬁ‹
(
fg
, 
bg
, 
©å
);

447 i‡(
	gfg
 =
SCRN_NO_CHANGE
)

448 
s¸n_bgcﬁ‹
(
bg
, 
©å
);

449 i‡(
	gbg
 =
SCRN_NO_CHANGE
)

450 
s¸n_fgcﬁ‹
(
fg
, 
©å
);

455 
__ölöe__
 

456 
s¸n_rgb
(
uöt8_t
 
fg_bg
, 
˛i_rgb_t
 
r
, cli_rgb_à
g
, cli_rgb_à
b
)

458 
s¸n_puts
("\033[%d;2;%d;%d;%dm", 
fg_bg
, 
r
, 
g
, 
b
);

462 
__ölöe__
 

463 
s¸n_fgcﬁ‹_°r
(*
°r
, 
s¸n_cﬁ‹_e
 
cﬁ‹
, 
s¸n_©å_e
 
©å
)

465  
¢¥ötf
(
°r
, 16, 
ESC
 "[%d;%dm", 
©å
, 
cﬁ‹
 + 30);

469 
__ölöe__
 

470 
s¸n_bgcﬁ‹_°r
(*
°r
, 
s¸n_cﬁ‹_e
 
cﬁ‹
, 
s¸n_©å_e
 
©å
)

472  
¢¥ötf
(
°r
, 16, 
ESC
 "[%d;%dm", 
©å
, 
cﬁ‹
 + 40);

476 
__ölöe__
 

477 
s¸n_fgbgcﬁ‹_°r
(*
°r
, 
s¸n_cﬁ‹_e
 
fg
, s¸n_cﬁ‹_ê
bg
, 
s¸n_©å_e
 
©å
)

479  
¢¥ötf
(
°r
, 16, 
ESC
 "[%d;%d;%dm", 
©å
, 
fg
 + 30, 
bg
 + 40);

486 
__ölöe__
 

487 
s¸n_cﬁ‹_°r
(*
°r
, 
s¸n_cﬁ‹_e
 
fg
, s¸n_cﬁ‹_ê
bg
, 
s¸n_©å_e
 
©å
)

489 i‡–(
	gfg
 !
SCRN_NO_CHANGE
Ë&& (
bg
 != SCRN_NO_CHANGE))

490  
s¸n_fgbgcﬁ‹_°r
(
°r
, 
fg
, 
bg
, 
©å
);

491 i‡(
	gfg
 =
SCRN_NO_CHANGE
)

492  
s¸n_bgcﬁ‹_°r
(
°r
, 
bg
, 
©å
);

493 i‡(
	gbg
 =
SCRN_NO_CHANGE
)

494  
s¸n_fgcﬁ‹_°r
(
°r
, 
fg
, 
©å
);

500 
__ölöe__
 

501 
s¸n_rgb_°r
(*
°r
, 
uöt8_t
 
fg_bg
, 
s¸n_rgb_t
 
r
, s¸n_rgb_à
g
, s¸n_rgb_à
b
)

503  
¢¥ötf
(
°r
, 16, 
ESC
 "[%d;2;%d;%d;%dm", 
fg_bg
, 
r
, 
g
, 
b
);

508 
s¸n_¸óã
(
s¸n_ty≥
, 
theme
);

509 
s¸n_¸óã_wôh_deÁu…s
(
theme
);

510 
s¸n_de°roy
();

518 
˛i_vt100
 *
vt100_£tup
();

526 
vt100_‰ì
(
˛i_vt100
 *
vt
);

540 
vt100_∑r£_öput
(
˛i_vt100
 *
vt
, 
uöt8_t
 
c
);

542 
vt100_do_cmd
(
idx
);

543 
vt100_cmds
 *
vt100_gë_cmds
();

545 #ifde‡
__˝lu•lus


	@lib/cli/cli_search.c

7 
	~<πe_°rög_‚s.h
>

9 
	~"˛i.h
"

10 
	~"˛i_°rög_‚s.h
"

13 
	$__cou¡_nodes
(
˛i_node
 *
node
,

14 
uöt32_t
 
Êags
, 
¨gs_t
 *
¨gs
)

16 i‡(
Êags
 & 
node
->
ty≥
)

17 
¨gs
->
¨g1
.
u32
[0]++;

20 
	}
}

22 
uöt32_t


23 
	$˛i_dú_ôem_cou¡
(
˛i_node
 *
node
, 
uöt32_t
 
ty≥s
)

25 
¨gs_t
 
¨gs
;

27 i‡(!
node
 || !
	`is_dúe˘‹y
(node))

30 
	`mem£t
(&
¨gs
, '\0', (args));

32 
	`˛i_sˇn_dúe˘‹y
(
node
, 
__cou¡_nodes
, 
ty≥s
, &
¨gs
);

34  
¨gs
.
¨g1
.
u32
[0];

35 
	}
}

37 
uöt32_t


38 
	$˛i_∑th_ôem_cou¡
(
uöt32_t
 
ty≥s
)

40 
uöt32_t
 
˙t
 = 0, 
i
;

43 
i
 = 0; i < 
CLI_MAX_BINS
; i++)

44 
˙t
 +
	`˛i_dú_ôem_cou¡
(
this_˛i
->
bös
[
i
], 
ty≥s
);

46  
˙t
;

47 
	}
}

49 
uöt32_t


50 
	$˛i_∑th_cmd_cou¡
()

52  
	`˛i_∑th_ôem_cou¡
(
CLI_EXE_TYPE
);

53 
	}
}

55 
uöt32_t


56 
	$node_li°_wôh_ty≥
(
uöt32_t
 
Êags
, **
ªt
)

58 
˛i_node
 *
n
, **
nodes
, *
bö
;

59 
uöt32_t
 
˙t
, 
i
, 
k
 = 0;

61 
˙t
 = 
	`˛i_∑th_ôem_cou¡
(
Êags
);

63 i‡(
˙t
) {

64 
nodes
 = 
	`ˇŒoc
(
˙t
 + 1, (
˛i_node
 *));

65 i‡(!
nodes
)

68 
i
 = 0; i < 
CLI_MAX_BINS
; i++) {

69 
bö
 = 
this_˛i
->
bös
[
i
];

70 i‡(!
bö
)

77 i‡((
i
 > 0Ë&& (
bö
 =
	`gë_cwd
())) {

78 
	`˛i_¥ötf
("skù %s\n", 
bö
->
«me
);

82 
	`TAILQ_FOREACH
(
n
, &
bö
->
ôems
, 
√xt
) {

83 i‡(
n
->
ty≥
 & 
Êags
)

84 
nodes
[
k
++] = 
n
;

87 *
ªt
 = 
nodes
;

89  
k
;

90 
	}
}

92 
uöt32_t


93 
	$dú_li°_wôh_ty≥
(
˛i_node
 *
dú
, 
uöt32_t
 
Êags
, **
ªt
)

95 
˛i_node
 *
n
, **
nodes
;

96 
uöt32_t
 
˙t
, 
k
 = 0;

98 
˙t
 = 
	`˛i_dú_ôem_cou¡
(
dú
, 
Êags
);

100 i‡(
˙t
) {

101 
nodes
 = 
	`ˇŒoc
(
˙t
 + 1, (
˛i_node
 *));

102 i‡(!
nodes
)

105 
	`TAILQ_FOREACH
(
n
, &
dú
->
ôems
, 
√xt
) {

106 i‡(
n
->
ty≥
 & 
Êags
)

107 
nodes
[
k
++] = 
n
;

109 *
ªt
 = 
nodes
;

111  
k
;

112 
	}
}

114 
uöt32_t


115 
	$˛i_node_li°_wôh_ty≥
(
˛i_node
 *
node
, 
uöt32_t
 
Êags
, **
ªt
)

117 i‡(
node
)

118  
	`dú_li°_wôh_ty≥
(
node
, 
Êags
, 
ªt
);

120  
	`node_li°_wôh_ty≥
(
Êags
, 
ªt
);

121 
	}
}

124 
	$˛i_node_li°_‰ì
(*
nodes
)

126 
	`‰ì
(
nodes
);

127 
	}
}

130 
	$˛i_sˇn_dúe˘‹y
(
˛i_node
 *
dú
,

131 
˛i_sˇn_t
 
func
, 
uöt32_t
 
Êags
, 
¨gs_t
 *
¨gs
)

133 
˛i_node
 *
node
;

134 
ªt
 = 0;

136 i‡(!
func
)

137  
ªt
;

139 i‡(!
dú
)

140 
dú
 = 
	`˛i_roŸ_node
();

142 
	`TAILQ_FOREACH
(
node
, &
dú
->
ôems
, 
√xt
) {

143 i‡(
node
->
ty≥
 & 
Êags
) {

144 
ªt
 = 
	`func
(
node
, 
Êags
, 
¨gs
);

145 i‡(
ªt
)

149  
ªt
;

150 
	}
}

153 
	$˛i_sˇn_∑th
(c⁄° *
∑th
, 
˛i_sˇn_t
 
func
, 
uöt32_t
 
Êags
, 
¨gs_t
 *
¨gs
)

155 
˛i_node
 *
node
;

157 i‡(
	`˛i_föd_node
(
∑th
, &
node
))

158 i‡(
	`˛i_sˇn_dúe˘‹y
(
node
, 
func
, 
Êags
, 
¨gs
))

161 
	}
}

163 
˛i_node
 *

164 
	$˛i_£¨ch_dú
(
˛i_node
 *
dú
, c⁄° *
«me
, 
uöt32_t
 
ty≥
)

166 
˛i_node
 *
node
;

168 i‡(!
«me
 || (*name == '\0'))

169  
NULL
;

171 i‡(!
dú
)

172 
dú
 = 
	`gë_cwd
();

173 i‡(!
	`is_dúe˘‹y
(
dú
))

174  
NULL
;

177 i‡(!
	`°rcmp
(
«me
, ".."))

178  (
dú
->
∑ª¡
Ë? dú->∑ª¡ : 
NULL
;

179 i‡(!
	`°rcmp
(
«me
, "."))

180  
dú
;

182 
	`TAILQ_FOREACH
(
node
, &
dú
->
ôems
, 
√xt
) {

183 i‡(
	`πe_°rm©ch
(
node
->
«me
,ÇameË&& (node->
ty≥
 &Åype))

184  
node
;

187  
NULL
;

188 
	}
}

191 
	$˛i_föd_node
(c⁄° *
∑th
, 
˛i_node
 **
ªt
)

193 
˛i_node
 *
node
, *
dú
;

194 *
my_∑th
 = 
NULL
;

195 *
¨gv
[
CLI_MAX_ARGVS
 + 1];

196 
n
, 
i
;

198 i‡(!
∑th
 || (*path == '\0'))

201 i‡(
∑th
[0] == '/' &&Öath[1] == '\0') {

202 
node
 = 
	`˛i_roŸ_node
();

203 
_Àave
;

207 
my_∑th
 = 
	`°rdup
((
∑th
[0] == '/') ? &path[1] :Öath);

208 i‡(!
my_∑th
)

211 
n
 = 
	`πe_°πok
(
my_∑th
, "/", 
¨gv
, 
CLI_MAX_ARGVS
);

214 i‡(
∑th
[0] == '/')

215 
dú
 = 
this_˛i
->
roŸ
.
tqh_fú°
;

217 
dú
 = 
	`gë_cwd
();

220 
i
 = 0, 
node
 = 
NULL
; i < 
n
; i++) {

221 
node
 = 
	`˛i_£¨ch_dú
(
dú
, 
¨gv
[
i
], 
CLI_ALL_TYPE
);

223 i‡(!
node
)

227 i‡(
	`is_dúe˘‹y
(
node
Ë&& (
i
 < 
n
))

228 
dú
 = 
node
;

233 
	`‰ì
(
my_∑th
);

235 
_Àave
:

236 i‡(
ªt
)

237 *
ªt
 = 
node
;

239  (
node
) ? 1 : 0;

240 
	}
}

242 
˛i_node
 *

243 
	$˛i_œ°_node_ö_∑th
(c⁄° *
∑th
)

245 
˛i_node
 *
node
, *
dú
;

246 *
my_∑th
 = 
NULL
;

247 *
¨gv
[
CLI_MAX_ARGVS
+1];

248 
n
, 
i
;

250 i‡(!
∑th
 || (*path == '\0'))

251  
	`gë_cwd
();

253 i‡(
∑th
[0] == '/' &&Öath[1] == '\0')

254  
	`˛i_roŸ_node
();

257 
my_∑th
 = 
	`°rdup
((
∑th
[0] == '/') ? &path[1] :Öath);

258 i‡(!
my_∑th
)

259  
NULL
;

261 
n
 = 
	`πe_°πok
(
my_∑th
, "/", 
¨gv
, 
CLI_MAX_ARGVS
);

264 i‡(
∑th
[0] == '/')

265 
dú
 = 
this_˛i
->
roŸ
.
tqh_fú°
;

267 
dú
 = 
	`gë_cwd
();

270 
i
 = 0, 
node
 = 
NULL
; i < 
n
; i++) {

271 
node
 = 
	`˛i_£¨ch_dú
(
dú
, 
¨gv
[
i
], 
CLI_ALL_TYPE
);

273 i‡(!
node
)

277 i‡(
	`is_dúe˘‹y
(
node
Ë&& (
i
 < 
n
))

278 
dú
 = 
node
;

283 
	`‰ì
(
my_∑th
);

285  
dú
;

286 
	}
}

288 
˛i_node
 *

289 
	$˛i_föd_cmd
(c⁄° *
∑th
)

291 
˛i_node
 *
cmd
, *
dú
;

292 
i
;

294 i‡(
	`˛i_föd_node
(
∑th
, &
cmd
))

295  
cmd
;

297 
i
 = 0; i < 
CLI_MAX_BINS
; i++) {

298 i‡((
dú
 = 
this_˛i
->
bös
[
i
]Ë=
NULL
)

301 
cmd
 = 
	`˛i_£¨ch_dú
(
dú
, 
∑th
, 
CLI_EXE_TYPE
);

302 i‡(
cmd
)

303  
cmd
;

305  
NULL
;

306 
	}
}

	@lib/cli/cli_search.h

7 #i‚de‡
_CLI_SEARCH_H_


8 
	#_CLI_SEARCH_H_


	)

10 
	~<°dio.h
>

11 
	~<°döt.h
>

12 
	~<°dlib.h
>

13 
	~<°rög.h
>

14 
	~<°d¨g.h
>

15 
	~<uni°d.h
>

16 
	~<öây≥s.h
>

24 #ifde‡
__˝lu•lus


29 *
voidp
;

30 
chr
[8];

31 
uöt64_t
 
u64
;

32 
uöt32_t
 
u32
[2];

33 
uöt16_t
 
u16
[4];

34 } 
	t¨g_u
;

37 
¨g_u
 
¨g1
;

38 
¨g_u
 
¨g2
;

39 
¨g_u
 
¨g3
;

40 
¨g_u
 
¨g4
;

41 } 
	t¨gs_t
;

43 
˛i
;

44 
˛i_node
;

46 (*
˛i_sˇn_t
)(
	t˛i_node
 *
	tnode
,

47 
	tuöt32_t
 
	tÊags
, 
	t¨gs_t
 *
	t¨gs
);

66 
˛i_sˇn_dúe˘‹y
(
˛i_node
 *
dú
,

67 
˛i_sˇn_t
 
func
, 
uöt32_t
 
Êags
, 
¨gs_t
 *
¨gs
);

81 
˛i_föd_node
–c⁄° *
∑th
, 
˛i_node
 **
ªt
);

93 
˛i_node
 *
˛i_föd_cmd
(c⁄° *
∑th
);

105 
uöt32_t
 
˛i_dú_ôem_cou¡
(
˛i_node
 *
node
, uöt32_à
ty≥s
);

115 
uöt32_t
 
˛i_∑th_cmd_cou¡
();

131 
uöt32_t
 
˛i_node_li°_wôh_ty≥
(
˛i_node
 *
node
,

132 
uöt32_t
 
Êags
, **
ªt
);

144 
˛i_node_li°_‰ì
(*
nodes
);

156 
uöt32_t
 
˛i_∑th_ôem_cou¡
(uöt32_à
ty≥s
);

168 
˛i_node
 *
˛i_œ°_node_ö_∑th
(c⁄° *
∑th
);

184 
˛i_node
 *
˛i_£¨ch_dú
(˛i_nodê*
dú
,

185 c⁄° *
«me
, 
uöt32_t
 
ty≥
);

203 
˛i_sˇn_∑th
(c⁄° *
∑th
, 
˛i_sˇn_t
 
func
,

204 
uöt32_t
 
Êags
, 
¨gs_t
 *
¨gs
);

206 #ifde‡
__˝lu•lus


	@lib/cli/cli_string_fns.c

7 
	~<πe_ëhdev.h
>

9 
	~"˛i.h
"

10 
	~"˛i_£¨ch.h
"

11 
	~"˛i_°rög_‚s.h
"

13 
	#SIZE_OF_PORTLIST
 ((
p‹éi°_t
Ë* 8)

	)

16 
	$πe_°πrim£t
(*
°r
, c⁄° *
£t
)

19 i‡(!
°r
 || !*°∏|| !
£t
 || (
	`°æí
(set) != 2))

20  
NULL
;

23 (*
°r
 =
£t
[0]Ë|| 
	`is•a˚
(*str))

24 
°r
++;

26 i‡(*
°r
) {

27 *
p
 = &
°r
[
	`°æí
(str) - 1];

29 (
p
 >
°r
Ë&& (
	`is•a˚
(*pË|| (*∞=
£t
[1])))

30 
p
--;

32 
p
[1] = '\0';

35  
°r
;

36 
	}
}

39 
	$πe_°πrim
(*
°r
)

41 i‡(!
°r
 || !*str)

42  
°r
;

45 
	`is•a˚
(*
°r
))

46 
°r
++;

49 i‡(*
°r
) {

50 *
p
 = &
°r
[
	`°æí
(str) - 1];

53 (
p
 >
°r
Ë&& 
	`is•a˚
(*p))

54 
p
--;

56 
p
[1] = '\0';

58  
°r
;

59 
	}
}

62 
	$πe_°πok
(*
°r
, c⁄° *
dñim
, **
íåõs
, 
maxtokís
)

64 
i
 = 0;

65 *
ßved
;

67 i‡(!
°r
 || !
dñim
 || !
íåõs
 || !
maxtokís
)

71 
íåõs
[
i
] = 
	`πe_°πrim
(
	`°πok_r
(
°r
, 
dñim
, &
ßved
));

72 
°r
 = 
NULL
;

73 } 
íåõs
[
i
] && (++ò< 
maxtokís
));

75  
i
;

76 
	}
}

79 
	$πe_°rqtok
(*
°r
, c⁄° *
dñim
, *
¨gv
[], 
maxtokís
)

81 *
p
, *
°¨t_of_w‹d
, *
s
;

82 
c
, 
¨gc
 = 0;

83 íum { 
INIT
, 
WORD
, 
STRING_QUOTE
, 
STRING_TICK
 } 
°©e
 = WORD;

85 i‡(!
°r
 || !
dñim
 || !
¨gv
 || 
maxtokís
 == 0)

89 
s
 = 
	`πe_°πrim
(
°r
);

91 
°¨t_of_w‹d
 = 
s
;

92 
p
 = 
s
; (
¨gc
 < 
maxtokís
) && (*p != '\0');Ö++) {

93 
c
 = ()*
p
;

95 i‡(
c
 == '\\') {

96 
°¨t_of_w‹d
 = ++
p
;

100 
°©e
) {

101 
INIT
:

102 i‡(
c
 == '"') {

103 
°©e
 = 
STRING_QUOTE
;

104 
°¨t_of_w‹d
 = 
p
 + 1;

105 } i‡(
c
 == '\'') {

106 
°©e
 = 
STRING_TICK
;

107 
°¨t_of_w‹d
 = 
p
 + 1;

108 } i‡(!
	`°rchr
(
dñim
, 
c
)) {

109 
°©e
 = 
WORD
;

110 
°¨t_of_w‹d
 = 
p
;

114 
STRING_QUOTE
:

115 i‡(
c
 == '"') {

116 *
p
 = 0;

117 
¨gv
[
¨gc
++] = 
°¨t_of_w‹d
;

118 
°©e
 = 
INIT
;

122 
STRING_TICK
:

123 i‡(
c
 == '\'') {

124 *
p
 = 0;

125 
¨gv
[
¨gc
++] = 
°¨t_of_w‹d
;

126 
°©e
 = 
INIT
;

130 
WORD
:

131 i‡(
	`°rchr
(
dñim
, 
c
)) {

132 *
p
 = 0;

133 
¨gv
[
¨gc
++] = 
°¨t_of_w‹d
;

134 
°©e
 = 
INIT
;

135 
°¨t_of_w‹d
 = 
p
 + 1;

144 i‡((
°©e
 !
INIT
Ë&& (
¨gc
 < 
maxtokís
))

145 
¨gv
[
¨gc
++] = 
°¨t_of_w‹d
;

147 i‡((
¨gc
 =0Ë&& (
p
 !
°r
))

148 
¨gv
[
¨gc
++] = 
°r
;

150  
¨gc
;

151 
	}
}

153 #i‚de‡
_RTE_STRING_FNS_H_


155 
	$πe_°r•lô
(*
°rög
, 
°rögÀn
,

156 **
tokís
, 
maxtokís
, 
dñim
)

158 *
s
, 
d
[3];

160 i‡(
°rögÀn
 <= 0)

163 
s
 = 
	`Æloˇ
(
°rögÀn
 + 1);

164 i‡(
s
) {

165 
	`mem˝y
(
s
, 
°rög
, 
°rögÀn
);

166 
s
[
°rögÀn
] = '\0';

168 
	`¢¥ötf
(
d
, (d), "%c", 
dñim
);

170  
	`πe_°πok
(
s
, 
d
, 
tokís
, 
maxtokís
);

173 
	}
}

177 
	$πe_°r›t
(c⁄° *
li°
, *
°r
, c⁄° *
dñim
)

179 *
¨gv
[
STR_MAX_ARGVS
 + 1], *
buf
;

180 
size_t
 
n
, 
i
;

182 i‡(!
li°
 || !
°r
 || !
dñim
)

185 i‡((
li°
[0] == '%') && (list[1] == '|'))

186 
li°
 += 2;

188 i‡(!*
li°
)

191 
n
 = 
	`°æí
(
li°
) + 2;

193 
buf
 = 
	`Æloˇ
(
n
);

194 i‡(
buf
) {

195 
	`¢¥ötf
(
buf
, 
n
, "%s", 
li°
);

197 
n
 = 
	`πe_°πok
(
buf
, 
dñim
, 
¨gv
, 
STR_MAX_ARGVS
);

199 
i
 = 0; i < 
n
; i++)

200 i‡(
	`πe_°rm©ch
(
¨gv
[
i
], 
°r
))

201  
i
;

205 
	}
}

207 
ölöe
 

208 
	$£t_p‹éi°_bôs
(
size_t
 
low
, size_à
high
, 
uöt64_t
 *
m≠
)

211 *
m≠
 |(1LL << 
low
++);

212 } 
low
 <
high
);

213 
	}
}

215 
	#MAX_SPLIT
 64

	)

218 
	$πe_∑r£_p‹éi°
(c⁄° *
°r
, 
p‹éi°_t
 *
p‹éi°
)

220 
size_t
 
ps
, 
≥
, 
n
, 
i
;

221 *
•lô
[
MAX_SPLIT
], *
s
, *
p
;

222 
uöt64_t
 
m≠
 = 0;

224 i‡(!
°r
 || !*str)

227 i‡(!
	`°rcmp
(
°r
, "all")) {

228 i‡(
p‹éi°
) {

229 
uöt32_t
 
i
;

230 
i
 = 0; i < 
SIZE_OF_PORTLIST
; i++)

231 *
p‹éi°
 |(1LL << 
i
);

236 
n
 = 
	`°æí
(
°r
);

237 
s
 = 
	`Æloˇ
(
n
 + 1);

238 i‡(!
s
)

241 
	`mem˝y
(
s
, 
°r
, 
n
);

242 
s
[
n
] = '\0';

244 
n
 = 
	`πe_°πok
(
s
, ",", 
•lô
, 
MAX_SPLIT
);

245 i‡(!
n
)

248 
i
 = 0; i < 
n
; i++) {

249 
p
 = 
	`°rchr
(
•lô
[
i
], '-');

251 i‡(!
p
) {

252 
ps
 = 
	`°πoul
(
•lô
[
i
], 
NULL
, 10);

253 
≥
 = 
ps
;

255 *
p
++ = '\0';

256 
ps
 = 
	`°πoul
(
•lô
[
i
], 
NULL
, 10);

257 
≥
 = 
	`°πoul
(
p
, 
NULL
, 10);

260 i‡((
ps
 > 
≥
Ë|| (≥ >((
m≠
) * 8)))

263 
	`£t_p‹éi°_bôs
(
ps
, 
≥
, &
m≠
);

266 i‡(
p‹éi°
)

267 *
p‹éi°
 = 
m≠
;

270 
	}
}

275 
	$isbœnk2
(
c
)

277 i‡(
c
 == ' ' || c == '\t' )

280 
	}
}

283 
	$i£ndoÊöe
(
c
)

285 i‡(
c
 == '\n' || c == '\r' )

288 
	}
}

291 
	$iscommít
(
c
)

293 i‡(
c
 == '#')

296 
	}
}

299 
	$πe_i£ndo·okí
(
c
)

301 i‡(!
c
 || 
	`iscommít
(cË|| 
	`isbœnk2
(cË|| 
	`i£ndoÊöe
(c))

304 
	}
}

316 
	$öë_±⁄4
(c⁄° *
§c
, *
d°
)

318 c⁄° 
digôs
[] = "0123456789";

319 
ßw_digô
, 
o˘ës
, 
ch
;

320 
tmp
[
RTE_INADDRSZ
], *
ç
;

322 
ßw_digô
 = 0;

323 
o˘ës
 = 0;

324 *(
ç
 = 
tmp
) = 0;

325 (
ch
 = *
§c
++) != '\0') {

326 c⁄° *
pch
;

328 i‡((
pch
 = 
	`°rchr
(
digôs
, 
ch
)Ë!
NULL
) {

329 
√w
 = *
ç
 * 10 + (
pch
 - 
digôs
);

331 i‡(
√w
 > 255)

333 i‡(!
ßw_digô
) {

334 i‡(++
o˘ës
 > 4)

336 
ßw_digô
 = 1;

338 *
ç
 = ()
√w
;

339 } i‡(
ch
 ='.' && 
ßw_digô
) {

340 i‡(
o˘ës
 == 4)

342 *++
ç
 = 0;

343 
ßw_digô
 = 0;

347 i‡(
o˘ës
 < 4)

350 
	`mem˝y
(
d°
, 
tmp
, 
RTE_INADDRSZ
);

352 
	}
}

367 
	$öë_±⁄6
(c⁄° *
§c
, *
d°
)

369 c⁄° 
xdigôs_l
[] = "0123456789abcdef",

370 
xdigôs_u
[] = "0123456789ABCDEF";

371 
tmp
[
RTE_IN6ADDRSZ
], *
ç
 = 0, *
ídp
 = 0, *
cﬁ⁄p
 = 0;

372 c⁄° *
xdigôs
 = 0, *
cuπok
 = 0;

373 
ch
 = 0, 
ßw_xdigô
 = 0, 
cou¡_xdigô
 = 0;

374 
vÆ
 = 0;

375 
dblo˘_cou¡
 = 0;

377 
	`mem£t
((
ç
 = 
tmp
), '\0', 
RTE_IN6ADDRSZ
);

378 
ídp
 = 
ç
 + 
RTE_IN6ADDRSZ
;

379 
cﬁ⁄p
 = 
NULL
;

381 i‡(*
§c
 == ':')

382 i‡(*++
§c
 != ':')

384 
cuπok
 = 
§c
;

385 
ßw_xdigô
 = 
cou¡_xdigô
 = 0;

386 
vÆ
 = 0;

388 (
ch
 = *
§c
++) != '\0') {

389 c⁄° *
pch
;

391 i‡((
pch
 = 
	`°rchr
((
xdigôs
 = 
xdigôs_l
), 
ch
)Ë=
NULL
)

392 
pch
 = 
	`°rchr
((
xdigôs
 = 
xdigôs_u
), 
ch
);

393 i‡(
pch
 !
NULL
) {

394 i‡(
cou¡_xdigô
 >= 4)

396 
vÆ
 <<= 4;

397 
vÆ
 |(
pch
 - 
xdigôs
);

398 i‡(
vÆ
 > 0xffff)

400 
ßw_xdigô
 = 1;

401 
cou¡_xdigô
++;

404 i‡(
ch
 == ':') {

405 
cuπok
 = 
§c
;

406 i‡(!
ßw_xdigô
) {

407 i‡(
cﬁ⁄p
)

409 
cﬁ⁄p
 = 
ç
;

411 } i‡(*
§c
 == '\0')

413 i‡(
ç
 + (
öt16_t
Ë> 
ídp
)

415 *
ç
++ = (Ë((
vÆ
 >> 8) & 0xff);

416 *
ç
++ = (Ë(
vÆ
 & 0xff);

417 
ßw_xdigô
 = 0;

418 
cou¡_xdigô
 = 0;

419 
vÆ
 = 0;

420 
dblo˘_cou¡
++;

423 i‡(
ch
 ='.' && ((
ç
 + 
RTE_INADDRSZ
Ë<
ídp
) &&

424 
	`öë_±⁄4
(
cuπok
, 
ç
) > 0) {

425 
ç
 +
RTE_INADDRSZ
;

426 
ßw_xdigô
 = 0;

427 
dblo˘_cou¡
 += 2;

432 i‡(
ßw_xdigô
) {

433 i‡(
ç
 + (
öt16_t
Ë> 
ídp
)

435 *
ç
++ = (Ë((
vÆ
 >> 8) & 0xff);

436 *
ç
++ = (Ë(
vÆ
 & 0xff);

437 
dblo˘_cou¡
++;

439 i‡(
cﬁ⁄p
 !
NULL
) {

441 i‡(
dblo˘_cou¡
 == 8)

448 c⁄° 
n
 = 
ç
 - 
cﬁ⁄p
;

449 
i
;

451 
i
 = 1; i <
n
; i++) {

452 
ídp
[-
i
] = 
cﬁ⁄p
[
n
 - i];

453 
cﬁ⁄p
[
n
 - 
i
] = 0;

455 
ç
 = 
ídp
;

457 i‡(
ç
 !
ídp
)

459 
	`mem˝y
(
d°
, 
tmp
, 
RTE_IN6ADDRSZ
);

461 
	}
}

474 
	$öë_±⁄
(
af
, c⁄° *
§c
, *
d°
)

476 
af
) {

477 
AF_INET
:

478  
	`öë_±⁄4
(
§c
, 
d°
);

479 
AF_INET6
:

480  
	`öë_±⁄6
(
§c
, 
d°
);

482 
î∫o
 = 
EAFNOSUPPORT
;

486 
	}
}

489 
	$πe_©où
(c⁄° *
buf
, 
Êags
, *
ªs
, 
ªssize
)

491 
tokí_Àn
 = 0;

492 
ù_°r
[
INET6_ADDRSTRLEN
+4+1];

493 
πe_ùaddr
 
ùaddr
;

494 *
¥efix
, *
¥efix_íd
;

495 
¥efixÀn
 = 0;

497 i‡(
ªs
 && 
ªssize
 < (
πe_ùaddr
))

500 i‡(!
buf
 || !*buf)

503 !
	`πe_i£ndo·okí
(
buf
[
tokí_Àn
]))

504 
tokí_Àn
++;

507 i‡(
tokí_Àn
 >
INET6_ADDRSTRLEN
+4)

510 
	`¢¥ötf
(
ù_°r
, 
tokí_Àn
+1, "%s", 
buf
);

513 i‡(
Êags
 & 
RTE_IPADDR_NETWORK
) {

514 
¥efix
 = 
	`°ºchr
(
ù_°r
, '/');

515 i‡(
¥efix
 =
NULL
)

517 *
¥efix
 = '\0';

518 
¥efix
++;

519 
î∫o
 = 0;

520 
¥efixÀn
 = 
	`°πﬁ
(
¥efix
, &
¥efix_íd
, 10);

521 i‡(
î∫o
 || (*
¥efix_íd
 != '\0')

522 || 
¥efixÀn
 < 0 ||ÖªfixÀ¿> 
RTE_PREFIXMAX
)

524 
ùaddr
.
¥efixÀn
 =Örefixlen;

526 
ùaddr
.
¥efixÀn
 = 0;

529 i‡((
Êags
 & 
RTE_IPADDR_V4
) &&

530 
	`öë_±⁄
(
AF_INET
, 
ù_°r
, &
ùaddr
.
ùv4
) == 1 &&

531 
¥efixÀn
 <
RTE_V4PREFIXMAX
) {

532 
ùaddr
.
Ámûy
 = 
AF_INET
;

533 i‡(
ªs
)

534 
	`mem˝y
(
ªs
, &
ùaddr
, (ipaddr));

535  
tokí_Àn
;

538 i‡((
Êags
 & 
RTE_IPADDR_V6
) &&

539 
	`öë_±⁄
(
AF_INET6
, 
ù_°r
, &
ùaddr
.
ùv6
) == 1) {

540 
ùaddr
.
Ámûy
 = 
AF_INET6
;

541 i‡(
ªs
)

542 
	`mem˝y
(
ªs
, &
ùaddr
, (ipaddr));

543  
tokí_Àn
;

547 
	}
}

	@lib/cli/cli_string_fns.h

13 #i‚de‡
_CLI_STRING_FNS_H_


14 
	#_CLI_STRING_FNS_H_


	)

16 
	~<°dio.h
>

17 
	~<√töë/ö.h
>

18 
	~<πe_°rög_‚s.h
>

19 
	~<πe_ëhî.h
>

21 #ifde‡
__˝lu•lus


25 
	#RTE_IPADDR_V4
 0x01

	)

26 
	#RTE_IPADDR_V6
 0x02

	)

27 
	#RTE_IPADDR_NETWORK
 0x04

	)

29 
	#RTE_INADDRSZ
 4

	)

30 
	#RTE_IN6ADDRSZ
 16

	)

31 
	#RTE_PREFIXMAX
 128

	)

32 
	#RTE_V4PREFIXMAX
 32

	)

34 
	sπe_ùaddr
 {

35 
uöt8_t
 
Ámûy
;

37 
ö_addr
 
ùv4
;

38 
ö6_addr
 
ùv6
;

40 
¥efixÀn
;

44 
STR_MAX_ARGVS
 = 64,

45 
STR_TOKEN_SIZE
 = 128,

48 
uöt64_t
 
	tp‹éi°_t
;

50 #i‚de‡
_RTE_STRING_FNS_H_


73 
πe_°r•lô
(*
°rög
, 
°rögÀn
,

74 **
tokís
, 
maxtokís
, 
dñim
);

91 *
πe_°πrim£t
(*
°r
, c⁄° *
£t
);

102 *
πe_°πrim
(*
°r
);

119 
πe_°πok
(*
°r
, c⁄° *
dñim
, **
íåõs
, 
maxtokís
);

136 
πe_°rqtok
(*
°r
, c⁄° *
dñim
, **
íåõs
, 
maxtokís
);

150 
πe_°r›t
(c⁄° *
li°
, *
°r
, c⁄° *
dñim
);

162 
ölöe
 

163 
πe_°rm©ch
(c⁄° * 
s1
, c⁄° * 
s2
)

165 i‡(!
s1
 || !
s2
)

168 (*
s1
 !'\0'Ë&& (*
s2
 != '\0')) {

169 i‡(*
s1
++ !*
s2
++)

172 i‡(*
s1
 !*
s2
)

188 
ölöe
 

189 
πe_°r˙t
(*
s
, 
c
)

191  (
s
 =
NULL
 || *s == '\0')

193 : 
πe_°r˙t
(
s
 + 1, 
c
) + (*s == c);

206 
πe_∑r£_p‹éi°
(c⁄° *
°r
, 
p‹éi°_t
 *
p‹éi°
);

220 
ölöe
 
ëhî_addr
 *

221 
πe_ëhî_©⁄
(c⁄° *
a
, 
ëhî_addr
 *
e
)

223 
i
;

224 *
íd
;

225 
o
[
ETHER_ADDR_LEN
];

226 
ëhî_addr
Éther_addr;

228 i‡(!
e
)

229 
e
 = &
ëhî_addr
;

231 
i
 = 0;

233 
î∫o
 = 0;

234 
o
[
i
] = 
°πoul
(
a
, &
íd
, 16);

235 i‡(
î∫o
 !0 || 
íd
 =
a
 || (end[0] != ':' &&Énd[0] != 0))

236  
NULL
;

237 
a
 = 
íd
 + 1;

238 } ++
i
 ! (
o
Ë/  (o[0]Ë&& 
íd
[0] != 0);

241 i‡(
íd
[0] != 0)

242  
NULL
;

245 i‡(
i
 =
ETHER_ADDR_LEN
) {

246 
i
-- != 0) {

247 i‡(
o
[
i
] > 
UINT8_MAX
)

248  
NULL
;

249 
e
->
addr_byãs
[
i
] = (
uöt8_t
)
o
[i];

252 } i‡(
i
 =
ETHER_ADDR_LEN
 / 2) {

253 
i
-- != 0) {

254 i‡(
o
[
i
] > 
UINT16_MAX
)

255  
NULL
;

256 
e
->
addr_byãs
[
i
 * 2] = (
uöt8_t
)(
o
[i] >> 8);

257 
e
->
addr_byãs
[
i
 * 2 + 1] = (
uöt8_t
)(
o
[i] & 0xff);

261  
NULL
;

263  
e
;

281 
πe_©où
(c⁄° *
buf
, 
Êags
, *
ªs
, 
ªssize
);

283 #ifde‡
__˝lu•lus


	@lib/cli/cli_vt100.c

7 
	~"˛i.h
"

8 
	~"˛i_öput.h
"

9 
	~"˛i_s¸n.h
"

10 
	~"˛i_auto_com∂ëe.h
"

12 
ölöe
 

13 
	$key_up_¨r
()

15 
g≠buf
 *
gb
 = 
this_˛i
->gb;

16 *
löe
;

18 
löe
 = 
	`˛i_hi°‹y_¥ev
();

19 i‡(
löe
) {

20 
	`gb_ª£t_buf
(
gb
);

21 
	`gb_£t_poöt
(
gb
, 
	`gb_°r_ö£π
(gb, 
löe
, 0));

22 
	`˛i_£t_Êag
(
DISPLAY_LINE
 | 
CLEAR_LINE
);

24 
	}
}

26 
ölöe
 

27 
	$key_down_¨r
()

29 
g≠buf
 *
gb
 = 
this_˛i
->gb;

30 *
löe
;

32 
löe
 = 
	`˛i_hi°‹y_√xt
();

33 i‡(
löe
) {

34 
	`gb_ª£t_buf
(
gb
);

35 
	`gb_£t_poöt
(
gb
, 
	`gb_°r_ö£π
(gb, 
löe
, 0));

36 
	`˛i_£t_Êag
(
DISPLAY_LINE
 | 
CLEAR_LINE
);

38 
	}
}

40 
ölöe
 

41 
	$key_right_¨r
()

43 
g≠buf
 *
gb
 = 
this_˛i
->gb;

45 i‡(!
	`gb_eof
(
gb
)) {

46 
	`s¸n_wrôe
(
vt100_right_¨r
, 0);

47 
	`gb_move_right
(
gb
);

49 
	}
}

51 
ölöe
 

52 
	$key_À·_¨r
()

54 
g≠buf
 *
gb
 = 
this_˛i
->gb;

56 i‡(!
	`gb_poöt_©_°¨t
(
gb
)) {

57 
	`s¸n_wrôe
(
vt100_À·_¨r
, 0);

58 
	`gb_move_À·
(
gb
);

60 
	}
}

62 
ölöe
 

63 
	$key_back•a˚
()

65 
g≠buf
 *
gb
 = 
this_˛i
->gb;

67 i‡(!
	`gb_poöt_©_°¨t
(
gb
)) {

68 
	`˛i_curs‹_À·
();

70 
	`gb_move_À·
(
gb
);

72 
	`gb_dñ
(
gb
, 1);

74 
	`˛i_£t_Êag
(
DELETE_CHAR
);

76 
	}
}

78 
ölöe
 

79 
	$key_ªtu∫
()

81 
	`˛i_wrôe
("\n", 1);

83 
	`˛i_execuã
();

86 
	`gb_ª£t_buf
(
this_˛i
->
gb
);

89 i‡(!
this_˛i
->
quô_Êag
)

90 
this_˛i
->
Êags
 |
DISPLAY_PROMPT
;

91 
this_˛i
->
cuº_hi°
 = 
NULL
;

92 
	}
}

94 
ölöe
 

95 
	$key_˘æ_a
()

97 
	`˛i_¥ötf
(
vt100_mu…i_À·
, 
	`gb_À·_d©a_size
(
this_˛i
->
gb
));

98 
	`gb_£t_poöt
(
this_˛i
->
gb
, 0);

99 
	}
}

101 
ölöe
 

102 
	$key_˘æ_e
()

104 
	`˛i_¥ötf
(
vt100_mu…i_right
, 
	`gb_right_d©a_size
(
this_˛i
->
gb
));

105 
	`gb_£t_poöt
(
this_˛i
->
gb
, -1);

106 
	}
}

108 
ölöe
 

109 
	$key_˘æ_k
()

111 
˛i
 *˛ò
this_˛i
;

113 
	`˛i_˛ór_to_eﬁ
();

114 
	`gb_move_g≠_to_poöt
(
˛i
->
gb
);

115 
	`‰ì
(
˛i
->
kûl
);

116 i‡(
	`gb_right_d©a_size
(
˛i
->
gb
))

117 
˛i
->
kûl
 = 
	`°∫dup
(
	`gb_íd_of_g≠
(˛i->
gb
),

118 
	`gb_right_d©a_size
(
˛i
->
gb
) + 1);

119 
	`gb_dñ
(
˛i
->
gb
, 
	`gb_right_d©a_size
(cli->gb));

120 
	}
}

122 
ölöe
 

123 
	$key_˘æ_y
()

125 
˛i
 *˛ò
this_˛i
;

128 i‡(
˛i
->
kûl
) {

129 
	`gb_°r_ö£π
(
˛i
->
gb
, cli->
kûl
, 
	`°æí
(cli->kill));

130 
	`˛i_˛ór_löe
(-1);

131 
	`˛i_ªdi•œy_löe
();

133 
	}
}

135 
ölöe
 

136 
	$key_˘æ_c
()

138 
	`gb_ª£t_buf
(
this_˛i
->
gb
);

139 
	`˛i_˛ór_löe
(-1);

140 
this_˛i
->
∂í
 =Åhis_˛i->
	`¥om±
(0);

141 
this_˛i
->
cuº_hi°
 = 
NULL
;

142 
	}
}

144 
ölöe
 

145 
	$key_˘æ_f
()

147 
	`key_right_¨r
();

148 
	}
}

150 
ölöe
 

151 
	$key_˘æ_b
()

153 
	`key_À·_¨r
();

154 
	}
}

156 
ölöe
 

157 
	$key_suµr
()

159 
	`gb_dñ
(
this_˛i
->
gb
, 1);

160 
	`˛i_di•œy_right
();

161 
	`˛i_˛ór_to_eﬁ
();

162 
	}
}

164 
ölöe
 

165 
	$key_èb
()

167 
	`˛i_auto_com∂ëe
();

168 
	}
}

170 
ölöe
 

171 
	$key_˘æ_d
()

173 
	`gb_dump
(
this_˛i
->
gb
, 
NULL
);

174 
	}
}

176 
ölöe
 

177 
	$key_˘æ_l
()

179 
	`˛i_˛ór_s¸ìn
();

180 
	`˛i_˛ór_löe
(-1);

181 
	`˛i_ªdi•œy_löe
();

182 
	}
}

184 
ölöe
 

185 
	$key_ªtu∫2
()

187 
	`key_ªtu∫
();

188 
	}
}

190 
ölöe
 

191 
	$key_mëa_back•a˚
()

193 
	}
}

196 
ölöe
 

197 
	$key_w‹d_À·
()

200 
	`key_À·_¨r
();

201 i‡(
	`gb_gë_¥ev
(
this_˛i
->
gb
) == ' ')

203 } !
	`gb_poöt_©_°¨t
(
this_˛i
->
gb
));

204 
	}
}

206 
ölöe
 

207 
	$key_w‹d_right
()

209 !
	`gb_poöt_©_íd
(
this_˛i
->
gb
)) {

210 
	`key_right_¨r
();

211 i‡(
	`gb_gë
(
this_˛i
->
gb
) == ' ')

214 
	}
}

216 
ölöe
 

217 
	$key_˘æ_w
()

219 
	`key_mëa_back•a˚
();

220 
	}
}

222 
ölöe
 

223 
	$key_˘æ_p
()

225 
	`key_up_¨r
();

226 
	}
}

228 
ölöe
 

229 
	$key_˘æ_n
()

231 
	`key_down_¨r
();

232 
	}
}

234 
ölöe
 

235 
	$key_mëa_d
()

237 
	}
}

239 
ölöe
 

240 
	$key_˘æ_x
()

242 
this_˛i
->
quô_Êag
 = 1;

243 
	}
}

245 
ölöe
 

246 
	$key_övÆid
()

248 
	}
}

251 
vt100_cmds
 
	gvt100_cmd_li°
[] = {

252 { "InvÆid", 
key_övÆid
 },

253 { 
vt100_up_¨r
, 
key_up_¨r
 },

254 { 
vt100_down_¨r
, 
key_down_¨r
 },

255 { 
vt100_right_¨r
, 
key_right_¨r
 },

256 { 
vt100_À·_¨r
, 
key_À·_¨r
 },

257 { "\177", 
key_back•a˚
 },

258 { "\n", 
key_ªtu∫
 },

259 { "\001", 
key_˘æ_a
 },

260 { "\005", 
key_˘æ_e
 },

261 { "\013", 
key_˘æ_k
 },

262 { "\031", 
key_˘æ_y
 },

263 { "\003", 
key_˘æ_c
 },

264 { "\006", 
key_˘æ_f
 },

265 { "\002", 
key_˘æ_b
 },

266 { 
vt100_suµr
, 
key_suµr
 },

267 { 
vt100_èb
, 
key_èb
 },

268 { "\004", 
key_˘æ_d
 },

269 { "\014", 
key_˘æ_l
 },

270 { "\r", 
key_ªtu∫2
 },

271 { "\033\177", 
key_mëa_back•a˚
 },

272 { 
vt100_w‹d_À·
, 
key_w‹d_À·
 },

273 { 
vt100_w‹d_right
, 
key_w‹d_right
 },

274 { "\027", 
key_˘æ_w
 },

275 { "\020", 
key_˘æ_p
 },

276 { "\016", 
key_˘æ_n
 },

277 { "\033\144", 
key_mëa_d
 },

278 { "\030", 
key_˘æ_x
 },

279 { 
NULL
, NULL }

283 
	$vt100_do_cmd
(
idx
)

285 i‡(
idx
 < 
VT100_MAX_KEYS
)

286 
vt100_cmd_li°
[
idx
].
	`func
();

287 
	}
}

289 
vt100_cmds
 *

290 
	$vt100_gë_cmds
()

292  
vt100_cmd_li°
;

293 
	}
}

296 
	$vt100_föd_cmd
(*
buf
, 
size
)

298 
vt100_cmds
 *
cmd
;

299 
size_t
 
cmdÀn
;

300 
i
;

302 
i
 = 0, 
cmd
 = 
	`vt100_gë_cmds
(); cmd->
°r
; cmd++, i++) {

303 
cmdÀn
 = 
	`°∫Àn
(
cmd
->
°r
, 
VT100_BUF_SIZE
);

304 i‡((
size
 =
cmdÀn
Ë&& !
	`°∫cmp
(
buf
, 
cmd
->
°r
, cmdlen))

305  
i
;

308  
VT100_DONE
;

309 
	}
}

312 
	$vt100_∑r£_öput
(
˛i_vt100
 *
vt
, 
uöt8_t
 
c
)

314 
uöt32_t
 
size
;

316 
	`RTE_ASSERT
(
vt
 !
NULL
);

318 i‡((
vt
->
buÂos
 =
VT100_INITIALIZE
) ||

319 (
vt
->
buÂos
 >
VT100_BUF_SIZE
)) {

320 
vt
->
°©e
 = 
VT100_INIT
;

321 
vt
->
buÂos
 = 0;

324 
vt
->
buf
[vt->
buÂos
++] = 
c
;

325 
size
 = 
vt
->
buÂos
;

327 
vt
->
°©e
) {

328 
VT100_INIT
:

329 i‡(
c
 =
vt100_esˇ≥
)

330 
vt
->
°©e
 = 
VT100_ESCAPE
;

332 
vt
->
buÂos
 = 
VT100_INITIALIZE
;

333  
	`vt100_föd_cmd
(
vt
->
buf
, 
size
);

337 
VT100_ESCAPE
:

338 i‡(
c
 =
vt100_›í_squ¨e
)

339 
vt
->
°©e
 = 
VT100_ESCAPE_CSI
;

340 i‡(
c
 >'0' && c <
vt100_dñ
) {

341 
vt
->
buÂos
 = 
VT100_INITIALIZE
;

342  
	`vt100_föd_cmd
(
vt
->
buf
, 
size
);

346 
VT100_ESCAPE_CSI
:

347 i‡(
c
 >= '@' && c <= '~') {

348 
vt
->
buÂos
 = 
VT100_INITIALIZE
;

349  
	`vt100_föd_cmd
(
vt
->
buf
, 
size
);

354 
vt
->
buÂos
 = 
VT100_INITIALIZE
;

358  
VT100_CONTINUE
;

359 
	}
}

361 
˛i_vt100
 *

362 
	$vt100_£tup
()

364 
˛i_vt100
 *
vt
;

366 
vt
 = 
	`ˇŒoc
(1, (
˛i_vt100
));

367 i‡(!
vt
)

368  
NULL
;

370 
vt
->
buÂos
 = -1;

372  
vt
;

373 
	}
}

376 
	$vt100_‰ì
(
˛i_vt100
 *
vt
)

378 i‡(
vt
)

379 
	`‰ì
(
vt
);

380 
	}
}

	@lib/common/_pcap.c

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<°döt.h
>

12 
	~<öây≥s.h
>

13 
	~<sys/ty≥s.h
>

14 
	~<uni°d.h
>

15 
	~<°rög.h
>

16 
	~<sys/queue.h
>

17 
	~<°d¨g.h
>

18 
	~<˘y≥.h
>

19 
	~<î∫o.h
>

20 
	~<gë›t.h
>

21 
	~<as£π.h
>

22 
	~<√töë/ö.h
>

24 
	~<πe_vîsi⁄.h
>

25 
	~<πe_c⁄fig.h
>

27 
	~<πe_log.h
>

28 
	~<πe_èûq.h
>

29 #i‡
deföed
(
RTE_VER_MAJOR
) && (RTE_VER_MAJOR < 2)

30 
	~<πe_èûq_ñem.h
>

32 
	~<πe_comm⁄.h
>

33 
	~<πe_mem‹y.h
>

34 
	~<πe_mem˝y.h
>

35 
	~<πe_memz⁄e.h
>

36 
	~<πe_mÆloc.h
>

37 
	~<πe_ól.h
>

38 
	~<πe_≥r_lc‹e.h
>

39 
	~<πe_œunch.h
>

40 
	~<πe_©omic.h
>

41 
	~<πe_cy˛es.h
>

42 
	~<πe_¥e„tch.h
>

43 
	~<πe_lc‹e.h
>

44 
	~<πe_bønch_¥edi˘i⁄.h
>

45 
	~<πe_pci.h
>

46 
	~<πe_øndom.h
>

47 
	~<πe_timî.h
>

48 
	~<πe_debug.h
>

49 
	~<πe_ëhî.h
>

50 
	~<πe_ëhdev.h
>

51 
	~<πe_rög.h
>

52 
	~<πe_mempoﬁ.h
>

53 
	~<πe_mbuf.h
>

54 
	~<πe_hash.h
>

55 
	~<πe_Õm.h
>

56 
	~<πe_°rög_‚s.h
>

57 
	~<πe_byã‹dî.h
>

58 
	~<πe_î∫o.h
>

60 
	~"_pˇp.h
"

61 
	~"pg_öë.h
"

75 
pˇp_öfo_t
 *

76 
	$_pˇp_›í
(*
fûíame
, 
uöt16_t
 
p‹t
)

78 
pˇp_öfo_t
 *
pˇp
 = 
NULL
;

80 i‡(
fûíame
 =
NULL
) {

81 
	`¥ötf
("%s: fûíamêi†NULL\n", 
__FUNCTION__
);

82 
Àave
;

85 
pˇp
 = (
pˇp_öfo_t
 *)
	`πe_mÆloc
("PCAP info",

86 (
pˇp_öfo_t
),

87 
RTE_CACHE_LINE_SIZE
);

88 i‡(
pˇp
 =
NULL
) {

89 
	`¥ötf
("%s: malloc failed forÖcap_info_t structure\n",

90 
__FUNCTION__
);

91 
Àave
;

93 
	`mem£t
((*)
pˇp
, 0, (
pˇp_öfo_t
));

95 
pˇp
->
fd
 = 
	`f›í
((c⁄° *)
fûíame
, "r");

96 i‡(
pˇp
->
fd
 =
NULL
) {

97 
	`¥ötf
("%s: faûed f‹ (%s)\n", 
__FUNCTION__
, 
fûíame
);

98 
Àave
;

101 i‡(
	`‰ód
(&
pˇp
->
öfo
, 1, (
pˇp_hdr_t
),

102 
pˇp
->
fd
Ë!(
pˇp_hdr_t
) ) {

103 
	`¥ötf
("%s: faûedÅÿªadÅhêfûêhódî\n", 
__FUNCTION__
);

104 
Àave
;

108 
pˇp
->
ídün
 = 
LITTLE_ENDIAN
;

109 
pˇp
->
fûíame
 = 
	`°rdup
(filename);

112 i‡–(
pˇp
->
öfo
.
magic_numbî
 !
PCAP_MAGIC_NUMBER
) &&

113 (
pˇp
->
öfo
.
magic_numbî
 !
	`¡ohl
(
PCAP_MAGIC_NUMBER
)) ) {

114 
	`¥ötf
("%s: Magi¯Numbî d€†nŸ m©ch!\n", 
__FUNCTION__
);

115 
	`fÊush
(
°dout
);

116 
Àave
;

120 i‡(
pˇp
->
öfo
.
magic_numbî
 =
	`¡ohl
(
PCAP_MAGIC_NUMBER
) ) {

121 
	`¥ötf
(

123 
pˇp
->
ídün
 = 
BIG_ENDIAN
;

124 
pˇp
->
öfo
.
magic_numbî
 = 
	`¡ohl
(pcap->info.magic_number);

125 
pˇp
->
öfo
.
√tw‹k
 = 
	`¡ohl
(pcap->info.network);

126 
pˇp
->
öfo
.
sigfigs
 = 
	`¡ohl
(pcap->info.sigfigs);

127 
pˇp
->
öfo
.
¢≠Àn
 = 
	`¡ohl
(pcap->info.snaplen);

128 
pˇp
->
öfo
.
thisz⁄e
 = 
	`¡ohl
(pcap->info.thiszone);

129 
pˇp
->
öfo
.
vîsi⁄_maj‹
 = 
	`¡ohs
(pcap->info.version_major);

130 
pˇp
->
öfo
.
vîsi⁄_mö‹
 = 
	`¡ohs
(pcap->info.version_minor);

132 
	`_pˇp_öfo
(
pˇp
, 
p‹t
, 0);

134  
pˇp
;

136 
Àave
:

137 
	`_pˇp_˛o£
(
pˇp
);

138 
	`fÊush
(
°dout
);

140  
NULL
;

141 
	}
}

156 
	$_pˇp_öfo
(
pˇp_öfo_t
 *
pˇp
, 
uöt16_t
 
p‹t
, 
Êag
)

158 
	`¥ötf
("\nPCAP fûêf‹Ö‹à%d: %s\n", 
p‹t
, 
pˇp
->
fûíame
);

159 
	`¥ötf
(" magic: %08x,", 
pˇp
->
öfo
.
magic_numbî
);

160 
	`¥ötf
(" Version: %d.%d,",

161 
pˇp
->
öfo
.
vîsi⁄_maj‹
,

162 
pˇp
->
öfo
.
vîsi⁄_mö‹
);

163 
	`¥ötf
(" Z⁄e: %d,", 
pˇp
->
öfo
.
thisz⁄e
);

164 
	`¥ötf
(" s«∂í: %d,", 
pˇp
->
öfo
.
¢≠Àn
);

165 
	`¥ötf
(" sigfigs: %d,", 
pˇp
->
öfo
.
sigfigs
);

166 
	`¥ötf
("Çëw‹k: %d", 
pˇp
->
öfo
.
√tw‹k
);

167 
	`¥ötf
(" Endün: %s\n", 
pˇp
->
ídün
 =
BIG_ENDIAN
 ? "Big" : "Little");

168 i‡(
Êag
)

169 
	`¥ötf
(" Packë cou¡: %d\n", 
pˇp
->
pkt_cou¡
);

170 
	`¥ötf
("\n");

171 
	`fÊush
(
°dout
);

172 
	}
}

187 
	$_pˇp_ªwöd
(
pˇp_öfo_t
 *
pˇp
)

189 i‡(
pˇp
 =
NULL
)

193 
	`ªwöd
(
pˇp
->
fd
);

196 ()
	`f£ek
(
pˇp
->
fd
, (
pˇp_hdr_t
), 
SEEK_SET
);

197 
	}
}

212 
	$_pˇp_skù
(
pˇp_öfo_t
 *
pˇp
, 
uöt32_t
 
skù
)

214 
pˇ¥ec_hdr_t
 
hdr
, *
phdr
;

216 i‡(
pˇp
 =
NULL
)

220 
	`ªwöd
(
pˇp
->
fd
);

223 ()
	`f£ek
(
pˇp
->
fd
, (
pˇp_hdr_t
), 
SEEK_SET
);

225 
phdr
 = &
hdr
;

226 
skù
--) {

227 i‡(
	`‰ód
(
phdr
, 1, (
pˇ¥ec_hdr_t
),

228 
pˇp
->
fd
Ë!(
pˇ¥ec_hdr_t
) )

232 
	`_pˇp_c⁄vît
(
pˇp
, 
phdr
);

234 ()
	`f£ek
(
pˇp
->
fd
, 
phdr
->
ö˛_Àn
, 
SEEK_CUR
);

236 
	}
}

251 
	$_pˇp_˛o£
(
pˇp_öfo_t
 *
pˇp
)

253 i‡(
pˇp
 =
NULL
)

256 i‡(
pˇp
->
fd
)

257 
	`f˛o£
(
pˇp
->
fd
);

258 i‡(
pˇp
->
fûíame
)

259 
	`‰ì
(
pˇp
->
fûíame
);

260 
	`πe_‰ì
(
pˇp
);

261 
	}
}

276 
	$_pˇp_∑ylﬂdOff£t
(c⁄° *
pkt_d©a
, *
off£t
,

277 *
Àngth
) {

278 c⁄° 
ùHdr_t
 *
ùh
 =

279 (c⁄° 
ùHdr_t
 *)(
pkt_d©a
 + (
ëhî_hdr
));

280 c⁄° 
t˝Hdr_t
 *
th
 = 
NULL
;

283 i‡–(
ùh
->
vl
 & 0xF0) != 0x40)

287 i‡(
ùh
->
f‰ag
 & 
	`ht⁄s
(
PG_OFF_MF
 | 
PG_OFF_MASK
))

291 
ihÀn
 = (
ùh
->
vl
 & 0x0F) * 4;

292 
thÀn
 = 0;

294 
ùh
->
¥Ÿo
) {

295 
PG_IPPROTO_TCP
:

296 
th
 = (c⁄° 
t˝Hdr_t
 *)((c⁄° *)
ùh
 + 
ihÀn
);

297 
thÀn
 = (
th
->
off£t
 >> 4) * 4;

299 
PG_IPPROTO_UDP
:

300 
thÀn
 = (
udpHdr_t
);

306 *
off£t
 = (
ëhî_hdr
Ë+ 
ihÀn
 + 
thÀn
;

307 *
Àngth
 = (
ëhî_hdr
Ë+ 
	`¡ohs
(
ùh
->
éí
Ë- *
off£t
;

309  *
Àngth
 != 0;

310 
	}
}

324 
size_t


325 
	$_pˇp_ªad
(
pˇp_öfo_t
 *
pˇp
,

326 
pˇ¥ec_hdr_t
 *
pHdr
,

327 *
pktBuff
,

328 
uöt32_t
 
bufLí
)

331 i‡(
	`‰ód
(
pHdr
, 1, (
pˇ¥ec_hdr_t
),

332 
pˇp
->
fd
Ë!(
pˇ¥ec_hdr_t
) )

336 
	`_pˇp_c⁄vît
(
pˇp
, 
pHdr
);

339 i‡(
pHdr
->
ö˛_Àn
 > 
bufLí
) {

340 ()
	`f£ek
(
pˇp
->
fd
, 
pHdr
->
ö˛_Àn
, 
SEEK_CUR
);

341  
pHdr
->
ö˛_Àn
;

344  
	`‰ód
(
pktBuff
, 1, 
pHdr
->
ö˛_Àn
, 
pˇp
->
fd
);

346 
	}
}

	@lib/common/_pcap.h

9 #i‚de‡
_PCAP_H_


10 
	#_PCAP_H_


	)

12 
	~<√töë/ö.h
>

14 
	~<πe_mem‹y.h
>

16 
	#PCAP_MAGIC_NUMBER
 0xa1b2c3d4

	)

17 
	#PCAP_MAJOR_VERSION
 2

	)

18 
	#PCAP_MINOR_VERSION
 4

	)

20 
	spˇp_hdr_s
 {

21 
uöt32_t
 
	mmagic_numbî
;

22 
uöt16_t
 
	mvîsi⁄_maj‹
;

23 
uöt16_t
 
	mvîsi⁄_mö‹
;

24 
öt32_t
 
	mthisz⁄e
;

25 
uöt32_t
 
	msigfigs
;

26 
uöt32_t
 
	m¢≠Àn
;

27 
uöt32_t
 
	m√tw‹k
;

28 } 
	tpˇp_hdr_t
;

30 
	spˇ¥ec_hdr_s
 {

31 
uöt32_t
 
	mts_£c
;

32 
uöt32_t
 
	mts_u£c
;

33 
uöt32_t
 
	mö˛_Àn
;

34 
uöt32_t
 
	m‹ig_Àn
;

35 } 
	tpˇ¥ec_hdr_t
;

37 
	spˇp_öfo_s
 {

38 
FILE
 *
	mfd
;

39 *
	mfûíame
;

40 
uöt32_t
 
	mídün
;

41 
uöt32_t
 
	mpkt_size
;

42 
uöt32_t
 
	mpkt_cou¡
;

43 
uöt32_t
 
	mpkt_idx
;

44 
pˇp_hdr_t
 
	möfo
;

45 } 
	tpˇp_öfo_t
;

47 #i‚de‡
BIG_ENDIAN


48 
	#BIG_ENDIAN
 0x4321

	)

50 #i‚de‡
LITTLE_ENDIAN


51 
	#LITTLE_ENDIAN
 0x1234

	)

54 
	spˇp_pkt_d©a_s
 {

55 
uöt8_t
 *
	mbuffAddr
;

56 
uöt8_t
 *
	mvútuÆAddr
;

57 
phys_addr_t
 
	mphysAddr
;

58 
uöt32_t
 
	msize
;

59 
pˇ¥ec_hdr_t
 
	mhdr
;

60 } 
	tpˇp_pkt_d©a_t
;

62 
__ölöe__
 

63 
	$_pˇp_c⁄vît
(
pˇp_öfo_t
 *
pˇp
, 
pˇ¥ec_hdr_t
 *
pHdr
)

65 i‡(
pˇp
->
ídün
 =
BIG_ENDIAN
) {

66 
pHdr
->
ö˛_Àn
 = 
	`¡ohl
(pHdr->incl_len);

67 
pHdr
->
‹ig_Àn
 = 
	`¡ohl
(pHdr->orig_len);

68 
pHdr
->
ts_£c
 = 
	`¡ohl
(pHdr->ts_sec);

69 
pHdr
->
ts_u£c
 = 
	`¡ohl
(pHdr->ts_usec);

71 
	}
}

73 
pˇp_öfo_t
 *
_pˇp_›í
(*
fûíame
, 
uöt16_t
 
p‹t
);

74 
_pˇp_vÆid
(*
fûíame
);

75 
_pˇp_˛o£
(
pˇp_öfo_t
 *
pˇp
);

76 
_pˇp_ªwöd
(
pˇp_öfo_t
 *
pˇp
);

77 
_pˇp_skù
(
pˇp_öfo_t
 *
pˇp
, 
uöt32_t
 
skù
);

78 
_pˇp_öfo
(
pˇp_öfo_t
 *
pˇp
, 
uöt16_t
 
p‹t
, 
Êag
);

79 
size_t
 
_pˇp_ªad
(
pˇp_öfo_t
 *
pˇp
,

80 
pˇ¥ec_hdr_t
 *
pHdr
,

81 *
pktBuff
,

82 
uöt32_t
 
bufLí
);

83 
_pˇp_∑ylﬂdOff£t
(c⁄° *
pkt_d©a
, *
off£t
,

84 *
Àngth
);

	@lib/common/cksum.c

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<°döt.h
>

12 
	~<öây≥s.h
>

13 
	~<sys/ty≥s.h
>

14 
	~<uni°d.h
>

15 
	~<°rög.h
>

16 
	~<sys/queue.h
>

17 
	~<√töë/ö.h
>

18 
	~<√t/if.h
>

19 
	~<f˙é.h
>

20 
	~<£tjmp.h
>

21 
	~<°d¨g.h
>

22 
	~<˘y≥.h
>

23 
	~<î∫o.h
>

24 
	~<gë›t.h
>

25 
	~<ãrmios.h
>

26 
	~<sys/io˘l.h
>

27 
	~<libgí.h
>

28 
	~<löux/if_tun.h
>

29 
	~<¨∑/öë.h
>

30 
	~<√tdb.h
>

31 
	~<pﬁl.h
>

32 
	~<as£π.h
>

34 
	~<πe_vîsi⁄.h
>

35 
	~<πe_c⁄fig.h
>

37 
	~<πe_log.h
>

38 
	~<πe_èûq.h
>

39 #i‡
deföed
(
RTE_VER_MAJOR
) && (RTE_VER_MAJOR < 2)

40 
	~<πe_èûq_ñem.h
>

42 
	~<πe_comm⁄.h
>

43 
	~<πe_mem‹y.h
>

44 
	~<πe_mem˝y.h
>

45 
	~<πe_memz⁄e.h
>

46 
	~<πe_mÆloc.h
>

47 
	~<πe_ól.h
>

48 
	~<πe_≥r_lc‹e.h
>

49 
	~<πe_œunch.h
>

50 
	~<πe_©omic.h
>

51 
	~<πe_cy˛es.h
>

52 
	~<πe_¥e„tch.h
>

53 
	~<πe_lc‹e.h
>

54 
	~<πe_bønch_¥edi˘i⁄.h
>

55 
	~<πe_pci.h
>

56 
	~<πe_øndom.h
>

57 
	~<πe_timî.h
>

58 
	~<πe_debug.h
>

59 
	~<πe_ëhî.h
>

60 
	~<πe_ëhdev.h
>

61 
	~<πe_rög.h
>

62 
	~<πe_mempoﬁ.h
>

63 
	~<πe_mbuf.h
>

64 
	~<πe_Õm.h
>

65 
	~<πe_°rög_‚s.h
>

66 
	~<πe_byã‹dî.h
>

67 
	~<πe_î∫o.h
>

69 
	~"c›yright_öfo.h
"

70 
	~"p‹t_c⁄fig.h
"

72 
	~"pg_öë.h
"

73 
	~"cy˛es.h
"

74 
	~"mbuf.h
"

75 
	~"cksum.h
"

96 
uöt16_t


97 
	$cksum
(*
pBuf
, 
öt32_t
 
size
, 
uöt32_t
 
cksum
)

99  
	`cksumD⁄e
(
	`cksumUpd©e
(
pBuf
, 
size
, 
cksum
) );

100 
	}
}

122 
uöt32_t


123 
	$cksumUpd©e
(*
pBuf
, 
öt32_t
 
size
, 
uöt32_t
 
cksum
)

125 
uöt32_t
 
nW‹ds
;

126 
uöt16_t
 *
pWd
 = (uöt16_à*)
pBuf
;

128 
nW‹ds
 = (
size
 >> 5);ÇWords > 0;ÇWords--) {

129 
cksum
 +*
pWd
++; cksum += *pWd++; cksum += *pWd++;

130 
cksum
 +*
pWd
++;

131 
cksum
 +*
pWd
++; cksum += *pWd++; cksum += *pWd++;

132 
cksum
 +*
pWd
++;

133 
cksum
 +*
pWd
++; cksum += *pWd++; cksum += *pWd++;

134 
cksum
 +*
pWd
++;

135 
cksum
 +*
pWd
++; cksum += *pWd++; cksum += *pWd++;

136 
cksum
 +*
pWd
++;

140 
nW‹ds
 = (
size
 & 0x1f) >> 1;ÇWords > 0;ÇWords--)

141 
cksum
 +*
pWd
++;

144 i‡(
size
 & 1)

145 
cksum
 +*
pWd
 & 
	`ht⁄s
(0xFF00);

147  
cksum
;

148 
	}
}

166 
uöt16_t


167 
	$cksumD⁄e
(
uöt32_t
 
cksum
)

170 
cksum
 = (cksum & 0xFFFF) + (cksum >> 16);

171 
cksum
 = (cksum & 0xFFFF) + (cksum >> 16);

173  ~((
uöt16_t
)
cksum
);

174 
	}
}

196 
uöt32_t


197 
	$p£udoChecksum
(
uöt32_t
 
§c
, uöt32_à
d°
, 
uöt16_t
 
¥o
, uöt16_à
Àn
,

198 
uöt32_t
 
sum
)

201  
sum
 + (
§c
 & 0xFFFFË+ (§¯>> 16Ë+ (
d°
 & 0xFFFF) +

202 (
d°
 >> 16) +

203 
	`¡ohs
(
Àn
Ë+Çtohs(
¥o
);

204 
	}
}

226 
uöt32_t


227 
	$p£udoIPv6Checksum
(
uöt16_t
 *
§c
,

228 
uöt16_t
 *
d°
,

229 
uöt8_t
 
√xt_hdr
,

230 
uöt32_t
 
tŸÆ_Àn
,

231 
uöt32_t
 
sum
)

233 
uöt32_t
 
Àn
 = 
	`ht⁄l
(
tŸÆ_Àn
), 
i
;

235 
sum
 = (sum + (
uöt16_t
)
√xt_hdr
 + (
Àn
 & 0xFFFF) + (len >> 16));

237 
i
 = 0; i < 8; i++) {

238 
sum
 +
§c
[
i
];

239 
sum
 +
d°
[
i
];

241  
sum
;

242 
	}
}

	@lib/common/cksum.h

8 #i‚de‡
__CKSUM_H


9 
	#__CKSUM_H


	)

11 
uöt16_t
 
cksum
(*
pBuf
, 
öt32_t
 
size
, 
uöt32_t
 cksum);

12 
uöt32_t
 
cksumUpd©e
(*
pBuf
, 
öt32_t
 
size
, uöt32_à
cksum
);

13 
uöt16_t
 
cksumD⁄e
(
uöt32_t
 
cksum
);

14 
uöt32_t
 
p£udoChecksum
(uöt32_à
§c
, uöt32_à
d°
,

15 
uöt16_t
 
¥Ÿo
, uöt16_à
Àn
,

16 
uöt32_t
 
cksum
);

17 
uöt32_t
 
p£udoIPv6Checksum
(
uöt16_t
 *
§c
,

18 
uöt16_t
 *
d°
,

19 
uöt8_t
 
√xt_hdr
,

20 
uöt32_t
 
tŸÆ_Àn
,

21 
uöt32_t
 
sum
);

	@lib/common/cmdline_parse_args.c

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<öây≥s.h
>

10 
	~<˘y≥.h
>

11 
	~<°rög.h
>

12 
	~<î∫o.h
>

13 
	~<°d¨g.h
>

14 
	~<√töë/ö.h
>

15 #i‚de‡
__löux__


16 
	~<√t/sockë.h
>

19 
	~<πe_comm⁄.h
>

21 
	~"cmdlöe_∑r£.h
"

22 
	~"cmdlöe_∑r£_¨gs.h
"

24 
cmdlöe_tokí_›s
 
	gcmdlöe_tokí_¨gs_›s
 = {

25 .
∑r£
 = 
cmdlöe_∑r£_¨gs
,

26 .
	gcom∂ëe_gë_nb
 = 
NULL
,

27 .
	gcom∂ëe_gë_ñt
 = 
NULL
,

28 .
	ggë_hñp
 = 
cmdlöe_gë_hñp_¨gs
,

31 
	g‹ig_cmdlöe
[256];

34 
	$cmdlöe_¨gs_‰ì
(
¨gc
, **
¨gv
)

36 
i
;

38 i‡(
¨gc
 <= 0)

41 
i
 = 0; i < 
¨gc
; i++)

42 i‡(
¨gv
[
i
])

43 
	`‰ì
(
¨gv
[
i
]);

44 
	}
}

47 
	$cmdlöe_∑r£_¨gs
(
cmdlöe_∑r£_tokí_hdr_t
 *
tk
 
__πe_unu£d
,

48 c⁄° *
buf
, *
ªs
, 
tk_Àn
 
__πe_unu£d
)

50 
tokí_Àn
 = 0, 
Àn
 = 0;

51 
¨gs_°r
[
XARGS_TOKEN_SIZE
 + 1];

52 
cmdlöe_¨gs_t
 *
∂
;

54 i‡(!
buf
)

55 
buf
 = " ";

57 i‡(
ªs
 =
NULL
)

60 
∂
 = 
ªs
;

61 
∂
->
¨gc
 = 1;

63 
	`°∫˝y
(
‹ig_cmdlöe
, 
buf
, (orig_cmdline) - 1);

65 !
	`cmdlöe_i£ndo·okí
(
buf
[
tokí_Àn
]) &&

66 (
tokí_Àn
 < 
XARGS_TOKEN_SIZE
)) {

67 
tokí_Àn
++;

68 
Àn
++;

70 i‡(
tokí_Àn
 == 0)

73 i‡(
tokí_Àn
 >
XARGS_TOKEN_SIZE
)

76 
	`¢¥ötf
(
¨gs_°r
, 
tokí_Àn
 + 1, "%s", 
buf
);

77 
buf
 +
tokí_Àn
;

78 i‡(*
buf
 == ' ') {

79 
buf
++;

80 
Àn
++;

82 
tokí_Àn
 = 0;

84 
∂
->
¨gv
[∂->
¨gc
++] = 
	`°rdup
(
¨gs_°r
);

85 }  (*
buf
 !'\n'Ë&& (
∂
->
¨gc
 < 
XARGS_MAX_TOKENS
) );

87 
∂
->
¨gv
[∂->
¨gc
] = 
NULL
;

88 
∂
->
cmdlöe
 = 
‹ig_cmdlöe
;

90  
Àn
;

91 
	}
}

94 
	$cmdlöe_gë_hñp_¨gs
(
__πe_unu£d
 
cmdlöe_∑r£_tokí_hdr_t
 *
tk
,

95 *
d°buf
, 
size
)

97 
ªt
;

99 
ªt
 = 
	`¢¥ötf
(
d°buf
, 
size
, "argc/argvÜist ofárguments");

100 i‡(
ªt
 < 0)

103 
	}
}

	@lib/common/cmdline_parse_args.h

7 #i‚de‡
_PARSE_XARGS_H_


8 
	#_PARSE_XARGS_H_


	)

10 #ifde‡
__˝lu•lus


15 
	#XARGS_TOKEN_SIZE
 256

	)

16 
	#XARGS_MAX_TOKENS
 32

	)

18 
	scmdlöe_¨gs
 {

19 *
cmdlöe
;

20 
¨gc
;

21 *
¨gv
[
XARGS_MAX_TOKENS
 + 1];

22 } 
	tcmdlöe_¨gs_t
;

24 
	scmdlöe_tokí_¨gs
 {

25 
cmdlöe_tokí_hdr
 
hdr
;

26 
cmdlöe_¨gs
 
¨gs
;

29 
cmdlöe_tokí_¨gs
 
	tcmdlöe_∑r£_tokí_¨gs_t
;

31 
cmdlöe_tokí_›s
 
cmdlöe_tokí_¨gs_›s
;

33 
cmdlöe_∑r£_¨gs
(
cmdlöe_∑r£_tokí_hdr_t
 *
tk
,

34 c⁄° *
§cbuf
, *
ªs
, 
tk_Àn
);

35 
cmdlöe_gë_hñp_¨gs
(
cmdlöe_∑r£_tokí_hdr_t
 *
tk
,

36 *
d°buf
, 
size
);

38 
	#TOKEN_ARGS_INITIALIZER
(
°ru˘uª
, 
fõld
) \

42 &
cmdlöe_tokí_¨gs_›s
, \

43 
	`off£tof
(
°ru˘uª
, 
fõld
), \

49 }

	)

51 
cmdlöe_¨gs_‰ì
(
¨gc
, **
¨gv
);

53 #ifde‡
__˝lu•lus


	@lib/common/copyright_info.c

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<°döt.h
>

12 
	~<öây≥s.h
>

13 
	~<sys/ty≥s.h
>

14 
	~<uni°d.h
>

15 
	~<°rög.h
>

16 
	~<°d¨g.h
>

17 
	~<˘y≥.h
>

19 
	~<πe_vîsi⁄.h
>

20 
	~<πe_c⁄fig.h
>

21 
	~<πe_©omic.h
>

22 
	~<πe_cy˛es.h
>

24 
	~"c›yright_öfo.h
"

26 
	#COPYRIGHT_MSG
 \

27 "C›yrighà(cË<2010-2017>, I¡ñ C‹p‹©i⁄. AŒÑight†ª£rved."

	)

28 
	#COPYRIGHT_MSG_SHORT
 "C›yrighà(cË<2010-2017>, I¡ñ C‹p‹©i⁄"

	)

29 
	#POWERED_BY_DPDK
 "Powîed by DPDK"

	)

31 #ifde‡
ENABLE_COPYRIGHT_OUTPUT


32 c⁄° *
	göãl_c›yright
[] = {

64 
NULL


81 
	$¥öt_c›yright
(c⁄° *
≠≤ame
, c⁄° *
¸óãd_by
)

83 #ifde‡
COPYRIGHT_OUTPUT_ENABLED


84 
i
;

86 
	`πe_¥ötf_°©us
("-----------------------\n");

87 
i
 = 0; 
öãl_c›yright
[i] !
NULL
; i++)

88 
	`πe_¥ötf_°©us
(" %s\n", 
öãl_c›yright
[
i
]);

89 
	`πe_¥ötf_°©us
("-----------------------\n");

91 
	`πe_¥ötf_°©us
(" %s\n\n", 
COPYRIGHT_MSG
);

92 
i
 = 0; 
pg_c›yright
[i] !
NULL
; i++)

93 
	`πe_¥ötf_°©us
(" %s\n", 
pg_c›yright
[
i
]);

95 
	`s¸n_cﬁ‹
(
YELLOW
, 
NO_CHANGE
, 
OFF
);

96 
	`πe_¥ötf_°©us
(" %s created by: %s -- >>> %s <<<\n",

97 
≠≤ame
,

98 
¸óãd_by
,

99 
POWERED_BY_DPDK
);

100 
	`s¸n_cﬁ‹
(
BLUE
, 
NO_CHANGE
, 
OFF
);

101 
	`πe_¥ötf_°©us
("-----------------------\n");

103 
	`¥ötf
(" %s\n", 
COPYRIGHT_MSG
);

104 
	`¥ötf
(" %s created by: %s -- >>> %s <<<\n\n",

105 
≠≤ame
,

106 
¸óãd_by
,

107 
POWERED_BY_DPDK
);

109 
	}
}

112 
	$•œsh_s¸ìn
(
row
, 
cﬁ
, c⁄° *
≠≤ame
, c⁄° *
¸óãd_by
)

114 #ifde‡
ENABLE_COPYRIGHT_OUTPUT


115 
i
;

117 
row
 = 3;

118 
	`s¸n_cﬁ‹
(
BLUE
, 
NO_CHANGE
, 
OFF
);

119 
	`s¸n_¥ötf
(
row
++, 
cﬁ
, "%s", 
COPYRIGHT_MSG
);

120 
	`s¸n_cﬁ‹
(
GREEN
, 
NO_CHANGE
, 
BOLD
);

121 
i
 = 0, 
row
++; 
pg_c›yright
[i] !
NULL
; i++)

122 
	`s¸n_¥ötf
(
row
++, 7, "%s", 
pg_c›yright
[
i
]);

123 
	`s¸n_cﬁ‹
(
BLUE
, 
NO_CHANGE
, 
BOLD
);

124 
	`s¸n_¥ötf
(
row
++,

125 
cﬁ
,

127 
≠≤ame
,

128 
¸óãd_by
,

129 
POWERED_BY_DPDK
);

130 
	`s¸n_cﬁ‹
(
BLACK
, 
NO_CHANGE
, 
OFF
);

131 
	`s¸n_pos
(++
row
, 1);

133 
	`πe_dñay_ms
(1500);

135 
	`s¸n_˛s
();

136 
	`s¸n_pos
(100, 1);

138 ()
row
;

139 ()
cﬁ
;

140 ()
≠≤ame
;

141 ()
¸óãd_by
;

143 
	}
}

151 
	$c›yright_msg
() {

152  
COPYRIGHT_MSG
;

153 
	}
}

161 
	$c›yright_msg_sh‹t
() {

162  
COPYRIGHT_MSG_SHORT
;

163 
	}
}

171 
	$powîed_by
() {

172  
POWERED_BY_DPDK
;

173 
	}
}

	@lib/common/copyright_info.h

8 #i‚de‡
_COPYRIGHT_INFO_H


9 
	#_COPYRIGHT_INFO_H


	)

11 
¥öt_c›yright
(c⁄° *
≠≤ame
, c⁄° *
¸óãd_by
);

12 
logo
(
row
, 
cﬁ
, c⁄° *
≠≤ame
);

13 
•œsh_s¸ìn
(
row
,

14 
cﬁ
,

15 c⁄° *
≠≤ame
,

16 c⁄° *
¸óãd_by
);

23 c⁄° *
c›yright_msg
();

30 c⁄° *
c›yright_msg_sh‹t
();

37 c⁄° *
powîed_by
();

	@lib/common/core_info.c

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<°döt.h
>

12 
	~<öây≥s.h
>

13 
	~<sys/ty≥s.h
>

14 
	~<uni°d.h
>

15 
	~<°rög.h
>

16 
	~<°d¨g.h
>

17 
	~<˘y≥.h
>

19 
	~<πe_vîsi⁄.h
>

20 
	~<πe_c⁄fig.h
>

21 
	~<πe_lc‹e.h
>

22 
	~<πe_©omic.h
>

23 
	~<πe_cy˛es.h
>

24 
	~<πe_pci.h
>

25 
	~<πe_debug.h
>

27 
	~"c‹e_öfo.h
"

28 
	~"ls˝u.h
"

29 
	~"utûs.h
"

30 
	~"c‹em≠.h
"

32 
	#COREMASK_STRING_SIZE
 256

	)

34 
lc_öfo_t
 
	gc‹e_m≠
[
RTE_MAX_LCORE
];

35 
uöt32_t
 
	gnum_c‹es
;

37 
uöt32_t


38 
	$s˘_c⁄vît
(*
s˘
[])

40 
uöt32_t
 
lc‹e
 = 0xFFFF, 
i
;

41 
lc_öfo_t
 
vÆ
, 
t°
;

43 i‡–(
s˘
 =
NULL
) || (sct[0] == NULL) )

46 
vÆ
.
s
.
sockë_id
 = (
uöt8_t
)
	`°πoul
(
s˘
[0], 
NULL
, 10);

47 
vÆ
.
s
.
c‹e_id
 = (
uöt8_t
)
	`°πoul
(
s˘
[1], 
NULL
, 10);

48 
vÆ
.
s
.
thªad_id
 = (
uöt8_t
)
	`°πoul
(
s˘
[2], 
NULL
, 10);

50 
i
 = 0; i < 
num_c‹es
; i++) {

51 
t°
.
w‹d
 = 
c‹e_m≠
[
i
].word;

52 
t°
.
s
.
id
 = 0;

53 i‡(
t°
.
w‹d
 =
vÆ
.word) {

54 
lc‹e
 = 
c‹e_m≠
[
i
].
s
.
id
;

58  
lc‹e
;

59 
	}
}

	@lib/common/core_info.h

9 #i‚de‡
_CORE_INFO_H


10 
	#_CORE_INFO_H


	)

18 
__ölöe__
 
uöt32_t


19 
	$lc‹e_mask
(
uöt16_t
 *
fú°
, uöt16_à*
œ°
) {

20 
öt32_t
 
˙t
, 
lid
;

22 
lid
 = 
	`πe_gë_ma°î_lc‹e
();

23 i‡(
fú°
)

24 *
fú°
 = 
lid
;

27 
˙t
 = 0; 
lid
 < 
RTE_MAX_LCORE
;Üid++) {

28 i‡(!
	`πe_lc‹e_is_íabÀd
(
lid
) )

30 
˙t
++;

31 i‡(
œ°
)

32 *
œ°
 = 
lid
;

35  
˙t
;

36 
	}
}

38 
uöt32_t
 
s˘_c⁄vît
(*
s˘
[]);

	@lib/common/coremap.c

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°rög.h
>

27 
	~<gë›t.h
>

28 
	~<°döt.h
>

30 
	~"c‹em≠.h
"

32 *
	gmodñ_«me
;

34 
	slc‹e
 {

35 
lc‹e
 *
	m√xt
;

36 
lc_öfo_t
 
	mu
;

37 } 
	tlc‹e_t
;

39 
	glc‹e_t
 *(*
	tdo_löe_‚
)(c⁄° *
	tlöe
, 
	tlc‹e_t
 *);

40 (*
	tgëãr_‚
)(c⁄° 
	tlc‹e_t
 *);

41 (*
	t£âî_‚
)(
	tlc‹e_t
 *, 
	t√w_vÆ
);

43 
	sa˘i⁄
 {

44 c⁄° *
desc
;

45 
do_löe_‚
 
‚
;

46 } 
	ta˘i⁄_t
;

49 
	$gë_sockë_id
(c⁄° 
lc‹e_t
 *
lc
)

51  
lc
->
u
.
s
.
sockë_id
;

52 
	}
}

55 
	$£t_sockë_id
(
lc‹e_t
 *
lc
, 
v
)

57 
lc
->
u
.
s
.
sockë_id
 = 
v
;

58 
	}
}

61 
	$gë_c‹e_id
(c⁄° 
lc‹e_t
 *
lc
)

63  
lc
->
u
.
s
.
c‹e_id
;

64 
	}
}

67 
	$£t_c‹e_id
(
lc‹e_t
 *
lc
, 
v
)

69 
lc
->
u
.
s
.
c‹e_id
 = 
v
;

70 
	}
}

73 
	$gë_thªad_id
(c⁄° 
lc‹e_t
 *
lc
)

75  
lc
->
u
.
s
.
thªad_id
;

76 
	}
}

79 
	$as_°r
(c⁄° *
löe
)

81 i‡(*
löe
 != ':')

82  
	`as_°r
(
löe
 + 1);

83  
löe
 + 1;

84 
	}
}

87 
	$as_öt
(c⁄° *
löe
)

89  
	`©oi
(
	`as_°r
(
löe
));

90 
	}
}

92 
lc‹e_t
 *

93 
	$√w_lc‹e
(c⁄° *
löe
, 
lc‹e_t
 *
ª°
)

95 
lc‹e_t
 *
lc
 = 
	`ˇŒoc
(1,  *lc);

97 
lc
->
√xt
 = 
ª°
;

98 
lc
->
u
.
s
.
id
 = 
	`as_öt
(
löe
);

99  
lc
;

100 
	}
}

102 
lc‹e_t
 *

103 
	$£t_øw_sockë_id
(c⁄° *
löe
, 
lc‹e_t
 *
lc
)

105 
lc
->
u
.
s
.
sockë_id
 = 
	`as_öt
(
löe
);

106  
lc
;

107 
	}
}

109 
lc‹e_t
 *

110 
	$£t_øw_c‹e_id
(c⁄° *
löe
, 
lc‹e_t
 *
lc
)

112 
lc
->
u
.
s
.
c‹e_id
 = 
	`as_öt
(
löe
);

113  
lc
;

114 
	}
}

116 
lc‹e_t
 *

117 
	$£t_modñ_«me
(c⁄° *
löe
, 
lc‹e_t
 *
lc
)

119 i‡(!
modñ_«me
)

120 
modñ_«me
 = 
	`°rdup
(
	`as_°r
(
löe
));

121  
lc
;

122 
	}
}

125 
	$gë_√xt_thªad_id
(c⁄° 
lc‹e_t
 *
lc
, 
sockë_id
, 
c‹e_id
)

127 i‡(
lc
 =
NULL
)

129 i‡(
lc
->
u
.
s
.
sockë_id
 =sockë_id &&Üc->u.s.
c‹e_id
 == core_id)

130  
lc
->
u
.
s
.
thªad_id
 + 1;

131  
	`gë_√xt_thªad_id
(
lc
->
√xt
, 
sockë_id
, 
c‹e_id
);

132 
	}
}

134 
lc‹e_t
 *

135 
	$£t_thªad_id_°r
(c⁄° *
unu£d
, 
lc‹e_t
 *
lc
)

137 ()
unu£d
;

138 
lc
->
u
.
s
.
thªad_id
 = 
	`gë_√xt_thªad_id
÷c->
√xt
,

139 
lc
->
u
.
s
.
sockë_id
,

140 
lc
->
u
.
s
.
c‹e_id
);

141  
lc
;

142 
	}
}

144 
lc‹e_t
 *

145 
	$ign‹e_löe
(c⁄° *
unu£d
, 
lc‹e_t
 *
lc
)

147 ()
unu£d
;

148  
lc
;

149 
	}
}

151 
do_löe_‚


152 
	$gë_m©chög_a˘i⁄
(c⁄° *
löe
)

154 
a˘i⁄
 
a˘i⁄s
[] = {

155 { "¥o˚ss‹", 
√w_lc‹e
 },

156 { "physiˇ»id", 
£t_øw_sockë_id
 },

157 { "c‹êid", 
£t_øw_c‹e_id
 },

158 { "modñÇame", 
£t_modñ_«me
 },

159 { "\n", 
£t_thªad_id_°r
 },

160 { 
NULL
, NULL }

162 
a˘i⁄
 *action;

164 
a˘i⁄
 = 
a˘i⁄s
;á˘i⁄->
‚
 !
NULL
; ++action)

165 i‡(
	`°∫cmp
(
a˘i⁄
->
desc
, 
löe
, 
	`°æí
(action->desc)) == 0)

166  
a˘i⁄
->
‚
;

167  
ign‹e_löe
;

168 
	}
}

175 
	$ªm≠
(
lc‹e_t
 *
lc
,

176 
‰om
,

177 
to
,

178 
gëãr_‚
 
gë
,

179 
£âî_‚
 
£t
)

181 i‡(
lc
) {

182 i‡(
	`gë
(
lc
Ë=
‰om
)

183 
	`£t
(
lc
, 
to
);

184 
	`ªm≠
(
lc
->
√xt
, 
‰om
, 
to
, 
gë
, 
£t
);

186 
	}
}

192 
lc‹e_t
 *

193 
	$˛o£°_gã
(
lc‹e_t
 *
lc
,Üc‹e_à*
£l
, 
v
, 
gëãr_‚
 
gë
)

195 i‡(
lc
 =
NULL
)

196  
£l
;

197 i‡(
	`gë
(
lc
Ë>
v
 && (
£l
 =
NULL
 || get(sel) - v > get(lc) - v))

198  
	`˛o£°_gã
(
lc
->
√xt
,Üc, 
v
, 
gë
);

199  
	`˛o£°_gã
(
lc
->
√xt
, 
£l
, 
v
, 
gë
);

200 
	}
}

208 
	$zîo_ba£
(
lc‹e_t
 *
hód
, 
gëãr_‚
 
gë
, 
£âî_‚
 
£t
)

210 
id
 = 0;

211 
lc‹e_t
 *
lc
;

213 (
lc
 = 
	`˛o£°_gã
(
hód
, 
NULL
, 
id
, 
gë
)) != NULL) {

214 
	`ªm≠
(
lc
, 
	`gë
÷c), 
id
, 
gë
, 
£t
);

215 ++
id
;

217 
	}
}

223 
__ölöe__
 

224 
	$˙t
(c⁄° 
lc‹e_t
 *
lc
, 
gëãr_‚
 
gë
)

226 
˙t
 = 0;

228 
lc
) {

229 i‡(
˙t
 < 
	`gë
(
lc
))

230 
˙t
 = 
	`gë
(
lc
);

231 
lc
 =Üc->
√xt
;

233  
˙t
 + 1;

234 
	}
}

237 
	$¥öt_™d_‰ì_lc‹es
(
lc‹e_t
 *
lc
)

239 i‡(
lc
) {

240 
	`¥öt_™d_‰ì_lc‹es
(
lc
->
√xt
);

241 
	`¥ötf
("%u/%u/%u\t%u\n",

242 
lc
->
u
.
s
.
sockë_id
,

243 
lc
->
u
.
s
.
c‹e_id
,

244 
lc
->
u
.
s
.
thªad_id
,

245 
lc
->
u
.
s
.
id
);

246 
	`‰ì
(
lc
);

248 
	}
}

250 
lc_öfo_t
 *

251 
	$gë_™d_‰ì_lc‹es
(
lc‹e_t
 *
lc
, 
lc_öfo_t
 *
gë
, 
˙t
)

253 i‡((
lc
 =
NULL
Ë|| (
˙t
 == 0))

254  
NULL
;

256 
	`gë_™d_‰ì_lc‹es
(
lc
->
√xt
, 
gë
 + 1, 
˙t
 - 1);

257 
gë
->
w‹d
 = 
lc
->
u
.word;

258  
gë
;

259 
	}
}

262 
	$¥öt_m©chög_lc‹es
(
lc‹e_t
 *
lc
, 
s
, 
c
, 
t
)

264 i‡(
lc
) {

265 
	`¥öt_m©chög_lc‹es
(
lc
->
√xt
, 
s
, 
c
, 
t
);

266 i‡(
lc
->
u
.
s
.
sockë_id
 =†&&Üc->u.s.
c‹e_id
 =
c
 &&

267 
lc
->
u
.
s
.
thªad_id
 =
t
)

268 
	`¥ötf
("%u ", 
lc
->
u
.
s
.
id
);

270 
	}
}

272 
__ölöe__
 

273 
	$‰ì_lc‹es
(
lc‹e_t
 *
lc
)

275 i‡(
lc
) {

276 
	`‰ì_lc‹es
(
lc
->
√xt
);

277 
	`‰ì
(
lc
);

279 
	}
}

282 
	$¥öt_c‹e_m≠
(
lc‹e_t
 *
lc‹es
, 
mode
, 
bÆ™˚d
)

284 
s
, 
c
;

299 i‡(
bÆ™˚d
) {

304 
c
 = 0; c < 
	`˙t
(
lc‹es
, 
gë_c‹e_id
); c++)

305 
s
 = 0; s < 
	`˙t
(
lc‹es
, 
gë_sockë_id
); s++) {

306 
	`¥öt_m©chög_lc‹es
(
lc‹es
, 
s
, 
c
, 0);

308 i‡(
mode
 =0 && (
c
 !0 || 
s
 != 0))

309 
	`¥öt_m©chög_lc‹es
(
lc‹es
, 
s
, 
c
, 1);

316 
s
 = 0; s < 
	`˙t
(
lc‹es
, 
gë_sockë_id
); s++)

317 
c
 = 0; c < 
	`˙t
(
lc‹es
, 
gë_c‹e_id
); c++) {

318 
	`¥öt_m©chög_lc‹es
(
lc‹es
, 
s
, 
c
, 0);

319 i‡(
mode
 =0 && (
c
 !0 || 
s
 != 0))

320 
	`¥öt_m©chög_lc‹es
(
lc‹es
, 
s
, 
c
, 1);

324 i‡(
mode
 == 0)

325 
	`¥öt_m©chög_lc‹es
(
lc‹es
, 0, 0, 1);

327 
	`‰ì_lc‹es
(
lc‹es
);

328 
	`¥ötf
("\n");

329 
	}
}

331 
__ölöe__
 

332 
	$cou¡_c‹es
(
lc‹e_t
 *
lc‹es
)

334 
num
 = 0;

336 
lc‹es
) {

337 
lc‹es
 =Üc‹es->
√xt
;

338 
num
++;

340  
num
;

341 
	}
}

344 
	$c‹em≠
(c⁄° *
¨g
,

345 
lc_öfo_t
 *
gë_lc‹es
,

346 
max_˙t
,

347 c⁄° *
¥oc_˝uöfo
)

349 
FILE
 *
f
;

350 *
löe
 = 
NULL
;

351 
size_t
 
löe_sz
 = 0;

352 
¥öt_m≠
 = 0;

353 
bÆ™˚d
 = 1;

354 
mode
 = 0;

355 
lc‹e_t
 *
lc‹es
 = 
NULL
;

357 i‡(
¥oc_˝uöfo
 =
NULL
)

358 
¥oc_˝uöfo
 = 
PROC_CPUINFO
;

360 i‡–(
f
 = 
	`f›í
(
¥oc_˝uöfo
, "r")Ë=
NULL
) {

361 
	`Ârötf
(
°dîr
, "Cannot open %s onÅhis system\n",

362 
¥oc_˝uöfo
);

366 
	`gëlöe
(&
löe
, &
löe_sz
, 
f
) >= 0)

367 
lc‹es
 = 
	`gë_m©chög_a˘i⁄
(
löe
) (line,Ücores);

369 i‡(
f
Ë
	`f˛o£
(f);

370 i‡(
löe
Ë
	`‰ì
(line);

372 
	`zîo_ba£
(
lc‹es
, 
gë_sockë_id
, 
£t_sockë_id
);

373 
	`zîo_ba£
(
lc‹es
, 
gë_c‹e_id
, 
£t_c‹e_id
);

375 i‡(
	`°rcmp
(
¨g
, "info") != 0) {

376 
¥öt_m≠
 = 1;

378 i‡(
	`°rcmp
(
¨g
, "paired_balanced") == 0) {

379 
mode
 = 0; 
bÆ™˚d
 = 1;

380 } i‡(
	`°rcmp
(
¨g
, "unpaired_balanced") == 0) {

381 
mode
 = 1; 
bÆ™˚d
 = 1;

382 } i‡(
	`°rcmp
(
¨g
, "paired_unbalanced") == 0) {

383 
mode
 = 0; 
bÆ™˚d
 = 0;

384 } i‡(
	`°rcmp
(
¨g
, "unpaired_unbalanced") == 0) {

385 
mode
 = 1; 
bÆ™˚d
 = 0;

386 } i‡(
	`°rcmp
(
¨g
, "array") == 0) {

387 
num_c‹es
 = 
	`cou¡_c‹es
(
lc‹es
);

388 i‡–(
gë_lc‹es
 !
NULL
Ë|| (
max_˙t
 > 0) )

389 
	`gë_™d_‰ì_lc‹es
(
lc‹es
,

390 &
gë_lc‹es
[0],

391 
max_˙t
);

392  
num_c‹es
;

395 i‡(
¥öt_m≠
) {

396 
	`¥öt_c‹e_m≠
(
lc‹es
, 
mode
, 
bÆ™˚d
);

400 
	`¥ötf
("CPU : %s", 
modñ_«me
);

401 
	`¥ötf
("%u socket%s, %u core%sÖer socketánd %uÅhread%sÖer core\n",

402 
	`˙t
(
lc‹es
, 
gë_sockë_id
),

403 
	`˙t
(
lc‹es
, 
gë_sockë_id
) > 1 ? "s" : "",

404 
	`˙t
(
lc‹es
, 
gë_c‹e_id
),

405 
	`˙t
(
lc‹es
, 
gë_c‹e_id
) > 1 ? "s" : "",

406 
	`˙t
(
lc‹es
, 
gë_thªad_id
),

407 
	`˙t
(
lc‹es
, 
gë_thªad_id
) > 1 ? "s" : "");

408 
	`¥öt_™d_‰ì_lc‹es
(
lc‹es
);

411 
	}
}

413 (*
	t_gëãr_‚
)(c⁄° 
	tlc_öfo_t
 *);

416 
	$_gë_sockë_id
(c⁄° 
lc_öfo_t
 *
lc
)

418  
lc
->
s
.
sockë_id
;

419 
	}
}

422 
	$_gë_c‹e_id
(c⁄° 
lc_öfo_t
 *
lc
)

424  
lc
->
s
.
c‹e_id
;

425 
	}
}

428 
	$_gë_thªad_id
(c⁄° 
lc_öfo_t
 *
lc
)

430  
lc
->
s
.
thªad_id
;

431 
	}
}

434 
	$_gë_lc‹e_id
(c⁄° 
lc_öfo_t
 *
lc
)

436  
lc
->
s
.
id
;

437 
	}
}

444 
	$c‹em≠_˙t
(c⁄° 
lc_öfo_t
 *
lc
, 
max_˙t
, 
t
)

446 
_gëãr_‚
 
gë
;

447 
_gëãr_‚
 
_ty≥
[] =

448 { 
_gë_sockë_id
, 
_gë_c‹e_id
, 
_gë_thªad_id
, 
_gë_lc‹e_id
, 
NULL
 };

449 
˙t
 = 0, 
i
;

451 
gë
 = 
_ty≥
[
t
];

452 
i
 = 0; i < 
max_˙t
; i++, 
lc
++)

453 i‡(
˙t
 < 
	`gë
(
lc
))

454 
˙t
 = 
	`gë
(
lc
);

455  
˙t
 + 1;

456 
	}
}

	@lib/common/coremap.h

9 #i‚de‡
__COREMAP_H


10 
	#__COREMAP_H


	)

12 
	~<°döt.h
>

14 
	#PROC_CPUINFO
 "/¥oc/˝uöfo"

	)

18 
uöt8_t
 
	mid
;

19 
uöt8_t
 
	msockë_id
;

20 
uöt8_t
 
	mc‹e_id
;

21 
uöt8_t
 
	mthªad_id
;

22 } 
	ms
;

23 
uöt32_t
 
	mw‹d
;

24 } 
	tlc_öfo_t
;

26 
c‹em≠
(c⁄° *
›t
,

27 
lc_öfo_t
 *
gë
,

28 
˙t
,

29 c⁄° *
¥oc_˝uöfo
);

30 
c‹em≠_˙t
(c⁄° 
lc_öfo_t
 *
lc
, 
max_˙t
,

31 
t
);

	@lib/common/cycles.h

7 #i‚de‡
_CYCLES_H_


8 
	#_CYCLES_H_


	)

10 #ifde‡
__˝lu•lus


14 
__ölöe__
 

15 
_dñay_us
(
uöt32_t
 
us
) {

16 
uöt64_t
 
°¨t
;

17 
uöt64_t
 
ticks
;

18 
uöt32_t
 
ªsﬁuti⁄_fs
;

20 
ªsﬁuti⁄_fs
 =

21 (
uöt32_t
)((1000ULL * 1000ULL * 1000ULL * 1000ULL * 1000ULL) /

22 
πe_gë_timî_hz
());

24 
ticks
 = (
uöt64_t
)
us
 * 1000ULL * 1000ULL * 1000ULL;

25 
ticks
 /
ªsﬁuti⁄_fs
;

27 
°¨t
 = 
πe_gë_timî_cy˛es
();

29 (
πe_gë_timî_cy˛es
(Ë- 
°¨t
Ë< 
ticks
) {

30 
πe_timî_m™age
();

31 
πe_∑u£
();

35 
__ölöe__
 

36 
_dñay_ms
(
uöt32_t
 
ms
) {

37 
_dñay_us
(
ms
 * 1000);

40 
__ölöe__
 

41 
_¶ìp
(
uöt32_t
 
£cs
) {

42 
_dñay_us
(
£cs
 * (1000 * 1000));

45 #ifde‡
__˝lu•lus


	@lib/common/l2p.c

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<°döt.h
>

12 
	~<öây≥s.h
>

13 
	~<sys/ty≥s.h
>

14 
	~<uni°d.h
>

15 
	~<°rög.h
>

16 
	~<°d¨g.h
>

17 
	~<˘y≥.h
>

19 
	~<πe_vîsi⁄.h
>

20 
	~<πe_c⁄fig.h
>

21 
	~<πe_lc‹e.h
>

22 
	~<πe_©omic.h
>

23 
	~<πe_cy˛es.h
>

24 
	~<πe_pci.h
>

25 
	~<πe_debug.h
>

26 
	~<πe_mem‹y.h
>

28 
	~"l2p.h
"

29 
	~"c‹e_öfo.h
"

30 
	~"utûs.h
"

32 
	#cou¡of
(
t
Ë(—Ë/ —[0]))

	)

34 íum { 
	mRX_IDX
 = 0, 
	mTX_IDX
 = 1, 
	mRXTX_CNT
 = 2 };

37 
	sls_s
 {

38 
uöt8_t
 
	mrbôs
[(
RTE_MAX_LCORE
 + 7) / 8];

39 
uöt8_t
 
	mtbôs
[(
RTE_MAX_LCORE
 + 7) / 8];

40 } 
	tls_t
;

42 
	sps_s
 {

43 
uöt8_t
 
	mrbôs
[(
RTE_MAX_ETHPORTS
 + 7) / 8];

44 
uöt8_t
 
	mtbôs
[(
RTE_MAX_ETHPORTS
 + 7) / 8];

45 } 
	tps_t
;

47 
	slc‹e_p‹t_s
 {

48 
ls_t
 
	mlc‹es
;

49 
ps_t
 
	mp‹ts
;

50 } 
	tÕ_t
;

52 
Õ_t
 
	gÕ_d©a
, *
	gÕ
 = &
Õ_d©a
;

54 
ölöe
 

55 
	$_bt°
(
uöt8_t
 *
p
, 
uöt16_t
 
idx
)

57 
öt32_t
 
c
 = (
idx
 / 8);

59  
p
[
c
] & (1 << (
idx
 - (c * 8)));

60 
	}
}

62 
ölöe
 

63 
	$_b£t
(
uöt8_t
 *
p
, 
uöt16_t
 
idx
)

65 
öt32_t
 
c
 = (
idx
 / 8);

66 
uöt8_t
 
t
 = 
p
[
c
];

68 
p
[
c
] = 
t
 | (1 << (
idx
 - (c * 8)));

69 
	}
}

75 
__ölöe__
 

76 
	$l2p_c⁄√˘
(
l2p_t
 *
l2p
, 
uöt16_t
 
pid
, uöt16_à
lid
, uöt16_à
ty≥
)

78 
lobj_t
 *
lobj
 = &
l2p
->
lc‹es
[
lid
];

79 
pobj_t
 *
pobj
 = &
l2p
->
p‹ts
[
pid
];

81 
lobj
->
ty≥
 =Åype;

83 i‡(
ty≥
 & 
RX_TYPE
) {

84 
lobj
->
pids
.
rx
[lobj->pids.
rx_˙t
++] = 
pid
;

85 
lobj
->
qids
.
rx
[
pid
] = 
	`pg_√w_rxque
(
l2p
,Öid);

86 
lobj
->
qids
.
rx_˙t
++;

87 
	`pg_öc_rx
(
l2p
, 
pid
, 
lid
);

90 i‡(
ty≥
 & 
TX_TYPE
) {

91 
lobj
->
pids
.
tx
[lobj->pids.
tx_˙t
++] = 
pid
;

92 
lobj
->
qids
.
tx
[
pid
] = 
	`pg_√w_txque
(
l2p
,Öid);

93 
lobj
->
qids
.
tx_˙t
++;

94 
	`pg_öc_tx
(
l2p
, 
pid
, 
lid
);

96 
pobj
->
lids
[pobj->
nb_lids
++] = 
lid
;

97 
	}
}

111 
uöt32_t


112 
	$pg_∑r£_p‹tmask
(c⁄° *
p‹tmask
)

114  
	`°πoul
(
p‹tmask
, 
NULL
, 0);

115 
	}
}

129 
öt32_t


130 
	$pg_∑r£_π_li°
(*
li°
, 
uöt8_t
 *
m≠
)

132 *
p
;

133 
öt32_t
 
k
, 
i
;

134 *
¨r
[33];

136 i‡(
li°
 =
NULL
)

140 
k
 = 
	`pg_°Ω¨£
(
li°
, "/", 
¨r
, 
	`cou¡of
(arr));

141 i‡(
k
 == 0) {

142 
	`Ârötf
(
°dîr
, "No comma or '/' inÜist\n");

146 
i
 = 0; (ò< 
k
Ë&& 
¨r
[i]; i++) {

147 
p
 = 
	`°rchr
(
¨r
[
i
], '-');

148 i‡(
p
 !
NULL
) {

149 
uöt32_t
 
l
, 
h
;

150 *
p
++ = '\0';

151 
l
 = 
	`°πﬁ
(
¨r
[
i
], 
NULL
, 10);

152 
h
 = 
	`°πﬁ
(
p
, 
NULL
, 10);

154 
	`_b£t
(
m≠
, 
l
);

155 ++
l
 <
h
);

157 
	`_b£t
(
m≠
, 
	`°πﬁ
(
¨r
[
i
], 
NULL
, 10));

160 
	}
}

174 
öt32_t


175 
	$pg_∑r£_lc‹e_li°
(*
li°
, 
ls_t
 *
ls
)

177 *
¨r
[3], *
p
;

178 
öt32_t
 
k
;

181 
p
 = 
	`pg_°πrim£t
(
li°
, "[]{}");

182 i‡–(
p
 =
NULL
) || (*p == '\0') )

186 
k
 = 
	`pg_°Ω¨£
(
p
, ":", 
¨r
, 
	`cou¡of
(arr) );

187 i‡–(
k
 == 0) || (k == 3) ) {

188 
	`Ârötf
(
°dîr
, "*** InvÆid såög (%s)\n", 
p
);

192 i‡(
k
 == 1) {

193 
	`pg_∑r£_π_li°
(
¨r
[0], 
ls
->
rbôs
);

194 
	`pg_∑r£_π_li°
(
¨r
[0], 
ls
->
tbôs
);

196 i‡(
	`pg_∑r£_π_li°
(
¨r
[0], 
ls
->
rbôs
) )

199 i‡(
	`pg_∑r£_π_li°
(
¨r
[1], 
ls
->
tbôs
) )

203 
	}
}

217 
öt32_t


218 
	$pg_∑r£_p‹t_li°
(*
li°
, 
ps_t
 *
ps
)

220 *
¨r
[3], *
p
;

221 
öt32_t
 
k
;

224 
p
 = 
	`pg_°πrim£t
(
li°
, "[]{}");

225 i‡–(
p
 =
NULL
) || (*p == '\0') )

229 
k
 = 
	`pg_°Ω¨£
(
p
, ":", 
¨r
, 
	`cou¡of
(arr) );

230 i‡–(
k
 == 0) || (k == 3) ) {

231 
	`Ârötf
(
°dîr
, "*** InvÆid såög (%s)\n", 
p
);

235 i‡(
k
 == 1) {

236 
	`pg_∑r£_π_li°
(
¨r
[0], 
ps
->
rbôs
);

237 
	`pg_∑r£_π_li°
(
¨r
[0], 
ps
->
tbôs
);

239 i‡(
	`pg_∑r£_π_li°
(
¨r
[0], 
ps
->
rbôs
) )

242 i‡(
	`pg_∑r£_π_li°
(
¨r
[1], 
ps
->
tbôs
) )

246 
	}
}

293 
	$pg_∑r£_m©rix
(
l2p_t
 *
l2p
, *
°r
)

295 *
lc‹e_p‹t
[
MAX_MATRIX_ENTRIES
+1];

296 
buff
[512];

297 
i
, 
m
, 
k
;

298 
uöt16_t
 
pid
, 
lid
, 
lid_ty≥
, 
pid_ty≥
;

299 
rxtx_t
 
˙t
, 
n
;

301 
	`pg_°rc˝y
(
buff
, 
°r
, " \r\n\t\"");

304 
k
 = 
	`pg_°Ω¨£
(
buff
, ",", 
lc‹e_p‹t
, 
	`cou¡of
(lcore_port));

305 i‡(
k
 <= 0) {

306 
	`Ârötf
(
°dîr
, "%s: couldÇotÖarse (%s) string\n",

307 
__func__
, 
buff
);

308 
Àave
;

311 
i
 = 0; (ò< 
k
Ë&& 
lc‹e_p‹t
[i]; i++) {

312 *
¨r
[3];

313 
°r
[64];

315 
	`mem£t
(
Õ
, '\0', (
Õ_t
));

318 
	`°∫˝y
(
°r
, 
lc‹e_p‹t
[
i
], (str));

321 
m
 = 
	`pg_°Ω¨£
(
lc‹e_p‹t
[
i
], ".", 
¨r
, 3);

322 i‡(
m
 != 2) {

323 
	`Ârötf
(
°dîr
, "%s: couldÇotÖarse <lcore-list>.<port-list> (%s) string\n",

324 
__func__
, 
lc‹e_p‹t
[
i
]);

325 
	`Ârötf
(
°dîr
, " Make sureÅo use '/' inÅheÜcoreándÖortÜist forÑangesándÇot ','\n");

326 
	`Ârötf
(
°dîr
, " -m [2:3/4/5/6/8-12].0 or -m [2-4/7-8:9/11-14].0\n");

327 
Àave
;

330 i‡(
	`pg_∑r£_lc‹e_li°
(
¨r
[0], &
Õ
->
lc‹es
) ) {

331 
	`Ârötf
(
°dîr
, "%s: couldÇotÖarse <lcore-list> (%s) string\n",

332 
__func__
, 
¨r
[0]);

333 
Àave
;

336 i‡(
	`pg_∑r£_p‹t_li°
(
¨r
[1], &
Õ
->
p‹ts
) ) {

337 
	`Ârötf
(
°dîr
, "%s: couldÇotÖarse <port-list> (%s) string\n",

338 
__func__
, 
¨r
[1]);

339 
Àave
;

342 
lid
 = 0;Üid < 
RTE_MAX_LCORE
;Üid++) {

343 
lid_ty≥
 = 0;

345 i‡(
	`_bt°
(
Õ
->
lc‹es
.
rbôs
, 
lid
) )

346 
lid_ty≥
 |
RX_TYPE
;

348 i‡(
	`_bt°
(
Õ
->
lc‹es
.
tbôs
, 
lid
) )

349 
lid_ty≥
 |
TX_TYPE
;

351 i‡(
lid_ty≥
 == 0)

354 
pid
 = 0;Öid < 
RTE_MAX_ETHPORTS
;Öid++) {

355 
pid_ty≥
 = 0;

357 i‡(
	`_bt°
(
Õ
->
p‹ts
.
rbôs
, 
pid
) )

358 
pid_ty≥
 |
RX_TYPE
;

360 i‡(
	`_bt°
(
Õ
->
p‹ts
.
tbôs
, 
pid
) )

361 
pid_ty≥
 |
TX_TYPE
;

363 i‡(
pid_ty≥
)

364 
	`l2p_c⁄√˘
(
l2p
, 
pid
, 
lid
, 
lid_ty≥
);

370 
pid
 = 0;Öid < 
RTE_MAX_ETHPORTS
;Öid++) {

371 
n
.
rxtx
 = 0;

372 
lid
 = 0;Üid < 
RTE_MAX_LCORE
;Üid++) {

373 
˙t
.
rxtx
 = 
	`gë_m≠
(
l2p
, 
pid
, 
lid
);

374 i‡(
˙t
.
rxtx
) {

375 i‡(
˙t
.
tx
)

376 
n
.
tx
++;

377 i‡(
˙t
.
rx
)

378 
n
.
rx
++;

381 
	`put_m≠
(
l2p
, 
pid
, 
RTE_MAX_LCORE
, 
n
.
rxtx
);

385 
lid
 = 0;Üid < 
RTE_MAX_LCORE
;Üid++) {

386 
n
.
rxtx
 = 0;

387 
pid
 = 0;Öid < 
RTE_MAX_ETHPORTS
;Öid++) {

388 
˙t
.
rxtx
 = 
	`gë_m≠
(
l2p
, 
pid
, 
lid
);

389 i‡(
˙t
.
rxtx
) {

390 i‡(
˙t
.
tx
)

391 
n
.
tx
++;

392 i‡(
˙t
.
rx
)

393 
n
.
rx
++;

396 
	`put_m≠
(
l2p
, 
RTE_MAX_ETHPORTS
, 
lid
, 
n
.
rxtx
);

400 
Àave
:

402 
	}
}

417 
	$pg_p‹t_m©rix_dump
(
l2p_t
 *
l2p
)

419 
uöt32_t
 
pid
, 
lid
;

420 
uöt16_t
 
fú°
, 
œ°
;

421 
rxtx_t
 
˙t
, 
tŸ
;

423 
fú°
 = 
œ°
 = 0;

425 
	`¥ötf
("\n===ÖortÅoÜcore mappingÅable (#Ücores %d) ===\n",

426 
	`lc‹e_mask
(&
fú°
, &
œ°
));

428 
	`¥ötf
("Ücore:");

429 
lid
 = 
fú°
;Üid <
œ°
;Üid++)

430 
	`¥ötf
(" %2d ", 
lid
);

431 
	`¥ötf
(" Total\n");

433 
pid
 = 0;Öid < 
RTE_MAX_ETHPORTS
;Öid++) {

434 
tŸ
.
rxtx
 = 
	`gë_m≠
(
l2p
, 
pid
, 
RTE_MAX_LCORE
);

435 i‡(
tŸ
.
rxtx
 == 0)

437 
	`¥ötf
("p‹à %2d:", 
pid
);

438 
lid
 = 
fú°
;Üid <
œ°
;Üid++) {

439 
˙t
.
rxtx
 = 
	`gë_m≠
(
l2p
, 
pid
, 
lid
);

440 i‡(
lid
 =
	`πe_gë_ma°î_lc‹e
() )

441 
	`¥ötf
(" (%s:%s)", " D", " T");

443 
	`¥ötf
(" (%2d:%2d)", 
˙t
.
rx
, c¡.
tx
);

445 
	`¥ötf
(" = (%2d:%2d)\n", 
tŸ
.
rx
,ÅŸ.
tx
);

448 
	`¥ötf
("Total :");

449 
lid
 = 
fú°
;Üid <
œ°
;Üid++) {

450 
˙t
.
rxtx
 = 
	`gë_m≠
(
l2p
, 
RTE_MAX_ETHPORTS
, 
lid
);

451 
	`¥ötf
(" (%2d:%2d)", 
˙t
.
rx
, c¡.
tx
);

454 
	`¥ötf
("\n Displayánd Timer onÜcore %d,Ñx:tx countsÖerÖort/lcore\n\n",

455 
	`πe_gë_ma°î_lc‹e
());

457 
	`fÊush
(
°dout
);

458 
	}
}

	@lib/common/l2p.h

9 #i‚de‡
__WR_L2P_H


10 
	#__WR_L2P_H


	)

12 
	~<°rög.h
>

14 
	~<πe_mem‹y.h
>

15 
	~<πe_©omic.h
>

17 
	#MAX_MATRIX_ENTRIES
 128

	)

18 
	#MAX_STRING
 256

	)

20 
	#MAX_MAP_PORTS
 (
RTE_MAX_ETHPORTS
 + 1)

	)

21 
	#MAX_MAP_LCORES
 (
RTE_MAX_LCORE
 + 1)

	)

23 íum { 
	mNO_TYPE
 = 0, 
	mRX_TYPE
 = 0x01, 
	mTX_TYPE
 = 0x02 };

25 
	spq_s
 {

26 
uöt16_t
 
	mrx_˙t
;

27 
uöt16_t
 
	mtx_˙t
;

28 
uöt16_t
 
	mrx
[
RTE_MAX_ETHPORTS
];

29 
uöt16_t
 
	mtx
[
RTE_MAX_ETHPORTS
];

30 } 
	tpq_t
;

33 
uöt16_t
 
	mlid
;

34 
uöt16_t
 
	mty≥
;

35 
pq_t
 
	mpids
;

36 
pq_t
 
	mqids
;

37 *
	m¥iv©e
;

38 } 
	tlobj_t
;

41 
uöt16_t
 
	mpid
;

42 
uöt16_t
 
	mrx_qid
;

43 
uöt16_t
 
	mtx_qid
;

44 
uöt16_t
 
	mnb_lids
;

45 
uöt16_t
 
	mlids
[
RTE_MAX_LCORE
];

46 *
	m¥iv©e
;

47 } 
	tpobj_t
;

51 
uöt16_t
 
	mrx
;

52 
uöt16_t
 
	mtx
;

54 
uöt32_t
 
	mrxtx
;

55 } 
	trxtx_t
;

58 vﬁ©ûê
uöt8_t
 
	m°›
[
RTE_MAX_LCORE
];

59 
lobj_t
 
	mlc‹es
[
RTE_MAX_LCORE
];

60 
pobj_t
 
	mp‹ts
[
RTE_MAX_ETHPORTS
];

61 
rxtx_t
 
	mm≠
[
MAX_MAP_PORTS
][
MAX_MAP_LCORES
];

62 } 
	tl2p_t
;

68 
__ölöe__
 

69 
	$pg_øw_dump_l2p
(
l2p_t
 *
l2p
)

71 
uöt16_t
 
i
, 
j
;

72 
lobj_t
 *
lobj
;

73 
pobj_t
 *
pobj
;

74 c⁄° *
ty≥s
[] = { "Unkn", " RX ", " TX ", "RXTX", 
NULL
 };

76 
j
 = 0; j < 
RTE_MAX_LCORE
; j++) {

77 
lobj
 = &
l2p
->
lc‹es
[
j
];

78 i‡(
lobj
->
pids
.
rx_˙t
 ||Üobj->pids.
tx_˙t
) {

79 
	`¥ötf
("lc‹ê%2d:Åy≥ %†¥iv©ê%p\n", 
lobj
->
lid
,

80 
ty≥s
[
lobj
->
ty≥
],Üobj->
¥iv©e
);

81 
	`¥ötf
(" PidÑx_˙t(%2dË", 
lobj
->
pids
.
rx_˙t
);

82 
i
 = 0; i < 
lobj
->
pids
.
rx_˙t
; i++)

83 
	`¥ötf
("%2d ", 
lobj
->
pids
.
rx
[
i
]);

84 
	`¥ötf
("\n");

85 
	`¥ötf
("Åx_˙t(%2dË", 
lobj
->
pids
.
tx_˙t
);

86 
i
 = 0; i < 
lobj
->
pids
.
tx_˙t
; i++)

87 
	`¥ötf
("%2d ", 
lobj
->
pids
.
tx
[
i
]);

88 
	`¥ötf
("\n");

90 i‡(
lobj
->
qids
.
rx_˙t
 ||Üobj->qids.
tx_˙t
) {

91 
	`¥ötf
(" QidÑx_˙t(%2dË", 
lobj
->
qids
.
rx_˙t
);

92 
i
 = 0; i < 
lobj
->
qids
.
rx_˙t
; i++)

93 
	`¥ötf
("%2d ", 
lobj
->
qids
.
rx
[
i
]);

94 
	`¥ötf
("\n");

95 
	`¥ötf
("Åx_˙t(%2dË", 
lobj
->
qids
.
tx_˙t
);

96 
i
 = 0; i < 
lobj
->
qids
.
tx_˙t
; i++)

97 
	`¥ötf
("%2d ", 
lobj
->
qids
.
tx
[
i
]);

98 
	`¥ötf
("\n");

102 
	`¥ötf
("Ports:\n");

103 
i
 = 0; i < 
RTE_MAX_ETHPORTS
; i++) {

104 
pobj
 = &
l2p
->
p‹ts
[
i
];

105 i‡(
pobj
->
nb_lids
 == 0)

107 
	`¥ötf
(" Lids idx %2d: RX %2d, TX %2d,Örivate %p: ",

108 
pobj
->
pid
,Öobj->
rx_qid
,Öobj->
tx_qid
,Öobj->
¥iv©e
);

109 
j
 = 0; j < 
pobj
->
nb_lids
; j++)

110 
	`¥ötf
("%2d ", 
pobj
->
lids
[
j
]);

111 
	`¥ötf
("\n");

113 
	`¥ötf
("\n");

114 
	}
}

121 
__ölöe__
 
l2p_t
 *

122 
	$l2p_¸óã
()

124 
l2p_t
 *
l2p
;

125 
uöt32_t
 
i
;

127 
l2p
 = (
l2p_t
 *)
	`ˇŒoc
(1, (l2p_t));

128 i‡(
l2p
 =
NULL
)

129  
NULL
;

132 
	`mem£t
(
l2p
, 0, (
l2p_t
));

134 
i
 = 0; i < 
RTE_MAX_LCORE
; i++)

135 
l2p
->
lc‹es
[
i
].
lid
 = i;

137 
i
 = 0; i < 
RTE_MAX_ETHPORTS
; i++)

138 
l2p
->
p‹ts
[
i
].
pid
 = i;

141 
i
 = 0; i < 
RTE_MAX_LCORE
; i++)

142 
l2p
->
°›
[
i
] = 1;

144  
l2p
;

145 
	}
}

151 
__ölöe__
 
uöt16_t


152 
	$pg_√w_rxque
(
l2p_t
 *
l2p
, 
uöt16_t
 
pid
)

154 
pobj_t
 *
pobj
 = &
l2p
->
p‹ts
[
pid
];

156  
pobj
->
rx_qid
++;

157 
	}
}

163 
__ölöe__
 
uöt16_t


164 
	$pg_√w_txque
(
l2p_t
 *
l2p
, 
uöt16_t
 
pid
)

166 
pobj_t
 *
pobj
 = &
l2p
->
p‹ts
[
pid
];

168  
pobj
->
tx_qid
++;

169 
	}
}

175 
__ölöe__
 

176 
	$pg_öc_rx
(
l2p_t
 *
l2p
, 
uöt16_t
 
pid
, uöt16_à
lid
) {

177 
l2p
->
m≠
[
pid
][
lid
].
rx
++;

178 
	}
}

184 
__ölöe__
 

185 
	$pg_öc_tx
(
l2p_t
 *
l2p
, 
uöt16_t
 
pid
, uöt16_à
lid
) {

186 
l2p
->
m≠
[
pid
][
lid
].
tx
++;

187 
	}
}

193 
__ölöe__
 
uöt32_t


194 
	$gë_m≠
(
l2p_t
 *
l2p
, 
uöt16_t
 
pid
, uöt16_à
lid
)

196  
l2p
->
m≠
[
pid
][
lid
].
rxtx
;

197 
	}
}

203 
__ölöe__
 

204 
	$put_m≠
(
l2p_t
 *
l2p
, 
uöt16_t
 
pid
, uöt16_à
lid
, 
uöt32_t
 
rxtx
)

206 
l2p
->
m≠
[
pid
][
lid
].
rxtx
 =Ñxtx;

207 
	}
}

213 
__ölöe__
 
uöt16_t


214 
	$gë_ty≥
(
l2p_t
 *
l2p
, 
uöt16_t
 
lid
)

216 
lobj_t
 *
lobj
 = &
l2p
->
lc‹es
[
lid
];

218  
lobj
->
ty≥
;

219 
	}
}

225 
__ölöe__
 
uöt16_t


226 
	$gë_lc‹e_rx˙t
(
l2p_t
 *
l2p
, 
uöt16_t
 
lid
)

228 
lobj_t
 *
lobj
 = &
l2p
->
lc‹es
[
lid
];

230  
lobj
->
pids
.
rx_˙t
;

231 
	}
}

237 
__ölöe__
 
uöt16_t


238 
	$gë_lc‹e_tx˙t
(
l2p_t
 *
l2p
, 
uöt16_t
 
lid
)

240 
lobj_t
 *
lobj
 = &
l2p
->
lc‹es
[
lid
];

242  
lobj
->
pids
.
tx_˙t
;

243 
	}
}

249 
__ölöe__
 
uöt16_t


250 
	$gë_p‹t_rx˙t
(
l2p_t
 *
l2p
, 
uöt16_t
 
pid
)

252 
pobj_t
 *
pobj
 = &
l2p
->
p‹ts
[
pid
];

254  
pobj
->
rx_qid
;

255 
	}
}

261 
__ölöe__
 
uöt16_t


262 
	$gë_p‹t_tx˙t
(
l2p_t
 *
l2p
, 
uöt16_t
 
pid
)

264 
pobj_t
 *
pobj
 = &
l2p
->
p‹ts
[
pid
];

266  
pobj
->
tx_qid
;

267 
	}
}

273 
__ölöe__
 
uöt16_t


274 
	$gë_p‹t_nb_lids
(
l2p_t
 *
l2p
, 
uöt16_t
 
pid
)

276 
pobj_t
 *
pobj
 = &
l2p
->
p‹ts
[
pid
];

278  
pobj
->
nb_lids
;

279 
	}
}

285 
__ölöe__
 

286 
	$pg_£t_p‹t_¥iv©e
(
l2p_t
 *
l2p
, 
uöt16_t
 
pid
, *
±r
)

288 
pobj_t
 *
pobj
 = &
l2p
->
p‹ts
[
pid
];

290 
pobj
->
¥iv©e
 = 
±r
;

291 
	}
}

297 
__ölöe__
 *

298 
	$gë_p‹t_¥iv©e
(
l2p_t
 *
l2p
, 
uöt16_t
 
pid
)

300 
pobj_t
 *
pobj
 = &
l2p
->
p‹ts
[
pid
];

302  
pobj
->
¥iv©e
;

303 
	}
}

309 
__ölöe__
 

310 
	$pg_£t_lc‹e_¥iv©e
(
l2p_t
 *
l2p
, 
uöt16_t
 
lid
, *
±r
)

312 
lobj_t
 *
lobj
 = &
l2p
->
lc‹es
[
lid
];

314 
lobj
->
¥iv©e
 = 
±r
;

315 
	}
}

321 
__ölöe__
 *

322 
	$gë_lc‹e_¥iv©e
(
l2p_t
 *
l2p
, 
uöt16_t
 
lid
)

324 
lobj_t
 *
lobj
 = &
l2p
->
lc‹es
[
lid
];

326  
lobj
->
¥iv©e
;

327 
	}
}

333 
__ölöe__
 
uöt16_t


334 
	$gë_rx_pid
(
l2p_t
 *
l2p
, 
uöt16_t
 
lid
, uöt16_à
idx
)

336 
lobj_t
 *
lobj
 = &
l2p
->
lc‹es
[
lid
];

338  
lobj
->
pids
.
rx
[
idx
];

339 
	}
}

345 
__ölöe__
 
uöt16_t


346 
	$gë_tx_pid
(
l2p_t
 *
l2p
, 
uöt16_t
 
lid
, uöt16_à
idx
)

348 
lobj_t
 *
lobj
 = &
l2p
->
lc‹es
[
lid
];

350  
lobj
->
pids
.
tx
[
idx
];

351 
	}
}

357 
__ölöe__
 
uöt16_t


358 
	$gë_p‹t_lid
(
l2p_t
 *
l2p
, 
uöt16_t
 
pid
, uöt16_à
qid
)

360 
pobj_t
 *
pobj
 = &
l2p
->
p‹ts
[
pid
];

362  
pobj
->
lids
[
qid
];

363 
	}
}

369 
__ölöe__
 
uöt16_t


370 
	$gë_rxque
(
l2p_t
 *
l2p
, 
uöt16_t
 
lid
, uöt16_à
pid
)

372 
lobj_t
 *
lobj
 = &
l2p
->
lc‹es
[
lid
];

374  
lobj
->
qids
.
rx
[
pid
];

375 
	}
}

381 
__ölöe__
 
uöt16_t


382 
	$gë_txque
(
l2p_t
 *
l2p
, 
uöt16_t
 
lid
, uöt16_à
pid
)

384 
lobj_t
 *
lobj
 = &
l2p
->
lc‹es
[
lid
];

386  
lobj
->
qids
.
tx
[
pid
];

387 
	}
}

393 
__ölöe__
 

394 
	$pg_°›_lc‹e
(
l2p_t
 *
l2p
, 
uöt16_t
 
lid
)

396 
l2p
->
°›
[
lid
] = 1;

397 
	}
}

403 
__ölöe__
 

404 
	$pg_°¨t_lc‹e
(
l2p_t
 *
l2p
, 
uöt16_t
 
lid
)

406 
l2p
->
°›
[
lid
] = 0;

407 
	}
}

413 
__ölöe__
 
öt32_t


414 
	$pg_lc‹e_is_ru¬ög
(
l2p_t
 *
l2p
, 
uöt16_t
 
lid
)

416  
l2p
->
°›
[
lid
] == 0;

417 
	}
}

425 
__ölöe__
 

426 
	$pg_dump_l2p
(
l2p_t
 *
l2p
)

428 
lobj_t
 *
lobj
;

429 
pobj_t
 *
pobj
;

430 
uöt16_t
 
lid
, 
pid
, 
i
;

431 c⁄° *
ty≥s
[] =

432 { "Unknown", "RX-O∆y", "TX-O∆y", "RX-TX ", 
NULL
 };

434 
	`¥ötf
("Lcore:\n");

435 
lid
 = 0;Üid < 
RTE_MAX_LCORE
;Üid++) {

436 
lobj
 = &
l2p
->
lc‹es
[
lid
];

438 i‡(
lobj
->
pids
.
rx_˙t
 ||Üobj->pids.
tx_˙t
) {

439 
	`¥ötf
(" %2d, %s\n",

440 
lobj
->
lid
, 
ty≥s
[lobj->
ty≥
]);

442 i‡(
lobj
->
pids
.
rx_˙t
) {

443 
	`¥ötf
(" RX_cnt(%2d): ",

444 
lobj
->
pids
.
rx_˙t
);

445 
i
 = 0; i < 
lobj
->
pids
.
rx_˙t
; i++)

446 
	`¥ötf
("(pid=%2d:qid=%2d) ",

447 
lobj
->
pids
.
rx
[
i
],

448 
lobj
->
qids
.
rx
[lobj->
pids
.rx[
i
]]);

450 
	`¥ötf
("\n");

452 i‡(
lobj
->
pids
.
tx_˙t
) {

453 
	`¥ötf
(" TX_cnt(%2d): ",

454 
lobj
->
pids
.
tx_˙t
);

455 
i
 = 0; i < 
lobj
->
pids
.
tx_˙t
; i++)

456 
	`¥ötf
("(pid=%2d:qid=%2d) ",

457 
lobj
->
pids
.
tx
[
i
],

458 
lobj
->
qids
.
tx
[lobj->
pids
.tx[
i
]]);

460 
	`¥ötf
("\n");

464 
	`¥ötf
("\n");

465 
	`¥ötf
("Port :\n");

466 
pid
 = 0;Öid < 
RTE_MAX_ETHPORTS
;Öid++) {

467 
pobj
 = &
l2p
->
p‹ts
[
pid
];

469 i‡(
pobj
->
nb_lids
) {

470 
	`¥ötf
(" %2d,Çb_lcores %2d,Örivate %p,",

471 
pobj
->
pid
,Öobj->
nb_lids
,Öobj->
¥iv©e
);

473 
	`¥ötf
("Ücores: ");

474 
i
 = 0; i < 
pobj
->
nb_lids
; i++)

475 
	`¥ötf
("%2d ", 
pobj
->
lids
[
i
]);

476 
	`¥ötf
("\n");

479 
	`¥ötf
("\n\n");

480 
	}
}

482 
pg_p‹t_m©rix_dump
(
l2p_t
 *
l2p
);

483 
pg_∑r£_m©rix
(
l2p_t
 *
l2p
, *
°r
);

484 
uöt32_t
 
pg_∑r£_p‹tmask
(c⁄° *
p‹tmask
);

	@lib/common/lscpu.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

11 
	~<gë›t.h
>

12 
	~<°döt.h
>

14 
	~"utûs.h
"

15 
	~"ls˝u.h
"

17 
ls˝u_t
 *
	gls˝u
;

19 
__ölöe__
 

20 
num_˝us
(
__©åibuã__
((
unu£d
)Ë
a˘i⁄_t
 *
a˘
, *
löe
) {

21 
	gls˝u
->
	gnum_˝us
 = 
©oi
(
löe
);

24 
__ölöe__
 

25 
thªads_≥r_c‹e
(
__©åibuã__
((
unu£d
)Ë
a˘i⁄_t
 *
a˘
, *
löe
) {

26 
	gls˝u
->
	gthªads_≥r_c‹e
 = 
©oi
(
löe
);

29 
__ölöe__
 

30 
c‹es_≥r_sockë
(
__©åibuã__
((
unu£d
)Ë
a˘i⁄_t
 *
a˘
, *
löe
) {

31 
	gls˝u
->
	gc‹es_≥r_sockë
 = 
©oi
(
löe
);

34 
__ölöe__
 

35 
numa_nodes
(
__©åibuã__
((
unu£d
)Ë
a˘i⁄_t
 *
a˘
, *
löe
) {

36 
	gls˝u
->
	gnuma_nodes
 = 
©oi
(
löe
);

39 
__ölöe__
 

40 
	$˝u_mhz
(
a˘i⁄_t
 *
a˘
, *
löe
)

42 i‡–(
a˘
->
Êags
 & 
ONLY_ONCE_FLAG
) == 0) {

43 
ls˝u
->
˝u_mhz
 = 
	`pg_°rdupf
÷s˝u->˝u_mhz, 
löe
);

44 
a˘
->
Êags
 |
ONLY_ONCE_FLAG
;

46 
	}
}

49 
	$numa_nodeX_˝us
(
a˘i⁄_t
 *
a˘
, *
löe
)

51 
n
, 
i
;

52 *
¨r
[32], *
p
;

53 
fú°
, 
œ°
;

55 
	`mem£t
(
¨r
, 0, (arr));

57 
n
 = 
	`pg_°Ω¨£
(
löe
, ",", 
¨r
, ((arr) / (*)));

58 i‡(
n
 > 0)

59 
i
 = 0; i < 
n
; i++) {

60 i‡(
¨r
[
i
] =
NULL
)

62 i‡–(
p
 = 
	`°rchr
(
¨r
[
i
], '-')) )

63 
p
++;

65 
p
 = 
¨r
[
i
];

66 
fú°
 = 
	`©oi
(
¨r
[
i
]);

67 
œ°
 = 
	`©oi
(
p
);

68 
fú°
 <
œ°
)

69 
ls˝u
->
numa_˝us
[
a˘
->
¨g
][
fú°
++] = 1;

71 
	}
}

73 
__ölöe__
 

74 
	$ˇche_size
(
a˘i⁄_t
 *
a˘
, *
löe
)

76 i‡–(
a˘
->
Êags
 & 
ONLY_ONCE_FLAG
) == 0) {

77 
ls˝u
->
ˇche_size
 = 
	`pg_°rdupf
÷s˝u->ˇche_size, 
löe
);

78 
a˘
->
Êags
 |
ONLY_ONCE_FLAG
;

80 
	}
}

82 
__ölöe__
 

83 
	$modñ_«me
(
a˘i⁄_t
 *
a˘
, *
löe
)

85 i‡–(
a˘
->
Êags
 & 
ONLY_ONCE_FLAG
) == 0) {

86 
ls˝u
->
modñ_«me
 = 
	`pg_°rdupf
÷s˝u->modñ_«me, 
löe
);

87 
a˘
->
Êags
 |
ONLY_ONCE_FLAG
;

89 
	}
}

91 
__ölöe__
 

92 
	$˝u_Êags
(
a˘i⁄_t
 *
a˘
, *
löe
)

94 i‡–(
a˘
->
Êags
 & 
ONLY_ONCE_FLAG
) == 0) {

95 
ls˝u
->
˝u_Êags
 = 
	`pg_°rdupf
÷s˝u->˝u_Êags, 
löe
);

96 
a˘
->
Êags
 |
ONLY_ONCE_FLAG
;

98 
	}
}

100 
a˘i⁄_t
 *

101 
	$ls˝u_m©ch_a˘i⁄
(*
löe
)

103 
a˘i⁄_t
 
a˘i⁄s
[] = {

104 { "CPU(s)", 
num_˝us
, 0, 0 },

105 { "Thªad(sË≥∏c‹e", 
thªads_≥r_c‹e
, 0, 0 },

106 { "C‹e(sË≥∏sockë", 
c‹es_≥r_sockë
, 0, 0 },

107 { "NUMAÇode(s)", 
numa_nodes
, 0, 0 },

108 { "CPU MHz", 
˝u_mhz
, 0, 0 },

109 { "NUMAÇode0 CPU(s)", 
numa_nodeX_˝us
, 0, 0 },

110 { "NUMAÇode1 CPU(s)", 
numa_nodeX_˝us
, 1, 0 },

111 { "NUMAÇode2 CPU(s)", 
numa_nodeX_˝us
, 2, 0 },

112 { "NUMAÇode3 CPU(s)", 
numa_nodeX_˝us
, 3, 0 },

113 { 
NULL
, NULL, 0, 0 }

115 
a˘i⁄_t
 *
a˘
;

117 
a˘
 = 
a˘i⁄s
;á˘->
°r
 !
NULL
; ++act)

118 i‡(
	`°∫cmp
(
a˘
->
°r
, 
löe
, 
	`°æí
(act->str)) == 0)

121  
a˘
;

122 
	}
}

124 
a˘i⁄_t
 *

125 
	$˝u_¥oc_m©ch_a˘i⁄
(*
löe
)

127 
a˘i⁄_t
 
a˘i⁄s
[] = {

128 { "ˇchêsize", 
ˇche_size
, 0, 0 },

129 { "modñÇame", 
modñ_«me
, 0, 0 },

130 { "Êags", 
˝u_Êags
, 0, 0 },

131 { 
NULL
, NULL, 0, 0 }

133 
a˘i⁄_t
 *
a˘
;

135 
a˘
 = 
a˘i⁄s
;á˘->
°r
 !
NULL
; ++act)

136 i‡(
	`°∫cmp
(
a˘
->
°r
, 
löe
, 
	`°æí
(act->str)) == 0)

139  
a˘
;

140 
	}
}

143 
	$ls˝u_öfo_gë
(c⁄° *
ls˝u_∑th
)

145 
FILE
 *
f
 = 
	`p›í
(
ls˝u_∑th
, "r");

146 *
löe
 = 
NULL
, *
p
;

147 
a˘i⁄_t
 *
a˘
;

148 
size_t
 
löe_size
;

150 i‡(
f
 =
NULL
) {

151 
	`¥ötf
("UnableÅoÑun 'lscpu' command\n");

155 
löe_size
 = 0;

156 
	`gëlöe
(&
löe
, &
löe_size
, 
f
) > 0) {

157 
löe
[
	`°æí
(line) - 1] = '\0';

158 
a˘
 = 
	`ls˝u_m©ch_a˘i⁄
(
löe
);

159 i‡(
a˘
->
°r
) {

160 
p
 = 
	`°rchr
(
löe
, ':');

161 i‡(
p
)Ö++;

162 
a˘
->
	`func
◊˘, 
	`pg_°πrim
(
p
));

166 
	`f˛o£
(
f
);

167 
	`‰ì
(
löe
);

168 
	}
}

171 
	$˝u_¥oc_öfo
(c⁄° *
¥oc_∑th
)

173 
FILE
 *
f
 = 
	`p›í
(
¥oc_∑th
, "r");

174 *
löe
 = 
NULL
, *
p
;

175 
a˘i⁄_t
 *
a˘
;

176 
size_t
 
löe_size
;

178 i‡(
f
 =
NULL
) {

179 
	`¥ötf
("UnableÅoÑun 'CPUÖroc' command\n");

183 
löe_size
 = 0;

184 
	`gëlöe
(&
löe
, &
löe_size
, 
f
) > 0) {

185 
löe
[
	`°æí
(line) - 1] = '\0';

186 
a˘
 = 
	`˝u_¥oc_m©ch_a˘i⁄
(
löe
);

187 i‡(
a˘
->
°r
) {

188 
p
 = 
	`°rchr
(
löe
, ':');

189 i‡(
p
)Ö++;

190 
a˘
->
	`func
◊˘, 
	`pg_°πrim
(
p
));

194 
	`f˛o£
(
f
);

195 
	`‰ì
(
löe
);

196 
	}
}

198 
ls˝u_t
 *

199 
	$ls˝u_öfo
(c⁄° *
ls˝u_∑th
, c⁄° *
¥oc_∑th
)

201 i‡(
ls˝u
 =
NULL
)

202 
ls˝u
 = 
	`ˇŒoc
(1, (
ls˝u_t
));

204 i‡(
ls˝u_∑th
 =
NULL
)

205 
ls˝u_∑th
 = 
LSCPU_PATH
;

206 i‡(
¥oc_∑th
 =
NULL
)

207 
¥oc_∑th
 = 
CPU_PROC_PATH
;

209 
	`ls˝u_öfo_gë
(
ls˝u_∑th
);

210 
	`˝u_¥oc_öfo
(
¥oc_∑th
);

212  
ls˝u
;

213 
	}
}

	@lib/common/lscpu.h

9 #i‚de‡
__LSCPU_H


10 
	#__LSCPU_H


	)

12 
	sa˘i⁄_s
 {

13 c⁄° *
	m°r
;

14 (*
	mfunc
)(
a˘i⁄_s
 *
	ma˘i⁄
, *
	mlöe
);

15 
	m¨g
;

16 
	mÊags
;

17 } 
	ta˘i⁄_t
;

19 
	#ONLY_ONCE_FLAG
 0x0001

	)

21 
	#MAX_LINE_SIZE
 1024

	)

24 
	mnum_˝us
;

25 
	mthªads_≥r_c‹e
;

26 
	mc‹es_≥r_sockë
;

27 
	mnuma_nodes
;

28 *
	m˝u_mhz
;

29 *
	mmodñ_«me
;

30 *
	m˝u_Êags
;

31 *
	mˇche_size
;

33 
	mnuma_˝us
[
RTE_MAX_NUMA_NODES
][
RTE_MAX_LCORE
];

34 } 
	tls˝u_t
;

36 
	#LSCPU_PATH
 "/u§/bö/ls˝u"

	)

37 
	#CPU_PROC_PATH
 "ˇà/¥oc/˝uöfo"

	)

39 
ls˝u_t
 *
ls˝u_öfo
(c⁄° *
ls˝u_∑th
, c⁄° *
¥oc_∑th
);

	@lib/common/mbuf.h

7 #i‚de‡
_MBUF_H_


8 
	#_MBUF_H_


	)

10 #ifde‡
__˝lu•lus


14 
ölöe
 

15 
pktmbuf_ª£t
(
πe_mbuf
 *
m
)

17 
m
->
√xt
 = 
NULL
;

18 
m
->
nb_£gs
 = 1;

19 
m
->
p‹t
 = 0xff;

21 
m
->
d©a_Àn
 = m->
pkt_Àn
;

22 
m
->
d©a_off
 = (
RTE_PKTMBUF_HEADROOM
 <m->
buf_Àn
) ?

23 
RTE_PKTMBUF_HEADROOM
 : 
m
->
buf_Àn
;

39 
ölöe
 

40 
pg_pktmbuf_Æloc_bulk
(
πe_mempoﬁ
 *
poﬁ
,

41 
πe_mbuf
 **
mbufs
, 
cou¡
)

43 
idx
 = 0;

44 
rc
;

46 
rc
 = 
πe_mempoﬁ_gë_bulk
(
poﬁ
, (* *)
mbufs
, 
cou¡
);

47 i‡(
u∆ikñy
(
rc
))

48  
rc
;

55 
cou¡
 % 4) {

57 
idx
 !
cou¡
) {

58 
πe_mbuf_ªf˙t_£t
(
mbufs
[
idx
], 1);

59 
pktmbuf_ª£t
(
mbufs
[
idx
]);

60 
idx
++;

63 
πe_mbuf_ªf˙t_£t
(
mbufs
[
idx
], 1);

64 
pktmbuf_ª£t
(
mbufs
[
idx
]);

65 
idx
++;

68 
πe_mbuf_ªf˙t_£t
(
mbufs
[
idx
], 1);

69 
pktmbuf_ª£t
(
mbufs
[
idx
]);

70 
idx
++;

73 
πe_mbuf_ªf˙t_£t
(
mbufs
[
idx
], 1);

74 
pktmbuf_ª£t
(
mbufs
[
idx
]);

75 
idx
++;

81 #ifde‡
__˝lu•lus


	@lib/common/pg_ether.h

9 #i‚de‡
_ETHER_H_


10 
	#_ETHER_H_


	)

18 #ifde‡
__˝lu•lus


21 
	~<πe_ëhî.h
>

35 
ölöe
 
ëhî_addr
 *

36 
πe_ëhî_©⁄
(c⁄° *
a
, 
ëhî_addr
 *
e
)

38 
i
;

39 *
íd
;

40 
o
[
ETHER_ADDR_LEN
];

41 
ëhî_addr
Éther_addr;

43 i‡(!
e
)

44 
e
 = &
ëhî_addr
;

46 
i
 = 0;

48 
î∫o
 = 0;

49 
o
[
i
] = 
°πoul
(
a
, &
íd
, 16);

50 i‡(
î∫o
 !0 || 
íd
 =
a
 || (end[0] != ':' &&Énd[0] != 0))

51  
NULL
;

52 
a
 = 
íd
 + 1;

53 } ++
i
 ! (
o
Ë/  (o[0]Ë&& 
íd
[0] != 0);

56 i‡(
íd
[0] != 0)

57  
NULL
;

60 i‡(
i
 =
ETHER_ADDR_LEN
) {

61 
i
-- != 0) {

62 i‡(
o
[
i
] > 
UINT8_MAX
)

63  
NULL
;

64 
e
->
addr_byãs
[
i
] = (
uöt8_t
)
o
[i];

67 } i‡(
i
 =
ETHER_ADDR_LEN
 / 2) {

68 
i
-- != 0) {

69 i‡(
o
[
i
] > 
UINT16_MAX
)

70  
NULL
;

71 
e
->
addr_byãs
[
i
 * 2] = (
uöt8_t
)(
o
[i] >> 8);

72 
e
->
addr_byãs
[
i
 * 2 + 1] = (
uöt8_t
)(
o
[i] & 0xff);

76  
NULL
;

78  
e
;

82 #ifde‡
__˝lu•lus


	@lib/common/pg_inet.c

9 
	~<°dio.h
>

10 
	~<°döt.h
>

12 
	~<πe_vîsi⁄.h
>

13 
	~<πe_mbuf.h
>

14 #i‡
RTE_VERSION
 >
RTE_VERSION_NUM
(17,2,0,0)

15 
	~<πe_mbuf_±y≥.h
>

17 
	~<πe_byã‹dî.h
>

18 
	~<πe_ëhî.h
>

19 
	~<πe_ù.h
>

20 
	~<πe_t˝.h
>

21 
	~<πe_udp.h
>

23 
	~"pg_öë.h
"

	@lib/common/pg_inet.h

8 #i‚de‡
_PG_INET_H


9 
	#_PG_INET_H


	)

11 
	#IPv4_VERSION
 4

	)

12 
	#IPv6_VERSION
 6

	)

14 #ifde‡
RTE_MACHINE_CPUFLAG_SSE4_2


15 
	~<nmmöåö.h
>

17 
	~<πe_jhash.h
>

19 
	~<°dio.h
>

20 
	~<°döt.h
>

22 
	~<¨∑/öë.h
>

24 
	~<πe_ëhî.h
>

26 #ifde‡
__˝lu•lus


30 
	#PG_IPADDR_V4
 0x01

	)

31 
	#PG_IPADDR_V6
 0x02

	)

32 
	#PG_IPADDR_NETWORK
 0x04

	)

34 
	#PG_INADDRSZ
 4

	)

35 
	#PG_IN6ADDRSZ
 16

	)

36 
	#PG_PREFIXMAX
 128

	)

37 
	#PG_V4PREFIXMAX
 32

	)

39 
	spg_ùaddr
 {

40 
uöt8_t
 
Ámûy
;

42 
ö_addr
 
ùv4
;

43 
ö6_addr
 
ùv6
;

45 
¥efixÀn
;

69 
	sùHdr_s
 {

70 
uöt8_t
 
vl
;

71 
uöt8_t
 
tos
;

72 
uöt16_t
 
éí
;

73 
uöt16_t
 
idít
;

74 
uöt16_t
 
f‰ag
;

75 
uöt8_t
 
âl
;

76 
uöt8_t
 
¥Ÿo
;

77 
uöt16_t
 
cksum
;

78 
uöt32_t
 
§c
;

79 
uöt32_t
 
d°
;

80 } 
	t__©åibuã__
((
	t__∑cked__
)Ë
	tùHdr_t
;

82 
	#PG_ISFRAG
(
off
Ë((offË& (
PG_OFF_MF
 | 
PG_OFF_MASK
))

	)

83 
	#PG_OFF_MASK
 0x1fff

	)

84 
	#PG_OFF_MF
 0x2000

	)

85 
	#PG_OFF_DF
 0x4000

	)

111 
	sùv6Hdr_s
 {

112 
uöt32_t
 
vî_tc_Ê
;

113 
uöt16_t
 
∑ylﬂd_Àngth
;

114 
uöt8_t
 
√xt_hódî
;

115 
uöt8_t
 
h›_limô
;

116 
uöt8_t
 
ßddr
[16];

117 
uöt8_t
 
daddr
[16];

118 } 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	tùv6Hdr_t
;

135 
	#PG_IPPROTO_NONE
 0

	)

136 
	#PG_IPPROTO_IP
 
IPPROTO_IP


	)

137 
	#PG_IPPROTO_ICMP
 
IPPROTO_ICMP


	)

138 
	#PG_IPPROTO_IGMP
 
IPPROTO_IGMP


	)

139 
	#PG_IPPROTO_IPV4
 
IPPROTO_IPV4


	)

140 
	#PG_IPPROTO_TCP
 
IPPROTO_TCP


	)

141 
	#PG_IPPROTO_UDP
 
IPPROTO_UDP


	)

142 
	#PG_IPPROTO_IPV6
 
IPPROTO_IPV6


	)

143 
	#PG_IPPROTO_IPV6_ROUTE
 43

	)

144 
	#PG_IPPROTO_IPV6_FRAG
 44

	)

145 
	#PG_IPPROTO_GRE
 
IPPROTO_GRE


	)

146 
	#PG_IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

147 
	#PG_IPPROTO_IPV6_ICMP
 
IPPROTO_ICMPV6


	)

148 
	#PG_IPPROTO_IPV6_NONXT
 59

	)

149 
	#PG_IPPROTO_IPV6_OPTS
 60

	)

150 
	#PG_IPPROTO_RAW
 
IPPROTO_RAW


	)

151 
	#PG_IPPROTO_USR_DEF
 255

	)

152 
	#PG_IPPROTO_MAX
 256

	)

154 
	#PG_IPPROTO_L4_GTPU_PORT
 2152

	)

156 
	#IPv4
(
a
, 
b
, 
c
, 
d
Ë((
uöt32_t
)(((a) & 0xff) << 24) | \

157 (((
b
) & 0xff) << 16) | \

158 (((
c
) & 0xff) << 8) | \

159 ((
d
Ë& 0xff))

	)

179 
	#GTPu_VERSION
 0x20

	)

180 
	#GTPu_PT_FLAG
 0x10

	)

181 
	#GTPu_E_FLAG
 0x04

	)

182 
	#GTPu_S_FLAG
 0x02

	)

183 
	#GTPu_PN_FLAG
 0x01

	)

185 
	sgçuHdr_s
 {

186 
uöt8_t
 
vîsi⁄_Êags
;

187 
uöt8_t
 
msg_ty≥
;

188 
uöt16_t
 
tŸ_Àn
;

189 
uöt32_t
 
ãid
;

193 } 
	t__©åibuã__
((
	t__∑cked__
)Ë
	tgçuHdr_t
;

196 
	sùOvîœy_s
 {

197 
uöt32_t
 
node
[2];

198 
uöt8_t
 
∑d0
;

199 
uöt8_t
 
¥Ÿo
;

200 
uöt16_t
 
Àn
;

201 
uöt32_t
 
§c
;

202 
uöt32_t
 
d°
;

203 } 
	t__©åibuã__
((
	t__∑cked__
)Ë
	tùOvîœy_t
;

205 
	sùv6Ovîœy_s
 {

206 
uöt8_t
 
ßddr
[16];

207 
uöt8_t
 
daddr
[16];

208 
uöt32_t
 
t˝_Àngth
;

209 
uöt16_t
 
zîo
;

210 
uöt8_t
 
∑d
;

211 
uöt8_t
 
√xt_hódî
;

212 } 
	t__©åibuã__
((
	t__∑cked__
)Ë
	tùv6Ovîœy_t
;

214 
	t£q_t
;

217 
	sudpHdr_s
 {

218 
uöt16_t
 
•‹t
;

219 
uöt16_t
 
dp‹t
;

220 
uöt16_t
 
Àn
;

221 
uöt16_t
 
cksum
;

222 } 
	t__©åibuã__
((
	t__∑cked__
)Ë
	tudpHdr_t
;

225 
	sudpù_s
 {

226 
ùOvîœy_t
 
ù
;

227 
udpHdr_t
 
udp
;

228 } 
	t__©åibuã__
((
	t__∑cked__
)Ë
	tudpù_t
;

231 
	sgçuUdpIp_s
 {

232 
ùOvîœy_t
 
ù
;

233 
udpHdr_t
 
udp
;

234 
gçuHdr_t
 
gçu
;

235 } 
	t__©åibuã__
((
	t__∑cked__
)Ë
	tgçuUdpIp_t
;

238 
	sudpùv6_s
 {

239 
ùv6Ovîœy_t
 
ù
;

240 
udpHdr_t
 
udp
;

241 } 
	t__©åibuã__
((
	t__∑cked__
)Ë
	tudpùv6_t
;

267 
	st˝Hdr_s
 {

268 
uöt16_t
 
•‹t
;

269 
uöt16_t
 
dp‹t
;

270 
£q_t
 
£q
;

271 
£q_t
 
ack
;

272 
uöt8_t
 
off£t
;

273 
uöt8_t
 
Êags
;

274 
uöt16_t
 
wödow
;

275 
uöt16_t
 
cksum
;

276 
uöt16_t
 
urgít
;

277 
uöt8_t
 
›ts
[0];

278 } 
	t__©åibuã__
((
	t__∑cked__
)Ë
	tt˝Hdr_t
;

280 íum { 
URG_FLAG
 = 0x20, 
ACK_FLAG
 = 0x10, 
PSH_FLAG
 = 0x08, 
RST_FLAG
 = 0x04,

281 
SYN_FLAG
 = 0x02, 
FIN_FLAG
 = 0x01 };

284 
	st˝ù_s
 {

285 
ùOvîœy_t
 
ù
;

286 
t˝Hdr_t
 
t˝
;

287 } 
	t__©åibuã__
((
	t__∑cked__
)Ë
	tt˝ù_t
;

290 
	sgçuT˝Ip_s
 {

291 
ùOvîœy_t
 
ù
;

292 
t˝Hdr_t
 
t˝
;

293 
gçuHdr_t
 
gçu
;

294 } 
	t__©åibuã__
((
	t__∑cked__
)Ë
	tgçuT˝Ip_t
;

297 
	st˝ùv6_s
 {

298 
ùv6Ovîœy_t
 
ù
;

299 
t˝Hdr_t
 
t˝
;

300 } 
	t__©åibuã__
((
	t__∑cked__
)Ë
	tt˝ùv6_t
;

303 
	sicmpv4Hdr_s
 {

304 
uöt8_t
 
ty≥
;

305 
uöt8_t
 
code
;

306 
uöt16_t
 
cksum
;

310 
uöt16_t
 
idít
;

311 
uöt16_t
 
£q
;

312 
uöt32_t
 
d©a
;

313 } 
echo
;

316 
uöt32_t
 
g©eway
;

317 
uöt16_t
 
ù
[10];

318 
uöt16_t
 
å™•‹t
[4];

319 } 
ªdúe˘
;

322 
uöt32_t
 
√xtH›Mtu
;

323 
uöt16_t
 
ù
[10];

324 
uöt16_t
 
å™•‹t
[4];

325 } 
Áûög_pkt
;

328 
uöt16_t
 
idít
;

329 
uöt16_t
 
£q
;

330 
uöt32_t
 
‹igö©e
;

331 
uöt32_t
 
ª˚ive
;

332 
uöt32_t
 
å™smô
;

333 } 
time°amp
;

336 
uöt32_t
 
mu…iˇ°
;

337 
uöt8_t
 
s_qrv
;

338 
uöt8_t
 
qqic
;

339 
uöt16_t
 
numbîOfSour˚s
;

340 
uöt16_t
 
sour˚_addr
[1];

341 } 
igmp
;

344 
uöt8_t
 
poöãr
;

345 
uöt8_t
 
unu£d
[3];

346 } 
∑øm
;

349 
uöt8_t
 
numAddrs
;

350 
uöt8_t
 
addrE¡rySize
;

351 
uöt16_t
 
li„time
;

352 
uöt32_t
 
advît
[1];

353 } 
advîti£
;

357 
uöt16_t
 
idít
;

358 
uöt16_t
 
£q
;

359 
uöt32_t
 
dmask
;

360 } 
mask
;

361 } 
d©a
;

362 } 
	t__©åibuã__
((
	t__∑cked__
)Ë
	ticmpv4Hdr_t
;

364 
	#ICMP4_TIMESTAMP_SIZE
 12

	)

367 
	#ICMP4_ECHO_REPLY
 0

	)

368 
	#ICMP4_DEST_UNREACHABLE
 3

	)

369 
	#ICMP4_SOURCE_QUENCH
 4

	)

370 
	#ICMP4_REDIRECT
 5

	)

371 
	#ICMP4_ECHO
 8

	)

372 
	#ICMP4_ROUTER_ADVERT
 9

	)

373 
	#ICMP4_ROUTER_SOLICIT
 10

	)

374 
	#ICMP4_TIME_EXCEEDED
 11

	)

375 
	#ICMP4_PARAMETER_PROBLEM
 12

	)

376 
	#ICMP4_TIMESTAMP
 13

	)

377 
	#ICMP4_TIMESTAMP_REPLY
 14

	)

378 
	#ICMP4_INFO_REQUEST
 15

	)

379 
	#ICMP4_INFO_REPLY
 16

	)

380 
	#ICMP4_MASK_REQUEST
 17

	)

381 
	#ICMP4_MASK_REPLY
 18

	)

401 
	#MPLS_SET_BOS
(
m∂s_œbñ
Ëdÿ{ m∂s_œbñ |(1 << 8); } (0))

	)

402 
	#MPLS_CLR_BOS
(
m∂s_œbñ
Ëdÿ{ m∂s_œbñ &~(1 << 8); } (0))

	)

404 
	sm∂sHdr_s
 {

405 
uöt32_t
 
œbñ
;

406 } 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	tm∂sHdr_t
;

425 
	sqöqHdr_s
 {

426 
uöt16_t
 
qöq_tci
;

427 
uöt16_t
 
vœn_çid
;

428 
uöt16_t
 
vœn_tci
;

429 
uöt16_t
 
ëh_¥Ÿo
;

430 } 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	tqöqHdr_t
;

464 
	sgªHdr_s
 {

465 
uöt8_t
 
ª£rved0_0
 : 4;

466 
uöt8_t
 
£q_¥e£¡
 : 1;

467 
uöt8_t
 
key_¥e£¡
 : 1;

468 
uöt8_t
 
unu£d
 : 1;

469 
uöt8_t
 
chk_¥e£¡
 : 1;

470 
uöt8_t
 
vîsi⁄
 : 3;

471 
uöt8_t
 
ª£rved0_1
 : 5;

472 
uöt16_t
 
ëh_ty≥
;

473 
uöt32_t
 
exåa_fõlds
[3];

474 } 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	tgªHdr_t
;

477 
	sgªIp_s
 {

478 
ùHdr_t
 
ù
;

479 
gªHdr_t
 
gª
;

480 } 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	tgªIp_t
;

483 
	sgªEthî_s
 {

484 
ùHdr_t
 
ù
;

485 
gªHdr_t
 
gª
;

486 
ëhî_hdr
 
ëhî
;

487 } 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	tgªEthî_t
;

490 
	#ETH_HW_TYPE
 1

	)

491 
	#ETH_HDR_SIZE
 14

	)

492 
	#ETH_ADDR_SIZE
 6

	)

493 
	#ETH_MTU
 1500

	)

494 
	#ETH_MAX_PKT
 1518

	)

495 
	#ETH_MIN_PKT
 60

	)

496 
	#IPV6_ADDR_LEN
 16

	)

498 
	#ETH_VLAN_ENCAP_LEN
 4

	)

501 
	#ETHER_TYPE_MPLS_UNICAST
 0x8847

	)

502 
	#ETHER_TYPE_MPLS_MULTICAST
 0x8848

	)

504 
	#ETHER_TYPE_Q_IN_Q
 0x88A8

	)

505 
	#ETHER_TYPE_TRANSP_ETH_BR
 0x6558

	)

508 íum { 
ARP_REQUEST
 = 1, 
ARP_REPLY
 = 2, 
RARP_REQUEST
 = 3, 
RARP_REPLY
 = 4,

509 
GRATUITOUS_ARP
 = 5 };

512 
uöt16_t
 
_16
[3];

513 
uöt8_t
 
_8
[6];

514 } 
	tmac_e
;

517 
uöt16_t
 
_16
[2];

518 
uöt32_t
 
_32
;

519 } 
	tù4_e
;

522 
	s¨pPkt_s
 {

523 
uöt16_t
 
hrd
;

524 
uöt16_t
 
¥o
;

525 
uöt8_t
 
h 
;

526 
uöt8_t
 
∂n
;

527 
uöt16_t
 
›
;

528 
mac_e
 
sha
;

529 
ù4_e
 
•a
;

530 
mac_e
 
tha
;

531 
ù4_e
 
ça
;

532 } 
	t__©åibuã__
((
	t__∑cked__
)Ë
	t¨pPkt_t
;

534 
	spkt_hdr_s
 {

535 
ëhî_hdr
 
ëh
;

537 
ùHdr_t
 
ùv4
;

538 
ùv6Hdr_t
 
ùv6
;

539 
t˝ù_t
 
tù
;

540 
udpù_t
 
uù
;

541 
gçuUdpIp_t
 
guù
;

542 
icmpv4Hdr_t
 
icmp
;

543 
t˝ùv6_t
 
tù6
;

544 
udpùv6_t
 
uù6
;

545 
uöt64_t
 
∑d
[8];

546 } 
u
;

547 } 
	t__©åibuã__
((
	t__∑cked__
)Ë
	tpkt_hdr_t
;

549 
	sùv4_5tu∂e
 {

550 
uöt32_t
 
ù_d°
;

551 
uöt32_t
 
ù_§c
;

552 
uöt16_t
 
p‹t_d°
;

553 
uöt16_t
 
p‹t_§c
;

554 
uöt8_t
 
¥Ÿo
;

555 } 
	t__©åibuã__
((
	t__∑cked__
)Ë
	tùv4_5tu∂e_t
;

557 
	sl3_4rouã_s
 {

558 
ùv4_5tu∂e_t
 
key
;

559 
uöt8_t
 
ifid
;

560 } 
	t__©åibuã__
 ((
	t∑cked
)Ë
	tl3_4rouã_t
;

562 
	sùv6_5tu∂e_s
 {

563 
uöt8_t
 
d°
[
IPV6_ADDR_LEN
];

564 
uöt8_t
 
§c
[
IPV6_ADDR_LEN
];

565 
uöt16_t
 
•‹t
;

566 
uöt16_t
 
dp‹t
;

567 
uöt8_t
 
¥Ÿo
;

568 } 
	t__©åibuã__
 ((
	t∑cked
)Ë
	tùv6_5tu∂e_t
;

570 
	sl3_6rouã_s
 {

571 
ùv6_5tu∂e_t
 
key
;

572 
uöt8_t
 
ifid
;

573 } 
	t__©åibuã__
 ((
	t∑cked
)Ë
	tl3_6rouã_t
;

588 
ölöe
 
uöt32_t


589 
πe_hash6_¸c
(c⁄° *
d©a
,

590 
__©åibuã__
 ((
unu£d
)Ë
uöt32_t
 
d©a_Àn
, uöt32_à
öô_vÆ
)

592 #ifde‡
RTE_MACHINE_CPUFLAG_SSE4_2


593 c⁄° 
uöt32_t
 *
p32
 = (c⁄° uöt32_à*)
d©a
;

594 c⁄° 
uöt16_t
 
vÆ
 = *(c⁄° uöt16_à*)
p32
;

596  
_mm_¸c32_u32
(
vÆ
, _mm_¸c32_u32(*
p32
++, 
öô_vÆ
));

598  
πe_jhash
(
d©a
, 
d©a_Àn
, 
öô_vÆ
);

603 
__ölöe__
 

604 
ëhAddrC›y
(*
t
, *
f
) {

605 
uöt16_t
 *
d
 = (uöt16_à*)
t
;

606 
uöt16_t
 *
s
 = (uöt16_à*)
f
;

608 *
d
++ = *
s
++; *d++ = *s++; *d = *s;

612 
__ölöe__
 

613 
uöt16Sw≠
(*
t
, *
f
) {

614 
uöt16_t
 *
d
 = (uöt16_à*)
t
;

615 
uöt16_t
 *
s
 = (uöt16_à*)
f
;

616 
uöt16_t
 
v
;

618 
v
 = *
d
; *d = *
s
; *s = v;

622 
__ölöe__
 

623 
ëhAddrSw≠
(*
t
, *
f
) {

624 
uöt16_t
 *
d
 = (uöt16_à*)
t
;

625 
uöt16_t
 *
s
 = (uöt16_à*)
f
;

627 
uöt16Sw≠
(
d
++, 
s
++);

628 
uöt16Sw≠
(
d
++, 
s
++);

629 
uöt16Sw≠
(
d
, 
s
);

633 
__ölöe__
 

634 
öëAddrC›y
(*
t
, *
f
) {

635 
uöt32_t
 *
d
 = (uöt32_à*)
t
;

636 
uöt32_t
 *
s
 = (uöt32_à*)
f
;

638 *
d
 = *
s
;

642 
__ölöe__
 

643 
öëAddrSw≠
(*
t
, *
f
) {

644 
uöt32_t
 *
d
 = (uöt32_à*)
t
;

645 
uöt32_t
 *
s
 = (uöt32_à*)
f
;

646 
uöt32_t
 
v
;

648 
v
 = *
d
; *d = *
s
; *s = v;

652 
__ölöe__
 

653 
mask_size
(
uöt32_t
 
mask
) {

654 i‡(
mask
 == 0)

656 i‡(
mask
 == 0xFF000000)

658 i‡(
mask
 == 0xFFFF0000)

660 i‡(
mask
 == 0xFFFFFF00)

662 i‡(
mask
 == 0xFFFFFFFF)

665 
i
;

666 
i
 = 0; i < 32; i++)

667 i‡–(
mask
 & (1 << (31 - 
i
))) == 0)

669  
i
;

674 
__ölöe__
 
uöt32_t


675 
size_to_mask
(
Àn
) {

676 
uöt32_t
 
mask
 = 0;

678 i‡(
Àn
 == 0)

679 
mask
 = 0x00000000;

680 i‡(
Àn
 == 8)

681 
mask
 = 0xFF000000;

682 i‡(
Àn
 == 16)

683 
mask
 = 0xFFFF0000;

684 i‡(
Àn
 == 24)

685 
mask
 = 0xFFFFFF00;

686 i‡(
Àn
 == 32)

687 
mask
 = 0xFFFFFFFF;

689 
i
;

691 
i
 = 0; i < 
Àn
; i++)

692 
mask
 |(1 << (31 - 
i
));

694  
mask
;

698 
__ölöe__
 *

699 
öë_¡›4
(*
buff
, 
Àn
, 
ù_addr
, 
mask
) {

700 
lbuf
[64];

702 
öë_¡›
(
AF_INET
, &
ù_addr
, 
buff
, 
Àn
);

703 i‡(
mask
 != 0xFFFFFFFF) {

704 
¢¥ötf
(
lbuf
, ÷buf), "%s/%d", 
buff
, 
mask_size
(
mask
));

705 
°∫˝y
(
buff
, 
lbuf
, 
Àn
);

707  
buff
;

710 
__ölöe__
 const *

711 
öë_¡›6
(*
buff
, 
Àn
, 
uöt8_t
 *
ù6
) {

712  
öë_¡›
(
AF_INET6
, 
ù6
, 
buff
, 
Àn
);

716 
__ölöe__
 *

717 
öë_mtﬂ
(*
buff
, 
Àn
, 
ëhî_addr
 *
óddr
) {

718 
¢¥ötf
(
buff
, 
Àn
, "%02x:%02x:%02x:%02x:%02x:%02x",

719 
óddr
->
addr_byãs
[0],Éaddr->addr_bytes[1],

720 
óddr
->
addr_byãs
[2],Éaddr->addr_bytes[3],

721 
óddr
->
addr_byãs
[4],Éaddr->addr_bytes[5]);

722  
buff
;

726 
__ölöe__
 
uöt64_t


727 
öë_mtoh64
(
ëhî_addr
 *
óddr
, 
uöt64_t
 *
vÆue
) {

728 *
vÆue
 = ((
uöt64_t
)
óddr
->
addr_byãs
[5] << 0)

729 + ((
uöt64_t
)
óddr
->
addr_byãs
[4] << 8)

730 + ((
uöt64_t
)
óddr
->
addr_byãs
[3] << 16)

731 + ((
uöt64_t
)
óddr
->
addr_byãs
[2] << 24)

732 + ((
uöt64_t
)
óddr
->
addr_byãs
[1] << 32)

733 + ((
uöt64_t
)
óddr
->
addr_byãs
[0] << 40);

734  *
vÆue
;

738 
__ölöe__
 
ëhî_addr
 *

739 
öë_h64tom
(
uöt64_t
 
vÆue
, 
ëhî_addr
 *
óddr
) {

740 
óddr
->
addr_byãs
[5] = ((
vÆue
 >> 0) & 0xFF);

741 
óddr
->
addr_byãs
[4] = ((
vÆue
 >> 8) & 0xFF);

742 
óddr
->
addr_byãs
[3] = ((
vÆue
 >> 16) & 0xFF);

743 
óddr
->
addr_byãs
[2] = ((
vÆue
 >> 24) & 0xFF);

744 
óddr
->
addr_byãs
[1] = ((
vÆue
 >> 32) & 0xFF);

745 
óddr
->
addr_byãs
[0] = ((
vÆue
 >> 40) & 0xFF);

746  
óddr
;

763 
πe_©où
(c⁄° *
buf
, 
Êags
, *
ªs
, 
ªssize
);

765 #ifde‡
__˝lu•lus


	@lib/common/port_config.c

9 
	#_GNU_SOURCE


	)

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°döt.h
>

13 
	~<öây≥s.h
>

14 
	~<sys/ty≥s.h
>

15 
	~<uni°d.h
>

16 
	~<°rög.h
>

17 
	~<°d¨g.h
>

18 
	~<˘y≥.h
>

20 
	~<πe_vîsi⁄.h
>

21 
	~<πe_c⁄fig.h
>

22 
	~<πe_lc‹e.h
>

23 
	~<πe_©omic.h
>

24 
	~<πe_cy˛es.h
>

25 
	~<πe_pci.h
>

26 
	~<πe_dev¨gs.h
>

27 
	~<πe_debug.h
>

29 
	~"p‹t_c⁄fig.h
"

30 
	~"c‹e_öfo.h
"

32 
	#PORT_STRING_SIZE
 256

	)

46 
uöt32_t


47 
	$gë_p‹tdesc
(
πe_pci_addr
 *
pciAddr
,

48 
uöt8_t
 **
p‹tdesc
,

49 
uöt32_t
 
num
,

50 
vîbo£
)

52 
FILE
 *
fd
;

53 
uöt32_t
 
idx
;

54 
buff
[
PORT_STRING_SIZE
], *
p
;

56 i‡–(
num
 <0Ë|| (
pciAddr
 =
NULL
Ë|| (
p‹tdesc
 == NULL) )

60 
fd
 = 
	`p›í
("lspci -D | grep Ethernet", "r");

61 i‡(
fd
 =
NULL
)

62 
	`πe_∑nic
("*** UnableÅo doÜspci mayÇeedÅo be installed");

64 i‡(
vîbo£
)

65 
	`Ârötf
(
°dout
, "\n** Bit Mask: AllÖorts in system\n");

67 
idx
 = 0;

68 
	`fgës
(
buff
, (buff), 
fd
) ) {

69 
p
 = &
buff
[0];

72 
p
[
	`°æí
(
buff
) - 1] = 0;

75 
pciAddr
[
idx
].
domaö
 = 
	`°πﬁ
(
p
, &p, 16);

76 
p
++;

77 
pciAddr
[
idx
].
bus
 = 
	`°πﬁ
(
p
, &p, 16);

78 
p
++;

79 
pciAddr
[
idx
].
devid
 = 
	`°πﬁ
(
p
, &p, 16);

80 
p
++;

81 
pciAddr
[
idx
].
fun˘i⁄
 = 
	`°πﬁ
(
p
, &p, 16);

83 i‡(
vîbo£
)

84 
	`Ârötf
(
°dout
, " 0x%016Œx: %s\n", (1ULL << 
idx
),

85 
buff
);

88 i‡(
p‹tdesc
) {

89 c⁄° *
s
 = "ethernet controller";

90 
n
 = 
	`°æí
(
s
);

92 
p
 = 
	`°rˇ£°r
(
buff
, 
s
);

93 i‡(
p
)

94 
	`memmove
(
p
,Ö + 
n
, (
	`°æí
(
buff
) - ((p - buff) +Ç)) + 1);

95 
p
 = 
	`°rˇ£°r
(
buff
, 
s
);

96 
n
++;

97 i‡(
p
)

98 
	`memmove
(
p
,Ö + 
n
, (
	`°æí
(
buff
) - ((p - buff) +Ç)) + 1);

99 
p‹tdesc
[
idx
] = (
uöt8_t
 *)
	`°rdup
(
buff
);

101 i‡(++
idx
 >
num
)

105 
	`p˛o£
(
fd
);

106 i‡(
vîbo£
)

107 
	`Ârötf
(
°dout
, "\nFound %dÖ‹ts\n", 
idx
);

109  
idx
;

110 
	}
}

125 
	$‰ì_p‹tdesc
(
uöt8_t
 **
p‹tdesc
, 
uöt32_t
 
num
)

127 
uöt32_t
 
i
;

129 
i
 = 0; i < 
num
; i++) {

130 i‡(
p‹tdesc
[
i
])

131 
	`‰ì
((*)
p‹tdesc
[
i
]);

132 
p‹tdesc
[
i
] = 
NULL
;

134 
	}
}

148 
uöt32_t


149 
	$¸óã_bœckli°
(
uöt64_t
 
p‹tmask
,

150 
πe_pci_addr
 *
p‹éi°
,

151 
uöt32_t
 
p‹t_˙t
,

152 
uöt8_t
 *
desc
[]) {

153 
uöt32_t
 
i
, 
idx
;

154 
pci_addr_°r
[32];

156 i‡–(
p‹tmask
 =0Ë|| (
p‹éi°
 =
NULL
Ë|| (
p‹t_˙t
 == 0) ||

157 (
desc
 =
NULL
) )

160 
	`Ârötf
(
°dout
,

161 "P‹ts: P‹àMask: %016" 
PRIx64
 " blacklisted = --,Çot-blacklisted = ++\n",

162 
p‹tmask
);

163 
idx
 = 0;

164 
i
 = 0; i < 
p‹t_˙t
; i++) {

165 
	`mem£t
(
pci_addr_°r
, 0, (pci_addr_str));

166 i‡–(
p‹tmask
 & (1ULL << 
i
)) == 0) {

167 
	`Ârötf
(
°dout
, "-- %s\n", 
desc
[
i
]);

168 
	`°∫˝y
(
pci_addr_°r
, (*)
desc
[
i
], 12);

169 
	`πe_ól_dev¨gs_add
(
RTE_DEVTYPE_BLACKLISTED_PCI
,

170 
pci_addr_°r
);

171 
idx
++;

173 
	`°∫˝y
(
pci_addr_°r
, (*)
desc
[
i
], 12);

174 
	`πe_ól_dev¨gs_add
(
RTE_DEVTYPE_WHITELISTED_PCI
,

175 
pci_addr_°r
);

176 
	`Ârötf
(
°dout
, "++ %s\n", 
desc
[
i
]);

179 i‡(
desc
)

180 
	`Ârötf
(
°dout
, "\n");

182  
idx
;

183 
	}
}

	@lib/common/port_config.h

9 #i‚de‡
_PORT_CONFIG_H


10 
	#_PORT_CONFIG_H


	)

12 
uöt32_t
 
gë_p‹tdesc
(
πe_pci_addr
 *
pciAddr
,

13 
uöt8_t
 **
p‹tdesc
,

14 
uöt32_t
 
num
,

15 
vîbo£
);

16 
‰ì_p‹tdesc
(
uöt8_t
 **
p‹tdesc
, 
uöt32_t
 
num
);

17 
uöt32_t
 
¸óã_bœckli°
(
uöt64_t
 
p‹tmask
,

18 
πe_pci_addr
 *
p‹éi°
,

19 
uöt32_t
 
p‹t_˙t
,

20 
uöt8_t
 * 
desc
[]);

	@lib/common/utils.c

8 
	~<πe_c⁄fig.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°döt.h
>

13 
	~<öây≥s.h
>

14 
	~<sys/ty≥s.h
>

15 
	~<uni°d.h
>

16 
	~<°rög.h
>

17 
	~<sys/queue.h
>

18 
	~<√töë/ö.h
>

19 
	~<°d¨g.h
>

20 
	~<˘y≥.h
>

21 
	~<î∫o.h
>

22 
	~<gë›t.h
>

23 
	~<ãrmios.h
>

25 
	~"utûs.h
"

27 
	#MAX_PARSE_SIZE
 256

	)

48 
	$pg_°πrim
(*
°r
)

50 *
p
;

51 
Àn
;

53 i‡–(
°r
 !
NULL
Ë&& (
Àn
 = 
	`°æí
(str)) ) {

55 ; *
°r
 != 0; str++)

56 i‡–(*
°r
 != ' ') && (*str != '\t') &&

57 (*
°r
 != '\r') && (*str != '\n') )

60 
Àn
 = 
	`°æí
(
°r
);

61 i‡(
Àn
 == 0)

62  
°r
;

65 
p
 = &
°r
[
Àn
 - 1];Ö > str;Ö--) {

66 i‡–(*
p
 != ' ') && (*p != '\t') && (*p != '\r') &&

67 (*
p
 != '\n') )

69 *
p
 = '\0';

72  
°r
;

73 
	}
}

75 
uöt32_t


76 
	$pg_°Ω¨£
(*
°r
, c⁄° *
dñim
, **
íåõs
, 
uöt32_t
 
max_íåõs
)

78 
uöt32_t
 
i
;

79 *
ßved
;

81 i‡–(
°r
 =
NULL
Ë|| (
dñim
 =NULLË|| (
íåõs
 == NULL) ||

82 (
max_íåõs
 == 0) )

85 
	`mem£t
(
íåõs
, '\0', ((*Ë* 
max_íåõs
));

87 
i
 = 0; i < 
max_íåõs
; i++) {

88 
íåõs
[
i
] = 
	`°πok_r
(
°r
, 
dñim
, &
ßved
);

89 
°r
 = 
NULL
;

90 i‡(
íåõs
[
i
] =
NULL
)

93 
íåõs
[
i
] = 
	`pg_°πrim
(entries[i]);

96  
i
;

97 
	}
}

99 
uöt32_t


100 
	$skù_l°
(
f
, c⁄° *
l°
)

102 ; *
l°
 != '\n';Üst++)

103 i‡(
f
 =*
l°
)

106 
	}
}

109 
	$pg_°rc˝y
(*
t
, *
f
, c⁄° *
l°
)

111 i‡–(
t
 =
NULL
Ë|| (
f
 == NULL) )

112  
NULL
;

114 *
t
 = '\0';

115 i‡(*
f
 == '\0')

116  
t
;

118 *
f
 != '\0') {

119 i‡(
	`skù_l°
(*
f
, 
l°
) )

120 
f
++;

122 *
t
++ = *
f
++;

124 *
t
 = '\0';

125  
t
;

126 
	}
}

	@lib/common/utils.h

9 #i‚de‡
_UTILS_H_


10 
	#_UTILS_H_


	)

17 
__ölöe__
 *

18 
	$pg_°rdupf
(*
°r
, *
√w
) {

19 i‡(
°r
Ë
	`‰ì
(str);

20  (
√w
 =
NULL
Ë? NULL : 
	`°rdup
(new);

21 
	}
}

30 
__ölöe__
 *

31 
	$pg_°πrim£t
(*
°r
, c⁄° *
£t
)

33 
Àn
;

35 
Àn
 = 
	`°æí
(
£t
);

36 i‡–(
Àn
 == 0) || (len & 1) )

37  
NULL
;

39 ; 
£t
 && (set[0] != '\0'); set += 2) {

40 i‡(*
°r
 !*
£t
)

43 i‡(*
°r
 =*
£t
++)

44 
°r
++;

46 
Àn
 = 
	`°æí
(
°r
);

47 i‡(
Àn
 && (
°r
[À¿- 1] =*
£t
) )

48 
°r
[
Àn
 - 1] = '\0';

50  
°r
;

51 
	}
}

53 
uöt32_t
 
pg_°Ω¨£
(*
s
,

54 c⁄° *
dñim
,

55 **
íåõs
,

56 
uöt32_t
 
max_íåõs
);

57 *
pg_°πrim
(*
löe
);

58 *
pg_°rc˝y
(*
t
, *
f
, c⁄° *
°r
);

	@lib/lua/lua-5.3.4/src/lapi.c

7 
	#œpi_c


	)

8 
	#LUA_CORE


	)

10 
	~"Õªfix.h
"

13 
	~<°d¨g.h
>

14 
	~<°rög.h
>

16 
	~"lua.h
"

18 
	~"œpi.h
"

19 
	~"ldebug.h
"

20 
	~"ldo.h
"

21 
	~"lfunc.h
"

22 
	~"lgc.h
"

23 
	~"lmem.h
"

24 
	~"lobje˘.h
"

25 
	~"l°©e.h
"

26 
	~"l°rög.h
"

27 
	~"…abÀ.h
"

28 
	~"…m.h
"

29 
	~"lundump.h
"

30 
	~"lvm.h
"

34 c⁄° 
	glua_idít
[] =

35 "$LuaVîsi⁄: " 
LUA_COPYRIGHT
 " $"

36 "$LuaAuth‹s: " 
LUA_AUTHORS
 " $";

40 
	#NONVALIDVALUE
 
	`ˇ°
(
TVÆue
 *, 
luaO_nûobje˘
)

	)

43 
	#isvÆid
(
o
Ë((oË!
luaO_nûobje˘
)

	)

46 
	#i•£udo
(
i
Ë((iË<
LUA_REGISTRYINDEX
)

	)

49 
	#isupvÆue
(
i
Ë((iË< 
LUA_REGISTRYINDEX
)

	)

52 
	#is°acködex
(
i
, 
o
Ë(
	`isvÆid
(oË&& !
	`i•£udo
(i))

	)

54 
	#≠i_checkvÆidödex
(
l
,
o
Ë
	`≠i_check
÷, 
	`isvÆid
(o), "övÆid index")

	)

56 
	#≠i_check°acködex
(
l
, 
i
, 
o
) \

57 
	`≠i_check
(
l
, 
	`is°acködex
(
i
, 
o
), "ödexÇŸ i¿thê°ack")

	)

60 
TVÆue
 *
	$ödex2addr
 (
lua_Sèã
 *
L
, 
idx
) {

61 
CÆlInfo
 *
ci
 = 
L
->ci;

62 i‡(
idx
 > 0) {

63 
TVÆue
 *
o
 = 
ci
->
func
 + 
idx
;

64 
	`≠i_check
(
L
, 
idx
 <
ci
->
t›
 - (ci->
func
 + 1), "unacceptable index");

65 i‡(
o
 >
L
->
t›
Ë 
NONVALIDVALUE
;

66  
o
;

68 i‡(!
	`i•£udo
(
idx
)) {

69 
	`≠i_check
(
L
, 
idx
 !0 && -idx <L->
t›
 - (
ci
->
func
 + 1), "invalid index");

70  
L
->
t›
 + 
idx
;

72 i‡(
idx
 =
LUA_REGISTRYINDEX
)

73  &
	`G
(
L
)->
l_ªgi°ry
;

75 
idx
 = 
LUA_REGISTRYINDEX
 - idx;

76 
	`≠i_check
(
L
, 
idx
 <
MAXUPVAL
 + 1, "upvalue indexÅooÜarge");

77 i‡(
	`âi¶cf
(
ci
->
func
))

78  
NONVALIDVALUE
;

80 
CClosuª
 *
func
 = 
	`˛CvÆue
(
ci
->func);

81  (
idx
 <
func
->
nupvÆues
Ë? &func->
upvÆue
[idx-1] : 
NONVALIDVALUE
;

84 
	}
}

91 
	$grow°ack
 (
lua_Sèã
 *
L
, *
ud
) {

92 
size
 = *(*)
ud
;

93 
	`luaD_grow°ack
(
L
, 
size
);

94 
	}
}

97 
LUA_API
 
	$lua_check°ack
 (
lua_Sèã
 *
L
, 
n
) {

98 
ªs
;

99 
CÆlInfo
 *
ci
 = 
L
->ci;

100 
	`lua_lock
(
L
);

101 
	`≠i_check
(
L
, 
n
 >= 0, "negative 'n'");

102 i‡(
L
->
°ack_œ°
 - L->
t›
 > 
n
)

103 
ªs
 = 1;

105 
öu£
 = 
	`ˇ°_öt
(
L
->
t›
 - L->
°ack
Ë+ 
EXTRA_STACK
;

106 i‡(
öu£
 > 
LUAI_MAXSTACK
 - 
n
)

107 
ªs
 = 0;

109 
ªs
 = (
	`luaD_øwru≈rŸe˘ed
(
L
, &
grow°ack
, &
n
Ë=
LUA_OK
);

111 i‡(
ªs
 && 
ci
->
t›
 < 
L
->t› + 
n
)

112 
ci
->
t›
 = 
L
->t› + 
n
;

113 
	`lua_u∆ock
(
L
);

114  
ªs
;

115 
	}
}

118 
LUA_API
 
	$lua_xmove
 (
lua_Sèã
 *
‰om
,Üua_Sèã *
to
, 
n
) {

119 
i
;

120 i‡(
‰om
 =
to
) ;

121 
	`lua_lock
(
to
);

122 
	`≠i_check√Àms
(
‰om
, 
n
);

123 
	`≠i_check
(
‰om
, 
	`G
(‰omË=G(
to
), "movingámong independent states");

124 
	`≠i_check
(
‰om
, 
to
->
ci
->
t›
 -Åo->t› >
n
, "stack overflow");

125 
‰om
->
t›
 -
n
;

126 
i
 = 0; i < 
n
; i++) {

127 
	`£tobj2s
(
to
,Åo->
t›
, 
‰om
->t› + 
i
);

128 
to
->
t›
++;

130 
	`lua_u∆ock
(
to
);

131 
	}
}

134 
LUA_API
 
lua_CFun˘i⁄
 
	$lua_©∑nic
 (
lua_Sèã
 *
L
, 
lua_CFun˘i⁄
 
∑nicf
) {

135 
lua_CFun˘i⁄
 
ﬁd
;

136 
	`lua_lock
(
L
);

137 
ﬁd
 = 
	`G
(
L
)->
∑nic
;

138 
	`G
(
L
)->
∑nic
 = 
∑nicf
;

139 
	`lua_u∆ock
(
L
);

140  
ﬁd
;

141 
	}
}

144 
LUA_API
 c⁄° 
lua_Numbî
 *
	$lua_vîsi⁄
 (
lua_Sèã
 *
L
) {

145 c⁄° 
lua_Numbî
 
vîsi⁄
 = 
LUA_VERSION_NUM
;

146 i‡(
L
 =
NULL
Ë &
vîsi⁄
;

147  
	`G
(
L
)->
vîsi⁄
;

148 
	}
}

160 
LUA_API
 
	$lua_absödex
 (
lua_Sèã
 *
L
, 
idx
) {

161  (
idx
 > 0 || 
	`i•£udo
(idx))

162 ? 
idx


163 : 
	`ˇ°_öt
(
L
->
t›
 - L->
ci
->
func
Ë+ 
idx
;

164 
	}
}

167 
LUA_API
 
	$lua_gët›
 (
lua_Sèã
 *
L
) {

168  
	`ˇ°_öt
(
L
->
t›
 - (L->
ci
->
func
 + 1));

169 
	}
}

172 
LUA_API
 
	$lua_£â›
 (
lua_Sèã
 *
L
, 
idx
) {

173 
StkId
 
func
 = 
L
->
ci
->func;

174 
	`lua_lock
(
L
);

175 i‡(
idx
 >= 0) {

176 
	`≠i_check
(
L
, 
idx
 <L->
°ack_œ°
 - (
func
 + 1), "newÅopÅooÜarge");

177 
L
->
t›
 < (
func
 + 1Ë+ 
idx
)

178 
	`£äûvÆue
(
L
->
t›
++);

179 
L
->
t›
 = (
func
 + 1Ë+ 
idx
;

182 
	`≠i_check
(
L
, -(
idx
+1Ë<(L->
t›
 - (
func
 + 1)), "invalidÇewÅop");

183 
L
->
t›
 +
idx
+1;

185 
	`lua_u∆ock
(
L
);

186 
	}
}

193 
	$ªvî£
 (
lua_Sèã
 *
L
, 
StkId
 
‰om
, StkId 
to
) {

194 ; 
‰om
 < 
to
; from++,Åo--) {

195 
TVÆue
 
ãmp
;

196 
	`£tobj
(
L
, &
ãmp
, 
‰om
);

197 
	`£tobjs2s
(
L
, 
‰om
, 
to
);

198 
	`£tobj2s
(
L
, 
to
, &
ãmp
);

200 
	}
}

207 
LUA_API
 
	$lua_rŸ©e
 (
lua_Sèã
 *
L
, 
idx
, 
n
) {

208 
StkId
 
p
, 
t
, 
m
;

209 
	`lua_lock
(
L
);

210 
t
 = 
L
->
t›
 - 1;

211 
p
 = 
	`ödex2addr
(
L
, 
idx
);

212 
	`≠i_check°acködex
(
L
, 
idx
, 
p
);

213 
	`≠i_check
(
L
, (
n
 >0 ?Ç : -nË<(
t
 - 
p
 + 1), "invalid 'n'");

214 
m
 = (
n
 >0 ? 
t
 -Ç : 
p
 -Ç - 1);

215 
	`ªvî£
(
L
, 
p
, 
m
);

216 
	`ªvî£
(
L
, 
m
 + 1, 
t
);

217 
	`ªvî£
(
L
, 
p
, 
t
);

218 
	`lua_u∆ock
(
L
);

219 
	}
}

222 
LUA_API
 
	$lua_c›y
 (
lua_Sèã
 *
L
, 
‰omidx
, 
toidx
) {

223 
TVÆue
 *
‰
, *
to
;

224 
	`lua_lock
(
L
);

225 
‰
 = 
	`ödex2addr
(
L
, 
‰omidx
);

226 
to
 = 
	`ödex2addr
(
L
, 
toidx
);

227 
	`≠i_checkvÆidödex
(
L
, 
to
);

228 
	`£tobj
(
L
, 
to
, 
‰
);

229 i‡(
	`isupvÆue
(
toidx
))

230 
	`luaC_b¨rõr
(
L
, 
	`˛CvÆue
(L->
ci
->
func
), 
‰
);

233 
	`lua_u∆ock
(
L
);

234 
	}
}

237 
LUA_API
 
	$lua_pushvÆue
 (
lua_Sèã
 *
L
, 
idx
) {

238 
	`lua_lock
(
L
);

239 
	`£tobj2s
(
L
, L->
t›
, 
	`ödex2addr
(L, 
idx
));

240 
	`≠i_ö¸_t›
(
L
);

241 
	`lua_u∆ock
(
L
);

242 
	}
}

251 
LUA_API
 
	$lua_ty≥
 (
lua_Sèã
 *
L
, 
idx
) {

252 
StkId
 
o
 = 
	`ödex2addr
(
L
, 
idx
);

253  (
	`isvÆid
(
o
Ë? 
	`ânov
(oË: 
LUA_TNONE
);

254 
	}
}

257 
LUA_API
 c⁄° *
	$lua_ty≥«me
 (
lua_Sèã
 *
L
, 
t
) {

258 
	`UNUSED
(
L
);

259 
	`≠i_check
(
L
, 
LUA_TNONE
 <
t
 &&Å < 
LUA_NUMTAGS
, "invalidÅag");

260  
	`ây≥«me
(
t
);

261 
	}
}

264 
LUA_API
 
	$lua_iscfun˘i⁄
 (
lua_Sèã
 *
L
, 
idx
) {

265 
StkId
 
o
 = 
	`ödex2addr
(
L
, 
idx
);

266  (
	`âi¶cf
(
o
Ë|| (
	`âisC˛osuª
(o)));

267 
	}
}

270 
LUA_API
 
	$lua_isöãgî
 (
lua_Sèã
 *
L
, 
idx
) {

271 
StkId
 
o
 = 
	`ödex2addr
(
L
, 
idx
);

272  
	`âisöãgî
(
o
);

273 
	}
}

276 
LUA_API
 
	$lua_i¢umbî
 (
lua_Sèã
 *
L
, 
idx
) {

277 
lua_Numbî
 
n
;

278 c⁄° 
TVÆue
 *
o
 = 
	`ödex2addr
(
L
, 
idx
);

279  
	`t⁄umbî
(
o
, &
n
);

280 
	}
}

283 
LUA_API
 
	$lua_is°rög
 (
lua_Sèã
 *
L
, 
idx
) {

284 c⁄° 
TVÆue
 *
o
 = 
	`ödex2addr
(
L
, 
idx
);

285  (
	`âis°rög
(
o
Ë|| 
	`cvt2°r
(o));

286 
	}
}

289 
LUA_API
 
	$lua_isu£rd©a
 (
lua_Sèã
 *
L
, 
idx
) {

290 c⁄° 
TVÆue
 *
o
 = 
	`ödex2addr
(
L
, 
idx
);

291  (
	`âisfuŒu£rd©a
(
o
Ë|| 
	`âi¶ightu£rd©a
(o));

292 
	}
}

295 
LUA_API
 
	$lua_øwequÆ
 (
lua_Sèã
 *
L
, 
ödex1
, 
ödex2
) {

296 
StkId
 
o1
 = 
	`ödex2addr
(
L
, 
ödex1
);

297 
StkId
 
o2
 = 
	`ödex2addr
(
L
, 
ödex2
);

298  (
	`isvÆid
(
o1
Ë&& isvÆid(
o2
)Ë? 
	`luaV_øwequÆobj
(o1, o2) : 0;

299 
	}
}

302 
LUA_API
 
	$lua_¨ôh
 (
lua_Sèã
 *
L
, 
›
) {

303 
	`lua_lock
(
L
);

304 i‡(
›
 !
LUA_OPUNM
 && o∞!
LUA_OPBNOT
)

305 
	`≠i_check√Àms
(
L
, 2);

307 
	`≠i_check√Àms
(
L
, 1);

308 
	`£tobjs2s
(
L
, L->
t›
, L->top - 1);

309 
	`≠i_ö¸_t›
(
L
);

312 
	`luaO_¨ôh
(
L
, 
›
, L->
t›
 - 2, L->top - 1, L->top - 2);

313 
L
->
t›
--;

314 
	`lua_u∆ock
(
L
);

315 
	}
}

318 
LUA_API
 
	$lua_com∑ª
 (
lua_Sèã
 *
L
, 
ödex1
, 
ödex2
, 
›
) {

319 
StkId
 
o1
, 
o2
;

320 
i
 = 0;

321 
	`lua_lock
(
L
);

322 
o1
 = 
	`ödex2addr
(
L
, 
ödex1
);

323 
o2
 = 
	`ödex2addr
(
L
, 
ödex2
);

324 i‡(
	`isvÆid
(
o1
Ë&& isvÆid(
o2
)) {

325 
›
) {

326 
LUA_OPEQ
: 
i
 = 
	`luaV_equÆobj
(
L
, 
o1
, 
o2
); ;

327 
LUA_OPLT
: 
i
 = 
	`luaV_Às°h™
(
L
, 
o1
, 
o2
); ;

328 
LUA_OPLE
: 
i
 = 
	`luaV_Às£quÆ
(
L
, 
o1
, 
o2
); ;

329 : 
	`≠i_check
(
L
, 0, "invalid option");

332 
	`lua_u∆ock
(
L
);

333  
i
;

334 
	}
}

337 
LUA_API
 
size_t
 
	$lua_°rögt⁄umbî
 (
lua_Sèã
 *
L
, c⁄° *
s
) {

338 
size_t
 
sz
 = 
	`luaO_°r2num
(
s
, 
L
->
t›
);

339 i‡(
sz
 != 0)

340 
	`≠i_ö¸_t›
(
L
);

341  
sz
;

342 
	}
}

345 
LUA_API
 
lua_Numbî
 
	$lua_t⁄umbîx
 (
lua_Sèã
 *
L
, 
idx
, *
pi¢um
) {

346 
lua_Numbî
 
n
;

347 c⁄° 
TVÆue
 *
o
 = 
	`ödex2addr
(
L
, 
idx
);

348 
i¢um
 = 
	`t⁄umbî
(
o
, &
n
);

349 i‡(!
i¢um
)

350 
n
 = 0;

351 i‡(
pi¢um
Ë*pi¢um = 
i¢um
;

352  
n
;

353 
	}
}

356 
LUA_API
 
lua_I¡egî
 
	$lua_toöãgîx
 (
lua_Sèã
 *
L
, 
idx
, *
pi¢um
) {

357 
lua_I¡egî
 
ªs
;

358 c⁄° 
TVÆue
 *
o
 = 
	`ödex2addr
(
L
, 
idx
);

359 
i¢um
 = 
	`toöãgî
(
o
, &
ªs
);

360 i‡(!
i¢um
)

361 
ªs
 = 0;

362 i‡(
pi¢um
Ë*pi¢um = 
i¢um
;

363  
ªs
;

364 
	}
}

367 
LUA_API
 
	$lua_toboﬁón
 (
lua_Sèã
 *
L
, 
idx
) {

368 c⁄° 
TVÆue
 *
o
 = 
	`ödex2addr
(
L
, 
idx
);

369  !
	`l_isÁl£
(
o
);

370 
	}
}

373 
LUA_API
 c⁄° *
	$lua_tﬁ°rög
 (
lua_Sèã
 *
L
, 
idx
, 
size_t
 *
Àn
) {

374 
StkId
 
o
 = 
	`ödex2addr
(
L
, 
idx
);

375 i‡(!
	`âis°rög
(
o
)) {

376 i‡(!
	`cvt2°r
(
o
)) {

377 i‡(
Àn
 !
NULL
) *len = 0;

378  
NULL
;

380 
	`lua_lock
(
L
);

381 
	`luaO_to°rög
(
L
, 
o
);

382 
	`luaC_checkGC
(
L
);

383 
o
 = 
	`ödex2addr
(
L
, 
idx
);

384 
	`lua_u∆ock
(
L
);

386 i‡(
Àn
 !
NULL
)

387 *
Àn
 = 
	`v¶í
(
o
);

388  
	`svÆue
(
o
);

389 
	}
}

392 
LUA_API
 
size_t
 
	$lua_øwÀn
 (
lua_Sèã
 *
L
, 
idx
) {

393 
StkId
 
o
 = 
	`ödex2addr
(
L
, 
idx
);

394 
	`ây≥
(
o
)) {

395 
LUA_TSHRSTR
:  
	`tsvÆue
(
o
)->
shæí
;

396 
LUA_TLNGSTR
:  
	`tsvÆue
(
o
)->
u
.
 gÀn
;

397 
LUA_TUSERDATA
:  
	`uvÆue
(
o
)->
Àn
;

398 
LUA_TTABLE
:  
	`luaH_gën
(
	`hvÆue
(
o
));

401 
	}
}

404 
LUA_API
 
lua_CFun˘i⁄
 
	$lua_tocfun˘i⁄
 (
lua_Sèã
 *
L
, 
idx
) {

405 
StkId
 
o
 = 
	`ödex2addr
(
L
, 
idx
);

406 i‡(
	`âi¶cf
(
o
)Ë 
	`fvÆue
(o);

407 i‡(
	`âisC˛osuª
(
o
))

408  
	`˛CvÆue
(
o
)->
f
;

409  
NULL
;

410 
	}
}

413 
LUA_API
 *
	$lua_tou£rd©a
 (
lua_Sèã
 *
L
, 
idx
) {

414 
StkId
 
o
 = 
	`ödex2addr
(
L
, 
idx
);

415 
	`ânov
(
o
)) {

416 
LUA_TUSERDATA
:  
	`gëud©amem
(
	`uvÆue
(
o
));

417 
LUA_TLIGHTUSERDATA
:  
	`pvÆue
(
o
);

418 :  
NULL
;

420 
	}
}

423 
LUA_API
 
lua_Sèã
 *
	$lua_tŸhªad
 (
lua_Sèã
 *
L
, 
idx
) {

424 
StkId
 
o
 = 
	`ödex2addr
(
L
, 
idx
);

425  (!
	`âi°hªad
(
o
)Ë? 
NULL
 : 
	`thvÆue
(o);

426 
	}
}

429 
LUA_API
 c⁄° *
	$lua_t›oöãr
 (
lua_Sèã
 *
L
, 
idx
) {

430 
StkId
 
o
 = 
	`ödex2addr
(
L
, 
idx
);

431 
	`ây≥
(
o
)) {

432 
LUA_TTABLE
:  
	`hvÆue
(
o
);

433 
LUA_TLCL
:  
	`˛LvÆue
(
o
);

434 
LUA_TCCL
:  
	`˛CvÆue
(
o
);

435 
LUA_TLCF
:  
	`ˇ°
(*, ca°(
size_t
, 
	`fvÆue
(
o
)));

436 
LUA_TTHREAD
:  
	`thvÆue
(
o
);

437 
LUA_TUSERDATA
:  
	`gëud©amem
(
	`uvÆue
(
o
));

438 
LUA_TLIGHTUSERDATA
:  
	`pvÆue
(
o
);

439 :  
NULL
;

441 
	}
}

450 
LUA_API
 
	$lua_pushnû
 (
lua_Sèã
 *
L
) {

451 
	`lua_lock
(
L
);

452 
	`£äûvÆue
(
L
->
t›
);

453 
	`≠i_ö¸_t›
(
L
);

454 
	`lua_u∆ock
(
L
);

455 
	}
}

458 
LUA_API
 
	$lua_pushnumbî
 (
lua_Sèã
 *
L
, 
lua_Numbî
 
n
) {

459 
	`lua_lock
(
L
);

460 
	`£tÊtvÆue
(
L
->
t›
, 
n
);

461 
	`≠i_ö¸_t›
(
L
);

462 
	`lua_u∆ock
(
L
);

463 
	}
}

466 
LUA_API
 
	$lua_pushöãgî
 (
lua_Sèã
 *
L
, 
lua_I¡egî
 
n
) {

467 
	`lua_lock
(
L
);

468 
	`£tivÆue
(
L
->
t›
, 
n
);

469 
	`≠i_ö¸_t›
(
L
);

470 
	`lua_u∆ock
(
L
);

471 
	}
}

479 
LUA_API
 c⁄° *
	$lua_pushl°rög
 (
lua_Sèã
 *
L
, c⁄° *
s
, 
size_t
 
Àn
) {

480 
TSåög
 *
ts
;

481 
	`lua_lock
(
L
);

482 
ts
 = (
Àn
 =0Ë? 
	`luaS_√w
(
L
, ""Ë: 
	`luaS_√wl°r
(L, 
s
,Üen);

483 
	`£tsvÆue2s
(
L
, L->
t›
, 
ts
);

484 
	`≠i_ö¸_t›
(
L
);

485 
	`luaC_checkGC
(
L
);

486 
	`lua_u∆ock
(
L
);

487  
	`gë°r
(
ts
);

488 
	}
}

491 
LUA_API
 c⁄° *
	$lua_push°rög
 (
lua_Sèã
 *
L
, c⁄° *
s
) {

492 
	`lua_lock
(
L
);

493 i‡(
s
 =
NULL
)

494 
	`£äûvÆue
(
L
->
t›
);

496 
TSåög
 *
ts
;

497 
ts
 = 
	`luaS_√w
(
L
, 
s
);

498 
	`£tsvÆue2s
(
L
, L->
t›
, 
ts
);

499 
s
 = 
	`gë°r
(
ts
);

501 
	`≠i_ö¸_t›
(
L
);

502 
	`luaC_checkGC
(
L
);

503 
	`lua_u∆ock
(
L
);

504  
s
;

505 
	}
}

508 
LUA_API
 c⁄° *
	$lua_pushvf°rög
 (
lua_Sèã
 *
L
, c⁄° *
fmt
,

509 
va_li°
 
¨gp
) {

510 c⁄° *
ªt
;

511 
	`lua_lock
(
L
);

512 
ªt
 = 
	`luaO_pushvf°rög
(
L
, 
fmt
, 
¨gp
);

513 
	`luaC_checkGC
(
L
);

514 
	`lua_u∆ock
(
L
);

515  
ªt
;

516 
	}
}

519 
LUA_API
 c⁄° *
	$lua_pushf°rög
 (
lua_Sèã
 *
L
, c⁄° *
fmt
, ...) {

520 c⁄° *
ªt
;

521 
va_li°
 
¨gp
;

522 
	`lua_lock
(
L
);

523 
	`va_°¨t
(
¨gp
, 
fmt
);

524 
ªt
 = 
	`luaO_pushvf°rög
(
L
, 
fmt
, 
¨gp
);

525 
	`va_íd
(
¨gp
);

526 
	`luaC_checkGC
(
L
);

527 
	`lua_u∆ock
(
L
);

528  
ªt
;

529 
	}
}

532 
LUA_API
 
	$lua_pushc˛osuª
 (
lua_Sèã
 *
L
, 
lua_CFun˘i⁄
 
‚
, 
n
) {

533 
	`lua_lock
(
L
);

534 i‡(
n
 == 0) {

535 
	`£tfvÆue
(
L
->
t›
, 
‚
);

538 
CClosuª
 *
˛
;

539 
	`≠i_check√Àms
(
L
, 
n
);

540 
	`≠i_check
(
L
, 
n
 <
MAXUPVAL
, "upvalue indexÅooÜarge");

541 
˛
 = 
	`luaF_√wC˛osuª
(
L
, 
n
);

542 
˛
->
f
 = 
‚
;

543 
L
->
t›
 -
n
;

544 
n
--) {

545 
	`£tobj2n
(
L
, &
˛
->
upvÆue
[
n
], L->
t›
 +Ç);

548 
	`£t˛CvÆue
(
L
, L->
t›
, 
˛
);

550 
	`≠i_ö¸_t›
(
L
);

551 
	`luaC_checkGC
(
L
);

552 
	`lua_u∆ock
(
L
);

553 
	}
}

556 
LUA_API
 
	$lua_pushboﬁón
 (
lua_Sèã
 *
L
, 
b
) {

557 
	`lua_lock
(
L
);

558 
	`£tbvÆue
(
L
->
t›
, (
b
 != 0));

559 
	`≠i_ö¸_t›
(
L
);

560 
	`lua_u∆ock
(
L
);

561 
	}
}

564 
LUA_API
 
	$lua_pushlightu£rd©a
 (
lua_Sèã
 *
L
, *
p
) {

565 
	`lua_lock
(
L
);

566 
	`£çvÆue
(
L
->
t›
, 
p
);

567 
	`≠i_ö¸_t›
(
L
);

568 
	`lua_u∆ock
(
L
);

569 
	}
}

572 
LUA_API
 
	$lua_pushthªad
 (
lua_Sèã
 *
L
) {

573 
	`lua_lock
(
L
);

574 
	`£âhvÆue
(
L
, L->
t›
, L);

575 
	`≠i_ö¸_t›
(
L
);

576 
	`lua_u∆ock
(
L
);

577  (
	`G
(
L
)->
maöthªad
 == L);

578 
	}
}

587 
	$auxgë°r
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
t
, c⁄° *
k
) {

588 c⁄° 
TVÆue
 *
¶Ÿ
;

589 
TSåög
 *
°r
 = 
	`luaS_√w
(
L
, 
k
);

590 i‡(
	`luaV_Á°gë
(
L
, 
t
, 
°r
, 
¶Ÿ
, 
luaH_gë°r
)) {

591 
	`£tobj2s
(
L
, L->
t›
, 
¶Ÿ
);

592 
	`≠i_ö¸_t›
(
L
);

595 
	`£tsvÆue2s
(
L
, L->
t›
, 
°r
);

596 
	`≠i_ö¸_t›
(
L
);

597 
	`luaV_föishgë
(
L
, 
t
, L->
t›
 - 1, L->t› - 1, 
¶Ÿ
);

599 
	`lua_u∆ock
(
L
);

600  
	`ânov
(
L
->
t›
 - 1);

601 
	}
}

604 
LUA_API
 
	$lua_gëglobÆ
 (
lua_Sèã
 *
L
, c⁄° *
«me
) {

605 
TabÀ
 *
ªg
 = 
	`hvÆue
(&
	`G
(
L
)->
l_ªgi°ry
);

606 
	`lua_lock
(
L
);

607  
	`auxgë°r
(
L
, 
	`luaH_gëöt
(
ªg
, 
LUA_RIDX_GLOBALS
), 
«me
);

608 
	}
}

611 
LUA_API
 
	$lua_gëèbÀ
 (
lua_Sèã
 *
L
, 
idx
) {

612 
StkId
 
t
;

613 
	`lua_lock
(
L
);

614 
t
 = 
	`ödex2addr
(
L
, 
idx
);

615 
	`luaV_gëèbÀ
(
L
, 
t
, L->
t›
 - 1, L->top - 1);

616 
	`lua_u∆ock
(
L
);

617  
	`ânov
(
L
->
t›
 - 1);

618 
	}
}

621 
LUA_API
 
	$lua_gëfõld
 (
lua_Sèã
 *
L
, 
idx
, c⁄° *
k
) {

622 
	`lua_lock
(
L
);

623  
	`auxgë°r
(
L
, 
	`ödex2addr
(L, 
idx
), 
k
);

624 
	}
}

627 
LUA_API
 
	$lua_gëi
 (
lua_Sèã
 *
L
, 
idx
, 
lua_I¡egî
 
n
) {

628 
StkId
 
t
;

629 c⁄° 
TVÆue
 *
¶Ÿ
;

630 
	`lua_lock
(
L
);

631 
t
 = 
	`ödex2addr
(
L
, 
idx
);

632 i‡(
	`luaV_Á°gë
(
L
, 
t
, 
n
, 
¶Ÿ
, 
luaH_gëöt
)) {

633 
	`£tobj2s
(
L
, L->
t›
, 
¶Ÿ
);

634 
	`≠i_ö¸_t›
(
L
);

637 
	`£tivÆue
(
L
->
t›
, 
n
);

638 
	`≠i_ö¸_t›
(
L
);

639 
	`luaV_föishgë
(
L
, 
t
, L->
t›
 - 1, L->t› - 1, 
¶Ÿ
);

641 
	`lua_u∆ock
(
L
);

642  
	`ânov
(
L
->
t›
 - 1);

643 
	}
}

646 
LUA_API
 
	$lua_øwgë
 (
lua_Sèã
 *
L
, 
idx
) {

647 
StkId
 
t
;

648 
	`lua_lock
(
L
);

649 
t
 = 
	`ödex2addr
(
L
, 
idx
);

650 
	`≠i_check
(
L
, 
	`âi°abÀ
(
t
), "tableÉxpected");

651 
	`£tobj2s
(
L
, L->
t›
 - 1, 
	`luaH_gë
(
	`hvÆue
(
t
), L->top - 1));

652 
	`lua_u∆ock
(
L
);

653  
	`ânov
(
L
->
t›
 - 1);

654 
	}
}

657 
LUA_API
 
	$lua_øwgëi
 (
lua_Sèã
 *
L
, 
idx
, 
lua_I¡egî
 
n
) {

658 
StkId
 
t
;

659 
	`lua_lock
(
L
);

660 
t
 = 
	`ödex2addr
(
L
, 
idx
);

661 
	`≠i_check
(
L
, 
	`âi°abÀ
(
t
), "tableÉxpected");

662 
	`£tobj2s
(
L
, L->
t›
, 
	`luaH_gëöt
(
	`hvÆue
(
t
), 
n
));

663 
	`≠i_ö¸_t›
(
L
);

664 
	`lua_u∆ock
(
L
);

665  
	`ânov
(
L
->
t›
 - 1);

666 
	}
}

669 
LUA_API
 
	$lua_øwgëp
 (
lua_Sèã
 *
L
, 
idx
, c⁄° *
p
) {

670 
StkId
 
t
;

671 
TVÆue
 
k
;

672 
	`lua_lock
(
L
);

673 
t
 = 
	`ödex2addr
(
L
, 
idx
);

674 
	`≠i_check
(
L
, 
	`âi°abÀ
(
t
), "tableÉxpected");

675 
	`£çvÆue
(&
k
, 
	`ˇ°
(*, 
p
));

676 
	`£tobj2s
(
L
, L->
t›
, 
	`luaH_gë
(
	`hvÆue
(
t
), &
k
));

677 
	`≠i_ö¸_t›
(
L
);

678 
	`lua_u∆ock
(
L
);

679  
	`ânov
(
L
->
t›
 - 1);

680 
	}
}

683 
LUA_API
 
	$lua_¸óãèbÀ
 (
lua_Sèã
 *
L
, 
«ºay
, 
ƒec
) {

684 
TabÀ
 *
t
;

685 
	`lua_lock
(
L
);

686 
t
 = 
	`luaH_√w
(
L
);

687 
	`£thvÆue
(
L
, L->
t›
, 
t
);

688 
	`≠i_ö¸_t›
(
L
);

689 i‡(
«ºay
 > 0 || 
ƒec
 > 0)

690 
	`luaH_ªsize
(
L
, 
t
, 
«ºay
, 
ƒec
);

691 
	`luaC_checkGC
(
L
);

692 
	`lua_u∆ock
(
L
);

693 
	}
}

696 
LUA_API
 
	$lua_gëmë©abÀ
 (
lua_Sèã
 *
L
, 
objödex
) {

697 c⁄° 
TVÆue
 *
obj
;

698 
TabÀ
 *
mt
;

699 
ªs
 = 0;

700 
	`lua_lock
(
L
);

701 
obj
 = 
	`ödex2addr
(
L
, 
objödex
);

702 
	`ânov
(
obj
)) {

703 
LUA_TTABLE
:

704 
mt
 = 
	`hvÆue
(
obj
)->
më©abÀ
;

706 
LUA_TUSERDATA
:

707 
mt
 = 
	`uvÆue
(
obj
)->
më©abÀ
;

710 
mt
 = 
	`G
(
L
)->mt[
	`ânov
(
obj
)];

713 i‡(
mt
 !
NULL
) {

714 
	`£thvÆue
(
L
, L->
t›
, 
mt
);

715 
	`≠i_ö¸_t›
(
L
);

716 
ªs
 = 1;

718 
	`lua_u∆ock
(
L
);

719  
ªs
;

720 
	}
}

723 
LUA_API
 
	$lua_gëu£rvÆue
 (
lua_Sèã
 *
L
, 
idx
) {

724 
StkId
 
o
;

725 
	`lua_lock
(
L
);

726 
o
 = 
	`ödex2addr
(
L
, 
idx
);

727 
	`≠i_check
(
L
, 
	`âisfuŒu£rd©a
(
o
), "full userdataÉxpected");

728 
	`gëu£rvÆue
(
L
, 
	`uvÆue
(
o
), L->
t›
);

729 
	`≠i_ö¸_t›
(
L
);

730 
	`lua_u∆ock
(
L
);

731  
	`ânov
(
L
->
t›
 - 1);

732 
	}
}

742 
	$aux£t°r
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
t
, c⁄° *
k
) {

743 c⁄° 
TVÆue
 *
¶Ÿ
;

744 
TSåög
 *
°r
 = 
	`luaS_√w
(
L
, 
k
);

745 
	`≠i_check√Àms
(
L
, 1);

746 i‡(
	`luaV_Á°£t
(
L
, 
t
, 
°r
, 
¶Ÿ
, 
luaH_gë°r
, L->
t›
 - 1))

747 
L
->
t›
--;

749 
	`£tsvÆue2s
(
L
, L->
t›
, 
°r
);

750 
	`≠i_ö¸_t›
(
L
);

751 
	`luaV_föish£t
(
L
, 
t
, L->
t›
 - 1, L->t› - 2, 
¶Ÿ
);

752 
L
->
t›
 -= 2;

754 
	`lua_u∆ock
(
L
);

755 
	}
}

758 
LUA_API
 
	$lua_£tglobÆ
 (
lua_Sèã
 *
L
, c⁄° *
«me
) {

759 
TabÀ
 *
ªg
 = 
	`hvÆue
(&
	`G
(
L
)->
l_ªgi°ry
);

760 
	`lua_lock
(
L
);

761 
	`aux£t°r
(
L
, 
	`luaH_gëöt
(
ªg
, 
LUA_RIDX_GLOBALS
), 
«me
);

762 
	}
}

765 
LUA_API
 
	$lua_£âabÀ
 (
lua_Sèã
 *
L
, 
idx
) {

766 
StkId
 
t
;

767 
	`lua_lock
(
L
);

768 
	`≠i_check√Àms
(
L
, 2);

769 
t
 = 
	`ödex2addr
(
L
, 
idx
);

770 
	`luaV_£âabÀ
(
L
, 
t
, L->
t›
 - 2, L->top - 1);

771 
L
->
t›
 -= 2;

772 
	`lua_u∆ock
(
L
);

773 
	}
}

776 
LUA_API
 
	$lua_£tfõld
 (
lua_Sèã
 *
L
, 
idx
, c⁄° *
k
) {

777 
	`lua_lock
(
L
);

778 
	`aux£t°r
(
L
, 
	`ödex2addr
(L, 
idx
), 
k
);

779 
	}
}

782 
LUA_API
 
	$lua_£ti
 (
lua_Sèã
 *
L
, 
idx
, 
lua_I¡egî
 
n
) {

783 
StkId
 
t
;

784 c⁄° 
TVÆue
 *
¶Ÿ
;

785 
	`lua_lock
(
L
);

786 
	`≠i_check√Àms
(
L
, 1);

787 
t
 = 
	`ödex2addr
(
L
, 
idx
);

788 i‡(
	`luaV_Á°£t
(
L
, 
t
, 
n
, 
¶Ÿ
, 
luaH_gëöt
, L->
t›
 - 1))

789 
L
->
t›
--;

791 
	`£tivÆue
(
L
->
t›
, 
n
);

792 
	`≠i_ö¸_t›
(
L
);

793 
	`luaV_föish£t
(
L
, 
t
, L->
t›
 - 1, L->t› - 2, 
¶Ÿ
);

794 
L
->
t›
 -= 2;

796 
	`lua_u∆ock
(
L
);

797 
	}
}

800 
LUA_API
 
	$lua_øw£t
 (
lua_Sèã
 *
L
, 
idx
) {

801 
StkId
 
o
;

802 
TVÆue
 *
¶Ÿ
;

803 
	`lua_lock
(
L
);

804 
	`≠i_check√Àms
(
L
, 2);

805 
o
 = 
	`ödex2addr
(
L
, 
idx
);

806 
	`≠i_check
(
L
, 
	`âi°abÀ
(
o
), "tableÉxpected");

807 
¶Ÿ
 = 
	`luaH_£t
(
L
, 
	`hvÆue
(
o
), L->
t›
 - 2);

808 
	`£tobj2t
(
L
, 
¶Ÿ
, L->
t›
 - 1);

809 
	`övÆid©eTMˇche
(
	`hvÆue
(
o
));

810 
	`luaC_b¨rõrback
(
L
, 
	`hvÆue
(
o
), L->
t›
-1);

811 
L
->
t›
 -= 2;

812 
	`lua_u∆ock
(
L
);

813 
	}
}

816 
LUA_API
 
	$lua_øw£ti
 (
lua_Sèã
 *
L
, 
idx
, 
lua_I¡egî
 
n
) {

817 
StkId
 
o
;

818 
	`lua_lock
(
L
);

819 
	`≠i_check√Àms
(
L
, 1);

820 
o
 = 
	`ödex2addr
(
L
, 
idx
);

821 
	`≠i_check
(
L
, 
	`âi°abÀ
(
o
), "tableÉxpected");

822 
	`luaH_£töt
(
L
, 
	`hvÆue
(
o
), 
n
, L->
t›
 - 1);

823 
	`luaC_b¨rõrback
(
L
, 
	`hvÆue
(
o
), L->
t›
-1);

824 
L
->
t›
--;

825 
	`lua_u∆ock
(
L
);

826 
	}
}

829 
LUA_API
 
	$lua_øw£ç
 (
lua_Sèã
 *
L
, 
idx
, c⁄° *
p
) {

830 
StkId
 
o
;

831 
TVÆue
 
k
, *
¶Ÿ
;

832 
	`lua_lock
(
L
);

833 
	`≠i_check√Àms
(
L
, 1);

834 
o
 = 
	`ödex2addr
(
L
, 
idx
);

835 
	`≠i_check
(
L
, 
	`âi°abÀ
(
o
), "tableÉxpected");

836 
	`£çvÆue
(&
k
, 
	`ˇ°
(*, 
p
));

837 
¶Ÿ
 = 
	`luaH_£t
(
L
, 
	`hvÆue
(
o
), &
k
);

838 
	`£tobj2t
(
L
, 
¶Ÿ
, L->
t›
 - 1);

839 
	`luaC_b¨rõrback
(
L
, 
	`hvÆue
(
o
), L->
t›
 - 1);

840 
L
->
t›
--;

841 
	`lua_u∆ock
(
L
);

842 
	}
}

845 
LUA_API
 
	$lua_£tmë©abÀ
 (
lua_Sèã
 *
L
, 
objödex
) {

846 
TVÆue
 *
obj
;

847 
TabÀ
 *
mt
;

848 
	`lua_lock
(
L
);

849 
	`≠i_check√Àms
(
L
, 1);

850 
obj
 = 
	`ödex2addr
(
L
, 
objödex
);

851 i‡(
	`âi¢û
(
L
->
t›
 - 1))

852 
mt
 = 
NULL
;

854 
	`≠i_check
(
L
, 
	`âi°abÀ
(L->
t›
 - 1), "tableÉxpected");

855 
mt
 = 
	`hvÆue
(
L
->
t›
 - 1);

857 
	`ânov
(
obj
)) {

858 
LUA_TTABLE
: {

859 
	`hvÆue
(
obj
)->
më©abÀ
 = 
mt
;

860 i‡(
mt
) {

861 
	`luaC_objb¨rõr
(
L
, 
	`gcvÆue
(
obj
), 
mt
);

862 
	`luaC_checkföÆizî
(
L
, 
	`gcvÆue
(
obj
), 
mt
);

866 
LUA_TUSERDATA
: {

867 
	`uvÆue
(
obj
)->
më©abÀ
 = 
mt
;

868 i‡(
mt
) {

869 
	`luaC_objb¨rõr
(
L
, 
	`uvÆue
(
obj
), 
mt
);

870 
	`luaC_checkföÆizî
(
L
, 
	`gcvÆue
(
obj
), 
mt
);

875 
	`G
(
L
)->
mt
[
	`ânov
(
obj
)] = mt;

879 
L
->
t›
--;

880 
	`lua_u∆ock
(
L
);

882 
	}
}

885 
LUA_API
 
	$lua_£tu£rvÆue
 (
lua_Sèã
 *
L
, 
idx
) {

886 
StkId
 
o
;

887 
	`lua_lock
(
L
);

888 
	`≠i_check√Àms
(
L
, 1);

889 
o
 = 
	`ödex2addr
(
L
, 
idx
);

890 
	`≠i_check
(
L
, 
	`âisfuŒu£rd©a
(
o
), "full userdataÉxpected");

891 
	`£tu£rvÆue
(
L
, 
	`uvÆue
(
o
), L->
t›
 - 1);

892 
	`luaC_b¨rõr
(
L
, 
	`gcvÆue
(
o
), L->
t›
 - 1);

893 
L
->
t›
--;

894 
	`lua_u∆ock
(
L
);

895 
	}
}

903 
	#checkªsu…s
(
L
,
«
,
ƒ
) \

904 
	`≠i_check
(
L
, (
ƒ
Ë=
LUA_MULTRET
 || (L->
ci
->
t›
 - L->t› >“rË- (
«
)), \

905 "ªsu…†‰om fun˘i⁄ ovîÊow cuºíà°ack size")

	)

908 
LUA_API
 
	$lua_ˇŒk
 (
lua_Sèã
 *
L
, 
«rgs
, 
ƒesu…s
,

909 
lua_KC⁄ãxt
 
˘x
, 
lua_KFun˘i⁄
 
k
) {

910 
StkId
 
func
;

911 
	`lua_lock
(
L
);

912 
	`≠i_check
(
L
, 
k
 =
NULL
 || !
	`isLua
(L->
ci
),

914 
	`≠i_check√Àms
(
L
, 
«rgs
+1);

915 
	`≠i_check
(
L
, L->
°©us
 =
LUA_OK
, "cannot do calls onÇon-normalÅhread");

916 
	`checkªsu…s
(
L
, 
«rgs
, 
ƒesu…s
);

917 
func
 = 
L
->
t›
 - (
«rgs
+1);

918 i‡(
k
 !
NULL
 && 
L
->
¬y
 == 0) {

919 
L
->
ci
->
u
.
c
.
k
 = k;

920 
L
->
ci
->
u
.
c
.
˘x
 = ctx;

921 
	`luaD_ˇŒ
(
L
, 
func
, 
ƒesu…s
);

924 
	`luaD_ˇŒnoyõld
(
L
, 
func
, 
ƒesu…s
);

925 
	`adju°ªsu…s
(
L
, 
ƒesu…s
);

926 
	`lua_u∆ock
(
L
);

927 
	}
}

934 
	sCÆlS
 {

935 
StkId
 
	mfunc
;

936 
	mƒesu…s
;

940 
	$f_ˇŒ
 (
lua_Sèã
 *
L
, *
ud
) {

941 
CÆlS
 *
c
 = 
	`ˇ°
(CÆlS *, 
ud
);

942 
	`luaD_ˇŒnoyõld
(
L
, 
c
->
func
, c->
ƒesu…s
);

943 
	}
}

947 
LUA_API
 
	$lua_pˇŒk
 (
lua_Sèã
 *
L
, 
«rgs
, 
ƒesu…s
, 
îrfunc
,

948 
lua_KC⁄ãxt
 
˘x
, 
lua_KFun˘i⁄
 
k
) {

949 
CÆlS
 
c
;

950 
°©us
;

951 
±rdiff_t
 
func
;

952 
	`lua_lock
(
L
);

953 
	`≠i_check
(
L
, 
k
 =
NULL
 || !
	`isLua
(L->
ci
),

955 
	`≠i_check√Àms
(
L
, 
«rgs
+1);

956 
	`≠i_check
(
L
, L->
°©us
 =
LUA_OK
, "cannot do calls onÇon-normalÅhread");

957 
	`checkªsu…s
(
L
, 
«rgs
, 
ƒesu…s
);

958 i‡(
îrfunc
 == 0)

959 
func
 = 0;

961 
StkId
 
o
 = 
	`ödex2addr
(
L
, 
îrfunc
);

962 
	`≠i_check°acködex
(
L
, 
îrfunc
, 
o
);

963 
func
 = 
	`ßve°ack
(
L
, 
o
);

965 
c
.
func
 = 
L
->
t›
 - (
«rgs
+1);

966 i‡(
k
 =
NULL
 || 
L
->
¬y
 > 0) {

967 
c
.
ƒesu…s
 =Çresults;

968 
°©us
 = 
	`luaD_pˇŒ
(
L
, 
f_ˇŒ
, &
c
, 
	`ßve°ack
(L, c.
func
), func);

971 
CÆlInfo
 *
ci
 = 
L
->ci;

972 
ci
->
u
.
c
.
k
 = k;

973 
ci
->
u
.
c
.
˘x
 = ctx;

975 
ci
->
exåa
 = 
	`ßve°ack
(
L
, 
c
.
func
);

976 
ci
->
u
.
c
.
ﬁd_îrfunc
 = 
L
->
îrfunc
;

977 
L
->
îrfunc
 = 
func
;

978 
	`£tﬂh
(
ci
->
ˇŒ°©us
, 
L
->
Ælowhook
);

979 
ci
->
ˇŒ°©us
 |
CIST_YPCALL
;

980 
	`luaD_ˇŒ
(
L
, 
c
.
func
, 
ƒesu…s
);

981 
ci
->
ˇŒ°©us
 &~
CIST_YPCALL
;

982 
L
->
îrfunc
 = 
ci
->
u
.
c
.
ﬁd_îrfunc
;

983 
°©us
 = 
LUA_OK
;

985 
	`adju°ªsu…s
(
L
, 
ƒesu…s
);

986 
	`lua_u∆ock
(
L
);

987  
°©us
;

988 
	}
}

991 
LUA_API
 
	$lua_lﬂd
 (
lua_Sèã
 *
L
, 
lua_Ródî
 
ªadî
, *
d©a
,

992 c⁄° *
chunk«me
, c⁄° *
mode
) {

993 
ZIO
 
z
;

994 
°©us
;

995 
	`lua_lock
(
L
);

996 i‡(!
chunk«me
) chunkname = "?";

997 
	`luaZ_öô
(
L
, &
z
, 
ªadî
, 
d©a
);

998 
°©us
 = 
	`luaD_¥Ÿe˘ed∑r£r
(
L
, &
z
, 
chunk«me
, 
mode
);

999 i‡(
°©us
 =
LUA_OK
) {

1000 
LClosuª
 *
f
 = 
	`˛LvÆue
(
L
->
t›
 - 1);

1001 i‡(
f
->
nupvÆues
 >= 1) {

1003 
TabÀ
 *
ªg
 = 
	`hvÆue
(&
	`G
(
L
)->
l_ªgi°ry
);

1004 c⁄° 
TVÆue
 *
gt
 = 
	`luaH_gëöt
(
ªg
, 
LUA_RIDX_GLOBALS
);

1006 
	`£tobj
(
L
, 
f
->
upvÆs
[0]->
v
, 
gt
);

1007 
	`luaC_upvÆb¨rõr
(
L
, 
f
->
upvÆs
[0]);

1010 
	`lua_u∆ock
(
L
);

1011  
°©us
;

1012 
	}
}

1015 
LUA_API
 
	$lua_dump
 (
lua_Sèã
 *
L
, 
lua_Wrôî
 
wrôî
, *
d©a
, 
°rù
) {

1016 
°©us
;

1017 
TVÆue
 *
o
;

1018 
	`lua_lock
(
L
);

1019 
	`≠i_check√Àms
(
L
, 1);

1020 
o
 = 
L
->
t›
 - 1;

1021 i‡(
	`isLfun˘i⁄
(
o
))

1022 
°©us
 = 
	`luaU_dump
(
L
, 
	`gë¥Ÿo
(
o
), 
wrôî
, 
d©a
, 
°rù
);

1024 
°©us
 = 1;

1025 
	`lua_u∆ock
(
L
);

1026  
°©us
;

1027 
	}
}

1030 
LUA_API
 
	$lua_°©us
 (
lua_Sèã
 *
L
) {

1031  
L
->
°©us
;

1032 
	}
}

1039 
LUA_API
 
	$lua_gc
 (
lua_Sèã
 *
L
, 
wh©
, 
d©a
) {

1040 
ªs
 = 0;

1041 
globÆ_Sèã
 *
g
;

1042 
	`lua_lock
(
L
);

1043 
g
 = 
	`G
(
L
);

1044 
wh©
) {

1045 
LUA_GCSTOP
: {

1046 
g
->
g¸u¬ög
 = 0;

1049 
LUA_GCRESTART
: {

1050 
	`luaE_£tdebt
(
g
, 0);

1051 
g
->
g¸u¬ög
 = 1;

1054 
LUA_GCCOLLECT
: {

1055 
	`luaC_fuŒgc
(
L
, 0);

1058 
LUA_GCCOUNT
: {

1060 
ªs
 = 
	`ˇ°_öt
(
	`gëtŸÆbyãs
(
g
) >> 10);

1063 
LUA_GCCOUNTB
: {

1064 
ªs
 = 
	`ˇ°_öt
(
	`gëtŸÆbyãs
(
g
) & 0x3ff);

1067 
LUA_GCSTEP
: {

1068 
l_mem
 
debt
 = 1;

1069 
lu_byã
 
ﬁdru¬ög
 = 
g
->
g¸u¬ög
;

1070 
g
->
g¸u¬ög
 = 1;

1071 i‡(
d©a
 == 0) {

1072 
	`luaE_£tdebt
(
g
, -
GCSTEPSIZE
);

1073 
	`luaC_°ï
(
L
);

1076 
debt
 = 
	`ˇ°
(
l_mem
, 
d©a
Ë* 1024 + 
g
->
GCdebt
;

1077 
	`luaE_£tdebt
(
g
, 
debt
);

1078 
	`luaC_checkGC
(
L
);

1080 
g
->
g¸u¬ög
 = 
ﬁdru¬ög
;

1081 i‡(
debt
 > 0 && 
g
->
gc°©e
 =
GCS∑u£
)

1082 
ªs
 = 1;

1085 
LUA_GCSETPAUSE
: {

1086 
ªs
 = 
g
->
g˝au£
;

1087 
g
->
g˝au£
 = 
d©a
;

1090 
LUA_GCSETSTEPMUL
: {

1091 
ªs
 = 
g
->
gc°ïmul
;

1092 i‡(
d©a
 < 40) data = 40;

1093 
g
->
gc°ïmul
 = 
d©a
;

1096 
LUA_GCISRUNNING
: {

1097 
ªs
 = 
g
->
g¸u¬ög
;

1100 : 
ªs
 = -1;

1102 
	`lua_u∆ock
(
L
);

1103  
ªs
;

1104 
	}
}

1113 
LUA_API
 
	$lua_îr‹
 (
lua_Sèã
 *
L
) {

1114 
	`lua_lock
(
L
);

1115 
	`≠i_check√Àms
(
L
, 1);

1116 
	`luaG_îr‹msg
(
L
);

1119 
	}
}

1122 
LUA_API
 
	$lua_√xt
 (
lua_Sèã
 *
L
, 
idx
) {

1123 
StkId
 
t
;

1124 
m‹e
;

1125 
	`lua_lock
(
L
);

1126 
t
 = 
	`ödex2addr
(
L
, 
idx
);

1127 
	`≠i_check
(
L
, 
	`âi°abÀ
(
t
), "tableÉxpected");

1128 
m‹e
 = 
	`luaH_√xt
(
L
, 
	`hvÆue
(
t
), L->
t›
 - 1);

1129 i‡(
m‹e
) {

1130 
	`≠i_ö¸_t›
(
L
);

1133 
L
->
t›
 -= 1;

1134 
	`lua_u∆ock
(
L
);

1135  
m‹e
;

1136 
	}
}

1139 
LUA_API
 
	$lua_c⁄ˇt
 (
lua_Sèã
 *
L
, 
n
) {

1140 
	`lua_lock
(
L
);

1141 
	`≠i_check√Àms
(
L
, 
n
);

1142 i‡(
n
 >= 2) {

1143 
	`luaV_c⁄ˇt
(
L
, 
n
);

1145 i‡(
n
 == 0) {

1146 
	`£tsvÆue2s
(
L
, L->
t›
, 
	`luaS_√wl°r
(L, "", 0));

1147 
	`≠i_ö¸_t›
(
L
);

1150 
	`luaC_checkGC
(
L
);

1151 
	`lua_u∆ock
(
L
);

1152 
	}
}

1155 
LUA_API
 
	$lua_Àn
 (
lua_Sèã
 *
L
, 
idx
) {

1156 
StkId
 
t
;

1157 
	`lua_lock
(
L
);

1158 
t
 = 
	`ödex2addr
(
L
, 
idx
);

1159 
	`luaV_objÀn
(
L
, L->
t›
, 
t
);

1160 
	`≠i_ö¸_t›
(
L
);

1161 
	`lua_u∆ock
(
L
);

1162 
	}
}

1165 
LUA_API
 
lua_AŒoc
 
	$lua_gëÆlocf
 (
lua_Sèã
 *
L
, **
ud
) {

1166 
lua_AŒoc
 
f
;

1167 
	`lua_lock
(
L
);

1168 i‡(
ud
Ë*ud = 
	`G
(
L
)->ud;

1169 
f
 = 
	`G
(
L
)->
‰óŒoc
;

1170 
	`lua_u∆ock
(
L
);

1171  
f
;

1172 
	}
}

1175 
LUA_API
 
	$lua_£èŒocf
 (
lua_Sèã
 *
L
, 
lua_AŒoc
 
f
, *
ud
) {

1176 
	`lua_lock
(
L
);

1177 
	`G
(
L
)->
ud
 = ud;

1178 
	`G
(
L
)->
‰óŒoc
 = 
f
;

1179 
	`lua_u∆ock
(
L
);

1180 
	}
}

1183 
LUA_API
 *
	$lua_√wu£rd©a
 (
lua_Sèã
 *
L
, 
size_t
 
size
) {

1184 
Ud©a
 *
u
;

1185 
	`lua_lock
(
L
);

1186 
u
 = 
	`luaS_√wud©a
(
L
, 
size
);

1187 
	`£tuvÆue
(
L
, L->
t›
, 
u
);

1188 
	`≠i_ö¸_t›
(
L
);

1189 
	`luaC_checkGC
(
L
);

1190 
	`lua_u∆ock
(
L
);

1191  
	`gëud©amem
(
u
);

1192 
	}
}

1196 c⁄° *
	$aux_upvÆue
 (
StkId
 
fi
, 
n
, 
TVÆue
 **
vÆ
,

1197 
CClosuª
 **
ow√r
, 
UpVÆ
 **
uv
) {

1198 
	`ây≥
(
fi
)) {

1199 
LUA_TCCL
: {

1200 
CClosuª
 *
f
 = 
	`˛CvÆue
(
fi
);

1201 i‡(!(1 <
n
 &&Ç <
f
->
nupvÆues
)Ë 
NULL
;

1202 *
vÆ
 = &
f
->
upvÆue
[
n
-1];

1203 i‡(
ow√r
Ë*ow√∏
f
;

1206 
LUA_TLCL
: {

1207 
LClosuª
 *
f
 = 
	`˛LvÆue
(
fi
);

1208 
TSåög
 *
«me
;

1209 
PrŸo
 *
p
 = 
f
->p;

1210 i‡(!(1 <
n
 &&Ç <
p
->
sizeupvÆues
)Ë 
NULL
;

1211 *
vÆ
 = 
f
->
upvÆs
[
n
-1]->
v
;

1212 i‡(
uv
Ë*uv = 
f
->
upvÆs
[
n
 - 1];

1213 
«me
 = 
p
->
upvÆues
[
n
-1].name;

1214  (
«me
 =
NULL
Ë? "(*nÿ«me)" : 
	`gë°r
(name);

1216 :  
NULL
;

1218 
	}
}

1221 
LUA_API
 c⁄° *
	$lua_gëupvÆue
 (
lua_Sèã
 *
L
, 
funcödex
, 
n
) {

1222 c⁄° *
«me
;

1223 
TVÆue
 *
vÆ
 = 
NULL
;

1224 
	`lua_lock
(
L
);

1225 
«me
 = 
	`aux_upvÆue
(
	`ödex2addr
(
L
, 
funcödex
), 
n
, &
vÆ
, 
NULL
, NULL);

1226 i‡(
«me
) {

1227 
	`£tobj2s
(
L
, L->
t›
, 
vÆ
);

1228 
	`≠i_ö¸_t›
(
L
);

1230 
	`lua_u∆ock
(
L
);

1231  
«me
;

1232 
	}
}

1235 
LUA_API
 c⁄° *
	$lua_£tupvÆue
 (
lua_Sèã
 *
L
, 
funcödex
, 
n
) {

1236 c⁄° *
«me
;

1237 
TVÆue
 *
vÆ
 = 
NULL
;

1238 
CClosuª
 *
ow√r
 = 
NULL
;

1239 
UpVÆ
 *
uv
 = 
NULL
;

1240 
StkId
 
fi
;

1241 
	`lua_lock
(
L
);

1242 
fi
 = 
	`ödex2addr
(
L
, 
funcödex
);

1243 
	`≠i_check√Àms
(
L
, 1);

1244 
«me
 = 
	`aux_upvÆue
(
fi
, 
n
, &
vÆ
, &
ow√r
, &
uv
);

1245 i‡(
«me
) {

1246 
L
->
t›
--;

1247 
	`£tobj
(
L
, 
vÆ
, L->
t›
);

1248 i‡(
ow√r
Ë{ 
	`luaC_b¨rõr
(
L
, ow√r, L->
t›
); }

1249 i‡(
uv
Ë{ 
	`luaC_upvÆb¨rõr
(
L
, uv); }

1251 
	`lua_u∆ock
(
L
);

1252  
«me
;

1253 
	}
}

1256 
UpVÆ
 **
	$gëupvÆªf
 (
lua_Sèã
 *
L
, 
fidx
, 
n
, 
LClosuª
 **
pf
) {

1257 
LClosuª
 *
f
;

1258 
StkId
 
fi
 = 
	`ödex2addr
(
L
, 
fidx
);

1259 
	`≠i_check
(
L
, 
	`âisL˛osuª
(
fi
), "Lua functionÉxpected");

1260 
f
 = 
	`˛LvÆue
(
fi
);

1261 
	`≠i_check
(
L
, (1 <
n
 &&Ç <
f
->
p
->
sizeupvÆues
), "invalid upvalue index");

1262 i‡(
pf
Ë*p‡
f
;

1263  &
f
->
upvÆs
[
n
 - 1];

1264 
	}
}

1267 
LUA_API
 *
	$lua_upvÆueid
 (
lua_Sèã
 *
L
, 
fidx
, 
n
) {

1268 
StkId
 
fi
 = 
	`ödex2addr
(
L
, 
fidx
);

1269 
	`ây≥
(
fi
)) {

1270 
LUA_TLCL
: {

1271  *
	`gëupvÆªf
(
L
, 
fidx
, 
n
, 
NULL
);

1273 
LUA_TCCL
: {

1274 
CClosuª
 *
f
 = 
	`˛CvÆue
(
fi
);

1275 
	`≠i_check
(
L
, 1 <
n
 &&Ç <
f
->
nupvÆues
, "invalid upvalue index");

1276  &
f
->
upvÆue
[
n
 - 1];

1279 
	`≠i_check
(
L
, 0, "closureÉxpected");

1280  
NULL
;

1283 
	}
}

1286 
LUA_API
 
	$lua_upvÆuejoö
 (
lua_Sèã
 *
L
, 
fidx1
, 
n1
,

1287 
fidx2
, 
n2
) {

1288 
LClosuª
 *
f1
;

1289 
UpVÆ
 **
up1
 = 
	`gëupvÆªf
(
L
, 
fidx1
, 
n1
, &
f1
);

1290 
UpVÆ
 **
up2
 = 
	`gëupvÆªf
(
L
, 
fidx2
, 
n2
, 
NULL
);

1291 
	`luaC_upvdeccou¡
(
L
, *
up1
);

1292 *
up1
 = *
up2
;

1293 (*
up1
)->
ªfcou¡
++;

1294 i‡(
	`upis›í
(*
up1
)Ë(*up1)->
u
.
›í
.
touched
 = 1;

1295 
	`luaC_upvÆb¨rõr
(
L
, *
up1
);

1296 
	}
}

	@lib/lua/lua-5.3.4/src/lapi.h

7 #i‚de‡
œpi_h


8 
	#œpi_h


	)

11 
	~"Œimôs.h
"

12 
	~"l°©e.h
"

14 
	#≠i_ö¸_t›
(
L
Ë{L->
t›
++; 
	`≠i_check
(L, L->t› <L->
ci
->top, \

15 "°ack ovîÊow");}

	)

17 
	#adju°ªsu…s
(
L
,
ƒes
) \

18 { i‡((
ƒes
Ë=
LUA_MULTRET
 && 
L
->
ci
->
t›
 < L->t›ËL->ci->t› = L->t›; }

	)

20 
	#≠i_check√Àms
(
L
,
n
Ë
	`≠i_check
(L, (nË< (L->
t›
 - L->
ci
->
func
), \

21 "nŸÉnoughÉÀmít†öÅhê°ack")

	)

	@lib/lua/lua-5.3.4/src/lauxlib.c

7 
	#œuxlib_c


	)

8 
	#LUA_LIB


	)

10 
	~"Õªfix.h
"

13 
	~<î∫o.h
>

14 
	~<°d¨g.h
>

15 
	~<°dio.h
>

16 
	~<°dlib.h
>

17 
	~<°rög.h
>

25 
	~"lua.h
"

27 
	~"œuxlib.h
"

37 
	#LEVELS1
 10

	)

38 
	#LEVELS2
 11

	)

46 
	$födfõld
 (
lua_Sèã
 *
L
, 
objidx
, 
Àvñ
) {

47 i‡(
Àvñ
 =0 || !
	`lua_i°abÀ
(
L
, -1))

49 
	`lua_pushnû
(
L
);

50 
	`lua_√xt
(
L
, -2)) {

51 i‡(
	`lua_ty≥
(
L
, -2Ë=
LUA_TSTRING
) {

52 i‡(
	`lua_øwequÆ
(
L
, 
objidx
, -1)) {

53 
	`lua_p›
(
L
, 1);

56 i‡(
	`födfõld
(
L
, 
objidx
, 
Àvñ
 - 1)) {

57 
	`lua_ªmove
(
L
, -2);

58 
	`lua_pushlôîÆ
(
L
, ".");

59 
	`lua_ö£π
(
L
, -2);

60 
	`lua_c⁄ˇt
(
L
, 3);

64 
	`lua_p›
(
L
, 1);

67 
	}
}

73 
	$pushglobÆfun˙ame
 (
lua_Sèã
 *
L
, 
lua_Debug
 *
¨
) {

74 
t›
 = 
	`lua_gët›
(
L
);

75 
	`lua_gëöfo
(
L
, "f", 
¨
);

76 
	`lua_gëfõld
(
L
, 
LUA_REGISTRYINDEX
, 
LUA_LOADED_TABLE
);

77 i‡(
	`födfõld
(
L
, 
t›
 + 1, 2)) {

78 c⁄° *
«me
 = 
	`lua_to°rög
(
L
, -1);

79 i‡(
	`°∫cmp
(
«me
, "_G.", 3) == 0) {

80 
	`lua_push°rög
(
L
, 
«me
 + 3);

81 
	`lua_ªmove
(
L
, -2);

83 
	`lua_c›y
(
L
, -1, 
t›
 + 1);

84 
	`lua_p›
(
L
, 2);

88 
	`lua_£â›
(
L
, 
t›
);

91 
	}
}

94 
	$pushfun˙ame
 (
lua_Sèã
 *
L
, 
lua_Debug
 *
¨
) {

95 i‡(
	`pushglobÆfun˙ame
(
L
, 
¨
)) {

96 
	`lua_pushf°rög
(
L
, "fun˘i⁄ '%s'", 
	`lua_to°rög
(L, -1));

97 
	`lua_ªmove
(
L
, -2);

99 i‡(*
¨
->
«mewh©
 != '\0')

100 
	`lua_pushf°rög
(
L
, "%†'%s'", 
¨
->
«mewh©
,ár->
«me
);

101 i‡(*
¨
->
wh©
 == 'm')

102 
	`lua_pushlôîÆ
(
L
, "main chunk");

103 i‡(*
¨
->
wh©
 != 'C')

104 
	`lua_pushf°rög
(
L
, "fun˘i⁄ <%s:%d>", 
¨
->
sh‹t_§c
,ár->
löedeföed
);

106 
	`lua_pushlôîÆ
(
L
, "?");

107 
	}
}

110 
	$œ°Àvñ
 (
lua_Sèã
 *
L
) {

111 
lua_Debug
 
¨
;

112 
li
 = 1, 
À
 = 1;

114 
	`lua_gë°ack
(
L
, 
À
, &
¨
)Ë{ 
li
 =Üe;Üe *= 2; }

116 
li
 < 
À
) {

117 
m
 = (
li
 + 
À
)/2;

118 i‡(
	`lua_gë°ack
(
L
, 
m
, &
¨
)Ë
li
 = m + 1;

119 
À
 = 
m
;

121  
À
 - 1;

122 
	}
}

125 
LUALIB_API
 
	$luaL_åa˚back
 (
lua_Sèã
 *
L
,Üua_Sèã *
L1
,

126 c⁄° *
msg
, 
Àvñ
) {

127 
lua_Debug
 
¨
;

128 
t›
 = 
	`lua_gët›
(
L
);

129 
œ°
 = 
	`œ°Àvñ
(
L1
);

130 
n1
 = (
œ°
 - 
Àvñ
 > 
LEVELS1
 + 
LEVELS2
) ? LEVELS1 : -1;

131 i‡(
msg
)

132 
	`lua_pushf°rög
(
L
, "%s\n", 
msg
);

133 
	`luaL_check°ack
(
L
, 10, 
NULL
);

134 
	`lua_pushlôîÆ
(
L
, "stackÅraceback:");

135 
	`lua_gë°ack
(
L1
, 
Àvñ
++, &
¨
)) {

136 i‡(
n1
-- == 0) {

137 
	`lua_pushlôîÆ
(
L
, "\n\t...");

138 
Àvñ
 = 
œ°
 - 
LEVELS2
 + 1;

141 
	`lua_gëöfo
(
L1
, "S t", &
¨
);

142 
	`lua_pushf°rög
(
L
, "\n\t%s:", 
¨
.
sh‹t_§c
);

143 i‡(
¨
.
cuºíéöe
 > 0)

144 
	`lua_pushf°rög
(
L
, "%d:", 
¨
.
cuºíéöe
);

145 
	`lua_pushlôîÆ
(
L
, " in ");

146 
	`pushfun˙ame
(
L
, &
¨
);

147 i‡(
¨
.
i°aûˇŒ
)

148 
	`lua_pushlôîÆ
(
L
, "\n\t(...tail calls...)");

149 
	`lua_c⁄ˇt
(
L
, 
	`lua_gët›
(LË- 
t›
);

152 
	`lua_c⁄ˇt
(
L
, 
	`lua_gët›
(LË- 
t›
);

153 
	}
}

164 
LUALIB_API
 
	$luaL_¨gîr‹
 (
lua_Sèã
 *
L
, 
¨g
, c⁄° *
exåamsg
) {

165 
lua_Debug
 
¨
;

166 i‡(!
	`lua_gë°ack
(
L
, 0, &
¨
))

167  
	`luaL_îr‹
(
L
, "badárgumíà#%d (%s)", 
¨g
, 
exåamsg
);

168 
	`lua_gëöfo
(
L
, "n", &
¨
);

169 i‡(
	`°rcmp
(
¨
.
«mewh©
, "method") == 0) {

170 
¨g
--;

171 i‡(
¨g
 == 0)

172  
	`luaL_îr‹
(
L
, "calling '%s' on bad self (%s)",

173 
¨
.
«me
, 
exåamsg
);

175 i‡(
¨
.
«me
 =
NULL
)

176 
¨
.
«me
 = (
	`pushglobÆfun˙ame
(
L
, &¨)Ë? 
	`lua_to°rög
(L, -1) : "?";

177  
	`luaL_îr‹
(
L
, "badárgument #%dÅo '%s' (%s)",

178 
¨g
, 
¨
.
«me
, 
exåamsg
);

179 
	}
}

182 
	$ty≥îr‹
 (
lua_Sèã
 *
L
, 
¨g
, c⁄° *
äame
) {

183 c⁄° *
msg
;

184 c⁄° *
ty≥¨g
;

185 i‡(
	`luaL_gëmëafõld
(
L
, 
¨g
, "__«me"Ë=
LUA_TSTRING
)

186 
ty≥¨g
 = 
	`lua_to°rög
(
L
, -1);

187 i‡(
	`lua_ty≥
(
L
, 
¨g
Ë=
LUA_TLIGHTUSERDATA
)

188 
ty≥¨g
 = "light userdata";

190 
ty≥¨g
 = 
	`luaL_ty≥«me
(
L
, 
¨g
);

191 
msg
 = 
	`lua_pushf°rög
(
L
, "%†ex≥˘ed, gŸ %s", 
äame
, 
ty≥¨g
);

192  
	`luaL_¨gîr‹
(
L
, 
¨g
, 
msg
);

193 
	}
}

196 
	$èg_îr‹
 (
lua_Sèã
 *
L
, 
¨g
, 
èg
) {

197 
	`ty≥îr‹
(
L
, 
¨g
, 
	`lua_ty≥«me
(L, 
èg
));

198 
	}
}

205 
LUALIB_API
 
	$luaL_whîe
 (
lua_Sèã
 *
L
, 
Àvñ
) {

206 
lua_Debug
 
¨
;

207 i‡(
	`lua_gë°ack
(
L
, 
Àvñ
, &
¨
)) {

208 
	`lua_gëöfo
(
L
, "Sl", &
¨
);

209 i‡(
¨
.
cuºíéöe
 > 0) {

210 
	`lua_pushf°rög
(
L
, "%s:%d: ", 
¨
.
sh‹t_§c
,ár.
cuºíéöe
);

214 
	`lua_pushf°rög
(
L
, "");

215 
	}
}

223 
LUALIB_API
 
	$luaL_îr‹
 (
lua_Sèã
 *
L
, c⁄° *
fmt
, ...) {

224 
va_li°
 
¨gp
;

225 
	`va_°¨t
(
¨gp
, 
fmt
);

226 
	`luaL_whîe
(
L
, 1);

227 
	`lua_pushvf°rög
(
L
, 
fmt
, 
¨gp
);

228 
	`va_íd
(
¨gp
);

229 
	`lua_c⁄ˇt
(
L
, 2);

230  
	`lua_îr‹
(
L
);

231 
	}
}

234 
LUALIB_API
 
	$luaL_fûîesu…
 (
lua_Sèã
 *
L
, 
°©
, c⁄° *
‚ame
) {

235 
í
 = 
î∫o
;

236 i‡(
°©
) {

237 
	`lua_pushboﬁón
(
L
, 1);

241 
	`lua_pushnû
(
L
);

242 i‡(
‚ame
)

243 
	`lua_pushf°rög
(
L
, "%s: %s", 
‚ame
, 
	`°ªº‹
(
í
));

245 
	`lua_push°rög
(
L
, 
	`°ªº‹
(
í
));

246 
	`lua_pushöãgî
(
L
, 
í
);

249 
	}
}

252 #i‡!
deföed
(
l_ö•e˘°©
)

254 #i‡
deföed
(
LUA_USE_POSIX
)

256 
	~<sys/waô.h
>

261 
	#l_ö•e˘°©
(
°©
,
wh©
) \

262 i‡(
	`WIFEXITED
(
°©
)Ë{ sèà
	`WEXITSTATUS
(stat); } \

263 i‡(
	`WIFSIGNALED
(
°©
)Ë{ sèà
	`WTERMSIG
(°©); 
wh©
 = "sig«l"; }

	)

267 
	#l_ö•e˘°©
(
°©
,
wh©
Ë

	)

274 
LUALIB_API
 
	$luaL_exe¸esu…
 (
lua_Sèã
 *
L
, 
°©
) {

275 c⁄° *
wh©
 = "exit";

276 i‡(
°©
 == -1)

277  
	`luaL_fûîesu…
(
L
, 0, 
NULL
);

279 
	`l_ö•e˘°©
(
°©
, 
wh©
);

280 i‡(*
wh©
 ='e' && 
°©
 == 0)

281 
	`lua_pushboﬁón
(
L
, 1);

283 
	`lua_pushnû
(
L
);

284 
	`lua_push°rög
(
L
, 
wh©
);

285 
	`lua_pushöãgî
(
L
, 
°©
);

288 
	}
}

299 
LUALIB_API
 
	$luaL_√wmë©abÀ
 (
lua_Sèã
 *
L
, c⁄° *
äame
) {

300 i‡(
	`luaL_gëmë©abÀ
(
L
, 
äame
Ë!
LUA_TNIL
)

302 
	`lua_p›
(
L
, 1);

303 
	`lua_¸óãèbÀ
(
L
, 0, 2);

304 
	`lua_push°rög
(
L
, 
äame
);

305 
	`lua_£tfõld
(
L
, -2, "__name");

306 
	`lua_pushvÆue
(
L
, -1);

307 
	`lua_£tfõld
(
L
, 
LUA_REGISTRYINDEX
, 
äame
);

309 
	}
}

312 
LUALIB_API
 
	$luaL_£tmë©abÀ
 (
lua_Sèã
 *
L
, c⁄° *
äame
) {

313 
	`luaL_gëmë©abÀ
(
L
, 
äame
);

314 
	`lua_£tmë©abÀ
(
L
, -2);

315 
	}
}

318 
LUALIB_API
 *
	$luaL_ã°ud©a
 (
lua_Sèã
 *
L
, 
ud
, c⁄° *
äame
) {

319 *
p
 = 
	`lua_tou£rd©a
(
L
, 
ud
);

320 i‡(
p
 !
NULL
) {

321 i‡(
	`lua_gëmë©abÀ
(
L
, 
ud
)) {

322 
	`luaL_gëmë©abÀ
(
L
, 
äame
);

323 i‡(!
	`lua_øwequÆ
(
L
, -1, -2))

324 
p
 = 
NULL
;

325 
	`lua_p›
(
L
, 2);

326  
p
;

329  
NULL
;

330 
	}
}

333 
LUALIB_API
 *
	$luaL_checkud©a
 (
lua_Sèã
 *
L
, 
ud
, c⁄° *
äame
) {

334 *
p
 = 
	`luaL_ã°ud©a
(
L
, 
ud
, 
äame
);

335 i‡(
p
 =
NULL
Ë
	`ty≥îr‹
(
L
, 
ud
, 
äame
);

336  
p
;

337 
	}
}

348 
LUALIB_API
 
	$luaL_check›ti⁄
 (
lua_Sèã
 *
L
, 
¨g
, c⁄° *
def
,

349 c⁄° *c⁄° 
l°
[]) {

350 c⁄° *
«me
 = (
def
Ë? 
	`luaL_›t°rög
(
L
, 
¨g
, def) :

351 
	`luaL_check°rög
(
L
, 
¨g
);

352 
i
;

353 
i
=0; 
l°
[i]; i++)

354 i‡(
	`°rcmp
(
l°
[
i
], 
«me
) == 0)

355  
i
;

356  
	`luaL_¨gîr‹
(
L
, 
¨g
,

357 
	`lua_pushf°rög
(
L
, "övÆid o±i⁄ '%s'", 
«me
));

358 
	}
}

368 
LUALIB_API
 
	$luaL_check°ack
 (
lua_Sèã
 *
L
, 
•a˚
, c⁄° *
msg
) {

369 i‡(!
	`lua_check°ack
(
L
, 
•a˚
)) {

370 i‡(
msg
)

371 
	`luaL_îr‹
(
L
, "°ack ovîÊow (%s)", 
msg
);

373 
	`luaL_îr‹
(
L
, "stack overflow");

375 
	}
}

378 
LUALIB_API
 
	$luaL_checkty≥
 (
lua_Sèã
 *
L
, 
¨g
, 
t
) {

379 i‡(
	`lua_ty≥
(
L
, 
¨g
Ë!
t
)

380 
	`èg_îr‹
(
L
, 
¨g
, 
t
);

381 
	}
}

384 
LUALIB_API
 
	$luaL_check™y
 (
lua_Sèã
 *
L
, 
¨g
) {

385 i‡(
	`lua_ty≥
(
L
, 
¨g
Ë=
LUA_TNONE
)

386 
	`luaL_¨gîr‹
(
L
, 
¨g
, "valueÉxpected");

387 
	}
}

390 
LUALIB_API
 c⁄° *
	$luaL_checkl°rög
 (
lua_Sèã
 *
L
, 
¨g
, 
size_t
 *
Àn
) {

391 c⁄° *
s
 = 
	`lua_tﬁ°rög
(
L
, 
¨g
, 
Àn
);

392 i‡(!
s
Ë
	`èg_îr‹
(
L
, 
¨g
, 
LUA_TSTRING
);

393  
s
;

394 
	}
}

397 
LUALIB_API
 c⁄° *
	$luaL_›é°rög
 (
lua_Sèã
 *
L
, 
¨g
,

398 c⁄° *
def
, 
size_t
 *
Àn
) {

399 i‡(
	`lua_i¢⁄e‹nû
(
L
, 
¨g
)) {

400 i‡(
Àn
)

401 *
Àn
 = (
def
 ? 
	`°æí
(def) : 0);

402  
def
;

404  
	`luaL_checkl°rög
(
L
, 
¨g
, 
Àn
);

405 
	}
}

408 
LUALIB_API
 
lua_Numbî
 
	$luaL_checknumbî
 (
lua_Sèã
 *
L
, 
¨g
) {

409 
i¢um
;

410 
lua_Numbî
 
d
 = 
	`lua_t⁄umbîx
(
L
, 
¨g
, &
i¢um
);

411 i‡(!
i¢um
)

412 
	`èg_îr‹
(
L
, 
¨g
, 
LUA_TNUMBER
);

413  
d
;

414 
	}
}

417 
LUALIB_API
 
lua_Numbî
 
	$luaL_›äumbî
 (
lua_Sèã
 *
L
, 
¨g
, 
lua_Numbî
 
def
) {

418  
	`luaL_›t
(
L
, 
luaL_checknumbî
, 
¨g
, 
def
);

419 
	}
}

422 
	$öãº‹
 (
lua_Sèã
 *
L
, 
¨g
) {

423 i‡(
	`lua_i¢umbî
(
L
, 
¨g
))

424 
	`luaL_¨gîr‹
(
L
, 
¨g
, "number hasÇo integerÑepresentation");

426 
	`èg_îr‹
(
L
, 
¨g
, 
LUA_TNUMBER
);

427 
	}
}

430 
LUALIB_API
 
lua_I¡egî
 
	$luaL_checköãgî
 (
lua_Sèã
 *
L
, 
¨g
) {

431 
i¢um
;

432 
lua_I¡egî
 
d
 = 
	`lua_toöãgîx
(
L
, 
¨g
, &
i¢um
);

433 i‡(!
i¢um
) {

434 
	`öãº‹
(
L
, 
¨g
);

436  
d
;

437 
	}
}

440 
LUALIB_API
 
lua_I¡egî
 
	$luaL_›töãgî
 (
lua_Sèã
 *
L
, 
¨g
,

441 
lua_I¡egî
 
def
) {

442  
	`luaL_›t
(
L
, 
luaL_checköãgî
, 
¨g
, 
def
);

443 
	}
}

455 
	sUBox
 {

456 *
	mbox
;

457 
size_t
 
	mbsize
;

458 } 
	tUBox
;

461 *
	$ªsizebox
 (
lua_Sèã
 *
L
, 
idx
, 
size_t
 
√wsize
) {

462 *
ud
;

463 
lua_AŒoc
 
Ælocf
 = 
	`lua_gëÆlocf
(
L
, &
ud
);

464 
UBox
 *
box
 = (UBox *)
	`lua_tou£rd©a
(
L
, 
idx
);

465 *
ãmp
 = 
	`Ælocf
(
ud
, 
box
->box, box->
bsize
, 
√wsize
);

466 i‡(
ãmp
 =
NULL
 && 
√wsize
 > 0) {

467 
	`ªsizebox
(
L
, 
idx
, 0);

468 
	`luaL_îr‹
(
L
, "notÉnough memory for bufferállocation");

470 
box
->box = 
ãmp
;

471 
box
->
bsize
 = 
√wsize
;

472  
ãmp
;

473 
	}
}

476 
	$boxgc
 (
lua_Sèã
 *
L
) {

477 
	`ªsizebox
(
L
, 1, 0);

479 
	}
}

482 *
	$√wbox
 (
lua_Sèã
 *
L
, 
size_t
 
√wsize
) {

483 
UBox
 *
box
 = (UBox *)
	`lua_√wu£rd©a
(
L
, (UBox));

484 
box
->box = 
NULL
;

485 
box
->
bsize
 = 0;

486 i‡(
	`luaL_√wmë©abÀ
(
L
, "LUABOX")) {

487 
	`lua_pushcfun˘i⁄
(
L
, 
boxgc
);

488 
	`lua_£tfõld
(
L
, -2, "__gc");

490 
	`lua_£tmë©abÀ
(
L
, -2);

491  
	`ªsizebox
(
L
, -1, 
√wsize
);

492 
	}
}

499 
	#buff⁄°ack
(
B
Ë((B)->
b
 !(B)->
öôb
)

	)

505 
LUALIB_API
 *
	$luaL_¥ïbuffsize
 (
luaL_Buf„r
 *
B
, 
size_t
 
sz
) {

506 
lua_Sèã
 *
L
 = 
B
->L;

507 i‡(
B
->
size
 - B->
n
 < 
sz
) {

508 *
√wbuff
;

509 
size_t
 
√wsize
 = 
B
->
size
 * 2;

510 i‡(
√wsize
 - 
B
->
n
 < 
sz
)

511 
√wsize
 = 
B
->
n
 + 
sz
;

512 i‡(
√wsize
 < 
B
->
n
 ||Çewsizê- B->¿< 
sz
)

513 
	`luaL_îr‹
(
L
, "bufferÅooÜarge");

515 i‡(
	`buff⁄°ack
(
B
))

516 
√wbuff
 = (*)
	`ªsizebox
(
L
, -1, 
√wsize
);

518 
√wbuff
 = (*)
	`√wbox
(
L
, 
√wsize
);

519 
	`mem˝y
(
√wbuff
, 
B
->
b
, B->
n
 * ());

521 
B
->
b
 = 
√wbuff
;

522 
B
->
size
 = 
√wsize
;

524  &
B
->
b
[B->
n
];

525 
	}
}

528 
LUALIB_API
 
	$luaL_addl°rög
 (
luaL_Buf„r
 *
B
, c⁄° *
s
, 
size_t
 
l
) {

529 i‡(
l
 > 0) {

530 *
b
 = 
	`luaL_¥ïbuffsize
(
B
, 
l
);

531 
	`mem˝y
(
b
, 
s
, 
l
 * ());

532 
	`luaL_addsize
(
B
, 
l
);

534 
	}
}

537 
LUALIB_API
 
	$luaL_add°rög
 (
luaL_Buf„r
 *
B
, c⁄° *
s
) {

538 
	`luaL_addl°rög
(
B
, 
s
, 
	`°æí
(s));

539 
	}
}

542 
LUALIB_API
 
	$luaL_pushªsu…
 (
luaL_Buf„r
 *
B
) {

543 
lua_Sèã
 *
L
 = 
B
->L;

544 
	`lua_pushl°rög
(
L
, 
B
->
b
, B->
n
);

545 i‡(
	`buff⁄°ack
(
B
)) {

546 
	`ªsizebox
(
L
, -2, 0);

547 
	`lua_ªmove
(
L
, -2);

549 
	}
}

552 
LUALIB_API
 
	$luaL_pushªsu…size
 (
luaL_Buf„r
 *
B
, 
size_t
 
sz
) {

553 
	`luaL_addsize
(
B
, 
sz
);

554 
	`luaL_pushªsu…
(
B
);

555 
	}
}

558 
LUALIB_API
 
	$luaL_addvÆue
 (
luaL_Buf„r
 *
B
) {

559 
lua_Sèã
 *
L
 = 
B
->L;

560 
size_t
 
l
;

561 c⁄° *
s
 = 
	`lua_tﬁ°rög
(
L
, -1, &
l
);

562 i‡(
	`buff⁄°ack
(
B
))

563 
	`lua_ö£π
(
L
, -2);

564 
	`luaL_addl°rög
(
B
, 
s
, 
l
);

565 
	`lua_ªmove
(
L
, (
	`buff⁄°ack
(
B
)) ? -2 : -1);

566 
	}
}

569 
LUALIB_API
 
	$luaL_bufföô
 (
lua_Sèã
 *
L
, 
luaL_Buf„r
 *
B
) {

570 
B
->
L
 = L;

571 
B
->
b
 = B->
öôb
;

572 
B
->
n
 = 0;

573 
B
->
size
 = 
LUAL_BUFFERSIZE
;

574 
	}
}

577 
LUALIB_API
 *
	$luaL_bufföôsize
 (
lua_Sèã
 *
L
, 
luaL_Buf„r
 *
B
, 
size_t
 
sz
) {

578 
	`luaL_bufföô
(
L
, 
B
);

579  
	`luaL_¥ïbuffsize
(
B
, 
sz
);

580 
	}
}

592 
	#‰ìli°
 0

	)

595 
LUALIB_API
 
	$luaL_ªf
 (
lua_Sèã
 *
L
, 
t
) {

596 
ªf
;

597 i‡(
	`lua_i¢û
(
L
, -1)) {

598 
	`lua_p›
(
L
, 1);

599  
LUA_REFNIL
;

601 
t
 = 
	`lua_absödex
(
L
,Å);

602 
	`lua_øwgëi
(
L
, 
t
, 
‰ìli°
);

603 
ªf
 = ()
	`lua_toöãgî
(
L
, -1);

604 
	`lua_p›
(
L
, 1);

605 i‡(
ªf
 != 0) {

606 
	`lua_øwgëi
(
L
, 
t
, 
ªf
);

607 
	`lua_øw£ti
(
L
, 
t
, 
‰ìli°
);

610 
ªf
 = ()
	`lua_øwÀn
(
L
, 
t
) + 1;

611 
	`lua_øw£ti
(
L
, 
t
, 
ªf
);

612  
ªf
;

613 
	}
}

616 
LUALIB_API
 
	$luaL_uƒef
 (
lua_Sèã
 *
L
, 
t
, 
ªf
) {

617 i‡(
ªf
 >= 0) {

618 
t
 = 
	`lua_absödex
(
L
,Å);

619 
	`lua_øwgëi
(
L
, 
t
, 
‰ìli°
);

620 
	`lua_øw£ti
(
L
, 
t
, 
ªf
);

621 
	`lua_pushöãgî
(
L
, 
ªf
);

622 
	`lua_øw£ti
(
L
, 
t
, 
‰ìli°
);

624 
	}
}

635 
	sLﬂdF
 {

636 
	mn
;

637 
FILE
 *
	mf
;

638 
	mbuff
[
BUFSIZ
];

639 } 
	tLﬂdF
;

642 c⁄° *
	$gëF
 (
lua_Sèã
 *
L
, *
ud
, 
size_t
 *
size
) {

643 
LﬂdF
 *
lf
 = (LﬂdF *)
ud
;

644 ()
L
;

645 i‡(
lf
->
n
 > 0) {

646 *
size
 = 
lf
->
n
;

647 
lf
->
n
 = 0;

653 i‡(
	`„of
(
lf
->
f
)Ë 
NULL
;

654 *
size
 = 
	`‰ód
(
lf
->
buff
, 1, ÷f->buff),Üf->
f
);

656  
lf
->
buff
;

657 
	}
}

660 
	$îrfûe
 (
lua_Sèã
 *
L
, c⁄° *
wh©
, 
‚ameödex
) {

661 c⁄° *
£º
 = 
	`°ªº‹
(
î∫o
);

662 c⁄° *
fûíame
 = 
	`lua_to°rög
(
L
, 
‚ameödex
) + 1;

663 
	`lua_pushf°rög
(
L
, "ˇ¬Ÿ %†%s: %s", 
wh©
, 
fûíame
, 
£º
);

664 
	`lua_ªmove
(
L
, 
‚ameödex
);

665  
LUA_ERRFILE
;

666 
	}
}

669 
	$skùBOM
 (
LﬂdF
 *
lf
) {

670 c⁄° *
p
 = "\xEF\xBB\xBF";

671 
c
;

672 
lf
->
n
 = 0;

674 
c
 = 
	`gëc
(
lf
->
f
);

675 i‡(
c
 =
EOF
 || c !*(c⁄° *)
p
++)  c;

676 
lf
->
buff
[lf->
n
++] = 
c
;

677 } *
p
 != '\0');

678 
lf
->
n
 = 0;

679  
	`gëc
(
lf
->
f
);

680 
	}
}

690 
	$skùcommít
 (
LﬂdF
 *
lf
, *
˝
) {

691 
c
 = *
˝
 = 
	`skùBOM
(
lf
);

692 i‡(
c
 == '#') {

694 
c
 = 
	`gëc
(
lf
->
f
);

695 } 
c
 !
EOF
 && c != '\n');

696 *
˝
 = 
	`gëc
(
lf
->
f
);

700 
	}
}

703 
LUALIB_API
 
	$luaL_lﬂdfûex
 (
lua_Sèã
 *
L
, c⁄° *
fûíame
,

704 c⁄° *
mode
) {

705 
LﬂdF
 
lf
;

706 
°©us
, 
ªad°©us
;

707 
c
;

708 
‚ameödex
 = 
	`lua_gët›
(
L
) + 1;

709 i‡(
fûíame
 =
NULL
) {

710 
	`lua_pushlôîÆ
(
L
, "=stdin");

711 
lf
.
f
 = 
°dö
;

714 
	`lua_pushf°rög
(
L
, "@%s", 
fûíame
);

715 
lf
.
f
 = 
	`f›í
(
fûíame
, "r");

716 i‡(
lf
.
f
 =
NULL
Ë 
	`îrfûe
(
L
, "›í", 
‚ameödex
);

718 i‡(
	`skùcommít
(&
lf
, &
c
))

719 
lf
.
buff
[lf.
n
++] = '\n';

720 i‡(
c
 =
LUA_SIGNATURE
[0] && 
fûíame
) {

721 
lf
.
f
 = 
	`‰e›í
(
fûíame
, "rb",Üf.f);

722 i‡(
lf
.
f
 =
NULL
Ë 
	`îrfûe
(
L
, "ª›í", 
‚ameödex
);

723 
	`skùcommít
(&
lf
, &
c
);

725 i‡(
c
 !
EOF
)

726 
lf
.
buff
[lf.
n
++] = 
c
;

727 
°©us
 = 
	`lua_lﬂd
(
L
, 
gëF
, &
lf
, 
	`lua_to°rög
(L, -1), 
mode
);

728 
ªad°©us
 = 
	`„º‹
(
lf
.
f
);

729 i‡(
fûíame
Ë
	`f˛o£
(
lf
.
f
);

730 i‡(
ªad°©us
) {

731 
	`lua_£â›
(
L
, 
‚ameödex
);

732  
	`îrfûe
(
L
, "ªad", 
‚ameödex
);

734 
	`lua_ªmove
(
L
, 
‚ameödex
);

735  
°©us
;

736 
	}
}

739 
	sLﬂdS
 {

740 c⁄° *
	ms
;

741 
size_t
 
	msize
;

742 } 
	tLﬂdS
;

745 c⁄° *
	$gëS
 (
lua_Sèã
 *
L
, *
ud
, 
size_t
 *
size
) {

746 
LﬂdS
 *
ls
 = (LﬂdS *)
ud
;

747 ()
L
;

748 i‡(
ls
->
size
 =0Ë 
NULL
;

749 *
size
 = 
ls
->size;

750 
ls
->
size
 = 0;

751  
ls
->
s
;

752 
	}
}

755 
LUALIB_API
 
	$luaL_lﬂdbuf„rx
 (
lua_Sèã
 *
L
, c⁄° *
buff
, 
size_t
 
size
,

756 c⁄° *
«me
, c⁄° *
mode
) {

757 
LﬂdS
 
ls
;

758 
ls
.
s
 = 
buff
;

759 
ls
.
size
 = size;

760  
	`lua_lﬂd
(
L
, 
gëS
, &
ls
, 
«me
, 
mode
);

761 
	}
}

764 
LUALIB_API
 
	$luaL_lﬂd°rög
 (
lua_Sèã
 *
L
, c⁄° *
s
) {

765  
	`luaL_lﬂdbuf„r
(
L
, 
s
, 
	`°æí
(s), s);

766 
	}
}

772 
LUALIB_API
 
	$luaL_gëmëafõld
 (
lua_Sèã
 *
L
, 
obj
, c⁄° *
evít
) {

773 i‡(!
	`lua_gëmë©abÀ
(
L
, 
obj
))

774  
LUA_TNIL
;

776 
â
;

777 
	`lua_push°rög
(
L
, 
evít
);

778 
â
 = 
	`lua_øwgë
(
L
, -2);

779 i‡(
â
 =
LUA_TNIL
)

780 
	`lua_p›
(
L
, 2);

782 
	`lua_ªmove
(
L
, -2);

783  
â
;

785 
	}
}

788 
LUALIB_API
 
	$luaL_ˇŒmëa
 (
lua_Sèã
 *
L
, 
obj
, c⁄° *
evít
) {

789 
obj
 = 
	`lua_absödex
(
L
, obj);

790 i‡(
	`luaL_gëmëafõld
(
L
, 
obj
, 
evít
Ë=
LUA_TNIL
)

792 
	`lua_pushvÆue
(
L
, 
obj
);

793 
	`lua_ˇŒ
(
L
, 1, 1);

795 
	}
}

798 
LUALIB_API
 
lua_I¡egî
 
	$luaL_Àn
 (
lua_Sèã
 *
L
, 
idx
) {

799 
lua_I¡egî
 
l
;

800 
i¢um
;

801 
	`lua_Àn
(
L
, 
idx
);

802 
l
 = 
	`lua_toöãgîx
(
L
, -1, &
i¢um
);

803 i‡(!
i¢um
)

804 
	`luaL_îr‹
(
L
, "objectÜength isÇotán integer");

805 
	`lua_p›
(
L
, 1);

806  
l
;

807 
	}
}

810 
LUALIB_API
 c⁄° *
	$luaL_tﬁ°rög
 (
lua_Sèã
 *
L
, 
idx
, 
size_t
 *
Àn
) {

811 i‡(
	`luaL_ˇŒmëa
(
L
, 
idx
, "__tostring")) {

812 i‡(!
	`lua_is°rög
(
L
, -1))

813 
	`luaL_îr‹
(
L
, "'__tostring' mustÑeturná string");

816 
	`lua_ty≥
(
L
, 
idx
)) {

817 
LUA_TNUMBER
: {

818 i‡(
	`lua_isöãgî
(
L
, 
idx
))

819 
	`lua_pushf°rög
(
L
, "%I", (
LUAI_UACINT
)
	`lua_toöãgî
(L, 
idx
));

821 
	`lua_pushf°rög
(
L
, "%f", (
LUAI_UACNUMBER
)
	`lua_t⁄umbî
(L, 
idx
));

824 
LUA_TSTRING
:

825 
	`lua_pushvÆue
(
L
, 
idx
);

827 
LUA_TBOOLEAN
:

828 
	`lua_push°rög
(
L
, (
	`lua_toboﬁón
(L, 
idx
) ? "true" : "false"));

830 
LUA_TNIL
:

831 
	`lua_pushlôîÆ
(
L
, "nil");

834 
â
 = 
	`luaL_gëmëafõld
(
L
, 
idx
, "__name");

835 c⁄° *
köd
 = (
â
 =
LUA_TSTRING
Ë? 
	`lua_to°rög
(
L
, -1) :

836 
	`luaL_ty≥«me
(
L
, 
idx
);

837 
	`lua_pushf°rög
(
L
, "%s: %p", 
köd
, 
	`lua_t›oöãr
(L, 
idx
));

838 i‡(
â
 !
LUA_TNIL
)

839 
	`lua_ªmove
(
L
, -2);

844  
	`lua_tﬁ°rög
(
L
, -1, 
Àn
);

845 
	}
}

853 #i‡
deföed
(
LUA_COMPAT_MODULE
)

855 c⁄° *
	$luaL_födèbÀ
 (
lua_Sèã
 *
L
, 
idx
,

856 c⁄° *
‚ame
, 
szhöt
) {

857 c⁄° *
e
;

858 i‡(
idx
Ë
	`lua_pushvÆue
(
L
, idx);

860 
e
 = 
	`°rchr
(
‚ame
, '.');

861 i‡(
e
 =
NULL
Ëê
‚ame
 + 
	`°æí
(fname);

862 
	`lua_pushl°rög
(
L
, 
‚ame
, 
e
 - fname);

863 i‡(
	`lua_øwgë
(
L
, -2Ë=
LUA_TNIL
) {

864 
	`lua_p›
(
L
, 1);

865 
	`lua_¸óãèbÀ
(
L
, 0, (*
e
 ='.' ? 1 : 
szhöt
));

866 
	`lua_pushl°rög
(
L
, 
‚ame
, 
e
 - fname);

867 
	`lua_pushvÆue
(
L
, -2);

868 
	`lua_£âabÀ
(
L
, -4);

870 i‡(!
	`lua_i°abÀ
(
L
, -1)) {

871 
	`lua_p›
(
L
, 2);

872  
‚ame
;

874 
	`lua_ªmove
(
L
, -2);

875 
‚ame
 = 
e
 + 1;

876 } *
e
 == '.');

877  
NULL
;

878 
	}
}

884 
	$libsize
 (c⁄° 
luaL_Reg
 *
l
) {

885 
size
 = 0;

886 ; 
l
 &&Ü->
«me
;Ü++Ë
size
++;

887  
size
;

888 
	}
}

897 
LUALIB_API
 
	$luaL_pushmoduÀ
 (
lua_Sèã
 *
L
, c⁄° *
mod«me
,

898 
sizehöt
) {

899 
	`luaL_födèbÀ
(
L
, 
LUA_REGISTRYINDEX
, 
LUA_LOADED_TABLE
, 1);

900 i‡(
	`lua_gëfõld
(
L
, -1, 
mod«me
Ë!
LUA_TTABLE
) {

901 
	`lua_p›
(
L
, 1);

903 
	`lua_pushglobÆèbÀ
(
L
);

904 i‡(
	`luaL_födèbÀ
(
L
, 0, 
mod«me
, 
sizehöt
Ë!
NULL
)

905 
	`luaL_îr‹
(
L
, "«mêc⁄Êi˘ f‹ moduÀ '%s'", 
mod«me
);

906 
	`lua_pushvÆue
(
L
, -1);

907 
	`lua_£tfõld
(
L
, -3, 
mod«me
);

909 
	`lua_ªmove
(
L
, -2);

910 
	}
}

913 
LUALIB_API
 
	$luaL_›ílib
 (
lua_Sèã
 *
L
, c⁄° *
lib«me
,

914 c⁄° 
luaL_Reg
 *
l
, 
nup
) {

915 
	`luaL_checkvîsi⁄
(
L
);

916 i‡(
lib«me
) {

917 
	`luaL_pushmoduÀ
(
L
, 
lib«me
, 
	`libsize
(
l
));

918 
	`lua_ö£π
(
L
, -(
nup
 + 1));

920 i‡(
l
)

921 
	`luaL_£tfuncs
(
L
, 
l
, 
nup
);

923 
	`lua_p›
(
L
, 
nup
);

924 
	}
}

934 
LUALIB_API
 
	$luaL_£tfuncs
 (
lua_Sèã
 *
L
, c⁄° 
luaL_Reg
 *
l
, 
nup
) {

935 
	`luaL_check°ack
(
L
, 
nup
, "too many upvalues");

936 ; 
l
->
«me
 !
NULL
;Ü++) {

937 
i
;

938 
i
 = 0; i < 
nup
; i++)

939 
	`lua_pushvÆue
(
L
, -
nup
);

940 
	`lua_pushc˛osuª
(
L
, 
l
->
func
, 
nup
);

941 
	`lua_£tfõld
(
L
, -(
nup
 + 2), 
l
->
«me
);

943 
	`lua_p›
(
L
, 
nup
);

944 
	}
}

951 
LUALIB_API
 
	$luaL_gësubèbÀ
 (
lua_Sèã
 *
L
, 
idx
, c⁄° *
‚ame
) {

952 i‡(
	`lua_gëfõld
(
L
, 
idx
, 
‚ame
Ë=
LUA_TTABLE
)

955 
	`lua_p›
(
L
, 1);

956 
idx
 = 
	`lua_absödex
(
L
, idx);

957 
	`lua_√wèbÀ
(
L
);

958 
	`lua_pushvÆue
(
L
, -1);

959 
	`lua_£tfõld
(
L
, 
idx
, 
‚ame
);

962 
	}
}

971 
LUALIB_API
 
	$luaL_ªquúef
 (
lua_Sèã
 *
L
, c⁄° *
mod«me
,

972 
lua_CFun˘i⁄
 
›íf
, 
glb
) {

973 
	`luaL_gësubèbÀ
(
L
, 
LUA_REGISTRYINDEX
, 
LUA_LOADED_TABLE
);

974 
	`lua_gëfõld
(
L
, -1, 
mod«me
);

975 i‡(!
	`lua_toboﬁón
(
L
, -1)) {

976 
	`lua_p›
(
L
, 1);

977 
	`lua_pushcfun˘i⁄
(
L
, 
›íf
);

978 
	`lua_push°rög
(
L
, 
mod«me
);

979 
	`lua_ˇŒ
(
L
, 1, 1);

980 
	`lua_pushvÆue
(
L
, -1);

981 
	`lua_£tfõld
(
L
, -3, 
mod«me
);

983 
	`lua_ªmove
(
L
, -2);

984 i‡(
glb
) {

985 
	`lua_pushvÆue
(
L
, -1);

986 
	`lua_£tglobÆ
(
L
, 
mod«me
);

988 
	}
}

991 
LUALIB_API
 c⁄° *
	$luaL_gsub
 (
lua_Sèã
 *
L
, c⁄° *
s
, c⁄° *
p
,

992 c⁄° *
r
) {

993 c⁄° *
wûd
;

994 
size_t
 
l
 = 
	`°æí
(
p
);

995 
luaL_Buf„r
 
b
;

996 
	`luaL_bufföô
(
L
, &
b
);

997 (
wûd
 = 
	`°r°r
(
s
, 
p
)Ë!
NULL
) {

998 
	`luaL_addl°rög
(&
b
, 
s
, 
wûd
 - s);

999 
	`luaL_add°rög
(&
b
, 
r
);

1000 
s
 = 
wûd
 + 
l
;

1002 
	`luaL_add°rög
(&
b
, 
s
);

1003 
	`luaL_pushªsu…
(&
b
);

1004  
	`lua_to°rög
(
L
, -1);

1005 
	}
}

1008 *
	$l_Æloc
 (*
ud
, *
±r
, 
size_t
 
osize
, size_à
nsize
) {

1009 ()
ud
; ()
osize
;

1010 i‡(
nsize
 == 0) {

1011 
	`‰ì
(
±r
);

1012  
NULL
;

1015  
	`ªÆloc
(
±r
, 
nsize
);

1016 
	}
}

1019 
	$∑nic
 (
lua_Sèã
 *
L
) {

1020 
	`lua_wrôe°rögîr‹
("PANIC: unprotectedÉrror in callÅo Lua API (%s)\n",

1021 
	`lua_to°rög
(
L
, -1));

1023 
	}
}

1026 
LUALIB_API
 
lua_Sèã
 *
	$luaL_√w°©e
 () {

1027 
lua_Sèã
 *
L
 = 
	`lua_√w°©e
(
l_Æloc
, 
NULL
);

1028 i‡(
L
Ë
	`lua_©∑nic
(L, &
∑nic
);

1029  
L
;

1030 
	}
}

1033 
LUALIB_API
 
	$luaL_checkvîsi⁄_
 (
lua_Sèã
 *
L
, 
lua_Numbî
 
vî
, 
size_t
 
sz
) {

1034 c⁄° 
lua_Numbî
 *
v
 = 
	`lua_vîsi⁄
(
L
);

1035 i‡(
sz
 !
LUAL_NUMSIZES
)

1036 
	`luaL_îr‹
(
L
, "coreándÜibrary have incompatibleÇumericÅypes");

1037 i‡(
v
 !
	`lua_vîsi⁄
(
NULL
))

1038 
	`luaL_îr‹
(
L
, "multiple Lua VMs detected");

1039 i‡(*
v
 !
vî
)

1040 
	`luaL_îr‹
(
L
, "version mismatch:ápp.Çeeds %f, Lua coreÖrovides %f",

1041 (
LUAI_UACNUMBER
)
vî
, (LUAI_UACNUMBER)*
v
);

1042 
	}
}

	@lib/lua/lua-5.3.4/src/lauxlib.h

8 #i‚de‡
œuxlib_h


9 
	#œuxlib_h


	)

12 
	~<°ddef.h
>

13 
	~<°dio.h
>

15 
	~"lua.h
"

20 
	#LUA_ERRFILE
 (
LUA_ERRERR
+1)

	)

24 
	#LUA_LOADED_TABLE
 "_LOADED"

	)

28 
	#LUA_PRELOAD_TABLE
 "_PRELOAD"

	)

31 
	sluaL_Reg
 {

32 c⁄° *
	m«me
;

33 
lua_CFun˘i⁄
 
	mfunc
;

34 } 
	tluaL_Reg
;

37 
	#LUAL_NUMSIZES
 ((
lua_I¡egî
)*16 + (
lua_Numbî
))

	)

39 
LUALIB_API
 (
luaL_checkvîsi⁄_
Ë(
lua_Sèã
 *
L
, 
lua_Numbî
 
vî
, 
size_t
 
sz
);

40 
	#luaL_checkvîsi⁄
(
L
) \

41 
	`luaL_checkvîsi⁄_
(
L
, 
LUA_VERSION_NUM
, 
LUAL_NUMSIZES
)

	)

43 
LUALIB_API
 (
luaL_gëmëafõld
Ë(
lua_Sèã
 *
L
, 
obj
, c⁄° *
e
);

44 
LUALIB_API
 (
luaL_ˇŒmëa
Ë(
lua_Sèã
 *
L
, 
obj
, c⁄° *
e
);

45 
LUALIB_API
 c⁄° *(
luaL_tﬁ°rög
Ë(
lua_Sèã
 *
L
, 
idx
, 
size_t
 *
Àn
);

46 
LUALIB_API
 (
luaL_¨gîr‹
Ë(
lua_Sèã
 *
L
, 
¨g
, c⁄° *
exåamsg
);

47 
LUALIB_API
 c⁄° *(
luaL_checkl°rög
Ë(
lua_Sèã
 *
L
, 
¨g
,

48 
size_t
 *
l
);

49 
LUALIB_API
 c⁄° *(
luaL_›é°rög
Ë(
lua_Sèã
 *
L
, 
¨g
,

50 c⁄° *
def
, 
size_t
 *
l
);

51 
LUALIB_API
 
	$lua_Numbî
 (
luaL_checknumbî
Ë(
lua_Sèã
 *
L
, 
¨g
);

52 
LUALIB_API
 
	$lua_Numbî
 (
luaL_›äumbî
Ë(
lua_Sèã
 *
L
, 
¨g
, 
lua_Numbî
 
def
);

54 
LUALIB_API
 
	$lua_I¡egî
 (
luaL_checköãgî
Ë(
lua_Sèã
 *
L
, 
¨g
);

55 
LUALIB_API
 
	$lua_I¡egî
 (
luaL_›töãgî
Ë(
lua_Sèã
 *
L
, 
¨g
,

56 
lua_I¡egî
 
def
);

58 
LUALIB_API
 (
luaL_check°ack
Ë(
lua_Sèã
 *
L
, 
sz
, c⁄° *
msg
);

59 
LUALIB_API
 (
luaL_checkty≥
Ë(
lua_Sèã
 *
L
, 
¨g
, 
t
);

60 
LUALIB_API
 (
luaL_check™y
Ë(
lua_Sèã
 *
L
, 
¨g
);

62 
LUALIB_API
 (
luaL_√wmë©abÀ
Ë(
lua_Sèã
 *
L
, c⁄° *
äame
);

63 
LUALIB_API
 (
luaL_£tmë©abÀ
Ë(
lua_Sèã
 *
L
, c⁄° *
äame
);

64 
LUALIB_API
 *(
luaL_ã°ud©a
Ë(
lua_Sèã
 *
L
, 
ud
, c⁄° *
äame
);

65 
LUALIB_API
 *(
luaL_checkud©a
Ë(
lua_Sèã
 *
L
, 
ud
, c⁄° *
äame
);

67 
LUALIB_API
 (
luaL_whîe
Ë(
lua_Sèã
 *
L
, 
lvl
);

68 
LUALIB_API
 (
luaL_îr‹
Ë(
lua_Sèã
 *
L
, c⁄° *
fmt
, ...);

70 
LUALIB_API
 (
luaL_check›ti⁄
Ë(
lua_Sèã
 *
L
, 
¨g
, c⁄° *
def
,

71 c⁄° *c⁄° 
l°
[]);

73 
LUALIB_API
 (
luaL_fûîesu…
Ë(
lua_Sèã
 *
L
, 
°©
, c⁄° *
‚ame
);

74 
LUALIB_API
 (
luaL_exe¸esu…
Ë(
lua_Sèã
 *
L
, 
°©
);

77 
	#LUA_NOREF
 (-2)

	)

78 
	#LUA_REFNIL
 (-1)

	)

80 
LUALIB_API
 (
luaL_ªf
Ë(
lua_Sèã
 *
L
, 
t
);

81 
LUALIB_API
 (
luaL_uƒef
Ë(
lua_Sèã
 *
L
, 
t
, 
ªf
);

83 
LUALIB_API
 (
luaL_lﬂdfûex
Ë(
lua_Sèã
 *
L
, c⁄° *
fûíame
,

84 c⁄° *
mode
);

86 
	#luaL_lﬂdfûe
(
L
,
f
Ë
	`luaL_lﬂdfûex
(L,f,
NULL
)

	)

88 
LUALIB_API
 (
luaL_lﬂdbuf„rx
Ë(
lua_Sèã
 *
L
, c⁄° *
buff
, 
size_t
 
sz
,

89 c⁄° *
«me
, c⁄° *
mode
);

90 
LUALIB_API
 (
luaL_lﬂd°rög
Ë(
lua_Sèã
 *
L
, c⁄° *
s
);

92 
LUALIB_API
 
lua_Sèã
 *(
luaL_√w°©e
) ();

94 
LUALIB_API
 
	$lua_I¡egî
 (
luaL_Àn
Ë(
lua_Sèã
 *
L
, 
idx
);

96 
LUALIB_API
 c⁄° *(
luaL_gsub
Ë(
lua_Sèã
 *
L
, c⁄° *
s
, c⁄° *
p
,

97 c⁄° *
r
);

99 
LUALIB_API
 (
luaL_£tfuncs
Ë(
lua_Sèã
 *
L
, c⁄° 
luaL_Reg
 *
l
, 
nup
);

101 
LUALIB_API
 (
luaL_gësubèbÀ
Ë(
lua_Sèã
 *
L
, 
idx
, c⁄° *
‚ame
);

103 
LUALIB_API
 (
luaL_åa˚back
Ë(
lua_Sèã
 *
L
,Üua_Sèã *
L1
,

104 c⁄° *
msg
, 
Àvñ
);

106 
LUALIB_API
 (
luaL_ªquúef
Ë(
lua_Sèã
 *
L
, c⁄° *
mod«me
,

107 
lua_CFun˘i⁄
 
›íf
, 
glb
);

116 
	#luaL_√wlibèbÀ
(
L
,
l
) \

117 
	`lua_¸óãèbÀ
(
L
, 0, (
l
)/(÷)[0]Ë- 1)

	)

119 
	#luaL_√wlib
(
L
,
l
) \

120 (
	`luaL_checkvîsi⁄
(
L
), 
	`luaL_√wlibèbÀ
(L,
l
), 
	`luaL_£tfuncs
(L,l,0))

	)

122 
	#luaL_¨gcheck
(
L
, 
c⁄d
,
¨g
,
exåamsg
) \

123 (()((
c⁄d
Ë|| 
	`luaL_¨gîr‹
(
L
, (
¨g
), (
exåamsg
))))

	)

124 
	#luaL_check°rög
(
L
,
n
Ë(
	`luaL_checkl°rög
(L, (n), 
NULL
))

	)

125 
	#luaL_›t°rög
(
L
,
n
,
d
Ë(
	`luaL_›é°rög
(L, (n), (d), 
NULL
))

	)

127 
	#luaL_ty≥«me
(
L
,
i
Ë
	`lua_ty≥«me
(L, 
	`lua_ty≥
(L,(i)))

	)

129 
	#luaL_dofûe
(
L
, 
‚
) \

130 (
	`luaL_lﬂdfûe
(
L
, 
‚
Ë|| 
	`lua_pˇŒ
(L, 0, 
LUA_MULTRET
, 0))

	)

132 
	#luaL_do°rög
(
L
, 
s
) \

133 (
	`luaL_lﬂd°rög
(
L
, 
s
Ë|| 
	`lua_pˇŒ
(L, 0, 
LUA_MULTRET
, 0))

	)

135 
	#luaL_gëmë©abÀ
(
L
,
n
Ë(
	`lua_gëfõld
(L, 
LUA_REGISTRYINDEX
, (n)))

	)

137 
	#luaL_›t
(
L
,
f
,
n
,
d
Ë(
	`lua_i¢⁄e‹nû
(L,“)Ë? (dË: 
	`f
(L,“)))

	)

139 
	#luaL_lﬂdbuf„r
(
L
,
s
,
sz
,
n
Ë
	`luaL_lﬂdbuf„rx
(L,s,sz,n,
NULL
)

	)

148 
	sluaL_Buf„r
 {

149 *
b
;

150 
size_t
 
size
;

151 
size_t
 
n
;

152 
lua_Sèã
 *
L
;

153 
öôb
[
LUAL_BUFFERSIZE
];

154 } 
	tluaL_Buf„r
;

157 
	#luaL_addch¨
(
B
,
c
) \

158 (()((
B
)->
n
 < (B)->
size
 || 
	`luaL_¥ïbuffsize
((B), 1)), \

159 ((
B
)->
b
[(B)->
n
++] = (
c
)))

	)

161 
	#luaL_addsize
(
B
,
s
Ë((B)->
n
 +(s))

	)

163 
LUALIB_API
 (
luaL_bufföô
Ë(
lua_Sèã
 *
L
, 
luaL_Buf„r
 *
B
);

164 
LUALIB_API
 *(
luaL_¥ïbuffsize
Ë(
luaL_Buf„r
 *
B
, 
size_t
 
sz
);

165 
LUALIB_API
 (
luaL_addl°rög
Ë(
luaL_Buf„r
 *
B
, c⁄° *
s
, 
size_t
 
l
);

166 
LUALIB_API
 (
luaL_add°rög
Ë(
luaL_Buf„r
 *
B
, c⁄° *
s
);

167 
LUALIB_API
 (
luaL_addvÆue
Ë(
luaL_Buf„r
 *
B
);

168 
LUALIB_API
 (
luaL_pushªsu…
Ë(
luaL_Buf„r
 *
B
);

169 
LUALIB_API
 (
luaL_pushªsu…size
Ë(
luaL_Buf„r
 *
B
, 
size_t
 
sz
);

170 
LUALIB_API
 *(
luaL_bufföôsize
Ë(
lua_Sèã
 *
L
, 
luaL_Buf„r
 *
B
, 
size_t
 
sz
);

172 
	#luaL_¥ïbuf„r
(
B
Ë
	`luaL_¥ïbuffsize
(B, 
LUAL_BUFFERSIZE
)

	)

190 
	#LUA_FILEHANDLE
 "FILE*"

	)

193 
	sluaL_Såóm
 {

194 
FILE
 *
f
;

195 
lua_CFun˘i⁄
 
˛o£f
;

196 } 
	tluaL_Såóm
;

203 #i‡
	`deföed
(
LUA_COMPAT_MODULE
)

205 
LUALIB_API
 (
luaL_pushmoduÀ
Ë(
lua_Sèã
 *
L
, c⁄° *
mod«me
,

206 
sizehöt
);

207 
LUALIB_API
 (
luaL_›ílib
Ë(
lua_Sèã
 *
L
, c⁄° *
lib«me
,

208 c⁄° 
luaL_Reg
 *
l
, 
nup
);

210 
	#luaL_ªgi°î
(
L
,
n
,
l
Ë(
	`luaL_›ílib
(L,“),÷),0))

	)

222 #i‡!
	`deföed
(
lua_wrôe°rög
)

223 
	#lua_wrôe°rög
(
s
,
l
Ë
	`fwrôe
((s), (), (l), 
°dout
)

	)

227 #i‡!
	`deföed
(
lua_wrôñöe
)

228 
	#lua_wrôñöe
(Ë(
	`lua_wrôe°rög
("\n", 1), 
	`fÊush
(
°dout
))

	)

232 #i‡!
	`deföed
(
lua_wrôe°rögîr‹
)

233 
	#lua_wrôe°rögîr‹
(
s
,
p
) \

234 (
	`Ârötf
(
°dîr
, (
s
), (
p
)), 
	`fÊush
(°dîr))

	)

245 #i‡
	`deföed
(
LUA_COMPAT_APIINTCASTS
)

247 
	#luaL_checkunsig√d
(
L
,
a
Ë((
lua_Unsig√d
)
	`luaL_checköãgî
(L,a))

	)

248 
	#luaL_›tunsig√d
(
L
,
a
,
d
) \

249 ((
lua_Unsig√d
)
	`luaL_›töãgî
(
L
,
a
,(
lua_I¡egî
)(
d
)))

	)

251 
	#luaL_checköt
(
L
,
n
Ë(()
	`luaL_checköãgî
(L, (n)))

	)

252 
	#luaL_›töt
(
L
,
n
,
d
Ë(()
	`luaL_›töãgî
(L, (n), (d)))

	)

254 
	#luaL_checkl⁄g
(
L
,
n
Ë(()
	`luaL_checköãgî
(L, (n)))

	)

255 
	#luaL_›é⁄g
(
L
,
n
,
d
Ë(()
	`luaL_›töãgî
(L, (n), (d)))

	)

	@lib/lua/lua-5.3.4/src/lbaselib.c

7 
	#lba£lib_c


	)

8 
	#LUA_LIB


	)

10 
	~"Õªfix.h
"

13 
	~<˘y≥.h
>

14 
	~<°dio.h
>

15 
	~<°dlib.h
>

16 
	~<°rög.h
>

18 
	~"lua.h
"

20 
	~"œuxlib.h
"

21 
	~"luÆib.h
"

24 
	$luaB_¥öt
 (
lua_Sèã
 *
L
) {

25 
n
 = 
	`lua_gët›
(
L
);

26 
i
;

27 
	`lua_gëglobÆ
(
L
, "tostring");

28 
i
=1; i<=
n
; i++) {

29 c⁄° *
s
;

30 
size_t
 
l
;

31 
	`lua_pushvÆue
(
L
, -1);

32 
	`lua_pushvÆue
(
L
, 
i
);

33 
	`lua_ˇŒ
(
L
, 1, 1);

34 
s
 = 
	`lua_tﬁ°rög
(
L
, -1, &
l
);

35 i‡(
s
 =
NULL
)

36  
	`luaL_îr‹
(
L
, "'tostring' mustÑeturná stringÅo 'print'");

37 i‡(
i
>1Ë
	`lua_wrôe°rög
("\t", 1);

38 
	`lua_wrôe°rög
(
s
, 
l
);

39 
	`lua_p›
(
L
, 1);

41 
	`lua_wrôñöe
();

43 
	}
}

46 
	#SPACECHARS
 " \f\n\r\t\v"

	)

48 c⁄° *
	$b_°r2öt
 (c⁄° *
s
, 
ba£
, 
lua_I¡egî
 *
≤
) {

49 
lua_Unsig√d
 
n
 = 0;

50 
√g
 = 0;

51 
s
 +
	`°r•n
(s, 
SPACECHARS
);

52 i‡(*
s
 ='-'Ë{ s++; 
√g
 = 1; }

53 i‡(*
s
 == '+') s++;

54 i‡(!
	`iß um
(()*
s
))

55  
NULL
;

57 
digô
 = (
	`isdigô
(()*
s
)) ? *s - '0'

58 : (
	`touµî
(()*
s
) - 'A') + 10;

59 i‡(
digô
 >
ba£
Ë 
NULL
;

60 
n
 =Ç * 
ba£
 + 
digô
;

61 
s
++;

62 } 
	`iß um
(()*
s
));

63 
s
 +
	`°r•n
(s, 
SPACECHARS
);

64 *
≤
 = (
lua_I¡egî
)((
√g
Ë? (0u - 
n
) :Ç);

65  
s
;

66 
	}
}

69 
	$luaB_t⁄umbî
 (
lua_Sèã
 *
L
) {

70 i‡(
	`lua_i¢⁄e‹nû
(
L
, 2)) {

71 
	`luaL_check™y
(
L
, 1);

72 i‡(
	`lua_ty≥
(
L
, 1Ë=
LUA_TNUMBER
) {

73 
	`lua_£â›
(
L
, 1);

77 
size_t
 
l
;

78 c⁄° *
s
 = 
	`lua_tﬁ°rög
(
L
, 1, &
l
);

79 i‡(
s
 !
NULL
 && 
	`lua_°rögt⁄umbî
(
L
, sË=
l
 + 1)

85 
size_t
 
l
;

86 c⁄° *
s
;

87 
lua_I¡egî
 
n
 = 0;

88 
lua_I¡egî
 
ba£
 = 
	`luaL_checköãgî
(
L
, 2);

89 
	`luaL_checkty≥
(
L
, 1, 
LUA_TSTRING
);

90 
s
 = 
	`lua_tﬁ°rög
(
L
, 1, &
l
);

91 
	`luaL_¨gcheck
(
L
, 2 <
ba£
 && base <= 36, 2, "base out ofÑange");

92 i‡(
	`b_°r2öt
(
s
, ()
ba£
, &
n
Ë=†+ 
l
) {

93 
	`lua_pushöãgî
(
L
, 
n
);

97 
	`lua_pushnû
(
L
);

99 
	}
}

102 
	$luaB_îr‹
 (
lua_Sèã
 *
L
) {

103 
Àvñ
 = ()
	`luaL_›töãgî
(
L
, 2, 1);

104 
	`lua_£â›
(
L
, 1);

105 i‡(
	`lua_ty≥
(
L
, 1Ë=
LUA_TSTRING
 && 
Àvñ
 > 0) {

106 
	`luaL_whîe
(
L
, 
Àvñ
);

107 
	`lua_pushvÆue
(
L
, 1);

108 
	`lua_c⁄ˇt
(
L
, 2);

110  
	`lua_îr‹
(
L
);

111 
	}
}

114 
	$luaB_gëmë©abÀ
 (
lua_Sèã
 *
L
) {

115 
	`luaL_check™y
(
L
, 1);

116 i‡(!
	`lua_gëmë©abÀ
(
L
, 1)) {

117 
	`lua_pushnû
(
L
);

120 
	`luaL_gëmëafõld
(
L
, 1, "__metatable");

122 
	}
}

125 
	$luaB_£tmë©abÀ
 (
lua_Sèã
 *
L
) {

126 
t
 = 
	`lua_ty≥
(
L
, 2);

127 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

128 
	`luaL_¨gcheck
(
L
, 
t
 =
LUA_TNIL
 ||Å =
LUA_TTABLE
, 2,

130 i‡(
	`luaL_gëmëafõld
(
L
, 1, "__më©abÀ"Ë!
LUA_TNIL
)

131  
	`luaL_îr‹
(
L
, "cannot changeáÖrotected metatable");

132 
	`lua_£â›
(
L
, 2);

133 
	`lua_£tmë©abÀ
(
L
, 1);

135 
	}
}

138 
	$luaB_øwequÆ
 (
lua_Sèã
 *
L
) {

139 
	`luaL_check™y
(
L
, 1);

140 
	`luaL_check™y
(
L
, 2);

141 
	`lua_pushboﬁón
(
L
, 
	`lua_øwequÆ
(L, 1, 2));

143 
	}
}

146 
	$luaB_øwÀn
 (
lua_Sèã
 *
L
) {

147 
t
 = 
	`lua_ty≥
(
L
, 1);

148 
	`luaL_¨gcheck
(
L
, 
t
 =
LUA_TTABLE
 ||Å =
LUA_TSTRING
, 1,

150 
	`lua_pushöãgî
(
L
, 
	`lua_øwÀn
(L, 1));

152 
	}
}

155 
	$luaB_øwgë
 (
lua_Sèã
 *
L
) {

156 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

157 
	`luaL_check™y
(
L
, 2);

158 
	`lua_£â›
(
L
, 2);

159 
	`lua_øwgë
(
L
, 1);

161 
	}
}

163 
	$luaB_øw£t
 (
lua_Sèã
 *
L
) {

164 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

165 
	`luaL_check™y
(
L
, 2);

166 
	`luaL_check™y
(
L
, 3);

167 
	`lua_£â›
(
L
, 3);

168 
	`lua_øw£t
(
L
, 1);

170 
	}
}

173 
	$luaB_cﬁÀ˘g¨bage
 (
lua_Sèã
 *
L
) {

174 c⁄° *c⁄° 
›ts
[] = {"stop", "restart", "collect",

176 "i§u¬ög", 
NULL
};

177 c⁄° 
›t¢um
[] = {
LUA_GCSTOP
, 
LUA_GCRESTART
, 
LUA_GCCOLLECT
,

178 
LUA_GCCOUNT
, 
LUA_GCSTEP
, 
LUA_GCSETPAUSE
, 
LUA_GCSETSTEPMUL
,

179 
LUA_GCISRUNNING
};

180 
o
 = 
›t¢um
[
	`luaL_check›ti⁄
(
L
, 1, "cﬁÀ˘", 
›ts
)];

181 
ex
 = ()
	`luaL_›töãgî
(
L
, 2, 0);

182 
ªs
 = 
	`lua_gc
(
L
, 
o
, 
ex
);

183 
o
) {

184 
LUA_GCCOUNT
: {

185 
b
 = 
	`lua_gc
(
L
, 
LUA_GCCOUNTB
, 0);

186 
	`lua_pushnumbî
(
L
, (
lua_Numbî
)
ªs
 + (÷ua_Numbî)
b
/1024));

189 
LUA_GCSTEP
: 
LUA_GCISRUNNING
: {

190 
	`lua_pushboﬁón
(
L
, 
ªs
);

194 
	`lua_pushöãgî
(
L
, 
ªs
);

198 
	}
}

201 
	$luaB_ty≥
 (
lua_Sèã
 *
L
) {

202 
t
 = 
	`lua_ty≥
(
L
, 1);

203 
	`luaL_¨gcheck
(
L
, 
t
 !
LUA_TNONE
, 1, "valueÉxpected");

204 
	`lua_push°rög
(
L
, 
	`lua_ty≥«me
(L, 
t
));

206 
	}
}

209 
	$∑úsmëa
 (
lua_Sèã
 *
L
, c⁄° *
mëhod
, 
iszîo
,

210 
lua_CFun˘i⁄
 
ôî
) {

211 
	`luaL_check™y
(
L
, 1);

212 i‡(
	`luaL_gëmëafõld
(
L
, 1, 
mëhod
Ë=
LUA_TNIL
) {

213 
	`lua_pushcfun˘i⁄
(
L
, 
ôî
);

214 
	`lua_pushvÆue
(
L
, 1);

215 i‡(
iszîo
Ë
	`lua_pushöãgî
(
L
, 0);

216 
	`lua_pushnû
(
L
);

219 
	`lua_pushvÆue
(
L
, 1);

220 
	`lua_ˇŒ
(
L
, 1, 3);

223 
	}
}

226 
	$luaB_√xt
 (
lua_Sèã
 *
L
) {

227 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

228 
	`lua_£â›
(
L
, 2);

229 i‡(
	`lua_√xt
(
L
, 1))

232 
	`lua_pushnû
(
L
);

235 
	}
}

238 
	$luaB_∑ús
 (
lua_Sèã
 *
L
) {

239  
	`∑úsmëa
(
L
, "__∑ús", 0, 
luaB_√xt
);

240 
	}
}

246 
	$ùaúßux
 (
lua_Sèã
 *
L
) {

247 
lua_I¡egî
 
i
 = 
	`luaL_checköãgî
(
L
, 2) + 1;

248 
	`lua_pushöãgî
(
L
, 
i
);

249  (
	`lua_gëi
(
L
, 1, 
i
Ë=
LUA_TNIL
) ? 1 : 2;

250 
	}
}

257 
	$luaB_ùaús
 (
lua_Sèã
 *
L
) {

258 #i‡
	`deföed
(
LUA_COMPAT_IPAIRS
)

259  
	`∑úsmëa
(
L
, "__ùaús", 1, 
ùaúßux
);

261 
	`luaL_check™y
(
L
, 1);

262 
	`lua_pushcfun˘i⁄
(
L
, 
ùaúßux
);

263 
	`lua_pushvÆue
(
L
, 1);

264 
	`lua_pushöãgî
(
L
, 0);

267 
	}
}

270 
	$lﬂd_aux
 (
lua_Sèã
 *
L
, 
°©us
, 
ívidx
) {

271 i‡(
°©us
 =
LUA_OK
) {

272 i‡(
ívidx
 != 0) {

273 
	`lua_pushvÆue
(
L
, 
ívidx
);

274 i‡(!
	`lua_£tupvÆue
(
L
, -2, 1))

275 
	`lua_p›
(
L
, 1);

280 
	`lua_pushnû
(
L
);

281 
	`lua_ö£π
(
L
, -2);

284 
	}
}

287 
	$luaB_lﬂdfûe
 (
lua_Sèã
 *
L
) {

288 c⁄° *
‚ame
 = 
	`luaL_›t°rög
(
L
, 1, 
NULL
);

289 c⁄° *
mode
 = 
	`luaL_›t°rög
(
L
, 2, 
NULL
);

290 
ív
 = (!
	`lua_i¢⁄e
(
L
, 3) ? 3 : 0);

291 
°©us
 = 
	`luaL_lﬂdfûex
(
L
, 
‚ame
, 
mode
);

292  
	`lﬂd_aux
(
L
, 
°©us
, 
ív
);

293 
	}
}

308 
	#RESERVEDSLOT
 5

	)

317 c⁄° *
	$gíîic_ªadî
 (
lua_Sèã
 *
L
, *
ud
, 
size_t
 *
size
) {

318 ()(
ud
);

319 
	`luaL_check°ack
(
L
, 2, "too manyÇested functions");

320 
	`lua_pushvÆue
(
L
, 1);

321 
	`lua_ˇŒ
(
L
, 0, 1);

322 i‡(
	`lua_i¢û
(
L
, -1)) {

323 
	`lua_p›
(
L
, 1);

324 *
size
 = 0;

325  
NULL
;

327 i‡(!
	`lua_is°rög
(
L
, -1))

328 
	`luaL_îr‹
(
L
, "reader function mustÑeturná string");

329 
	`lua_ª∂a˚
(
L
, 
RESERVEDSLOT
);

330  
	`lua_tﬁ°rög
(
L
, 
RESERVEDSLOT
, 
size
);

331 
	}
}

334 
	$luaB_lﬂd
 (
lua_Sèã
 *
L
) {

335 
°©us
;

336 
size_t
 
l
;

337 c⁄° *
s
 = 
	`lua_tﬁ°rög
(
L
, 1, &
l
);

338 c⁄° *
mode
 = 
	`luaL_›t°rög
(
L
, 3, "bt");

339 
ív
 = (!
	`lua_i¢⁄e
(
L
, 4) ? 4 : 0);

340 i‡(
s
 !
NULL
) {

341 c⁄° *
chunk«me
 = 
	`luaL_›t°rög
(
L
, 2, 
s
);

342 
°©us
 = 
	`luaL_lﬂdbuf„rx
(
L
, 
s
, 
l
, 
chunk«me
, 
mode
);

345 c⁄° *
chunk«me
 = 
	`luaL_›t°rög
(
L
, 2, "=(load)");

346 
	`luaL_checkty≥
(
L
, 1, 
LUA_TFUNCTION
);

347 
	`lua_£â›
(
L
, 
RESERVEDSLOT
);

348 
°©us
 = 
	`lua_lﬂd
(
L
, 
gíîic_ªadî
, 
NULL
, 
chunk«me
, 
mode
);

350  
	`lﬂd_aux
(
L
, 
°©us
, 
ív
);

351 
	}
}

356 
	$dofûec⁄t
 (
lua_Sèã
 *
L
, 
d1
, 
lua_KC⁄ãxt
 
d2
) {

357 ()
d1
; ()
d2
;

358  
	`lua_gët›
(
L
) - 1;

359 
	}
}

362 
	$luaB_dofûe
 (
lua_Sèã
 *
L
) {

363 c⁄° *
‚ame
 = 
	`luaL_›t°rög
(
L
, 1, 
NULL
);

364 
	`lua_£â›
(
L
, 1);

365 i‡(
	`luaL_lﬂdfûe
(
L
, 
‚ame
Ë!
LUA_OK
)

366  
	`lua_îr‹
(
L
);

367 
	`lua_ˇŒk
(
L
, 0, 
LUA_MULTRET
, 0, 
dofûec⁄t
);

368  
	`dofûec⁄t
(
L
, 0, 0);

369 
	}
}

372 
	$luaB_as£π
 (
lua_Sèã
 *
L
) {

373 i‡(
	`lua_toboﬁón
(
L
, 1))

374  
	`lua_gët›
(
L
);

376 
	`luaL_check™y
(
L
, 1);

377 
	`lua_ªmove
(
L
, 1);

378 
	`lua_pushlôîÆ
(
L
, "assertion failed!");

379 
	`lua_£â›
(
L
, 1);

380  
	`luaB_îr‹
(
L
);

382 
	}
}

385 
	$luaB_£À˘
 (
lua_Sèã
 *
L
) {

386 
n
 = 
	`lua_gët›
(
L
);

387 i‡(
	`lua_ty≥
(
L
, 1Ë=
LUA_TSTRING
 && *
	`lua_to°rög
(L, 1) == '#') {

388 
	`lua_pushöãgî
(
L
, 
n
-1);

392 
lua_I¡egî
 
i
 = 
	`luaL_checköãgî
(
L
, 1);

393 i‡(
i
 < 0Ëò
n
 + i;

394 i‡(
i
 > 
n
) i =Ç;

395 
	`luaL_¨gcheck
(
L
, 1 <
i
, 1, "index out ofÑange");

396  
n
 - ()
i
;

398 
	}
}

408 
	$föishpˇŒ
 (
lua_Sèã
 *
L
, 
°©us
, 
lua_KC⁄ãxt
 
exåa
) {

409 i‡(
°©us
 !
LUA_OK
 && sètu†!
LUA_YIELD
) {

410 
	`lua_pushboﬁón
(
L
, 0);

411 
	`lua_pushvÆue
(
L
, -2);

415  
	`lua_gët›
(
L
Ë- ()
exåa
;

416 
	}
}

419 
	$luaB_pˇŒ
 (
lua_Sèã
 *
L
) {

420 
°©us
;

421 
	`luaL_check™y
(
L
, 1);

422 
	`lua_pushboﬁón
(
L
, 1);

423 
	`lua_ö£π
(
L
, 1);

424 
°©us
 = 
	`lua_pˇŒk
(
L
, 
	`lua_gët›
(LË- 2, 
LUA_MULTRET
, 0, 0, 
föishpˇŒ
);

425  
	`föishpˇŒ
(
L
, 
°©us
, 0);

426 
	}
}

434 
	$luaB_xpˇŒ
 (
lua_Sèã
 *
L
) {

435 
°©us
;

436 
n
 = 
	`lua_gët›
(
L
);

437 
	`luaL_checkty≥
(
L
, 2, 
LUA_TFUNCTION
);

438 
	`lua_pushboﬁón
(
L
, 1);

439 
	`lua_pushvÆue
(
L
, 1);

440 
	`lua_rŸ©e
(
L
, 3, 2);

441 
°©us
 = 
	`lua_pˇŒk
(
L
, 
n
 - 2, 
LUA_MULTRET
, 2, 2, 
föishpˇŒ
);

442  
	`föishpˇŒ
(
L
, 
°©us
, 2);

443 
	}
}

446 
	$luaB_to°rög
 (
lua_Sèã
 *
L
) {

447 
	`luaL_check™y
(
L
, 1);

448 
	`luaL_tﬁ°rög
(
L
, 1, 
NULL
);

450 
	}
}

453 c⁄° 
luaL_Reg
 
	gba£_funcs
[] = {

454 {"as£π", 
luaB_as£π
},

455 {"cﬁÀ˘g¨bage", 
luaB_cﬁÀ˘g¨bage
},

456 {"dofûe", 
luaB_dofûe
},

457 {"îr‹", 
luaB_îr‹
},

458 {"gëmë©abÀ", 
luaB_gëmë©abÀ
},

459 {"ùaús", 
luaB_ùaús
},

460 {"lﬂdfûe", 
luaB_lﬂdfûe
},

461 {"lﬂd", 
luaB_lﬂd
},

462 #i‡
deföed
(
LUA_COMPAT_LOADSTRING
)

463 {"lﬂd°rög", 
luaB_lﬂd
},

465 {"√xt", 
luaB_√xt
},

466 {"∑ús", 
luaB_∑ús
},

467 {"pˇŒ", 
luaB_pˇŒ
},

468 {"¥öt", 
luaB_¥öt
},

469 {"øwequÆ", 
luaB_øwequÆ
},

470 {"øwÀn", 
luaB_øwÀn
},

471 {"øwgë", 
luaB_øwgë
},

472 {"øw£t", 
luaB_øw£t
},

473 {"£À˘", 
luaB_£À˘
},

474 {"£tmë©abÀ", 
luaB_£tmë©abÀ
},

475 {"t⁄umbî", 
luaB_t⁄umbî
},

476 {"to°rög", 
luaB_to°rög
},

477 {"ty≥", 
luaB_ty≥
},

478 {"xpˇŒ", 
luaB_xpˇŒ
},

480 {"_G", 
NULL
},

481 {"_VERSION", 
NULL
},

482 {
NULL
, NULL}

486 
LUAMOD_API
 
	$lua›í_ba£
 (
lua_Sèã
 *
L
) {

488 
	`lua_pushglobÆèbÀ
(
L
);

489 
	`luaL_£tfuncs
(
L
, 
ba£_funcs
, 0);

491 
	`lua_pushvÆue
(
L
, -1);

492 
	`lua_£tfõld
(
L
, -2, "_G");

494 
	`lua_pushlôîÆ
(
L
, 
LUA_VERSION
);

495 
	`lua_£tfõld
(
L
, -2, "_VERSION");

497 
	}
}

	@lib/lua/lua-5.3.4/src/lbitlib.c

7 
	#lbôlib_c


	)

8 
	#LUA_LIB


	)

10 
	~"Õªfix.h
"

13 
	~"lua.h
"

15 
	~"œuxlib.h
"

16 
	~"luÆib.h
"

19 #i‡
deföed
(
LUA_COMPAT_BITLIB
)

22 
	#pushunsig√d
(
L
,
n
Ë
	`lua_pushöãgî
(L, (
lua_I¡egî
)“))

	)

23 
	#checkunsig√d
(
L
,
i
Ë((
lua_Unsig√d
)
	`luaL_checköãgî
(L,i))

	)

27 #i‡!
deföed
(
LUA_NBITS
)

28 
	#LUA_NBITS
 32

	)

37 
	#ALLONES
 (~(((~(
lua_Unsig√d
)0Ë<< (
LUA_NBITS
 - 1)Ë<< 1))

	)

41 
	#åim
(
x
Ë((xË& 
ALLONES
)

	)

45 
	#mask
(
n
Ë(~((
ALLONES
 << 1Ë<< (“Ë- 1)))

	)

49 
lua_Unsig√d
 
	$™daux
 (
lua_Sèã
 *
L
) {

50 
i
, 
n
 = 
	`lua_gët›
(
L
);

51 
lua_Unsig√d
 
r
 = ~(lua_Unsigned)0;

52 
i
 = 1; i <
n
; i++)

53 
r
 &
	`checkunsig√d
(
L
, 
i
);

54  
	`åim
(
r
);

55 
	}
}

58 
	$b_™d
 (
lua_Sèã
 *
L
) {

59 
lua_Unsig√d
 
r
 = 
	`™daux
(
L
);

60 
	`pushunsig√d
(
L
, 
r
);

62 
	}
}

65 
	$b_ã°
 (
lua_Sèã
 *
L
) {

66 
lua_Unsig√d
 
r
 = 
	`™daux
(
L
);

67 
	`lua_pushboﬁón
(
L
, 
r
 != 0);

69 
	}
}

72 
	$b_‹
 (
lua_Sèã
 *
L
) {

73 
i
, 
n
 = 
	`lua_gët›
(
L
);

74 
lua_Unsig√d
 
r
 = 0;

75 
i
 = 1; i <
n
; i++)

76 
r
 |
	`checkunsig√d
(
L
, 
i
);

77 
	`pushunsig√d
(
L
, 
	`åim
(
r
));

79 
	}
}

82 
	$b_x‹
 (
lua_Sèã
 *
L
) {

83 
i
, 
n
 = 
	`lua_gët›
(
L
);

84 
lua_Unsig√d
 
r
 = 0;

85 
i
 = 1; i <
n
; i++)

86 
r
 ^
	`checkunsig√d
(
L
, 
i
);

87 
	`pushunsig√d
(
L
, 
	`åim
(
r
));

89 
	}
}

92 
	$b_nŸ
 (
lua_Sèã
 *
L
) {

93 
lua_Unsig√d
 
r
 = ~
	`checkunsig√d
(
L
, 1);

94 
	`pushunsig√d
(
L
, 
	`åim
(
r
));

96 
	}
}

99 
	$b_shi·
 (
lua_Sèã
 *
L
, 
lua_Unsig√d
 
r
, 
lua_I¡egî
 
i
) {

100 i‡(
i
 < 0) {

101 
i
 = -i;

102 
r
 = 
	`åim
(r);

103 i‡(
i
 >
LUA_NBITS
Ë
r
 = 0;

104 
r
 >>
i
;

107 i‡(
i
 >
LUA_NBITS
Ë
r
 = 0;

108 
r
 <<
i
;

109 
r
 = 
	`åim
(r);

111 
	`pushunsig√d
(
L
, 
r
);

113 
	}
}

116 
	$b_lshi·
 (
lua_Sèã
 *
L
) {

117  
	`b_shi·
(
L
, 
	`checkunsig√d
(L, 1), 
	`luaL_checköãgî
(L, 2));

118 
	}
}

121 
	$b_rshi·
 (
lua_Sèã
 *
L
) {

122  
	`b_shi·
(
L
, 
	`checkunsig√d
(L, 1), -
	`luaL_checköãgî
(L, 2));

123 
	}
}

126 
	$b_¨shi·
 (
lua_Sèã
 *
L
) {

127 
lua_Unsig√d
 
r
 = 
	`checkunsig√d
(
L
, 1);

128 
lua_I¡egî
 
i
 = 
	`luaL_checköãgî
(
L
, 2);

129 i‡(
i
 < 0 || !(
r
 & ((
lua_Unsig√d
)1 << (
LUA_NBITS
 - 1))))

130  
	`b_shi·
(
L
, 
r
, -
i
);

132 i‡(
i
 >
LUA_NBITS
Ë
r
 = 
ALLONES
;

134 
r
 = 
	`åim
(‘ >> 
i
Ë| ~—rim(~(
lua_Unsig√d
)0) >> i));

135 
	`pushunsig√d
(
L
, 
r
);

138 
	}
}

141 
	$b_rŸ
 (
lua_Sèã
 *
L
, 
lua_I¡egî
 
d
) {

142 
lua_Unsig√d
 
r
 = 
	`checkunsig√d
(
L
, 1);

143 
i
 = 
d
 & (
LUA_NBITS
 - 1);

144 
r
 = 
	`åim
(r);

145 i‡(
i
 != 0)

146 
r
 = (∏<< 
i
Ë| (∏>> (
LUA_NBITS
 - i));

147 
	`pushunsig√d
(
L
, 
	`åim
(
r
));

149 
	}
}

152 
	$b_ÃŸ
 (
lua_Sèã
 *
L
) {

153  
	`b_rŸ
(
L
, 
	`luaL_checköãgî
(L, 2));

154 
	}
}

157 
	$b_ºŸ
 (
lua_Sèã
 *
L
) {

158  
	`b_rŸ
(
L
, -
	`luaL_checköãgî
(L, 2));

159 
	}
}

168 
	$fõld¨gs
 (
lua_Sèã
 *
L
, 
Árg
, *
width
) {

169 
lua_I¡egî
 
f
 = 
	`luaL_checköãgî
(
L
, 
Árg
);

170 
lua_I¡egî
 
w
 = 
	`luaL_›töãgî
(
L
, 
Árg
 + 1, 1);

171 
	`luaL_¨gcheck
(
L
, 0 <
f
, 
Árg
, "field cannot beÇegative");

172 
	`luaL_¨gcheck
(
L
, 0 < 
w
, 
Árg
 + 1, "width must beÖositive");

173 i‡(
f
 + 
w
 > 
LUA_NBITS
)

174 
	`luaL_îr‹
(
L
, "tryingÅoáccessÇon-existent bits");

175 *
width
 = ()
w
;

176  ()
f
;

177 
	}
}

180 
	$b_exåa˘
 (
lua_Sèã
 *
L
) {

181 
w
;

182 
lua_Unsig√d
 
r
 = 
	`åim
(
	`checkunsig√d
(
L
, 1));

183 
f
 = 
	`fõld¨gs
(
L
, 2, &
w
);

184 
r
 = (∏>> 
f
Ë& 
	`mask
(
w
);

185 
	`pushunsig√d
(
L
, 
r
);

187 
	}
}

190 
	$b_ª∂a˚
 (
lua_Sèã
 *
L
) {

191 
w
;

192 
lua_Unsig√d
 
r
 = 
	`åim
(
	`checkunsig√d
(
L
, 1));

193 
lua_Unsig√d
 
v
 = 
	`åim
(
	`checkunsig√d
(
L
, 2));

194 
f
 = 
	`fõld¨gs
(
L
, 3, &
w
);

195 
lua_Unsig√d
 
m
 = 
	`mask
(
w
);

196 
r
 = (∏& ~(
m
 << 
f
)Ë| ((
v
 & m) << f);

197 
	`pushunsig√d
(
L
, 
r
);

199 
	}
}

202 c⁄° 
luaL_Reg
 
	gbôlib
[] = {

203 {"¨shi·", 
b_¨shi·
},

204 {"b™d", 
b_™d
},

205 {"bnŸ", 
b_nŸ
},

206 {"b‹", 
b_‹
},

207 {"bx‹", 
b_x‹
},

208 {"bã°", 
b_ã°
},

209 {"exåa˘", 
b_exåa˘
},

210 {"ÃŸ©e", 
b_ÃŸ
},

211 {"lshi·", 
b_lshi·
},

212 {"ª∂a˚", 
b_ª∂a˚
},

213 {"ºŸ©e", 
b_ºŸ
},

214 {"rshi·", 
b_rshi·
},

215 {
NULL
, NULL}

220 
LUAMOD_API
 
	$lua›í_bô32
 (
lua_Sèã
 *
L
) {

221 
	`luaL_√wlib
(
L
, 
bôlib
);

223 
	}
}

229 
LUAMOD_API
 
	$lua›í_bô32
 (
lua_Sèã
 *
L
) {

230  
	`luaL_îr‹
(
L
, "library 'bit32' has been deprecated");

231 
	}
}

	@lib/lua/lua-5.3.4/src/lcode.c

7 
	#lcode_c


	)

8 
	#LUA_CORE


	)

10 
	~"Õªfix.h
"

13 
	~<m©h.h
>

14 
	~<°dlib.h
>

16 
	~"lua.h
"

18 
	~"lcode.h
"

19 
	~"ldebug.h
"

20 
	~"ldo.h
"

21 
	~"lgc.h
"

22 
	~"Œex.h
"

23 
	~"lmem.h
"

24 
	~"lobje˘.h
"

25 
	~"l›codes.h
"

26 
	~"Õ¨£r.h
"

27 
	~"l°rög.h
"

28 
	~"…abÀ.h
"

29 
	~"lvm.h
"

33 
	#MAXREGS
 255

	)

36 
	#hasjumps
(
e
Ë(”)->
t
 !”)->
f
)

	)

43 
	$t⁄umîÆ
(c⁄° 
expdesc
 *
e
, 
TVÆue
 *
v
) {

44 i‡(
	`hasjumps
(
e
))

46 
e
->
k
) {

47 
VKINT
:

48 i‡(
v
Ë
	`£tivÆue
(v, 
e
->
u
.
ivÆ
);

50 
VKFLT
:

51 i‡(
v
Ë
	`£tÊtvÆue
(v, 
e
->
u
.
nvÆ
);

55 
	}
}

64 
	$luaK_nû
 (
FuncSèã
 *
fs
, 
‰om
, 
n
) {

65 
In°ru˘i⁄
 *
¥evious
;

66 
l
 = 
‰om
 + 
n
 - 1;

67 i‡(
fs
->
pc
 > fs->
œ°èrgë
) {

68 
¥evious
 = &
fs
->
f
->
code
[fs->
pc
-1];

69 i‡(
	`GET_OPCODE
(*
¥evious
Ë=
OP_LOADNIL
) {

70 
p‰om
 = 
	`GETARG_A
(*
¥evious
);

71 
∂
 = 
p‰om
 + 
	`GETARG_B
(*
¥evious
);

72 i‡((
p‰om
 <
‰om
 && from <
∂
 + 1) ||

73 (
‰om
 <
p‰om
 &&Ö‰om <
l
 + 1)) {

74 i‡(
p‰om
 < 
‰om
) from =Öfrom;

75 i‡(
∂
 > 
l
)Ü =Öl;

76 
	`SETARG_A
(*
¥evious
, 
‰om
);

77 
	`SETARG_B
(*
¥evious
, 
l
 - 
‰om
);

82 
	`luaK_codeABC
(
fs
, 
OP_LOADNIL
, 
‰om
, 
n
 - 1, 0);

83 
	}
}

90 
	$gëjump
 (
FuncSèã
 *
fs
, 
pc
) {

91 
off£t
 = 
	`GETARG_sBx
(
fs
->
f
->
code
[
pc
]);

92 i‡(
off£t
 =
NO_JUMP
)

93  
NO_JUMP
;

95  (
pc
+1)+
off£t
;

96 
	}
}

103 
	$fixjump
 (
FuncSèã
 *
fs
, 
pc
, 
de°
) {

104 
In°ru˘i⁄
 *
jmp
 = &
fs
->
f
->
code
[
pc
];

105 
off£t
 = 
de°
 - (
pc
 + 1);

106 
	`lua_as£π
(
de°
 !
NO_JUMP
);

107 i‡(
	`abs
(
off£t
Ë> 
MAXARG_sBx
)

108 
	`luaX_sy¡axîr‹
(
fs
->
ls
, "control structureÅooÜong");

109 
	`SETARG_sBx
(*
jmp
, 
off£t
);

110 
	}
}

116 
	$luaK_c⁄ˇt
 (
FuncSèã
 *
fs
, *
l1
, 
l2
) {

117 i‡(
l2
 =
NO_JUMP
) ;

118 i‡(*
l1
 =
NO_JUMP
)

119 *
l1
 = 
l2
;

121 
li°
 = *
l1
;

122 
√xt
;

123 (
√xt
 = 
	`gëjump
(
fs
, 
li°
)Ë!
NO_JUMP
)

124 
li°
 = 
√xt
;

125 
	`fixjump
(
fs
, 
li°
, 
l2
);

127 
	}
}

136 
	$luaK_jump
 (
FuncSèã
 *
fs
) {

137 
jpc
 = 
fs
->jpc;

138 
j
;

139 
fs
->
jpc
 = 
NO_JUMP
;

140 
j
 = 
	`luaK_codeAsBx
(
fs
, 
OP_JMP
, 0, 
NO_JUMP
);

141 
	`luaK_c⁄ˇt
(
fs
, &
j
, 
jpc
);

142  
j
;

143 
	}
}

149 
	$luaK_ªt
 (
FuncSèã
 *
fs
, 
fú°
, 
ƒë
) {

150 
	`luaK_codeABC
(
fs
, 
OP_RETURN
, 
fú°
, 
ƒë
+1, 0);

151 
	}
}

158 
	$c⁄djump
 (
FuncSèã
 *
fs
, 
OpCode
 
›
, 
A
, 
B
, 
C
) {

159 
	`luaK_codeABC
(
fs
, 
›
, 
A
, 
B
, 
C
);

160  
	`luaK_jump
(
fs
);

161 
	}
}

168 
	$luaK_gëœbñ
 (
FuncSèã
 *
fs
) {

169 
fs
->
œ°èrgë
 = fs->
pc
;

170  
fs
->
pc
;

171 
	}
}

179 
In°ru˘i⁄
 *
	$gëjumpc⁄åﬁ
 (
FuncSèã
 *
fs
, 
pc
) {

180 
In°ru˘i⁄
 *
pi
 = &
fs
->
f
->
code
[
pc
];

181 i‡(
pc
 >1 && 
	`ã°TMode
(
	`GET_OPCODE
(*(
pi
-1))))

182  
pi
-1;

184  
pi
;

185 
	}
}

195 
	$∑tchã°ªg
 (
FuncSèã
 *
fs
, 
node
, 
ªg
) {

196 
In°ru˘i⁄
 *
i
 = 
	`gëjumpc⁄åﬁ
(
fs
, 
node
);

197 i‡(
	`GET_OPCODE
(*
i
Ë!
OP_TESTSET
)

199 i‡(
ªg
 !
NO_REG
 &&Ñeg !
	`GETARG_B
(*
i
))

200 
	`SETARG_A
(*
i
, 
ªg
);

204 *
i
 = 
	`CREATE_ABC
(
OP_TEST
, 
	`GETARG_B
(*i), 0, 
	`GETARG_C
(*i));

207 
	}
}

213 
	$ªmovevÆues
 (
FuncSèã
 *
fs
, 
li°
) {

214 ; 
li°
 !
NO_JUMP
;Üi° = 
	`gëjump
(
fs
,Üist))

215 
	`∑tchã°ªg
(
fs
, 
li°
, 
NO_REG
);

216 
	}
}

224 
	$∑tchli°aux
 (
FuncSèã
 *
fs
, 
li°
, 
vèrgë
, 
ªg
,

225 
dèrgë
) {

226 
li°
 !
NO_JUMP
) {

227 
√xt
 = 
	`gëjump
(
fs
, 
li°
);

228 i‡(
	`∑tchã°ªg
(
fs
, 
li°
, 
ªg
))

229 
	`fixjump
(
fs
, 
li°
, 
vèrgë
);

231 
	`fixjump
(
fs
, 
li°
, 
dèrgë
);

232 
li°
 = 
√xt
;

234 
	}
}

242 
	$disch¨gejpc
 (
FuncSèã
 *
fs
) {

243 
	`∑tchli°aux
(
fs
, fs->
jpc
, fs->
pc
, 
NO_REG
, fs->pc);

244 
fs
->
jpc
 = 
NO_JUMP
;

245 
	}
}

252 
	$luaK_∑tchtohîe
 (
FuncSèã
 *
fs
, 
li°
) {

253 
	`luaK_gëœbñ
(
fs
);

254 
	`luaK_c⁄ˇt
(
fs
, &fs->
jpc
, 
li°
);

255 
	}
}

263 
	$luaK_∑tchli°
 (
FuncSèã
 *
fs
, 
li°
, 
èrgë
) {

264 i‡(
èrgë
 =
fs
->
pc
)

265 
	`luaK_∑tchtohîe
(
fs
, 
li°
);

267 
	`lua_as£π
(
èrgë
 < 
fs
->
pc
);

268 
	`∑tchli°aux
(
fs
, 
li°
, 
èrgë
, 
NO_REG
,Åarget);

270 
	}
}

278 
	$luaK_∑tch˛o£
 (
FuncSèã
 *
fs
, 
li°
, 
Àvñ
) {

279 
Àvñ
++;

280 ; 
li°
 !
NO_JUMP
;Üi° = 
	`gëjump
(
fs
,Üist)) {

281 
	`lua_as£π
(
	`GET_OPCODE
(
fs
->
f
->
code
[
li°
]Ë=
OP_JMP
 &&

282 (
	`GETARG_A
(
fs
->
f
->
code
[
li°
]) == 0 ||

283 
	`GETARG_A
(
fs
->
f
->
code
[
li°
]Ë>
Àvñ
));

284 
	`SETARG_A
(
fs
->
f
->
code
[
li°
], 
Àvñ
);

286 
	}
}

293 
	$luaK_code
 (
FuncSèã
 *
fs
, 
In°ru˘i⁄
 
i
) {

294 
PrŸo
 *
f
 = 
fs
->f;

295 
	`disch¨gejpc
(
fs
);

297 
	`luaM_growve˘‹
(
fs
->
ls
->
L
, 
f
->
code
, fs->
pc
, f->
sizecode
, 
In°ru˘i⁄
,

298 
MAX_INT
, "opcodes");

299 
f
->
code
[
fs
->
pc
] = 
i
;

301 
	`luaM_growve˘‹
(
fs
->
ls
->
L
, 
f
->
löeöfo
, fs->
pc
, f->
sizñöeöfo
, ,

302 
MAX_INT
, "opcodes");

303 
f
->
löeöfo
[
fs
->
pc
] = fs->
ls
->
œ°löe
;

304  
fs
->
pc
++;

305 
	}
}

312 
	$luaK_codeABC
 (
FuncSèã
 *
fs
, 
OpCode
 
o
, 
a
, 
b
, 
c
) {

313 
	`lua_as£π
(
	`gëOpMode
(
o
Ë=
iABC
);

314 
	`lua_as£π
(
	`gëBMode
(
o
Ë!
OpArgN
 || 
b
 == 0);

315 
	`lua_as£π
(
	`gëCMode
(
o
Ë!
OpArgN
 || 
c
 == 0);

316 
	`lua_as£π
(
a
 <
MAXARG_A
 && 
b
 <
MAXARG_B
 && 
c
 <
MAXARG_C
);

317  
	`luaK_code
(
fs
, 
	`CREATE_ABC
(
o
, 
a
, 
b
, 
c
));

318 
	}
}

324 
	$luaK_codeABx
 (
FuncSèã
 *
fs
, 
OpCode
 
o
, 
a
, 
bc
) {

325 
	`lua_as£π
(
	`gëOpMode
(
o
Ë=
iABx
 || gëOpMode(oË=
iAsBx
);

326 
	`lua_as£π
(
	`gëCMode
(
o
Ë=
OpArgN
);

327 
	`lua_as£π
(
a
 <
MAXARG_A
 && 
bc
 <
MAXARG_Bx
);

328  
	`luaK_code
(
fs
, 
	`CREATE_ABx
(
o
, 
a
, 
bc
));

329 
	}
}

335 
	$codìxåØrg
 (
FuncSèã
 *
fs
, 
a
) {

336 
	`lua_as£π
(
a
 <
MAXARG_Ax
);

337  
	`luaK_code
(
fs
, 
	`CREATE_Ax
(
OP_EXTRAARG
, 
a
));

338 
	}
}

346 
	$luaK_codek
 (
FuncSèã
 *
fs
, 
ªg
, 
k
) {

347 i‡(
k
 <
MAXARG_Bx
)

348  
	`luaK_codeABx
(
fs
, 
OP_LOADK
, 
ªg
, 
k
);

350 
p
 = 
	`luaK_codeABx
(
fs
, 
OP_LOADKX
, 
ªg
, 0);

351 
	`codìxåØrg
(
fs
, 
k
);

352  
p
;

354 
	}
}

361 
	$luaK_check°ack
 (
FuncSèã
 *
fs
, 
n
) {

362 
√w°ack
 = 
fs
->
‰ìªg
 + 
n
;

363 i‡(
√w°ack
 > 
fs
->
f
->
max°acksize
) {

364 i‡(
√w°ack
 >
MAXREGS
)

365 
	`luaX_sy¡axîr‹
(
fs
->
ls
,

367 
fs
->
f
->
max°acksize
 = 
	`ˇ°_byã
(
√w°ack
);

369 
	}
}

375 
	$luaK_ª£rvîegs
 (
FuncSèã
 *
fs
, 
n
) {

376 
	`luaK_check°ack
(
fs
, 
n
);

377 
fs
->
‰ìªg
 +
n
;

378 
	}
}

386 
	$‰ìªg
 (
FuncSèã
 *
fs
, 
ªg
) {

387 i‡(!
	`ISK
(
ªg
Ë&&Ñeg >
fs
->
«˘v¨
) {

388 
fs
->
‰ìªg
--;

389 
	`lua_as£π
(
ªg
 =
fs
->
‰ìªg
);

391 
	}
}

397 
	$‰ìexp
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

398 i‡(
e
->
k
 =
VNONRELOC
)

399 
	`‰ìªg
(
fs
, 
e
->
u
.
öfo
);

400 
	}
}

407 
	$‰ìexps
 (
FuncSèã
 *
fs
, 
expdesc
 *
e1
,Éxpdes¯*
e2
) {

408 
r1
 = (
e1
->
k
 =
VNONRELOC
Ë?É1->
u
.
öfo
 : -1;

409 
r2
 = (
e2
->
k
 =
VNONRELOC
Ë?É2->
u
.
öfo
 : -1;

410 i‡(
r1
 > 
r2
) {

411 
	`‰ìªg
(
fs
, 
r1
);

412 
	`‰ìªg
(
fs
, 
r2
);

415 
	`‰ìªg
(
fs
, 
r2
);

416 
	`‰ìªg
(
fs
, 
r1
);

418 
	}
}

428 
	$addk
 (
FuncSèã
 *
fs
, 
TVÆue
 *
key
, TVÆuê*
v
) {

429 
lua_Sèã
 *
L
 = 
fs
->
ls
->L;

430 
PrŸo
 *
f
 = 
fs
->f;

431 
TVÆue
 *
idx
 = 
	`luaH_£t
(
L
, 
fs
->
ls
->
h
, 
key
);

432 
k
, 
ﬁdsize
;

433 i‡(
	`âisöãgî
(
idx
)) {

434 
k
 = 
	`ˇ°_öt
(
	`ivÆue
(
idx
));

436 i‡(
k
 < 
fs
->
nk
 && 
	`ây≥
(&
f
->k[k]Ë=ây≥(
v
) &&

437 
	`luaV_øwequÆobj
(&
f
->
k
[k], 
v
))

438  
k
;

441 
ﬁdsize
 = 
f
->
sizek
;

442 
k
 = 
fs
->
nk
;

445 
	`£tivÆue
(
idx
, 
k
);

446 
	`luaM_growve˘‹
(
L
, 
f
->
k
, k, f->
sizek
, 
TVÆue
, 
MAXARG_Ax
, "constants");

447 
ﬁdsize
 < 
f
->
sizek
Ë
	`£äûvÆue
(&f->
k
[oldsize++]);

448 
	`£tobj
(
L
, &
f
->
k
[k], 
v
);

449 
fs
->
nk
++;

450 
	`luaC_b¨rõr
(
L
, 
f
, 
v
);

451  
k
;

452 
	}
}

458 
	$luaK_°rögK
 (
FuncSèã
 *
fs
, 
TSåög
 *
s
) {

459 
TVÆue
 
o
;

460 
	`£tsvÆue
(
fs
->
ls
->
L
, &
o
, 
s
);

461  
	`addk
(
fs
, &
o
, &o);

462 
	}
}

471 
	$luaK_ötK
 (
FuncSèã
 *
fs
, 
lua_I¡egî
 
n
) {

472 
TVÆue
 
k
, 
o
;

473 
	`£çvÆue
(&
k
, 
	`ˇ°
(*, ca°(
size_t
, 
n
)));

474 
	`£tivÆue
(&
o
, 
n
);

475  
	`addk
(
fs
, &
k
, &
o
);

476 
	}
}

481 
	$luaK_numbîK
 (
FuncSèã
 *
fs
, 
lua_Numbî
 
r
) {

482 
TVÆue
 
o
;

483 
	`£tÊtvÆue
(&
o
, 
r
);

484  
	`addk
(
fs
, &
o
, &o);

485 
	}
}

491 
	$boﬁK
 (
FuncSèã
 *
fs
, 
b
) {

492 
TVÆue
 
o
;

493 
	`£tbvÆue
(&
o
, 
b
);

494  
	`addk
(
fs
, &
o
, &o);

495 
	}
}

501 
	$nûK
 (
FuncSèã
 *
fs
) {

502 
TVÆue
 
k
, 
v
;

503 
	`£äûvÆue
(&
v
);

505 
	`£thvÆue
(
fs
->
ls
->
L
, &
k
, fs->ls->
h
);

506  
	`addk
(
fs
, &
k
, &
v
);

507 
	}
}

515 
	$luaK_£åëu∫s
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
, 
ƒesu…s
) {

516 i‡(
e
->
k
 =
VCALL
) {

517 
	`SETARG_C
(
	`gëö°ru˘i⁄
(
fs
, 
e
), 
ƒesu…s
 + 1);

519 i‡(
e
->
k
 =
VVARARG
) {

520 
In°ru˘i⁄
 *
pc
 = &
	`gëö°ru˘i⁄
(
fs
, 
e
);

521 
	`SETARG_B
(*
pc
, 
ƒesu…s
 + 1);

522 
	`SETARG_A
(*
pc
, 
fs
->
‰ìªg
);

523 
	`luaK_ª£rvîegs
(
fs
, 1);

525 
	`lua_as£π
(
ƒesu…s
 =
LUA_MULTRET
);

526 
	}
}

539 
	$luaK_£t⁄îë
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

540 i‡(
e
->
k
 =
VCALL
) {

542 
	`lua_as£π
(
	`GETARG_C
(
	`gëö°ru˘i⁄
(
fs
, 
e
)) == 2);

543 
e
->
k
 = 
VNONRELOC
;

544 
e
->
u
.
öfo
 = 
	`GETARG_A
(
	`gëö°ru˘i⁄
(
fs
,É));

546 i‡(
e
->
k
 =
VVARARG
) {

547 
	`SETARG_B
(
	`gëö°ru˘i⁄
(
fs
, 
e
), 2);

548 
e
->
k
 = 
VRELOCABLE
;

550 
	}
}

556 
	$luaK_disch¨gev¨s
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

557 
e
->
k
) {

558 
VLOCAL
: {

559 
e
->
k
 = 
VNONRELOC
;

562 
VUPVAL
: {

563 
e
->
u
.
öfo
 = 
	`luaK_codeABC
(
fs
, 
OP_GETUPVAL
, 0,É->u.info, 0);

564 
e
->
k
 = 
VRELOCABLE
;

567 
VINDEXED
: {

568 
OpCode
 
›
;

569 
	`‰ìªg
(
fs
, 
e
->
u
.
öd
.
idx
);

570 i‡(
e
->
u
.
öd
.
vt
 =
VLOCAL
) {

571 
	`‰ìªg
(
fs
, 
e
->
u
.
öd
.
t
);

572 
›
 = 
OP_GETTABLE
;

575 
	`lua_as£π
(
e
->
u
.
öd
.
vt
 =
VUPVAL
);

576 
›
 = 
OP_GETTABUP
;

578 
e
->
u
.
öfo
 = 
	`luaK_codeABC
(
fs
, 
›
, 0,É->u.
öd
.
t
,É->u.öd.
idx
);

579 
e
->
k
 = 
VRELOCABLE
;

582 
VVARARG
: 
VCALL
: {

583 
	`luaK_£t⁄îë
(
fs
, 
e
);

588 
	}
}

595 
	$disch¨ge2ªg
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
, 
ªg
) {

596 
	`luaK_disch¨gev¨s
(
fs
, 
e
);

597 
e
->
k
) {

598 
VNIL
: {

599 
	`luaK_nû
(
fs
, 
ªg
, 1);

602 
VFALSE
: 
VTRUE
: {

603 
	`luaK_codeABC
(
fs
, 
OP_LOADBOOL
, 
ªg
, 
e
->
k
 =
VTRUE
, 0);

606 
VK
: {

607 
	`luaK_codek
(
fs
, 
ªg
, 
e
->
u
.
öfo
);

610 
VKFLT
: {

611 
	`luaK_codek
(
fs
, 
ªg
, 
	`luaK_numbîK
(fs, 
e
->
u
.
nvÆ
));

614 
VKINT
: {

615 
	`luaK_codek
(
fs
, 
ªg
, 
	`luaK_ötK
(fs, 
e
->
u
.
ivÆ
));

618 
VRELOCABLE
: {

619 
In°ru˘i⁄
 *
pc
 = &
	`gëö°ru˘i⁄
(
fs
, 
e
);

620 
	`SETARG_A
(*
pc
, 
ªg
);

623 
VNONRELOC
: {

624 i‡(
ªg
 !
e
->
u
.
öfo
)

625 
	`luaK_codeABC
(
fs
, 
OP_MOVE
, 
ªg
, 
e
->
u
.
öfo
, 0);

629 
	`lua_as£π
(
e
->
k
 =
VJMP
);

633 
e
->
u
.
öfo
 = 
ªg
;

634 
e
->
k
 = 
VNONRELOC
;

635 
	}
}

641 
	$disch¨ge2™yªg
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

642 i‡(
e
->
k
 !
VNONRELOC
) {

643 
	`luaK_ª£rvîegs
(
fs
, 1);

644 
	`disch¨ge2ªg
(
fs
, 
e
, fs->
‰ìªg
-1);

646 
	}
}

649 
	$code_lﬂdboﬁ
 (
FuncSèã
 *
fs
, 
A
, 
b
, 
jump
) {

650 
	`luaK_gëœbñ
(
fs
);

651  
	`luaK_codeABC
(
fs
, 
OP_LOADBOOL
, 
A
, 
b
, 
jump
);

652 
	}
}

659 
	$√ed_vÆue
 (
FuncSèã
 *
fs
, 
li°
) {

660 ; 
li°
 !
NO_JUMP
;Üi° = 
	`gëjump
(
fs
,Üist)) {

661 
In°ru˘i⁄
 
i
 = *
	`gëjumpc⁄åﬁ
(
fs
, 
li°
);

662 i‡(
	`GET_OPCODE
(
i
Ë!
OP_TESTSET
)  1;

665 
	}
}

675 
	$exp2ªg
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
, 
ªg
) {

676 
	`disch¨ge2ªg
(
fs
, 
e
, 
ªg
);

677 i‡(
e
->
k
 =
VJMP
)

678 
	`luaK_c⁄ˇt
(
fs
, &
e
->
t
,É->
u
.
öfo
);

679 i‡(
	`hasjumps
(
e
)) {

680 
föÆ
;

681 
p_f
 = 
NO_JUMP
;

682 
p_t
 = 
NO_JUMP
;

683 i‡(
	`√ed_vÆue
(
fs
, 
e
->
t
Ë||Çìd_vÆue(fs,É->
f
)) {

684 
fj
 = (
e
->
k
 =
VJMP
Ë? 
NO_JUMP
 : 
	`luaK_jump
(
fs
);

685 
p_f
 = 
	`code_lﬂdboﬁ
(
fs
, 
ªg
, 0, 1);

686 
p_t
 = 
	`code_lﬂdboﬁ
(
fs
, 
ªg
, 1, 0);

687 
	`luaK_∑tchtohîe
(
fs
, 
fj
);

689 
föÆ
 = 
	`luaK_gëœbñ
(
fs
);

690 
	`∑tchli°aux
(
fs
, 
e
->
f
, 
föÆ
, 
ªg
, 
p_f
);

691 
	`∑tchli°aux
(
fs
, 
e
->
t
, 
föÆ
, 
ªg
, 
p_t
);

693 
e
->
f
 =É->
t
 = 
NO_JUMP
;

694 
e
->
u
.
öfo
 = 
ªg
;

695 
e
->
k
 = 
VNONRELOC
;

696 
	}
}

703 
	$luaK_exp2√xåeg
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

704 
	`luaK_disch¨gev¨s
(
fs
, 
e
);

705 
	`‰ìexp
(
fs
, 
e
);

706 
	`luaK_ª£rvîegs
(
fs
, 1);

707 
	`exp2ªg
(
fs
, 
e
, fs->
‰ìªg
 - 1);

708 
	}
}

715 
	$luaK_exp2™yªg
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

716 
	`luaK_disch¨gev¨s
(
fs
, 
e
);

717 i‡(
e
->
k
 =
VNONRELOC
) {

718 i‡(!
	`hasjumps
(
e
))

719  
e
->
u
.
öfo
;

720 i‡(
e
->
u
.
öfo
 >
fs
->
«˘v¨
) {

721 
	`exp2ªg
(
fs
, 
e
,É->
u
.
öfo
);

722  
e
->
u
.
öfo
;

725 
	`luaK_exp2√xåeg
(
fs
, 
e
);

726  
e
->
u
.
öfo
;

727 
	}
}

734 
	$luaK_exp2™yªgup
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

735 i‡(
e
->
k
 !
VUPVAL
 || 
	`hasjumps
(e))

736 
	`luaK_exp2™yªg
(
fs
, 
e
);

737 
	}
}

744 
	$luaK_exp2vÆ
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

745 i‡(
	`hasjumps
(
e
))

746 
	`luaK_exp2™yªg
(
fs
, 
e
);

748 
	`luaK_disch¨gev¨s
(
fs
, 
e
);

749 
	}
}

758 
	$luaK_exp2RK
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

759 
	`luaK_exp2vÆ
(
fs
, 
e
);

760 
e
->
k
) {

761 
VTRUE
: 
e
->
u
.
öfo
 = 
	`boﬁK
(
fs
, 1); 
vk
;

762 
VFALSE
: 
e
->
u
.
öfo
 = 
	`boﬁK
(
fs
, 0); 
vk
;

763 
VNIL
: 
e
->
u
.
öfo
 = 
	`nûK
(
fs
); 
vk
;

764 
VKINT
: 
e
->
u
.
öfo
 = 
	`luaK_ötK
(
fs
,É->u.
ivÆ
); 
vk
;

765 
VKFLT
: 
e
->
u
.
öfo
 = 
	`luaK_numbîK
(
fs
,É->u.
nvÆ
); 
vk
;

766 
VK
:

767 
vk
:

768 
e
->
k
 = 
VK
;

769 i‡(
e
->
u
.
öfo
 <
MAXINDEXRK
)

770  
	`RKASK
(
e
->
u
.
öfo
);

775  
	`luaK_exp2™yªg
(
fs
, 
e
);

776 
	}
}

782 
	$luaK_°‹ev¨
 (
FuncSèã
 *
fs
, 
expdesc
 *
v¨
,Éxpdes¯*
ex
) {

783 
v¨
->
k
) {

784 
VLOCAL
: {

785 
	`‰ìexp
(
fs
, 
ex
);

786 
	`exp2ªg
(
fs
, 
ex
, 
v¨
->
u
.
öfo
);

789 
VUPVAL
: {

790 
e
 = 
	`luaK_exp2™yªg
(
fs
, 
ex
);

791 
	`luaK_codeABC
(
fs
, 
OP_SETUPVAL
, 
e
, 
v¨
->
u
.
öfo
, 0);

794 
VINDEXED
: {

795 
OpCode
 
›
 = (
v¨
->
u
.
öd
.
vt
 =
VLOCAL
Ë? 
OP_SETTABLE
 : 
OP_SETTABUP
;

796 
e
 = 
	`luaK_exp2RK
(
fs
, 
ex
);

797 
	`luaK_codeABC
(
fs
, 
›
, 
v¨
->
u
.
öd
.
t
, v¨->u.öd.
idx
, 
e
);

800 : 
	`lua_as£π
(0);

802 
	`‰ìexp
(
fs
, 
ex
);

803 
	}
}

809 
	$luaK_£lf
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
,Éxpdes¯*
key
) {

810 
îeg
;

811 
	`luaK_exp2™yªg
(
fs
, 
e
);

812 
îeg
 = 
e
->
u
.
öfo
;

813 
	`‰ìexp
(
fs
, 
e
);

814 
e
->
u
.
öfo
 = 
fs
->
‰ìªg
;

815 
e
->
k
 = 
VNONRELOC
;

816 
	`luaK_ª£rvîegs
(
fs
, 2);

817 
	`luaK_codeABC
(
fs
, 
OP_SELF
, 
e
->
u
.
öfo
, 
îeg
, 
	`luaK_exp2RK
(fs, 
key
));

818 
	`‰ìexp
(
fs
, 
key
);

819 
	}
}

825 
	$√g©ec⁄dôi⁄
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

826 
In°ru˘i⁄
 *
pc
 = 
	`gëjumpc⁄åﬁ
(
fs
, 
e
->
u
.
öfo
);

827 
	`lua_as£π
(
	`ã°TMode
(
	`GET_OPCODE
(*
pc
)Ë&& GET_OPCODE(*pcË!
OP_TESTSET
 &&

828 
	`GET_OPCODE
(*
pc
Ë!
OP_TEST
);

829 
	`SETARG_A
(*
pc
, !(
	`GETARG_A
(*pc)));

830 
	}
}

839 
	$jump⁄c⁄d
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
, 
c⁄d
) {

840 i‡(
e
->
k
 =
VRELOCABLE
) {

841 
In°ru˘i⁄
 
õ
 = 
	`gëö°ru˘i⁄
(
fs
, 
e
);

842 i‡(
	`GET_OPCODE
(
õ
Ë=
OP_NOT
) {

843 
fs
->
pc
--;

844  
	`c⁄djump
(
fs
, 
OP_TEST
, 
	`GETARG_B
(
õ
), 0, !
c⁄d
);

848 
	`disch¨ge2™yªg
(
fs
, 
e
);

849 
	`‰ìexp
(
fs
, 
e
);

850  
	`c⁄djump
(
fs
, 
OP_TESTSET
, 
NO_REG
, 
e
->
u
.
öfo
, 
c⁄d
);

851 
	}
}

857 
	$luaK_goi·rue
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

858 
pc
;

859 
	`luaK_disch¨gev¨s
(
fs
, 
e
);

860 
e
->
k
) {

861 
VJMP
: {

862 
	`√g©ec⁄dôi⁄
(
fs
, 
e
);

863 
pc
 = 
e
->
u
.
öfo
;

866 
VK
: 
VKFLT
: 
VKINT
: 
VTRUE
: {

867 
pc
 = 
NO_JUMP
;

871 
pc
 = 
	`jump⁄c⁄d
(
fs
, 
e
, 0);

875 
	`luaK_c⁄ˇt
(
fs
, &
e
->
f
, 
pc
);

876 
	`luaK_∑tchtohîe
(
fs
, 
e
->
t
);

877 
e
->
t
 = 
NO_JUMP
;

878 
	}
}

884 
	$luaK_goifÁl£
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

885 
pc
;

886 
	`luaK_disch¨gev¨s
(
fs
, 
e
);

887 
e
->
k
) {

888 
VJMP
: {

889 
pc
 = 
e
->
u
.
öfo
;

892 
VNIL
: 
VFALSE
: {

893 
pc
 = 
NO_JUMP
;

897 
pc
 = 
	`jump⁄c⁄d
(
fs
, 
e
, 1);

901 
	`luaK_c⁄ˇt
(
fs
, &
e
->
t
, 
pc
);

902 
	`luaK_∑tchtohîe
(
fs
, 
e
->
f
);

903 
e
->
f
 = 
NO_JUMP
;

904 
	}
}

910 
	$codíŸ
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

911 
	`luaK_disch¨gev¨s
(
fs
, 
e
);

912 
e
->
k
) {

913 
VNIL
: 
VFALSE
: {

914 
e
->
k
 = 
VTRUE
;

917 
VK
: 
VKFLT
: 
VKINT
: 
VTRUE
: {

918 
e
->
k
 = 
VFALSE
;

921 
VJMP
: {

922 
	`√g©ec⁄dôi⁄
(
fs
, 
e
);

925 
VRELOCABLE
:

926 
VNONRELOC
: {

927 
	`disch¨ge2™yªg
(
fs
, 
e
);

928 
	`‰ìexp
(
fs
, 
e
);

929 
e
->
u
.
öfo
 = 
	`luaK_codeABC
(
fs
, 
OP_NOT
, 0,É->u.info, 0);

930 
e
->
k
 = 
VRELOCABLE
;

933 : 
	`lua_as£π
(0);

936 { 
ãmp
 = 
e
->
f
;É->‡e->
t
;É->t =Åemp; }

937 
	`ªmovevÆues
(
fs
, 
e
->
f
);

938 
	`ªmovevÆues
(
fs
, 
e
->
t
);

939 
	}
}

946 
	$luaK_ödexed
 (
FuncSèã
 *
fs
, 
expdesc
 *
t
,Éxpdes¯*
k
) {

947 
	`lua_as£π
(!
	`hasjumps
(
t
Ë&& (
	`vkisöªg
—->
k
Ë||Å->k =
VUPVAL
));

948 
t
->
u
.
öd
.àt->u.
öfo
;

949 
t
->
u
.
öd
.
idx
 = 
	`luaK_exp2RK
(
fs
, 
k
);

950 
t
->
u
.
öd
.
vt
 = (t->
k
 =
VUPVAL
Ë? VUPVAL : 
VLOCAL
;

951 
t
->
k
 = 
VINDEXED
;

952 
	}
}

960 
	$vÆid›
 (
›
, 
TVÆue
 *
v1
, TVÆuê*
v2
) {

961 
›
) {

962 
LUA_OPBAND
: 
LUA_OPBOR
: 
LUA_OPBXOR
:

963 
LUA_OPSHL
: 
LUA_OPSHR
: 
LUA_OPBNOT
: {

964 
lua_I¡egî
 
i
;

965  (
	`toöãgî
(
v1
, &
i
Ë&&Åoöãgî(
v2
, &i));

967 
LUA_OPDIV
: 
LUA_OPIDIV
: 
LUA_OPMOD
:

968  (
	`nvÆue
(
v2
) != 0);

971 
	}
}

978 
	$c⁄°fﬁdög
 (
FuncSèã
 *
fs
, 
›
, 
expdesc
 *
e1
,

979 c⁄° 
expdesc
 *
e2
) {

980 
TVÆue
 
v1
, 
v2
, 
ªs
;

981 i‡(!
	`t⁄umîÆ
(
e1
, &
v1
Ë|| !t⁄umîÆ(
e2
, &
v2
Ë|| !
	`vÆid›
(
›
, &v1, &v2))

983 
	`luaO_¨ôh
(
fs
->
ls
->
L
, 
›
, &
v1
, &
v2
, &
ªs
);

984 i‡(
	`âisöãgî
(&
ªs
)) {

985 
e1
->
k
 = 
VKINT
;

986 
e1
->
u
.
ivÆ
 = 
	`ivÆue
(&
ªs
);

989 
lua_Numbî
 
n
 = 
	`ÊtvÆue
(&
ªs
);

990 i‡(
	`luai_numi¢™
(
n
) ||Ç == 0)

992 
e1
->
k
 = 
VKFLT
;

993 
e1
->
u
.
nvÆ
 = 
n
;

996 
	}
}

1004 
	$codeu√xpvÆ
 (
FuncSèã
 *
fs
, 
OpCode
 
›
, 
expdesc
 *
e
, 
löe
) {

1005 
r
 = 
	`luaK_exp2™yªg
(
fs
, 
e
);

1006 
	`‰ìexp
(
fs
, 
e
);

1007 
e
->
u
.
öfo
 = 
	`luaK_codeABC
(
fs
, 
›
, 0, 
r
, 0);

1008 
e
->
k
 = 
VRELOCABLE
;

1009 
	`luaK_fixlöe
(
fs
, 
löe
);

1010 
	}
}

1022 
	$codeböexpvÆ
 (
FuncSèã
 *
fs
, 
OpCode
 
›
,

1023 
expdesc
 *
e1
,Éxpdes¯*
e2
, 
löe
) {

1024 
rk2
 = 
	`luaK_exp2RK
(
fs
, 
e2
);

1025 
rk1
 = 
	`luaK_exp2RK
(
fs
, 
e1
);

1026 
	`‰ìexps
(
fs
, 
e1
, 
e2
);

1027 
e1
->
u
.
öfo
 = 
	`luaK_codeABC
(
fs
, 
›
, 0, 
rk1
, 
rk2
);

1028 
e1
->
k
 = 
VRELOCABLE
;

1029 
	`luaK_fixlöe
(
fs
, 
löe
);

1030 
	}
}

1037 
	$codecomp
 (
FuncSèã
 *
fs
, 
BöO¥
 
›r
, 
expdesc
 *
e1
,Éxpdes¯*
e2
) {

1038 
rk1
 = (
e1
->
k
 =
VK
Ë? 
	`RKASK
”1->
u
.
öfo
)

1039 : 
	`check_exp
(
e1
->
k
 =
VNONRELOC
,É1->
u
.
öfo
);

1040 
rk2
 = 
	`luaK_exp2RK
(
fs
, 
e2
);

1041 
	`‰ìexps
(
fs
, 
e1
, 
e2
);

1042 
›r
) {

1043 
OPR_NE
: {

1044 
e1
->
u
.
öfo
 = 
	`c⁄djump
(
fs
, 
OP_EQ
, 0, 
rk1
, 
rk2
);

1047 
OPR_GT
: 
OPR_GE
: {

1049 
OpCode
 
›
 = 
	`ˇ°
(OpCode, (
›r
 - 
OPR_NE
Ë+ 
OP_EQ
);

1050 
e1
->
u
.
öfo
 = 
	`c⁄djump
(
fs
, 
›
, 1, 
rk2
, 
rk1
);

1054 
OpCode
 
›
 = 
	`ˇ°
(OpCode, (
›r
 - 
OPR_EQ
Ë+ 
OP_EQ
);

1055 
e1
->
u
.
öfo
 = 
	`c⁄djump
(
fs
, 
›
, 1, 
rk1
, 
rk2
);

1059 
e1
->
k
 = 
VJMP
;

1060 
	}
}

1066 
	$luaK_¥efix
 (
FuncSèã
 *
fs
, 
UnO¥
 
›
, 
expdesc
 *
e
, 
löe
) {

1067 c⁄° 
expdesc
 
ef
 = {
VKINT
, {0}, 
NO_JUMP
, NO_JUMP};

1068 
›
) {

1069 
OPR_MINUS
: 
OPR_BNOT
:

1070 i‡(
	`c⁄°fﬁdög
(
fs
, 
›
 + 
LUA_OPUNM
, 
e
, &
ef
))

1073 
OPR_LEN
:

1074 
	`codeu√xpvÆ
(
fs
, 
	`ˇ°
(
OpCode
, 
›
 + 
OP_UNM
), 
e
, 
löe
);

1076 
OPR_NOT
: 
	`codíŸ
(
fs
, 
e
); ;

1077 : 
	`lua_as£π
(0);

1079 
	}
}

1086 
	$luaK_öfix
 (
FuncSèã
 *
fs
, 
BöO¥
 
›
, 
expdesc
 *
v
) {

1087 
›
) {

1088 
OPR_AND
: {

1089 
	`luaK_goi·rue
(
fs
, 
v
);

1092 
OPR_OR
: {

1093 
	`luaK_goifÁl£
(
fs
, 
v
);

1096 
OPR_CONCAT
: {

1097 
	`luaK_exp2√xåeg
(
fs
, 
v
);

1100 
OPR_ADD
: 
OPR_SUB
:

1101 
OPR_MUL
: 
OPR_DIV
: 
OPR_IDIV
:

1102 
OPR_MOD
: 
OPR_POW
:

1103 
OPR_BAND
: 
OPR_BOR
: 
OPR_BXOR
:

1104 
OPR_SHL
: 
OPR_SHR
: {

1105 i‡(!
	`t⁄umîÆ
(
v
, 
NULL
))

1106 
	`luaK_exp2RK
(
fs
, 
v
);

1111 
	`luaK_exp2RK
(
fs
, 
v
);

1115 
	}
}

1124 
	$luaK_posfix
 (
FuncSèã
 *
fs
, 
BöO¥
 
›
,

1125 
expdesc
 *
e1
,Éxpdes¯*
e2
, 
löe
) {

1126 
›
) {

1127 
OPR_AND
: {

1128 
	`lua_as£π
(
e1
->
t
 =
NO_JUMP
);

1129 
	`luaK_disch¨gev¨s
(
fs
, 
e2
);

1130 
	`luaK_c⁄ˇt
(
fs
, &
e2
->
f
, 
e1
->f);

1131 *
e1
 = *
e2
;

1134 
OPR_OR
: {

1135 
	`lua_as£π
(
e1
->
f
 =
NO_JUMP
);

1136 
	`luaK_disch¨gev¨s
(
fs
, 
e2
);

1137 
	`luaK_c⁄ˇt
(
fs
, &
e2
->
t
, 
e1
->t);

1138 *
e1
 = *
e2
;

1141 
OPR_CONCAT
: {

1142 
	`luaK_exp2vÆ
(
fs
, 
e2
);

1143 i‡(
e2
->
k
 =
VRELOCABLE
 &&

1144 
	`GET_OPCODE
(
	`gëö°ru˘i⁄
(
fs
, 
e2
)Ë=
OP_CONCAT
) {

1145 
	`lua_as£π
(
e1
->
u
.
öfo
 =
	`GETARG_B
(
	`gëö°ru˘i⁄
(
fs
, 
e2
))-1);

1146 
	`‰ìexp
(
fs
, 
e1
);

1147 
	`SETARG_B
(
	`gëö°ru˘i⁄
(
fs
, 
e2
), 
e1
->
u
.
öfo
);

1148 
e1
->
k
 = 
VRELOCABLE
;É1->
u
.
öfo
 = 
e2
->u.info;

1151 
	`luaK_exp2√xåeg
(
fs
, 
e2
);

1152 
	`codeböexpvÆ
(
fs
, 
OP_CONCAT
, 
e1
, 
e2
, 
löe
);

1156 
OPR_ADD
: 
OPR_SUB
: 
OPR_MUL
: 
OPR_DIV
:

1157 
OPR_IDIV
: 
OPR_MOD
: 
OPR_POW
:

1158 
OPR_BAND
: 
OPR_BOR
: 
OPR_BXOR
:

1159 
OPR_SHL
: 
OPR_SHR
: {

1160 i‡(!
	`c⁄°fﬁdög
(
fs
, 
›
 + 
LUA_OPADD
, 
e1
, 
e2
))

1161 
	`codeböexpvÆ
(
fs
, 
	`ˇ°
(
OpCode
, 
›
 + 
OP_ADD
), 
e1
, 
e2
, 
löe
);

1164 
OPR_EQ
: 
OPR_LT
: 
OPR_LE
:

1165 
OPR_NE
: 
OPR_GT
: 
OPR_GE
: {

1166 
	`codecomp
(
fs
, 
›
, 
e1
, 
e2
);

1169 : 
	`lua_as£π
(0);

1171 
	}
}

1177 
	$luaK_fixlöe
 (
FuncSèã
 *
fs
, 
löe
) {

1178 
fs
->
f
->
löeöfo
[fs->
pc
 - 1] = 
löe
;

1179 
	}
}

1189 
	$luaK_£éi°
 (
FuncSèã
 *
fs
, 
ba£
, 
√Àms
, 
to°‹e
) {

1190 
c
 = (
√Àms
 - 1)/
LFIELDS_PER_FLUSH
 + 1;

1191 
b
 = (
to°‹e
 =
LUA_MULTRET
) ? 0 :Åostore;

1192 
	`lua_as£π
(
to°‹e
 !0 &&Åo°‹ê<
LFIELDS_PER_FLUSH
);

1193 i‡(
c
 <
MAXARG_C
)

1194 
	`luaK_codeABC
(
fs
, 
OP_SETLIST
, 
ba£
, 
b
, 
c
);

1195 i‡(
c
 <
MAXARG_Ax
) {

1196 
	`luaK_codeABC
(
fs
, 
OP_SETLIST
, 
ba£
, 
b
, 0);

1197 
	`codìxåØrg
(
fs
, 
c
);

1200 
	`luaX_sy¡axîr‹
(
fs
->
ls
, "constructorÅooÜong");

1201 
fs
->
‰ìªg
 = 
ba£
 + 1;

1202 
	}
}

	@lib/lua/lua-5.3.4/src/lcode.h

7 #i‚de‡
lcode_h


8 
	#lcode_h


	)

10 
	~"Œex.h
"

11 
	~"lobje˘.h
"

12 
	~"l›codes.h
"

13 
	~"Õ¨£r.h
"

20 
	#NO_JUMP
 (-1)

	)

26 
	eBöO¥
 {

27 
	mOPR_ADD
, 
	mOPR_SUB
, 
	mOPR_MUL
, 
	mOPR_MOD
, 
	mOPR_POW
,

28 
	mOPR_DIV
,

29 
	mOPR_IDIV
,

30 
	mOPR_BAND
, 
	mOPR_BOR
, 
	mOPR_BXOR
,

31 
	mOPR_SHL
, 
	mOPR_SHR
,

32 
	mOPR_CONCAT
,

33 
	mOPR_EQ
, 
	mOPR_LT
, 
	mOPR_LE
,

34 
	mOPR_NE
, 
	mOPR_GT
, 
	mOPR_GE
,

35 
	mOPR_AND
, 
	mOPR_OR
,

36 
	mOPR_NOBINOPR


37 } 
	tBöO¥
;

40 
	eUnO¥
 { 
	mOPR_MINUS
, 
	mOPR_BNOT
, 
	mOPR_NOT
, 
	mOPR_LEN
, 
	mOPR_NOUNOPR
 } 
	tUnO¥
;

44 
	#gëö°ru˘i⁄
(
fs
,
e
Ë((fs)->
f
->
code
[”)->
u
.
öfo
])

	)

46 
	#luaK_codeAsBx
(
fs
,
o
,
A
,
sBx
Ë
	`luaK_codeABx
(fs,o,A,(sBx)+
MAXARG_sBx
)

	)

48 
	#luaK_£tmu…ªt
(
fs
,
e
Ë
	`luaK_£åëu∫s
(fs,É, 
LUA_MULTRET
)

	)

50 
	#luaK_jum±o
(
fs
,
t
Ë
	`luaK_∑tchli°
(fs, 
	`luaK_jump
(fs),Å)

	)

52 
LUAI_FUNC
 
luaK_codeABx
 (
FuncSèã
 *
fs
, 
OpCode
 
o
, 
A
, 
Bx
);

53 
LUAI_FUNC
 
luaK_codeABC
 (
FuncSèã
 *
fs
, 
OpCode
 
o
, 
A
, 
B
, 
C
);

54 
LUAI_FUNC
 
luaK_codek
 (
FuncSèã
 *
fs
, 
ªg
, 
k
);

55 
LUAI_FUNC
 
luaK_fixlöe
 (
FuncSèã
 *
fs
, 
löe
);

56 
LUAI_FUNC
 
luaK_nû
 (
FuncSèã
 *
fs
, 
‰om
, 
n
);

57 
LUAI_FUNC
 
luaK_ª£rvîegs
 (
FuncSèã
 *
fs
, 
n
);

58 
LUAI_FUNC
 
luaK_check°ack
 (
FuncSèã
 *
fs
, 
n
);

59 
LUAI_FUNC
 
luaK_°rögK
 (
FuncSèã
 *
fs
, 
TSåög
 *
s
);

60 
LUAI_FUNC
 
luaK_ötK
 (
FuncSèã
 *
fs
, 
lua_I¡egî
 
n
);

61 
LUAI_FUNC
 
luaK_disch¨gev¨s
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
);

62 
LUAI_FUNC
 
luaK_exp2™yªg
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
);

63 
LUAI_FUNC
 
luaK_exp2™yªgup
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
);

64 
LUAI_FUNC
 
luaK_exp2√xåeg
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
);

65 
LUAI_FUNC
 
luaK_exp2vÆ
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
);

66 
LUAI_FUNC
 
luaK_exp2RK
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
);

67 
LUAI_FUNC
 
luaK_£lf
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
,Éxpdes¯*
key
);

68 
LUAI_FUNC
 
luaK_ödexed
 (
FuncSèã
 *
fs
, 
expdesc
 *
t
,Éxpdes¯*
k
);

69 
LUAI_FUNC
 
luaK_goi·rue
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
);

70 
LUAI_FUNC
 
luaK_goifÁl£
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
);

71 
LUAI_FUNC
 
luaK_°‹ev¨
 (
FuncSèã
 *
fs
, 
expdesc
 *
v¨
,Éxpdes¯*
e
);

72 
LUAI_FUNC
 
luaK_£åëu∫s
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
, 
ƒesu…s
);

73 
LUAI_FUNC
 
luaK_£t⁄îë
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
);

74 
LUAI_FUNC
 
luaK_jump
 (
FuncSèã
 *
fs
);

75 
LUAI_FUNC
 
luaK_ªt
 (
FuncSèã
 *
fs
, 
fú°
, 
ƒë
);

76 
LUAI_FUNC
 
luaK_∑tchli°
 (
FuncSèã
 *
fs
, 
li°
, 
èrgë
);

77 
LUAI_FUNC
 
luaK_∑tchtohîe
 (
FuncSèã
 *
fs
, 
li°
);

78 
LUAI_FUNC
 
luaK_∑tch˛o£
 (
FuncSèã
 *
fs
, 
li°
, 
Àvñ
);

79 
LUAI_FUNC
 
luaK_c⁄ˇt
 (
FuncSèã
 *
fs
, *
l1
, 
l2
);

80 
LUAI_FUNC
 
luaK_gëœbñ
 (
FuncSèã
 *
fs
);

81 
LUAI_FUNC
 
luaK_¥efix
 (
FuncSèã
 *
fs
, 
UnO¥
 
›
, 
expdesc
 *
v
, 
löe
);

82 
LUAI_FUNC
 
luaK_öfix
 (
FuncSèã
 *
fs
, 
BöO¥
 
›
, 
expdesc
 *
v
);

83 
LUAI_FUNC
 
luaK_posfix
 (
FuncSèã
 *
fs
, 
BöO¥
 
›
, 
expdesc
 *
v1
,

84 
expdesc
 *
v2
, 
löe
);

85 
LUAI_FUNC
 
luaK_£éi°
 (
FuncSèã
 *
fs
, 
ba£
, 
√Àms
, 
to°‹e
);

	@lib/lua/lua-5.3.4/src/lcorolib.c

7 
	#lc‹ﬁib_c


	)

8 
	#LUA_LIB


	)

10 
	~"Õªfix.h
"

13 
	~<°dlib.h
>

15 
	~"lua.h
"

17 
	~"œuxlib.h
"

18 
	~"luÆib.h
"

21 
lua_Sèã
 *
	$gëco
 (
lua_Sèã
 *
L
) {

22 
lua_Sèã
 *
co
 = 
	`lua_tŸhªad
(
L
, 1);

23 
	`luaL_¨gcheck
(
L
, 
co
, 1, "threadÉxpected");

24  
co
;

25 
	}
}

28 
	$auxªsume
 (
lua_Sèã
 *
L
,Üua_Sèã *
co
, 
«rg
) {

29 
°©us
;

30 i‡(!
	`lua_check°ack
(
co
, 
«rg
)) {

31 
	`lua_pushlôîÆ
(
L
, "too manyárgumentsÅoÑesume");

34 i‡(
	`lua_°©us
(
co
Ë=
LUA_OK
 && 
	`lua_gët›
(co) == 0) {

35 
	`lua_pushlôîÆ
(
L
, "cannotÑesume dead coroutine");

38 
	`lua_xmove
(
L
, 
co
, 
«rg
);

39 
°©us
 = 
	`lua_ªsume
(
co
, 
L
, 
«rg
);

40 i‡(
°©us
 =
LUA_OK
 || sètu†=
LUA_YIELD
) {

41 
ƒes
 = 
	`lua_gët›
(
co
);

42 i‡(!
	`lua_check°ack
(
L
, 
ƒes
 + 1)) {

43 
	`lua_p›
(
co
, 
ƒes
);

44 
	`lua_pushlôîÆ
(
L
, "too manyÑesultsÅoÑesume");

47 
	`lua_xmove
(
co
, 
L
, 
ƒes
);

48  
ƒes
;

51 
	`lua_xmove
(
co
, 
L
, 1);

54 
	}
}

57 
	$luaB_c‹esume
 (
lua_Sèã
 *
L
) {

58 
lua_Sèã
 *
co
 = 
	`gëco
(
L
);

59 
r
;

60 
r
 = 
	`auxªsume
(
L
, 
co
, 
	`lua_gët›
(L) - 1);

61 i‡(
r
 < 0) {

62 
	`lua_pushboﬁón
(
L
, 0);

63 
	`lua_ö£π
(
L
, -2);

67 
	`lua_pushboﬁón
(
L
, 1);

68 
	`lua_ö£π
(
L
, -(
r
 + 1));

69  
r
 + 1;

71 
	}
}

74 
	$luaB_auxwøp
 (
lua_Sèã
 *
L
) {

75 
lua_Sèã
 *
co
 = 
	`lua_tŸhªad
(
L
, 
	`lua_upvÆueödex
(1));

76 
r
 = 
	`auxªsume
(
L
, 
co
, 
	`lua_gët›
(L));

77 i‡(
r
 < 0) {

78 i‡(
	`lua_ty≥
(
L
, -1Ë=
LUA_TSTRING
) {

79 
	`luaL_whîe
(
L
, 1);

80 
	`lua_ö£π
(
L
, -2);

81 
	`lua_c⁄ˇt
(
L
, 2);

83  
	`lua_îr‹
(
L
);

85  
r
;

86 
	}
}

89 
	$luaB_co¸óã
 (
lua_Sèã
 *
L
) {

90 
lua_Sèã
 *
NL
;

91 
	`luaL_checkty≥
(
L
, 1, 
LUA_TFUNCTION
);

92 
NL
 = 
	`lua_√wthªad
(
L
);

93 
	`lua_pushvÆue
(
L
, 1);

94 
	`lua_xmove
(
L
, 
NL
, 1);

96 
	}
}

99 
	$luaB_cowøp
 (
lua_Sèã
 *
L
) {

100 
	`luaB_co¸óã
(
L
);

101 
	`lua_pushc˛osuª
(
L
, 
luaB_auxwøp
, 1);

103 
	}
}

106 
	$luaB_yõld
 (
lua_Sèã
 *
L
) {

107  
	`lua_yõld
(
L
, 
	`lua_gët›
(L));

108 
	}
}

111 
	$luaB_co°©us
 (
lua_Sèã
 *
L
) {

112 
lua_Sèã
 *
co
 = 
	`gëco
(
L
);

113 i‡(
L
 =
co
Ë
	`lua_pushlôîÆ
(L, "running");

115 
	`lua_°©us
(
co
)) {

116 
LUA_YIELD
:

117 
	`lua_pushlôîÆ
(
L
, "suspended");

119 
LUA_OK
: {

120 
lua_Debug
 
¨
;

121 i‡(
	`lua_gë°ack
(
co
, 0, &
¨
) > 0)

122 
	`lua_pushlôîÆ
(
L
, "normal");

123 i‡(
	`lua_gët›
(
co
) == 0)

124 
	`lua_pushlôîÆ
(
L
, "dead");

126 
	`lua_pushlôîÆ
(
L
, "suspended");

130 
	`lua_pushlôîÆ
(
L
, "dead");

135 
	}
}

138 
	$luaB_yõldabÀ
 (
lua_Sèã
 *
L
) {

139 
	`lua_pushboﬁón
(
L
, 
	`lua_isyõldabÀ
(L));

141 
	}
}

144 
	$luaB_c‹u¬ög
 (
lua_Sèã
 *
L
) {

145 
ismaö
 = 
	`lua_pushthªad
(
L
);

146 
	`lua_pushboﬁón
(
L
, 
ismaö
);

148 
	}
}

151 c⁄° 
luaL_Reg
 
	gco_funcs
[] = {

152 {"¸óã", 
luaB_co¸óã
},

153 {"ªsume", 
luaB_c‹esume
},

154 {"ru¬ög", 
luaB_c‹u¬ög
},

155 {"°©us", 
luaB_co°©us
},

156 {"wøp", 
luaB_cowøp
},

157 {"yõld", 
luaB_yõld
},

158 {"isyõldabÀ", 
luaB_yõldabÀ
},

159 {
NULL
, NULL}

164 
LUAMOD_API
 
	$lua›í_c‹outöe
 (
lua_Sèã
 *
L
) {

165 
	`luaL_√wlib
(
L
, 
co_funcs
);

167 
	}
}

	@lib/lua/lua-5.3.4/src/lctype.c

7 
	#l˘y≥_c


	)

8 
	#LUA_CORE


	)

10 
	~"Õªfix.h
"

13 
	~"l˘y≥.h
"

15 #i‡!
LUA_USE_CTYPE


17 
	~<limôs.h
>

19 
LUAI_DDEF
 c⁄° 
lu_byã
 
	gluai_˘y≥_
[
UCHAR_MAX
 + 2] = {

	@lib/lua/lua-5.3.4/src/lctype.h

7 #i‚de‡
l˘y≥_h


8 
	#l˘y≥_h


	)

10 
	~"lua.h
"

19 #i‡!
deföed
(
LUA_USE_CTYPE
)

23 
	#LUA_USE_CTYPE
 0

	)

26 
	#LUA_USE_CTYPE
 1

	)

32 #i‡!
LUA_USE_CTYPE


34 
	~<limôs.h
>

36 
	~"Œimôs.h
"

39 
	#ALPHABIT
 0

	)

40 
	#DIGITBIT
 1

	)

41 
	#PRINTBIT
 2

	)

42 
	#SPACEBIT
 3

	)

43 
	#XDIGITBIT
 4

	)

46 
	#MASK
(
B
Ë(1 << (B))

	)

52 
	#ã°¥›
(
c
,
p
Ë(
luai_˘y≥_
[(c)+1] & (p))

	)

57 
	#li¶Æpha
(
c
Ë
	`ã°¥›
(c, 
	`MASK
(
ALPHABIT
))

	)

58 
	#li¶Ænum
(
c
Ë
	`ã°¥›
(c, (
	`MASK
(
ALPHABIT
Ë| MASK(
DIGITBIT
)))

	)

59 
	#lisdigô
(
c
Ë
	`ã°¥›
(c, 
	`MASK
(
DIGITBIT
))

	)

60 
	#lis•a˚
(
c
Ë
	`ã°¥›
(c, 
	`MASK
(
SPACEBIT
))

	)

61 
	#li•röt
(
c
Ë
	`ã°¥›
(c, 
	`MASK
(
PRINTBIT
))

	)

62 
	#lisxdigô
(
c
Ë
	`ã°¥›
(c, 
	`MASK
(
XDIGITBIT
))

	)

67 
	#…ﬁowî
(
c
Ë((cË| ('A' ^ 'a'))

	)

71 
LUAI_DDEC
 c⁄° 
lu_byã
 
	gluai_˘y≥_
[
UCHAR_MAX
 + 2];

80 
	~<˘y≥.h
>

83 
	#li¶Æpha
(
c
Ë(
	`ißÕha
(cË|| (cË='_')

	)

84 
	#li¶Ænum
(
c
Ë(
	`iß um
(cË|| (cË='_')

	)

85 
	#lisdigô
(
c
Ë(
	`isdigô
(c))

	)

86 
	#lis•a˚
(
c
Ë(
	`is•a˚
(c))

	)

87 
	#li•röt
(
c
Ë(
	`i•röt
(c))

	)

88 
	#lisxdigô
(
c
Ë(
	`isxdigô
(c))

	)

90 
	#…ﬁowî
(
c
Ë(
	`tﬁowî
(c))

	)

	@lib/lua/lua-5.3.4/src/ldblib.c

7 
	#ldblib_c


	)

8 
	#LUA_LIB


	)

10 
	~"Õªfix.h
"

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<°rög.h
>

17 
	~"lua.h
"

19 
	~"œuxlib.h
"

20 
	~"luÆib.h
"

27 c⁄° 
	gHOOKKEY
 = 0;

35 
	$check°ack
 (
lua_Sèã
 *
L
,Üua_Sèã *
L1
, 
n
) {

36 i‡(
L
 !
L1
 && !
	`lua_check°ack
(L1, 
n
))

37 
	`luaL_îr‹
(
L
, "stack overflow");

38 
	}
}

41 
	$db_gëªgi°ry
 (
lua_Sèã
 *
L
) {

42 
	`lua_pushvÆue
(
L
, 
LUA_REGISTRYINDEX
);

44 
	}
}

47 
	$db_gëmë©abÀ
 (
lua_Sèã
 *
L
) {

48 
	`luaL_check™y
(
L
, 1);

49 i‡(!
	`lua_gëmë©abÀ
(
L
, 1)) {

50 
	`lua_pushnû
(
L
);

53 
	}
}

56 
	$db_£tmë©abÀ
 (
lua_Sèã
 *
L
) {

57 
t
 = 
	`lua_ty≥
(
L
, 2);

58 
	`luaL_¨gcheck
(
L
, 
t
 =
LUA_TNIL
 ||Å =
LUA_TTABLE
, 2,

60 
	`lua_£â›
(
L
, 2);

61 
	`lua_£tmë©abÀ
(
L
, 1);

63 
	}
}

66 
	$db_gëu£rvÆue
 (
lua_Sèã
 *
L
) {

67 i‡(
	`lua_ty≥
(
L
, 1Ë!
LUA_TUSERDATA
)

68 
	`lua_pushnû
(
L
);

70 
	`lua_gëu£rvÆue
(
L
, 1);

72 
	}
}

75 
	$db_£tu£rvÆue
 (
lua_Sèã
 *
L
) {

76 
	`luaL_checkty≥
(
L
, 1, 
LUA_TUSERDATA
);

77 
	`luaL_check™y
(
L
, 2);

78 
	`lua_£â›
(
L
, 2);

79 
	`lua_£tu£rvÆue
(
L
, 1);

81 
	}
}

90 
lua_Sèã
 *
	$gëthªad
 (
lua_Sèã
 *
L
, *
¨g
) {

91 i‡(
	`lua_i°hªad
(
L
, 1)) {

92 *
¨g
 = 1;

93  
	`lua_tŸhªad
(
L
, 1);

96 *
¨g
 = 0;

97  
L
;

99 
	}
}

107 
	$£âabss
 (
lua_Sèã
 *
L
, c⁄° *
k
, c⁄° *
v
) {

108 
	`lua_push°rög
(
L
, 
v
);

109 
	`lua_£tfõld
(
L
, -2, 
k
);

110 
	}
}

112 
	$£âabsi
 (
lua_Sèã
 *
L
, c⁄° *
k
, 
v
) {

113 
	`lua_pushöãgî
(
L
, 
v
);

114 
	`lua_£tfõld
(
L
, -2, 
k
);

115 
	}
}

117 
	$£âabsb
 (
lua_Sèã
 *
L
, c⁄° *
k
, 
v
) {

118 
	`lua_pushboﬁón
(
L
, 
v
);

119 
	`lua_£tfõld
(
L
, -2, 
k
);

120 
	}
}

130 
	$åót°ack›ti⁄
 (
lua_Sèã
 *
L
,Üua_Sèã *
L1
, c⁄° *
‚ame
) {

131 i‡(
L
 =
L1
)

132 
	`lua_rŸ©e
(
L
, -2, 1);

134 
	`lua_xmove
(
L1
, 
L
, 1);

135 
	`lua_£tfõld
(
L
, -2, 
‚ame
);

136 
	}
}

145 
	$db_gëöfo
 (
lua_Sèã
 *
L
) {

146 
lua_Debug
 
¨
;

147 
¨g
;

148 
lua_Sèã
 *
L1
 = 
	`gëthªad
(
L
, &
¨g
);

149 c⁄° *
›ti⁄s
 = 
	`luaL_›t°rög
(
L
, 
¨g
+2, "flnStu");

150 
	`check°ack
(
L
, 
L1
, 3);

151 i‡(
	`lua_isfun˘i⁄
(
L
, 
¨g
 + 1)) {

152 
›ti⁄s
 = 
	`lua_pushf°rög
(
L
, ">%s", options);

153 
	`lua_pushvÆue
(
L
, 
¨g
 + 1);

154 
	`lua_xmove
(
L
, 
L1
, 1);

157 i‡(!
	`lua_gë°ack
(
L1
, ()
	`luaL_checköãgî
(
L
, 
¨g
 + 1), &
¨
)) {

158 
	`lua_pushnû
(
L
);

162 i‡(!
	`lua_gëöfo
(
L1
, 
›ti⁄s
, &
¨
))

163  
	`luaL_¨gîr‹
(
L
, 
¨g
+2, "invalid option");

164 
	`lua_√wèbÀ
(
L
);

165 i‡(
	`°rchr
(
›ti⁄s
, 'S')) {

166 
	`£âabss
(
L
, "sour˚", 
¨
.
sour˚
);

167 
	`£âabss
(
L
, "sh‹t_§c", 
¨
.
sh‹t_§c
);

168 
	`£âabsi
(
L
, "löedeföed", 
¨
.
löedeföed
);

169 
	`£âabsi
(
L
, "œ°löedeföed", 
¨
.
œ°löedeföed
);

170 
	`£âabss
(
L
, "wh©", 
¨
.
wh©
);

172 i‡(
	`°rchr
(
›ti⁄s
, 'l'))

173 
	`£âabsi
(
L
, "cuºíéöe", 
¨
.
cuºíéöe
);

174 i‡(
	`°rchr
(
›ti⁄s
, 'u')) {

175 
	`£âabsi
(
L
, "nups", 
¨
.
nups
);

176 
	`£âabsi
(
L
, "≈¨ams", 
¨
.
≈¨ams
);

177 
	`£âabsb
(
L
, "isv¨¨g", 
¨
.
isv¨¨g
);

179 i‡(
	`°rchr
(
›ti⁄s
, 'n')) {

180 
	`£âabss
(
L
, "«me", 
¨
.
«me
);

181 
	`£âabss
(
L
, "«mewh©", 
¨
.
«mewh©
);

183 i‡(
	`°rchr
(
›ti⁄s
, 't'))

184 
	`£âabsb
(
L
, "i°aûˇŒ", 
¨
.
i°aûˇŒ
);

185 i‡(
	`°rchr
(
›ti⁄s
, 'L'))

186 
	`åót°ack›ti⁄
(
L
, 
L1
, "activelines");

187 i‡(
	`°rchr
(
›ti⁄s
, 'f'))

188 
	`åót°ack›ti⁄
(
L
, 
L1
, "func");

190 
	}
}

193 
	$db_gëloˇl
 (
lua_Sèã
 *
L
) {

194 
¨g
;

195 
lua_Sèã
 *
L1
 = 
	`gëthªad
(
L
, &
¨g
);

196 
lua_Debug
 
¨
;

197 c⁄° *
«me
;

198 
nv¨
 = ()
	`luaL_checköãgî
(
L
, 
¨g
 + 2);

199 i‡(
	`lua_isfun˘i⁄
(
L
, 
¨g
 + 1)) {

200 
	`lua_pushvÆue
(
L
, 
¨g
 + 1);

201 
	`lua_push°rög
(
L
, 
	`lua_gëloˇl
(L, 
NULL
, 
nv¨
));

205 
Àvñ
 = ()
	`luaL_checköãgî
(
L
, 
¨g
 + 1);

206 i‡(!
	`lua_gë°ack
(
L1
, 
Àvñ
, &
¨
))

207  
	`luaL_¨gîr‹
(
L
, 
¨g
+1, "level out ofÑange");

208 
	`check°ack
(
L
, 
L1
, 1);

209 
«me
 = 
	`lua_gëloˇl
(
L1
, &
¨
, 
nv¨
);

210 i‡(
«me
) {

211 
	`lua_xmove
(
L1
, 
L
, 1);

212 
	`lua_push°rög
(
L
, 
«me
);

213 
	`lua_rŸ©e
(
L
, -2, 1);

217 
	`lua_pushnû
(
L
);

221 
	}
}

224 
	$db_£éoˇl
 (
lua_Sèã
 *
L
) {

225 
¨g
;

226 c⁄° *
«me
;

227 
lua_Sèã
 *
L1
 = 
	`gëthªad
(
L
, &
¨g
);

228 
lua_Debug
 
¨
;

229 
Àvñ
 = ()
	`luaL_checköãgî
(
L
, 
¨g
 + 1);

230 
nv¨
 = ()
	`luaL_checköãgî
(
L
, 
¨g
 + 2);

231 i‡(!
	`lua_gë°ack
(
L1
, 
Àvñ
, &
¨
))

232  
	`luaL_¨gîr‹
(
L
, 
¨g
+1, "level out ofÑange");

233 
	`luaL_check™y
(
L
, 
¨g
+3);

234 
	`lua_£â›
(
L
, 
¨g
+3);

235 
	`check°ack
(
L
, 
L1
, 1);

236 
	`lua_xmove
(
L
, 
L1
, 1);

237 
«me
 = 
	`lua_£éoˇl
(
L1
, &
¨
, 
nv¨
);

238 i‡(
«me
 =
NULL
)

239 
	`lua_p›
(
L1
, 1);

240 
	`lua_push°rög
(
L
, 
«me
);

242 
	}
}

248 
	$auxupvÆue
 (
lua_Sèã
 *
L
, 
gë
) {

249 c⁄° *
«me
;

250 
n
 = ()
	`luaL_checköãgî
(
L
, 2);

251 
	`luaL_checkty≥
(
L
, 1, 
LUA_TFUNCTION
);

252 
«me
 = 
gë
 ? 
	`lua_gëupvÆue
(
L
, 1, 
n
Ë: 
	`lua_£tupvÆue
(L, 1,Ç);

253 i‡(
«me
 =
NULL
)  0;

254 
	`lua_push°rög
(
L
, 
«me
);

255 
	`lua_ö£π
(
L
, -(
gë
+1));

256  
gë
 + 1;

257 
	}
}

260 
	$db_gëupvÆue
 (
lua_Sèã
 *
L
) {

261  
	`auxupvÆue
(
L
, 1);

262 
	}
}

265 
	$db_£tupvÆue
 (
lua_Sèã
 *
L
) {

266 
	`luaL_check™y
(
L
, 3);

267  
	`auxupvÆue
(
L
, 0);

268 
	}
}

275 
	$checkupvÆ
 (
lua_Sèã
 *
L
, 
¨gf
, 
¨gnup
) {

276 
nup
 = ()
	`luaL_checköãgî
(
L
, 
¨gnup
);

277 
	`luaL_checkty≥
(
L
, 
¨gf
, 
LUA_TFUNCTION
);

278 
	`luaL_¨gcheck
(
L
, (
	`lua_gëupvÆue
(L, 
¨gf
, 
nup
Ë!
NULL
), 
¨gnup
,

280  
nup
;

281 
	}
}

284 
	$db_upvÆueid
 (
lua_Sèã
 *
L
) {

285 
n
 = 
	`checkupvÆ
(
L
, 1, 2);

286 
	`lua_pushlightu£rd©a
(
L
, 
	`lua_upvÆueid
(L, 1, 
n
));

288 
	}
}

291 
	$db_upvÆuejoö
 (
lua_Sèã
 *
L
) {

292 
n1
 = 
	`checkupvÆ
(
L
, 1, 2);

293 
n2
 = 
	`checkupvÆ
(
L
, 3, 4);

294 
	`luaL_¨gcheck
(
L
, !
	`lua_iscfun˘i⁄
(L, 1), 1, "Lua functionÉxpected");

295 
	`luaL_¨gcheck
(
L
, !
	`lua_iscfun˘i⁄
(L, 3), 3, "Lua functionÉxpected");

296 
	`lua_upvÆuejoö
(
L
, 1, 
n1
, 3, 
n2
);

298 
	}
}

305 
	$hookf
 (
lua_Sèã
 *
L
, 
lua_Debug
 *
¨
) {

306 c⁄° *c⁄° 
hook«mes
[] =

308 
	`lua_øwgëp
(
L
, 
LUA_REGISTRYINDEX
, &
HOOKKEY
);

309 
	`lua_pushthªad
(
L
);

310 i‡(
	`lua_øwgë
(
L
, -2Ë=
LUA_TFUNCTION
) {

311 
	`lua_push°rög
(
L
, 
hook«mes
[()
¨
->
evít
]);

312 i‡(
¨
->
cuºíéöe
 >= 0)

313 
	`lua_pushöãgî
(
L
, 
¨
->
cuºíéöe
);

314 
	`lua_pushnû
(
L
);

315 
	`lua_as£π
(
	`lua_gëöfo
(
L
, "lS", 
¨
));

316 
	`lua_ˇŒ
(
L
, 2, 0);

318 
	}
}

324 
	$makemask
 (c⁄° *
smask
, 
cou¡
) {

325 
mask
 = 0;

326 i‡(
	`°rchr
(
smask
, 'c')Ë
mask
 |
LUA_MASKCALL
;

327 i‡(
	`°rchr
(
smask
, 'r')Ë
mask
 |
LUA_MASKRET
;

328 i‡(
	`°rchr
(
smask
, 'l')Ë
mask
 |
LUA_MASKLINE
;

329 i‡(
cou¡
 > 0Ë
mask
 |
LUA_MASKCOUNT
;

330  
mask
;

331 
	}
}

337 *
	$unmakemask
 (
mask
, *
smask
) {

338 
i
 = 0;

339 i‡(
mask
 & 
LUA_MASKCALL
Ë
smask
[
i
++] = 'c';

340 i‡(
mask
 & 
LUA_MASKRET
Ë
smask
[
i
++] = 'r';

341 i‡(
mask
 & 
LUA_MASKLINE
Ë
smask
[
i
++] = 'l';

342 
smask
[
i
] = '\0';

343  
smask
;

344 
	}
}

347 
	$db_£thook
 (
lua_Sèã
 *
L
) {

348 
¨g
, 
mask
, 
cou¡
;

349 
lua_Hook
 
func
;

350 
lua_Sèã
 *
L1
 = 
	`gëthªad
(
L
, &
¨g
);

351 i‡(
	`lua_i¢⁄e‹nû
(
L
, 
¨g
+1)) {

352 
	`lua_£â›
(
L
, 
¨g
+1);

353 
func
 = 
NULL
; 
mask
 = 0; 
cou¡
 = 0;

356 c⁄° *
smask
 = 
	`luaL_check°rög
(
L
, 
¨g
+2);

357 
	`luaL_checkty≥
(
L
, 
¨g
+1, 
LUA_TFUNCTION
);

358 
cou¡
 = ()
	`luaL_›töãgî
(
L
, 
¨g
 + 3, 0);

359 
func
 = 
hookf
; 
mask
 = 
	`makemask
(
smask
, 
cou¡
);

361 i‡(
	`lua_øwgëp
(
L
, 
LUA_REGISTRYINDEX
, &
HOOKKEY
Ë=
LUA_TNIL
) {

362 
	`lua_¸óãèbÀ
(
L
, 0, 2);

363 
	`lua_pushvÆue
(
L
, -1);

364 
	`lua_øw£ç
(
L
, 
LUA_REGISTRYINDEX
, &
HOOKKEY
);

365 
	`lua_push°rög
(
L
, "k");

366 
	`lua_£tfõld
(
L
, -2, "__mode");

367 
	`lua_pushvÆue
(
L
, -1);

368 
	`lua_£tmë©abÀ
(
L
, -2);

370 
	`check°ack
(
L
, 
L1
, 1);

371 
	`lua_pushthªad
(
L1
); 
	`lua_xmove
(L1, 
L
, 1);

372 
	`lua_pushvÆue
(
L
, 
¨g
 + 1);

373 
	`lua_øw£t
(
L
, -3);

374 
	`lua_£thook
(
L1
, 
func
, 
mask
, 
cou¡
);

376 
	}
}

379 
	$db_gëhook
 (
lua_Sèã
 *
L
) {

380 
¨g
;

381 
lua_Sèã
 *
L1
 = 
	`gëthªad
(
L
, &
¨g
);

382 
buff
[5];

383 
mask
 = 
	`lua_gëhookmask
(
L1
);

384 
lua_Hook
 
hook
 = 
	`lua_gëhook
(
L1
);

385 i‡(
hook
 =
NULL
)

386 
	`lua_pushnû
(
L
);

387 i‡(
hook
 !
hookf
)

388 
	`lua_pushlôîÆ
(
L
, "external hook");

390 
	`lua_øwgëp
(
L
, 
LUA_REGISTRYINDEX
, &
HOOKKEY
);

391 
	`check°ack
(
L
, 
L1
, 1);

392 
	`lua_pushthªad
(
L1
); 
	`lua_xmove
(L1, 
L
, 1);

393 
	`lua_øwgë
(
L
, -2);

394 
	`lua_ªmove
(
L
, -2);

396 
	`lua_push°rög
(
L
, 
	`unmakemask
(
mask
, 
buff
));

397 
	`lua_pushöãgî
(
L
, 
	`lua_gëhookcou¡
(
L1
));

399 
	}
}

402 
	$db_debug
 (
lua_Sèã
 *
L
) {

404 
buf„r
[250];

405 
	`lua_wrôe°rögîr‹
("%s", "lua_debug> ");

406 i‡(
	`fgës
(
buf„r
, (buf„r), 
°dö
) == 0 ||

407 
	`°rcmp
(
buf„r
, "cont\n") == 0)

409 i‡(
	`luaL_lﬂdbuf„r
(
L
, 
buf„r
, 
	`°æí
(buffer), "=(debug command)") ||

410 
	`lua_pˇŒ
(
L
, 0, 0, 0))

411 
	`lua_wrôe°rögîr‹
("%s\n", 
	`lua_to°rög
(
L
, -1));

412 
	`lua_£â›
(
L
, 0);

414 
	}
}

417 
	$db_åa˚back
 (
lua_Sèã
 *
L
) {

418 
¨g
;

419 
lua_Sèã
 *
L1
 = 
	`gëthªad
(
L
, &
¨g
);

420 c⁄° *
msg
 = 
	`lua_to°rög
(
L
, 
¨g
 + 1);

421 i‡(
msg
 =
NULL
 && !
	`lua_i¢⁄e‹nû
(
L
, 
¨g
 + 1))

422 
	`lua_pushvÆue
(
L
, 
¨g
 + 1);

424 
Àvñ
 = ()
	`luaL_›töãgî
(
L
, 
¨g
 + 2, (L =
L1
) ? 1 : 0);

425 
	`luaL_åa˚back
(
L
, 
L1
, 
msg
, 
Àvñ
);

428 
	}
}

431 c⁄° 
luaL_Reg
 
	gdblib
[] = {

432 {"debug", 
db_debug
},

433 {"gëu£rvÆue", 
db_gëu£rvÆue
},

434 {"gëhook", 
db_gëhook
},

435 {"gëöfo", 
db_gëöfo
},

436 {"gëloˇl", 
db_gëloˇl
},

437 {"gëªgi°ry", 
db_gëªgi°ry
},

438 {"gëmë©abÀ", 
db_gëmë©abÀ
},

439 {"gëupvÆue", 
db_gëupvÆue
},

440 {"upvÆuejoö", 
db_upvÆuejoö
},

441 {"upvÆueid", 
db_upvÆueid
},

442 {"£tu£rvÆue", 
db_£tu£rvÆue
},

443 {"£thook", 
db_£thook
},

444 {"£éoˇl", 
db_£éoˇl
},

445 {"£tmë©abÀ", 
db_£tmë©abÀ
},

446 {"£tupvÆue", 
db_£tupvÆue
},

447 {"åa˚back", 
db_åa˚back
},

448 {
NULL
, NULL}

452 
LUAMOD_API
 
	$lua›í_debug
 (
lua_Sèã
 *
L
) {

453 
	`luaL_√wlib
(
L
, 
dblib
);

455 
	}
}

	@lib/lua/lua-5.3.4/src/ldebug.c

7 
	#ldebug_c


	)

8 
	#LUA_CORE


	)

10 
	~"Õªfix.h
"

13 
	~<°d¨g.h
>

14 
	~<°ddef.h
>

15 
	~<°rög.h
>

17 
	~"lua.h
"

19 
	~"œpi.h
"

20 
	~"lcode.h
"

21 
	~"ldebug.h
"

22 
	~"ldo.h
"

23 
	~"lfunc.h
"

24 
	~"lobje˘.h
"

25 
	~"l›codes.h
"

26 
	~"l°©e.h
"

27 
	~"l°rög.h
"

28 
	~"…abÀ.h
"

29 
	~"…m.h
"

30 
	~"lvm.h
"

34 
	#noLuaClosuª
(
f
Ë((fË=
NULL
 || (f)->
c
.
â
 =
LUA_TCCL
)

	)

38 
	#ci_func
(
ci
Ë(
	`˛LvÆue
((ci)->
func
))

	)

41 c⁄° *
fun˙ame‰omcode
 (
lua_Sèã
 *
L
, 
CÆlInfo
 *
ci
,

42 c⁄° **
«me
);

45 
	$cuºíçc
 (
CÆlInfo
 *
ci
) {

46 
	`lua_as£π
(
	`isLua
(
ci
));

47  
	`pcRñ
(
ci
->
u
.
l
.
ßvedpc
, 
	`ci_func
(ci)->
p
);

48 
	}
}

51 
	$cuºíéöe
 (
CÆlInfo
 *
ci
) {

52  
	`gëfun˛öe
(
	`ci_func
(
ci
)->
p
, 
	`cuºíçc
(ci));

53 
	}
}

62 
	$sw≠exåa
 (
lua_Sèã
 *
L
) {

63 i‡(
L
->
°©us
 =
LUA_YIELD
) {

64 
CÆlInfo
 *
ci
 = 
L
->ci;

65 
StkId
 
ãmp
 = 
ci
->
func
;

66 
ci
->
func
 = 
	`ª°‹e°ack
(
L
, ci->
exåa
);

67 
ci
->
exåa
 = 
	`ßve°ack
(
L
, 
ãmp
);

69 
	}
}

81 
LUA_API
 
	$lua_£thook
 (
lua_Sèã
 *
L
, 
lua_Hook
 
func
, 
mask
, 
cou¡
) {

82 i‡(
func
 =
NULL
 || 
mask
 == 0) {

83 
mask
 = 0;

84 
func
 = 
NULL
;

86 i‡(
	`isLua
(
L
->
ci
))

87 
L
->
ﬁdpc
 = L->
ci
->
u
.
l
.
ßvedpc
;

88 
L
->
hook
 = 
func
;

89 
L
->
ba£hookcou¡
 = 
cou¡
;

90 
	`ª£thookcou¡
(
L
);

91 
L
->
hookmask
 = 
	`ˇ°_byã
(
mask
);

92 
	}
}

95 
LUA_API
 
lua_Hook
 
	$lua_gëhook
 (
lua_Sèã
 *
L
) {

96  
L
->
hook
;

97 
	}
}

100 
LUA_API
 
	$lua_gëhookmask
 (
lua_Sèã
 *
L
) {

101  
L
->
hookmask
;

102 
	}
}

105 
LUA_API
 
	$lua_gëhookcou¡
 (
lua_Sèã
 *
L
) {

106  
L
->
ba£hookcou¡
;

107 
	}
}

110 
LUA_API
 
	$lua_gë°ack
 (
lua_Sèã
 *
L
, 
Àvñ
, 
lua_Debug
 *
¨
) {

111 
°©us
;

112 
CÆlInfo
 *
ci
;

113 i‡(
Àvñ
 < 0)  0;

114 
	`lua_lock
(
L
);

115 
ci
 = 
L
->ci; 
Àvñ
 > 0 && cò!&L->
ba£_ci
; còci->
¥evious
)

116 
Àvñ
--;

117 i‡(
Àvñ
 =0 && 
ci
 !&
L
->
ba£_ci
) {

118 
°©us
 = 1;

119 
¨
->
i_ci
 = 
ci
;

121 
°©us
 = 0;

122 
	`lua_u∆ock
(
L
);

123  
°©us
;

124 
	}
}

127 c⁄° *
	$upvÆ«me
 (
PrŸo
 *
p
, 
uv
) {

128 
TSåög
 *
s
 = 
	`check_exp
(
uv
 < 
p
->
sizeupvÆues
,Ö->
upvÆues
[uv].
«me
);

129 i‡(
s
 =
NULL
)  "?";

130  
	`gë°r
(
s
);

131 
	}
}

134 c⁄° *
	$födv¨¨g
 (
CÆlInfo
 *
ci
, 
n
, 
StkId
 *
pos
) {

135 
≈¨ams
 = 
	`˛LvÆue
(
ci
->
func
)->
p
->
num∑øms
;

136 i‡(
n
 >
	`ˇ°_öt
(
ci
->
u
.
l
.
ba£
 - ci->
func
Ë- 
≈¨ams
)

137  
NULL
;

139 *
pos
 = 
ci
->
func
 + 
≈¨ams
 + 
n
;

142 
	}
}

145 c⁄° *
	$födloˇl
 (
lua_Sèã
 *
L
, 
CÆlInfo
 *
ci
, 
n
,

146 
StkId
 *
pos
) {

147 c⁄° *
«me
 = 
NULL
;

148 
StkId
 
ba£
;

149 i‡(
	`isLua
(
ci
)) {

150 i‡(
n
 < 0)

151  
	`födv¨¨g
(
ci
, -
n
, 
pos
);

153 
ba£
 = 
ci
->
u
.
l
.base;

154 
«me
 = 
	`luaF_gëloˇ ame
(
	`ci_func
(
ci
)->
p
, 
n
, 
	`cuºíçc
(ci));

158 
ba£
 = 
ci
->
func
 + 1;

159 i‡(
«me
 =
NULL
) {

160 
StkId
 
limô
 = (
ci
 =
L
->ciË? L->
t›
 : ci->
√xt
->
func
;

161 i‡(
limô
 - 
ba£
 >
n
 &&Ç > 0)

162 
«me
 = "(*temporary)";

164  
NULL
;

166 *
pos
 = 
ba£
 + (
n
 - 1);

167  
«me
;

168 
	}
}

171 
LUA_API
 c⁄° *
	$lua_gëloˇl
 (
lua_Sèã
 *
L
, c⁄° 
lua_Debug
 *
¨
, 
n
) {

172 c⁄° *
«me
;

173 
	`lua_lock
(
L
);

174 
	`sw≠exåa
(
L
);

175 i‡(
¨
 =
NULL
) {

176 i‡(!
	`isLfun˘i⁄
(
L
->
t›
 - 1))

177 
«me
 = 
NULL
;

179 
«me
 = 
	`luaF_gëloˇ ame
(
	`˛LvÆue
(
L
->
t›
 - 1)->
p
, 
n
, 0);

182 
StkId
 
pos
 = 
NULL
;

183 
«me
 = 
	`födloˇl
(
L
, 
¨
->
i_ci
, 
n
, &
pos
);

184 i‡(
«me
) {

185 
	`£tobj2s
(
L
, L->
t›
, 
pos
);

186 
	`≠i_ö¸_t›
(
L
);

189 
	`sw≠exåa
(
L
);

190 
	`lua_u∆ock
(
L
);

191  
«me
;

192 
	}
}

195 
LUA_API
 c⁄° *
	$lua_£éoˇl
 (
lua_Sèã
 *
L
, c⁄° 
lua_Debug
 *
¨
, 
n
) {

196 
StkId
 
pos
 = 
NULL
;

197 c⁄° *
«me
;

198 
	`lua_lock
(
L
);

199 
	`sw≠exåa
(
L
);

200 
«me
 = 
	`födloˇl
(
L
, 
¨
->
i_ci
, 
n
, &
pos
);

201 i‡(
«me
) {

202 
	`£tobjs2s
(
L
, 
pos
, L->
t›
 - 1);

203 
L
->
t›
--;

205 
	`sw≠exåa
(
L
);

206 
	`lua_u∆ock
(
L
);

207  
«me
;

208 
	}
}

211 
	$funcöfo
 (
lua_Debug
 *
¨
, 
Closuª
 *
˛
) {

212 i‡(
	`noLuaClosuª
(
˛
)) {

213 
¨
->
sour˚
 = "=[C]";

214 
¨
->
löedeföed
 = -1;

215 
¨
->
œ°löedeföed
 = -1;

216 
¨
->
wh©
 = "C";

219 
PrŸo
 *
p
 = 
˛
->
l
.p;

220 
¨
->
sour˚
 = 
p
->sour˚ ? 
	`gë°r
(p->source) : "=?";

221 
¨
->
löedeföed
 = 
p
->linedefined;

222 
¨
->
œ°löedeföed
 = 
p
->lastlinedefined;

223 
¨
->
wh©
 = (¨->
löedeföed
 == 0) ? "main" : "Lua";

225 
	`luaO_chunkid
(
¨
->
sh‹t_§c
,ár->
sour˚
, 
LUA_IDSIZE
);

226 
	}
}

229 
	$cﬁÀ˘vÆidlöes
 (
lua_Sèã
 *
L
, 
Closuª
 *
f
) {

230 i‡(
	`noLuaClosuª
(
f
)) {

231 
	`£äûvÆue
(
L
->
t›
);

232 
	`≠i_ö¸_t›
(
L
);

235 
i
;

236 
TVÆue
 
v
;

237 *
löeöfo
 = 
f
->
l
.
p
->lineinfo;

238 
TabÀ
 *
t
 = 
	`luaH_√w
(
L
);

239 
	`£thvÆue
(
L
, L->
t›
, 
t
);

240 
	`≠i_ö¸_t›
(
L
);

241 
	`£tbvÆue
(&
v
, 1);

242 
i
 = 0; i < 
f
->
l
.
p
->
sizñöeöfo
; i++)

243 
	`luaH_£töt
(
L
, 
t
, 
löeöfo
[
i
], &
v
);

245 
	}
}

248 c⁄° *
	$gëfun˙ame
 (
lua_Sèã
 *
L
, 
CÆlInfo
 *
ci
, c⁄° **
«me
) {

249 i‡(
ci
 =
NULL
)

250  
NULL
;

251 i‡(
ci
->
ˇŒ°©us
 & 
CIST_FIN
) {

252 *
«me
 = "__gc";

256 i‡(!(
ci
->
ˇŒ°©us
 & 
CIST_TAIL
Ë&& 
	`isLua
(ci->
¥evious
))

257  
	`fun˙ame‰omcode
(
L
, 
ci
->
¥evious
, 
«me
);

258  
NULL
;

259 
	}
}

262 
	$auxgëöfo
 (
lua_Sèã
 *
L
, c⁄° *
wh©
, 
lua_Debug
 *
¨
,

263 
Closuª
 *
f
, 
CÆlInfo
 *
ci
) {

264 
°©us
 = 1;

265 ; *
wh©
; what++) {

266 *
wh©
) {

268 
	`funcöfo
(
¨
, 
f
);

272 
¨
->
cuºíéöe
 = (
ci
 && 
	`isLua
(ci)Ë? 
	`cuºíéöe
(ci) : -1;

276 
¨
->
nups
 = (
f
 =
NULL
Ë? 0 : f->
c
.
nupvÆues
;

277 i‡(
	`noLuaClosuª
(
f
)) {

278 
¨
->
isv¨¨g
 = 1;

279 
¨
->
≈¨ams
 = 0;

282 
¨
->
isv¨¨g
 = 
f
->
l
.
p
->
is_v¨¨g
;

283 
¨
->
≈¨ams
 = 
f
->
l
.
p
->
num∑øms
;

288 
¨
->
i°aûˇŒ
 = (
ci
Ë? ci->
ˇŒ°©us
 & 
CIST_TAIL
 : 0;

292 
¨
->
«mewh©
 = 
	`gëfun˙ame
(
L
, 
ci
, &¨->
«me
);

293 i‡(
¨
->
«mewh©
 =
NULL
) {

294 
¨
->
«mewh©
 = "";

295 
¨
->
«me
 = 
NULL
;

302 : 
°©us
 = 0;

305  
°©us
;

306 
	}
}

309 
LUA_API
 
	$lua_gëöfo
 (
lua_Sèã
 *
L
, c⁄° *
wh©
, 
lua_Debug
 *
¨
) {

310 
°©us
;

311 
Closuª
 *
˛
;

312 
CÆlInfo
 *
ci
;

313 
StkId
 
func
;

314 
	`lua_lock
(
L
);

315 
	`sw≠exåa
(
L
);

316 i‡(*
wh©
 == '>') {

317 
ci
 = 
NULL
;

318 
func
 = 
L
->
t›
 - 1;

319 
	`≠i_check
(
L
, 
	`âisfun˘i⁄
(
func
), "functionÉxpected");

320 
wh©
++;

321 
L
->
t›
--;

324 
ci
 = 
¨
->
i_ci
;

325 
func
 = 
ci
->func;

326 
	`lua_as£π
(
	`âisfun˘i⁄
(
ci
->
func
));

328 
˛
 = 
	`âis˛osuª
(
func
Ë? 
	`˛vÆue
(funcË: 
NULL
;

329 
°©us
 = 
	`auxgëöfo
(
L
, 
wh©
, 
¨
, 
˛
, 
ci
);

330 i‡(
	`°rchr
(
wh©
, 'f')) {

331 
	`£tobjs2s
(
L
, L->
t›
, 
func
);

332 
	`≠i_ö¸_t›
(
L
);

334 
	`sw≠exåa
(
L
);

335 i‡(
	`°rchr
(
wh©
, 'L'))

336 
	`cﬁÀ˘vÆidlöes
(
L
, 
˛
);

337 
	`lua_u∆ock
(
L
);

338  
°©us
;

339 
	}
}

348 c⁄° *
gëobj«me
 (
PrŸo
 *
p
, 
œ°pc
, 
ªg
,

349 c⁄° **
«me
);

355 
	$k«me
 (
PrŸo
 *
p
, 
pc
, 
c
, c⁄° **
«me
) {

356 i‡(
	`ISK
(
c
)) {

357 
TVÆue
 *
kvÆue
 = &
p
->
k
[
	`INDEXK
(
c
)];

358 i‡(
	`âis°rög
(
kvÆue
)) {

359 *
«me
 = 
	`svÆue
(
kvÆue
);

365 c⁄° *
wh©
 = 
	`gëobj«me
(
p
, 
pc
, 
c
, 
«me
);

366 i‡(
wh©
 && *what == 'c') {

371 *
«me
 = "?";

372 
	}
}

375 
	$fûãΩc
 (
pc
, 
jm±¨gë
) {

376 i‡(
pc
 < 
jm±¨gë
)

378  
pc
;

379 
	}
}

385 
	$föd£åeg
 (
PrŸo
 *
p
, 
œ°pc
, 
ªg
) {

386 
pc
;

387 
£åeg
 = -1;

388 
jm±¨gë
 = 0;

389 
pc
 = 0;Ö¯< 
œ°pc
;Öc++) {

390 
In°ru˘i⁄
 
i
 = 
p
->
code
[
pc
];

391 
OpCode
 
›
 = 
	`GET_OPCODE
(
i
);

392 
a
 = 
	`GETARG_A
(
i
);

393 
›
) {

394 
OP_LOADNIL
: {

395 
b
 = 
	`GETARG_B
(
i
);

396 i‡(
a
 <
ªg
 &&Ñeg <®+ 
b
)

397 
£åeg
 = 
	`fûãΩc
(
pc
, 
jm±¨gë
);

400 
OP_TFORCALL
: {

401 i‡(
ªg
 >
a
 + 2)

402 
£åeg
 = 
	`fûãΩc
(
pc
, 
jm±¨gë
);

405 
OP_CALL
:

406 
OP_TAILCALL
: {

407 i‡(
ªg
 >
a
)

408 
£åeg
 = 
	`fûãΩc
(
pc
, 
jm±¨gë
);

411 
OP_JMP
: {

412 
b
 = 
	`GETARG_sBx
(
i
);

413 
de°
 = 
pc
 + 1 + 
b
;

415 i‡(
pc
 < 
de°
 && de° <
œ°pc
) {

416 i‡(
de°
 > 
jm±¨gë
)

417 
jm±¨gë
 = 
de°
;

422 i‡(
	`ã°AMode
(
›
Ë&& 
ªg
 =
a
)

423 
£åeg
 = 
	`fûãΩc
(
pc
, 
jm±¨gë
);

427  
£åeg
;

428 
	}
}

431 c⁄° *
	$gëobj«me
 (
PrŸo
 *
p
, 
œ°pc
, 
ªg
,

432 c⁄° **
«me
) {

433 
pc
;

434 *
«me
 = 
	`luaF_gëloˇ ame
(
p
, 
ªg
 + 1, 
œ°pc
);

435 i‡(*
«me
)

438 
pc
 = 
	`föd£åeg
(
p
, 
œ°pc
, 
ªg
);

439 i‡(
pc
 != -1) {

440 
In°ru˘i⁄
 
i
 = 
p
->
code
[
pc
];

441 
OpCode
 
›
 = 
	`GET_OPCODE
(
i
);

442 
›
) {

443 
OP_MOVE
: {

444 
b
 = 
	`GETARG_B
(
i
);

445 i‡(
b
 < 
	`GETARG_A
(
i
))

446  
	`gëobj«me
(
p
, 
pc
, 
b
, 
«me
);

449 
OP_GETTABUP
:

450 
OP_GETTABLE
: {

451 
k
 = 
	`GETARG_C
(
i
);

452 
t
 = 
	`GETARG_B
(
i
);

453 c⁄° *
vn
 = (
›
 =
OP_GETTABLE
)

454 ? 
	`luaF_gëloˇ ame
(
p
, 
t
 + 1, 
pc
)

455 : 
	`upvÆ«me
(
p
, 
t
);

456 
	`k«me
(
p
, 
pc
, 
k
, 
«me
);

457  (
vn
 && 
	`°rcmp
(vn, 
LUA_ENV
) == 0) ? "global" : "field";

459 
OP_GETUPVAL
: {

460 *
«me
 = 
	`upvÆ«me
(
p
, 
	`GETARG_B
(
i
));

463 
OP_LOADK
:

464 
OP_LOADKX
: {

465 
b
 = (
›
 =
OP_LOADK
Ë? 
	`GETARG_Bx
(
i
)

466 : 
	`GETARG_Ax
(
p
->
code
[
pc
 + 1]);

467 i‡(
	`âis°rög
(&
p
->
k
[
b
])) {

468 *
«me
 = 
	`svÆue
(&
p
->
k
[
b
]);

473 
OP_SELF
: {

474 
k
 = 
	`GETARG_C
(
i
);

475 
	`k«me
(
p
, 
pc
, 
k
, 
«me
);

481  
NULL
;

482 
	}
}

491 c⁄° *
	$fun˙ame‰omcode
 (
lua_Sèã
 *
L
, 
CÆlInfo
 *
ci
,

492 c⁄° **
«me
) {

493 
TMS
 
tm
 = (TMS)0;

494 
PrŸo
 *
p
 = 
	`ci_func
(
ci
)->p;

495 
pc
 = 
	`cuºíçc
(
ci
);

496 
In°ru˘i⁄
 
i
 = 
p
->
code
[
pc
];

497 i‡(
ci
->
ˇŒ°©us
 & 
CIST_HOOKED
) {

498 *
«me
 = "?";

501 
	`GET_OPCODE
(
i
)) {

502 
OP_CALL
:

503 
OP_TAILCALL
:

504  
	`gëobj«me
(
p
, 
pc
, 
	`GETARG_A
(
i
), 
«me
);

505 
OP_TFORCALL
: {

506 *
«me
 = "for iterator";

510 
OP_SELF
: 
OP_GETTABUP
: 
OP_GETTABLE
:

511 
tm
 = 
TM_INDEX
;

513 
OP_SETTABUP
: 
OP_SETTABLE
:

514 
tm
 = 
TM_NEWINDEX
;

516 
OP_ADD
: 
OP_SUB
: 
OP_MUL
: 
OP_MOD
:

517 
OP_POW
: 
OP_DIV
: 
OP_IDIV
: 
OP_BAND
:

518 
OP_BOR
: 
OP_BXOR
: 
OP_SHL
: 
OP_SHR
: {

519 
off£t
 = 
	`ˇ°_öt
(
	`GET_OPCODE
(
i
)Ë- ca°_öt(
OP_ADD
);

520 
tm
 = 
	`ˇ°
(
TMS
, 
off£t
 + 
	`ˇ°_öt
(
TM_ADD
));

523 
OP_UNM
: 
tm
 = 
TM_UNM
; ;

524 
OP_BNOT
: 
tm
 = 
TM_BNOT
; ;

525 
OP_LEN
: 
tm
 = 
TM_LEN
; ;

526 
OP_CONCAT
: 
tm
 = 
TM_CONCAT
; ;

527 
OP_EQ
: 
tm
 = 
TM_EQ
; ;

528 
OP_LT
: 
tm
 = 
TM_LT
; ;

529 
OP_LE
: 
tm
 = 
TM_LE
; ;

531  
NULL
;

533 *
«me
 = 
	`gë°r
(
	`G
(
L
)->
tm«me
[
tm
]);

535 
	}
}

546 
	$isö°ack
 (
CÆlInfo
 *
ci
, c⁄° 
TVÆue
 *
o
) {

547 
±rdiff_t
 
i
 = 
o
 - 
ci
->
u
.
l
.
ba£
;

548  (0 <
i
 && i < (
ci
->
t›
 - ci->
u
.
l
.
ba£
Ë&& ci->u.l.ba£ + i =
o
);

549 
	}
}

557 c⁄° *
	$gëupvÆ«me
 (
CÆlInfo
 *
ci
, c⁄° 
TVÆue
 *
o
,

558 c⁄° **
«me
) {

559 
LClosuª
 *
c
 = 
	`ci_func
(
ci
);

560 
i
;

561 
i
 = 0; i < 
c
->
nupvÆues
; i++) {

562 i‡(
c
->
upvÆs
[
i
]->
v
 =
o
) {

563 *
«me
 = 
	`upvÆ«me
(
c
->
p
, 
i
);

567  
NULL
;

568 
	}
}

571 c⁄° *
	$v¨öfo
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
o
) {

572 c⁄° *
«me
 = 
NULL
;

573 
CÆlInfo
 *
ci
 = 
L
->ci;

574 c⁄° *
köd
 = 
NULL
;

575 i‡(
	`isLua
(
ci
)) {

576 
köd
 = 
	`gëupvÆ«me
(
ci
, 
o
, &
«me
);

577 i‡(!
köd
 && 
	`isö°ack
(
ci
, 
o
))

578 
köd
 = 
	`gëobj«me
(
	`ci_func
(
ci
)->
p
, 
	`cuºíçc
(ci),

579 
	`ˇ°_öt
(
o
 - 
ci
->
u
.
l
.
ba£
), &
«me
);

581  (
köd
Ë? 
	`luaO_pushf°rög
(
L
, " (%†'%s')", köd, 
«me
) : "";

582 
	}
}

585 
l_n‹ë
 
	$luaG_ty≥îr‹
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
o
, c⁄° *
›
) {

586 c⁄° *
t
 = 
	`luaT_objty≥«me
(
L
, 
o
);

587 
	`luaG_ru√º‹
(
L
, "©ãm±Åÿ%†®%†vÆue%s", 
›
, 
t
, 
	`v¨öfo
(L, 
o
));

588 
	}
}

591 
l_n‹ë
 
	$luaG_c⁄ˇãº‹
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
p1
, c⁄° TVÆuê*
p2
) {

592 i‡(
	`âis°rög
(
p1
Ë|| 
	`cvt2°r
’1)Ëp1 = 
p2
;

593 
	`luaG_ty≥îr‹
(
L
, 
p1
, "concatenate");

594 
	}
}

597 
l_n‹ë
 
	$luaG_›öãº‹
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
p1
,

598 c⁄° 
TVÆue
 *
p2
, c⁄° *
msg
) {

599 
lua_Numbî
 
ãmp
;

600 i‡(!
	`t⁄umbî
(
p1
, &
ãmp
))

601 
p2
 = 
p1
;

602 
	`luaG_ty≥îr‹
(
L
, 
p2
, 
msg
);

603 
	}
}

609 
l_n‹ë
 
	$luaG_toöãº‹
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
p1
, c⁄° TVÆuê*
p2
) {

610 
lua_I¡egî
 
ãmp
;

611 i‡(!
	`toöãgî
(
p1
, &
ãmp
))

612 
p2
 = 
p1
;

613 
	`luaG_ru√º‹
(
L
, "numbî%†ha†nÿöãgîÑïª£¡©i⁄", 
	`v¨öfo
(L, 
p2
));

614 
	}
}

617 
l_n‹ë
 
	$luaG_‹dîîr‹
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
p1
, c⁄° TVÆuê*
p2
) {

618 c⁄° *
t1
 = 
	`luaT_objty≥«me
(
L
, 
p1
);

619 c⁄° *
t2
 = 
	`luaT_objty≥«me
(
L
, 
p2
);

620 i‡(
	`°rcmp
(
t1
, 
t2
) == 0)

621 
	`luaG_ru√º‹
(
L
, "©ãm±Åÿcom∑ªÅwÿ%†vÆues", 
t1
);

623 
	`luaG_ru√º‹
(
L
, "©ãm±Åÿcom∑ª %†wôh %s", 
t1
, 
t2
);

624 
	}
}

628 c⁄° *
	$luaG_addöfo
 (
lua_Sèã
 *
L
, c⁄° *
msg
, 
TSåög
 *
§c
,

629 
löe
) {

630 
buff
[
LUA_IDSIZE
];

631 i‡(
§c
)

632 
	`luaO_chunkid
(
buff
, 
	`gë°r
(
§c
), 
LUA_IDSIZE
);

634 
buff
[0] = '?'; buff[1] = '\0';

636  
	`luaO_pushf°rög
(
L
, "%s:%d: %s", 
buff
, 
löe
, 
msg
);

637 
	}
}

640 
l_n‹ë
 
	$luaG_îr‹msg
 (
lua_Sèã
 *
L
) {

641 i‡(
L
->
îrfunc
 != 0) {

642 
StkId
 
îrfunc
 = 
	`ª°‹e°ack
(
L
, L->errfunc);

643 
	`£tobjs2s
(
L
, L->
t›
, L->top - 1);

644 
	`£tobjs2s
(
L
, L->
t›
 - 1, 
îrfunc
);

645 
L
->
t›
++;

646 
	`luaD_ˇŒnoyõld
(
L
, L->
t›
 - 2, 1);

648 
	`luaD_throw
(
L
, 
LUA_ERRRUN
);

649 
	}
}

652 
l_n‹ë
 
	$luaG_ru√º‹
 (
lua_Sèã
 *
L
, c⁄° *
fmt
, ...) {

653 
CÆlInfo
 *
ci
 = 
L
->ci;

654 c⁄° *
msg
;

655 
va_li°
 
¨gp
;

656 
	`va_°¨t
(
¨gp
, 
fmt
);

657 
msg
 = 
	`luaO_pushvf°rög
(
L
, 
fmt
, 
¨gp
);

658 
	`va_íd
(
¨gp
);

659 i‡(
	`isLua
(
ci
))

660 
	`luaG_addöfo
(
L
, 
msg
, 
	`ci_func
(
ci
)->
p
->
sour˚
, 
	`cuºíéöe
(ci));

661 
	`luaG_îr‹msg
(
L
);

662 
	}
}

665 
	$luaG_åa˚exec
 (
lua_Sèã
 *
L
) {

666 
CÆlInfo
 *
ci
 = 
L
->ci;

667 
lu_byã
 
mask
 = 
L
->
hookmask
;

668 
cou¡hook
 = (--
L
->
hookcou¡
 =0 && (
mask
 & 
LUA_MASKCOUNT
));

669 i‡(
cou¡hook
)

670 
	`ª£thookcou¡
(
L
);

671 i‡(!(
mask
 & 
LUA_MASKLINE
))

673 i‡(
ci
->
ˇŒ°©us
 & 
CIST_HOOKYIELD
) {

674 
ci
->
ˇŒ°©us
 &~
CIST_HOOKYIELD
;

677 i‡(
cou¡hook
)

678 
	`luaD_hook
(
L
, 
LUA_HOOKCOUNT
, -1);

679 i‡(
mask
 & 
LUA_MASKLINE
) {

680 
PrŸo
 *
p
 = 
	`ci_func
(
ci
)->p;

681 
≈c
 = 
	`pcRñ
(
ci
->
u
.
l
.
ßvedpc
, 
p
);

682 
√wlöe
 = 
	`gëfun˛öe
(
p
, 
≈c
);

683 i‡(
≈c
 == 0 ||

684 
ci
->
u
.
l
.
ßvedpc
 <
L
->
ﬁdpc
 ||

685 
√wlöe
 !
	`gëfun˛öe
(
p
, 
	`pcRñ
(
L
->
ﬁdpc
,Ö)))

686 
	`luaD_hook
(
L
, 
LUA_HOOKLINE
, 
√wlöe
);

688 
L
->
ﬁdpc
 = 
ci
->
u
.
l
.
ßvedpc
;

689 i‡(
L
->
°©us
 =
LUA_YIELD
) {

690 i‡(
cou¡hook
)

691 
L
->
hookcou¡
 = 1;

692 
ci
->
u
.
l
.
ßvedpc
--;

693 
ci
->
ˇŒ°©us
 |
CIST_HOOKYIELD
;

694 
ci
->
func
 = 
L
->
t›
 - 1;

695 
	`luaD_throw
(
L
, 
LUA_YIELD
);

697 
	}
}

	@lib/lua/lua-5.3.4/src/ldebug.h

7 #i‚de‡
ldebug_h


8 
	#ldebug_h


	)

11 
	~"l°©e.h
"

14 
	#pcRñ
(
pc
, 
p
Ë(
	`ˇ°
(, (pcË- (p)->
code
Ë- 1)

	)

16 
	#gëfun˛öe
(
f
,
pc
Ë(((f)->
löeöfo
Ë? (f)->löeöfo[pc] : -1)

	)

18 
	#ª£thookcou¡
(
L
Ë(L->
hookcou¡
 = L->
ba£hookcou¡
)

	)

21 
LUAI_FUNC
 
l_n‹ë
 
luaG_ty≥îr‹
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
o
,

22 c⁄° *
›«me
);

23 
LUAI_FUNC
 
l_n‹ë
 
luaG_c⁄ˇãº‹
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
p1
,

24 c⁄° 
TVÆue
 *
p2
);

25 
LUAI_FUNC
 
l_n‹ë
 
luaG_›öãº‹
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
p1
,

26 c⁄° 
TVÆue
 *
p2
,

27 c⁄° *
msg
);

28 
LUAI_FUNC
 
l_n‹ë
 
luaG_toöãº‹
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
p1
,

29 c⁄° 
TVÆue
 *
p2
);

30 
LUAI_FUNC
 
l_n‹ë
 
luaG_‹dîîr‹
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
p1
,

31 c⁄° 
TVÆue
 *
p2
);

32 
LUAI_FUNC
 
l_n‹ë
 
luaG_ru√º‹
 (
lua_Sèã
 *
L
, c⁄° *
fmt
, ...);

33 
LUAI_FUNC
 c⁄° *
luaG_addöfo
 (
lua_Sèã
 *
L
, c⁄° *
msg
,

34 
TSåög
 *
§c
, 
löe
);

35 
LUAI_FUNC
 
l_n‹ë
 
luaG_îr‹msg
 (
lua_Sèã
 *
L
);

36 
LUAI_FUNC
 
luaG_åa˚exec
 (
lua_Sèã
 *
L
);

	@lib/lua/lua-5.3.4/src/ldo.c

7 
	#ldo_c


	)

8 
	#LUA_CORE


	)

10 
	~"Õªfix.h
"

13 
	~<£tjmp.h
>

14 
	~<°dlib.h
>

15 
	~<°rög.h
>

17 
	~"lua.h
"

19 
	~"œpi.h
"

20 
	~"ldebug.h
"

21 
	~"ldo.h
"

22 
	~"lfunc.h
"

23 
	~"lgc.h
"

24 
	~"lmem.h
"

25 
	~"lobje˘.h
"

26 
	~"l›codes.h
"

27 
	~"Õ¨£r.h
"

28 
	~"l°©e.h
"

29 
	~"l°rög.h
"

30 
	~"…abÀ.h
"

31 
	~"…m.h
"

32 
	~"lundump.h
"

33 
	~"lvm.h
"

34 
	~"lzio.h
"

38 
	#îr‹°©us
(
s
Ë((sË> 
LUA_YIELD
)

	)

53 #i‡!
deföed
(
LUAI_THROW
)

55 #i‡
deföed
(
__˝lu•lus
Ë&& !deföed(
LUA_USE_LONGJMP
)

58 
	#LUAI_THROW
(
L
,
c
Ë
	`throw
(c)

	)

59 
	#LUAI_TRY
(
L
,
c
,
a
) \

60 
åy
 { 
a
 } 
	`ˇtch
(...Ë{ i‡((
c
)->
°©us
 =0Ë(c)->°©u†-1; }

	)

61 
	#luai_jmpbuf
 

	)

63 #ñi‡
deföed
(
LUA_USE_POSIX
)

66 
	#LUAI_THROW
(
L
,
c
Ë
	`_l⁄gjmp
((c)->
b
, 1)

	)

67 
	#LUAI_TRY
(
L
,
c
,
a
Ëi‡(
	`_£tjmp
((c)->
b
Ë=0Ë{á }

	)

68 
	#luai_jmpbuf
 
jmp_buf


	)

73 
	#LUAI_THROW
(
L
,
c
Ë
	`l⁄gjmp
((c)->
b
, 1)

	)

74 
	#LUAI_TRY
(
L
,
c
,
a
Ëi‡(
	`£tjmp
((c)->
b
Ë=0Ë{á }

	)

75 
	#luai_jmpbuf
 
jmp_buf


	)

84 
	slua_l⁄gjmp
 {

85 
lua_l⁄gjmp
 *
	m¥evious
;

86 
luai_jmpbuf
 
	mb
;

87 vﬁ©ûê
	m°©us
;

91 
	$£ãº‹obj
 (
lua_Sèã
 *
L
, 
îrcode
, 
StkId
 
ﬁdt›
) {

92 
îrcode
) {

93 
LUA_ERRMEM
: {

94 
	`£tsvÆue2s
(
L
, 
ﬁdt›
, 
	`G
(L)->
memîrmsg
);

97 
LUA_ERRERR
: {

98 
	`£tsvÆue2s
(
L
, 
ﬁdt›
, 
	`luaS_√wlôîÆ
(L, "error inÉrror handling"));

102 
	`£tobjs2s
(
L
, 
ﬁdt›
, L->
t›
 - 1);

106 
L
->
t›
 = 
ﬁdt›
 + 1;

107 
	}
}

110 
l_n‹ë
 
	$luaD_throw
 (
lua_Sèã
 *
L
, 
îrcode
) {

111 i‡(
L
->
îr‹Jmp
) {

112 
L
->
îr‹Jmp
->
°©us
 = 
îrcode
;

113 
	`LUAI_THROW
(
L
, L->
îr‹Jmp
);

116 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

117 
L
->
°©us
 = 
	`ˇ°_byã
(
îrcode
);

118 i‡(
g
->
maöthªad
->
îr‹Jmp
) {

119 
	`£tobjs2s
(
L
, 
g
->
maöthªad
->
t›
++, L->top - 1);

120 
	`luaD_throw
(
g
->
maöthªad
, 
îrcode
);

123 i‡(
g
->
∑nic
) {

124 
	`£ãº‹obj
(
L
, 
îrcode
, L->
t›
);

125 i‡(
L
->
ci
->
t›
 < L->top)

126 
L
->
ci
->
t›
 = L->top;

127 
	`lua_u∆ock
(
L
);

128 
g
->
	`∑nic
(
L
);

130 
	`ab‹t
();

133 
	}
}

136 
	$luaD_øwru≈rŸe˘ed
 (
lua_Sèã
 *
L
, 
Pfunc
 
f
, *
ud
) {

137 
ﬁdnCˇŒs
 = 
L
->
nCˇŒs
;

138 
lua_l⁄gjmp
 
lj
;

139 
lj
.
°©us
 = 
LUA_OK
;

140 
lj
.
¥evious
 = 
L
->
îr‹Jmp
;

141 
L
->
îr‹Jmp
 = &
lj
;

142 
	`LUAI_TRY
(
L
, &
lj
,

143 (*
f
)(
L
, 
ud
);

145 
L
->
îr‹Jmp
 = 
lj
.
¥evious
;

146 
L
->
nCˇŒs
 = 
ﬁdnCˇŒs
;

147  
lj
.
°©us
;

148 
	}
}

158 
	$c‹ª˘°ack
 (
lua_Sèã
 *
L
, 
TVÆue
 *
ﬁd°ack
) {

159 
CÆlInfo
 *
ci
;

160 
UpVÆ
 *
up
;

161 
L
->
t›
 = (L->t› - 
ﬁd°ack
Ë+ L->
°ack
;

162 
up
 = 
L
->
›íupvÆ
; u∞!
NULL
; u∞up->
u
.
›í
.
√xt
)

163 
up
->
v
 = (up->v - 
ﬁd°ack
Ë+ 
L
->
°ack
;

164 
ci
 = 
L
->ci; cò!
NULL
; còci->
¥evious
) {

165 
ci
->
t›
 = (ci->t› - 
ﬁd°ack
Ë+ 
L
->
°ack
;

166 
ci
->
func
 = (ci->fun¯- 
ﬁd°ack
Ë+ 
L
->
°ack
;

167 i‡(
	`isLua
(
ci
))

168 
ci
->
u
.
l
.
ba£
 = (ci->u.l.ba£ - 
ﬁd°ack
Ë+ 
L
->
°ack
;

170 
	}
}

174 
	#ERRORSTACKSIZE
 (
LUAI_MAXSTACK
 + 200)

	)

177 
	$luaD_ªÆloc°ack
 (
lua_Sèã
 *
L
, 
√wsize
) {

178 
TVÆue
 *
ﬁd°ack
 = 
L
->
°ack
;

179 
lim
 = 
L
->
°acksize
;

180 
	`lua_as£π
(
√wsize
 <
LUAI_MAXSTACK
 ||Çewsizê=
ERRORSTACKSIZE
);

181 
	`lua_as£π
(
L
->
°ack_œ°
 - L->
°ack
 =L->
°acksize
 - 
EXTRA_STACK
);

182 
	`luaM_ªÆlocve˘‹
(
L
, L->
°ack
, L->
°acksize
, 
√wsize
, 
TVÆue
);

183 ; 
lim
 < 
√wsize
;Üim++)

184 
	`£äûvÆue
(
L
->
°ack
 + 
lim
);

185 
L
->
°acksize
 = 
√wsize
;

186 
L
->
°ack_œ°
 = L->
°ack
 + 
√wsize
 - 
EXTRA_STACK
;

187 
	`c‹ª˘°ack
(
L
, 
ﬁd°ack
);

188 
	}
}

191 
	$luaD_grow°ack
 (
lua_Sèã
 *
L
, 
n
) {

192 
size
 = 
L
->
°acksize
;

193 i‡(
size
 > 
LUAI_MAXSTACK
)

194 
	`luaD_throw
(
L
, 
LUA_ERRERR
);

196 
√eded
 = 
	`ˇ°_öt
(
L
->
t›
 - L->
°ack
Ë+ 
n
 + 
EXTRA_STACK
;

197 
√wsize
 = 2 * 
size
;

198 i‡(
√wsize
 > 
LUAI_MAXSTACK
)Çewsize = LUAI_MAXSTACK;

199 i‡(
√wsize
 < 
√eded
)Çewsize =Çeeded;

200 i‡(
√wsize
 > 
LUAI_MAXSTACK
) {

201 
	`luaD_ªÆloc°ack
(
L
, 
ERRORSTACKSIZE
);

202 
	`luaG_ru√º‹
(
L
, "stack overflow");

205 
	`luaD_ªÆloc°ack
(
L
, 
√wsize
);

207 
	}
}

210 
	$°acköu£
 (
lua_Sèã
 *
L
) {

211 
CÆlInfo
 *
ci
;

212 
StkId
 
lim
 = 
L
->
t›
;

213 
ci
 = 
L
->ci; cò!
NULL
; còci->
¥evious
) {

214 i‡(
lim
 < 
ci
->
t›
)Üim = ci->top;

216 
	`lua_as£π
(
lim
 <
L
->
°ack_œ°
);

217  
	`ˇ°_öt
(
lim
 - 
L
->
°ack
) + 1;

218 
	}
}

221 
	$luaD_shrök°ack
 (
lua_Sèã
 *
L
) {

222 
öu£
 = 
	`°acköu£
(
L
);

223 
goodsize
 = 
öu£
 + (öu£ / 8Ë+ 2*
EXTRA_STACK
;

224 i‡(
goodsize
 > 
LUAI_MAXSTACK
)

225 
goodsize
 = 
LUAI_MAXSTACK
;

226 i‡(
L
->
°acksize
 > 
LUAI_MAXSTACK
)

227 
	`luaE_‰ìCI
(
L
);

229 
	`luaE_shrökCI
(
L
);

232 i‡(
öu£
 <(
LUAI_MAXSTACK
 - 
EXTRA_STACK
) &&

233 
goodsize
 < 
L
->
°acksize
)

234 
	`luaD_ªÆloc°ack
(
L
, 
goodsize
);

236 
	`c⁄dmove°ack
(
L
,{},{});

237 
	}
}

240 
	$luaD_ö˘›
 (
lua_Sèã
 *
L
) {

241 
	`luaD_check°ack
(
L
, 1);

242 
L
->
t›
++;

243 
	}
}

253 
	$luaD_hook
 (
lua_Sèã
 *
L
, 
evít
, 
löe
) {

254 
lua_Hook
 
hook
 = 
L
->hook;

255 i‡(
hook
 && 
L
->
Ælowhook
) {

256 
CÆlInfo
 *
ci
 = 
L
->ci;

257 
±rdiff_t
 
t›
 = 
	`ßve°ack
(
L
, L->top);

258 
±rdiff_t
 
ci_t›
 = 
	`ßve°ack
(
L
, 
ci
->
t›
);

259 
lua_Debug
 
¨
;

260 
¨
.
evít
 =Évent;

261 
¨
.
cuºíéöe
 = 
löe
;

262 
¨
.
i_ci
 = 
ci
;

263 
	`luaD_check°ack
(
L
, 
LUA_MINSTACK
);

264 
ci
->
t›
 = 
L
->t› + 
LUA_MINSTACK
;

265 
	`lua_as£π
(
ci
->
t›
 <
L
->
°ack_œ°
);

266 
L
->
Ælowhook
 = 0;

267 
ci
->
ˇŒ°©us
 |
CIST_HOOKED
;

268 
	`lua_u∆ock
(
L
);

269 (*
hook
)(
L
, &
¨
);

270 
	`lua_lock
(
L
);

271 
	`lua_as£π
(!
L
->
Ælowhook
);

272 
L
->
Ælowhook
 = 1;

273 
ci
->
t›
 = 
	`ª°‹e°ack
(
L
, 
ci_t›
);

274 
L
->
t›
 = 
	`ª°‹e°ack
(L,Åop);

275 
ci
->
ˇŒ°©us
 &~
CIST_HOOKED
;

277 
	}
}

280 
	$ˇŒhook
 (
lua_Sèã
 *
L
, 
CÆlInfo
 *
ci
) {

281 
hook
 = 
LUA_HOOKCALL
;

282 
ci
->
u
.
l
.
ßvedpc
++;

283 i‡(
	`isLua
(
ci
->
¥evious
) &&

284 
	`GET_OPCODE
(*(
ci
->
¥evious
->
u
.
l
.
ßvedpc
 - 1)Ë=
OP_TAILCALL
) {

285 
ci
->
ˇŒ°©us
 |
CIST_TAIL
;

286 
hook
 = 
LUA_HOOKTAILCALL
;

288 
	`luaD_hook
(
L
, 
hook
, -1);

289 
ci
->
u
.
l
.
ßvedpc
--;

290 
	}
}

293 
StkId
 
	$adju°_v¨¨gs
 (
lua_Sèã
 *
L
, 
PrŸo
 *
p
, 
a˘uÆ
) {

294 
i
;

295 
nfix¨gs
 = 
p
->
num∑øms
;

296 
StkId
 
ba£
, 
fixed
;

298 
fixed
 = 
L
->
t›
 - 
a˘uÆ
;

299 
ba£
 = 
L
->
t›
;

300 
i
 = 0; i < 
nfix¨gs
 && i < 
a˘uÆ
; i++) {

301 
	`£tobjs2s
(
L
, L->
t›
++, 
fixed
 + 
i
);

302 
	`£äûvÆue
(
fixed
 + 
i
);

304 ; 
i
 < 
nfix¨gs
; i++)

305 
	`£äûvÆue
(
L
->
t›
++);

306  
ba£
;

307 
	}
}

315 
	$åyfuncTM
 (
lua_Sèã
 *
L
, 
StkId
 
func
) {

316 c⁄° 
TVÆue
 *
tm
 = 
	`luaT_gëtmbyobj
(
L
, 
func
, 
TM_CALL
);

317 
StkId
 
p
;

318 i‡(!
	`âisfun˘i⁄
(
tm
))

319 
	`luaG_ty≥îr‹
(
L
, 
func
, "call");

321 
p
 = 
L
->
t›
;Ö > 
func
;Ö--)

322 
	`£tobjs2s
(
L
, 
p
,Ö-1);

323 
L
->
t›
++;

324 
	`£tobj2s
(
L
, 
func
, 
tm
);

325 
	}
}

334 
	$movîesu…s
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
fú°Resu…
, 
StkId
 
ªs
,

335 
ƒes
, 
w™ãd
) {

336 
w™ãd
) {

339 i‡(
ƒes
 == 0)

340 
fú°Resu…
 = 
luaO_nûobje˘
;

341 
	`£tobjs2s
(
L
, 
ªs
, 
fú°Resu…
);

344 
LUA_MULTRET
: {

345 
i
;

346 
i
 = 0; i < 
ƒes
; i++)

347 
	`£tobjs2s
(
L
, 
ªs
 + 
i
, 
fú°Resu…
 + i);

348 
L
->
t›
 = 
ªs
 + 
ƒes
;

352 
i
;

353 i‡(
w™ãd
 <
ƒes
) {

354 
i
 = 0; i < 
w™ãd
; i++)

355 
	`£tobjs2s
(
L
, 
ªs
 + 
i
, 
fú°Resu…
 + i);

358 
i
 = 0; i < 
ƒes
; i++)

359 
	`£tobjs2s
(
L
, 
ªs
 + 
i
, 
fú°Resu…
 + i);

360 ; 
i
 < 
w™ãd
; i++)

361 
	`£äûvÆue
(
ªs
 + 
i
);

366 
L
->
t›
 = 
ªs
 + 
w™ãd
;

368 
	}
}

376 
	$luaD_posˇŒ
 (
lua_Sèã
 *
L
, 
CÆlInfo
 *
ci
, 
StkId
 
fú°Resu…
, 
ƒes
) {

377 
StkId
 
ªs
;

378 
w™ãd
 = 
ci
->
ƒesu…s
;

379 i‡(
L
->
hookmask
 & (
LUA_MASKRET
 | 
LUA_MASKLINE
)) {

380 i‡(
L
->
hookmask
 & 
LUA_MASKRET
) {

381 
±rdiff_t
 
‰
 = 
	`ßve°ack
(
L
, 
fú°Resu…
);

382 
	`luaD_hook
(
L
, 
LUA_HOOKRET
, -1);

383 
fú°Resu…
 = 
	`ª°‹e°ack
(
L
, 
‰
);

385 
L
->
ﬁdpc
 = 
ci
->
¥evious
->
u
.
l
.
ßvedpc
;

387 
ªs
 = 
ci
->
func
;

388 
L
->
ci
 = ci->
¥evious
;

390  
	`movîesu…s
(
L
, 
fú°Resu…
, 
ªs
, 
ƒes
, 
w™ãd
);

391 
	}
}

395 
	#√xt_ci
(
L
Ë(L->
ci
 = (L->ci->
√xt
 ? L->ci->√xà: 
	`luaE_exãndCI
(L)))

	)

399 
	#check°ackp
(
L
,
n
,
p
) \

400 
	`luaD_check°ackaux
(
L
, 
n
, \

401 
±rdiff_t
 
t__
 = 
	`ßve°ack
(
L
, 
p
); \

402 
	`luaC_checkGC
(
L
), \

403 
p
 = 
	`ª°‹e°ack
(
L
, 
t__
)Ë

	)

413 
	$luaD_¥eˇŒ
 (
lua_Sèã
 *
L
, 
StkId
 
func
, 
ƒesu…s
) {

414 
lua_CFun˘i⁄
 
f
;

415 
CÆlInfo
 *
ci
;

416 
	`ây≥
(
func
)) {

417 
LUA_TCCL
:

418 
f
 = 
	`˛CvÆue
(
func
)->f;

419 
Cfunc
;

420 
LUA_TLCF
:

421 
f
 = 
	`fvÆue
(
func
);

422 
Cfunc
: {

423 
n
;

424 
	`check°ackp
(
L
, 
LUA_MINSTACK
, 
func
);

425 
ci
 = 
	`√xt_ci
(
L
);

426 
ci
->
ƒesu…s
 =Çresults;

427 
ci
->
func
 = func;

428 
ci
->
t›
 = 
L
->t› + 
LUA_MINSTACK
;

429 
	`lua_as£π
(
ci
->
t›
 <
L
->
°ack_œ°
);

430 
ci
->
ˇŒ°©us
 = 0;

431 i‡(
L
->
hookmask
 & 
LUA_MASKCALL
)

432 
	`luaD_hook
(
L
, 
LUA_HOOKCALL
, -1);

433 
	`lua_u∆ock
(
L
);

434 
n
 = (*
f
)(
L
);

435 
	`lua_lock
(
L
);

436 
	`≠i_check√Àms
(
L
, 
n
);

437 
	`luaD_posˇŒ
(
L
, 
ci
, L->
t›
 - 
n
,Ç);

440 
LUA_TLCL
: {

441 
StkId
 
ba£
;

442 
PrŸo
 *
p
 = 
	`˛LvÆue
(
func
)->p;

443 
n
 = 
	`ˇ°_öt
(
L
->
t›
 - 
func
) - 1;

444 
fsize
 = 
p
->
max°acksize
;

445 
	`check°ackp
(
L
, 
fsize
, 
func
);

446 i‡(
p
->
is_v¨¨g
)

447 
ba£
 = 
	`adju°_v¨¨gs
(
L
, 
p
, 
n
);

449 ; 
n
 < 
p
->
num∑øms
;Ç++)

450 
	`£äûvÆue
(
L
->
t›
++);

451 
ba£
 = 
func
 + 1;

453 
ci
 = 
	`√xt_ci
(
L
);

454 
ci
->
ƒesu…s
 =Çresults;

455 
ci
->
func
 = func;

456 
ci
->
u
.
l
.
ba£
 = base;

457 
L
->
t›
 = 
ci
->t› = 
ba£
 + 
fsize
;

458 
	`lua_as£π
(
ci
->
t›
 <
L
->
°ack_œ°
);

459 
ci
->
u
.
l
.
ßvedpc
 = 
p
->
code
;

460 
ci
->
ˇŒ°©us
 = 
CIST_LUA
;

461 i‡(
L
->
hookmask
 & 
LUA_MASKCALL
)

462 
	`ˇŒhook
(
L
, 
ci
);

466 
	`check°ackp
(
L
, 1, 
func
);

467 
	`åyfuncTM
(
L
, 
func
);

468  
	`luaD_¥eˇŒ
(
L
, 
func
, 
ƒesu…s
);

471 
	}
}

481 
	$°ackîr‹
 (
lua_Sèã
 *
L
) {

482 i‡(
L
->
nCˇŒs
 =
LUAI_MAXCCALLS
)

483 
	`luaG_ru√º‹
(
L
, "C stack overflow");

484 i‡(
L
->
nCˇŒs
 >(
LUAI_MAXCCALLS
 + (LUAI_MAXCCALLS>>3)))

485 
	`luaD_throw
(
L
, 
LUA_ERRERR
);

486 
	}
}

495 
	$luaD_ˇŒ
 (
lua_Sèã
 *
L
, 
StkId
 
func
, 
nResu…s
) {

496 i‡(++
L
->
nCˇŒs
 >
LUAI_MAXCCALLS
)

497 
	`°ackîr‹
(
L
);

498 i‡(!
	`luaD_¥eˇŒ
(
L
, 
func
, 
nResu…s
))

499 
	`luaV_execuã
(
L
);

500 
L
->
nCˇŒs
--;

501 
	}
}

507 
	$luaD_ˇŒnoyõld
 (
lua_Sèã
 *
L
, 
StkId
 
func
, 
nResu…s
) {

508 
L
->
¬y
++;

509 
	`luaD_ˇŒ
(
L
, 
func
, 
nResu…s
);

510 
L
->
¬y
--;

511 
	}
}

518 
	$föishCˇŒ
 (
lua_Sèã
 *
L
, 
°©us
) {

519 
CÆlInfo
 *
ci
 = 
L
->ci;

520 
n
;

522 
	`lua_as£π
(
ci
->
u
.
c
.
k
 !
NULL
 && 
L
->
¬y
 == 0);

524 
	`lua_as£π
((
ci
->
ˇŒ°©us
 & 
CIST_YPCALL
Ë|| 
°©us
 =
LUA_YIELD
);

525 i‡(
ci
->
ˇŒ°©us
 & 
CIST_YPCALL
) {

526 
ci
->
ˇŒ°©us
 &~
CIST_YPCALL
;

527 
L
->
îrfunc
 = 
ci
->
u
.
c
.
ﬁd_îrfunc
;

531 
	`adju°ªsu…s
(
L
, 
ci
->
ƒesu…s
);

532 
	`lua_u∆ock
(
L
);

533 
n
 = (*
ci
->
u
.
c
.
k
)(
L
, 
°©us
, ci->u.c.
˘x
);

534 
	`lua_lock
(
L
);

535 
	`≠i_check√Àms
(
L
, 
n
);

536 
	`luaD_posˇŒ
(
L
, 
ci
, L->
t›
 - 
n
,Ç);

537 
	}
}

548 
	$uƒﬁl
 (
lua_Sèã
 *
L
, *
ud
) {

549 i‡(
ud
 !
NULL
)

550 
	`föishCˇŒ
(
L
, *(*)
ud
);

551 
L
->
ci
 !&L->
ba£_ci
) {

552 i‡(!
	`isLua
(
L
->
ci
))

553 
	`föishCˇŒ
(
L
, 
LUA_YIELD
);

555 
	`luaV_föishOp
(
L
);

556 
	`luaV_execuã
(
L
);

559 
	}
}

566 
CÆlInfo
 *
	$födpˇŒ
 (
lua_Sèã
 *
L
) {

567 
CÆlInfo
 *
ci
;

568 
ci
 = 
L
->ci; cò!
NULL
; còci->
¥evious
) {

569 i‡(
ci
->
ˇŒ°©us
 & 
CIST_YPCALL
)

570  
ci
;

572  
NULL
;

573 
	}
}

581 
	$ªcovî
 (
lua_Sèã
 *
L
, 
°©us
) {

582 
StkId
 
ﬁdt›
;

583 
CÆlInfo
 *
ci
 = 
	`födpˇŒ
(
L
);

584 i‡(
ci
 =
NULL
)  0;

586 
ﬁdt›
 = 
	`ª°‹e°ack
(
L
, 
ci
->
exåa
);

587 
	`luaF_˛o£
(
L
, 
ﬁdt›
);

588 
	`£ãº‹obj
(
L
, 
°©us
, 
ﬁdt›
);

589 
L
->
ci
 = ci;

590 
L
->
Ælowhook
 = 
	`gëﬂh
(
ci
->
ˇŒ°©us
);

591 
L
->
¬y
 = 0;

592 
	`luaD_shrök°ack
(
L
);

593 
L
->
îrfunc
 = 
ci
->
u
.
c
.
ﬁd_îrfunc
;

595 
	}
}

603 
	$ªsume_îr‹
 (
lua_Sèã
 *
L
, c⁄° *
msg
, 
«rg
) {

604 
L
->
t›
 -
«rg
;

605 
	`£tsvÆue2s
(
L
, L->
t›
, 
	`luaS_√w
(L, 
msg
));

606 
	`≠i_ö¸_t›
(
L
);

607 
	`lua_u∆ock
(
L
);

608  
LUA_ERRRUN
;

609 
	}
}

619 
	$ªsume
 (
lua_Sèã
 *
L
, *
ud
) {

620 
n
 = *(
	`ˇ°
(*, 
ud
));

621 
StkId
 
fú°Arg
 = 
L
->
t›
 - 
n
;

622 
CÆlInfo
 *
ci
 = 
L
->ci;

623 i‡(
L
->
°©us
 =
LUA_OK
) {

624 i‡(!
	`luaD_¥eˇŒ
(
L
, 
fú°Arg
 - 1, 
LUA_MULTRET
))

625 
	`luaV_execuã
(
L
);

628 
	`lua_as£π
(
L
->
°©us
 =
LUA_YIELD
);

629 
L
->
°©us
 = 
LUA_OK
;

630 
ci
->
func
 = 
	`ª°‹e°ack
(
L
, ci->
exåa
);

631 i‡(
	`isLua
(
ci
))

632 
	`luaV_execuã
(
L
);

634 i‡(
ci
->
u
.
c
.
k
 !
NULL
) {

635 
	`lua_u∆ock
(
L
);

636 
n
 = (*
ci
->
u
.
c
.
k
)(
L
, 
LUA_YIELD
, ci->u.c.
˘x
);

637 
	`lua_lock
(
L
);

638 
	`≠i_check√Àms
(
L
, 
n
);

639 
fú°Arg
 = 
L
->
t›
 - 
n
;

641 
	`luaD_posˇŒ
(
L
, 
ci
, 
fú°Arg
, 
n
);

643 
	`uƒﬁl
(
L
, 
NULL
);

645 
	}
}

648 
LUA_API
 
	$lua_ªsume
 (
lua_Sèã
 *
L
,Üua_Sèã *
‰om
, 
«rgs
) {

649 
°©us
;

650 
ﬁd¬y
 = 
L
->
¬y
;

651 
	`lua_lock
(
L
);

652 i‡(
L
->
°©us
 =
LUA_OK
) {

653 i‡(
L
->
ci
 !&L->
ba£_ci
)

654  
	`ªsume_îr‹
(
L
, "ˇ¬ŸÑesumên⁄-su•íded c‹outöe", 
«rgs
);

656 i‡(
L
->
°©us
 !
LUA_YIELD
)

657  
	`ªsume_îr‹
(
L
, "ˇ¬ŸÑesumêdód c‹outöe", 
«rgs
);

658 
L
->
nCˇŒs
 = (
‰om
) ? from->nCcalls + 1 : 1;

659 i‡(
L
->
nCˇŒs
 >
LUAI_MAXCCALLS
)

660  
	`ªsume_îr‹
(
L
, "C sèck ovîÊow", 
«rgs
);

661 
	`luai_u£r°©îesume
(
L
, 
«rgs
);

662 
L
->
¬y
 = 0;

663 
	`≠i_check√Àms
(
L
, (L->
°©us
 =
LUA_OK
Ë? 
«rgs
 + 1 :Çargs);

664 
°©us
 = 
	`luaD_øwru≈rŸe˘ed
(
L
, 
ªsume
, &
«rgs
);

665 i‡(
°©us
 == -1)

666 
°©us
 = 
LUA_ERRRUN
;

668 
	`îr‹°©us
(
°©us
Ë&& 
	`ªcovî
(
L
, status)) {

670 
°©us
 = 
	`luaD_øwru≈rŸe˘ed
(
L
, 
uƒﬁl
, &status);

672 i‡(
	`îr‹°©us
(
°©us
)) {

673 
L
->
°©us
 = 
	`ˇ°_byã
(status);

674 
	`£ãº‹obj
(
L
, 
°©us
, L->
t›
);

675 
L
->
ci
->
t›
 = L->top;

677 
	`lua_as£π
(
°©us
 =
L
->status);

679 
L
->
¬y
 = 
ﬁd¬y
;

680 
L
->
nCˇŒs
--;

681 
	`lua_as£π
(
L
->
nCˇŒs
 =((
‰om
) ? from->nCcalls : 0));

682 
	`lua_u∆ock
(
L
);

683  
°©us
;

684 
	}
}

687 
LUA_API
 
	$lua_isyõldabÀ
 (
lua_Sèã
 *
L
) {

688  (
L
->
¬y
 == 0);

689 
	}
}

692 
LUA_API
 
	$lua_yõldk
 (
lua_Sèã
 *
L
, 
ƒesu…s
, 
lua_KC⁄ãxt
 
˘x
,

693 
lua_KFun˘i⁄
 
k
) {

694 
CÆlInfo
 *
ci
 = 
L
->ci;

695 
	`luai_u£r°©eyõld
(
L
, 
ƒesu…s
);

696 
	`lua_lock
(
L
);

697 
	`≠i_check√Àms
(
L
, 
ƒesu…s
);

698 i‡(
L
->
¬y
 > 0) {

699 i‡(
L
 !
	`G
(L)->
maöthªad
)

700 
	`luaG_ru√º‹
(
L
, "attemptÅo yieldácrossá C-call boundary");

702 
	`luaG_ru√º‹
(
L
, "attemptÅo yield from outsideá coroutine");

704 
L
->
°©us
 = 
LUA_YIELD
;

705 
ci
->
exåa
 = 
	`ßve°ack
(
L
, ci->
func
);

706 i‡(
	`isLua
(
ci
)) {

707 
	`≠i_check
(
L
, 
k
 =
NULL
, "hooks cannot continueáfter yielding");

710 i‡((
ci
->
u
.
c
.
k
 = kË!
NULL
)

711 
ci
->
u
.
c
.
˘x
 = ctx;

712 
ci
->
func
 = 
L
->
t›
 - 
ƒesu…s
 - 1;

713 
	`luaD_throw
(
L
, 
LUA_YIELD
);

715 
	`lua_as£π
(
ci
->
ˇŒ°©us
 & 
CIST_HOOKED
);

716 
	`lua_u∆ock
(
L
);

718 
	}
}

721 
	$luaD_pˇŒ
 (
lua_Sèã
 *
L
, 
Pfunc
 
func
, *
u
,

722 
±rdiff_t
 
ﬁd_t›
,Öådiff_à
ef
) {

723 
°©us
;

724 
CÆlInfo
 *
ﬁd_ci
 = 
L
->
ci
;

725 
lu_byã
 
ﬁd_Ælowhooks
 = 
L
->
Ælowhook
;

726 
ﬁd_¬y
 = 
L
->
¬y
;

727 
±rdiff_t
 
ﬁd_îrfunc
 = 
L
->
îrfunc
;

728 
L
->
îrfunc
 = 
ef
;

729 
°©us
 = 
	`luaD_øwru≈rŸe˘ed
(
L
, 
func
, 
u
);

730 i‡(
°©us
 !
LUA_OK
) {

731 
StkId
 
ﬁdt›
 = 
	`ª°‹e°ack
(
L
, 
ﬁd_t›
);

732 
	`luaF_˛o£
(
L
, 
ﬁdt›
);

733 
	`£ãº‹obj
(
L
, 
°©us
, 
ﬁdt›
);

734 
L
->
ci
 = 
ﬁd_ci
;

735 
L
->
Ælowhook
 = 
ﬁd_Ælowhooks
;

736 
L
->
¬y
 = 
ﬁd_¬y
;

737 
	`luaD_shrök°ack
(
L
);

739 
L
->
îrfunc
 = 
ﬁd_îrfunc
;

740  
°©us
;

741 
	}
}

748 
	sSP¨£r
 {

749 
ZIO
 *
	mz
;

750 
Mbuf„r
 
	mbuff
;

751 
Dynd©a
 
	mdyd
;

752 c⁄° *
	mmode
;

753 c⁄° *
	m«me
;

757 
	$checkmode
 (
lua_Sèã
 *
L
, c⁄° *
mode
, c⁄° *
x
) {

758 i‡(
mode
 && 
	`°rchr
(mode, 
x
[0]Ë=
NULL
) {

759 
	`luaO_pushf°rög
(
L
,

760 "©ãm±Åÿlﬂdá %†chunk (modêi†'%s')", 
x
, 
mode
);

761 
	`luaD_throw
(
L
, 
LUA_ERRSYNTAX
);

763 
	}
}

766 
	$f_∑r£r
 (
lua_Sèã
 *
L
, *
ud
) {

767 
LClosuª
 *
˛
;

768 
SP¨£r
 *
p
 = 
	`ˇ°
(SP¨£∏*, 
ud
);

769 
c
 = 
	`zgëc
(
p
->
z
);

770 i‡(
c
 =
LUA_SIGNATURE
[0]) {

771 
	`checkmode
(
L
, 
p
->
mode
, "binary");

772 
˛
 = 
	`luaU_undump
(
L
, 
p
->
z
,Ö->
«me
);

775 
	`checkmode
(
L
, 
p
->
mode
, "text");

776 
˛
 = 
	`luaY_∑r£r
(
L
, 
p
->
z
, &p->
buff
, &p->
dyd
,Ö->
«me
, 
c
);

778 
	`lua_as£π
(
˛
->
nupvÆues
 =˛->
p
->
sizeupvÆues
);

779 
	`luaF_öôupvÆs
(
L
, 
˛
);

780 
	}
}

783 
	$luaD_¥Ÿe˘ed∑r£r
 (
lua_Sèã
 *
L
, 
ZIO
 *
z
, c⁄° *
«me
,

784 c⁄° *
mode
) {

785 
SP¨£r
 
p
;

786 
°©us
;

787 
L
->
¬y
++;

788 
p
.
z
 = z;Ö.
«me
 =Çame;Ö.
mode
 = mode;

789 
p
.
dyd
.
a˘v¨
.
¨r
 = 
NULL
;Ö.dyd.a˘v¨.
size
 = 0;

790 
p
.
dyd
.
gt
.
¨r
 = 
NULL
;Ö.dyd.gt.
size
 = 0;

791 
p
.
dyd
.
œbñ
.
¨r
 = 
NULL
;Ö.dyd.œbñ.
size
 = 0;

792 
	`luaZ_öôbuf„r
(
L
, &
p
.
buff
);

793 
°©us
 = 
	`luaD_pˇŒ
(
L
, 
f_∑r£r
, &
p
, 
	`ßve°ack
(L, L->
t›
), L->
îrfunc
);

794 
	`luaZ_‰ìbuf„r
(
L
, &
p
.
buff
);

795 
	`luaM_‰ì¨øy
(
L
, 
p
.
dyd
.
a˘v¨
.
¨r
,Ö.dyd.a˘v¨.
size
);

796 
	`luaM_‰ì¨øy
(
L
, 
p
.
dyd
.
gt
.
¨r
,Ö.dyd.gt.
size
);

797 
	`luaM_‰ì¨øy
(
L
, 
p
.
dyd
.
œbñ
.
¨r
,Ö.dyd.œbñ.
size
);

798 
L
->
¬y
--;

799  
°©us
;

800 
	}
}

	@lib/lua/lua-5.3.4/src/ldo.h

7 #i‚de‡
ldo_h


8 
	#ldo_h


	)

11 
	~"lobje˘.h
"

12 
	~"l°©e.h
"

13 
	~"lzio.h
"

23 
	#luaD_check°ackaux
(
L
,
n
,
¥e
,
pos
) \

24 i‡(
L
->
°ack_œ°
 - L->
t›
 <(
n
)) \

25 { 
¥e
; 
	`luaD_grow°ack
(
L
, 
n
); 
pos
; } { 
	`c⁄dmove°ack
(L,¥e,pos); }

	)

28 
	#luaD_check°ack
(
L
,
n
Ë
	`luaD_check°ackaux
(L,n,()0,()0)

	)

32 
	#ßve°ack
(
L
,
p
Ë((*)’Ë- (*)L->
°ack
)

	)

33 
	#ª°‹e°ack
(
L
,
n
Ë((
TVÆue
 *)((*)L->
°ack
 + (n)))

	)

37 (*
	tPfunc
Ë(
	tlua_Sèã
 *
	tL
, *
	tud
);

39 
LUAI_FUNC
 
	`luaD_¥Ÿe˘ed∑r£r
 (
lua_Sèã
 *
L
, 
ZIO
 *
z
, c⁄° *
«me
,

40 c⁄° *
mode
);

41 
LUAI_FUNC
 
	`luaD_hook
 (
lua_Sèã
 *
L
, 
evít
, 
löe
);

42 
LUAI_FUNC
 
	`luaD_¥eˇŒ
 (
lua_Sèã
 *
L
, 
StkId
 
func
, 
ƒesu…s
);

43 
LUAI_FUNC
 
	`luaD_ˇŒ
 (
lua_Sèã
 *
L
, 
StkId
 
func
, 
nResu…s
);

44 
LUAI_FUNC
 
	`luaD_ˇŒnoyõld
 (
lua_Sèã
 *
L
, 
StkId
 
func
, 
nResu…s
);

45 
LUAI_FUNC
 
	`luaD_pˇŒ
 (
lua_Sèã
 *
L
, 
Pfunc
 
func
, *
u
,

46 
±rdiff_t
 
ﬁdt›
,Öådiff_à
ef
);

47 
LUAI_FUNC
 
	`luaD_posˇŒ
 (
lua_Sèã
 *
L
, 
CÆlInfo
 *
ci
, 
StkId
 
fú°Resu…
,

48 
ƒes
);

49 
LUAI_FUNC
 
	`luaD_ªÆloc°ack
 (
lua_Sèã
 *
L
, 
√wsize
);

50 
LUAI_FUNC
 
	`luaD_grow°ack
 (
lua_Sèã
 *
L
, 
n
);

51 
LUAI_FUNC
 
	`luaD_shrök°ack
 (
lua_Sèã
 *
L
);

52 
LUAI_FUNC
 
	`luaD_ö˘›
 (
lua_Sèã
 *
L
);

54 
LUAI_FUNC
 
l_n‹ë
 
	`luaD_throw
 (
lua_Sèã
 *
L
, 
îrcode
);

55 
LUAI_FUNC
 
	`luaD_øwru≈rŸe˘ed
 (
lua_Sèã
 *
L
, 
Pfunc
 
f
, *
ud
);

	@lib/lua/lua-5.3.4/src/ldump.c

7 
	#ldump_c


	)

8 
	#LUA_CORE


	)

10 
	~"Õªfix.h
"

13 
	~<°ddef.h
>

15 
	~"lua.h
"

17 
	~"lobje˘.h
"

18 
	~"l°©e.h
"

19 
	~"lundump.h
"

23 
lua_Sèã
 *
	mL
;

24 
lua_Wrôî
 
	mwrôî
;

25 *
	md©a
;

26 
	m°rù
;

27 
	m°©us
;

28 } 
	tDumpSèã
;

35 
	#DumpVe˘‹
(
v
,
n
,
D
Ë
	`DumpBlock
(v,“)*((v)[0]),D)

	)

37 
	#DumpLôîÆ
(
s
,
D
Ë
	`DumpBlock
(s, (sË- (), D)

	)

40 
	$DumpBlock
 (c⁄° *
b
, 
size_t
 
size
, 
DumpSèã
 *
D
) {

41 i‡(
D
->
°©us
 =0 && 
size
 > 0) {

42 
	`lua_u∆ock
(
D
->
L
);

43 
D
->
°©us
 = (*D->
wrôî
)(D->
L
, 
b
, 
size
, D->
d©a
);

44 
	`lua_lock
(
D
->
L
);

46 
	}
}

49 
	#DumpV¨
(
x
,
D
Ë
	`DumpVe˘‹
(&x,1,D)

	)

52 
	$DumpByã
 (
y
, 
DumpSèã
 *
D
) {

53 
lu_byã
 
x
 = (lu_byã)
y
;

54 
	`DumpV¨
(
x
, 
D
);

55 
	}
}

58 
	$DumpI¡
 (
x
, 
DumpSèã
 *
D
) {

59 
	`DumpV¨
(
x
, 
D
);

60 
	}
}

63 
	$DumpNumbî
 (
lua_Numbî
 
x
, 
DumpSèã
 *
D
) {

64 
	`DumpV¨
(
x
, 
D
);

65 
	}
}

68 
	$DumpI¡egî
 (
lua_I¡egî
 
x
, 
DumpSèã
 *
D
) {

69 
	`DumpV¨
(
x
, 
D
);

70 
	}
}

73 
	$DumpSåög
 (c⁄° 
TSåög
 *
s
, 
DumpSèã
 *
D
) {

74 i‡(
s
 =
NULL
)

75 
	`DumpByã
(0, 
D
);

77 
size_t
 
size
 = 
	`ts¶í
(
s
) + 1;

78 c⁄° *
°r
 = 
	`gë°r
(
s
);

79 i‡(
size
 < 0xFF)

80 
	`DumpByã
(
	`ˇ°_öt
(
size
), 
D
);

82 
	`DumpByã
(0xFF, 
D
);

83 
	`DumpV¨
(
size
, 
D
);

85 
	`DumpVe˘‹
(
°r
, 
size
 - 1, 
D
);

87 
	}
}

90 
	$DumpCode
 (c⁄° 
PrŸo
 *
f
, 
DumpSèã
 *
D
) {

91 
	`DumpI¡
(
f
->
sizecode
, 
D
);

92 
	`DumpVe˘‹
(
f
->
code
, f->
sizecode
, 
D
);

93 
	}
}

96 
DumpFun˘i⁄
(c⁄° 
PrŸo
 *
f
, 
TSåög
 *
psour˚
, 
DumpSèã
 *
D
);

98 
	$DumpC⁄°™ts
 (c⁄° 
PrŸo
 *
f
, 
DumpSèã
 *
D
) {

99 
i
;

100 
n
 = 
f
->
sizek
;

101 
	`DumpI¡
(
n
, 
D
);

102 
i
 = 0; i < 
n
; i++) {

103 c⁄° 
TVÆue
 *
o
 = &
f
->
k
[
i
];

104 
	`DumpByã
(
	`ây≥
(
o
), 
D
);

105 
	`ây≥
(
o
)) {

106 
LUA_TNIL
:

108 
LUA_TBOOLEAN
:

109 
	`DumpByã
(
	`bvÆue
(
o
), 
D
);

111 
LUA_TNUMFLT
:

112 
	`DumpNumbî
(
	`ÊtvÆue
(
o
), 
D
);

114 
LUA_TNUMINT
:

115 
	`DumpI¡egî
(
	`ivÆue
(
o
), 
D
);

117 
LUA_TSHRSTR
:

118 
LUA_TLNGSTR
:

119 
	`DumpSåög
(
	`tsvÆue
(
o
), 
D
);

122 
	`lua_as£π
(0);

125 
	}
}

128 
	$DumpPrŸos
 (c⁄° 
PrŸo
 *
f
, 
DumpSèã
 *
D
) {

129 
i
;

130 
n
 = 
f
->
sizï
;

131 
	`DumpI¡
(
n
, 
D
);

132 
i
 = 0; i < 
n
; i++)

133 
	`DumpFun˘i⁄
(
f
->
p
[
i
], f->
sour˚
, 
D
);

134 
	}
}

137 
	$DumpUpvÆues
 (c⁄° 
PrŸo
 *
f
, 
DumpSèã
 *
D
) {

138 
i
, 
n
 = 
f
->
sizeupvÆues
;

139 
	`DumpI¡
(
n
, 
D
);

140 
i
 = 0; i < 
n
; i++) {

141 
	`DumpByã
(
f
->
upvÆues
[
i
].
ö°ack
, 
D
);

142 
	`DumpByã
(
f
->
upvÆues
[
i
].
idx
, 
D
);

144 
	}
}

147 
	$DumpDebug
 (c⁄° 
PrŸo
 *
f
, 
DumpSèã
 *
D
) {

148 
i
, 
n
;

149 
n
 = (
D
->
°rù
Ë? 0 : 
f
->
sizñöeöfo
;

150 
	`DumpI¡
(
n
, 
D
);

151 
	`DumpVe˘‹
(
f
->
löeöfo
, 
n
, 
D
);

152 
n
 = (
D
->
°rù
Ë? 0 : 
f
->
sizñocv¨s
;

153 
	`DumpI¡
(
n
, 
D
);

154 
i
 = 0; i < 
n
; i++) {

155 
	`DumpSåög
(
f
->
locv¨s
[
i
].
v¨«me
, 
D
);

156 
	`DumpI¡
(
f
->
locv¨s
[
i
].
°¨çc
, 
D
);

157 
	`DumpI¡
(
f
->
locv¨s
[
i
].
ídpc
, 
D
);

159 
n
 = (
D
->
°rù
Ë? 0 : 
f
->
sizeupvÆues
;

160 
	`DumpI¡
(
n
, 
D
);

161 
i
 = 0; i < 
n
; i++)

162 
	`DumpSåög
(
f
->
upvÆues
[
i
].
«me
, 
D
);

163 
	}
}

166 
	$DumpFun˘i⁄
 (c⁄° 
PrŸo
 *
f
, 
TSåög
 *
psour˚
, 
DumpSèã
 *
D
) {

167 i‡(
D
->
°rù
 || 
f
->
sour˚
 =
psour˚
)

168 
	`DumpSåög
(
NULL
, 
D
);

170 
	`DumpSåög
(
f
->
sour˚
, 
D
);

171 
	`DumpI¡
(
f
->
löedeföed
, 
D
);

172 
	`DumpI¡
(
f
->
œ°löedeföed
, 
D
);

173 
	`DumpByã
(
f
->
num∑øms
, 
D
);

174 
	`DumpByã
(
f
->
is_v¨¨g
, 
D
);

175 
	`DumpByã
(
f
->
max°acksize
, 
D
);

176 
	`DumpCode
(
f
, 
D
);

177 
	`DumpC⁄°™ts
(
f
, 
D
);

178 
	`DumpUpvÆues
(
f
, 
D
);

179 
	`DumpPrŸos
(
f
, 
D
);

180 
	`DumpDebug
(
f
, 
D
);

181 
	}
}

184 
	$DumpHódî
 (
DumpSèã
 *
D
) {

185 
	`DumpLôîÆ
(
LUA_SIGNATURE
, 
D
);

186 
	`DumpByã
(
LUAC_VERSION
, 
D
);

187 
	`DumpByã
(
LUAC_FORMAT
, 
D
);

188 
	`DumpLôîÆ
(
LUAC_DATA
, 
D
);

189 
	`DumpByã
((), 
D
);

190 
	`DumpByã
((
size_t
), 
D
);

191 
	`DumpByã
((
In°ru˘i⁄
), 
D
);

192 
	`DumpByã
((
lua_I¡egî
), 
D
);

193 
	`DumpByã
((
lua_Numbî
), 
D
);

194 
	`DumpI¡egî
(
LUAC_INT
, 
D
);

195 
	`DumpNumbî
(
LUAC_NUM
, 
D
);

196 
	}
}

202 
	$luaU_dump
(
lua_Sèã
 *
L
, c⁄° 
PrŸo
 *
f
, 
lua_Wrôî
 
w
, *
d©a
,

203 
°rù
) {

204 
DumpSèã
 
D
;

205 
D
.
L
 = L;

206 
D
.
wrôî
 = 
w
;

207 
D
.
d©a
 = data;

208 
D
.
°rù
 = strip;

209 
D
.
°©us
 = 0;

210 
	`DumpHódî
(&
D
);

211 
	`DumpByã
(
f
->
sizeupvÆues
, &
D
);

212 
	`DumpFun˘i⁄
(
f
, 
NULL
, &
D
);

213  
D
.
°©us
;

214 
	}
}

	@lib/lua/lua-5.3.4/src/lfunc.c

7 
	#lfunc_c


	)

8 
	#LUA_CORE


	)

10 
	~"Õªfix.h
"

13 
	~<°ddef.h
>

15 
	~"lua.h
"

17 
	~"lfunc.h
"

18 
	~"lgc.h
"

19 
	~"lmem.h
"

20 
	~"lobje˘.h
"

21 
	~"l°©e.h
"

25 
CClosuª
 *
	$luaF_√wC˛osuª
 (
lua_Sèã
 *
L
, 
n
) {

26 
GCObje˘
 *
o
 = 
	`luaC_√wobj
(
L
, 
LUA_TCCL
, 
	`sizeC˛osuª
(
n
));

27 
CClosuª
 *
c
 = 
	`gco2c˛
(
o
);

28 
c
->
nupvÆues
 = 
	`ˇ°_byã
(
n
);

29  
c
;

30 
	}
}

33 
LClosuª
 *
	$luaF_√wL˛osuª
 (
lua_Sèã
 *
L
, 
n
) {

34 
GCObje˘
 *
o
 = 
	`luaC_√wobj
(
L
, 
LUA_TLCL
, 
	`sizeL˛osuª
(
n
));

35 
LClosuª
 *
c
 = 
	`gco2l˛
(
o
);

36 
c
->
p
 = 
NULL
;

37 
c
->
nupvÆues
 = 
	`ˇ°_byã
(
n
);

38 
n
--Ë
c
->
upvÆs
[n] = 
NULL
;

39  
c
;

40 
	}
}

45 
	$luaF_öôupvÆs
 (
lua_Sèã
 *
L
, 
LClosuª
 *
˛
) {

46 
i
;

47 
i
 = 0; i < 
˛
->
nupvÆues
; i++) {

48 
UpVÆ
 *
uv
 = 
	`luaM_√w
(
L
, UpVal);

49 
uv
->
ªfcou¡
 = 1;

50 
uv
->
v
 = &uv->
u
.
vÆue
;

51 
	`£äûvÆue
(
uv
->
v
);

52 
˛
->
upvÆs
[
i
] = 
uv
;

54 
	}
}

57 
UpVÆ
 *
	$luaF_födupvÆ
 (
lua_Sèã
 *
L
, 
StkId
 
Àvñ
) {

58 
UpVÆ
 **
µ
 = &
L
->
›íupvÆ
;

59 
UpVÆ
 *
p
;

60 
UpVÆ
 *
uv
;

61 
	`lua_as£π
(
	`isötwups
(
L
Ë|| L->
›íupvÆ
 =
NULL
);

62 *
µ
 !
NULL
 && (
p
 = *µ)->
v
 >
Àvñ
) {

63 
	`lua_as£π
(
	`upis›í
(
p
));

64 i‡(
p
->
v
 =
Àvñ
)

65  
p
;

66 
µ
 = &
p
->
u
.
›í
.
√xt
;

69 
uv
 = 
	`luaM_√w
(
L
, 
UpVÆ
);

70 
uv
->
ªfcou¡
 = 0;

71 
uv
->
u
.
›í
.
√xt
 = *
µ
;

72 
uv
->
u
.
›í
.
touched
 = 1;

73 *
µ
 = 
uv
;

74 
uv
->
v
 = 
Àvñ
;

75 i‡(!
	`isötwups
(
L
)) {

76 
L
->
twups
 = 
	`G
(L)->twups;

77 
	`G
(
L
)->
twups
 = L;

79  
uv
;

80 
	}
}

83 
	$luaF_˛o£
 (
lua_Sèã
 *
L
, 
StkId
 
Àvñ
) {

84 
UpVÆ
 *
uv
;

85 
L
->
›íupvÆ
 !
NULL
 && (
uv
 = L->›íupvÆ)->
v
 >
Àvñ
) {

86 
	`lua_as£π
(
	`upis›í
(
uv
));

87 
L
->
›íupvÆ
 = 
uv
->
u
.
›í
.
√xt
;

88 i‡(
uv
->
ªfcou¡
 == 0)

89 
	`luaM_‰ì
(
L
, 
uv
);

91 
	`£tobj
(
L
, &
uv
->
u
.
vÆue
, uv->
v
);

92 
uv
->
v
 = &uv->
u
.
vÆue
;

93 
	`luaC_upvÆb¨rõr
(
L
, 
uv
);

96 
	}
}

99 
PrŸo
 *
	$luaF_√w¥Ÿo
 (
lua_Sèã
 *
L
) {

100 
GCObje˘
 *
o
 = 
	`luaC_√wobj
(
L
, 
LUA_TPROTO
, (
PrŸo
));

101 
PrŸo
 *
f
 = 
	`gco2p
(
o
);

102 
f
->
k
 = 
NULL
;

103 
f
->
sizek
 = 0;

104 
f
->
p
 = 
NULL
;

105 
f
->
sizï
 = 0;

106 
f
->
code
 = 
NULL
;

107 
f
->
ˇche
 = 
NULL
;

108 
f
->
sizecode
 = 0;

109 
f
->
löeöfo
 = 
NULL
;

110 
f
->
sizñöeöfo
 = 0;

111 
f
->
upvÆues
 = 
NULL
;

112 
f
->
sizeupvÆues
 = 0;

113 
f
->
num∑øms
 = 0;

114 
f
->
is_v¨¨g
 = 0;

115 
f
->
max°acksize
 = 0;

116 
f
->
locv¨s
 = 
NULL
;

117 
f
->
sizñocv¨s
 = 0;

118 
f
->
löedeföed
 = 0;

119 
f
->
œ°löedeföed
 = 0;

120 
f
->
sour˚
 = 
NULL
;

121  
f
;

122 
	}
}

125 
	$luaF_‰ì¥Ÿo
 (
lua_Sèã
 *
L
, 
PrŸo
 *
f
) {

126 
	`luaM_‰ì¨øy
(
L
, 
f
->
code
, f->
sizecode
);

127 
	`luaM_‰ì¨øy
(
L
, 
f
->
p
, f->
sizï
);

128 
	`luaM_‰ì¨øy
(
L
, 
f
->
k
, f->
sizek
);

129 
	`luaM_‰ì¨øy
(
L
, 
f
->
löeöfo
, f->
sizñöeöfo
);

130 
	`luaM_‰ì¨øy
(
L
, 
f
->
locv¨s
, f->
sizñocv¨s
);

131 
	`luaM_‰ì¨øy
(
L
, 
f
->
upvÆues
, f->
sizeupvÆues
);

132 
	`luaM_‰ì
(
L
, 
f
);

133 
	}
}

140 c⁄° *
	$luaF_gëloˇ ame
 (c⁄° 
PrŸo
 *
f
, 
loˇl_numbî
, 
pc
) {

141 
i
;

142 
i
 = 0; i<
f
->
sizñocv¨s
 && f->
locv¨s
[i].
°¨çc
 <
pc
; i++) {

143 i‡(
pc
 < 
f
->
locv¨s
[
i
].
ídpc
) {

144 
loˇl_numbî
--;

145 i‡(
loˇl_numbî
 == 0)

146  
	`gë°r
(
f
->
locv¨s
[
i
].
v¨«me
);

149  
NULL
;

150 
	}
}

	@lib/lua/lua-5.3.4/src/lfunc.h

7 #i‚de‡
lfunc_h


8 
	#lfunc_h


	)

11 
	~"lobje˘.h
"

14 
	#sizeC˛osuª
(
n
Ë(
	`ˇ°
(, (
CClosuª
)) + \

15 
	`ˇ°
(, (
TVÆue
)*((
n
)-1)))

	)

17 
	#sizeL˛osuª
(
n
Ë(
	`ˇ°
(, (
LClosuª
)) + \

18 
	`ˇ°
(, (
TVÆue
 *)*((
n
)-1)))

	)

22 
	#isötwups
(
L
Ë(L->
twups
 !L)

	)

29 
	#MAXUPVAL
 255

	)

35 
	sUpVÆ
 {

36 
TVÆue
 *
	mv
;

37 
lu_mem
 
	mªfcou¡
;

40 
UpVÆ
 *
	m√xt
;

41 
	mtouched
;

42 } 
	m›í
;

43 
TVÆue
 
	mvÆue
;

44 } 
	mu
;

47 
	#upis›í
(
up
Ë((up)->
v
 !&(up)->
u
.
vÆue
)

	)

50 
LUAI_FUNC
 
PrŸo
 *
luaF_√w¥Ÿo
 (
lua_Sèã
 *
L
);

51 
LUAI_FUNC
 
CClosuª
 *
luaF_√wC˛osuª
 (
lua_Sèã
 *
L
, 
√Àms
);

52 
LUAI_FUNC
 
LClosuª
 *
luaF_√wL˛osuª
 (
lua_Sèã
 *
L
, 
√Àms
);

53 
LUAI_FUNC
 
luaF_öôupvÆs
 (
lua_Sèã
 *
L
, 
LClosuª
 *
˛
);

54 
LUAI_FUNC
 
UpVÆ
 *
luaF_födupvÆ
 (
lua_Sèã
 *
L
, 
StkId
 
Àvñ
);

55 
LUAI_FUNC
 
luaF_˛o£
 (
lua_Sèã
 *
L
, 
StkId
 
Àvñ
);

56 
LUAI_FUNC
 
luaF_‰ì¥Ÿo
 (
lua_Sèã
 *
L
, 
PrŸo
 *
f
);

57 
LUAI_FUNC
 c⁄° *
luaF_gëloˇ ame
 (c⁄° 
PrŸo
 *
func
, 
loˇl_numbî
,

58 
pc
);

	@lib/lua/lua-5.3.4/src/lgc.c

7 
	#lgc_c


	)

8 
	#LUA_CORE


	)

10 
	~"Õªfix.h
"

13 
	~<°rög.h
>

15 
	~"lua.h
"

17 
	~"ldebug.h
"

18 
	~"ldo.h
"

19 
	~"lfunc.h
"

20 
	~"lgc.h
"

21 
	~"lmem.h
"

22 
	~"lobje˘.h
"

23 
	~"l°©e.h
"

24 
	~"l°rög.h
"

25 
	~"…abÀ.h
"

26 
	~"…m.h
"

33 
	#GCSösidótomic
 (
GCS∑u£
 + 1)

	)

39 
	#GCSWEEPCOST
 (((
TSåög
Ë+ 4Ë/ 4)

	)

42 
	#GCSWEEPMAX
 (
	`ˇ°_öt
((
GCSTEPSIZE
 / 
GCSWEEPCOST
Ë/ 4))

	)

45 
	#GCFINALIZECOST
 
GCSWEEPCOST


	)

52 
	#STEPMULADJ
 200

	)

59 
	#PAUSEADJ
 100

	)

66 
	#maskcﬁ‹s
 (~(
	`bômask
(
BLACKBIT
Ë| 
WHITEBITS
))

	)

67 
	#makewhôe
(
g
,
x
) \

68 (
x
->
m¨ked
 = 
	`ˇ°_byã
((x->m¨ked & 
maskcﬁ‹s
Ë| 
	`luaC_whôe
(
g
)))

	)

70 
	#whôe2gøy
(
x
Ë
	`ª£tbôs
(x->
m¨ked
, 
WHITEBITS
)

	)

71 
	#bœck2gøy
(
x
Ë
	`ª£tbô
(x->
m¨ked
, 
BLACKBIT
)

	)

74 
	#vÆiswhôe
(
x
Ë(
	`iscﬁÀ˘abÀ
(xË&& 
	`iswhôe
(
	`gcvÆue
(x)))

	)

76 
	#checkdódkey
(
n
Ë
	`lua_as£π
(!
	`âisdódkey
(
	`gkey
“)Ë|| 
	`âi¢û
(
	`gvÆ
“)))

	)

79 
	#checkc⁄si°ícy
(
obj
) \

80 
	`lua_l⁄gas£π
(!
	`iscﬁÀ˘abÀ
(
obj
Ë|| 
	`righât
(obj))

	)

83 
	#m¨kvÆue
(
g
,
o
Ë{ 
	`checkc⁄si°ícy
(o); \

84 i‡(
	`vÆiswhôe
(
o
)Ë
	`ªÆlym¨kobje˘
(
g
,
	`gcvÆue
(o)); }

	)

86 
	#m¨kobje˘
(
g
,
t
Ë{ i‡(
	`iswhôe
—)Ë
	`ªÆlym¨kobje˘
(g, 
	`obj2gco
—)); }

	)

92 
	#m¨kobje˘N
(
g
,
t
Ë{ i‡—Ë
	`m¨kobje˘
(g,t); }

	)

94 
ªÆlym¨kobje˘
 (
globÆ_Sèã
 *
g
, 
GCObje˘
 *
o
);

107 
	#gnodña°
(
h
Ë
	`gnode
(h, 
	`ˇ°
(
size_t
, 
	`sizíode
(h)))

	)

113 
	#lökg˛i°
(
o
,
p
Ë((o)->
g˛i°
 = (p), (pË
	`obj2gco
(o))

	)

125 
	$ªmovì¡ry
 (
Node
 *
n
) {

126 
	`lua_as£π
(
	`âi¢û
(
	`gvÆ
(
n
)));

127 i‡(
	`vÆiswhôe
(
	`gkey
(
n
)))

128 
	`£tdódvÆue
(
	`wgkey
(
n
));

129 
	}
}

139 
	$is˛óªd
 (
globÆ_Sèã
 *
g
, c⁄° 
TVÆue
 *
o
) {

140 i‡(!
	`iscﬁÀ˘abÀ
(
o
))  0;

141 i‡(
	`âis°rög
(
o
)) {

142 
	`m¨kobje˘
(
g
, 
	`tsvÆue
(
o
));

145  
	`iswhôe
(
	`gcvÆue
(
o
));

146 
	}
}

155 
	$luaC_b¨rõr_
 (
lua_Sèã
 *
L
, 
GCObje˘
 *
o
, GCObje˘ *
v
) {

156 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

157 
	`lua_as£π
(
	`isbœck
(
o
Ë&& 
	`iswhôe
(
v
Ë&& !
	`isdód
(
g
, v) && !isdead(g, o));

158 i‡(
	`kìpöv¨ü¡
(
g
))

159 
	`ªÆlym¨kobje˘
(
g
, 
v
);

161 
	`lua_as£π
(
	`isswìµha£
(
g
));

162 
	`makewhôe
(
g
, 
o
);

164 
	}
}

171 
	$luaC_b¨rõrback_
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
) {

172 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

173 
	`lua_as£π
(
	`isbœck
(
t
Ë&& !
	`isdód
(
g
,Å));

174 
	`bœck2gøy
(
t
);

175 
	`lökg˛i°
(
t
, 
g
->
gøyagaö
);

176 
	}
}

185 
	$luaC_upvÆb¨rõr_
 (
lua_Sèã
 *
L
, 
UpVÆ
 *
uv
) {

186 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

187 
GCObje˘
 *
o
 = 
	`gcvÆue
(
uv
->
v
);

188 
	`lua_as£π
(!
	`upis›í
(
uv
));

189 i‡(
	`kìpöv¨ü¡
(
g
))

190 
	`m¨kobje˘
(
g
, 
o
);

191 
	}
}

194 
	$luaC_fix
 (
lua_Sèã
 *
L
, 
GCObje˘
 *
o
) {

195 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

196 
	`lua_as£π
(
g
->
Ælgc
 =
o
);

197 
	`whôe2gøy
(
o
);

198 
g
->
Ælgc
 = 
o
->
√xt
;

199 
o
->
√xt
 = 
g
->
fixedgc
;

200 
g
->
fixedgc
 = 
o
;

201 
	}
}

208 
GCObje˘
 *
	$luaC_√wobj
 (
lua_Sèã
 *
L
, 
â
, 
size_t
 
sz
) {

209 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

210 
GCObje˘
 *
o
 = 
	`ˇ°
(GCObje˘ *, 
	`luaM_√wobje˘
(
L
, 
	`nov¨ü¡
(
â
), 
sz
));

211 
o
->
m¨ked
 = 
	`luaC_whôe
(
g
);

212 
o
->
â
 =Åt;

213 
o
->
√xt
 = 
g
->
Ælgc
;

214 
g
->
Ælgc
 = 
o
;

215  
o
;

216 
	}
}

235 
	$ªÆlym¨kobje˘
 (
globÆ_Sèã
 *
g
, 
GCObje˘
 *
o
) {

236 
ªíåy
:

237 
	`whôe2gøy
(
o
);

238 
o
->
â
) {

239 
LUA_TSHRSTR
: {

240 
	`gøy2bœck
(
o
);

241 
g
->
GCmemåav
 +
	`sizñ°rög
(
	`gco2ts
(
o
)->
shæí
);

244 
LUA_TLNGSTR
: {

245 
	`gøy2bœck
(
o
);

246 
g
->
GCmemåav
 +
	`sizñ°rög
(
	`gco2ts
(
o
)->
u
.
 gÀn
);

249 
LUA_TUSERDATA
: {

250 
TVÆue
 
uvÆue
;

251 
	`m¨kobje˘N
(
g
, 
	`gco2u
(
o
)->
më©abÀ
);

252 
	`gøy2bœck
(
o
);

253 
g
->
GCmemåav
 +
	`sizeud©a
(
	`gco2u
(
o
));

254 
	`gëu£rvÆue
(
g
->
maöthªad
, 
	`gco2u
(
o
), &
uvÆue
);

255 i‡(
	`vÆiswhôe
(&
uvÆue
)) {

256 
o
 = 
	`gcvÆue
(&
uvÆue
);

257 
ªíåy
;

261 
LUA_TLCL
: {

262 
	`lökg˛i°
(
	`gco2l˛
(
o
), 
g
->
gøy
);

265 
LUA_TCCL
: {

266 
	`lökg˛i°
(
	`gco2c˛
(
o
), 
g
->
gøy
);

269 
LUA_TTABLE
: {

270 
	`lökg˛i°
(
	`gco2t
(
o
), 
g
->
gøy
);

273 
LUA_TTHREAD
: {

274 
	`lökg˛i°
(
	`gco2th
(
o
), 
g
->
gøy
);

277 
LUA_TPROTO
: {

278 
	`lökg˛i°
(
	`gco2p
(
o
), 
g
->
gøy
);

281 : 
	`lua_as£π
(0); ;

283 
	}
}

289 
	$m¨kmt
 (
globÆ_Sèã
 *
g
) {

290 
i
;

291 
i
=0; i < 
LUA_NUMTAGS
; i++)

292 
	`m¨kobje˘N
(
g
, g->
mt
[
i
]);

293 
	}
}

299 
	$m¨kbeög‚z
 (
globÆ_Sèã
 *
g
) {

300 
GCObje˘
 *
o
;

301 
o
 = 
g
->
tobe‚z
; o !
NULL
; o = o->
√xt
)

302 
	`m¨kobje˘
(
g
, 
o
);

303 
	}
}

312 
	$ªm¨kupvÆs
 (
globÆ_Sèã
 *
g
) {

313 
lua_Sèã
 *
thªad
;

314 
lua_Sèã
 **
p
 = &
g
->
twups
;

315 (
thªad
 = *
p
Ë!
NULL
) {

316 
	`lua_as£π
(!
	`isbœck
(
thªad
));

317 i‡(
	`isgøy
(
thªad
Ë&&Åhªad->
›íupvÆ
 !
NULL
)

318 
p
 = &
thªad
->
twups
;

320 
UpVÆ
 *
uv
;

321 *
p
 = 
thªad
->
twups
;

322 
thªad
->
twups
 =Åhread;

323 
uv
 = 
thªad
->
›íupvÆ
; uv !
NULL
; uv = uv->
u
.
›í
.
√xt
) {

324 i‡(
uv
->
u
.
›í
.
touched
) {

325 
	`m¨kvÆue
(
g
, 
uv
->
v
);

326 
uv
->
u
.
›í
.
touched
 = 0;

331 
	}
}

337 
	$ª°¨tcﬁÀ˘i⁄
 (
globÆ_Sèã
 *
g
) {

338 
g
->
gøy
 = g->
gøyagaö
 = 
NULL
;

339 
g
->
wók
 = g->
Ælwók
 = g->
ïhemî⁄
 = 
NULL
;

340 
	`m¨kobje˘
(
g
, g->
maöthªad
);

341 
	`m¨kvÆue
(
g
, &g->
l_ªgi°ry
);

342 
	`m¨kmt
(
g
);

343 
	`m¨kbeög‚z
(
g
);

344 
	}
}

361 
	$åavî£wókvÆue
 (
globÆ_Sèã
 *
g
, 
TabÀ
 *
h
) {

362 
Node
 *
n
, *
limô
 = 
	`gnodña°
(
h
);

365 
has˛órs
 = (
h
->
sizóºay
 > 0);

366 
n
 = 
	`gnode
(
h
, 0);Ç < 
limô
;Ç++) {

367 
	`checkdódkey
(
n
);

368 i‡(
	`âi¢û
(
	`gvÆ
(
n
)))

369 
	`ªmovì¡ry
(
n
);

371 
	`lua_as£π
(!
	`âi¢û
(
	`gkey
(
n
)));

372 
	`m¨kvÆue
(
g
, 
	`gkey
(
n
));

373 i‡(!
has˛órs
 && 
	`is˛óªd
(
g
, 
	`gvÆ
(
n
)))

374 
has˛órs
 = 1;

377 i‡(
g
->
gc°©e
 =
GCS¥›ag©e
)

378 
	`lökg˛i°
(
h
, 
g
->
gøyagaö
);

379 i‡(
has˛órs
)

380 
	`lökg˛i°
(
h
, 
g
->
wók
);

381 
	}
}

394 
	$åavî£ïhemî⁄
 (
globÆ_Sèã
 *
g
, 
TabÀ
 *
h
) {

395 
m¨ked
 = 0;

396 
has˛órs
 = 0;

397 
hasww
 = 0;

398 
Node
 *
n
, *
limô
 = 
	`gnodña°
(
h
);

399 
i
;

401 
i
 = 0; i < 
h
->
sizóºay
; i++) {

402 i‡(
	`vÆiswhôe
(&
h
->
¨øy
[
i
])) {

403 
m¨ked
 = 1;

404 
	`ªÆlym¨kobje˘
(
g
, 
	`gcvÆue
(&
h
->
¨øy
[
i
]));

408 
n
 = 
	`gnode
(
h
, 0);Ç < 
limô
;Ç++) {

409 
	`checkdódkey
(
n
);

410 i‡(
	`âi¢û
(
	`gvÆ
(
n
)))

411 
	`ªmovì¡ry
(
n
);

412 i‡(
	`is˛óªd
(
g
, 
	`gkey
(
n
))) {

413 
has˛órs
 = 1;

414 i‡(
	`vÆiswhôe
(
	`gvÆ
(
n
)))

415 
hasww
 = 1;

417 i‡(
	`vÆiswhôe
(
	`gvÆ
(
n
))) {

418 
m¨ked
 = 1;

419 
	`ªÆlym¨kobje˘
(
g
, 
	`gcvÆue
(
	`gvÆ
(
n
)));

423 i‡(
g
->
gc°©e
 =
GCS¥›ag©e
)

424 
	`lökg˛i°
(
h
, 
g
->
gøyagaö
);

425 i‡(
hasww
)

426 
	`lökg˛i°
(
h
, 
g
->
ïhemî⁄
);

427 i‡(
has˛órs
)

428 
	`lökg˛i°
(
h
, 
g
->
Ælwók
);

429  
m¨ked
;

430 
	}
}

433 
	$åavî£°r⁄gèbÀ
 (
globÆ_Sèã
 *
g
, 
TabÀ
 *
h
) {

434 
Node
 *
n
, *
limô
 = 
	`gnodña°
(
h
);

435 
i
;

436 
i
 = 0; i < 
h
->
sizóºay
; i++)

437 
	`m¨kvÆue
(
g
, &
h
->
¨øy
[
i
]);

438 
n
 = 
	`gnode
(
h
, 0);Ç < 
limô
;Ç++) {

439 
	`checkdódkey
(
n
);

440 i‡(
	`âi¢û
(
	`gvÆ
(
n
)))

441 
	`ªmovì¡ry
(
n
);

443 
	`lua_as£π
(!
	`âi¢û
(
	`gkey
(
n
)));

444 
	`m¨kvÆue
(
g
, 
	`gkey
(
n
));

445 
	`m¨kvÆue
(
g
, 
	`gvÆ
(
n
));

448 
	}
}

451 
lu_mem
 
	$åavî£èbÀ
 (
globÆ_Sèã
 *
g
, 
TabÀ
 *
h
) {

452 c⁄° *
wókkey
, *
wókvÆue
;

453 c⁄° 
TVÆue
 *
mode
 = 
	`gÁ°tm
(
g
, 
h
->
më©abÀ
, 
TM_MODE
);

454 
	`m¨kobje˘N
(
g
, 
h
->
më©abÀ
);

455 i‡(
mode
 && 
	`âis°rög
(mode) &&

456 ((
wókkey
 = 
	`°rchr
(
	`svÆue
(
mode
), 'k')),

457 (
wókvÆue
 = 
	`°rchr
(
	`svÆue
(
mode
), 'v')),

458 (
wókkey
 || 
wókvÆue
))) {

459 
	`bœck2gøy
(
h
);

460 i‡(!
wókkey
)

461 
	`åavî£wókvÆue
(
g
, 
h
);

462 i‡(!
wókvÆue
)

463 
	`åavî£ïhemî⁄
(
g
, 
h
);

465 
	`lökg˛i°
(
h
, 
g
->
Ælwók
);

468 
	`åavî£°r⁄gèbÀ
(
g
, 
h
);

469  (
TabÀ
Ë+ (
TVÆue
Ë* 
h
->
sizóºay
 +

470 (
Node
Ë* 
	`ˇ°
(
size_t
, 
	`Ælocsizíode
(
h
));

471 
	}
}

479 
	$åavî£¥Ÿo
 (
globÆ_Sèã
 *
g
, 
PrŸo
 *
f
) {

480 
i
;

481 i‡(
f
->
ˇche
 && 
	`iswhôe
(f->cache))

482 
f
->
ˇche
 = 
NULL
;

483 
	`m¨kobje˘N
(
g
, 
f
->
sour˚
);

484 
i
 = 0; i < 
f
->
sizek
; i++)

485 
	`m¨kvÆue
(
g
, &
f
->
k
[
i
]);

486 
i
 = 0; i < 
f
->
sizeupvÆues
; i++)

487 
	`m¨kobje˘N
(
g
, 
f
->
upvÆues
[
i
].
«me
);

488 
i
 = 0; i < 
f
->
sizï
; i++)

489 
	`m¨kobje˘N
(
g
, 
f
->
p
[
i
]);

490 
i
 = 0; i < 
f
->
sizñocv¨s
; i++)

491 
	`m¨kobje˘N
(
g
, 
f
->
locv¨s
[
i
].
v¨«me
);

492  (
PrŸo
Ë+ (
In°ru˘i⁄
Ë* 
f
->
sizecode
 +

493 (
PrŸo
 *Ë* 
f
->
sizï
 +

494 (
TVÆue
Ë* 
f
->
sizek
 +

495 (Ë* 
f
->
sizñöeöfo
 +

496 (
LocV¨
Ë* 
f
->
sizñocv¨s
 +

497 (
UpvÆdesc
Ë* 
f
->
sizeupvÆues
;

498 
	}
}

501 
lu_mem
 
	$åavî£C˛osuª
 (
globÆ_Sèã
 *
g
, 
CClosuª
 *
˛
) {

502 
i
;

503 
i
 = 0; i < 
˛
->
nupvÆues
; i++)

504 
	`m¨kvÆue
(
g
, &
˛
->
upvÆue
[
i
]);

505  
	`sizeC˛osuª
(
˛
->
nupvÆues
);

506 
	}
}

514 
lu_mem
 
	$åavî£L˛osuª
 (
globÆ_Sèã
 *
g
, 
LClosuª
 *
˛
) {

515 
i
;

516 
	`m¨kobje˘N
(
g
, 
˛
->
p
);

517 
i
 = 0; i < 
˛
->
nupvÆues
; i++) {

518 
UpVÆ
 *
uv
 = 
˛
->
upvÆs
[
i
];

519 i‡(
uv
 !
NULL
) {

520 i‡(
	`upis›í
(
uv
Ë&& 
g
->
gc°©e
 !
GCSösidótomic
)

521 
uv
->
u
.
›í
.
touched
 = 1;

523 
	`m¨kvÆue
(
g
, 
uv
->
v
);

526  
	`sizeL˛osuª
(
˛
->
nupvÆues
);

527 
	}
}

530 
lu_mem
 
	$åavî£thªad
 (
globÆ_Sèã
 *
g
, 
lua_Sèã
 *
th
) {

531 
StkId
 
o
 = 
th
->
°ack
;

532 i‡(
o
 =
NULL
)

534 
	`lua_as£π
(
g
->
gc°©e
 =
GCSösidótomic
 ||

535 
th
->
›íupvÆ
 =
NULL
 || 
	`isötwups
(th));

536 ; 
o
 < 
th
->
t›
; o++)

537 
	`m¨kvÆue
(
g
, 
o
);

538 i‡(
g
->
gc°©e
 =
GCSösidótomic
) {

539 
StkId
 
lim
 = 
th
->
°ack
 +Åh->
°acksize
;

540 ; 
o
 < 
lim
; o++)

541 
	`£äûvÆue
(
o
);

543 i‡(!
	`isötwups
(
th
Ë&&Åh->
›íupvÆ
 !
NULL
) {

544 
th
->
twups
 = 
g
->twups;

545 
g
->
twups
 = 
th
;

548 i‡(
g
->
gcköd
 !
KGC_EMERGENCY
)

549 
	`luaD_shrök°ack
(
th
);

550  ((
lua_Sèã
Ë+ (
TVÆue
Ë* 
th
->
°acksize
 +

551 (
CÆlInfo
Ë* 
th
->
nci
);

552 
	}
}

559 
	$¥›ag©em¨k
 (
globÆ_Sèã
 *
g
) {

560 
lu_mem
 
size
;

561 
GCObje˘
 *
o
 = 
g
->
gøy
;

562 
	`lua_as£π
(
	`isgøy
(
o
));

563 
	`gøy2bœck
(
o
);

564 
o
->
â
) {

565 
LUA_TTABLE
: {

566 
TabÀ
 *
h
 = 
	`gco2t
(
o
);

567 
g
->
gøy
 = 
h
->
g˛i°
;

568 
size
 = 
	`åavî£èbÀ
(
g
, 
h
);

571 
LUA_TLCL
: {

572 
LClosuª
 *
˛
 = 
	`gco2l˛
(
o
);

573 
g
->
gøy
 = 
˛
->
g˛i°
;

574 
size
 = 
	`åavî£L˛osuª
(
g
, 
˛
);

577 
LUA_TCCL
: {

578 
CClosuª
 *
˛
 = 
	`gco2c˛
(
o
);

579 
g
->
gøy
 = 
˛
->
g˛i°
;

580 
size
 = 
	`åavî£C˛osuª
(
g
, 
˛
);

583 
LUA_TTHREAD
: {

584 
lua_Sèã
 *
th
 = 
	`gco2th
(
o
);

585 
g
->
gøy
 = 
th
->
g˛i°
;

586 
	`lökg˛i°
(
th
, 
g
->
gøyagaö
);

587 
	`bœck2gøy
(
o
);

588 
size
 = 
	`åavî£thªad
(
g
, 
th
);

591 
LUA_TPROTO
: {

592 
PrŸo
 *
p
 = 
	`gco2p
(
o
);

593 
g
->
gøy
 = 
p
->
g˛i°
;

594 
size
 = 
	`åavî£¥Ÿo
(
g
, 
p
);

597 : 
	`lua_as£π
(0); ;

599 
g
->
GCmemåav
 +
size
;

600 
	}
}

603 
	$¥›ag©óŒ
 (
globÆ_Sèã
 *
g
) {

604 
g
->
gøy
Ë
	`¥›ag©em¨k
(g);

605 
	}
}

608 
	$c⁄vîgìphemî⁄s
 (
globÆ_Sèã
 *
g
) {

609 
ch™ged
;

611 
GCObje˘
 *
w
;

612 
GCObje˘
 *
√xt
 = 
g
->
ïhemî⁄
;

613 
g
->
ïhemî⁄
 = 
NULL
;

614 
ch™ged
 = 0;

615 (
w
 = 
√xt
Ë!
NULL
) {

616 
√xt
 = 
	`gco2t
(
w
)->
g˛i°
;

617 i‡(
	`åavî£ïhemî⁄
(
g
, 
	`gco2t
(
w
))) {

618 
	`¥›ag©óŒ
(
g
);

619 
ch™ged
 = 1;

622 } 
ch™ged
);

623 
	}
}

639 
	$˛órkeys
 (
globÆ_Sèã
 *
g
, 
GCObje˘
 *
l
, GCObje˘ *
f
) {

640 ; 
l
 !
f
;Ü = 
	`gco2t
÷)->
g˛i°
) {

641 
TabÀ
 *
h
 = 
	`gco2t
(
l
);

642 
Node
 *
n
, *
limô
 = 
	`gnodña°
(
h
);

643 
n
 = 
	`gnode
(
h
, 0);Ç < 
limô
;Ç++) {

644 i‡(!
	`âi¢û
(
	`gvÆ
(
n
)Ë&& (
	`is˛óªd
(
g
, 
	`gkey
(n)))) {

645 
	`£äûvÆue
(
	`gvÆ
(
n
));

646 
	`ªmovì¡ry
(
n
);

650 
	}
}

657 
	$˛órvÆues
 (
globÆ_Sèã
 *
g
, 
GCObje˘
 *
l
, GCObje˘ *
f
) {

658 ; 
l
 !
f
;Ü = 
	`gco2t
÷)->
g˛i°
) {

659 
TabÀ
 *
h
 = 
	`gco2t
(
l
);

660 
Node
 *
n
, *
limô
 = 
	`gnodña°
(
h
);

661 
i
;

662 
i
 = 0; i < 
h
->
sizóºay
; i++) {

663 
TVÆue
 *
o
 = &
h
->
¨øy
[
i
];

664 i‡(
	`is˛óªd
(
g
, 
o
))

665 
	`£äûvÆue
(
o
);

667 
n
 = 
	`gnode
(
h
, 0);Ç < 
limô
;Ç++) {

668 i‡(!
	`âi¢û
(
	`gvÆ
(
n
)Ë&& 
	`is˛óªd
(
g
, gval(n))) {

669 
	`£äûvÆue
(
	`gvÆ
(
n
));

670 
	`ªmovì¡ry
(
n
);

674 
	}
}

677 
	$luaC_upvdeccou¡
 (
lua_Sèã
 *
L
, 
UpVÆ
 *
uv
) {

678 
	`lua_as£π
(
uv
->
ªfcou¡
 > 0);

679 
uv
->
ªfcou¡
--;

680 i‡(
uv
->
ªfcou¡
 =0 && !
	`upis›í
(uv))

681 
	`luaM_‰ì
(
L
, 
uv
);

682 
	}
}

685 
	$‰ìL˛osuª
 (
lua_Sèã
 *
L
, 
LClosuª
 *
˛
) {

686 
i
;

687 
i
 = 0; i < 
˛
->
nupvÆues
; i++) {

688 
UpVÆ
 *
uv
 = 
˛
->
upvÆs
[
i
];

689 i‡(
uv
)

690 
	`luaC_upvdeccou¡
(
L
, 
uv
);

692 
	`luaM_‰ìmem
(
L
, 
˛
, 
	`sizeL˛osuª
(˛->
nupvÆues
));

693 
	}
}

696 
	$‰ìobj
 (
lua_Sèã
 *
L
, 
GCObje˘
 *
o
) {

697 
o
->
â
) {

698 
LUA_TPROTO
: 
	`luaF_‰ì¥Ÿo
(
L
, 
	`gco2p
(
o
)); ;

699 
LUA_TLCL
: {

700 
	`‰ìL˛osuª
(
L
, 
	`gco2l˛
(
o
));

703 
LUA_TCCL
: {

704 
	`luaM_‰ìmem
(
L
, 
o
, 
	`sizeC˛osuª
(
	`gco2c˛
(o)->
nupvÆues
));

707 
LUA_TTABLE
: 
	`luaH_‰ì
(
L
, 
	`gco2t
(
o
)); ;

708 
LUA_TTHREAD
: 
	`luaE_‰ìthªad
(
L
, 
	`gco2th
(
o
)); ;

709 
LUA_TUSERDATA
: 
	`luaM_‰ìmem
(
L
, 
o
, 
	`sizeud©a
(
	`gco2u
(o))); ;

710 
LUA_TSHRSTR
:

711 
	`luaS_ªmove
(
L
, 
	`gco2ts
(
o
));

712 
	`luaM_‰ìmem
(
L
, 
o
, 
	`sizñ°rög
(
	`gco2ts
(o)->
shæí
));

714 
LUA_TLNGSTR
: {

715 
	`luaM_‰ìmem
(
L
, 
o
, 
	`sizñ°rög
(
	`gco2ts
(o)->
u
.
 gÀn
));

718 : 
	`lua_as£π
(0);

720 
	}
}

723 
	#swìpwhﬁñi°
(
L
,
p
Ë
	`swì∂i°
(L,p,
MAX_LUMEM
)

	)

724 
GCObje˘
 **
swì∂i°
 (
lua_Sèã
 *
L
, GCObje˘ **
p
, 
lu_mem
 
cou¡
);

734 
GCObje˘
 **
	$swì∂i°
 (
lua_Sèã
 *
L
, 
GCObje˘
 **
p
, 
lu_mem
 
cou¡
) {

735 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

736 
ow
 = 
	`Ÿhîwhôe
(
g
);

737 
whôe
 = 
	`luaC_whôe
(
g
);

738 *
p
 !
NULL
 && 
cou¡
-- > 0) {

739 
GCObje˘
 *
cuº
 = *
p
;

740 
m¨ked
 = 
cuº
->marked;

741 i‡(
	`isdódm
(
ow
, 
m¨ked
)) {

742 *
p
 = 
cuº
->
√xt
;

743 
	`‰ìobj
(
L
, 
cuº
);

746 
cuº
->
m¨ked
 = 
	`ˇ°_byã
((m¨ked & 
maskcﬁ‹s
Ë| 
whôe
);

747 
p
 = &
cuº
->
√xt
;

750  (*
p
 =
NULL
) ? NULL :Ö;

751 
	}
}

757 
GCObje˘
 **
	$swì±ﬁive
 (
lua_Sèã
 *
L
, 
GCObje˘
 **
p
) {

758 
GCObje˘
 **
ﬁd
 = 
p
;

760 
p
 = 
	`swì∂i°
(
L
,Ö, 1);

761 } 
p
 =
ﬁd
);

762  
p
;

763 
	}
}

777 
	$checkSizes
 (
lua_Sèã
 *
L
, 
globÆ_Sèã
 *
g
) {

778 i‡(
g
->
gcköd
 !
KGC_EMERGENCY
) {

779 
l_mem
 
ﬁddebt
 = 
g
->
GCdebt
;

780 i‡(
g
->
°π
.
nu£
 < g->°π.
size
 / 4)

781 
	`luaS_ªsize
(
L
, 
g
->
°π
.
size
 / 2);

782 
g
->
GCe°im©e
 +g->
GCdebt
 - 
ﬁddebt
;

784 
	}
}

787 
GCObje˘
 *
	$ud©a2föÆize
 (
globÆ_Sèã
 *
g
) {

788 
GCObje˘
 *
o
 = 
g
->
tobe‚z
;

789 
	`lua_as£π
(
	`toföÆize
(
o
));

790 
g
->
tobe‚z
 = 
o
->
√xt
;

791 
o
->
√xt
 = 
g
->
Ælgc
;

792 
g
->
Ælgc
 = 
o
;

793 
	`ª£tbô
(
o
->
m¨ked
, 
FINALIZEDBIT
);

794 i‡(
	`isswìµha£
(
g
))

795 
	`makewhôe
(
g
, 
o
);

796  
o
;

797 
	}
}

800 
	$dŸheˇŒ
 (
lua_Sèã
 *
L
, *
ud
) {

801 
	`UNUSED
(
ud
);

802 
	`luaD_ˇŒnoyõld
(
L
, L->
t›
 - 2, 0);

803 
	}
}

806 
	$GCTM
 (
lua_Sèã
 *
L
, 
¥›ag©ìº‹s
) {

807 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

808 c⁄° 
TVÆue
 *
tm
;

809 
TVÆue
 
v
;

810 
	`£tgcovÆue
(
L
, &
v
, 
	`ud©a2föÆize
(
g
));

811 
tm
 = 
	`luaT_gëtmbyobj
(
L
, &
v
, 
TM_GC
);

812 i‡(
tm
 !
NULL
 && 
	`âisfun˘i⁄
(tm)) {

813 
°©us
;

814 
lu_byã
 
ﬁdah
 = 
L
->
Ælowhook
;

815 
ru¬ög
 = 
g
->
g¸u¬ög
;

816 
L
->
Ælowhook
 = 0;

817 
g
->
g¸u¬ög
 = 0;

818 
	`£tobj2s
(
L
, L->
t›
, 
tm
);

819 
	`£tobj2s
(
L
, L->
t›
 + 1, &
v
);

820 
L
->
t›
 += 2;

821 
L
->
ci
->
ˇŒ°©us
 |
CIST_FIN
;

822 
°©us
 = 
	`luaD_pˇŒ
(
L
, 
dŸheˇŒ
, 
NULL
, 
	`ßve°ack
(L, L->
t›
 - 2), 0);

823 
L
->
ci
->
ˇŒ°©us
 &~
CIST_FIN
;

824 
L
->
Ælowhook
 = 
ﬁdah
;

825 
g
->
g¸u¬ög
 = 
ru¬ög
;

826 i‡(
°©us
 !
LUA_OK
 && 
¥›ag©ìº‹s
) {

827 i‡(
°©us
 =
LUA_ERRRUN
) {

828 c⁄° *
msg
 = (
	`âis°rög
(
L
->
t›
 - 1))

829 ? 
	`svÆue
(
L
->
t›
 - 1)

831 
	`luaO_pushf°rög
(
L
, "îr‹ i¿__g¯mëamëhod (%s)", 
msg
);

832 
°©us
 = 
LUA_ERRGCMM
;

834 
	`luaD_throw
(
L
, 
°©us
);

837 
	}
}

843 
	$ru«„wföÆizîs
 (
lua_Sèã
 *
L
) {

844 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

845 
i
;

846 
	`lua_as£π
(!
g
->
tobe‚z
 || g->
gcfönum
 > 0);

847 
i
 = 0; 
g
->
tobe‚z
 && i < g->
gcfönum
; i++)

848 
	`GCTM
(
L
, 1);

849 
g
->
gcfönum
 = (!g->
tobe‚z
) ? 0

850 : 
g
->
gcfönum
 * 2;

851  
i
;

852 
	}
}

858 
	$ˇŒÆÕídögföÆizîs
 (
lua_Sèã
 *
L
) {

859 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

860 
g
->
tobe‚z
)

861 
	`GCTM
(
L
, 0);

862 
	}
}

868 
GCObje˘
 **
	$födœ°
 (
GCObje˘
 **
p
) {

869 *
p
 !
NULL
)

870 
p
 = &(*p)->
√xt
;

871  
p
;

872 
	}
}

879 
	$£∑øãtobe‚z
 (
globÆ_Sèã
 *
g
, 
Æl
) {

880 
GCObje˘
 *
cuº
;

881 
GCObje˘
 **
p
 = &
g
->
föobj
;

882 
GCObje˘
 **
œ°√xt
 = 
	`födœ°
(&
g
->
tobe‚z
);

883 (
cuº
 = *
p
Ë!
NULL
) {

884 
	`lua_as£π
(
	`toföÆize
(
cuº
));

885 i‡(!(
	`iswhôe
(
cuº
Ë|| 
Æl
))

886 
p
 = &
cuº
->
√xt
;

888 *
p
 = 
cuº
->
√xt
;

889 
cuº
->
√xt
 = *
œ°√xt
;

890 *
œ°√xt
 = 
cuº
;

891 
œ°√xt
 = &
cuº
->
√xt
;

894 
	}
}

901 
	$luaC_checkföÆizî
 (
lua_Sèã
 *
L
, 
GCObje˘
 *
o
, 
TabÀ
 *
mt
) {

902 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

903 i‡(
	`toföÆize
(
o
) ||

904 
	`gÁ°tm
(
g
, 
mt
, 
TM_GC
Ë=
NULL
)

907 
GCObje˘
 **
p
;

908 i‡(
	`isswìµha£
(
g
)) {

909 
	`makewhôe
(
g
, 
o
);

910 i‡(
g
->
swìpgc
 =&
o
->
√xt
)

911 
g
->
swìpgc
 = 
	`swì±ﬁive
(
L
, g->sweepgc);

914 
p
 = &
g
->
Ælgc
; *∞!
o
;Ö = &(*p)->
√xt
) { }

915 *
p
 = 
o
->
√xt
;

916 
o
->
√xt
 = 
g
->
föobj
;

917 
g
->
föobj
 = 
o
;

918 
	`l_£tbô
(
o
->
m¨ked
, 
FINALIZEDBIT
);

920 
	}
}

939 
	$£çau£
 (
globÆ_Sèã
 *
g
) {

940 
l_mem
 
thªshﬁd
, 
debt
;

941 
l_mem
 
e°im©e
 = 
g
->
GCe°im©e
 / 
PAUSEADJ
;

942 
	`lua_as£π
(
e°im©e
 > 0);

943 
thªshﬁd
 = (
g
->
g˝au£
 < 
MAX_LMEM
 / 
e°im©e
)

944 ? 
e°im©e
 * 
g
->
g˝au£


945 : 
MAX_LMEM
;

946 
debt
 = 
	`gëtŸÆbyãs
(
g
Ë- 
thªshﬁd
;

947 
	`luaE_£tdebt
(
g
, 
debt
);

948 
	}
}

958 
	$íãrswìp
 (
lua_Sèã
 *
L
) {

959 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

960 
g
->
gc°©e
 = 
GCSsw∑Œgc
;

961 
	`lua_as£π
(
g
->
swìpgc
 =
NULL
);

962 
g
->
swìpgc
 = 
	`swì∂i°
(
L
, &g->
Ælgc
, 1);

963 
	}
}

966 
	$luaC_‰ìÆlobje˘s
 (
lua_Sèã
 *
L
) {

967 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

968 
	`£∑øãtobe‚z
(
g
, 1);

969 
	`lua_as£π
(
g
->
föobj
 =
NULL
);

970 
	`ˇŒÆÕídögföÆizîs
(
L
);

971 
	`lua_as£π
(
g
->
tobe‚z
 =
NULL
);

972 
g
->
cuºítwhôe
 = 
WHITEBITS
;

973 
g
->
gcköd
 = 
KGC_NORMAL
;

974 
	`swìpwhﬁñi°
(
L
, &
g
->
föobj
);

975 
	`swìpwhﬁñi°
(
L
, &
g
->
Ælgc
);

976 
	`swìpwhﬁñi°
(
L
, &
g
->
fixedgc
);

977 
	`lua_as£π
(
g
->
°π
.
nu£
 == 0);

978 
	}
}

981 
l_mem
 
	$©omic
 (
lua_Sèã
 *
L
) {

982 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

983 
l_mem
 
w‹k
;

984 
GCObje˘
 *
‹igwók
, *
‹igÆl
;

985 
GCObje˘
 *
gøyagaö
 = 
g
->grayagain;

986 
	`lua_as£π
(
g
->
ïhemî⁄
 =
NULL
 && g->
wók
 == NULL);

987 
	`lua_as£π
(!
	`iswhôe
(
g
->
maöthªad
));

988 
g
->
gc°©e
 = 
GCSösidótomic
;

989 
g
->
GCmemåav
 = 0;

990 
	`m¨kobje˘
(
g
, 
L
);

992 
	`m¨kvÆue
(
g
, &g->
l_ªgi°ry
);

993 
	`m¨kmt
(
g
);

995 
	`ªm¨kupvÆs
(
g
);

996 
	`¥›ag©óŒ
(
g
);

997 
w‹k
 = 
g
->
GCmemåav
;

998 
g
->
gøy
 = 
gøyagaö
;

999 
	`¥›ag©óŒ
(
g
);

1000 
g
->
GCmemåav
 = 0;

1001 
	`c⁄vîgìphemî⁄s
(
g
);

1004 
	`˛órvÆues
(
g
, g->
wók
, 
NULL
);

1005 
	`˛órvÆues
(
g
, g->
Ælwók
, 
NULL
);

1006 
‹igwók
 = 
g
->
wók
; 
‹igÆl
 = g->
Ælwók
;

1007 
w‹k
 +
g
->
GCmemåav
;

1008 
	`£∑øãtobe‚z
(
g
, 0);

1009 
g
->
gcfönum
 = 1;

1010 
	`m¨kbeög‚z
(
g
);

1011 
	`¥›ag©óŒ
(
g
);

1012 
g
->
GCmemåav
 = 0;

1013 
	`c⁄vîgìphemî⁄s
(
g
);

1016 
	`˛órkeys
(
g
, g->
ïhemî⁄
, 
NULL
);

1017 
	`˛órkeys
(
g
, g->
Ælwók
, 
NULL
);

1019 
	`˛órvÆues
(
g
, g->
wók
, 
‹igwók
);

1020 
	`˛órvÆues
(
g
, g->
Ælwók
, 
‹igÆl
);

1021 
	`luaS_˛órˇche
(
g
);

1022 
g
->
cuºítwhôe
 = 
	`ˇ°_byã
(
	`Ÿhîwhôe
(g));

1023 
w‹k
 +
g
->
GCmemåav
;

1024  
w‹k
;

1025 
	}
}

1028 
lu_mem
 
	$swìp°ï
 (
lua_Sèã
 *
L
, 
globÆ_Sèã
 *
g
,

1029 
√xt°©e
, 
GCObje˘
 **
√xéi°
) {

1030 i‡(
g
->
swìpgc
) {

1031 
l_mem
 
ﬁddebt
 = 
g
->
GCdebt
;

1032 
g
->
swìpgc
 = 
	`swì∂i°
(
L
, g->swìpgc, 
GCSWEEPMAX
);

1033 
g
->
GCe°im©e
 +g->
GCdebt
 - 
ﬁddebt
;

1034 i‡(
g
->
swìpgc
)

1035  (
GCSWEEPMAX
 * 
GCSWEEPCOST
);

1038 
g
->
gc°©e
 = 
√xt°©e
;

1039 
g
->
swìpgc
 = 
√xéi°
;

1041 
	}
}

1044 
lu_mem
 
	$sögÀ°ï
 (
lua_Sèã
 *
L
) {

1045 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

1046 
g
->
gc°©e
) {

1047 
GCS∑u£
: {

1048 
g
->
GCmemåav
 = g->
°π
.
size
 * (
GCObje˘
*);

1049 
	`ª°¨tcﬁÀ˘i⁄
(
g
);

1050 
g
->
gc°©e
 = 
GCS¥›ag©e
;

1051  
g
->
GCmemåav
;

1053 
GCS¥›ag©e
: {

1054 
g
->
GCmemåav
 = 0;

1055 
	`lua_as£π
(
g
->
gøy
);

1056 
	`¥›ag©em¨k
(
g
);

1057 i‡(
g
->
gøy
 =
NULL
)

1058 
g
->
gc°©e
 = 
GCS©omic
;

1059  
g
->
GCmemåav
;

1061 
GCS©omic
: {

1062 
lu_mem
 
w‹k
;

1063 
	`¥›ag©óŒ
(
g
);

1064 
w‹k
 = 
	`©omic
(
L
);

1065 
	`íãrswìp
(
L
);

1066 
g
->
GCe°im©e
 = 
	`gëtŸÆbyãs
(g); ;

1067  
w‹k
;

1069 
GCSsw∑Œgc
: {

1070  
	`swìp°ï
(
L
, 
g
, 
GCSswpföobj
, &g->
föobj
);

1072 
GCSswpföobj
: {

1073  
	`swìp°ï
(
L
, 
g
, 
GCSsw±obe‚z
, &g->
tobe‚z
);

1075 
GCSsw±obe‚z
: {

1076  
	`swìp°ï
(
L
, 
g
, 
GCSsw≥nd
, 
NULL
);

1078 
GCSsw≥nd
: {

1079 
	`makewhôe
(
g
, g->
maöthªad
);

1080 
	`checkSizes
(
L
, 
g
);

1081 
g
->
gc°©e
 = 
GCSˇŒfö
;

1084 
GCSˇŒfö
: {

1085 i‡(
g
->
tobe‚z
 && g->
gcköd
 !
KGC_EMERGENCY
) {

1086 
n
 = 
	`ru«„wföÆizîs
(
L
);

1087  (
n
 * 
GCFINALIZECOST
);

1090 
g
->
gc°©e
 = 
GCS∑u£
;

1094 : 
	`lua_as£π
(0);  0;

1096 
	}
}

1103 
	$luaC_ru¡û°©e
 (
lua_Sèã
 *
L
, 
°©esmask
) {

1104 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

1105 !
	`ã°bô
(
°©esmask
, 
g
->
gc°©e
))

1106 
	`sögÀ°ï
(
L
);

1107 
	}
}

1114 
l_mem
 
	$gëdebt
 (
globÆ_Sèã
 *
g
) {

1115 
l_mem
 
debt
 = 
g
->
GCdebt
;

1116 
°ïmul
 = 
g
->
gc°ïmul
;

1117 i‡(
debt
 <= 0)  0;

1119 
debt
 = (debà/ 
STEPMULADJ
) + 1;

1120 
debt
 = (debà< 
MAX_LMEM
 / 
°ïmul
) ? debt * stepmul : MAX_LMEM;

1121  
debt
;

1123 
	}
}

1128 
	$luaC_°ï
 (
lua_Sèã
 *
L
) {

1129 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

1130 
l_mem
 
debt
 = 
	`gëdebt
(
g
);

1131 i‡(!
g
->
g¸u¬ög
) {

1132 
	`luaE_£tdebt
(
g
, -
GCSTEPSIZE
 * 10);

1136 
lu_mem
 
w‹k
 = 
	`sögÀ°ï
(
L
);

1137 
debt
 -
w‹k
;

1138 } 
debt
 > -
GCSTEPSIZE
 && 
g
->
gc°©e
 !
GCS∑u£
);

1139 i‡(
g
->
gc°©e
 =
GCS∑u£
)

1140 
	`£çau£
(
g
);

1142 
debt
 = (debà/ 
g
->
gc°ïmul
Ë* 
STEPMULADJ
;

1143 
	`luaE_£tdebt
(
g
, 
debt
);

1144 
	`ru«„wföÆizîs
(
L
);

1146 
	}
}

1158 
	$luaC_fuŒgc
 (
lua_Sèã
 *
L
, 
i£mîgícy
) {

1159 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

1160 
	`lua_as£π
(
g
->
gcköd
 =
KGC_NORMAL
);

1161 i‡(
i£mîgícy
Ë
g
->
gcköd
 = 
KGC_EMERGENCY
;

1162 i‡(
	`kìpöv¨ü¡
(
g
)) {

1163 
	`íãrswìp
(
L
);

1166 
	`luaC_ru¡û°©e
(
L
, 
	`bômask
(
GCS∑u£
));

1167 
	`luaC_ru¡û°©e
(
L
, ~
	`bômask
(
GCS∑u£
));

1168 
	`luaC_ru¡û°©e
(
L
, 
	`bômask
(
GCSˇŒfö
));

1170 
	`lua_as£π
(
g
->
GCe°im©e
 =
	`gëtŸÆbyãs
(g));

1171 
	`luaC_ru¡û°©e
(
L
, 
	`bômask
(
GCS∑u£
));

1172 
g
->
gcköd
 = 
KGC_NORMAL
;

1173 
	`£çau£
(
g
);

1174 
	}
}

	@lib/lua/lua-5.3.4/src/lgc.h

7 #i‚de‡
lgc_h


8 
	#lgc_h


	)

11 
	~"lobje˘.h
"

12 
	~"l°©e.h
"

30 #i‡!
deföed
(
GCSTEPSIZE
)

32 
	#GCSTEPSIZE
 (
	`ˇ°_öt
(100 * (
TSåög
)))

	)

39 
	#GCS¥›ag©e
 0

	)

40 
	#GCS©omic
 1

	)

41 
	#GCSsw∑Œgc
 2

	)

42 
	#GCSswpföobj
 3

	)

43 
	#GCSsw±obe‚z
 4

	)

44 
	#GCSsw≥nd
 5

	)

45 
	#GCSˇŒfö
 6

	)

46 
	#GCS∑u£
 7

	)

49 
	#isswìµha£
(
g
) \

50 (
GCSsw∑Œgc
 <(
g
)->
gc°©e
 && (g)->gc°©ê<
GCSsw≥nd
)

	)

61 
	#kìpöv¨ü¡
(
g
Ë((g)->
gc°©e
 <
GCS©omic
)

	)

67 
	#ª£tbôs
(
x
,
m
Ë((xË&
	`ˇ°
(
lu_byã
, ~(m)))

	)

68 
	#£tbôs
(
x
,
m
Ë((xË|(m))

	)

69 
	#ã°bôs
(
x
,
m
Ë((xË& (m))

	)

70 
	#bômask
(
b
Ë(1<<(b))

	)

71 
	#bô2mask
(
b1
,
b2
Ë(
	`bômask
(b1Ë| bômask(b2))

	)

72 
	#l_£tbô
(
x
,
b
Ë
	`£tbôs
(x, 
	`bômask
(b))

	)

73 
	#ª£tbô
(
x
,
b
Ë
	`ª£tbôs
(x, 
	`bômask
(b))

	)

74 
	#ã°bô
(
x
,
b
Ë
	`ã°bôs
(x, 
	`bômask
(b))

	)

78 
	#WHITE0BIT
 0

	)

79 
	#WHITE1BIT
 1

	)

80 
	#BLACKBIT
 2

	)

81 
	#FINALIZEDBIT
 3

	)

84 
	#WHITEBITS
 
	`bô2mask
(
WHITE0BIT
, 
WHITE1BIT
)

	)

87 
	#iswhôe
(
x
Ë
	`ã°bôs
((x)->
m¨ked
, 
WHITEBITS
)

	)

88 
	#isbœck
(
x
Ë
	`ã°bô
((x)->
m¨ked
, 
BLACKBIT
)

	)

89 
	#isgøy
(
x
) \

90 (!
	`ã°bôs
((
x
)->
m¨ked
, 
WHITEBITS
 | 
	`bômask
(
BLACKBIT
)))

	)

92 
	#toföÆize
(
x
Ë
	`ã°bô
((x)->
m¨ked
, 
FINALIZEDBIT
)

	)

94 
	#Ÿhîwhôe
(
g
Ë((g)->
cuºítwhôe
 ^ 
WHITEBITS
)

	)

95 
	#isdódm
(
ow
,
m
Ë(!(((mË^ 
WHITEBITS
Ë& (ow)))

	)

96 
	#isdód
(
g
,
v
Ë
	`isdódm
(
	`Ÿhîwhôe
(g), (v)->
m¨ked
)

	)

98 
	#ch™gewhôe
(
x
Ë((x)->
m¨ked
 ^
WHITEBITS
)

	)

99 
	#gøy2bœck
(
x
Ë
	`l_£tbô
((x)->
m¨ked
, 
BLACKBIT
)

	)

101 
	#luaC_whôe
(
g
Ë
	`ˇ°
(
lu_byã
, (g)->
cuºítwhôe
 & 
WHITEBITS
)

	)

110 
	#luaC_c⁄dGC
(
L
,
¥e
,
pos
) \

111 { i‡(
	`G
(
L
)->
GCdebt
 > 0Ë{ 
¥e
; 
	`luaC_°ï
(L); 
pos
;}; \

112 
	`c⁄dch™gemem
(
L
,
¥e
,
pos
); }

	)

115 
	#luaC_checkGC
(
L
Ë
	`luaC_c⁄dGC
(L,()0,()0)

	)

118 
	#luaC_b¨rõr
(
L
,
p
,
v
) ( \

119 (
	`iscﬁÀ˘abÀ
(
v
Ë&& 
	`isbœck
(
p
Ë&& 
	`iswhôe
(
	`gcvÆue
(v))) ? \

120 
	`luaC_b¨rõr_
(
L
,
	`obj2gco
(
p
),
	`gcvÆue
(
v
)Ë: 
	`ˇ°_void
(0))

	)

122 
	#luaC_b¨rõrback
(
L
,
p
,
v
) ( \

123 (
	`iscﬁÀ˘abÀ
(
v
Ë&& 
	`isbœck
(
p
Ë&& 
	`iswhôe
(
	`gcvÆue
(v))) ? \

124 
	`luaC_b¨rõrback_
(
L
,
p
Ë: 
	`ˇ°_void
(0))

	)

126 
	#luaC_objb¨rõr
(
L
,
p
,
o
) ( \

127 (
	`isbœck
(
p
Ë&& 
	`iswhôe
(
o
)) ? \

128 
	`luaC_b¨rõr_
(
L
,
	`obj2gco
(
p
),obj2gco(
o
)Ë: 
	`ˇ°_void
(0))

	)

130 
	#luaC_upvÆb¨rõr
(
L
,
uv
) ( \

131 (
	`iscﬁÀ˘abÀ
((
uv
)->
v
Ë&& !
	`upis›í
(uv)) ? \

132 
	`luaC_upvÆb¨rõr_
(
L
,
uv
Ë: 
	`ˇ°_void
(0))

	)

134 
LUAI_FUNC
 
luaC_fix
 (
lua_Sèã
 *
L
, 
GCObje˘
 *
o
);

135 
LUAI_FUNC
 
luaC_‰ìÆlobje˘s
 (
lua_Sèã
 *
L
);

136 
LUAI_FUNC
 
luaC_°ï
 (
lua_Sèã
 *
L
);

137 
LUAI_FUNC
 
luaC_ru¡û°©e
 (
lua_Sèã
 *
L
, 
°©esmask
);

138 
LUAI_FUNC
 
luaC_fuŒgc
 (
lua_Sèã
 *
L
, 
i£mîgícy
);

139 
LUAI_FUNC
 
GCObje˘
 *
luaC_√wobj
 (
lua_Sèã
 *
L
, 
â
, 
size_t
 
sz
);

140 
LUAI_FUNC
 
luaC_b¨rõr_
 (
lua_Sèã
 *
L
, 
GCObje˘
 *
o
, GCObje˘ *
v
);

141 
LUAI_FUNC
 
luaC_b¨rõrback_
 (
lua_Sèã
 *
L
, 
TabÀ
 *
o
);

142 
LUAI_FUNC
 
luaC_upvÆb¨rõr_
 (
lua_Sèã
 *
L
, 
UpVÆ
 *
uv
);

143 
LUAI_FUNC
 
luaC_checkföÆizî
 (
lua_Sèã
 *
L
, 
GCObje˘
 *
o
, 
TabÀ
 *
mt
);

144 
LUAI_FUNC
 
luaC_upvdeccou¡
 (
lua_Sèã
 *
L
, 
UpVÆ
 *
uv
);

	@lib/lua/lua-5.3.4/src/linit.c

8 
	#löô_c


	)

9 
	#LUA_LIB


	)

27 
	~"Õªfix.h
"

30 
	~<°ddef.h
>

32 
	~"lua.h
"

34 
	~"luÆib.h
"

35 
	~"œuxlib.h
"

42 c⁄° 
luaL_Reg
 
	glﬂdedlibs
[] = {

43 {"_G", 
lua›í_ba£
},

44 {
LUA_LOADLIBNAME
, 
lua›í_∑ckage
},

45 {
LUA_COLIBNAME
, 
lua›í_c‹outöe
},

46 {
LUA_TABLIBNAME
, 
lua›í_èbÀ
},

47 {
LUA_IOLIBNAME
, 
lua›í_io
},

48 {
LUA_OSLIBNAME
, 
lua›í_os
},

49 {
LUA_STRLIBNAME
, 
lua›í_°rög
},

50 {
LUA_MATHLIBNAME
, 
lua›í_m©h
},

51 {
LUA_UTF8LIBNAME
, 
lua›í_utf8
},

52 {
LUA_DBLIBNAME
, 
lua›í_debug
},

53 #i‡
deföed
(
LUA_COMPAT_BITLIB
)

54 {
LUA_BITLIBNAME
, 
lua›í_bô32
},

56 {
NULL
, NULL}

60 
LUALIB_API
 
	$luaL_›ílibs
 (
lua_Sèã
 *
L
) {

61 c⁄° 
luaL_Reg
 *
lib
;

63 
lib
 = 
lﬂdedlibs
;Üib->
func
;Üib++) {

64 
	`luaL_ªquúef
(
L
, 
lib
->
«me
,Üib->
func
, 1);

65 
	`lua_p›
(
L
, 1);

67 
	}
}

	@lib/lua/lua-5.3.4/src/liolib.c

7 
	#liﬁib_c


	)

8 
	#LUA_LIB


	)

10 
	~"Õªfix.h
"

13 
	~<˘y≥.h
>

14 
	~<î∫o.h
>

15 
	~<loˇÀ.h
>

16 
	~<°dio.h
>

17 
	~<°dlib.h
>

18 
	~<°rög.h
>

20 
	~"lua.h
"

22 
	~"œuxlib.h
"

23 
	~"luÆib.h
"

32 #i‡!
deföed
(
l_checkmode
)

35 #i‡!
deföed
(
L_MODEEXT
)

36 
	#L_MODEEXT
 "b"

	)

40 
	$l_checkmode
 (c⁄° *
mode
) {

41  (*
mode
 !'\0' && 
	`°rchr
("rwa", *(mode++)Ë!
NULL
 &&

42 (*
mode
 != '+' || (++mode, 1)) &&

43 (
	`°r•n
(
mode
, 
L_MODEEXT
Ë=
	`°æí
(mode)));

44 
	}
}

55 #i‡!
deföed
(
l_p›í
)

57 #i‡
deföed
(
LUA_USE_POSIX
)

59 
	#l_p›í
(
L
,
c
,
m
Ë(
	`fÊush
(
NULL
), 
	`p›í
(c,m))

	)

60 
	#l_p˛o£
(
L
,
fûe
Ë(
	`p˛o£
(fûe))

	)

62 #ñi‡
deföed
(
LUA_USE_WINDOWS
)

64 
	#l_p›í
(
L
,
c
,
m
Ë(
	`_p›í
(c,m))

	)

65 
	#l_p˛o£
(
L
,
fûe
Ë(
	`_p˛o£
(fûe))

	)

70 
	#l_p›í
(
L
,
c
,
m
) \

71 (()(()
c
, 
m
), \

72 
	`luaL_îr‹
(
L
, "'popen'Çot supported"), \

73 (
FILE
*)0)

	)

74 
	#l_p˛o£
(
L
,
fûe
Ë(()L, ()fûe, -1)

	)

83 #i‡!
deföed
(
l_gëc
)

85 #i‡
deföed
(
LUA_USE_POSIX
)

86 
	#l_gëc
(
f
Ë
	`gëc_u∆ocked
(f)

	)

87 
	#l_lockfûe
(
f
Ë
	`Êockfûe
(f)

	)

88 
	#l_u∆ockfûe
(
f
Ë
	`fu∆ockfûe
(f)

	)

90 
	#l_gëc
(
f
Ë
	`gëc
(f)

	)

91 
	#l_lockfûe
(
f
Ë(()0)

	)

92 
	#l_u∆ockfûe
(
f
Ë(()0)

	)

104 #i‡!
deföed
(
l_f£ek
)

106 #i‡
deföed
(
LUA_USE_POSIX
)

108 
	~<sys/ty≥s.h
>

110 
	#l_f£ek
(
f
,
o
,
w
Ë
	`f£eko
(f,o,w)

	)

111 
	#l_·ñl
(
f
Ë
	`·ñlo
(f)

	)

112 
	#l_£eknum
 
off_t


	)

114 #ñi‡
deföed
(
LUA_USE_WINDOWS
Ë&& !deföed(
_CRTIMP_TYPEINFO
) \

115 && 
deföed
(
_MSC_VER
Ë&& (
	g_MSC_VER
 >= 1400)

118 
	#l_f£ek
(
f
,
o
,
w
Ë
	`_f£eki64
(f,o,w)

	)

119 
	#l_·ñl
(
f
Ë
	`_·ñli64
(f)

	)

120 
	#l_£eknum
 
__öt64


	)

125 
	#l_f£ek
(
f
,
o
,
w
Ë
	`f£ek
(f,o,w)

	)

126 
	#l_·ñl
(
f
Ë
	`·ñl
(f)

	)

127 
	#l_£eknum
 

	)

136 
	#IO_PREFIX
 "_IO_"

	)

137 
	#IOPREF_LEN
 ((
IO_PREFIX
)/(Ë- 1)

	)

138 
	#IO_INPUT
 (
IO_PREFIX
 "öput")

	)

139 
	#IO_OUTPUT
 (
IO_PREFIX
 "ouçut")

	)

142 
luaL_Såóm
 
	tLSåóm
;

145 
	#tﬁ°ªam
(
L
Ë((
LSåóm
 *)
	`luaL_checkud©a
(L, 1, 
LUA_FILEHANDLE
))

	)

147 
	#is˛o£d
(
p
Ë(’)->
˛o£f
 =
NULL
)

	)

150 
	$io_ty≥
 (
lua_Sèã
 *
L
) {

151 
LSåóm
 *
p
;

152 
	`luaL_check™y
(
L
, 1);

153 
p
 = (
LSåóm
 *)
	`luaL_ã°ud©a
(
L
, 1, 
LUA_FILEHANDLE
);

154 i‡(
p
 =
NULL
)

155 
	`lua_pushnû
(
L
);

156 i‡(
	`is˛o£d
(
p
))

157 
	`lua_pushlôîÆ
(
L
, "closed file");

159 
	`lua_pushlôîÆ
(
L
, "file");

161 
	}
}

164 
	$f_to°rög
 (
lua_Sèã
 *
L
) {

165 
LSåóm
 *
p
 = 
	`tﬁ°ªam
(
L
);

166 i‡(
	`is˛o£d
(
p
))

167 
	`lua_pushlôîÆ
(
L
, "file (closed)");

169 
	`lua_pushf°rög
(
L
, "fûê(%p)", 
p
->
f
);

171 
	}
}

174 
FILE
 *
	$tofûe
 (
lua_Sèã
 *
L
) {

175 
LSåóm
 *
p
 = 
	`tﬁ°ªam
(
L
);

176 i‡(
	`is˛o£d
(
p
))

177 
	`luaL_îr‹
(
L
, "attemptÅo useá closed file");

178 
	`lua_as£π
(
p
->
f
);

179  
p
->
f
;

180 
	}
}

188 
LSåóm
 *
	$√w¥efûe
 (
lua_Sèã
 *
L
) {

189 
LSåóm
 *
p
 = (LSåóm *)
	`lua_√wu£rd©a
(
L
, (LStream));

190 
p
->
˛o£f
 = 
NULL
;

191 
	`luaL_£tmë©abÀ
(
L
, 
LUA_FILEHANDLE
);

192  
p
;

193 
	}
}

201 
	$aux_˛o£
 (
lua_Sèã
 *
L
) {

202 
LSåóm
 *
p
 = 
	`tﬁ°ªam
(
L
);

203 vﬁ©ûê
lua_CFun˘i⁄
 
cf
 = 
p
->
˛o£f
;

204 
p
->
˛o£f
 = 
NULL
;

205  (*
cf
)(
L
);

206 
	}
}

209 
	$io_˛o£
 (
lua_Sèã
 *
L
) {

210 i‡(
	`lua_i¢⁄e
(
L
, 1))

211 
	`lua_gëfõld
(
L
, 
LUA_REGISTRYINDEX
, 
IO_OUTPUT
);

212 
	`tofûe
(
L
);

213  
	`aux_˛o£
(
L
);

214 
	}
}

217 
	$f_gc
 (
lua_Sèã
 *
L
) {

218 
LSåóm
 *
p
 = 
	`tﬁ°ªam
(
L
);

219 i‡(!
	`is˛o£d
(
p
Ë&&Ö->
f
 !
NULL
)

220 
	`aux_˛o£
(
L
);

222 
	}
}

228 
	$io_f˛o£
 (
lua_Sèã
 *
L
) {

229 
LSåóm
 *
p
 = 
	`tﬁ°ªam
(
L
);

230 
ªs
 = 
	`f˛o£
(
p
->
f
);

231  
	`luaL_fûîesu…
(
L
, (
ªs
 =0), 
NULL
);

232 
	}
}

235 
LSåóm
 *
	$√wfûe
 (
lua_Sèã
 *
L
) {

236 
LSåóm
 *
p
 = 
	`√w¥efûe
(
L
);

237 
p
->
f
 = 
NULL
;

238 
p
->
˛o£f
 = &
io_f˛o£
;

239  
p
;

240 
	}
}

243 
	$›ícheck
 (
lua_Sèã
 *
L
, c⁄° *
‚ame
, c⁄° *
mode
) {

244 
LSåóm
 *
p
 = 
	`√wfûe
(
L
);

245 
p
->
f
 = 
	`f›í
(
‚ame
, 
mode
);

246 i‡(
p
->
f
 =
NULL
)

247 
	`luaL_îr‹
(
L
, "ˇ¬Ÿ o≥¿fûê'%s' (%s)", 
‚ame
, 
	`°ªº‹
(
î∫o
));

248 
	}
}

251 
	$io_›í
 (
lua_Sèã
 *
L
) {

252 c⁄° *
fûíame
 = 
	`luaL_check°rög
(
L
, 1);

253 c⁄° *
mode
 = 
	`luaL_›t°rög
(
L
, 2, "r");

254 
LSåóm
 *
p
 = 
	`√wfûe
(
L
);

255 c⁄° *
md
 = 
mode
;

256 
	`luaL_¨gcheck
(
L
, 
	`l_checkmode
(
md
), 2, "invalid mode");

257 
p
->
f
 = 
	`f›í
(
fûíame
, 
mode
);

258  (
p
->
f
 =
NULL
Ë? 
	`luaL_fûîesu…
(
L
, 0, 
fûíame
) : 1;

259 
	}
}

265 
	$io_p˛o£
 (
lua_Sèã
 *
L
) {

266 
LSåóm
 *
p
 = 
	`tﬁ°ªam
(
L
);

267  
	`luaL_exe¸esu…
(
L
, 
	`l_p˛o£
(L, 
p
->
f
));

268 
	}
}

271 
	$io_p›í
 (
lua_Sèã
 *
L
) {

272 c⁄° *
fûíame
 = 
	`luaL_check°rög
(
L
, 1);

273 c⁄° *
mode
 = 
	`luaL_›t°rög
(
L
, 2, "r");

274 
LSåóm
 *
p
 = 
	`√w¥efûe
(
L
);

275 
p
->
f
 = 
	`l_p›í
(
L
, 
fûíame
, 
mode
);

276 
p
->
˛o£f
 = &
io_p˛o£
;

277  (
p
->
f
 =
NULL
Ë? 
	`luaL_fûîesu…
(
L
, 0, 
fûíame
) : 1;

278 
	}
}

281 
	$io_tmpfûe
 (
lua_Sèã
 *
L
) {

282 
LSåóm
 *
p
 = 
	`√wfûe
(
L
);

283 
p
->
f
 = 
	`tmpfûe
();

284  (
p
->
f
 =
NULL
Ë? 
	`luaL_fûîesu…
(
L
, 0, NULL) : 1;

285 
	}
}

288 
FILE
 *
	$gëiofûe
 (
lua_Sèã
 *
L
, c⁄° *
födex
) {

289 
LSåóm
 *
p
;

290 
	`lua_gëfõld
(
L
, 
LUA_REGISTRYINDEX
, 
födex
);

291 
p
 = (
LSåóm
 *)
	`lua_tou£rd©a
(
L
, -1);

292 i‡(
	`is˛o£d
(
p
))

293 
	`luaL_îr‹
(
L
, "°™d¨d %†fûêi†˛o£d", 
födex
 + 
IOPREF_LEN
);

294  
p
->
f
;

295 
	}
}

298 
	$g_iofûe
 (
lua_Sèã
 *
L
, c⁄° *
f
, c⁄° *
mode
) {

299 i‡(!
	`lua_i¢⁄e‹nû
(
L
, 1)) {

300 c⁄° *
fûíame
 = 
	`lua_to°rög
(
L
, 1);

301 i‡(
fûíame
)

302 
	`›ícheck
(
L
, 
fûíame
, 
mode
);

304 
	`tofûe
(
L
);

305 
	`lua_pushvÆue
(
L
, 1);

307 
	`lua_£tfõld
(
L
, 
LUA_REGISTRYINDEX
, 
f
);

310 
	`lua_gëfõld
(
L
, 
LUA_REGISTRYINDEX
, 
f
);

312 
	}
}

315 
	$io_öput
 (
lua_Sèã
 *
L
) {

316  
	`g_iofûe
(
L
, 
IO_INPUT
, "r");

317 
	}
}

320 
	$io_ouçut
 (
lua_Sèã
 *
L
) {

321  
	`g_iofûe
(
L
, 
IO_OUTPUT
, "w");

322 
	}
}

325 
io_ªadlöe
 (
lua_Sèã
 *
L
);

332 
	#MAXARGLINE
 250

	)

334 
	$aux_löes
 (
lua_Sèã
 *
L
, 
to˛o£
) {

335 
n
 = 
	`lua_gët›
(
L
) - 1;

336 
	`luaL_¨gcheck
(
L
, 
n
 <
MAXARGLINE
, MAXARGLINE + 2, "too manyárguments");

337 
	`lua_pushöãgî
(
L
, 
n
);

338 
	`lua_pushboﬁón
(
L
, 
to˛o£
);

339 
	`lua_rŸ©e
(
L
, 2, 2);

340 
	`lua_pushc˛osuª
(
L
, 
io_ªadlöe
, 3 + 
n
);

341 
	}
}

344 
	$f_löes
 (
lua_Sèã
 *
L
) {

345 
	`tofûe
(
L
);

346 
	`aux_löes
(
L
, 0);

348 
	}
}

351 
	$io_löes
 (
lua_Sèã
 *
L
) {

352 
to˛o£
;

353 i‡(
	`lua_i¢⁄e
(
L
, 1)Ë
	`lua_pushnû
(L);

354 i‡(
	`lua_i¢û
(
L
, 1)) {

355 
	`lua_gëfõld
(
L
, 
LUA_REGISTRYINDEX
, 
IO_INPUT
);

356 
	`lua_ª∂a˚
(
L
, 1);

357 
	`tofûe
(
L
);

358 
to˛o£
 = 0;

361 c⁄° *
fûíame
 = 
	`luaL_check°rög
(
L
, 1);

362 
	`›ícheck
(
L
, 
fûíame
, "r");

363 
	`lua_ª∂a˚
(
L
, 1);

364 
to˛o£
 = 1;

366 
	`aux_löes
(
L
, 
to˛o£
);

368 
	}
}

379 #i‡!
deföed
 (
L_MAXLENNUM
)

380 
	#L_MAXLENNUM
 200

	)

386 
FILE
 *
	mf
;

387 
	mc
;

388 
	mn
;

389 
	mbuff
[
L_MAXLENNUM
 + 1];

390 } 
	tRN
;

396 
	$√xtc
 (
RN
 *
∫
) {

397 i‡(
∫
->
n
 >
L_MAXLENNUM
) {

398 
∫
->
buff
[0] = '\0';

402 
∫
->
buff
[∫->
n
++] =Ñn->
c
;

403 
∫
->
c
 = 
	`l_gëc
‘n->
f
);

406 
	}
}

412 
	$ã°2
 (
RN
 *
∫
, c⁄° *
£t
) {

413 i‡(
∫
->
c
 =
£t
[0] ||Ñn->c == set[1])

414  
	`√xtc
(
∫
);

416 
	}
}

422 
	$ªaddigôs
 (
RN
 *
∫
, 
hex
) {

423 
cou¡
 = 0;

424 (
hex
 ? 
	`isxdigô
(
∫
->
c
Ë: 
	`isdigô
‘n->c)Ë&& 
	`√xtc
(rn))

425 
cou¡
++;

426  
cou¡
;

427 
	}
}

435 
	$ªad_numbî
 (
lua_Sèã
 *
L
, 
FILE
 *
f
) {

436 
RN
 
∫
;

437 
cou¡
 = 0;

438 
hex
 = 0;

439 
de˝
[2];

440 
∫
.
f
 = f;Ñn.
n
 = 0;

441 
de˝
[0] = 
	`lua_gëloˇÀde˝oöt
();

442 
de˝
[1] = '.';

443 
	`l_lockfûe
(
∫
.
f
);

444 dÿ{ 
∫
.
c
 = 
	`l_gëc
‘n.
f
); } 
	`is•a˚
(rn.c));

445 
	`ã°2
(&
∫
, "-+");

446 i‡(
	`ã°2
(&
∫
, "00")) {

447 i‡(
	`ã°2
(&
∫
, "xX")Ë
hex
 = 1;

448 
cou¡
 = 1;

450 
cou¡
 +
	`ªaddigôs
(&
∫
, 
hex
);

451 i‡(
	`ã°2
(&
∫
, 
de˝
))

452 
cou¡
 +
	`ªaddigôs
(&
∫
, 
hex
);

453 i‡(
cou¡
 > 0 && 
	`ã°2
(&
∫
, (
hex
 ? "pP" : "eE"))) {

454 
	`ã°2
(&
∫
, "-+");

455 
	`ªaddigôs
(&
∫
, 0);

457 
	`ungëc
(
∫
.
c
,Ñn.
f
);

458 
	`l_u∆ockfûe
(
∫
.
f
);

459 
∫
.
buff
[∫.
n
] = '\0';

460 i‡(
	`lua_°rögt⁄umbî
(
L
, 
∫
.
buff
))

463 
	`lua_pushnû
(
L
);

466 
	}
}

469 
	$ã°_eof
 (
lua_Sèã
 *
L
, 
FILE
 *
f
) {

470 
c
 = 
	`gëc
(
f
);

471 
	`ungëc
(
c
, 
f
);

472 
	`lua_pushlôîÆ
(
L
, "");

473  (
c
 !
EOF
);

474 
	}
}

477 
	$ªad_löe
 (
lua_Sèã
 *
L
, 
FILE
 *
f
, 
ch›
) {

478 
luaL_Buf„r
 
b
;

479 
c
 = '\0';

480 
	`luaL_bufföô
(
L
, &
b
);

481 
c
 !
EOF
 && c != '\n') {

482 *
buff
 = 
	`luaL_¥ïbuf„r
(&
b
);

483 
i
 = 0;

484 
	`l_lockfûe
(
f
);

485 
i
 < 
LUAL_BUFFERSIZE
 && (
c
 = 
	`l_gëc
(
f
)Ë!
EOF
 && c != '\n')

486 
buff
[
i
++] = 
c
;

487 
	`l_u∆ockfûe
(
f
);

488 
	`luaL_addsize
(&
b
, 
i
);

490 i‡(!
ch›
 && 
c
 == '\n')

491 
	`luaL_addch¨
(&
b
, 
c
);

492 
	`luaL_pushªsu…
(&
b
);

494  (
c
 ='\n' || 
	`lua_øwÀn
(
L
, -1) > 0);

495 
	}
}

498 
	$ªad_Æl
 (
lua_Sèã
 *
L
, 
FILE
 *
f
) {

499 
size_t
 
ƒ
;

500 
luaL_Buf„r
 
b
;

501 
	`luaL_bufföô
(
L
, &
b
);

503 *
p
 = 
	`luaL_¥ïbuf„r
(&
b
);

504 
ƒ
 = 
	`‰ód
(
p
, (), 
LUAL_BUFFERSIZE
, 
f
);

505 
	`luaL_addsize
(&
b
, 
ƒ
);

506 } 
ƒ
 =
LUAL_BUFFERSIZE
);

507 
	`luaL_pushªsu…
(&
b
);

508 
	}
}

511 
	$ªad_ch¨s
 (
lua_Sèã
 *
L
, 
FILE
 *
f
, 
size_t
 
n
) {

512 
size_t
 
ƒ
;

513 *
p
;

514 
luaL_Buf„r
 
b
;

515 
	`luaL_bufföô
(
L
, &
b
);

516 
p
 = 
	`luaL_¥ïbuffsize
(&
b
, 
n
);

517 
ƒ
 = 
	`‰ód
(
p
, (), 
n
, 
f
);

518 
	`luaL_addsize
(&
b
, 
ƒ
);

519 
	`luaL_pushªsu…
(&
b
);

520  (
ƒ
 > 0);

521 
	}
}

524 
	$g_ªad
 (
lua_Sèã
 *
L
, 
FILE
 *
f
, 
fú°
) {

525 
«rgs
 = 
	`lua_gët›
(
L
) - 1;

526 
suc˚ss
;

527 
n
;

528 
	`˛óªº
(
f
);

529 i‡(
«rgs
 == 0) {

530 
suc˚ss
 = 
	`ªad_löe
(
L
, 
f
, 1);

531 
n
 = 
fú°
+1;

534 
	`luaL_check°ack
(
L
, 
«rgs
+
LUA_MINSTACK
, "too manyárguments");

535 
suc˚ss
 = 1;

536 
n
 = 
fú°
; 
«rgs
-- && 
suc˚ss
;Ç++) {

537 i‡(
	`lua_ty≥
(
L
, 
n
Ë=
LUA_TNUMBER
) {

538 
size_t
 
l
 = (size_t)
	`luaL_checköãgî
(
L
, 
n
);

539 
suc˚ss
 = (
l
 =0Ë? 
	`ã°_eof
(
L
, 
f
Ë: 
	`ªad_ch¨s
(L, f,Ü);

542 c⁄° *
p
 = 
	`luaL_check°rög
(
L
, 
n
);

543 i‡(*
p
 == '*')Ö++;

544 *
p
) {

546 
suc˚ss
 = 
	`ªad_numbî
(
L
, 
f
);

549 
suc˚ss
 = 
	`ªad_löe
(
L
, 
f
, 1);

552 
suc˚ss
 = 
	`ªad_löe
(
L
, 
f
, 0);

555 
	`ªad_Æl
(
L
, 
f
);

556 
suc˚ss
 = 1;

559  
	`luaL_¨gîr‹
(
L
, 
n
, "invalid format");

564 i‡(
	`„º‹
(
f
))

565  
	`luaL_fûîesu…
(
L
, 0, 
NULL
);

566 i‡(!
suc˚ss
) {

567 
	`lua_p›
(
L
, 1);

568 
	`lua_pushnû
(
L
);

570  
n
 - 
fú°
;

571 
	}
}

574 
	$io_ªad
 (
lua_Sèã
 *
L
) {

575  
	`g_ªad
(
L
, 
	`gëiofûe
(L, 
IO_INPUT
), 1);

576 
	}
}

579 
	$f_ªad
 (
lua_Sèã
 *
L
) {

580  
	`g_ªad
(
L
, 
	`tofûe
(L), 2);

581 
	}
}

584 
	$io_ªadlöe
 (
lua_Sèã
 *
L
) {

585 
LSåóm
 *
p
 = (LSåóm *)
	`lua_tou£rd©a
(
L
, 
	`lua_upvÆueödex
(1));

586 
i
;

587 
n
 = ()
	`lua_toöãgî
(
L
, 
	`lua_upvÆueödex
(2));

588 i‡(
	`is˛o£d
(
p
))

589  
	`luaL_îr‹
(
L
, "file isálready closed");

590 
	`lua_£â›
(
L
 , 1);

591 
	`luaL_check°ack
(
L
, 
n
, "too manyárguments");

592 
i
 = 1; i <
n
; i++)

593 
	`lua_pushvÆue
(
L
, 
	`lua_upvÆueödex
(3 + 
i
));

594 
n
 = 
	`g_ªad
(
L
, 
p
->
f
, 2);

595 
	`lua_as£π
(
n
 > 0);

596 i‡(
	`lua_toboﬁón
(
L
, -
n
))

597  
n
;

599 i‡(
n
 > 1) {

601  
	`luaL_îr‹
(
L
, "%s", 
	`lua_to°rög
(L, -
n
 + 1));

603 i‡(
	`lua_toboﬁón
(
L
, 
	`lua_upvÆueödex
(3))) {

604 
	`lua_£â›
(
L
, 0);

605 
	`lua_pushvÆue
(
L
, 
	`lua_upvÆueödex
(1));

606 
	`aux_˛o£
(
L
);

610 
	}
}

615 
	$g_wrôe
 (
lua_Sèã
 *
L
, 
FILE
 *
f
, 
¨g
) {

616 
«rgs
 = 
	`lua_gët›
(
L
Ë- 
¨g
;

617 
°©us
 = 1;

618 ; 
«rgs
--; 
¨g
++) {

619 i‡(
	`lua_ty≥
(
L
, 
¨g
Ë=
LUA_TNUMBER
) {

621 
Àn
 = 
	`lua_isöãgî
(
L
, 
¨g
)

622 ? 
	`Ârötf
(
f
, 
LUA_INTEGER_FMT
,

623 (
LUAI_UACINT
)
	`lua_toöãgî
(
L
, 
¨g
))

624 : 
	`Ârötf
(
f
, 
LUA_NUMBER_FMT
,

625 (
LUAI_UACNUMBER
)
	`lua_t⁄umbî
(
L
, 
¨g
));

626 
°©us
 = sètu†&& (
Àn
 > 0);

629 
size_t
 
l
;

630 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 
¨g
, &
l
);

631 
°©us
 = sètu†&& (
	`fwrôe
(
s
, (), 
l
, 
f
) ==Ü);

634 i‡(
°©us
)  1;

635  
	`luaL_fûîesu…
(
L
, 
°©us
, 
NULL
);

636 
	}
}

639 
	$io_wrôe
 (
lua_Sèã
 *
L
) {

640  
	`g_wrôe
(
L
, 
	`gëiofûe
(L, 
IO_OUTPUT
), 1);

641 
	}
}

644 
	$f_wrôe
 (
lua_Sèã
 *
L
) {

645 
FILE
 *
f
 = 
	`tofûe
(
L
);

646 
	`lua_pushvÆue
(
L
, 1);

647  
	`g_wrôe
(
L
, 
f
, 2);

648 
	}
}

651 
	$f_£ek
 (
lua_Sèã
 *
L
) {

652 c⁄° 
mode
[] = {
SEEK_SET
, 
SEEK_CUR
, 
SEEK_END
};

653 c⁄° *c⁄° 
modíames
[] = {"£t", "cur", "íd", 
NULL
};

654 
FILE
 *
f
 = 
	`tofûe
(
L
);

655 
›
 = 
	`luaL_check›ti⁄
(
L
, 2, "cur", 
modíames
);

656 
lua_I¡egî
 
p3
 = 
	`luaL_›töãgî
(
L
, 3, 0);

657 
l_£eknum
 
off£t
 = (l_£eknum)
p3
;

658 
	`luaL_¨gcheck
(
L
, (
lua_I¡egî
)
off£t
 =
p3
, 3,

660 
›
 = 
	`l_f£ek
(
f
, 
off£t
, 
mode
[op]);

661 i‡(
›
)

662  
	`luaL_fûîesu…
(
L
, 0, 
NULL
);

664 
	`lua_pushöãgî
(
L
, (
lua_I¡egî
)
	`l_·ñl
(
f
));

667 
	}
}

670 
	$f_£tvbuf
 (
lua_Sèã
 *
L
) {

671 c⁄° 
mode
[] = {
_IONBF
, 
_IOFBF
, 
_IOLBF
};

672 c⁄° *c⁄° 
modíames
[] = {"no", "fuŒ", "löe", 
NULL
};

673 
FILE
 *
f
 = 
	`tofûe
(
L
);

674 
›
 = 
	`luaL_check›ti⁄
(
L
, 2, 
NULL
, 
modíames
);

675 
lua_I¡egî
 
sz
 = 
	`luaL_›töãgî
(
L
, 3, 
LUAL_BUFFERSIZE
);

676 
ªs
 = 
	`£tvbuf
(
f
, 
NULL
, 
mode
[
›
], (
size_t
)
sz
);

677  
	`luaL_fûîesu…
(
L
, 
ªs
 =0, 
NULL
);

678 
	}
}

682 
	$io_Êush
 (
lua_Sèã
 *
L
) {

683  
	`luaL_fûîesu…
(
L
, 
	`fÊush
(
	`gëiofûe
(L, 
IO_OUTPUT
)Ë=0, 
NULL
);

684 
	}
}

687 
	$f_Êush
 (
lua_Sèã
 *
L
) {

688  
	`luaL_fûîesu…
(
L
, 
	`fÊush
(
	`tofûe
(L)Ë=0, 
NULL
);

689 
	}
}

695 c⁄° 
luaL_Reg
 
	giﬁib
[] = {

696 {"˛o£", 
io_˛o£
},

697 {"Êush", 
io_Êush
},

698 {"öput", 
io_öput
},

699 {"löes", 
io_löes
},

700 {"›í", 
io_›í
},

701 {"ouçut", 
io_ouçut
},

702 {"p›í", 
io_p›í
},

703 {"ªad", 
io_ªad
},

704 {"tmpfûe", 
io_tmpfûe
},

705 {"ty≥", 
io_ty≥
},

706 {"wrôe", 
io_wrôe
},

707 {
NULL
, NULL}

714 c⁄° 
luaL_Reg
 
	gÊib
[] = {

715 {"˛o£", 
io_˛o£
},

716 {"Êush", 
f_Êush
},

717 {"löes", 
f_löes
},

718 {"ªad", 
f_ªad
},

719 {"£ek", 
f_£ek
},

720 {"£tvbuf", 
f_£tvbuf
},

721 {"wrôe", 
f_wrôe
},

722 {"__gc", 
f_gc
},

723 {"__to°rög", 
f_to°rög
},

724 {
NULL
, NULL}

728 
	$¸óãmëa
 (
lua_Sèã
 *
L
) {

729 
	`luaL_√wmë©abÀ
(
L
, 
LUA_FILEHANDLE
);

730 
	`lua_pushvÆue
(
L
, -1);

731 
	`lua_£tfõld
(
L
, -2, "__index");

732 
	`luaL_£tfuncs
(
L
, 
Êib
, 0);

733 
	`lua_p›
(
L
, 1);

734 
	}
}

740 
	$io_no˛o£
 (
lua_Sèã
 *
L
) {

741 
LSåóm
 *
p
 = 
	`tﬁ°ªam
(
L
);

742 
p
->
˛o£f
 = &
io_no˛o£
;

743 
	`lua_pushnû
(
L
);

744 
	`lua_pushlôîÆ
(
L
, "cannot close standard file");

746 
	}
}

749 
	$¸óã°dfûe
 (
lua_Sèã
 *
L
, 
FILE
 *
f
, c⁄° *
k
,

750 c⁄° *
‚ame
) {

751 
LSåóm
 *
p
 = 
	`√w¥efûe
(
L
);

752 
p
->
f
 = f;

753 
p
->
˛o£f
 = &
io_no˛o£
;

754 i‡(
k
 !
NULL
) {

755 
	`lua_pushvÆue
(
L
, -1);

756 
	`lua_£tfõld
(
L
, 
LUA_REGISTRYINDEX
, 
k
);

758 
	`lua_£tfõld
(
L
, -2, 
‚ame
);

759 
	}
}

762 
LUAMOD_API
 
	$lua›í_io
 (
lua_Sèã
 *
L
) {

763 
	`luaL_√wlib
(
L
, 
iﬁib
);

764 
	`¸óãmëa
(
L
);

766 
	`¸óã°dfûe
(
L
, 
°dö
, 
IO_INPUT
, "stdin");

767 
	`¸óã°dfûe
(
L
, 
°dout
, 
IO_OUTPUT
, "stdout");

768 
	`¸óã°dfûe
(
L
, 
°dîr
, 
NULL
, "stderr");

770 
	}
}

	@lib/lua/lua-5.3.4/src/llex.c

7 
	#Œex_c


	)

8 
	#LUA_CORE


	)

10 
	~"Õªfix.h
"

13 
	~<loˇÀ.h
>

14 
	~<°rög.h
>

16 
	~"lua.h
"

18 
	~"l˘y≥.h
"

19 
	~"ldebug.h
"

20 
	~"ldo.h
"

21 
	~"lgc.h
"

22 
	~"Œex.h
"

23 
	~"lobje˘.h
"

24 
	~"Õ¨£r.h
"

25 
	~"l°©e.h
"

26 
	~"l°rög.h
"

27 
	~"…abÀ.h
"

28 
	~"lzio.h
"

32 
	#√xt
(
ls
Ë÷s->
cuºít
 = 
	`zgëc
÷s->
z
))

	)

36 
	#cuºIsNewlöe
(
ls
Ë÷s->
cuºít
 ='\n' ||Üs->cuºíà='\r')

	)

40 c⁄° *c⁄° 
	gluaX_tokís
 [] = {

51 
	#ßve_™d_√xt
(
ls
Ë(
	`ßve
÷s,Üs->
cuºít
), 
	`√xt
÷s))

	)

54 
l_n‹ë
 
Àxîr‹
 (
LexSèã
 *
ls
, c⁄° *
msg
, 
tokí
);

57 
	$ßve
 (
LexSèã
 *
ls
, 
c
) {

58 
Mbuf„r
 *
b
 = 
ls
->
buff
;

59 i‡(
	`luaZ_bufÊí
(
b
Ë+ 1 > 
	`luaZ_sizebuf„r
(b)) {

60 
size_t
 
√wsize
;

61 i‡(
	`luaZ_sizebuf„r
(
b
Ë>
MAX_SIZE
/2)

62 
	`Àxîr‹
(
ls
, "lexicalÉlementÅooÜong", 0);

63 
√wsize
 = 
	`luaZ_sizebuf„r
(
b
) * 2;

64 
	`luaZ_ªsizebuf„r
(
ls
->
L
, 
b
, 
√wsize
);

66 
b
->
buf„r
[
	`luaZ_bufÊí
(b)++] = 
	`ˇ°
(, 
c
);

67 
	}
}

70 
	$luaX_öô
 (
lua_Sèã
 *
L
) {

71 
i
;

72 
TSåög
 *
e
 = 
	`luaS_√wlôîÆ
(
L
, 
LUA_ENV
);

73 
	`luaC_fix
(
L
, 
	`obj2gco
(
e
));

74 
i
=0; i<
NUM_RESERVED
; i++) {

75 
TSåög
 *
ts
 = 
	`luaS_√w
(
L
, 
luaX_tokís
[
i
]);

76 
	`luaC_fix
(
L
, 
	`obj2gco
(
ts
));

77 
ts
->
exåa
 = 
	`ˇ°_byã
(
i
+1);

79 
	}
}

82 c⁄° *
	$luaX_tokí2°r
 (
LexSèã
 *
ls
, 
tokí
) {

83 i‡(
tokí
 < 
FIRST_RESERVED
) {

84 
	`lua_as£π
(
tokí
 =
	`ˇ°_uch¨
(token));

85  
	`luaO_pushf°rög
(
ls
->
L
, "'%c'", 
tokí
);

88 c⁄° *
s
 = 
luaX_tokís
[
tokí
 - 
FIRST_RESERVED
];

89 i‡(
tokí
 < 
TK_EOS
)

90  
	`luaO_pushf°rög
(
ls
->
L
, "'%s'", 
s
);

92  
s
;

94 
	}
}

97 c⁄° *
	$txtTokí
 (
LexSèã
 *
ls
, 
tokí
) {

98 
tokí
) {

99 
TK_NAME
: 
TK_STRING
:

100 
TK_FLT
: 
TK_INT
:

101 
	`ßve
(
ls
, '\0');

102  
	`luaO_pushf°rög
(
ls
->
L
, "'%s'", 
	`luaZ_buf„r
÷s->
buff
));

104  
	`luaX_tokí2°r
(
ls
, 
tokí
);

106 
	}
}

109 
l_n‹ë
 
	$Àxîr‹
 (
LexSèã
 *
ls
, c⁄° *
msg
, 
tokí
) {

110 
msg
 = 
	`luaG_addöfo
(
ls
->
L
, msg,Üs->
sour˚
,Üs->
löíumbî
);

111 i‡(
tokí
)

112 
	`luaO_pushf°rög
(
ls
->
L
, "%†√¨ %s", 
msg
, 
	`txtTokí
÷s, 
tokí
));

113 
	`luaD_throw
(
ls
->
L
, 
LUA_ERRSYNTAX
);

114 
	}
}

117 
l_n‹ë
 
	$luaX_sy¡axîr‹
 (
LexSèã
 *
ls
, c⁄° *
msg
) {

118 
	`Àxîr‹
(
ls
, 
msg
,Üs->
t
.
tokí
);

119 
	}
}

127 
TSåög
 *
	$luaX_√w°rög
 (
LexSèã
 *
ls
, c⁄° *
°r
, 
size_t
 
l
) {

128 
lua_Sèã
 *
L
 = 
ls
->L;

129 
TVÆue
 *
o
;

130 
TSåög
 *
ts
 = 
	`luaS_√wl°r
(
L
, 
°r
, 
l
);

131 
	`£tsvÆue2s
(
L
, L->
t›
++, 
ts
);

132 
o
 = 
	`luaH_£t
(
L
, 
ls
->
h
, L->
t›
 - 1);

133 i‡(
	`âi¢û
(
o
)) {

136 
	`£tbvÆue
(
o
, 1);

137 
	`luaC_checkGC
(
L
);

140 
ts
 = 
	`tsvÆue
(
	`key‰omvÆ
(
o
));

142 
L
->
t›
--;

143  
ts
;

144 
	}
}

151 
	$ö˛öíumbî
 (
LexSèã
 *
ls
) {

152 
ﬁd
 = 
ls
->
cuºít
;

153 
	`lua_as£π
(
	`cuºIsNewlöe
(
ls
));

154 
	`√xt
(
ls
);

155 i‡(
	`cuºIsNewlöe
(
ls
Ë&&Üs->
cuºít
 !
ﬁd
)

156 
	`√xt
(
ls
);

157 i‡(++
ls
->
löíumbî
 >
MAX_INT
)

158 
	`Àxîr‹
(
ls
, "chunk hasÅoo manyÜines", 0);

159 
	}
}

162 
	$luaX_£töput
 (
lua_Sèã
 *
L
, 
LexSèã
 *
ls
, 
ZIO
 *
z
, 
TSåög
 *
sour˚
,

163 
fú°ch¨
) {

164 
ls
->
t
.
tokí
 = 0;

165 
ls
->
L
 = L;

166 
ls
->
cuºít
 = 
fú°ch¨
;

167 
ls
->
lookahód
.
tokí
 = 
TK_EOS
;

168 
ls
->
z
 = z;

169 
ls
->
fs
 = 
NULL
;

170 
ls
->
löíumbî
 = 1;

171 
ls
->
œ°löe
 = 1;

172 
ls
->
sour˚
 = source;

173 
ls
->
ívn
 = 
	`luaS_√wlôîÆ
(
L
, 
LUA_ENV
);

174 
	`luaZ_ªsizebuf„r
(
ls
->
L
,Üs->
buff
, 
LUA_MINBUFFER
);

175 
	}
}

186 
	$check_√xt1
 (
LexSèã
 *
ls
, 
c
) {

187 i‡(
ls
->
cuºít
 =
c
) {

188 
	`√xt
(
ls
);

192 
	}
}

199 
	$check_√xt2
 (
LexSèã
 *
ls
, c⁄° *
£t
) {

200 
	`lua_as£π
(
£t
[2] == '\0');

201 i‡(
ls
->
cuºít
 =
£t
[0] ||Üs->current == set[1]) {

202 
	`ßve_™d_√xt
(
ls
);

206 
	}
}

214 
	$ªad_numîÆ
 (
LexSèã
 *
ls
, 
SemInfo
 *
£möfo
) {

215 
TVÆue
 
obj
;

216 c⁄° *
expo
 = "Ee";

217 
fú°
 = 
ls
->
cuºít
;

218 
	`lua_as£π
(
	`lisdigô
(
ls
->
cuºít
));

219 
	`ßve_™d_√xt
(
ls
);

220 i‡(
fú°
 ='0' && 
	`check_√xt2
(
ls
, "xX"))

221 
expo
 = "Pp";

223 i‡(
	`check_√xt2
(
ls
, 
expo
))

224 
	`check_√xt2
(
ls
, "-+");

225 i‡(
	`lisxdigô
(
ls
->
cuºít
))

226 
	`ßve_™d_√xt
(
ls
);

227 i‡(
ls
->
cuºít
 == '.')

228 
	`ßve_™d_√xt
(
ls
);

231 
	`ßve
(
ls
, '\0');

232 i‡(
	`luaO_°r2num
(
	`luaZ_buf„r
(
ls
->
buff
), &
obj
) == 0)

233 
	`Àxîr‹
(
ls
, "mÆf‹medÇumbî", 
TK_FLT
);

234 i‡(
	`âisöãgî
(&
obj
)) {

235 
£möfo
->
i
 = 
	`ivÆue
(&
obj
);

236  
TK_INT
;

239 
	`lua_as£π
(
	`âisÊﬂt
(&
obj
));

240 
£möfo
->
r
 = 
	`ÊtvÆue
(&
obj
);

241  
TK_FLT
;

243 
	}
}

251 
	$skù_£p
 (
LexSèã
 *
ls
) {

252 
cou¡
 = 0;

253 
s
 = 
ls
->
cuºít
;

254 
	`lua_as£π
(
s
 == '[' || s == ']');

255 
	`ßve_™d_√xt
(
ls
);

256 
ls
->
cuºít
 == '=') {

257 
	`ßve_™d_√xt
(
ls
);

258 
cou¡
++;

260  (
ls
->
cuºít
 =
s
Ë? 
cou¡
 : (-count) - 1;

261 
	}
}

264 
	$ªad_l⁄g_°rög
 (
LexSèã
 *
ls
, 
SemInfo
 *
£möfo
, 
£p
) {

265 
löe
 = 
ls
->
löíumbî
;

266 
	`ßve_™d_√xt
(
ls
);

267 i‡(
	`cuºIsNewlöe
(
ls
))

268 
	`ö˛öíumbî
(
ls
);

270 
ls
->
cuºít
) {

271 
EOZ
: {

272 c⁄° *
wh©
 = (
£möfo
 ? "string" : "comment");

273 c⁄° *
msg
 = 
	`luaO_pushf°rög
(
ls
->
L
,

274 "unföishedÜ⁄g %†(°¨tögáàlöê%d)", 
wh©
, 
löe
);

275 
	`Àxîr‹
(
ls
, 
msg
, 
TK_EOS
);

279 i‡(
	`skù_£p
(
ls
Ë=
£p
) {

280 
	`ßve_™d_√xt
(
ls
);

281 
ídlo›
;

286 
	`ßve
(
ls
, '\n');

287 
	`ö˛öíumbî
(
ls
);

288 i‡(!
£möfo
Ë
	`luaZ_ª£tbuf„r
(
ls
->
buff
);

292 i‡(
£möfo
Ë
	`ßve_™d_√xt
(
ls
);

293 
	`√xt
(
ls
);

296 } 
ídlo›
:

297 i‡(
£möfo
)

298 
£möfo
->
ts
 = 
	`luaX_√w°rög
(
ls
, 
	`luaZ_buf„r
÷s->
buff
Ë+ (2 + 
£p
),

299 
	`luaZ_bufÊí
(
ls
->
buff
Ë- 2*(2 + 
£p
));

300 
	}
}

303 
	$esccheck
 (
LexSèã
 *
ls
, 
c
, c⁄° *
msg
) {

304 i‡(!
c
) {

305 i‡(
ls
->
cuºít
 !
EOZ
)

306 
	`ßve_™d_√xt
(
ls
);

307 
	`Àxîr‹
(
ls
, 
msg
, 
TK_STRING
);

309 
	}
}

312 
	$gëhexa
 (
LexSèã
 *
ls
) {

313 
	`ßve_™d_√xt
(
ls
);

314 
	`esccheck
 (
ls
, 
	`lisxdigô
÷s->
cuºít
), "hexadecimal digitÉxpected");

315  
	`luaO_hexavÆue
(
ls
->
cuºít
);

316 
	}
}

319 
	$ªadhex´sc
 (
LexSèã
 *
ls
) {

320 
r
 = 
	`gëhexa
(
ls
);

321 
r
 = (∏<< 4Ë+ 
	`gëhexa
(
ls
);

322 
	`luaZ_buf‰emove
(
ls
->
buff
, 2);

323  
r
;

324 
	}
}

327 
	$ªadutf8esc
 (
LexSèã
 *
ls
) {

328 
r
;

329 
i
 = 4;

330 
	`ßve_™d_√xt
(
ls
);

331 
	`esccheck
(
ls
,Üs->
cuºít
 == '{', "missing '{'");

332 
r
 = 
	`gëhexa
(
ls
);

333 (
	`ßve_™d_√xt
(
ls
), 
	`lisxdigô
÷s->
cuºít
))) {

334 
i
++;

335 
r
 = (∏<< 4Ë+ 
	`luaO_hexavÆue
(
ls
->
cuºít
);

336 
	`esccheck
(
ls
, 
r
 <= 0x10FFFF, "UTF-8 valueÅooÜarge");

338 
	`esccheck
(
ls
,Üs->
cuºít
 == '}', "missing '}'");

339 
	`√xt
(
ls
);

340 
	`luaZ_buf‰emove
(
ls
->
buff
, 
i
);

341  
r
;

342 
	}
}

345 
	$utf8esc
 (
LexSèã
 *
ls
) {

346 
buff
[
UTF8BUFFSZ
];

347 
n
 = 
	`luaO_utf8esc
(
buff
, 
	`ªadutf8esc
(
ls
));

348 ; 
n
 > 0;Ç--)

349 
	`ßve
(
ls
, 
buff
[
UTF8BUFFSZ
 - 
n
]);

350 
	}
}

353 
	$ªadde˚sc
 (
LexSèã
 *
ls
) {

354 
i
;

355 
r
 = 0;

356 
i
 = 0; i < 3 && 
	`lisdigô
(
ls
->
cuºít
); i++) {

357 
r
 = 10*∏+ 
ls
->
cuºít
 - '0';

358 
	`ßve_™d_√xt
(
ls
);

360 
	`esccheck
(
ls
, 
r
 <
UCHAR_MAX
, "decimalÉscapeÅooÜarge");

361 
	`luaZ_buf‰emove
(
ls
->
buff
, 
i
);

362  
r
;

363 
	}
}

366 
	$ªad_°rög
 (
LexSèã
 *
ls
, 
dñ
, 
SemInfo
 *
£möfo
) {

367 
	`ßve_™d_√xt
(
ls
);

368 
ls
->
cuºít
 !
dñ
) {

369 
ls
->
cuºít
) {

370 
EOZ
:

371 
	`Àxîr‹
(
ls
, "unföished såög", 
TK_EOS
);

375 
	`Àxîr‹
(
ls
, "unföished såög", 
TK_STRING
);

378 
c
;

379 
	`ßve_™d_√xt
(
ls
);

380 
ls
->
cuºít
) {

381 'a': 
c
 = '\a'; 
ªad_ßve
;

382 'b': 
c
 = '\b'; 
ªad_ßve
;

383 'f': 
c
 = '\f'; 
ªad_ßve
;

384 'n': 
c
 = '\n'; 
ªad_ßve
;

385 'r': 
c
 = '\r'; 
ªad_ßve
;

386 't': 
c
 = '\t'; 
ªad_ßve
;

387 'v': 
c
 = '\v'; 
ªad_ßve
;

388 'x': 
c
 = 
	`ªadhex´sc
(
ls
); 
ªad_ßve
;

389 'u': 
	`utf8esc
(
ls
); 
no_ßve
;

391 
	`ö˛öíumbî
(
ls
); 
c
 = '\n'; 
⁄ly_ßve
;

393 
c
 = 
ls
->
cuºít
; 
ªad_ßve
;

394 
EOZ
: 
no_ßve
;

396 
	`luaZ_buf‰emove
(
ls
->
buff
, 1);

397 
	`√xt
(
ls
);

398 
	`lis•a˚
(
ls
->
cuºít
)) {

399 i‡(
	`cuºIsNewlöe
(
ls
)Ë
	`ö˛öíumbî
(ls);

400 
	`√xt
(
ls
);

402 
no_ßve
;

405 
	`esccheck
(
ls
, 
	`lisdigô
÷s->
cuºít
), "invalidÉscape sequence");

406 
c
 = 
	`ªadde˚sc
(
ls
);

407 
⁄ly_ßve
;

410 
ªad_ßve
:

411 
	`√xt
(
ls
);

413 
⁄ly_ßve
:

414 
	`luaZ_buf‰emove
(
ls
->
buff
, 1);

415 
	`ßve
(
ls
, 
c
);

417 
no_ßve
: ;

420 
	`ßve_™d_√xt
(
ls
);

423 
	`ßve_™d_√xt
(
ls
);

424 
£möfo
->
ts
 = 
	`luaX_√w°rög
(
ls
, 
	`luaZ_buf„r
÷s->
buff
) + 1,

425 
	`luaZ_bufÊí
(
ls
->
buff
) - 2);

426 
	}
}

429 
	$Œex
 (
LexSèã
 *
ls
, 
SemInfo
 *
£möfo
) {

430 
	`luaZ_ª£tbuf„r
(
ls
->
buff
);

432 
ls
->
cuºít
) {

434 
	`ö˛öíumbî
(
ls
);

438 
	`√xt
(
ls
);

442 
	`√xt
(
ls
);

443 i‡(
ls
->
cuºít
 != '-')  '-';

445 
	`√xt
(
ls
);

446 i‡(
ls
->
cuºít
 == '[') {

447 
£p
 = 
	`skù_£p
(
ls
);

448 
	`luaZ_ª£tbuf„r
(
ls
->
buff
);

449 i‡(
£p
 >= 0) {

450 
	`ªad_l⁄g_°rög
(
ls
, 
NULL
, 
£p
);

451 
	`luaZ_ª£tbuf„r
(
ls
->
buff
);

456 !
	`cuºIsNewlöe
(
ls
Ë&&Üs->
cuºít
 !
EOZ
)

457 
	`√xt
(
ls
);

461 
£p
 = 
	`skù_£p
(
ls
);

462 i‡(
£p
 >= 0) {

463 
	`ªad_l⁄g_°rög
(
ls
, 
£möfo
, 
£p
);

464  
TK_STRING
;

466 i‡(
£p
 != -1)

467 
	`Àxîr‹
(
ls
, "övÆidÜ⁄g såög dñimôî", 
TK_STRING
);

471 
	`√xt
(
ls
);

472 i‡(
	`check_√xt1
(
ls
, '=')Ë 
TK_EQ
;

476 
	`√xt
(
ls
);

477 i‡(
	`check_√xt1
(
ls
, '=')Ë 
TK_LE
;

478 i‡(
	`check_√xt1
(
ls
, '<')Ë 
TK_SHL
;

482 
	`√xt
(
ls
);

483 i‡(
	`check_√xt1
(
ls
, '=')Ë 
TK_GE
;

484 i‡(
	`check_√xt1
(
ls
, '>')Ë 
TK_SHR
;

488 
	`√xt
(
ls
);

489 i‡(
	`check_√xt1
(
ls
, '/')Ë 
TK_IDIV
;

493 
	`√xt
(
ls
);

494 i‡(
	`check_√xt1
(
ls
, '=')Ë 
TK_NE
;

498 
	`√xt
(
ls
);

499 i‡(
	`check_√xt1
(
ls
, ':')Ë 
TK_DBCOLON
;

503 
	`ªad_°rög
(
ls
,Üs->
cuºít
, 
£möfo
);

504  
TK_STRING
;

507 
	`ßve_™d_√xt
(
ls
);

508 i‡(
	`check_√xt1
(
ls
, '.')) {

509 i‡(
	`check_√xt1
(
ls
, '.'))

510  
TK_DOTS
;

511  
TK_CONCAT
;

513 i‡(!
	`lisdigô
(
ls
->
cuºít
))  '.';

514  
	`ªad_numîÆ
(
ls
, 
£möfo
);

518  
	`ªad_numîÆ
(
ls
, 
£möfo
);

520 
EOZ
: {

521  
TK_EOS
;

524 i‡(
	`li¶Æpha
(
ls
->
cuºít
)) {

525 
TSåög
 *
ts
;

527 
	`ßve_™d_√xt
(
ls
);

528 } 
	`li¶Ænum
(
ls
->
cuºít
));

529 
ts
 = 
	`luaX_√w°rög
(
ls
, 
	`luaZ_buf„r
÷s->
buff
),

530 
	`luaZ_bufÊí
(
ls
->
buff
));

531 
£möfo
->
ts
 =Ås;

532 i‡(
	`i§e£rved
(
ts
))

533  
ts
->
exåa
 - 1 + 
FIRST_RESERVED
;

535  
TK_NAME
;

539 
c
 = 
ls
->
cuºít
;

540 
	`√xt
(
ls
);

541  
c
;

546 
	}
}

549 
	$luaX_√xt
 (
LexSèã
 *
ls
) {

550 
ls
->
œ°löe
 =Üs->
löíumbî
;

551 i‡(
ls
->
lookahód
.
tokí
 !
TK_EOS
) {

552 
ls
->
t
 =Üs->
lookahód
;

553 
ls
->
lookahód
.
tokí
 = 
TK_EOS
;

556 
ls
->
t
.
tokí
 = 
	`Œex
÷s, &ls->t.
£möfo
);

557 
	}
}

560 
	$luaX_lookahód
 (
LexSèã
 *
ls
) {

561 
	`lua_as£π
(
ls
->
lookahód
.
tokí
 =
TK_EOS
);

562 
ls
->
lookahód
.
tokí
 = 
	`Œex
÷s, &ls->lookahód.
£möfo
);

563  
ls
->
lookahód
.
tokí
;

564 
	}
}

	@lib/lua/lua-5.3.4/src/llex.h

7 #i‚de‡
Œex_h


8 
	#Œex_h


	)

10 
	~"lobje˘.h
"

11 
	~"lzio.h
"

14 
	#FIRST_RESERVED
 257

	)

17 #i‡!
deföed
(
LUA_ENV
)

18 
	#LUA_ENV
 "_ENV"

	)

26 
	eRESERVED
 {

28 
	mTK_AND
 = 
FIRST_RESERVED
, 
	mTK_BREAK
,

29 
	mTK_DO
, 
	mTK_ELSE
, 
	mTK_ELSEIF
, 
	mTK_END
, 
	mTK_FALSE
, 
	mTK_FOR
, 
	mTK_FUNCTION
,

30 
	mTK_GOTO
, 
	mTK_IF
, 
	mTK_IN
, 
	mTK_LOCAL
, 
	mTK_NIL
, 
	mTK_NOT
, 
	mTK_OR
, 
	mTK_REPEAT
,

31 
	mTK_RETURN
, 
	mTK_THEN
, 
	mTK_TRUE
, 
	mTK_UNTIL
, 
	mTK_WHILE
,

33 
	mTK_IDIV
, 
	mTK_CONCAT
, 
	mTK_DOTS
, 
	mTK_EQ
, 
	mTK_GE
, 
	mTK_LE
, 
	mTK_NE
,

34 
	mTK_SHL
, 
	mTK_SHR
,

35 
	mTK_DBCOLON
, 
	mTK_EOS
,

36 
	mTK_FLT
, 
	mTK_INT
, 
	mTK_NAME
, 
	mTK_STRING


40 
	#NUM_RESERVED
 (
	`ˇ°
(, 
TK_WHILE
-
FIRST_RESERVED
+1))

	)

44 
lua_Numbî
 
	mr
;

45 
lua_I¡egî
 
	mi
;

46 
TSåög
 *
	mts
;

47 } 
	tSemInfo
;

50 
	sTokí
 {

51 
	mtokí
;

52 
SemInfo
 
	m£möfo
;

53 } 
	tTokí
;

58 
	sLexSèã
 {

59 
	mcuºít
;

60 
	mlöíumbî
;

61 
	mœ°löe
;

62 
Tokí
 
	mt
;

63 
Tokí
 
	mlookahód
;

64 
FuncSèã
 *
	mfs
;

65 
lua_Sèã
 *
	mL
;

66 
ZIO
 *
	mz
;

67 
Mbuf„r
 *
	mbuff
;

68 
TabÀ
 *
	mh
;

69 
Dynd©a
 *
	mdyd
;

70 
TSåög
 *
	msour˚
;

71 
TSåög
 *
	mívn
;

72 } 
	tLexSèã
;

75 
LUAI_FUNC
 
luaX_öô
 (
lua_Sèã
 *
L
);

76 
LUAI_FUNC
 
luaX_£töput
 (
lua_Sèã
 *
L
, 
LexSèã
 *
ls
, 
ZIO
 *
z
,

77 
TSåög
 *
sour˚
, 
fú°ch¨
);

78 
LUAI_FUNC
 
TSåög
 *
luaX_√w°rög
 (
LexSèã
 *
ls
, c⁄° *
°r
, 
size_t
 
l
);

79 
LUAI_FUNC
 
luaX_√xt
 (
LexSèã
 *
ls
);

80 
LUAI_FUNC
 
luaX_lookahód
 (
LexSèã
 *
ls
);

81 
LUAI_FUNC
 
l_n‹ë
 
luaX_sy¡axîr‹
 (
LexSèã
 *
ls
, c⁄° *
s
);

82 
LUAI_FUNC
 c⁄° *
luaX_tokí2°r
 (
LexSèã
 *
ls
, 
tokí
);

	@lib/lua/lua-5.3.4/src/llimits.h

7 #i‚de‡
Œimôs_h


8 
	#Œimôs_h


	)

11 
	~<limôs.h
>

12 
	~<°ddef.h
>

15 
	~"lua.h
"

22 #i‡
deföed
(
LUAI_MEM
)

23 
LUAI_UMEM
 
	tlu_mem
;

24 
LUAI_MEM
 
	tl_mem
;

25 #ñi‡
LUAI_BITSINT
 >= 32

26 
size_t
 
	tlu_mem
;

27 
±rdiff_t
 
	tl_mem
;

29 
	tlu_mem
;

30 
	tl_mem
;

35 
	tlu_byã
;

39 
	#MAX_SIZET
 ((
size_t
)(~(size_t)0))

	)

42 
	#MAX_SIZE
 ((
size_t
Ë< (
lua_I¡egî
Ë? 
MAX_SIZET
 \

43 : (
size_t
)(
LUA_MAXINTEGER
))

	)

46 
	#MAX_LUMEM
 ((
lu_mem
)(~÷u_mem)0))

	)

48 
	#MAX_LMEM
 ((
l_mem
)(
MAX_LUMEM
 >> 1))

	)

51 
	#MAX_INT
 
INT_MAX


	)

59 
	#poöt2uöt
(
p
Ë(()((
size_t
)’Ë& 
UINT_MAX
))

	)

64 #i‡
deföed
(
LUAI_USER_ALIGNMENT_T
)

65 
LUAI_USER_ALIGNMENT_T
 
	tL_UmaxÆign
;

68 
lua_Numbî
 
	mn
;

69 
	mu
;

70 *
	ms
;

71 
lua_I¡egî
 
	mi
;

72 
	ml
;

73 } 
	tL_UmaxÆign
;

79 
LUAI_UACNUMBER
 
	tl_uacNumbî
;

80 
LUAI_UACINT
 
	tl_uacI¡
;

84 #i‡
deföed
(
lua_as£π
)

85 
	#check_exp
(
c
,
e
Ë(
	`lua_as£π
(c), (e))

	)

87 
	#lua_l⁄gas£π
(
c
Ë((cË? ()0 : 
	`lua_as£π
(0))

	)

89 
	#lua_as£π
(
c
Ë(()0)

	)

90 
	#check_exp
(
c
,
e
Ë”)

	)

91 
	#lua_l⁄gas£π
(
c
Ë(()0)

	)

97 #i‡!
deföed
(
luai_≠icheck
)

98 
	#luai_≠icheck
(
l
,
e
Ë
	`lua_as£π
”)

	)

101 
	#≠i_check
(
l
,
e
,
msg
Ë
	`luai_≠icheck
÷,”Ë&& msg)

	)

105 #i‡!
deföed
(
UNUSED
)

106 
	#UNUSED
(
x
Ë(()(x))

	)

111 
	#ˇ°
(
t
, 
exp
Ë(—)”xp))

	)

113 
	#ˇ°_void
(
i
Ë
	`ˇ°
(, (i))

	)

114 
	#ˇ°_byã
(
i
Ë
	`ˇ°
(
lu_byã
, (i))

	)

115 
	#ˇ°_num
(
i
Ë
	`ˇ°
(
lua_Numbî
, (i))

	)

116 
	#ˇ°_öt
(
i
Ë
	`ˇ°
(, (i))

	)

117 
	#ˇ°_uch¨
(
i
Ë
	`ˇ°
(, (i))

	)

121 #i‡!
deföed
(
l_ˇ°S2U
)

122 
	#l_ˇ°S2U
(
i
Ë((
lua_Unsig√d
)(i))

	)

130 #i‡!
deföed
(
l_ˇ°U2S
)

131 
	#l_ˇ°U2S
(
i
Ë((
lua_I¡egî
)(i))

	)

138 #i‡
deföed
(
__GNUC__
)

139 
	#l_n‹ë
 
	`__©åibuã__
((
n‹ëu∫
))

	)

140 #ñi‡
deföed
(
_MSC_VER
) && _MSC_VER >= 1200

141 
	#l_n‹ë
 
	`__de˛•ec
(
n‹ëu∫
)

	)

143 
	#l_n‹ë
 

	)

152 #i‡!
deföed
(
LUAI_MAXCCALLS
)

153 
	#LUAI_MAXCCALLS
 200

	)

162 #i‡
LUAI_BITSINT
 >= 32

163 
	tIn°ru˘i⁄
;

165 
	tIn°ru˘i⁄
;

176 #i‡!
deföed
(
LUAI_MAXSHORTLEN
)

177 
	#LUAI_MAXSHORTLEN
 40

	)

187 #i‡!
deföed
(
MINSTRTABSIZE
)

188 
	#MINSTRTABSIZE
 128

	)

197 #i‡!
deföed
(
STRCACHE_N
)

198 
	#STRCACHE_N
 53

	)

199 
	#STRCACHE_M
 2

	)

204 #i‡!
deföed
(
LUA_MINBUFFER
)

205 
	#LUA_MINBUFFER
 32

	)

213 #i‡!
deföed
(
lua_lock
)

214 
	#lua_lock
(
L
Ë((Ë0)

	)

215 
	#lua_u∆ock
(
L
Ë((Ë0)

	)

222 #i‡!
deföed
(
luai_thªadyõld
)

223 
	#luai_thªadyõld
(
L
Ë{
	`lua_u∆ock
(L); 
	`lua_lock
(L);}

	)

232 #i‡!
deföed
(
luai_u£r°©e›í
)

233 
	#luai_u£r°©e›í
(
L
Ë(()L)

	)

236 #i‡!
deföed
(
luai_u£r°©e˛o£
)

237 
	#luai_u£r°©e˛o£
(
L
Ë(()L)

	)

240 #i‡!
deföed
(
luai_u£r°©ëhªad
)

241 
	#luai_u£r°©ëhªad
(
L
,
L1
Ë(()L)

	)

244 #i‡!
deföed
(
luai_u£r°©e‰ì
)

245 
	#luai_u£r°©e‰ì
(
L
,
L1
Ë(()L)

	)

248 #i‡!
deföed
(
luai_u£r°©îesume
)

249 
	#luai_u£r°©îesume
(
L
,
n
Ë(()L)

	)

252 #i‡!
deföed
(
luai_u£r°©eyõld
)

253 
	#luai_u£r°©eyõld
(
L
,
n
Ë(()L)

	)

263 #i‡!
deföed
(
luai_numidiv
)

264 
	#luai_numidiv
(
L
,
a
,
b
Ë(()L, 
	`l_Êo‹
(
	`luai_numdiv
(L,a,b)))

	)

268 #i‡!
deföed
(
luai_numdiv
)

269 
	#luai_numdiv
(
L
,
a
,
b
Ë(◊)/(b))

	)

279 #i‡!
deföed
(
luai_nummod
)

280 
	#luai_nummod
(
L
,
a
,
b
,
m
) \

281 { (
m
Ë
	`l_m©h›
(
fmod
)(
a
,
b
); i‡((m)*(bË< 0Ë(mË+(b); }

	)

285 #i‡!
deföed
(
luai_numpow
)

286 
	#luai_numpow
(
L
,
a
,
b
Ë(()L, 
	`l_m©h›
(
pow
)◊,b))

	)

290 #i‡!
deföed
(
luai_numadd
)

291 
	#luai_numadd
(
L
,
a
,
b
Ë(◊)+(b))

	)

292 
	#luai_numsub
(
L
,
a
,
b
Ë(◊)-(b))

	)

293 
	#luai_nummul
(
L
,
a
,
b
Ë(◊)*(b))

	)

294 
	#luai_numunm
(
L
,
a
Ë(-◊))

	)

295 
	#luai_numeq
(
a
,
b
Ë(◊)==(b))

	)

296 
	#luai_num…
(
a
,
b
Ë(◊)<(b))

	)

297 
	#luai_numÀ
(
a
,
b
Ë(◊)<=(b))

	)

298 
	#luai_numi¢™
(
a
Ë(!
	`luai_numeq
(◊), (a)))

	)

308 #i‡!
deföed
(
HARDSTACKTESTS
)

309 
	#c⁄dmove°ack
(
L
,
¥e
,
pos
Ë(()0)

	)

312 
	#c⁄dmove°ack
(
L
,
¥e
,
pos
) \

313 { 
sz_
 = (
L
)->
°acksize
; 
¥e
; 
	`luaD_ªÆloc°ack
((L), sz_); 
pos
; }

	)

316 #i‡!
deföed
(
HARDMEMTESTS
)

317 
	#c⁄dch™gemem
(
L
,
¥e
,
pos
Ë(()0)

	)

319 
	#c⁄dch™gemem
(
L
,
¥e
,
pos
) \

320 { i‡(
	`G
(
L
)->
g¸u¬ög
Ë{ 
¥e
; 
	`luaC_fuŒgc
(L, 0); 
pos
; } }

	)

	@lib/lua/lua-5.3.4/src/lmathlib.c

7 
	#lm©hlib_c


	)

8 
	#LUA_LIB


	)

10 
	~"Õªfix.h
"

13 
	~<°dlib.h
>

14 
	~<m©h.h
>

16 
	~"lua.h
"

18 
	~"œuxlib.h
"

19 
	~"luÆib.h
"

22 #unde‡
PI


23 
	#PI
 (
	`l_m©h›
(3.141592653589793238462643383279502884))

	)

26 #i‡!
deföed
(
l_ønd
)

27 #i‡
deföed
(
LUA_USE_POSIX
)

28 
	#l_ønd
(Ë
	`øndom
()

	)

29 
	#l_§™d
(
x
Ë
	`§™dom
(x)

	)

30 
	#L_RANDMAX
 2147483647

	)

32 
	#l_ønd
(Ë
	`ønd
()

	)

33 
	#l_§™d
(
x
Ë
	`§™d
(x)

	)

34 
	#L_RANDMAX
 
RAND_MAX


	)

39 
	$m©h_abs
 (
lua_Sèã
 *
L
) {

40 i‡(
	`lua_isöãgî
(
L
, 1)) {

41 
lua_I¡egî
 
n
 = 
	`lua_toöãgî
(
L
, 1);

42 i‡(
n
 < 0Ë¿(
lua_I¡egî
)(0u - (
lua_Unsig√d
)n);

43 
	`lua_pushöãgî
(
L
, 
n
);

46 
	`lua_pushnumbî
(
L
, 
	`l_m©h›
(
Ábs
)(
	`luaL_checknumbî
(L, 1)));

48 
	}
}

50 
	$m©h_sö
 (
lua_Sèã
 *
L
) {

51 
	`lua_pushnumbî
(
L
, 
	`l_m©h›
(
sö
)(
	`luaL_checknumbî
(L, 1)));

53 
	}
}

55 
	$m©h_cos
 (
lua_Sèã
 *
L
) {

56 
	`lua_pushnumbî
(
L
, 
	`l_m©h›
(
cos
)(
	`luaL_checknumbî
(L, 1)));

58 
	}
}

60 
	$m©h_èn
 (
lua_Sèã
 *
L
) {

61 
	`lua_pushnumbî
(
L
, 
	`l_m©h›
(
èn
)(
	`luaL_checknumbî
(L, 1)));

63 
	}
}

65 
	$m©h_asö
 (
lua_Sèã
 *
L
) {

66 
	`lua_pushnumbî
(
L
, 
	`l_m©h›
(
asö
)(
	`luaL_checknumbî
(L, 1)));

68 
	}
}

70 
	$m©h_acos
 (
lua_Sèã
 *
L
) {

71 
	`lua_pushnumbî
(
L
, 
	`l_m©h›
(
acos
)(
	`luaL_checknumbî
(L, 1)));

73 
	}
}

75 
	$m©h_©™
 (
lua_Sèã
 *
L
) {

76 
lua_Numbî
 
y
 = 
	`luaL_checknumbî
(
L
, 1);

77 
lua_Numbî
 
x
 = 
	`luaL_›äumbî
(
L
, 2, 1);

78 
	`lua_pushnumbî
(
L
, 
	`l_m©h›
(
©™2
)(
y
, 
x
));

80 
	}
}

83 
	$m©h_toöt
 (
lua_Sèã
 *
L
) {

84 
vÆid
;

85 
lua_I¡egî
 
n
 = 
	`lua_toöãgîx
(
L
, 1, &
vÆid
);

86 i‡(
vÆid
)

87 
	`lua_pushöãgî
(
L
, 
n
);

89 
	`luaL_check™y
(
L
, 1);

90 
	`lua_pushnû
(
L
);

93 
	}
}

96 
	$pushnumöt
 (
lua_Sèã
 *
L
, 
lua_Numbî
 
d
) {

97 
lua_I¡egî
 
n
;

98 i‡(
	`lua_numbîtoöãgî
(
d
, &
n
))

99 
	`lua_pushöãgî
(
L
, 
n
);

101 
	`lua_pushnumbî
(
L
, 
d
);

102 
	}
}

105 
	$m©h_Êo‹
 (
lua_Sèã
 *
L
) {

106 i‡(
	`lua_isöãgî
(
L
, 1))

107 
	`lua_£â›
(
L
, 1);

109 
lua_Numbî
 
d
 = 
	`l_m©h›
(
Êo‹
)(
	`luaL_checknumbî
(
L
, 1));

110 
	`pushnumöt
(
L
, 
d
);

113 
	}
}

116 
	$m©h_˚û
 (
lua_Sèã
 *
L
) {

117 i‡(
	`lua_isöãgî
(
L
, 1))

118 
	`lua_£â›
(
L
, 1);

120 
lua_Numbî
 
d
 = 
	`l_m©h›
(
˚û
)(
	`luaL_checknumbî
(
L
, 1));

121 
	`pushnumöt
(
L
, 
d
);

124 
	}
}

127 
	$m©h_fmod
 (
lua_Sèã
 *
L
) {

128 i‡(
	`lua_isöãgî
(
L
, 1) &&Üua_isinteger(L, 2)) {

129 
lua_I¡egî
 
d
 = 
	`lua_toöãgî
(
L
, 2);

130 i‡((
lua_Unsig√d
)
d
 + 1u <= 1u) {

131 
	`luaL_¨gcheck
(
L
, 
d
 != 0, 2, "zero");

132 
	`lua_pushöãgî
(
L
, 0);

135 
	`lua_pushöãgî
(
L
, 
	`lua_toöãgî
(L, 1Ë% 
d
);

138 
	`lua_pushnumbî
(
L
, 
	`l_m©h›
(
fmod
)(
	`luaL_checknumbî
(L, 1),

139 
	`luaL_checknumbî
(
L
, 2)));

141 
	}
}

149 
	$m©h_modf
 (
lua_Sèã
 *
L
) {

150 i‡(
	`lua_isöãgî
(
L
 ,1)) {

151 
	`lua_£â›
(
L
, 1);

152 
	`lua_pushnumbî
(
L
, 0);

155 
lua_Numbî
 
n
 = 
	`luaL_checknumbî
(
L
, 1);

157 
lua_Numbî
 
ù
 = (
n
 < 0Ë? 
	`l_m©h›
(
˚û
)“Ë:Ü_m©h›(
Êo‹
)(n);

158 
	`pushnumöt
(
L
, 
ù
);

160 
	`lua_pushnumbî
(
L
, (
n
 =
ù
Ë? 
	`l_m©h›
(0.0) : (n - ip));

163 
	}
}

166 
	$m©h_sqπ
 (
lua_Sèã
 *
L
) {

167 
	`lua_pushnumbî
(
L
, 
	`l_m©h›
(
sqπ
)(
	`luaL_checknumbî
(L, 1)));

169 
	}
}

172 
	$m©h_u…
 (
lua_Sèã
 *
L
) {

173 
lua_I¡egî
 
a
 = 
	`luaL_checköãgî
(
L
, 1);

174 
lua_I¡egî
 
b
 = 
	`luaL_checköãgî
(
L
, 2);

175 
	`lua_pushboﬁón
(
L
, (
lua_Unsig√d
)
a
 < (lua_Unsig√d)
b
);

177 
	}
}

179 
	$m©h_log
 (
lua_Sèã
 *
L
) {

180 
lua_Numbî
 
x
 = 
	`luaL_checknumbî
(
L
, 1);

181 
lua_Numbî
 
ªs
;

182 i‡(
	`lua_i¢⁄e‹nû
(
L
, 2))

183 
ªs
 = 
	`l_m©h›
(
log
)(
x
);

185 
lua_Numbî
 
ba£
 = 
	`luaL_checknumbî
(
L
, 2);

186 #i‡!
	`deföed
(
LUA_USE_C89
)

187 i‡(
ba£
 =
	`l_m©h›
(2.0))

188 
ªs
 = 
	`l_m©h›
(
log2
)(
x
); 

190 i‡(
ba£
 =
	`l_m©h›
(10.0))

191 
ªs
 = 
	`l_m©h›
(
log10
)(
x
);

193 
ªs
 = 
	`l_m©h›
(
log
)(
x
)/l_m©h›÷og)(
ba£
);

195 
	`lua_pushnumbî
(
L
, 
ªs
);

197 
	}
}

199 
	$m©h_exp
 (
lua_Sèã
 *
L
) {

200 
	`lua_pushnumbî
(
L
, 
	`l_m©h›
(
exp
)(
	`luaL_checknumbî
(L, 1)));

202 
	}
}

204 
	$m©h_deg
 (
lua_Sèã
 *
L
) {

205 
	`lua_pushnumbî
(
L
, 
	`luaL_checknumbî
(L, 1Ë* (
	`l_m©h›
(180.0Ë/ 
PI
));

207 
	}
}

209 
	$m©h_ød
 (
lua_Sèã
 *
L
) {

210 
	`lua_pushnumbî
(
L
, 
	`luaL_checknumbî
(L, 1Ë* (
PI
 / 
	`l_m©h›
(180.0)));

212 
	}
}

215 
	$m©h_mö
 (
lua_Sèã
 *
L
) {

216 
n
 = 
	`lua_gët›
(
L
);

217 
imö
 = 1;

218 
i
;

219 
	`luaL_¨gcheck
(
L
, 
n
 >= 1, 1, "valueÉxpected");

220 
i
 = 2; i <
n
; i++) {

221 i‡(
	`lua_com∑ª
(
L
, 
i
, 
imö
, 
LUA_OPLT
))

222 
imö
 = 
i
;

224 
	`lua_pushvÆue
(
L
, 
imö
);

226 
	}
}

229 
	$m©h_max
 (
lua_Sèã
 *
L
) {

230 
n
 = 
	`lua_gët›
(
L
);

231 
imax
 = 1;

232 
i
;

233 
	`luaL_¨gcheck
(
L
, 
n
 >= 1, 1, "valueÉxpected");

234 
i
 = 2; i <
n
; i++) {

235 i‡(
	`lua_com∑ª
(
L
, 
imax
, 
i
, 
LUA_OPLT
))

236 
imax
 = 
i
;

238 
	`lua_pushvÆue
(
L
, 
imax
);

240 
	}
}

247 
	$m©h_øndom
 (
lua_Sèã
 *
L
) {

248 
lua_I¡egî
 
low
, 
up
;

249 
r
 = ()
	`l_ønd
(Ë* (1.0 / (()
L_RANDMAX
 + 1.0));

250 
	`lua_gët›
(
L
)) {

252 
	`lua_pushnumbî
(
L
, (
lua_Numbî
)
r
);

256 
low
 = 1;

257 
up
 = 
	`luaL_checköãgî
(
L
, 1);

261 
low
 = 
	`luaL_checköãgî
(
L
, 1);

262 
up
 = 
	`luaL_checköãgî
(
L
, 2);

265 :  
	`luaL_îr‹
(
L
, "wrongÇumber ofárguments");

268 
	`luaL_¨gcheck
(
L
, 
low
 <
up
, 1, "interval isÉmpty");

269 
	`luaL_¨gcheck
(
L
, 
low
 >0 || 
up
 <
LUA_MAXINTEGER
 +Üow, 1,

271 
r
 *()(
up
 - 
low
) + 1.0;

272 
	`lua_pushöãgî
(
L
, (
lua_I¡egî
)
r
 + 
low
);

274 
	}
}

277 
	$m©h_øndom£ed
 (
lua_Sèã
 *
L
) {

278 
	`l_§™d
(()(
lua_I¡egî
)
	`luaL_checknumbî
(
L
, 1));

279 ()
	`l_ønd
();

281 
	}
}

284 
	$m©h_ty≥
 (
lua_Sèã
 *
L
) {

285 i‡(
	`lua_ty≥
(
L
, 1Ë=
LUA_TNUMBER
) {

286 i‡(
	`lua_isöãgî
(
L
, 1))

287 
	`lua_pushlôîÆ
(
L
, "integer");

289 
	`lua_pushlôîÆ
(
L
, "float");

292 
	`luaL_check™y
(
L
, 1);

293 
	`lua_pushnû
(
L
);

296 
	}
}

304 #i‡
deföed
(
LUA_COMPAT_MATHLIB
)

306 
	$m©h_cosh
 (
lua_Sèã
 *
L
) {

307 
	`lua_pushnumbî
(
L
, 
	`l_m©h›
(
cosh
)(
	`luaL_checknumbî
(L, 1)));

309 
	}
}

311 
	$m©h_söh
 (
lua_Sèã
 *
L
) {

312 
	`lua_pushnumbî
(
L
, 
	`l_m©h›
(
söh
)(
	`luaL_checknumbî
(L, 1)));

314 
	}
}

316 
	$m©h_ènh
 (
lua_Sèã
 *
L
) {

317 
	`lua_pushnumbî
(
L
, 
	`l_m©h›
(
ènh
)(
	`luaL_checknumbî
(L, 1)));

319 
	}
}

321 
	$m©h_pow
 (
lua_Sèã
 *
L
) {

322 
lua_Numbî
 
x
 = 
	`luaL_checknumbî
(
L
, 1);

323 
lua_Numbî
 
y
 = 
	`luaL_checknumbî
(
L
, 2);

324 
	`lua_pushnumbî
(
L
, 
	`l_m©h›
(
pow
)(
x
, 
y
));

326 
	}
}

328 
	$m©h_‰exp
 (
lua_Sèã
 *
L
) {

329 
e
;

330 
	`lua_pushnumbî
(
L
, 
	`l_m©h›
(
‰exp
)(
	`luaL_checknumbî
(L, 1), &
e
));

331 
	`lua_pushöãgî
(
L
, 
e
);

333 
	}
}

335 
	$m©h_ldexp
 (
lua_Sèã
 *
L
) {

336 
lua_Numbî
 
x
 = 
	`luaL_checknumbî
(
L
, 1);

337 
ï
 = ()
	`luaL_checköãgî
(
L
, 2);

338 
	`lua_pushnumbî
(
L
, 
	`l_m©h›
(
ldexp
)(
x
, 
ï
));

340 
	}
}

342 
	$m©h_log10
 (
lua_Sèã
 *
L
) {

343 
	`lua_pushnumbî
(
L
, 
	`l_m©h›
(
log10
)(
	`luaL_checknumbî
(L, 1)));

345 
	}
}

352 c⁄° 
luaL_Reg
 
	gm©hlib
[] = {

353 {"abs", 
m©h_abs
},

354 {"acos", 
m©h_acos
},

355 {"asö", 
m©h_asö
},

356 {"©™", 
m©h_©™
},

357 {"˚û", 
m©h_˚û
},

358 {"cos", 
m©h_cos
},

359 {"deg", 
m©h_deg
},

360 {"exp", 
m©h_exp
},

361 {"toöãgî", 
m©h_toöt
},

362 {"Êo‹", 
m©h_Êo‹
},

363 {"fmod", 
m©h_fmod
},

364 {"u…", 
m©h_u…
},

365 {"log", 
m©h_log
},

366 {"max", 
m©h_max
},

367 {"mö", 
m©h_mö
},

368 {"modf", 
m©h_modf
},

369 {"ød", 
m©h_ød
},

370 {"øndom", 
m©h_øndom
},

371 {"øndom£ed", 
m©h_øndom£ed
},

372 {"sö", 
m©h_sö
},

373 {"sqπ", 
m©h_sqπ
},

374 {"èn", 
m©h_èn
},

375 {"ty≥", 
m©h_ty≥
},

376 #i‡
deföed
(
LUA_COMPAT_MATHLIB
)

377 {"©™2", 
m©h_©™
},

378 {"cosh", 
m©h_cosh
},

379 {"söh", 
m©h_söh
},

380 {"ènh", 
m©h_ènh
},

381 {"pow", 
m©h_pow
},

382 {"‰exp", 
m©h_‰exp
},

383 {"ldexp", 
m©h_ldexp
},

384 {"log10", 
m©h_log10
},

387 {"pi", 
NULL
},

388 {"huge", 
NULL
},

389 {"maxöãgî", 
NULL
},

390 {"mööãgî", 
NULL
},

391 {
NULL
, NULL}

398 
LUAMOD_API
 
	$lua›í_m©h
 (
lua_Sèã
 *
L
) {

399 
	`luaL_√wlib
(
L
, 
m©hlib
);

400 
	`lua_pushnumbî
(
L
, 
PI
);

401 
	`lua_£tfõld
(
L
, -2, "pi");

402 
	`lua_pushnumbî
(
L
, (
lua_Numbî
)
HUGE_VAL
);

403 
	`lua_£tfõld
(
L
, -2, "huge");

404 
	`lua_pushöãgî
(
L
, 
LUA_MAXINTEGER
);

405 
	`lua_£tfõld
(
L
, -2, "maxinteger");

406 
	`lua_pushöãgî
(
L
, 
LUA_MININTEGER
);

407 
	`lua_£tfõld
(
L
, -2, "mininteger");

409 
	}
}

	@lib/lua/lua-5.3.4/src/lmem.c

7 
	#lmem_c


	)

8 
	#LUA_CORE


	)

10 
	~"Õªfix.h
"

13 
	~<°ddef.h
>

15 
	~"lua.h
"

17 
	~"ldebug.h
"

18 
	~"ldo.h
"

19 
	~"lgc.h
"

20 
	~"lmem.h
"

21 
	~"lobje˘.h
"

22 
	~"l°©e.h
"

45 
	#MINSIZEARRAY
 4

	)

48 *
	$luaM_growaux_
 (
lua_Sèã
 *
L
, *
block
, *
size
, 
size_t
 
size_ñems
,

49 
limô
, c⁄° *
wh©
) {

50 *
√wblock
;

51 
√wsize
;

52 i‡(*
size
 >
limô
/2) {

53 i‡(*
size
 >
limô
)

54 
	`luaG_ru√º‹
(
L
, "toÿm™y %†÷imô i†%d)", 
wh©
, 
limô
);

55 
√wsize
 = 
limô
;

58 
√wsize
 = (*
size
)*2;

59 i‡(
√wsize
 < 
MINSIZEARRAY
)

60 
√wsize
 = 
MINSIZEARRAY
;

62 
√wblock
 = 
	`luaM_ªÆlocv
(
L
, 
block
, *
size
, 
√wsize
, 
size_ñems
);

63 *
size
 = 
√wsize
;

64  
√wblock
;

65 
	}
}

68 
l_n‹ë
 
	$luaM_toobig
 (
lua_Sèã
 *
L
) {

69 
	`luaG_ru√º‹
(
L
, "memoryállocationÉrror: blockÅoo big");

70 
	}
}

77 *
	$luaM_ªÆloc_
 (
lua_Sèã
 *
L
, *
block
, 
size_t
 
osize
, size_à
nsize
) {

78 *
√wblock
;

79 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

80 
size_t
 
ªÆosize
 = (
block
Ë? 
osize
 : 0;

81 
	`lua_as£π
((
ªÆosize
 =0Ë=(
block
 =
NULL
));

82 #i‡
	`deföed
(
HARDMEMTESTS
)

83 i‡(
nsize
 > 
ªÆosize
 && 
g
->
g¸u¬ög
)

84 
	`luaC_fuŒgc
(
L
, 1);

86 
√wblock
 = (*
g
->
‰óŒoc
)(g->
ud
, 
block
, 
osize
, 
nsize
);

87 i‡(
√wblock
 =
NULL
 && 
nsize
 > 0) {

88 
	`lua_as£π
(
nsize
 > 
ªÆosize
);

89 i‡(
g
->
vîsi⁄
) {

90 
	`luaC_fuŒgc
(
L
, 1);

91 
√wblock
 = (*
g
->
‰óŒoc
)(g->
ud
, 
block
, 
osize
, 
nsize
);

93 i‡(
√wblock
 =
NULL
)

94 
	`luaD_throw
(
L
, 
LUA_ERRMEM
);

96 
	`lua_as£π
((
nsize
 =0Ë=(
√wblock
 =
NULL
));

97 
g
->
GCdebt
 = (g->GCdebà+ 
nsize
Ë- 
ªÆosize
;

98  
√wblock
;

99 
	}
}

	@lib/lua/lua-5.3.4/src/lmem.h

7 #i‚de‡
lmem_h


8 
	#lmem_h


	)

11 
	~<°ddef.h
>

13 
	~"Œimôs.h
"

14 
	~"lua.h
"

30 
	#luaM_ªÆlocv
(
L
,
b
,
⁄
,
n
,
e
) \

31 ((((
n
Ë>(
size_t
Ë&& 
	`ˇ°
(size_t, (n)Ë+ 1 > 
MAX_SIZET
/(
e
)) \

32 ? 
	`luaM_toobig
(
L
Ë: 
	`ˇ°_void
(0)) , \

33 
	`luaM_ªÆloc_
(
L
, (
b
), (
⁄
)*(
e
), (
n
)*”)))

	)

38 
	#luaM_ªÆlocvch¨
(
L
,
b
,
⁄
,
n
) \

39 
	`ˇ°
(*, 
	`luaM_ªÆloc_
(
L
, (
b
), (
⁄
)*(), (
n
)*()))

	)

41 
	#luaM_‰ìmem
(
L
, 
b
, 
s
Ë
	`luaM_ªÆloc_
(L, (b), (s), 0)

	)

42 
	#luaM_‰ì
(
L
, 
b
Ë
	`luaM_ªÆloc_
(L, (b), (*(b)), 0)

	)

43 
	#luaM_‰ì¨øy
(
L
, 
b
, 
n
Ë
	`luaM_ªÆloc_
(L, (b), (n)*(*(b)), 0)

	)

45 
	#luaM_mÆloc
(
L
,
s
Ë
	`luaM_ªÆloc_
(L, 
NULL
, 0, (s))

	)

46 
	#luaM_√w
(
L
,
t
Ë
	`ˇ°
— *, 
	`luaM_mÆloc
(L, —)))

	)

47 
	#luaM_√wve˘‹
(
L
,
n
,
t
) \

48 
	`ˇ°
(
t
 *, 
	`luaM_ªÆlocv
(
L
, 
NULL
, 0, 
n
, —)))

	)

50 
	#luaM_√wobje˘
(
L
,
èg
,
s
Ë
	`luaM_ªÆloc_
(L, 
NULL
,Åag, (s))

	)

52 
	#luaM_growve˘‹
(
L
,
v
,
√Àms
,
size
,
t
,
limô
,
e
) \

53 i‡((
√Àms
)+1 > (
size
)) \

54 ((
v
)=
	`ˇ°
(
t
 *, 
	`luaM_growaux_
(
L
,v,&(
size
),—),
limô
,
e
)))

	)

56 
	#luaM_ªÆlocve˘‹
(
L
, 
v
,
ﬁdn
,
n
,
t
) \

57 ((
v
)=
	`ˇ°
(
t
 *, 
	`luaM_ªÆlocv
(
L
, v, 
ﬁdn
, 
n
, —))))

	)

59 
LUAI_FUNC
 
l_n‹ë
 
luaM_toobig
 (
lua_Sèã
 *
L
);

62 
LUAI_FUNC
 *
luaM_ªÆloc_
 (
lua_Sèã
 *
L
, *
block
, 
size_t
 
ﬁdsize
,

63 
size_t
 
size
);

64 
LUAI_FUNC
 *
luaM_growaux_
 (
lua_Sèã
 *
L
, *
block
, *
size
,

65 
size_t
 
size_ñem
, 
limô
,

66 c⁄° *
wh©
);

	@lib/lua/lua-5.3.4/src/loadlib.c

11 
	#lﬂdlib_c


	)

12 
	#LUA_LIB


	)

14 
	~"Õªfix.h
"

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

19 
	~<°rög.h
>

21 
	~"lua.h
"

23 
	~"œuxlib.h
"

24 
	~"luÆib.h
"

31 #i‡!
deföed
 (
LUA_IGMARK
)

32 
	#LUA_IGMARK
 "-"

	)

42 #i‡!
deföed
(
LUA_CSUBSEP
)

43 
	#LUA_CSUBSEP
 
LUA_DIRSEP


	)

46 #i‡!
deföed
(
LUA_LSUBSEP
)

47 
	#LUA_LSUBSEP
 
LUA_DIRSEP


	)

52 
	#LUA_POF
 "lua›í_"

	)

55 
	#LUA_OFSEP
 "_"

	)

62 c⁄° 
	gCLIBS
 = 0;

64 
	#LIB_FAIL
 "›í"

	)

67 
	#£çrogdú
(
L
Ë(()0)

	)

77 
lsys_u∆ﬂdlib
 (*
lib
);

85 *
lsys_lﬂd
 (
lua_Sèã
 *
L
, c⁄° *
∑th
, 
£eglb
);

92 
lua_CFun˘i⁄
 
lsys_sym
 (
lua_Sèã
 *
L
, *
lib
, c⁄° *
sym
);

97 #i‡
deföed
(
LUA_USE_DLOPEN
)

107 
	~<dlf˙.h
>

114 #i‡
deföed
(
__GNUC__
)

115 
	#ˇ°_func
(
p
Ë(
	`__exãnsi⁄__
 (
lua_CFun˘i⁄
)’))

	)

117 
	#ˇ°_func
(
p
Ë((
lua_CFun˘i⁄
)’))

	)

121 
	$lsys_u∆ﬂdlib
 (*
lib
) {

122 
	`dl˛o£
(
lib
);

123 
	}
}

126 *
	$lsys_lﬂd
 (
lua_Sèã
 *
L
, c⁄° *
∑th
, 
£eglb
) {

127 *
lib
 = 
	`dl›í
(
∑th
, 
RTLD_NOW
 | (
£eglb
 ? 
RTLD_GLOBAL
 : 
RTLD_LOCAL
));

128 i‡(
lib
 =
NULL
Ë
	`lua_push°rög
(
L
, 
	`dÀº‹
());

129  
lib
;

130 
	}
}

133 
lua_CFun˘i⁄
 
	$lsys_sym
 (
lua_Sèã
 *
L
, *
lib
, c⁄° *
sym
) {

134 
lua_CFun˘i⁄
 
f
 = 
	`ˇ°_func
(
	`dlsym
(
lib
, 
sym
));

135 i‡(
f
 =
NULL
Ë
	`lua_push°rög
(
L
, 
	`dÀº‹
());

136  
f
;

137 
	}
}

143 #ñi‡
deföed
(
LUA_DL_DLL
)

150 
	~<wödows.h
>

156 #i‡!
deföed
(
LUA_LLE_FLAGS
)

157 
	#LUA_LLE_FLAGS
 0

	)

161 #unde‡
£çrogdú


168 
	$£çrogdú
 (
lua_Sèã
 *
L
) {

169 
buff
[
MAX_PATH
 + 1];

170 *
lb
;

171 
DWORD
 
nsize
 = (
buff
)/();

172 
DWORD
 
n
 = 
	`GëModuÀFûeNameA
(
NULL
, 
buff
, 
nsize
);

173 i‡(
n
 =0 ||Ç =
nsize
 || (
lb
 = 
	`°ºchr
(
buff
, '\\')Ë=
NULL
)

174 
	`luaL_îr‹
(
L
, "unableÅo get ModuleFileName");

176 *
lb
 = '\0';

177 
	`luaL_gsub
(
L
, 
	`lua_to°rög
(L, -1), 
LUA_EXEC_DIR
, 
buff
);

178 
	`lua_ªmove
(
L
, -2);

180 
	}
}

185 
	$pushîr‹
 (
lua_Sèã
 *
L
) {

186 
îr‹
 = 
	`GëLa°Eº‹
();

187 
buf„r
[128];

188 i‡(
	`F‹m©MesßgeA
(
FORMAT_MESSAGE_IGNORE_INSERTS
 | 
FORMAT_MESSAGE_FROM_SYSTEM
,

189 
NULL
, 
îr‹
, 0, 
buf„r
, (buffer)/(), NULL))

190 
	`lua_push°rög
(
L
, 
buf„r
);

192 
	`lua_pushf°rög
(
L
, "sy°emÉº‹ %d\n", 
îr‹
);

193 
	}
}

195 
	$lsys_u∆ﬂdlib
 (*
lib
) {

196 
	`FªeLibøry
((
HMODULE
)
lib
);

197 
	}
}

200 *
	$lsys_lﬂd
 (
lua_Sèã
 *
L
, c⁄° *
∑th
, 
£eglb
) {

201 
HMODULE
 
lib
 = 
	`LﬂdLibøryExA
(
∑th
, 
NULL
, 
LUA_LLE_FLAGS
);

202 ()(
£eglb
);

203 i‡(
lib
 =
NULL
Ë
	`pushîr‹
(
L
);

204  
lib
;

205 
	}
}

208 
lua_CFun˘i⁄
 
	$lsys_sym
 (
lua_Sèã
 *
L
, *
lib
, c⁄° *
sym
) {

209 
lua_CFun˘i⁄
 
f
 = (lua_CFun˘i⁄)
	`GëProcAddªss
((
HMODULE
)
lib
, 
sym
);

210 i‡(
f
 =
NULL
Ë
	`pushîr‹
(
L
);

211  
f
;

212 
	}
}

224 #unde‡
LIB_FAIL


225 
	#LIB_FAIL
 "ab£¡"

	)

228 
	#DLMSG
 "dy«mi¯libørõ†nŸÉ«bÀd; check you∏Lu®ö°Æœti⁄"

	)

231 
	$lsys_u∆ﬂdlib
 (*
lib
) {

232 ()(
lib
);

233 
	}
}

236 *
	$lsys_lﬂd
 (
lua_Sèã
 *
L
, c⁄° *
∑th
, 
£eglb
) {

237 ()(
∑th
); ()(
£eglb
);

238 
	`lua_pushlôîÆ
(
L
, 
DLMSG
);

239  
NULL
;

240 
	}
}

243 
lua_CFun˘i⁄
 
	$lsys_sym
 (
lua_Sèã
 *
L
, *
lib
, c⁄° *
sym
) {

244 ()(
lib
); ()(
sym
);

245 
	`lua_pushlôîÆ
(
L
, 
DLMSG
);

246  
NULL
;

247 
	}
}

263 #i‡!
deföed
(
LUA_PATH_VAR
)

264 
	#LUA_PATH_VAR
 "LUA_PATH"

	)

267 #i‡!
deföed
(
LUA_CPATH_VAR
)

268 
	#LUA_CPATH_VAR
 "LUA_CPATH"

	)

272 
	#AUXMARK
 "\1"

	)

278 
	$n€nv
 (
lua_Sèã
 *
L
) {

279 
b
;

280 
	`lua_gëfõld
(
L
, 
LUA_REGISTRYINDEX
, "LUA_NOENV");

281 
b
 = 
	`lua_toboﬁón
(
L
, -1);

282 
	`lua_p›
(
L
, 1);

283  
b
;

284 
	}
}

290 
	$£ç©h
 (
lua_Sèã
 *
L
, c⁄° *
fõld«me
,

291 c⁄° *
ív«me
,

292 c⁄° *
d·
) {

293 c⁄° *
nvî
 = 
	`lua_pushf°rög
(
L
, "%s%s", 
ív«me
, 
LUA_VERSUFFIX
);

294 c⁄° *
∑th
 = 
	`gëív
(
nvî
);

295 i‡(
∑th
 =
NULL
)

296 
∑th
 = 
	`gëív
(
ív«me
);

297 i‡(
∑th
 =
NULL
 || 
	`n€nv
(
L
))

298 
	`lua_push°rög
(
L
, 
d·
);

301 
∑th
 = 
	`luaL_gsub
(
L
,Ö©h, 
LUA_PATH_SEP
 LUA_PATH_SEP,

302 
LUA_PATH_SEP
 
AUXMARK
 LUA_PATH_SEP);

303 
	`luaL_gsub
(
L
, 
∑th
, 
AUXMARK
, 
d·
);

304 
	`lua_ªmove
(
L
, -2);

306 
	`£çrogdú
(
L
);

307 
	`lua_£tfõld
(
L
, -3, 
fõld«me
);

308 
	`lua_p›
(
L
, 1);

309 
	}
}

317 *
	$check˛ib
 (
lua_Sèã
 *
L
, c⁄° *
∑th
) {

318 *
∂ib
;

319 
	`lua_øwgëp
(
L
, 
LUA_REGISTRYINDEX
, &
CLIBS
);

320 
	`lua_gëfõld
(
L
, -1, 
∑th
);

321 
∂ib
 = 
	`lua_tou£rd©a
(
L
, -1);

322 
	`lua_p›
(
L
, 2);

323  
∂ib
;

324 
	}
}

331 
	$addto˛ib
 (
lua_Sèã
 *
L
, c⁄° *
∑th
, *
∂ib
) {

332 
	`lua_øwgëp
(
L
, 
LUA_REGISTRYINDEX
, &
CLIBS
);

333 
	`lua_pushlightu£rd©a
(
L
, 
∂ib
);

334 
	`lua_pushvÆue
(
L
, -1);

335 
	`lua_£tfõld
(
L
, -3, 
∑th
);

336 
	`lua_øw£ti
(
L
, -2, 
	`luaL_Àn
(L, -2) + 1);

337 
	`lua_p›
(
L
, 1);

338 
	}
}

345 
	$g˘m
 (
lua_Sèã
 *
L
) {

346 
lua_I¡egî
 
n
 = 
	`luaL_Àn
(
L
, 1);

347 ; 
n
 >= 1;Ç--) {

348 
	`lua_øwgëi
(
L
, 1, 
n
);

349 
	`lsys_u∆ﬂdlib
(
	`lua_tou£rd©a
(
L
, -1));

350 
	`lua_p›
(
L
, 1);

353 
	}
}

358 
	#ERRLIB
 1

	)

359 
	#ERRFUNC
 2

	)

372 
	$lookf‹func
 (
lua_Sèã
 *
L
, c⁄° *
∑th
, c⁄° *
sym
) {

373 *
ªg
 = 
	`check˛ib
(
L
, 
∑th
);

374 i‡(
ªg
 =
NULL
) {

375 
ªg
 = 
	`lsys_lﬂd
(
L
, 
∑th
, *
sym
 == '*');

376 i‡(
ªg
 =
NULL
Ë 
ERRLIB
;

377 
	`addto˛ib
(
L
, 
∑th
, 
ªg
);

379 i‡(*
sym
 == '*') {

380 
	`lua_pushboﬁón
(
L
, 1);

384 
lua_CFun˘i⁄
 
f
 = 
	`lsys_sym
(
L
, 
ªg
, 
sym
);

385 i‡(
f
 =
NULL
)

386  
ERRFUNC
;

387 
	`lua_pushcfun˘i⁄
(
L
, 
f
);

390 
	}
}

393 
	$Œ_lﬂdlib
 (
lua_Sèã
 *
L
) {

394 c⁄° *
∑th
 = 
	`luaL_check°rög
(
L
, 1);

395 c⁄° *
öô
 = 
	`luaL_check°rög
(
L
, 2);

396 
°©
 = 
	`lookf‹func
(
L
, 
∑th
, 
öô
);

397 i‡(
°©
 == 0)

400 
	`lua_pushnû
(
L
);

401 
	`lua_ö£π
(
L
, -2);

402 
	`lua_push°rög
(
L
, (
°©
 =
ERRLIB
Ë? 
LIB_FAIL
 : "init");

405 
	}
}

416 
	$ªadabÀ
 (c⁄° *
fûíame
) {

417 
FILE
 *
f
 = 
	`f›í
(
fûíame
, "r");

418 i‡(
f
 =
NULL
)  0;

419 
	`f˛o£
(
f
);

421 
	}
}

424 c⁄° *
	$push√xâem∂©e
 (
lua_Sèã
 *
L
, c⁄° *
∑th
) {

425 c⁄° *
l
;

426 *
∑th
 =*
LUA_PATH_SEP
)Öath++;

427 i‡(*
∑th
 ='\0'Ë 
NULL
;

428 
l
 = 
	`°rchr
(
∑th
, *
LUA_PATH_SEP
);

429 i‡(
l
 =
NULL
Ë»
∑th
 + 
	`°æí
(path);

430 
	`lua_pushl°rög
(
L
, 
∑th
, 
l
 -Öath);

431  
l
;

432 
	}
}

435 c⁄° *
	$£¨ch∑th
 (
lua_Sèã
 *
L
, c⁄° *
«me
,

436 c⁄° *
∑th
,

437 c⁄° *
£p
,

438 c⁄° *
dú£p
) {

439 
luaL_Buf„r
 
msg
;

440 
	`luaL_bufföô
(
L
, &
msg
);

441 i‡(*
£p
 != '\0')

442 
«me
 = 
	`luaL_gsub
(
L
,Çame, 
£p
, 
dú£p
);

443 (
∑th
 = 
	`push√xâem∂©e
(
L
,Ö©h)Ë!
NULL
) {

444 c⁄° *
fûíame
 = 
	`luaL_gsub
(
L
, 
	`lua_to°rög
(L, -1),

445 
LUA_PATH_MARK
, 
«me
);

446 
	`lua_ªmove
(
L
, -2);

447 i‡(
	`ªadabÀ
(
fûíame
))

448  
fûíame
;

449 
	`lua_pushf°rög
(
L
, "\n\äÿfûê'%s'", 
fûíame
);

450 
	`lua_ªmove
(
L
, -2);

451 
	`luaL_addvÆue
(&
msg
);

453 
	`luaL_pushªsu…
(&
msg
);

454  
NULL
;

455 
	}
}

458 
	$Œ_£¨ch∑th
 (
lua_Sèã
 *
L
) {

459 c⁄° *
f
 = 
	`£¨ch∑th
(
L
, 
	`luaL_check°rög
(L, 1),

460 
	`luaL_check°rög
(
L
, 2),

461 
	`luaL_›t°rög
(
L
, 3, "."),

462 
	`luaL_›t°rög
(
L
, 4, 
LUA_DIRSEP
));

463 i‡(
f
 !
NULL
)  1;

465 
	`lua_pushnû
(
L
);

466 
	`lua_ö£π
(
L
, -2);

469 
	}
}

472 c⁄° *
	$födfûe
 (
lua_Sèã
 *
L
, c⁄° *
«me
,

473 c⁄° *
≤ame
,

474 c⁄° *
dú£p
) {

475 c⁄° *
∑th
;

476 
	`lua_gëfõld
(
L
, 
	`lua_upvÆueödex
(1), 
≤ame
);

477 
∑th
 = 
	`lua_to°rög
(
L
, -1);

478 i‡(
∑th
 =
NULL
)

479 
	`luaL_îr‹
(
L
, "'∑ckage.%s' mu° bê®°rög", 
≤ame
);

480  
	`£¨ch∑th
(
L
, 
«me
, 
∑th
, ".", 
dú£p
);

481 
	}
}

484 
	$checklﬂd
 (
lua_Sèã
 *
L
, 
°©
, c⁄° *
fûíame
) {

485 i‡(
°©
) {

486 
	`lua_push°rög
(
L
, 
fûíame
);

490  
	`luaL_îr‹
(
L
, "errorÜoading module '%s' from file '%s':\n\t%s",

491 
	`lua_to°rög
(
L
, 1), 
fûíame
,Üua_tostring(L, -1));

492 
	}
}

495 
	$£¨chî_Lua
 (
lua_Sèã
 *
L
) {

496 c⁄° *
fûíame
;

497 c⁄° *
«me
 = 
	`luaL_check°rög
(
L
, 1);

498 
fûíame
 = 
	`födfûe
(
L
, 
«me
, "∑th", 
LUA_LSUBSEP
);

499 i‡(
fûíame
 =
NULL
)  1;

500  
	`checklﬂd
(
L
, (
	`luaL_lﬂdfûe
(L, 
fûíame
Ë=
LUA_OK
), filename);

501 
	}
}

512 
	$lﬂdfunc
 (
lua_Sèã
 *
L
, c⁄° *
fûíame
, c⁄° *
mod«me
) {

513 c⁄° *
›ífunc
;

514 c⁄° *
m¨k
;

515 
mod«me
 = 
	`luaL_gsub
(
L
, mod«me, ".", 
LUA_OFSEP
);

516 
m¨k
 = 
	`°rchr
(
mod«me
, *
LUA_IGMARK
);

517 i‡(
m¨k
) {

518 
°©
;

519 
›ífunc
 = 
	`lua_pushl°rög
(
L
, 
mod«me
, 
m¨k
 - modname);

520 
›ífunc
 = 
	`lua_pushf°rög
(
L
, 
LUA_POF
"%s", openfunc);

521 
°©
 = 
	`lookf‹func
(
L
, 
fûíame
, 
›ífunc
);

522 i‡(
°©
 !
ERRFUNC
)  stat;

523 
mod«me
 = 
m¨k
 + 1;

525 
›ífunc
 = 
	`lua_pushf°rög
(
L
, 
LUA_POF
"%s", 
mod«me
);

526  
	`lookf‹func
(
L
, 
fûíame
, 
›ífunc
);

527 
	}
}

530 
	$£¨chî_C
 (
lua_Sèã
 *
L
) {

531 c⁄° *
«me
 = 
	`luaL_check°rög
(
L
, 1);

532 c⁄° *
fûíame
 = 
	`födfûe
(
L
, 
«me
, "˝©h", 
LUA_CSUBSEP
);

533 i‡(
fûíame
 =
NULL
)  1;

534  
	`checklﬂd
(
L
, (
	`lﬂdfunc
(L, 
fûíame
, 
«me
) == 0), filename);

535 
	}
}

538 
	$£¨chî_CroŸ
 (
lua_Sèã
 *
L
) {

539 c⁄° *
fûíame
;

540 c⁄° *
«me
 = 
	`luaL_check°rög
(
L
, 1);

541 c⁄° *
p
 = 
	`°rchr
(
«me
, '.');

542 
°©
;

543 i‡(
p
 =
NULL
)  0;

544 
	`lua_pushl°rög
(
L
, 
«me
, 
p
 -Çame);

545 
fûíame
 = 
	`födfûe
(
L
, 
	`lua_to°rög
(L, -1), "˝©h", 
LUA_CSUBSEP
);

546 i‡(
fûíame
 =
NULL
)  1;

547 i‡((
°©
 = 
	`lﬂdfunc
(
L
, 
fûíame
, 
«me
)) != 0) {

548 i‡(
°©
 !
ERRFUNC
)

549  
	`checklﬂd
(
L
, 0, 
fûíame
);

551 
	`lua_pushf°rög
(
L
, "\n\äÿmoduÀ '%s' i¿fûê'%s'", 
«me
, 
fûíame
);

555 
	`lua_push°rög
(
L
, 
fûíame
);

557 
	}
}

560 
	$£¨chî_¥ñﬂd
 (
lua_Sèã
 *
L
) {

561 c⁄° *
«me
 = 
	`luaL_check°rög
(
L
, 1);

562 
	`lua_gëfõld
(
L
, 
LUA_REGISTRYINDEX
, 
LUA_PRELOAD_TABLE
);

563 i‡(
	`lua_gëfõld
(
L
, -1, 
«me
Ë=
LUA_TNIL
)

564 
	`lua_pushf°rög
(
L
, "\n\äÿfõldÖackage.¥ñﬂd['%s']", 
«me
);

566 
	}
}

569 
	$födlﬂdî
 (
lua_Sèã
 *
L
, c⁄° *
«me
) {

570 
i
;

571 
luaL_Buf„r
 
msg
;

572 
	`luaL_bufföô
(
L
, &
msg
);

574 i‡(
	`lua_gëfõld
(
L
, 
	`lua_upvÆueödex
(1), "£¨chîs"Ë!
LUA_TTABLE
)

575 
	`luaL_îr‹
(
L
, "'package.searchers' must beáÅable");

577 
i
 = 1; ; i++) {

578 i‡(
	`lua_øwgëi
(
L
, 3, 
i
Ë=
LUA_TNIL
) {

579 
	`lua_p›
(
L
, 1);

580 
	`luaL_pushªsu…
(&
msg
);

581 
	`luaL_îr‹
(
L
, "moduÀ '%s'ÇŸ found:%s", 
«me
, 
	`lua_to°rög
(L, -1));

583 
	`lua_push°rög
(
L
, 
«me
);

584 
	`lua_ˇŒ
(
L
, 1, 2);

585 i‡(
	`lua_isfun˘i⁄
(
L
, -2))

587 i‡(
	`lua_is°rög
(
L
, -2)) {

588 
	`lua_p›
(
L
, 1);

589 
	`luaL_addvÆue
(&
msg
);

592 
	`lua_p›
(
L
, 2);

594 
	}
}

597 
	$Œ_ªquúe
 (
lua_Sèã
 *
L
) {

598 c⁄° *
«me
 = 
	`luaL_check°rög
(
L
, 1);

599 
	`lua_£â›
(
L
, 1);

600 
	`lua_gëfõld
(
L
, 
LUA_REGISTRYINDEX
, 
LUA_LOADED_TABLE
);

601 
	`lua_gëfõld
(
L
, 2, 
«me
);

602 i‡(
	`lua_toboﬁón
(
L
, -1))

605 
	`lua_p›
(
L
, 1);

606 
	`födlﬂdî
(
L
, 
«me
);

607 
	`lua_push°rög
(
L
, 
«me
);

608 
	`lua_ö£π
(
L
, -2);

609 
	`lua_ˇŒ
(
L
, 2, 1);

610 i‡(!
	`lua_i¢û
(
L
, -1))

611 
	`lua_£tfõld
(
L
, 2, 
«me
);

612 i‡(
	`lua_gëfõld
(
L
, 2, 
«me
Ë=
LUA_TNIL
) {

613 
	`lua_pushboﬁón
(
L
, 1);

614 
	`lua_pushvÆue
(
L
, -1);

615 
	`lua_£tfõld
(
L
, 2, 
«me
);

618 
	}
}

629 #i‡
deföed
(
LUA_COMPAT_MODULE
)

634 
	$£t_ív
 (
lua_Sèã
 *
L
) {

635 
lua_Debug
 
¨
;

636 i‡(
	`lua_gë°ack
(
L
, 1, &
¨
) == 0 ||

637 
	`lua_gëöfo
(
L
, "f", &
¨
) == 0 ||

638 
	`lua_iscfun˘i⁄
(
L
, -1))

639 
	`luaL_îr‹
(
L
, "'module'Çot called fromá Lua function");

640 
	`lua_pushvÆue
(
L
, -2);

641 
	`lua_£tupvÆue
(
L
, -2, 1);

642 
	`lua_p›
(
L
, 1);

643 
	}
}

646 
	$do›ti⁄s
 (
lua_Sèã
 *
L
, 
n
) {

647 
i
;

648 
i
 = 2; i <
n
; i++) {

649 i‡(
	`lua_isfun˘i⁄
(
L
, 
i
)) {

650 
	`lua_pushvÆue
(
L
, 
i
);

651 
	`lua_pushvÆue
(
L
, -2);

652 
	`lua_ˇŒ
(
L
, 1, 0);

655 
	}
}

658 
	$modöô
 (
lua_Sèã
 *
L
, c⁄° *
mod«me
) {

659 c⁄° *
dŸ
;

660 
	`lua_pushvÆue
(
L
, -1);

661 
	`lua_£tfõld
(
L
, -2, "_M");

662 
	`lua_push°rög
(
L
, 
mod«me
);

663 
	`lua_£tfõld
(
L
, -2, "_NAME");

664 
dŸ
 = 
	`°ºchr
(
mod«me
, '.');

665 i‡(
dŸ
 =
NULL
ËdŸ = 
mod«me
;

666 
dŸ
++;

668 
	`lua_pushl°rög
(
L
, 
mod«me
, 
dŸ
 - modname);

669 
	`lua_£tfõld
(
L
, -2, "_PACKAGE");

670 
	}
}

673 
	$Œ_moduÀ
 (
lua_Sèã
 *
L
) {

674 c⁄° *
mod«me
 = 
	`luaL_check°rög
(
L
, 1);

675 
œ°¨g
 = 
	`lua_gët›
(
L
);

676 
	`luaL_pushmoduÀ
(
L
, 
mod«me
, 1);

678 i‡(
	`lua_gëfõld
(
L
, -1, "_NAME"Ë!
LUA_TNIL
)

679 
	`lua_p›
(
L
, 1);

681 
	`lua_p›
(
L
, 1);

682 
	`modöô
(
L
, 
mod«me
);

684 
	`lua_pushvÆue
(
L
, -1);

685 
	`£t_ív
(
L
);

686 
	`do›ti⁄s
(
L
, 
œ°¨g
);

688 
	}
}

691 
	$Œ_£óŒ
 (
lua_Sèã
 *
L
) {

692 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

693 i‡(!
	`lua_gëmë©abÀ
(
L
, 1)) {

694 
	`lua_¸óãèbÀ
(
L
, 0, 1);

695 
	`lua_pushvÆue
(
L
, -1);

696 
	`lua_£tmë©abÀ
(
L
, 1);

698 
	`lua_pushglobÆèbÀ
(
L
);

699 
	`lua_£tfõld
(
L
, -2, "__index");

701 
	}
}

708 c⁄° 
luaL_Reg
 
	gpk_funcs
[] = {

709 {"lﬂdlib", 
Œ_lﬂdlib
},

710 {"£¨ch∑th", 
Œ_£¨ch∑th
},

711 #i‡
deföed
(
LUA_COMPAT_MODULE
)

712 {"£óŒ", 
Œ_£óŒ
},

715 {"¥ñﬂd", 
NULL
},

716 {"˝©h", 
NULL
},

717 {"∑th", 
NULL
},

718 {"£¨chîs", 
NULL
},

719 {"lﬂded", 
NULL
},

720 {
NULL
, NULL}

724 c⁄° 
luaL_Reg
 
	gŒ_funcs
[] = {

725 #i‡
deföed
(
LUA_COMPAT_MODULE
)

726 {"moduÀ", 
Œ_moduÀ
},

728 {"ªquúe", 
Œ_ªquúe
},

729 {
NULL
, NULL}

733 
	$¸óã£¨chî°abÀ
 (
lua_Sèã
 *
L
) {

734 c⁄° 
lua_CFun˘i⁄
 
£¨chîs
[] =

735 {
£¨chî_¥ñﬂd
, 
£¨chî_Lua
, 
£¨chî_C
, 
£¨chî_CroŸ
, 
NULL
};

736 
i
;

738 
	`lua_¸óãèbÀ
(
L
, (
£¨chîs
)/(searchers[0]) - 1, 0);

740 
i
=0; 
£¨chîs
[i] !
NULL
; i++) {

741 
	`lua_pushvÆue
(
L
, -2);

742 
	`lua_pushc˛osuª
(
L
, 
£¨chîs
[
i
], 1);

743 
	`lua_øw£ti
(
L
, -2, 
i
+1);

745 #i‡
	`deföed
(
LUA_COMPAT_LOADERS
)

746 
	`lua_pushvÆue
(
L
, -1);

747 
	`lua_£tfõld
(
L
, -3, "loaders");

749 
	`lua_£tfõld
(
L
, -2, "searchers");

750 
	}
}

757 
	$¸óã˛ib°abÀ
 (
lua_Sèã
 *
L
) {

758 
	`lua_√wèbÀ
(
L
);

759 
	`lua_¸óãèbÀ
(
L
, 0, 1);

760 
	`lua_pushcfun˘i⁄
(
L
, 
g˘m
);

761 
	`lua_£tfõld
(
L
, -2, "__gc");

762 
	`lua_£tmë©abÀ
(
L
, -2);

763 
	`lua_øw£ç
(
L
, 
LUA_REGISTRYINDEX
, &
CLIBS
);

764 
	}
}

767 
LUAMOD_API
 
	$lua›í_∑ckage
 (
lua_Sèã
 *
L
) {

768 
	`¸óã˛ib°abÀ
(
L
);

769 
	`luaL_√wlib
(
L
, 
pk_funcs
);

770 
	`¸óã£¨chî°abÀ
(
L
);

772 
	`£ç©h
(
L
, "∑th", 
LUA_PATH_VAR
, 
LUA_PATH_DEFAULT
);

773 
	`£ç©h
(
L
, "˝©h", 
LUA_CPATH_VAR
, 
LUA_CPATH_DEFAULT
);

775 
	`lua_pushlôîÆ
(
L
, 
LUA_DIRSEP
 "\n" 
LUA_PATH_SEP
 "\n" 
LUA_PATH_MARK
 "\n"

776 
LUA_EXEC_DIR
 "\n" 
LUA_IGMARK
 "\n");

777 
	`lua_£tfõld
(
L
, -2, "config");

779 
	`luaL_gësubèbÀ
(
L
, 
LUA_REGISTRYINDEX
, 
LUA_LOADED_TABLE
);

780 
	`lua_£tfõld
(
L
, -2, "loaded");

782 
	`luaL_gësubèbÀ
(
L
, 
LUA_REGISTRYINDEX
, 
LUA_PRELOAD_TABLE
);

783 
	`lua_£tfõld
(
L
, -2, "preload");

784 
	`lua_pushglobÆèbÀ
(
L
);

785 
	`lua_pushvÆue
(
L
, -2);

786 
	`luaL_£tfuncs
(
L
, 
Œ_funcs
, 1);

787 
	`lua_p›
(
L
, 1);

789 
	}
}

	@lib/lua/lua-5.3.4/src/lobject.c

7 
	#lobje˘_c


	)

8 
	#LUA_CORE


	)

10 
	~"Õªfix.h
"

13 
	~<loˇÀ.h
>

14 
	~<m©h.h
>

15 
	~<°d¨g.h
>

16 
	~<°dio.h
>

17 
	~<°dlib.h
>

18 
	~<°rög.h
>

20 
	~"lua.h
"

22 
	~"l˘y≥.h
"

23 
	~"ldebug.h
"

24 
	~"ldo.h
"

25 
	~"lmem.h
"

26 
	~"lobje˘.h
"

27 
	~"l°©e.h
"

28 
	~"l°rög.h
"

29 
	~"lvm.h
"

33 
LUAI_DDEF
 c⁄° 
TVÆue
 
	gluaO_nûobje˘_
 = {
NILCONSTANT
};

41 
	$luaO_öt2fb
 (
x
) {

42 
e
 = 0;

43 i‡(
x
 < 8)  x;

44 
x
 >= (8 << 4)) {

45 
x
 = (x + 0xf) >> 4;

46 
e
 += 4;

48 
x
 >= (8 << 1)) {

49 
x
 = (x + 1) >> 1;

50 
e
++;

52  ((
e
+1Ë<< 3Ë| (
	`ˇ°_öt
(
x
) - 8);

53 
	}
}

57 
	$luaO_fb2öt
 (
x
) {

58  (
x
 < 8) ? x : ((x & 7) + 8) << ((x >> 3) - 1);

59 
	}
}

65 
	$luaO_˚ûlog2
 (
x
) {

66 c⁄° 
lu_byã
 
log_2
[256] = {

76 
l
 = 0;

77 
x
--;

78 
x
 >256Ë{ 
l
 += 8; x >>= 8; }

79  
l
 + 
log_2
[
x
];

80 
	}
}

83 
lua_I¡egî
 
	$öèrôh
 (
lua_Sèã
 *
L
, 
›
, 
lua_I¡egî
 
v1
,

84 
lua_I¡egî
 
v2
) {

85 
›
) {

86 
LUA_OPADD
:  
	`öt›
(+, 
v1
, 
v2
);

87 
LUA_OPSUB
: 
	`öt›
(-, 
v1
, 
v2
);

88 
LUA_OPMUL
: 
	`öt›
(*, 
v1
, 
v2
);

89 
LUA_OPMOD
:  
	`luaV_mod
(
L
, 
v1
, 
v2
);

90 
LUA_OPIDIV
:  
	`luaV_div
(
L
, 
v1
, 
v2
);

91 
LUA_OPBAND
:  
	`öt›
(&, 
v1
, 
v2
);

92 
LUA_OPBOR
:  
	`öt›
(|, 
v1
, 
v2
);

93 
LUA_OPBXOR
:  
	`öt›
(^, 
v1
, 
v2
);

94 
LUA_OPSHL
:  
	`luaV_shi·l
(
v1
, 
v2
);

95 
LUA_OPSHR
:  
	`luaV_shi·l
(
v1
, -
v2
);

96 
LUA_OPUNM
:  
	`öt›
(-, 0, 
v1
);

97 
LUA_OPBNOT
:  
	`öt›
(^, ~
	`l_ˇ°S2U
(0), 
v1
);

98 : 
	`lua_as£π
(0);  0;

100 
	}
}

103 
lua_Numbî
 
	$num¨ôh
 (
lua_Sèã
 *
L
, 
›
, 
lua_Numbî
 
v1
,

104 
lua_Numbî
 
v2
) {

105 
›
) {

106 
LUA_OPADD
:  
	`luai_numadd
(
L
, 
v1
, 
v2
);

107 
LUA_OPSUB
:  
	`luai_numsub
(
L
, 
v1
, 
v2
);

108 
LUA_OPMUL
:  
	`luai_nummul
(
L
, 
v1
, 
v2
);

109 
LUA_OPDIV
:  
	`luai_numdiv
(
L
, 
v1
, 
v2
);

110 
LUA_OPPOW
:  
	`luai_numpow
(
L
, 
v1
, 
v2
);

111 
LUA_OPIDIV
:  
	`luai_numidiv
(
L
, 
v1
, 
v2
);

112 
LUA_OPUNM
:  
	`luai_numunm
(
L
, 
v1
);

113 
LUA_OPMOD
: {

114 
lua_Numbî
 
m
;

115 
	`luai_nummod
(
L
, 
v1
, 
v2
, 
m
);

116  
m
;

118 : 
	`lua_as£π
(0);  0;

120 
	}
}

123 
	$luaO_¨ôh
 (
lua_Sèã
 *
L
, 
›
, c⁄° 
TVÆue
 *
p1
, c⁄° TVÆuê*
p2
,

124 
TVÆue
 *
ªs
) {

125 
›
) {

126 
LUA_OPBAND
: 
LUA_OPBOR
: 
LUA_OPBXOR
:

127 
LUA_OPSHL
: 
LUA_OPSHR
:

128 
LUA_OPBNOT
: {

129 
lua_I¡egî
 
i1
;Üua_I¡egî 
i2
;

130 i‡(
	`toöãgî
(
p1
, &
i1
Ë&&Åoöãgî(
p2
, &
i2
)) {

131 
	`£tivÆue
(
ªs
, 
	`öèrôh
(
L
, 
›
, 
i1
, 
i2
));

136 
LUA_OPDIV
: 
LUA_OPPOW
: {

137 
lua_Numbî
 
n1
;Üua_Numbî 
n2
;

138 i‡(
	`t⁄umbî
(
p1
, &
n1
Ë&&Å⁄umbî(
p2
, &
n2
)) {

139 
	`£tÊtvÆue
(
ªs
, 
	`num¨ôh
(
L
, 
›
, 
n1
, 
n2
));

145 
lua_Numbî
 
n1
;Üua_Numbî 
n2
;

146 i‡(
	`âisöãgî
(
p1
Ë&&Åtisöãgî(
p2
)) {

147 
	`£tivÆue
(
ªs
, 
	`öèrôh
(
L
, 
›
, 
	`ivÆue
(
p1
), ivÆue(
p2
)));

150 i‡(
	`t⁄umbî
(
p1
, &
n1
Ë&&Å⁄umbî(
p2
, &
n2
)) {

151 
	`£tÊtvÆue
(
ªs
, 
	`num¨ôh
(
L
, 
›
, 
n1
, 
n2
));

158 
	`lua_as£π
(
L
 !
NULL
);

159 
	`luaT_åyböTM
(
L
, 
p1
, 
p2
, 
ªs
, 
	`ˇ°
(
TMS
, (
›
 - 
LUA_OPADD
Ë+ 
TM_ADD
));

160 
	}
}

163 
	$luaO_hexavÆue
 (
c
) {

164 i‡(
	`lisdigô
(
c
))  c - '0';

165  (
	`…ﬁowî
(
c
) - 'a') + 10;

166 
	}
}

169 
	$i¢eg
 (c⁄° **
s
) {

170 i‡(**
s
 == '-') { (*s)++;  1; }

171 i‡(**
s
 == '+') (*s)++;

173 
	}
}

183 #i‡!
deföed
(
lua_°rx2numbî
)

187 
	#MAXSIGDIG
 30

	)

193 
lua_Numbî
 
	$lua_°rx2numbî
 (c⁄° *
s
, **
íd±r
) {

194 
dŸ
 = 
	`lua_gëloˇÀde˝oöt
();

195 
lua_Numbî
 
r
 = 0.0;

196 
sigdig
 = 0;

197 
nosigdig
 = 0;

198 
e
 = 0;

199 
√g
;

200 
hasdŸ
 = 0;

201 *
íd±r
 = 
	`ˇ°
(*, 
s
);

202 
	`lis•a˚
(
	`ˇ°_uch¨
(*
s
))) s++;

203 
√g
 = 
	`i¢eg
(&
s
);

204 i‡(!(*
s
 == '0' && (*(s + 1) == 'x' || *(s + 1) == 'X')))

206 
s
 += 2; ; s++) {

207 i‡(*
s
 =
dŸ
) {

208 i‡(
hasdŸ
) ;

209 
hasdŸ
 = 1;

211 i‡(
	`lisxdigô
(
	`ˇ°_uch¨
(*
s
))) {

212 i‡(
sigdig
 =0 && *
s
 == '0')

213 
nosigdig
++;

214 i‡(++
sigdig
 <
MAXSIGDIG
)

215 
r
 = (∏* 
	`ˇ°_num
(16.0)Ë+ 
	`luaO_hexavÆue
(*
s
);

216 
e
++;

217 i‡(
hasdŸ
Ë
e
--;

221 i‡(
nosigdig
 + 
sigdig
 == 0)

223 *
íd±r
 = 
	`ˇ°
(*, 
s
);

224 
e
 *= 4;

225 i‡(*
s
 == 'p' || *s == 'P') {

226 
exp1
 = 0;

227 
√g1
;

228 
s
++;

229 
√g1
 = 
	`i¢eg
(&
s
);

230 i‡(!
	`lisdigô
(
	`ˇ°_uch¨
(*
s
)))

232 
	`lisdigô
(
	`ˇ°_uch¨
(*
s
)))

233 
exp1
 =Éxp1 * 10 + *(
s
++) - '0';

234 i‡(
√g1
Ë
exp1
 = -exp1;

235 
e
 +
exp1
;

236 *
íd±r
 = 
	`ˇ°
(*, 
s
);

238 i‡(
√g
Ë
r
 = -r;

239  
	`l_m©h›
(
ldexp
)(
r
, 
e
);

240 
	}
}

247 #i‡!
deföed
 (
L_MAXLENNUM
)

248 
	#L_MAXLENNUM
 200

	)

251 c⁄° *
	$l_°r2dloc
 (c⁄° *
s
, 
lua_Numbî
 *
ªsu…
, 
mode
) {

252 *
íd±r
;

253 *
ªsu…
 = (
mode
 ='x'Ë? 
	`lua_°rx2numbî
(
s
, &
íd±r
)

254 : 
	`lua_°r2numbî
(
s
, &
íd±r
);

255 i‡(
íd±r
 =
s
Ë 
NULL
;

256 
	`lis•a˚
(
	`ˇ°_uch¨
(*
íd±r
)))Éndptr++;

257  (*
íd±r
 ='\0'Ë?Énd±∏: 
NULL
;

258 
	}
}

274 c⁄° *
	$l_°r2d
 (c⁄° *
s
, 
lua_Numbî
 *
ªsu…
) {

275 c⁄° *
íd±r
;

276 c⁄° *
pmode
 = 
	`°Ωbrk
(
s
, ".xXnN");

277 
mode
 = 
pmode
 ? 
	`…ﬁowî
(
	`ˇ°_uch¨
(*pmode)) : 0;

278 i‡(
mode
 == 'n')

279  
NULL
;

280 
íd±r
 = 
	`l_°r2dloc
(
s
, 
ªsu…
, 
mode
);

281 i‡(
íd±r
 =
NULL
) {

282 
buff
[
L_MAXLENNUM
 + 1];

283 c⁄° *
pdŸ
 = 
	`°rchr
(
s
, '.');

284 i‡(
	`°æí
(
s
Ë> 
L_MAXLENNUM
 || 
pdŸ
 =
NULL
)

285  
NULL
;

286 
	`°r˝y
(
buff
, 
s
);

287 
buff
[
pdŸ
 - 
s
] = 
	`lua_gëloˇÀde˝oöt
();

288 
íd±r
 = 
	`l_°r2dloc
(
buff
, 
ªsu…
, 
mode
);

289 i‡(
íd±r
 !
NULL
)

290 
íd±r
 = 
s
 + (íd±∏- 
buff
);

292  
íd±r
;

293 
	}
}

296 
	#MAXBY10
 
	`ˇ°
(
lua_Unsig√d
, 
LUA_MAXINTEGER
 / 10)

	)

297 
	#MAXLASTD
 
	`ˇ°_öt
(
LUA_MAXINTEGER
 % 10)

	)

299 c⁄° *
	$l_°r2öt
 (c⁄° *
s
, 
lua_I¡egî
 *
ªsu…
) {

300 
lua_Unsig√d
 
a
 = 0;

301 
em±y
 = 1;

302 
√g
;

303 
	`lis•a˚
(
	`ˇ°_uch¨
(*
s
))) s++;

304 
√g
 = 
	`i¢eg
(&
s
);

305 i‡(
s
[0] == '0' &&

306 (
s
[1] == 'x' || s[1] == 'X')) {

307 
s
 += 2;

308 ; 
	`lisxdigô
(
	`ˇ°_uch¨
(*
s
)); s++) {

309 
a
 =á * 16 + 
	`luaO_hexavÆue
(*
s
);

310 
em±y
 = 0;

314 ; 
	`lisdigô
(
	`ˇ°_uch¨
(*
s
)); s++) {

315 
d
 = *
s
 - '0';

316 i‡(
a
 >
MAXBY10
 && (®> MAXBY10 || 
d
 > 
MAXLASTD
 + 
√g
))

317  
NULL
;

318 
a
 =á * 10 + 
d
;

319 
em±y
 = 0;

322 
	`lis•a˚
(
	`ˇ°_uch¨
(*
s
))) s++;

323 i‡(
em±y
 || *
s
 !'\0'Ë 
NULL
;

325 *
ªsu…
 = 
	`l_ˇ°U2S
((
√g
Ë? 0u - 
a
 :á);

326  
s
;

328 
	}
}

331 
size_t
 
	$luaO_°r2num
 (c⁄° *
s
, 
TVÆue
 *
o
) {

332 
lua_I¡egî
 
i
; 
lua_Numbî
 
n
;

333 c⁄° *
e
;

334 i‡((
e
 = 
	`l_°r2öt
(
s
, &
i
)Ë!
NULL
) {

335 
	`£tivÆue
(
o
, 
i
);

337 i‡((
e
 = 
	`l_°r2d
(
s
, &
n
)Ë!
NULL
) {

338 
	`£tÊtvÆue
(
o
, 
n
);

342  (
e
 - 
s
) + 1;

343 
	}
}

346 
	$luaO_utf8esc
 (*
buff
, 
x
) {

347 
n
 = 1;

348 
	`lua_as£π
(
x
 <= 0x10FFFF);

349 i‡(
x
 < 0x80)

350 
buff
[
UTF8BUFFSZ
 - 1] = 
	`ˇ°
(, 
x
);

352 
mfb
 = 0x3f;

354 
buff
[
UTF8BUFFSZ
 - (
n
++)] = 
	`ˇ°
(, 0x80 | (
x
 & 0x3f));

355 
x
 >>= 6;

356 
mfb
 >>= 1;

357 } 
x
 > 
mfb
);

358 
buff
[
UTF8BUFFSZ
 - 
n
] = 
	`ˇ°
(, (~
mfb
 << 1Ë| 
x
);

360  
n
;

361 
	}
}

365 
	#MAXNUMBER2STR
 50

	)

371 
	$luaO_to°rög
 (
lua_Sèã
 *
L
, 
StkId
 
obj
) {

372 
buff
[
MAXNUMBER2STR
];

373 
size_t
 
Àn
;

374 
	`lua_as£π
(
	`âi¢umbî
(
obj
));

375 i‡(
	`âisöãgî
(
obj
))

376 
Àn
 = 
	`lua_öãgî2°r
(
buff
, (buff), 
	`ivÆue
(
obj
));

378 
Àn
 = 
	`lua_numbî2°r
(
buff
, (buff), 
	`ÊtvÆue
(
obj
));

379 #i‡!
	`deföed
(
LUA_COMPAT_FLOATSTRING
)

380 i‡(
buff
[
	`°r•n
(buff, "-0123456789")] == '\0') {

381 
buff
[
Àn
++] = 
	`lua_gëloˇÀde˝oöt
();

382 
buff
[
Àn
++] = '0';

386 
	`£tsvÆue2s
(
L
, 
obj
, 
	`luaS_√wl°r
(L, 
buff
, 
Àn
));

387 
	}
}

390 
	$push°r
 (
lua_Sèã
 *
L
, c⁄° *
°r
, 
size_t
 
l
) {

391 
	`£tsvÆue2s
(
L
, L->
t›
, 
	`luaS_√wl°r
(L, 
°r
, 
l
));

392 
	`luaD_ö˘›
(
L
);

393 
	}
}

400 c⁄° *
	$luaO_pushvf°rög
 (
lua_Sèã
 *
L
, c⁄° *
fmt
, 
va_li°
 
¨gp
) {

401 
n
 = 0;

403 c⁄° *
e
 = 
	`°rchr
(
fmt
, '%');

404 i‡(
e
 =
NULL
) ;

405 
	`push°r
(
L
, 
fmt
, 
e
 - fmt);

406 *(
e
+1)) {

408 c⁄° *
s
 = 
	`va_¨g
(
¨gp
, *);

409 i‡(
s
 =
NULL
) s = "(null)";

410 
	`push°r
(
L
, 
s
, 
	`°æí
(s));

414 
buff
 = 
	`ˇ°
(, 
	`va_¨g
(
¨gp
, ));

415 i‡(
	`li•röt
(
	`ˇ°_uch¨
(
buff
)))

416 
	`push°r
(
L
, &
buff
, 1);

418 
	`luaO_pushf°rög
(
L
, "<\\%d>", 
	`ˇ°_uch¨
(
buff
));

422 
	`£tivÆue
(
L
->
t›
, 
	`va_¨g
(
¨gp
, ));

423 
t›2°r
;

426 
	`£tivÆue
(
L
->
t›
, 
	`ˇ°
(
lua_I¡egî
, 
	`va_¨g
(
¨gp
, 
l_uacI¡
)));

427 
t›2°r
;

430 
	`£tÊtvÆue
(
L
->
t›
, 
	`ˇ°_num
(
	`va_¨g
(
¨gp
, 
l_uacNumbî
)));

431 
t›2°r
:

432 
	`luaD_ö˘›
(
L
);

433 
	`luaO_to°rög
(
L
, L->
t›
 - 1);

437 
buff
[4*(*) + 8];

438 
l
 = 
	`l_•rötf
(
buff
, (buff), "%p", 
	`va_¨g
(
¨gp
, *));

439 
	`push°r
(
L
, 
buff
, 
l
);

443 
buff
[
UTF8BUFFSZ
];

444 
l
 = 
	`luaO_utf8esc
(
buff
, 
	`ˇ°
(, 
	`va_¨g
(
¨gp
, )));

445 
	`push°r
(
L
, 
buff
 + 
UTF8BUFFSZ
 - 
l
,Ü);

449 
	`push°r
(
L
, "%", 1);

453 
	`luaG_ru√º‹
(
L
, "invalid option '%%%c'Åo 'lua_pushfstring'",

454 *(
e
 + 1));

457 
n
 += 2;

458 
fmt
 = 
e
+2;

460 
	`luaD_check°ack
(
L
, 1);

461 
	`push°r
(
L
, 
fmt
, 
	`°æí
(fmt));

462 i‡(
n
 > 0Ë
	`luaV_c⁄ˇt
(
L
,Ç + 1);

463  
	`svÆue
(
L
->
t›
 - 1);

464 
	}
}

467 c⁄° *
	$luaO_pushf°rög
 (
lua_Sèã
 *
L
, c⁄° *
fmt
, ...) {

468 c⁄° *
msg
;

469 
va_li°
 
¨gp
;

470 
	`va_°¨t
(
¨gp
, 
fmt
);

471 
msg
 = 
	`luaO_pushvf°rög
(
L
, 
fmt
, 
¨gp
);

472 
	`va_íd
(
¨gp
);

473  
msg
;

474 
	}
}

478 
	#LL
(
x
Ë((x)/(Ë- 1)

	)

480 
	#RETS
 "..."

	)

481 
	#PRE
 "[°rög \""

	)

482 
	#POS
 "\"]"

	)

484 
	#add°r
(
a
,
b
,
l
Ë–
	`mem˝y
◊,b,÷Ë* ()),á +÷Ë)

	)

486 
	$luaO_chunkid
 (*
out
, c⁄° *
sour˚
, 
size_t
 
bufÊí
) {

487 
size_t
 
l
 = 
	`°æí
(
sour˚
);

488 i‡(*
sour˚
 == '=') {

489 i‡(
l
 <
bufÊí
)

490 
	`mem˝y
(
out
, 
sour˚
 + 1, 
l
 * ());

492 
	`add°r
(
out
, 
sour˚
 + 1, 
bufÊí
 - 1);

493 *
out
 = '\0';

496 i‡(*
sour˚
 == '@') {

497 i‡(
l
 <
bufÊí
)

498 
	`mem˝y
(
out
, 
sour˚
 + 1, 
l
 * ());

500 
	`add°r
(
out
, 
RETS
, 
	`LL
(RETS));

501 
bufÊí
 -
	`LL
(
RETS
);

502 
	`mem˝y
(
out
, 
sour˚
 + 1 + 
l
 - 
bufÊí
, bufflen * ());

506 c⁄° *
∆
 = 
	`°rchr
(
sour˚
, '\n');

507 
	`add°r
(
out
, 
PRE
, 
	`LL
(PRE));

508 
bufÊí
 -
	`LL
(
PRE
 
RETS
 
POS
) + 1;

509 i‡(
l
 < 
bufÊí
 && 
∆
 =
NULL
) {

510 
	`add°r
(
out
, 
sour˚
, 
l
);

513 i‡(
∆
 !
NULL
Ë
l
 =Ç»- 
sour˚
;

514 i‡(
l
 > 
bufÊí
)Ü = bufflen;

515 
	`add°r
(
out
, 
sour˚
, 
l
);

516 
	`add°r
(
out
, 
RETS
, 
	`LL
(RETS));

518 
	`mem˝y
(
out
, 
POS
, (
	`LL
(POS) + 1) * ());

520 
	}
}

	@lib/lua/lua-5.3.4/src/lobject.h

8 #i‚de‡
lobje˘_h


9 
	#lobje˘_h


	)

12 
	~<°d¨g.h
>

15 
	~"Œimôs.h
"

16 
	~"lua.h
"

22 
	#LUA_TPROTO
 
LUA_NUMTAGS


	)

23 
	#LUA_TDEADKEY
 (
LUA_NUMTAGS
+1Ë

	)

28 
	#LUA_TOTALTAGS
 (
LUA_TPROTO
 + 2)

	)

47 
	#LUA_TLCL
 (
LUA_TFUNCTION
 | (0 << 4)Ë

	)

48 
	#LUA_TLCF
 (
LUA_TFUNCTION
 | (1 << 4)Ë

	)

49 
	#LUA_TCCL
 (
LUA_TFUNCTION
 | (2 << 4)Ë

	)

53 
	#LUA_TSHRSTR
 (
LUA_TSTRING
 | (0 << 4)Ë

	)

54 
	#LUA_TLNGSTR
 (
LUA_TSTRING
 | (1 << 4)Ë

	)

58 
	#LUA_TNUMFLT
 (
LUA_TNUMBER
 | (0 << 4)Ë

	)

59 
	#LUA_TNUMINT
 (
LUA_TNUMBER
 | (1 << 4)Ë

	)

63 
	#BIT_ISCOLLECTABLE
 (1 << 6)

	)

66 
	#˘b
(
t
Ë(—Ë| 
BIT_ISCOLLECTABLE
)

	)

72 
GCObje˘
 
	tGCObje˘
;

79 
	#Comm⁄Hódî
 
GCObje˘
 *
√xt
; 
lu_byã
 
â
;Üu_byã 
m¨ked


	)

85 
	sGCObje˘
 {

86 
	mComm⁄Hódî
;

100 
	uVÆue
 {

101 
GCObje˘
 *
	mgc
;

102 *
	mp
;

103 
	mb
;

104 
lua_CFun˘i⁄
 
	mf
;

105 
lua_I¡egî
 
	mi
;

106 
lua_Numbî
 
	mn
;

107 } 
	tVÆue
;

110 
	#TVÆuefõlds
 
VÆue
 
vÆue_
; 
â_


	)

113 
	slua_TVÆue
 {

114 
	mTVÆuefõlds
;

115 } 
	tTVÆue
;

120 
	#NILCONSTANT
 {
NULL
}, 
LUA_TNIL


	)

123 
	#vÆ_
(
o
Ë((o)->
vÆue_
)

	)

127 
	#πty≥
(
o
Ë((o)->
â_
)

	)

130 
	#nov¨ü¡
(
x
Ë((xË& 0x0F)

	)

133 
	#ây≥
(
o
Ë(
	`πty≥
(oË& 0x3F)

	)

136 
	#ânov
(
o
Ë(
	`nov¨ü¡
(
	`πty≥
(o)))

	)

140 
	#checkèg
(
o
,
t
Ë(
	`πty≥
(oË=—))

	)

141 
	#checkty≥
(
o
,
t
Ë(
	`ânov
(oË=—))

	)

142 
	#âi¢umbî
(
o
Ë
	`checkty≥
((o), 
LUA_TNUMBER
)

	)

143 
	#âisÊﬂt
(
o
Ë
	`checkèg
((o), 
LUA_TNUMFLT
)

	)

144 
	#âisöãgî
(
o
Ë
	`checkèg
((o), 
LUA_TNUMINT
)

	)

145 
	#âi¢û
(
o
Ë
	`checkèg
((o), 
LUA_TNIL
)

	)

146 
	#âisboﬁón
(
o
Ë
	`checkèg
((o), 
LUA_TBOOLEAN
)

	)

147 
	#âi¶ightu£rd©a
(
o
Ë
	`checkèg
((o), 
LUA_TLIGHTUSERDATA
)

	)

148 
	#âis°rög
(
o
Ë
	`checkty≥
((o), 
LUA_TSTRING
)

	)

149 
	#âisshr°rög
(
o
Ë
	`checkèg
((o), 
	`˘b
(
LUA_TSHRSTR
))

	)

150 
	#âi¶ng°rög
(
o
Ë
	`checkèg
((o), 
	`˘b
(
LUA_TLNGSTR
))

	)

151 
	#âi°abÀ
(
o
Ë
	`checkèg
((o), 
	`˘b
(
LUA_TTABLE
))

	)

152 
	#âisfun˘i⁄
(
o
Ë
	`checkty≥
(o, 
LUA_TFUNCTION
)

	)

153 
	#âis˛osuª
(
o
Ë((
	`πty≥
(oË& 0x1FË=
LUA_TFUNCTION
)

	)

154 
	#âisC˛osuª
(
o
Ë
	`checkèg
((o), 
	`˘b
(
LUA_TCCL
))

	)

155 
	#âisL˛osuª
(
o
Ë
	`checkèg
((o), 
	`˘b
(
LUA_TLCL
))

	)

156 
	#âi¶cf
(
o
Ë
	`checkèg
((o), 
LUA_TLCF
)

	)

157 
	#âisfuŒu£rd©a
(
o
Ë
	`checkèg
((o), 
	`˘b
(
LUA_TUSERDATA
))

	)

158 
	#âi°hªad
(
o
Ë
	`checkèg
((o), 
	`˘b
(
LUA_TTHREAD
))

	)

159 
	#âisdódkey
(
o
Ë
	`checkèg
((o), 
LUA_TDEADKEY
)

	)

163 
	#ivÆue
(
o
Ë
	`check_exp
(
	`âisöãgî
(o), 
	`vÆ_
(o).
i
)

	)

164 
	#ÊtvÆue
(
o
Ë
	`check_exp
(
	`âisÊﬂt
(o), 
	`vÆ_
(o).
n
)

	)

165 
	#nvÆue
(
o
Ë
	`check_exp
(
	`âi¢umbî
(o), \

166 (
	`âisöãgî
(
o
Ë? 
	`ˇ°_num
(
	`ivÆue
(o)Ë: 
	`ÊtvÆue
(o)))

	)

167 
	#gcvÆue
(
o
Ë
	`check_exp
(
	`iscﬁÀ˘abÀ
(o), 
	`vÆ_
(o).
gc
)

	)

168 
	#pvÆue
(
o
Ë
	`check_exp
(
	`âi¶ightu£rd©a
(o), 
	`vÆ_
(o).
p
)

	)

169 
	#tsvÆue
(
o
Ë
	`check_exp
(
	`âis°rög
(o), 
	`gco2ts
(
	`vÆ_
(o).
gc
))

	)

170 
	#uvÆue
(
o
Ë
	`check_exp
(
	`âisfuŒu£rd©a
(o), 
	`gco2u
(
	`vÆ_
(o).
gc
))

	)

171 
	#˛vÆue
(
o
Ë
	`check_exp
(
	`âis˛osuª
(o), 
	`gco2˛
(
	`vÆ_
(o).
gc
))

	)

172 
	#˛LvÆue
(
o
Ë
	`check_exp
(
	`âisL˛osuª
(o), 
	`gco2l˛
(
	`vÆ_
(o).
gc
))

	)

173 
	#˛CvÆue
(
o
Ë
	`check_exp
(
	`âisC˛osuª
(o), 
	`gco2c˛
(
	`vÆ_
(o).
gc
))

	)

174 
	#fvÆue
(
o
Ë
	`check_exp
(
	`âi¶cf
(o), 
	`vÆ_
(o).
f
)

	)

175 
	#hvÆue
(
o
Ë
	`check_exp
(
	`âi°abÀ
(o), 
	`gco2t
(
	`vÆ_
(o).
gc
))

	)

176 
	#bvÆue
(
o
Ë
	`check_exp
(
	`âisboﬁón
(o), 
	`vÆ_
(o).
b
)

	)

177 
	#thvÆue
(
o
Ë
	`check_exp
(
	`âi°hªad
(o), 
	`gco2th
(
	`vÆ_
(o).
gc
))

	)

179 
	#dódvÆue
(
o
Ë
	`check_exp
(
	`âisdódkey
(o), 
	`ˇ°
(*, 
	`vÆ_
(o).
gc
))

	)

181 
	#l_isÁl£
(
o
Ë(
	`âi¢û
(oË|| (
	`âisboﬁón
(oË&& 
	`bvÆue
(oË=0))

	)

184 
	#iscﬁÀ˘abÀ
(
o
Ë(
	`πty≥
(oË& 
BIT_ISCOLLECTABLE
)

	)

188 
	#righât
(
obj
Ë(
	`ây≥
(objË=
	`gcvÆue
(obj)->
â
)

	)

190 
	#checklivíess
(
L
,
obj
) \

191 
	`lua_l⁄gas£π
(!
	`iscﬁÀ˘abÀ
(
obj
) || \

192 (
	`righât
(
obj
Ë&& (
L
 =
NULL
 || !
	`isdód
(
	`G
(L),
	`gcvÆue
(obj)))))

	)

196 
	#£ât_
(
o
,
t
Ë((o)->
â_
=—))

	)

198 
	#£tÊtvÆue
(
obj
,
x
) \

199 { 
TVÆue
 *
io
=(
obj
); 
	`vÆ_
(io).
n
=(
x
); 
	`£ât_
(io, 
LUA_TNUMFLT
); }

	)

201 
	#chgÊtvÆue
(
obj
,
x
) \

202 { 
TVÆue
 *
io
=(
obj
); 
	`lua_as£π
(
	`âisÊﬂt
(io)); 
	`vÆ_
(io).
n
=(
x
); }

	)

204 
	#£tivÆue
(
obj
,
x
) \

205 { 
TVÆue
 *
io
=(
obj
); 
	`vÆ_
(io).
i
=(
x
); 
	`£ât_
(io, 
LUA_TNUMINT
); }

	)

207 
	#chgivÆue
(
obj
,
x
) \

208 { 
TVÆue
 *
io
=(
obj
); 
	`lua_as£π
(
	`âisöãgî
(io)); 
	`vÆ_
(io).
i
=(
x
); }

	)

210 
	#£äûvÆue
(
obj
Ë
	`£ât_
(obj, 
LUA_TNIL
)

	)

212 
	#£tfvÆue
(
obj
,
x
) \

213 { 
TVÆue
 *
io
=(
obj
); 
	`vÆ_
(io).
f
=(
x
); 
	`£ât_
(io, 
LUA_TLCF
); }

	)

215 
	#£çvÆue
(
obj
,
x
) \

216 { 
TVÆue
 *
io
=(
obj
); 
	`vÆ_
(io).
p
=(
x
); 
	`£ât_
(io, 
LUA_TLIGHTUSERDATA
); }

	)

218 
	#£tbvÆue
(
obj
,
x
) \

219 { 
TVÆue
 *
io
=(
obj
); 
	`vÆ_
(io).
b
=(
x
); 
	`£ât_
(io, 
LUA_TBOOLEAN
); }

	)

221 
	#£tgcovÆue
(
L
,
obj
,
x
) \

222 { 
TVÆue
 *
io
 = (
obj
); 
GCObje˘
 *
i_g
=(
x
); \

223 
	`vÆ_
(
io
).
gc
 = 
i_g
; 
	`£ât_
(io, 
	`˘b
(i_g->
â
)); }

	)

225 
	#£tsvÆue
(
L
,
obj
,
x
) \

226 { 
TVÆue
 *
io
 = (
obj
); 
TSåög
 *
x_
 = (
x
); \

227 
	`vÆ_
(
io
).
gc
 = 
	`obj2gco
(
x_
); 
	`£ât_
(io, 
	`˘b
(x_->
â
)); \

228 
	`checklivíess
(
L
,
io
); }

	)

230 
	#£tuvÆue
(
L
,
obj
,
x
) \

231 { 
TVÆue
 *
io
 = (
obj
); 
Ud©a
 *
x_
 = (
x
); \

232 
	`vÆ_
(
io
).
gc
 = 
	`obj2gco
(
x_
); 
	`£ât_
(io, 
	`˘b
(
LUA_TUSERDATA
)); \

233 
	`checklivíess
(
L
,
io
); }

	)

235 
	#£âhvÆue
(
L
,
obj
,
x
) \

236 { 
TVÆue
 *
io
 = (
obj
); 
lua_Sèã
 *
x_
 = (
x
); \

237 
	`vÆ_
(
io
).
gc
 = 
	`obj2gco
(
x_
); 
	`£ât_
(io, 
	`˘b
(
LUA_TTHREAD
)); \

238 
	`checklivíess
(
L
,
io
); }

	)

240 
	#£t˛LvÆue
(
L
,
obj
,
x
) \

241 { 
TVÆue
 *
io
 = (
obj
); 
LClosuª
 *
x_
 = (
x
); \

242 
	`vÆ_
(
io
).
gc
 = 
	`obj2gco
(
x_
); 
	`£ât_
(io, 
	`˘b
(
LUA_TLCL
)); \

243 
	`checklivíess
(
L
,
io
); }

	)

245 
	#£t˛CvÆue
(
L
,
obj
,
x
) \

246 { 
TVÆue
 *
io
 = (
obj
); 
CClosuª
 *
x_
 = (
x
); \

247 
	`vÆ_
(
io
).
gc
 = 
	`obj2gco
(
x_
); 
	`£ât_
(io, 
	`˘b
(
LUA_TCCL
)); \

248 
	`checklivíess
(
L
,
io
); }

	)

250 
	#£thvÆue
(
L
,
obj
,
x
) \

251 { 
TVÆue
 *
io
 = (
obj
); 
TabÀ
 *
x_
 = (
x
); \

252 
	`vÆ_
(
io
).
gc
 = 
	`obj2gco
(
x_
); 
	`£ât_
(io, 
	`˘b
(
LUA_TTABLE
)); \

253 
	`checklivíess
(
L
,
io
); }

	)

255 
	#£tdódvÆue
(
obj
Ë
	`£ât_
(obj, 
LUA_TDEADKEY
)

	)

259 
	#£tobj
(
L
,
obj1
,
obj2
) \

260 { 
TVÆue
 *
io1
=(
obj1
); *io1 = *(
obj2
); \

261 ()
L
; 
	`checklivíess
(L,
io1
); }

	)

269 
	#£tobjs2s
 
£tobj


	)

271 
	#£tobj2s
 
£tobj


	)

272 
	#£tsvÆue2s
 
£tsvÆue


	)

273 
	#£thvÆue2s
 
£thvÆue


	)

274 
	#£çtvÆue2s
 
£çtvÆue


	)

276 
	#£tobjt2t
 
£tobj


	)

278 
	#£tobj2n
 
£tobj


	)

279 
	#£tsvÆue2n
 
£tsvÆue


	)

282 
	#£tobj2t
(
L
,
o1
,
o2
Ë(()L, *(o1)=*(o2), 
	`checklivíess
(L,(o1)))

	)

294 
TVÆue
 *
	tStkId
;

303 
	sTSåög
 {

304 
	mComm⁄Hódî
;

305 
lu_byã
 
	mexåa
;

306 
lu_byã
 
	mshæí
;

307 
	mhash
;

309 
size_t
 
	m gÀn
;

310 
TSåög
 *
	mh√xt
;

311 } 
	mu
;

312 } 
	tTSåög
;

318 
	uUTSåög
 {

319 
L_UmaxÆign
 
	mdummy
;

320 
TSåög
 
	mtsv
;

321 } 
	tUTSåög
;

328 
	#gë°r
(
ts
) \

329 
	`check_exp
(((
ts
)->
exåa
), 
	`ˇ°
(*, (ts)Ë+ (
UTSåög
))

	)

333 
	#svÆue
(
o
Ë
	`gë°r
(
	`tsvÆue
(o))

	)

336 
	#ts¶í
(
s
Ë((s)->
â
 =
LUA_TSHRSTR
 ? (s)->
shæí
 : (s)->
u
.
 gÀn
)

	)

339 
	#v¶í
(
o
Ë
	`ts¶í
(
	`tsvÆue
(o))

	)

346 
	sUd©a
 {

347 
	mComm⁄Hódî
;

348 
lu_byã
 
	mâuv_
;

349 
TabÀ
 *
	mmë©abÀ
;

350 
size_t
 
	mÀn
;

351 
VÆue
 
	mu£r_
;

352 } 
	tUd©a
;

358 
	uUUd©a
 {

359 
L_UmaxÆign
 
	mdummy
;

360 
Ud©a
 
	muv
;

361 } 
	tUUd©a
;

368 
	#gëud©amem
(
u
) \

369 
	`check_exp
(((
u
)->
âuv_
), (
	`ˇ°
(*, (u)Ë+ (
UUd©a
)))

	)

371 
	#£tu£rvÆue
(
L
,
u
,
o
) \

372 { c⁄° 
TVÆue
 *
io
=(
o
); 
Ud©a
 *
iu
 = (
u
); \

373 
iu
->
u£r_
 = 
io
->
vÆue_
; iu->
âuv_
 = 
	`πty≥
(io); \

374 
	`checklivíess
(
L
,
io
); }

	)

377 
	#gëu£rvÆue
(
L
,
u
,
o
) \

378 { 
TVÆue
 *
io
=(
o
); c⁄° 
Ud©a
 *
iu
 = (
u
); \

379 
io
->
vÆue_
 = 
iu
->
u£r_
; 
	`£ât_
(io, iu->
âuv_
); \

380 
	`checklivíess
(
L
,
io
); }

	)

386 
	sUpvÆdesc
 {

387 
TSåög
 *
	m«me
;

388 
lu_byã
 
	mö°ack
;

389 
lu_byã
 
	midx
;

390 } 
	tUpvÆdesc
;

397 
	sLocV¨
 {

398 
TSåög
 *
	mv¨«me
;

399 
	m°¨çc
;

400 
	mídpc
;

401 } 
	tLocV¨
;

407 
	sPrŸo
 {

408 
	mComm⁄Hódî
;

409 
lu_byã
 
	mnum∑øms
;

410 
lu_byã
 
	mis_v¨¨g
;

411 
lu_byã
 
	mmax°acksize
;

412 
	msizeupvÆues
;

413 
	msizek
;

414 
	msizecode
;

415 
	msizñöeöfo
;

416 
	msizï
;

417 
	msizñocv¨s
;

418 
	mlöedeföed
;

419 
	mœ°löedeföed
;

420 
TVÆue
 *
	mk
;

421 
In°ru˘i⁄
 *
	mcode
;

422 
PrŸo
 **
	mp
;

423 *
	mlöeöfo
;

424 
LocV¨
 *
	mlocv¨s
;

425 
UpvÆdesc
 *
	mupvÆues
;

426 
LClosuª
 *
	mˇche
;

427 
TSåög
 *
	msour˚
;

428 
GCObje˘
 *
	mg˛i°
;

429 } 
	tPrŸo
;

436 
UpVÆ
 
	tUpVÆ
;

443 
	#ClosuªHódî
 \

444 
Comm⁄Hódî
; 
lu_byã
 
nupvÆues
; 
GCObje˘
 *
g˛i°


	)

446 
	sCClosuª
 {

447 
	mClosuªHódî
;

448 
lua_CFun˘i⁄
 
	mf
;

449 
TVÆue
 
	mupvÆue
[1];

450 } 
	tCClosuª
;

453 
	sLClosuª
 {

454 
	mClosuªHódî
;

455 
PrŸo
 *
	mp
;

456 
UpVÆ
 *
	mupvÆs
[1];

457 } 
	tLClosuª
;

460 
	uClosuª
 {

461 
CClosuª
 
	mc
;

462 
LClosuª
 
	ml
;

463 } 
	tClosuª
;

466 
	#isLfun˘i⁄
(
o
Ë
	`âisL˛osuª
(o)

	)

468 
	#gë¥Ÿo
(
o
Ë(
	`˛LvÆue
(o)->
p
)

	)

475 
	uTKey
 {

477 
	mTVÆuefõlds
;

478 
	m√xt
;

479 } 
	mnk
;

480 
TVÆue
 
	mtvk
;

481 } 
	tTKey
;

485 
	#£äodekey
(
L
,
key
,
obj
) \

486 { 
TKey
 *
k_
=(
key
); c⁄° 
TVÆue
 *
io_
=(
obj
); \

487 
k_
->
nk
.
vÆue_
 = 
io_
->vÆue_; k_->nk.
â_
 = io_->tt_; \

488 ()
L
; 
	`checklivíess
(L,
io_
); }

	)

491 
	sNode
 {

492 
TVÆue
 
	mi_vÆ
;

493 
TKey
 
	mi_key
;

494 } 
	tNode
;

497 
	sTabÀ
 {

498 
	mComm⁄Hódî
;

499 
lu_byã
 
	mÊags
;

500 
lu_byã
 
	mlsizíode
;

501 
	msizóºay
;

502 
TVÆue
 *
	m¨øy
;

503 
Node
 *
	mnode
;

504 
Node
 *
	mœ°‰ì
;

505 
TabÀ
 *
	mmë©abÀ
;

506 
GCObje˘
 *
	mg˛i°
;

507 } 
	tTabÀ
;

514 
	#lmod
(
s
,
size
) \

515 (
	`check_exp
((
size
&(size-1))==0, (
	`ˇ°
(, (
s
Ë& ((size)-1)))))

	)

518 
	#twŸo
(
x
Ë(1<<(x))

	)

519 
	#sizíode
(
t
Ë(
	`twŸo
(—)->
lsizíode
))

	)

525 
	#luaO_nûobje˘
 (&
luaO_nûobje˘_
)

	)

528 
LUAI_DDEC
 c⁄° 
TVÆue
 
	gluaO_nûobje˘_
;

531 
	#UTF8BUFFSZ
 8

	)

533 
LUAI_FUNC
 
luaO_öt2fb
 (
x
);

534 
LUAI_FUNC
 
luaO_fb2öt
 (
x
);

535 
LUAI_FUNC
 
luaO_utf8esc
 (*
buff
, 
x
);

536 
LUAI_FUNC
 
luaO_˚ûlog2
 (
x
);

537 
LUAI_FUNC
 
luaO_¨ôh
 (
lua_Sèã
 *
L
, 
›
, c⁄° 
TVÆue
 *
p1
,

538 c⁄° 
TVÆue
 *
p2
, TVÆuê*
ªs
);

539 
LUAI_FUNC
 
size_t
 
luaO_°r2num
 (c⁄° *
s
, 
TVÆue
 *
o
);

540 
LUAI_FUNC
 
luaO_hexavÆue
 (
c
);

541 
LUAI_FUNC
 
luaO_to°rög
 (
lua_Sèã
 *
L
, 
StkId
 
obj
);

542 
LUAI_FUNC
 c⁄° *
luaO_pushvf°rög
 (
lua_Sèã
 *
L
, c⁄° *
fmt
,

543 
va_li°
 
¨gp
);

544 
LUAI_FUNC
 c⁄° *
luaO_pushf°rög
 (
lua_Sèã
 *
L
, c⁄° *
fmt
, ...);

545 
LUAI_FUNC
 
luaO_chunkid
 (*
out
, c⁄° *
sour˚
, 
size_t
 
Àn
);

	@lib/lua/lua-5.3.4/src/lopcodes.c

7 
	#l›codes_c


	)

8 
	#LUA_CORE


	)

10 
	~"Õªfix.h
"

13 
	~<°ddef.h
>

15 
	~"l›codes.h
"

20 
LUAI_DDEF
 c⁄° *c⁄° 
	gluaP_›«mes
[
NUM_OPCODES
+1] = {

68 
NULL


72 
	#›mode
(
t
,
a
,
b
,
c
,
m
Ë((—)<<7Ë| (◊)<<6Ë| ((b)<<4Ë| ((c)<<2Ë| (m))

	)

74 
LUAI_DDEF
 c⁄° 
lu_byã
 
	gluaP_›modes
[
NUM_OPCODES
] = {

76 
›mode
(0, 1, 
OpArgR
, 
OpArgN
, 
iABC
)

77 ,
›mode
(0, 1, 
OpArgK
, 
OpArgN
, 
iABx
)

78 ,
›mode
(0, 1, 
OpArgN
, OpArgN, 
iABx
)

79 ,
›mode
(0, 1, 
OpArgU
, OpArgU, 
iABC
)

80 ,
›mode
(0, 1, 
OpArgU
, 
OpArgN
, 
iABC
)

81 ,
›mode
(0, 1, 
OpArgU
, 
OpArgN
, 
iABC
)

82 ,
›mode
(0, 1, 
OpArgU
, 
OpArgK
, 
iABC
)

83 ,
›mode
(0, 1, 
OpArgR
, 
OpArgK
, 
iABC
)

84 ,
›mode
(0, 0, 
OpArgK
, OpArgK, 
iABC
)

85 ,
›mode
(0, 0, 
OpArgU
, 
OpArgN
, 
iABC
)

86 ,
›mode
(0, 0, 
OpArgK
, OpArgK, 
iABC
)

87 ,
›mode
(0, 1, 
OpArgU
, OpArgU, 
iABC
)

88 ,
›mode
(0, 1, 
OpArgR
, 
OpArgK
, 
iABC
)

89 ,
›mode
(0, 1, 
OpArgK
, OpArgK, 
iABC
)

90 ,
›mode
(0, 1, 
OpArgK
, OpArgK, 
iABC
)

91 ,
›mode
(0, 1, 
OpArgK
, OpArgK, 
iABC
)

92 ,
›mode
(0, 1, 
OpArgK
, OpArgK, 
iABC
)

93 ,
›mode
(0, 1, 
OpArgK
, OpArgK, 
iABC
)

94 ,
›mode
(0, 1, 
OpArgK
, OpArgK, 
iABC
)

95 ,
›mode
(0, 1, 
OpArgK
, OpArgK, 
iABC
)

96 ,
›mode
(0, 1, 
OpArgK
, OpArgK, 
iABC
)

97 ,
›mode
(0, 1, 
OpArgK
, OpArgK, 
iABC
)

98 ,
›mode
(0, 1, 
OpArgK
, OpArgK, 
iABC
)

99 ,
›mode
(0, 1, 
OpArgK
, OpArgK, 
iABC
)

100 ,
›mode
(0, 1, 
OpArgK
, OpArgK, 
iABC
)

101 ,
›mode
(0, 1, 
OpArgR
, 
OpArgN
, 
iABC
)

102 ,
›mode
(0, 1, 
OpArgR
, 
OpArgN
, 
iABC
)

103 ,
›mode
(0, 1, 
OpArgR
, 
OpArgN
, 
iABC
)

104 ,
›mode
(0, 1, 
OpArgR
, 
OpArgN
, 
iABC
)

105 ,
›mode
(0, 1, 
OpArgR
, OpArgR, 
iABC
)

106 ,
›mode
(0, 0, 
OpArgR
, 
OpArgN
, 
iAsBx
)

107 ,
›mode
(1, 0, 
OpArgK
, OpArgK, 
iABC
)

108 ,
›mode
(1, 0, 
OpArgK
, OpArgK, 
iABC
)

109 ,
›mode
(1, 0, 
OpArgK
, OpArgK, 
iABC
)

110 ,
›mode
(1, 0, 
OpArgN
, 
OpArgU
, 
iABC
)

111 ,
›mode
(1, 1, 
OpArgR
, 
OpArgU
, 
iABC
)

112 ,
›mode
(0, 1, 
OpArgU
, OpArgU, 
iABC
)

113 ,
›mode
(0, 1, 
OpArgU
, OpArgU, 
iABC
)

114 ,
›mode
(0, 0, 
OpArgU
, 
OpArgN
, 
iABC
)

115 ,
›mode
(0, 1, 
OpArgR
, 
OpArgN
, 
iAsBx
)

116 ,
›mode
(0, 1, 
OpArgR
, 
OpArgN
, 
iAsBx
)

117 ,
›mode
(0, 0, 
OpArgN
, 
OpArgU
, 
iABC
)

118 ,
›mode
(0, 1, 
OpArgR
, 
OpArgN
, 
iAsBx
)

119 ,
›mode
(0, 0, 
OpArgU
, OpArgU, 
iABC
)

120 ,
›mode
(0, 1, 
OpArgU
, 
OpArgN
, 
iABx
)

121 ,
›mode
(0, 1, 
OpArgU
, 
OpArgN
, 
iABC
)

122 ,
›mode
(0, 0, 
OpArgU
, OpArgU, 
iAx
)

	@lib/lua/lua-5.3.4/src/lopcodes.h

7 #i‚de‡
l›codes_h


8 
	#l›codes_h


	)

10 
	~"Œimôs.h
"

32 
	eOpMode
 {
	miABC
, 
	miABx
, 
	miAsBx
, 
	miAx
};

38 
	#SIZE_C
 9

	)

39 
	#SIZE_B
 9

	)

40 
	#SIZE_Bx
 (
SIZE_C
 + 
SIZE_B
)

	)

41 
	#SIZE_A
 8

	)

42 
	#SIZE_Ax
 (
SIZE_C
 + 
SIZE_B
 + 
SIZE_A
)

	)

44 
	#SIZE_OP
 6

	)

46 
	#POS_OP
 0

	)

47 
	#POS_A
 (
POS_OP
 + 
SIZE_OP
)

	)

48 
	#POS_C
 (
POS_A
 + 
SIZE_A
)

	)

49 
	#POS_B
 (
POS_C
 + 
SIZE_C
)

	)

50 
	#POS_Bx
 
POS_C


	)

51 
	#POS_Ax
 
POS_A


	)

59 #i‡
SIZE_Bx
 < 
LUAI_BITSINT
-1

60 
	#MAXARG_Bx
 ((1<<
SIZE_Bx
)-1)

	)

61 
	#MAXARG_sBx
 (
MAXARG_Bx
>>1Ë

	)

63 
	#MAXARG_Bx
 
MAX_INT


	)

64 
	#MAXARG_sBx
 
MAX_INT


	)

67 #i‡
SIZE_Ax
 < 
LUAI_BITSINT
-1

68 
	#MAXARG_Ax
 ((1<<
SIZE_Ax
)-1)

	)

70 
	#MAXARG_Ax
 
MAX_INT


	)

74 
	#MAXARG_A
 ((1<<
SIZE_A
)-1)

	)

75 
	#MAXARG_B
 ((1<<
SIZE_B
)-1)

	)

76 
	#MAXARG_C
 ((1<<
SIZE_C
)-1)

	)

80 
	#MASK1
(
n
,
p
Ë((~((~(
In°ru˘i⁄
)0)<<“)))<<’))

	)

83 
	#MASK0
(
n
,
p
Ë(~
	`MASK1
“,p))

	)

89 
	#GET_OPCODE
(
i
Ë(
	`ˇ°
(
OpCode
, ((i)>>
POS_OP
Ë& 
	`MASK1
(
SIZE_OP
,0)))

	)

90 
	#SET_OPCODE
(
i
,
o
Ë((iË(((i)&
	`MASK0
(
SIZE_OP
,
POS_OP
)) | \

91 ((
	`ˇ°
(
In°ru˘i⁄
, 
o
)<<
POS_OP
)&
	`MASK1
(
SIZE_OP
,POS_OP))))

	)

93 
	#gë¨g
(
i
,
pos
,
size
Ë(
	`ˇ°
(, ((i)>>posË& 
	`MASK1
(size,0)))

	)

94 
	#£èrg
(
i
,
v
,
pos
,
size
Ë((iË(((i)&
	`MASK0
(size,pos)) | \

95 ((
	`ˇ°
(
In°ru˘i⁄
, 
v
)<<
pos
)&
	`MASK1
(
size
,pos))))

	)

97 
	#GETARG_A
(
i
Ë
	`gë¨g
(i, 
POS_A
, 
SIZE_A
)

	)

98 
	#SETARG_A
(
i
,
v
Ë
	`£èrg
(i, v, 
POS_A
, 
SIZE_A
)

	)

100 
	#GETARG_B
(
i
Ë
	`gë¨g
(i, 
POS_B
, 
SIZE_B
)

	)

101 
	#SETARG_B
(
i
,
v
Ë
	`£èrg
(i, v, 
POS_B
, 
SIZE_B
)

	)

103 
	#GETARG_C
(
i
Ë
	`gë¨g
(i, 
POS_C
, 
SIZE_C
)

	)

104 
	#SETARG_C
(
i
,
v
Ë
	`£èrg
(i, v, 
POS_C
, 
SIZE_C
)

	)

106 
	#GETARG_Bx
(
i
Ë
	`gë¨g
(i, 
POS_Bx
, 
SIZE_Bx
)

	)

107 
	#SETARG_Bx
(
i
,
v
Ë
	`£èrg
(i, v, 
POS_Bx
, 
SIZE_Bx
)

	)

109 
	#GETARG_Ax
(
i
Ë
	`gë¨g
(i, 
POS_Ax
, 
SIZE_Ax
)

	)

110 
	#SETARG_Ax
(
i
,
v
Ë
	`£èrg
(i, v, 
POS_Ax
, 
SIZE_Ax
)

	)

112 
	#GETARG_sBx
(
i
Ë(
	`GETARG_Bx
(i)-
MAXARG_sBx
)

	)

113 
	#SETARG_sBx
(
i
,
b
Ë
	`SETARG_Bx
((i),
	`ˇ°
(, (b)+
MAXARG_sBx
))

	)

116 
	#CREATE_ABC
(
o
,
a
,
b
,
c
Ë((
	`ˇ°
(
In°ru˘i⁄
, o)<<
POS_OP
) \

117 | (
	`ˇ°
(
In°ru˘i⁄
, 
a
)<<
POS_A
) \

118 | (
	`ˇ°
(
In°ru˘i⁄
, 
b
)<<
POS_B
) \

119 | (
	`ˇ°
(
In°ru˘i⁄
, 
c
)<<
POS_C
))

	)

121 
	#CREATE_ABx
(
o
,
a
,
bc
Ë((
	`ˇ°
(
In°ru˘i⁄
, o)<<
POS_OP
) \

122 | (
	`ˇ°
(
In°ru˘i⁄
, 
a
)<<
POS_A
) \

123 | (
	`ˇ°
(
In°ru˘i⁄
, 
bc
)<<
POS_Bx
))

	)

125 
	#CREATE_Ax
(
o
,
a
Ë((
	`ˇ°
(
In°ru˘i⁄
, o)<<
POS_OP
) \

126 | (
	`ˇ°
(
In°ru˘i⁄
, 
a
)<<
POS_Ax
))

	)

134 
	#BITRK
 (1 << (
SIZE_B
 - 1))

	)

137 
	#ISK
(
x
Ë((xË& 
BITRK
)

	)

140 
	#INDEXK
(
r
Ë(()‘Ë& ~
BITRK
)

	)

142 #i‡!
deföed
(
MAXINDEXRK
)

143 
	#MAXINDEXRK
 (
BITRK
 - 1)

	)

147 
	#RKASK
(
x
Ë((xË| 
BITRK
)

	)

153 
	#NO_REG
 
MAXARG_A


	)

171 
	mOP_MOVE
,

172 
	mOP_LOADK
,

173 
	mOP_LOADKX
,

174 
	mOP_LOADBOOL
,

175 
	mOP_LOADNIL
,

176 
	mOP_GETUPVAL
,

178 
	mOP_GETTABUP
,

179 
	mOP_GETTABLE
,

181 
	mOP_SETTABUP
,

182 
	mOP_SETUPVAL
,

183 
	mOP_SETTABLE
,

185 
	mOP_NEWTABLE
,

187 
	mOP_SELF
,

189 
	mOP_ADD
,

190 
	mOP_SUB
,

191 
	mOP_MUL
,

192 
	mOP_MOD
,

193 
	mOP_POW
,

194 
	mOP_DIV
,

195 
	mOP_IDIV
,

196 
	mOP_BAND
,

197 
	mOP_BOR
,

198 
	mOP_BXOR
,

199 
	mOP_SHL
,

200 
	mOP_SHR
,

201 
	mOP_UNM
,

202 
	mOP_BNOT
,

203 
	mOP_NOT
,

204 
	mOP_LEN
,

206 
	mOP_CONCAT
,

208 
	mOP_JMP
,

209 
	mOP_EQ
,

210 
	mOP_LT
,

211 
	mOP_LE
,

213 
	mOP_TEST
,

214 
	mOP_TESTSET
,

216 
	mOP_CALL
,

217 
	mOP_TAILCALL
,

218 
	mOP_RETURN
,

220 
	mOP_FORLOOP
,

222 
	mOP_FORPREP
,

224 
	mOP_TFORCALL
,

225 
	mOP_TFORLOOP
,

227 
	mOP_SETLIST
,

229 
	mOP_CLOSURE
,

231 
	mOP_VARARG
,

233 
	mOP_EXTRAARG


234 } 
	tOpCode
;

237 
	#NUM_OPCODES
 (
	`ˇ°
(, 
OP_EXTRAARG
Ë+ 1)

	)

274 
	eOpArgMask
 {

275 
	mOpArgN
,

276 
	mOpArgU
,

277 
	mOpArgR
,

278 
	mOpArgK


281 
LUAI_DDEC
 c⁄° 
lu_byã
 
	gluaP_›modes
[
NUM_OPCODES
];

283 
	#gëOpMode
(
m
Ë(
	`ˇ°
(
OpMode
, 
luaP_›modes
[m] & 3))

	)

284 
	#gëBMode
(
m
Ë(
	`ˇ°
(
OpArgMask
, (
luaP_›modes
[m] >> 4Ë& 3))

	)

285 
	#gëCMode
(
m
Ë(
	`ˇ°
(
OpArgMask
, (
luaP_›modes
[m] >> 2Ë& 3))

	)

286 
	#ã°AMode
(
m
Ë(
luaP_›modes
[m] & (1 << 6))

	)

287 
	#ã°TMode
(
m
Ë(
luaP_›modes
[m] & (1 << 7))

	)

290 
LUAI_DDEC
 c⁄° *c⁄° 
	gluaP_›«mes
[
NUM_OPCODES
+1];

294 
	#LFIELDS_PER_FLUSH
 50

	)

	@lib/lua/lua-5.3.4/src/loslib.c

7 
	#lo¶ib_c


	)

8 
	#LUA_LIB


	)

10 
	~"Õªfix.h
"

13 
	~<î∫o.h
>

14 
	~<loˇÀ.h
>

15 
	~<°dlib.h
>

16 
	~<°rög.h
>

17 
	~<time.h
>

19 
	~"lua.h
"

21 
	~"œuxlib.h
"

22 
	~"luÆib.h
"

31 #i‡!
deföed
(
LUA_STRFTIMEOPTIONS
)

34 
	#L_STRFTIMEC89
 "aAbBcdHIjmMpSUwWxXyYZ%"

	)

37 
	#L_STRFTIMEC99
 "aAbBcCdDeFgGhHIjmMnprRStTuUVwWxXyYzZ%" \

38 "||" "EcECExEXEyEY" "OdOeOHOIOmOMOSOuOUOVOwOWOy"

	)

41 
	#L_STRFTIMEWIN
 "aAbBcdHIjmMpSUwWxXyYzZ%" \

42 "||" "#c#x#d#H#I#j#m#M#S#U#w#W#y#Y"

	)

44 #i‡
deföed
(
LUA_USE_WINDOWS
)

45 
	#LUA_STRFTIMEOPTIONS
 
L_STRFTIMEWIN


	)

46 #ñi‡
deföed
(
LUA_USE_C89
)

47 
	#LUA_STRFTIMEOPTIONS
 
L_STRFTIMEC89


	)

49 
	#LUA_STRFTIMEOPTIONS
 
L_STRFTIMEC99


	)

62 #i‡!
deföed
(
l_time_t
)

66 
	#l_timë
 
lua_I¡egî


	)

67 
	#l_pushtime
(
L
,
t
Ë
	`lua_pushöãgî
(L,(
lua_I¡egî
)—))

	)

69 
time_t
 
	$l_checktime
 (
lua_Sèã
 *
L
, 
¨g
) {

70 
lua_I¡egî
 
t
 = 
	`luaL_checköãgî
(
L
, 
¨g
);

71 
	`luaL_¨gcheck
(
L
, (
time_t
)
t
 =t, 
¨g
, "time out-of-bounds");

72  (
time_t
)
t
;

73 
	}
}

78 #i‡!
deföed
(
l_gmtime
)

84 #i‡
deföed
(
LUA_USE_POSIX
)

86 
	#l_gmtime
(
t
,
r
Ë
	`gmtime_r
—,r)

	)

87 
	#l_loˇ…ime
(
t
,
r
Ë
	`loˇ…ime_r
—,r)

	)

92 
	#l_gmtime
(
t
,
r
Ë(()‘)->
tm_£c
, 
	`gmtime
—))

	)

93 
	#l_loˇ…ime
(
t
,
r
Ë(()‘)->
tm_£c
, 
	`loˇ…ime
—))

	)

109 #i‡!
deföed
(
lua_tm≤am
)

111 #i‡
deföed
(
LUA_USE_POSIX
)

113 
	~<uni°d.h
>

115 
	#LUA_TMPNAMBUFSIZE
 32

	)

117 #i‡!
deföed
(
LUA_TMPNAMTEMPLATE
)

118 
	#LUA_TMPNAMTEMPLATE
 "/tmp/lua_XXXXXX"

	)

121 
	#lua_tm≤am
(
b
,
e
) { \

122 
	`°r˝y
(
b
, 
LUA_TMPNAMTEMPLATE
); \

123 
e
 = 
	`mk°emp
(
b
); \

124 i‡(
e
 !-1Ë
	`˛o£
(e); \

125 
e
 = (ê=-1); }

	)

130 
	#LUA_TMPNAMBUFSIZE
 
L_tm≤am


	)

131 
	#lua_tm≤am
(
b
,
e
Ë{É = (
	`tm≤am
(bË=
NULL
); }

	)

141 
	$os_execuã
 (
lua_Sèã
 *
L
) {

142 c⁄° *
cmd
 = 
	`luaL_›t°rög
(
L
, 1, 
NULL
);

143 
°©
 = 
	`sy°em
(
cmd
);

144 i‡(
cmd
 !
NULL
)

145  
	`luaL_exe¸esu…
(
L
, 
°©
);

147 
	`lua_pushboﬁón
(
L
, 
°©
);

150 
	}
}

153 
	$os_ªmove
 (
lua_Sèã
 *
L
) {

154 c⁄° *
fûíame
 = 
	`luaL_check°rög
(
L
, 1);

155  
	`luaL_fûîesu…
(
L
, 
	`ªmove
(
fûíame
) == 0, filename);

156 
	}
}

159 
	$os_ª«me
 (
lua_Sèã
 *
L
) {

160 c⁄° *
‰om«me
 = 
	`luaL_check°rög
(
L
, 1);

161 c⁄° *
t⁄ame
 = 
	`luaL_check°rög
(
L
, 2);

162  
	`luaL_fûîesu…
(
L
, 
	`ª«me
(
‰om«me
, 
t⁄ame
Ë=0, 
NULL
);

163 
	}
}

166 
	$os_tm≤ame
 (
lua_Sèã
 *
L
) {

167 
buff
[
LUA_TMPNAMBUFSIZE
];

168 
îr
;

169 
	`lua_tm≤am
(
buff
, 
îr
);

170 i‡(
îr
)

171  
	`luaL_îr‹
(
L
, "unableÅo generateá unique filename");

172 
	`lua_push°rög
(
L
, 
buff
);

174 
	}
}

177 
	$os_gëív
 (
lua_Sèã
 *
L
) {

178 
	`lua_push°rög
(
L
, 
	`gëív
(
	`luaL_check°rög
(L, 1)));

180 
	}
}

183 
	$os_˛ock
 (
lua_Sèã
 *
L
) {

184 
	`lua_pushnumbî
(
L
, ((
lua_Numbî
)
	`˛ock
())/÷ua_Numbî)
CLOCKS_PER_SEC
);

186 
	}
}

197 
	$£tfõld
 (
lua_Sèã
 *
L
, c⁄° *
key
, 
vÆue
) {

198 
	`lua_pushöãgî
(
L
, 
vÆue
);

199 
	`lua_£tfõld
(
L
, -2, 
key
);

200 
	}
}

202 
	$£tboﬁfõld
 (
lua_Sèã
 *
L
, c⁄° *
key
, 
vÆue
) {

203 i‡(
vÆue
 < 0)

205 
	`lua_pushboﬁón
(
L
, 
vÆue
);

206 
	`lua_£tfõld
(
L
, -2, 
key
);

207 
	}
}

213 
	$£èŒfõlds
 (
lua_Sèã
 *
L
, 
tm
 *
°m
) {

214 
	`£tfõld
(
L
, "£c", 
°m
->
tm_£c
);

215 
	`£tfõld
(
L
, "mö", 
°m
->
tm_mö
);

216 
	`£tfõld
(
L
, "hour", 
°m
->
tm_hour
);

217 
	`£tfõld
(
L
, "day", 
°m
->
tm_mday
);

218 
	`£tfõld
(
L
, "m⁄th", 
°m
->
tm_m⁄
 + 1);

219 
	`£tfõld
(
L
, "yór", 
°m
->
tm_yór
 + 1900);

220 
	`£tfõld
(
L
, "wday", 
°m
->
tm_wday
 + 1);

221 
	`£tfõld
(
L
, "yday", 
°m
->
tm_yday
 + 1);

222 
	`£tboﬁfõld
(
L
, "isd°", 
°m
->
tm_isd°
);

223 
	}
}

226 
	$gëboﬁfõld
 (
lua_Sèã
 *
L
, c⁄° *
key
) {

227 
ªs
;

228 
ªs
 = (
	`lua_gëfõld
(
L
, -1, 
key
Ë=
LUA_TNIL
Ë? -1 : 
	`lua_toboﬁón
(L, -1);

229 
	`lua_p›
(
L
, 1);

230  
ªs
;

231 
	}
}

235 #i‡!
deföed
(
L_MAXDATEFIELD
)

236 
	#L_MAXDATEFIELD
 (
INT_MAX
 / 2)

	)

239 
	$gëfõld
 (
lua_Sèã
 *
L
, c⁄° *
key
, 
d
, 
dñè
) {

240 
i¢um
;

241 
t
 = 
	`lua_gëfõld
(
L
, -1, 
key
);

242 
lua_I¡egî
 
ªs
 = 
	`lua_toöãgîx
(
L
, -1, &
i¢um
);

243 i‡(!
i¢um
) {

244 i‡(
t
 !
LUA_TNIL
)

245  
	`luaL_îr‹
(
L
, "fõld '%s' i†nŸá¿öãgî", 
key
);

246 i‡(
d
 < 0)

247  
	`luaL_îr‹
(
L
, "fõld '%s' missög i¿d©êèbÀ", 
key
);

248 
ªs
 = 
d
;

251 i‡(!(-
L_MAXDATEFIELD
 <
ªs
 &&Ñes <= L_MAXDATEFIELD))

252  
	`luaL_îr‹
(
L
, "fõld '%s' i†out-of-bound", 
key
);

253 
ªs
 -
dñè
;

255 
	`lua_p›
(
L
, 1);

256  ()
ªs
;

257 
	}
}

260 c⁄° *
	$check›ti⁄
 (
lua_Sèã
 *
L
, c⁄° *
c⁄v
,

261 
±rdiff_t
 
c⁄vÀn
, *
buff
) {

262 c⁄° *
›ti⁄
 = 
LUA_STRFTIMEOPTIONS
;

263 
›Àn
 = 1;

264 ; *
›ti⁄
 !'\0' && 
›Àn
 <
c⁄vÀn
; option += oplen) {

265 i‡(*
›ti⁄
 == '|')

266 
›Àn
++;

267 i‡(
	`memcmp
(
c⁄v
, 
›ti⁄
, 
›Àn
) == 0) {

268 
	`mem˝y
(
buff
, 
c⁄v
, 
›Àn
);

269 
buff
[
›Àn
] = '\0';

270  
c⁄v
 + 
›Àn
;

273 
	`luaL_¨gîr‹
(
L
, 1,

274 
	`lua_pushf°rög
(
L
, "övÆid c⁄vîsi⁄ s≥cifõ∏'%%%s'", 
c⁄v
));

275  
c⁄v
;

276 
	}
}

280 
	#SIZETIMEFMT
 250

	)

283 
	$os_d©e
 (
lua_Sèã
 *
L
) {

284 
size_t
 
¶í
;

285 c⁄° *
s
 = 
	`luaL_›é°rög
(
L
, 1, "%c", &
¶í
);

286 
time_t
 
t
 = 
	`luaL_›t
(
L
, 
l_checktime
, 2, 
	`time
(
NULL
));

287 c⁄° *
£
 = 
s
 + 
¶í
;

288 
tm
 
tmr
, *
°m
;

289 i‡(*
s
 == '!') {

290 
°m
 = 
	`l_gmtime
(&
t
, &
tmr
);

291 
s
++;

294 
°m
 = 
	`l_loˇ…ime
(&
t
, &
tmr
);

295 i‡(
°m
 =
NULL
)

296 
	`luaL_îr‹
(
L
, "timeÑesult cannot beÑepresented inÅhis installation");

297 i‡(
	`°rcmp
(
s
, "*t") == 0) {

298 
	`lua_¸óãèbÀ
(
L
, 0, 9);

299 
	`£èŒfõlds
(
L
, 
°m
);

302 
cc
[4];

303 
luaL_Buf„r
 
b
;

304 
cc
[0] = '%';

305 
	`luaL_bufföô
(
L
, &
b
);

306 
s
 < 
£
) {

307 i‡(*
s
 != '%')

308 
	`luaL_addch¨
(&
b
, *
s
++);

310 
size_t
 
ª¶í
;

311 *
buff
 = 
	`luaL_¥ïbuffsize
(&
b
, 
SIZETIMEFMT
);

312 
s
++;

313 
s
 = 
	`check›ti⁄
(
L
, s, 
£
 - s, 
cc
 + 1);

314 
ª¶í
 = 
	`°r·ime
(
buff
, 
SIZETIMEFMT
, 
cc
, 
°m
);

315 
	`luaL_addsize
(&
b
, 
ª¶í
);

318 
	`luaL_pushªsu…
(&
b
);

321 
	}
}

324 
	$os_time
 (
lua_Sèã
 *
L
) {

325 
time_t
 
t
;

326 i‡(
	`lua_i¢⁄e‹nû
(
L
, 1))

327 
t
 = 
	`time
(
NULL
);

329 
tm
 
ts
;

330 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

331 
	`lua_£â›
(
L
, 1);

332 
ts
.
tm_£c
 = 
	`gëfõld
(
L
, "sec", 0, 0);

333 
ts
.
tm_mö
 = 
	`gëfõld
(
L
, "min", 0, 0);

334 
ts
.
tm_hour
 = 
	`gëfõld
(
L
, "hour", 12, 0);

335 
ts
.
tm_mday
 = 
	`gëfõld
(
L
, "day", -1, 0);

336 
ts
.
tm_m⁄
 = 
	`gëfõld
(
L
, "month", -1, 1);

337 
ts
.
tm_yór
 = 
	`gëfõld
(
L
, "year", -1, 1900);

338 
ts
.
tm_isd°
 = 
	`gëboﬁfõld
(
L
, "isdst");

339 
t
 = 
	`mktime
(&
ts
);

340 
	`£èŒfõlds
(
L
, &
ts
);

342 i‡(
t
 !(
time_t
)(
l_timë
)t ||Å == (time_t)(-1))

343 
	`luaL_îr‹
(
L
, "timeÑesult cannot beÑepresented inÅhis installation");

344 
	`l_pushtime
(
L
, 
t
);

346 
	}
}

349 
	$os_dif·ime
 (
lua_Sèã
 *
L
) {

350 
time_t
 
t1
 = 
	`l_checktime
(
L
, 1);

351 
time_t
 
t2
 = 
	`l_checktime
(
L
, 2);

352 
	`lua_pushnumbî
(
L
, (
lua_Numbî
)
	`dif·ime
(
t1
, 
t2
));

354 
	}
}

359 
	$os_£éoˇÀ
 (
lua_Sèã
 *
L
) {

360 c⁄° 
ˇt
[] = {
LC_ALL
, 
LC_COLLATE
, 
LC_CTYPE
, 
LC_MONETARY
,

361 
LC_NUMERIC
, 
LC_TIME
};

362 c⁄° *c⁄° 
ˇäames
[] = {"all", "collate", "ctype", "monetary",

363 "numîic", "time", 
NULL
};

364 c⁄° *
l
 = 
	`luaL_›t°rög
(
L
, 1, 
NULL
);

365 
›
 = 
	`luaL_check›ti⁄
(
L
, 2, "Æl", 
ˇäames
);

366 
	`lua_push°rög
(
L
, 
	`£éoˇÀ
(
ˇt
[
›
], 
l
));

368 
	}
}

371 
	$os_exô
 (
lua_Sèã
 *
L
) {

372 
°©us
;

373 i‡(
	`lua_isboﬁón
(
L
, 1))

374 
°©us
 = (
	`lua_toboﬁón
(
L
, 1Ë? 
EXIT_SUCCESS
 : 
EXIT_FAILURE
);

376 
°©us
 = ()
	`luaL_›töãgî
(
L
, 1, 
EXIT_SUCCESS
);

377 i‡(
	`lua_toboﬁón
(
L
, 2))

378 
	`lua_˛o£
(
L
);

379 i‡(
L
Ë
	`exô
(
°©us
);

381 
	}
}

384 c⁄° 
luaL_Reg
 
	gsy¶ib
[] = {

385 {"˛ock", 
os_˛ock
},

386 {"d©e", 
os_d©e
},

387 {"dif·ime", 
os_dif·ime
},

388 {"execuã", 
os_execuã
},

389 {"exô", 
os_exô
},

390 {"gëív", 
os_gëív
},

391 {"ªmove", 
os_ªmove
},

392 {"ª«me", 
os_ª«me
},

393 {"£éoˇÀ", 
os_£éoˇÀ
},

394 {"time", 
os_time
},

395 {"tm≤ame", 
os_tm≤ame
},

396 {
NULL
, NULL}

403 
LUAMOD_API
 
	$lua›í_os
 (
lua_Sèã
 *
L
) {

404 
	`luaL_√wlib
(
L
, 
sy¶ib
);

406 
	}
}

	@lib/lua/lua-5.3.4/src/lparser.c

7 
	#Õ¨£r_c


	)

8 
	#LUA_CORE


	)

10 
	~"Õªfix.h
"

13 
	~<°rög.h
>

15 
	~"lua.h
"

17 
	~"lcode.h
"

18 
	~"ldebug.h
"

19 
	~"ldo.h
"

20 
	~"lfunc.h
"

21 
	~"Œex.h
"

22 
	~"lmem.h
"

23 
	~"lobje˘.h
"

24 
	~"l›codes.h
"

25 
	~"Õ¨£r.h
"

26 
	~"l°©e.h
"

27 
	~"l°rög.h
"

28 
	~"…abÀ.h
"

34 
	#MAXVARS
 200

	)

37 
	#hasmu…ªt
(
k
Ë((kË=
VCALL
 || (kË=
VVARARG
)

	)

42 
	#eq°r
(
a
,
b
Ë(◊Ë=(b))

	)

48 
	sBlockC¡
 {

49 
BlockC¡
 *
	m¥evious
;

50 
	mfú°œbñ
;

51 
	mfú°gŸo
;

52 
lu_byã
 
	m«˘v¨
;

53 
lu_byã
 
	mupvÆ
;

54 
lu_byã
 
	mi¶o›
;

55 } 
	tBlockC¡
;

62 
°©emít
 (
LexSèã
 *
ls
);

63 
ex¥
 (
LexSèã
 *
ls
, 
expdesc
 *
v
);

67 
l_n‹ë
 
	$£mîr‹
 (
LexSèã
 *
ls
, c⁄° *
msg
) {

68 
ls
->
t
.
tokí
 = 0;

69 
	`luaX_sy¡axîr‹
(
ls
, 
msg
);

70 
	}
}

73 
l_n‹ë
 
	$îr‹_ex≥˘ed
 (
LexSèã
 *
ls
, 
tokí
) {

74 
	`luaX_sy¡axîr‹
(
ls
,

75 
	`luaO_pushf°rög
(
ls
->
L
, "%†ex≥˘ed", 
	`luaX_tokí2°r
÷s, 
tokí
)));

76 
	}
}

79 
l_n‹ë
 
	$îr‹limô
 (
FuncSèã
 *
fs
, 
limô
, c⁄° *
wh©
) {

80 
lua_Sèã
 *
L
 = 
fs
->
ls
->L;

81 c⁄° *
msg
;

82 
löe
 = 
fs
->
f
->
löedeföed
;

83 c⁄° *
whîe
 = (
löe
 == 0)

85 : 
	`luaO_pushf°rög
(
L
, "fun˘i⁄áàlöê%d", 
löe
);

86 
msg
 = 
	`luaO_pushf°rög
(
L
, "too many %s (limit is %d) in %s",

87 
wh©
, 
limô
, 
whîe
);

88 
	`luaX_sy¡axîr‹
(
fs
->
ls
, 
msg
);

89 
	}
}

92 
	$checklimô
 (
FuncSèã
 *
fs
, 
v
, 
l
, c⁄° *
wh©
) {

93 i‡(
v
 > 
l
Ë
	`îr‹limô
(
fs
,Ü, 
wh©
);

94 
	}
}

97 
	$ã°√xt
 (
LexSèã
 *
ls
, 
c
) {

98 i‡(
ls
->
t
.
tokí
 =
c
) {

99 
	`luaX_√xt
(
ls
);

103 
	}
}

106 
	$check
 (
LexSèã
 *
ls
, 
c
) {

107 i‡(
ls
->
t
.
tokí
 !
c
)

108 
	`îr‹_ex≥˘ed
(
ls
, 
c
);

109 
	}
}

112 
	$check√xt
 (
LexSèã
 *
ls
, 
c
) {

113 
	`check
(
ls
, 
c
);

114 
	`luaX_√xt
(
ls
);

115 
	}
}

118 
	#check_c⁄dôi⁄
(
ls
,
c
,
msg
Ë{ i‡(!(c)Ë
	`luaX_sy¡axîr‹
÷s, msg); }

	)

122 
	$check_m©ch
 (
LexSèã
 *
ls
, 
wh©
, 
who
, 
whîe
) {

123 i‡(!
	`ã°√xt
(
ls
, 
wh©
)) {

124 i‡(
whîe
 =
ls
->
löíumbî
)

125 
	`îr‹_ex≥˘ed
(
ls
, 
wh©
);

127 
	`luaX_sy¡axîr‹
(
ls
, 
	`luaO_pushf°rög
÷s->
L
,

129 
	`luaX_tokí2°r
(
ls
, 
wh©
),ÜuaX_tokí2°r÷s, 
who
), 
whîe
));

132 
	}
}

135 
TSåög
 *
	$°r_check«me
 (
LexSèã
 *
ls
) {

136 
TSåög
 *
ts
;

137 
	`check
(
ls
, 
TK_NAME
);

138 
ts
 = 
ls
->
t
.
£möfo
.ts;

139 
	`luaX_√xt
(
ls
);

140  
ts
;

141 
	}
}

144 
	$öô_exp
 (
expdesc
 *
e
, 
expköd
 
k
, 
i
) {

145 
e
->
f
 =É->
t
 = 
NO_JUMP
;

146 
e
->
k
 = k;

147 
e
->
u
.
öfo
 = 
i
;

148 
	}
}

151 
	$code°rög
 (
LexSèã
 *
ls
, 
expdesc
 *
e
, 
TSåög
 *
s
) {

152 
	`öô_exp
(
e
, 
VK
, 
	`luaK_°rögK
(
ls
->
fs
, 
s
));

153 
	}
}

156 
	$check«me
 (
LexSèã
 *
ls
, 
expdesc
 *
e
) {

157 
	`code°rög
(
ls
, 
e
, 
	`°r_check«me
(ls));

158 
	}
}

161 
	$ªgi°îloˇlv¨
 (
LexSèã
 *
ls
, 
TSåög
 *
v¨«me
) {

162 
FuncSèã
 *
fs
 = 
ls
->fs;

163 
PrŸo
 *
f
 = 
fs
->f;

164 
ﬁdsize
 = 
f
->
sizñocv¨s
;

165 
	`luaM_growve˘‹
(
ls
->
L
, 
f
->
locv¨s
, 
fs
->
∆ocv¨s
, f->
sizñocv¨s
,

166 
LocV¨
, 
SHRT_MAX
, "local variables");

167 
ﬁdsize
 < 
f
->
sizñocv¨s
)

168 
f
->
locv¨s
[
ﬁdsize
++].
v¨«me
 = 
NULL
;

169 
f
->
locv¨s
[
fs
->
∆ocv¨s
].
v¨«me
 = varname;

170 
	`luaC_objb¨rõr
(
ls
->
L
, 
f
, 
v¨«me
);

171  
fs
->
∆ocv¨s
++;

172 
	}
}

175 
	$√w_loˇlv¨
 (
LexSèã
 *
ls
, 
TSåög
 *
«me
) {

176 
FuncSèã
 *
fs
 = 
ls
->fs;

177 
Dynd©a
 *
dyd
 = 
ls
->dyd;

178 
ªg
 = 
	`ªgi°îloˇlv¨
(
ls
, 
«me
);

179 
	`checklimô
(
fs
, 
dyd
->
a˘v¨
.
n
 + 1 - fs->
fú°loˇl
,

180 
MAXVARS
, "local variables");

181 
	`luaM_growve˘‹
(
ls
->
L
, 
dyd
->
a˘v¨
.
¨r
, dyd->a˘v¨.
n
 + 1,

182 
dyd
->
a˘v¨
.
size
, 
V¨desc
, 
MAX_INT
, "local variables");

183 
dyd
->
a˘v¨
.
¨r
[dyd->a˘v¨.
n
++].
idx
 = 
	`ˇ°
(, 
ªg
);

184 
	}
}

187 
	$√w_loˇlv¨lôîÆ_
 (
LexSèã
 *
ls
, c⁄° *
«me
, 
size_t
 
sz
) {

188 
	`√w_loˇlv¨
(
ls
, 
	`luaX_√w°rög
÷s, 
«me
, 
sz
));

189 
	}
}

191 
	#√w_loˇlv¨lôîÆ
(
ls
,
v
) \

192 
	`√w_loˇlv¨lôîÆ_
(
ls
, "" 
v
, ((v)/())-1)

	)

195 
LocV¨
 *
	$gëlocv¨
 (
FuncSèã
 *
fs
, 
i
) {

196 
idx
 = 
fs
->
ls
->
dyd
->
a˘v¨
.
¨r
[fs->
fú°loˇl
 + 
i
].idx;

197 
	`lua_as£π
(
idx
 < 
fs
->
∆ocv¨s
);

198  &
fs
->
f
->
locv¨s
[
idx
];

199 
	}
}

202 
	$adju°loˇlv¨s
 (
LexSèã
 *
ls
, 
nv¨s
) {

203 
FuncSèã
 *
fs
 = 
ls
->fs;

204 
fs
->
«˘v¨
 = 
	`ˇ°_byã
(fs->«˘v¨ + 
nv¨s
);

205 ; 
nv¨s
;Çvars--) {

206 
	`gëlocv¨
(
fs
, fs->
«˘v¨
 - 
nv¨s
)->
°¨çc
 = fs->
pc
;

208 
	}
}

211 
	$ªmovev¨s
 (
FuncSèã
 *
fs
, 
tﬁevñ
) {

212 
fs
->
ls
->
dyd
->
a˘v¨
.
n
 -(fs->
«˘v¨
 - 
tﬁevñ
);

213 
fs
->
«˘v¨
 > 
tﬁevñ
)

214 
	`gëlocv¨
(
fs
, --fs->
«˘v¨
)->
ídpc
 = fs->
pc
;

215 
	}
}

218 
	$£¨chupvÆue
 (
FuncSèã
 *
fs
, 
TSåög
 *
«me
) {

219 
i
;

220 
UpvÆdesc
 *
up
 = 
fs
->
f
->
upvÆues
;

221 
i
 = 0; i < 
fs
->
nups
; i++) {

222 i‡(
	`eq°r
(
up
[
i
].
«me
,Çame))  i;

225 
	}
}

228 
	$√wupvÆue
 (
FuncSèã
 *
fs
, 
TSåög
 *
«me
, 
expdesc
 *
v
) {

229 
PrŸo
 *
f
 = 
fs
->f;

230 
ﬁdsize
 = 
f
->
sizeupvÆues
;

231 
	`checklimô
(
fs
, fs->
nups
 + 1, 
MAXUPVAL
, "upvalues");

232 
	`luaM_growve˘‹
(
fs
->
ls
->
L
, 
f
->
upvÆues
, fs->
nups
, f->
sizeupvÆues
,

233 
UpvÆdesc
, 
MAXUPVAL
, "upvalues");

234 
ﬁdsize
 < 
f
->
sizeupvÆues
)

235 
f
->
upvÆues
[
ﬁdsize
++].
«me
 = 
NULL
;

236 
f
->
upvÆues
[
fs
->
nups
].
ö°ack
 = (
v
->
k
 =
VLOCAL
);

237 
f
->
upvÆues
[
fs
->
nups
].
idx
 = 
	`ˇ°_byã
(
v
->
u
.
öfo
);

238 
f
->
upvÆues
[
fs
->
nups
].
«me
 =Çame;

239 
	`luaC_objb¨rõr
(
fs
->
ls
->
L
, 
f
, 
«me
);

240  
fs
->
nups
++;

241 
	}
}

244 
	$£¨chv¨
 (
FuncSèã
 *
fs
, 
TSåög
 *
n
) {

245 
i
;

246 
i
 = 
	`ˇ°_öt
(
fs
->
«˘v¨
) - 1; i >= 0; i--) {

247 i‡(
	`eq°r
(
n
, 
	`gëlocv¨
(
fs
, 
i
)->
v¨«me
))

248  
i
;

251 
	}
}

258 
	$m¨kupvÆ
 (
FuncSèã
 *
fs
, 
Àvñ
) {

259 
BlockC¡
 *
bl
 = 
fs
->bl;

260 
bl
->
«˘v¨
 > 
Àvñ
)

261 
bl
 = bl->
¥evious
;

262 
bl
->
upvÆ
 = 1;

263 
	}
}

270 
	$sögÀv¨aux
 (
FuncSèã
 *
fs
, 
TSåög
 *
n
, 
expdesc
 *
v¨
, 
ba£
) {

271 i‡(
fs
 =
NULL
)

272 
	`öô_exp
(
v¨
, 
VVOID
, 0);

274 
v
 = 
	`£¨chv¨
(
fs
, 
n
);

275 i‡(
v
 >= 0) {

276 
	`öô_exp
(
v¨
, 
VLOCAL
, 
v
);

277 i‡(!
ba£
)

278 
	`m¨kupvÆ
(
fs
, 
v
);

281 
idx
 = 
	`£¨chupvÆue
(
fs
, 
n
);

282 i‡(
idx
 < 0) {

283 
	`sögÀv¨aux
(
fs
->
¥ev
, 
n
, 
v¨
, 0);

284 i‡(
v¨
->
k
 =
VVOID
)

287 
idx
 = 
	`√wupvÆue
(
fs
, 
n
, 
v¨
);

289 
	`öô_exp
(
v¨
, 
VUPVAL
, 
idx
);

292 
	}
}

295 
	$sögÀv¨
 (
LexSèã
 *
ls
, 
expdesc
 *
v¨
) {

296 
TSåög
 *
v¨«me
 = 
	`°r_check«me
(
ls
);

297 
FuncSèã
 *
fs
 = 
ls
->fs;

298 
	`sögÀv¨aux
(
fs
, 
v¨«me
, 
v¨
, 1);

299 i‡(
v¨
->
k
 =
VVOID
) {

300 
expdesc
 
key
;

301 
	`sögÀv¨aux
(
fs
, 
ls
->
ívn
, 
v¨
, 1);

302 
	`lua_as£π
(
v¨
->
k
 !
VVOID
);

303 
	`code°rög
(
ls
, &
key
, 
v¨«me
);

304 
	`luaK_ödexed
(
fs
, 
v¨
, &
key
);

306 
	}
}

309 
	$adju°_assign
 (
LexSèã
 *
ls
, 
nv¨s
, 
√xps
, 
expdesc
 *
e
) {

310 
FuncSèã
 *
fs
 = 
ls
->fs;

311 
exåa
 = 
nv¨s
 - 
√xps
;

312 i‡(
	`hasmu…ªt
(
e
->
k
)) {

313 
exåa
++;

314 i‡(
exåa
 < 0)Éxtra = 0;

315 
	`luaK_£åëu∫s
(
fs
, 
e
, 
exåa
);

316 i‡(
exåa
 > 1Ë
	`luaK_ª£rvîegs
(
fs
,Éxtra-1);

319 i‡(
e
->
k
 !
VVOID
Ë
	`luaK_exp2√xåeg
(
fs
,É);

320 i‡(
exåa
 > 0) {

321 
ªg
 = 
fs
->
‰ìªg
;

322 
	`luaK_ª£rvîegs
(
fs
, 
exåa
);

323 
	`luaK_nû
(
fs
, 
ªg
, 
exåa
);

326 i‡(
√xps
 > 
nv¨s
)

327 
ls
->
fs
->
‰ìªg
 -
√xps
 - 
nv¨s
;

328 
	}
}

331 
	$íãæevñ
 (
LexSèã
 *
ls
) {

332 
lua_Sèã
 *
L
 = 
ls
->L;

333 ++
L
->
nCˇŒs
;

334 
	`checklimô
(
ls
->
fs
, 
L
->
nCˇŒs
, 
LUAI_MAXCCALLS
, "CÜevels");

335 
	}
}

338 
	#Àavñevñ
(
ls
Ë(÷s)->
L
->
nCˇŒs
--)

	)

341 
	$˛o£gŸo
 (
LexSèã
 *
ls
, 
g
, 
Labñdesc
 *
œbñ
) {

342 
i
;

343 
FuncSèã
 *
fs
 = 
ls
->fs;

344 
Labñli°
 *
gl
 = &
ls
->
dyd
->
gt
;

345 
Labñdesc
 *
gt
 = &
gl
->
¨r
[
g
];

346 
	`lua_as£π
(
	`eq°r
(
gt
->
«me
, 
œbñ
->name));

347 i‡(
gt
->
«˘v¨
 < 
œbñ
->nactvar) {

348 
TSåög
 *
v«me
 = 
	`gëlocv¨
(
fs
, 
gt
->
«˘v¨
)->
v¨«me
;

349 c⁄° *
msg
 = 
	`luaO_pushf°rög
(
ls
->
L
,

351 
	`gë°r
(
gt
->
«me
), gt->
löe
, gë°r(
v«me
));

352 
	`£mîr‹
(
ls
, 
msg
);

354 
	`luaK_∑tchli°
(
fs
, 
gt
->
pc
, 
œbñ
->pc);

356 
i
 = 
g
; i < 
gl
->
n
 - 1; i++)

357 
gl
->
¨r
[
i
] = gl->arr[i + 1];

358 
gl
->
n
--;

359 
	}
}

365 
	$födœbñ
 (
LexSèã
 *
ls
, 
g
) {

366 
i
;

367 
BlockC¡
 *
bl
 = 
ls
->
fs
->bl;

368 
Dynd©a
 *
dyd
 = 
ls
->dyd;

369 
Labñdesc
 *
gt
 = &
dyd
->gt.
¨r
[
g
];

371 
i
 = 
bl
->
fú°œbñ
; i < 
dyd
->
œbñ
.
n
; i++) {

372 
Labñdesc
 *
lb
 = &
dyd
->
œbñ
.
¨r
[
i
];

373 i‡(
	`eq°r
(
lb
->
«me
, 
gt
->name)) {

374 i‡(
gt
->
«˘v¨
 > 
lb
->nactvar &&

375 (
bl
->
upvÆ
 || 
dyd
->
œbñ
.
n
 > bl->
fú°œbñ
))

376 
	`luaK_∑tch˛o£
(
ls
->
fs
, 
gt
->
pc
, 
lb
->
«˘v¨
);

377 
	`˛o£gŸo
(
ls
, 
g
, 
lb
);

382 
	}
}

385 
	$√wœbñíåy
 (
LexSèã
 *
ls
, 
Labñli°
 *
l
, 
TSåög
 *
«me
,

386 
löe
, 
pc
) {

387 
n
 = 
l
->n;

388 
	`luaM_growve˘‹
(
ls
->
L
, 
l
->
¨r
, 
n
,Ü->
size
,

389 
Labñdesc
, 
SHRT_MAX
, "labels/gotos");

390 
l
->
¨r
[
n
].
«me
 =Çame;

391 
l
->
¨r
[
n
].
löe
 =Üine;

392 
l
->
¨r
[
n
].
«˘v¨
 = 
ls
->
fs
->nactvar;

393 
l
->
¨r
[
n
].
pc
 =Öc;

394 
l
->
n
 =Ç + 1;

395  
n
;

396 
	}
}

403 
	$födgŸos
 (
LexSèã
 *
ls
, 
Labñdesc
 *
lb
) {

404 
Labñli°
 *
gl
 = &
ls
->
dyd
->
gt
;

405 
i
 = 
ls
->
fs
->
bl
->
fú°gŸo
;

406 
i
 < 
gl
->
n
) {

407 i‡(
	`eq°r
(
gl
->
¨r
[
i
].
«me
, 
lb
->name))

408 
	`˛o£gŸo
(
ls
, 
i
, 
lb
);

410 
i
++;

412 
	}
}

421 
	$movegŸosout
 (
FuncSèã
 *
fs
, 
BlockC¡
 *
bl
) {

422 
i
 = 
bl
->
fú°gŸo
;

423 
Labñli°
 *
gl
 = &
fs
->
ls
->
dyd
->
gt
;

426 
i
 < 
gl
->
n
) {

427 
Labñdesc
 *
gt
 = &
gl
->
¨r
[
i
];

428 i‡(
gt
->
«˘v¨
 > 
bl
->nactvar) {

429 i‡(
bl
->
upvÆ
)

430 
	`luaK_∑tch˛o£
(
fs
, 
gt
->
pc
, 
bl
->
«˘v¨
);

431 
gt
->
«˘v¨
 = 
bl
->nactvar;

433 i‡(!
	`födœbñ
(
fs
->
ls
, 
i
))

434 
i
++;

436 
	}
}

439 
	$íãrblock
 (
FuncSèã
 *
fs
, 
BlockC¡
 *
bl
, 
lu_byã
 
i¶o›
) {

440 
bl
->
i¶o›
 = isloop;

441 
bl
->
«˘v¨
 = 
fs
->nactvar;

442 
bl
->
fú°œbñ
 = 
fs
->
ls
->
dyd
->
œbñ
.
n
;

443 
bl
->
fú°gŸo
 = 
fs
->
ls
->
dyd
->
gt
.
n
;

444 
bl
->
upvÆ
 = 0;

445 
bl
->
¥evious
 = 
fs
->bl;

446 
fs
->
bl
 = bl;

447 
	`lua_as£π
(
fs
->
‰ìªg
 =fs->
«˘v¨
);

448 
	}
}

454 
	$bªakœbñ
 (
LexSèã
 *
ls
) {

455 
TSåög
 *
n
 = 
	`luaS_√w
(
ls
->
L
, "break");

456 
l
 = 
	`√wœbñíåy
(
ls
, &ls->
dyd
->
œbñ
, 
n
, 0,Üs->
fs
->
pc
);

457 
	`födgŸos
(
ls
, &ls->
dyd
->
œbñ
.
¨r
[
l
]);

458 
	}
}

464 
l_n‹ë
 
	$undefgŸo
 (
LexSèã
 *
ls
, 
Labñdesc
 *
gt
) {

465 c⁄° *
msg
 = 
	`i§e£rved
(
gt
->
«me
)

468 
msg
 = 
	`luaO_pushf°rög
(
ls
->
L
, msg, 
	`gë°r
(
gt
->
«me
), gt->
löe
);

469 
	`£mîr‹
(
ls
, 
msg
);

470 
	}
}

473 
	$Àaveblock
 (
FuncSèã
 *
fs
) {

474 
BlockC¡
 *
bl
 = 
fs
->bl;

475 
LexSèã
 *
ls
 = 
fs
->ls;

476 i‡(
bl
->
¥evious
 && bl->
upvÆ
) {

478 
j
 = 
	`luaK_jump
(
fs
);

479 
	`luaK_∑tch˛o£
(
fs
, 
j
, 
bl
->
«˘v¨
);

480 
	`luaK_∑tchtohîe
(
fs
, 
j
);

482 i‡(
bl
->
i¶o›
)

483 
	`bªakœbñ
(
ls
);

484 
fs
->
bl
 = bl->
¥evious
;

485 
	`ªmovev¨s
(
fs
, 
bl
->
«˘v¨
);

486 
	`lua_as£π
(
bl
->
«˘v¨
 =
fs
->nactvar);

487 
fs
->
‰ìªg
 = fs->
«˘v¨
;

488 
ls
->
dyd
->
œbñ
.
n
 = 
bl
->
fú°œbñ
;

489 i‡(
bl
->
¥evious
)

490 
	`movegŸosout
(
fs
, 
bl
);

491 i‡(
bl
->
fú°gŸo
 < 
ls
->
dyd
->
gt
.
n
)

492 
	`undefgŸo
(
ls
, &ls->
dyd
->
gt
.
¨r
[
bl
->
fú°gŸo
]);

493 
	}
}

499 
PrŸo
 *
	$add¥ŸŸy≥
 (
LexSèã
 *
ls
) {

500 
PrŸo
 *
˛p
;

501 
lua_Sèã
 *
L
 = 
ls
->L;

502 
FuncSèã
 *
fs
 = 
ls
->fs;

503 
PrŸo
 *
f
 = 
fs
->f;

504 i‡(
fs
->
≈
 >
f
->
sizï
) {

505 
ﬁdsize
 = 
f
->
sizï
;

506 
	`luaM_growve˘‹
(
L
, 
f
->
p
, 
fs
->
≈
, f->
sizï
, 
PrŸo
 *, 
MAXARG_Bx
, "functions");

507 
ﬁdsize
 < 
f
->
sizï
)

508 
f
->
p
[
ﬁdsize
++] = 
NULL
;

510 
f
->
p
[
fs
->
≈
++] = 
˛p
 = 
	`luaF_√w¥Ÿo
(
L
);

511 
	`luaC_objb¨rõr
(
L
, 
f
, 
˛p
);

512  
˛p
;

513 
	}
}

522 
	$code˛osuª
 (
LexSèã
 *
ls
, 
expdesc
 *
v
) {

523 
FuncSèã
 *
fs
 = 
ls
->fs->
¥ev
;

524 
	`öô_exp
(
v
, 
VRELOCABLE
, 
	`luaK_codeABx
(
fs
, 
OP_CLOSURE
, 0, fs->
≈
 - 1));

525 
	`luaK_exp2√xåeg
(
fs
, 
v
);

526 
	}
}

529 
	$›í_func
 (
LexSèã
 *
ls
, 
FuncSèã
 *
fs
, 
BlockC¡
 *
bl
) {

530 
PrŸo
 *
f
;

531 
fs
->
¥ev
 = 
ls
->fs;

532 
fs
->
ls
 =Üs;

533 
ls
->
fs
 = fs;

534 
fs
->
pc
 = 0;

535 
fs
->
œ°èrgë
 = 0;

536 
fs
->
jpc
 = 
NO_JUMP
;

537 
fs
->
‰ìªg
 = 0;

538 
fs
->
nk
 = 0;

539 
fs
->
≈
 = 0;

540 
fs
->
nups
 = 0;

541 
fs
->
∆ocv¨s
 = 0;

542 
fs
->
«˘v¨
 = 0;

543 
fs
->
fú°loˇl
 = 
ls
->
dyd
->
a˘v¨
.
n
;

544 
fs
->
bl
 = 
NULL
;

545 
f
 = 
fs
->f;

546 
f
->
sour˚
 = 
ls
->source;

547 
f
->
max°acksize
 = 2;

548 
	`íãrblock
(
fs
, 
bl
, 0);

549 
	}
}

552 
	$˛o£_func
 (
LexSèã
 *
ls
) {

553 
lua_Sèã
 *
L
 = 
ls
->L;

554 
FuncSèã
 *
fs
 = 
ls
->fs;

555 
PrŸo
 *
f
 = 
fs
->f;

556 
	`luaK_ªt
(
fs
, 0, 0);

557 
	`Àaveblock
(
fs
);

558 
	`luaM_ªÆlocve˘‹
(
L
, 
f
->
code
, f->
sizecode
, 
fs
->
pc
, 
In°ru˘i⁄
);

559 
f
->
sizecode
 = 
fs
->
pc
;

560 
	`luaM_ªÆlocve˘‹
(
L
, 
f
->
löeöfo
, f->
sizñöeöfo
, 
fs
->
pc
, );

561 
f
->
sizñöeöfo
 = 
fs
->
pc
;

562 
	`luaM_ªÆlocve˘‹
(
L
, 
f
->
k
, f->
sizek
, 
fs
->
nk
, 
TVÆue
);

563 
f
->
sizek
 = 
fs
->
nk
;

564 
	`luaM_ªÆlocve˘‹
(
L
, 
f
->
p
, f->
sizï
, 
fs
->
≈
, 
PrŸo
 *);

565 
f
->
sizï
 = 
fs
->
≈
;

566 
	`luaM_ªÆlocve˘‹
(
L
, 
f
->
locv¨s
, f->
sizñocv¨s
, 
fs
->
∆ocv¨s
, 
LocV¨
);

567 
f
->
sizñocv¨s
 = 
fs
->
∆ocv¨s
;

568 
	`luaM_ªÆlocve˘‹
(
L
, 
f
->
upvÆues
, f->
sizeupvÆues
, 
fs
->
nups
, 
UpvÆdesc
);

569 
f
->
sizeupvÆues
 = 
fs
->
nups
;

570 
	`lua_as£π
(
fs
->
bl
 =
NULL
);

571 
ls
->
fs
 = fs->
¥ev
;

572 
	`luaC_checkGC
(
L
);

573 
	}
}

587 
	$block_fﬁlow
 (
LexSèã
 *
ls
, 
wôhu¡û
) {

588 
ls
->
t
.
tokí
) {

589 
TK_ELSE
: 
TK_ELSEIF
:

590 
TK_END
: 
TK_EOS
:

592 
TK_UNTIL
:  
wôhu¡û
;

595 
	}
}

598 
	$°©li°
 (
LexSèã
 *
ls
) {

600 !
	`block_fﬁlow
(
ls
, 1)) {

601 i‡(
ls
->
t
.
tokí
 =
TK_RETURN
) {

602 
	`°©emít
(
ls
);

605 
	`°©emít
(
ls
);

607 
	}
}

610 
	$fõld£l
 (
LexSèã
 *
ls
, 
expdesc
 *
v
) {

612 
FuncSèã
 *
fs
 = 
ls
->fs;

613 
expdesc
 
key
;

614 
	`luaK_exp2™yªgup
(
fs
, 
v
);

615 
	`luaX_√xt
(
ls
);

616 
	`check«me
(
ls
, &
key
);

617 
	`luaK_ödexed
(
fs
, 
v
, &
key
);

618 
	}
}

621 
	$yödex
 (
LexSèã
 *
ls
, 
expdesc
 *
v
) {

623 
	`luaX_√xt
(
ls
);

624 
	`ex¥
(
ls
, 
v
);

625 
	`luaK_exp2vÆ
(
ls
->
fs
, 
v
);

626 
	`check√xt
(
ls
, ']');

627 
	}
}

637 
	sC⁄sC⁄åﬁ
 {

638 
expdesc
 
	mv
;

639 
expdesc
 *
	mt
;

640 
	mnh
;

641 
	m«
;

642 
	mto°‹e
;

646 
	$ªcfõld
 (
LexSèã
 *
ls
, 
C⁄sC⁄åﬁ
 *
cc
) {

648 
FuncSèã
 *
fs
 = 
ls
->fs;

649 
ªg
 = 
ls
->
fs
->
‰ìªg
;

650 
expdesc
 
key
, 
vÆ
;

651 
rkkey
;

652 i‡(
ls
->
t
.
tokí
 =
TK_NAME
) {

653 
	`checklimô
(
fs
, 
cc
->
nh
, 
MAX_INT
, "items iná constructor");

654 
	`check«me
(
ls
, &
key
);

657 
	`yödex
(
ls
, &
key
);

658 
cc
->
nh
++;

659 
	`check√xt
(
ls
, '=');

660 
rkkey
 = 
	`luaK_exp2RK
(
fs
, &
key
);

661 
	`ex¥
(
ls
, &
vÆ
);

662 
	`luaK_codeABC
(
fs
, 
OP_SETTABLE
, 
cc
->
t
->
u
.
öfo
, 
rkkey
, 
	`luaK_exp2RK
(fs, &
vÆ
));

663 
fs
->
‰ìªg
 = 
ªg
;

664 
	}
}

667 
	$˛o£li°fõld
 (
FuncSèã
 *
fs
, 
C⁄sC⁄åﬁ
 *
cc
) {

668 i‡(
cc
->
v
.
k
 =
VVOID
) ;

669 
	`luaK_exp2√xåeg
(
fs
, &
cc
->
v
);

670 
cc
->
v
.
k
 = 
VVOID
;

671 i‡(
cc
->
to°‹e
 =
LFIELDS_PER_FLUSH
) {

672 
	`luaK_£éi°
(
fs
, 
cc
->
t
->
u
.
öfo
, cc->
«
, cc->
to°‹e
);

673 
cc
->
to°‹e
 = 0;

675 
	}
}

678 
	$œ°li°fõld
 (
FuncSèã
 *
fs
, 
C⁄sC⁄åﬁ
 *
cc
) {

679 i‡(
cc
->
to°‹e
 == 0) ;

680 i‡(
	`hasmu…ªt
(
cc
->
v
.
k
)) {

681 
	`luaK_£tmu…ªt
(
fs
, &
cc
->
v
);

682 
	`luaK_£éi°
(
fs
, 
cc
->
t
->
u
.
öfo
, cc->
«
, 
LUA_MULTRET
);

683 
cc
->
«
--;

686 i‡(
cc
->
v
.
k
 !
VVOID
)

687 
	`luaK_exp2√xåeg
(
fs
, &
cc
->
v
);

688 
	`luaK_£éi°
(
fs
, 
cc
->
t
->
u
.
öfo
, cc->
«
, cc->
to°‹e
);

690 
	}
}

693 
	$li°fõld
 (
LexSèã
 *
ls
, 
C⁄sC⁄åﬁ
 *
cc
) {

695 
	`ex¥
(
ls
, &
cc
->
v
);

696 
	`checklimô
(
ls
->
fs
, 
cc
->
«
, 
MAX_INT
, "items iná constructor");

697 
cc
->
«
++;

698 
cc
->
to°‹e
++;

699 
	}
}

702 
	$fõld
 (
LexSèã
 *
ls
, 
C⁄sC⁄åﬁ
 *
cc
) {

704 
ls
->
t
.
tokí
) {

705 
TK_NAME
: {

706 i‡(
	`luaX_lookahód
(
ls
) != '=')

707 
	`li°fõld
(
ls
, 
cc
);

709 
	`ªcfõld
(
ls
, 
cc
);

713 
	`ªcfõld
(
ls
, 
cc
);

717 
	`li°fõld
(
ls
, 
cc
);

721 
	}
}

724 
	$c⁄°ru˘‹
 (
LexSèã
 *
ls
, 
expdesc
 *
t
) {

727 
FuncSèã
 *
fs
 = 
ls
->fs;

728 
löe
 = 
ls
->
löíumbî
;

729 
pc
 = 
	`luaK_codeABC
(
fs
, 
OP_NEWTABLE
, 0, 0, 0);

730 
C⁄sC⁄åﬁ
 
cc
;

731 
cc
.
«
 = cc.
nh
 = cc.
to°‹e
 = 0;

732 
cc
.
t
 =Å;

733 
	`öô_exp
(
t
, 
VRELOCABLE
, 
pc
);

734 
	`öô_exp
(&
cc
.
v
, 
VVOID
, 0);

735 
	`luaK_exp2√xåeg
(
ls
->
fs
, 
t
);

736 
	`check√xt
(
ls
, '{');

738 
	`lua_as£π
(
cc
.
v
.
k
 =
VVOID
 || cc.
to°‹e
 > 0);

739 i‡(
ls
->
t
.
tokí
 == '}') ;

740 
	`˛o£li°fõld
(
fs
, &
cc
);

741 
	`fõld
(
ls
, &
cc
);

742 } 
	`ã°√xt
(
ls
, ',') ||Åestnext(ls, ';'));

743 
	`check_m©ch
(
ls
, '}', '{', 
löe
);

744 
	`œ°li°fõld
(
fs
, &
cc
);

745 
	`SETARG_B
(
fs
->
f
->
code
[
pc
], 
	`luaO_öt2fb
(
cc
.
«
));

746 
	`SETARG_C
(
fs
->
f
->
code
[
pc
], 
	`luaO_öt2fb
(
cc
.
nh
));

747 
	}
}

753 
	$∑æi°
 (
LexSèã
 *
ls
) {

755 
FuncSèã
 *
fs
 = 
ls
->fs;

756 
PrŸo
 *
f
 = 
fs
->f;

757 
≈¨ams
 = 0;

758 
f
->
is_v¨¨g
 = 0;

759 i‡(
ls
->
t
.
tokí
 != ')') {

761 
ls
->
t
.
tokí
) {

762 
TK_NAME
: {

763 
	`√w_loˇlv¨
(
ls
, 
	`°r_check«me
(ls));

764 
≈¨ams
++;

767 
TK_DOTS
: {

768 
	`luaX_√xt
(
ls
);

769 
f
->
is_v¨¨g
 = 1;

772 : 
	`luaX_sy¡axîr‹
(
ls
, "<name> or '...'Éxpected");

774 } !
f
->
is_v¨¨g
 && 
	`ã°√xt
(
ls
, ','));

776 
	`adju°loˇlv¨s
(
ls
, 
≈¨ams
);

777 
f
->
num∑øms
 = 
	`ˇ°_byã
(
fs
->
«˘v¨
);

778 
	`luaK_ª£rvîegs
(
fs
, fs->
«˘v¨
);

779 
	}
}

782 
	$body
 (
LexSèã
 *
ls
, 
expdesc
 *
e
, 
ismëhod
, 
löe
) {

784 
FuncSèã
 
√w_fs
;

785 
BlockC¡
 
bl
;

786 
√w_fs
.
f
 = 
	`add¥ŸŸy≥
(
ls
);

787 
√w_fs
.
f
->
löedeföed
 = 
löe
;

788 
	`›í_func
(
ls
, &
√w_fs
, &
bl
);

789 
	`check√xt
(
ls
, '(');

790 i‡(
ismëhod
) {

791 
	`√w_loˇlv¨lôîÆ
(
ls
, "self");

792 
	`adju°loˇlv¨s
(
ls
, 1);

794 
	`∑æi°
(
ls
);

795 
	`check√xt
(
ls
, ')');

796 
	`°©li°
(
ls
);

797 
√w_fs
.
f
->
œ°löedeföed
 = 
ls
->
löíumbî
;

798 
	`check_m©ch
(
ls
, 
TK_END
, 
TK_FUNCTION
, 
löe
);

799 
	`code˛osuª
(
ls
, 
e
);

800 
	`˛o£_func
(
ls
);

801 
	}
}

804 
	$ex∂i°
 (
LexSèã
 *
ls
, 
expdesc
 *
v
) {

806 
n
 = 1;

807 
	`ex¥
(
ls
, 
v
);

808 
	`ã°√xt
(
ls
, ',')) {

809 
	`luaK_exp2√xåeg
(
ls
->
fs
, 
v
);

810 
	`ex¥
(
ls
, 
v
);

811 
n
++;

813  
n
;

814 
	}
}

817 
	$funˇrgs
 (
LexSèã
 *
ls
, 
expdesc
 *
f
, 
löe
) {

818 
FuncSèã
 *
fs
 = 
ls
->fs;

819 
expdesc
 
¨gs
;

820 
ba£
, 
≈¨ams
;

821 
ls
->
t
.
tokí
) {

823 
	`luaX_√xt
(
ls
);

824 i‡(
ls
->
t
.
tokí
 == ')')

825 
¨gs
.
k
 = 
VVOID
;

827 
	`ex∂i°
(
ls
, &
¨gs
);

828 
	`luaK_£tmu…ªt
(
fs
, &
¨gs
);

830 
	`check_m©ch
(
ls
, ')', '(', 
löe
);

834 
	`c⁄°ru˘‹
(
ls
, &
¨gs
);

837 
TK_STRING
: {

838 
	`code°rög
(
ls
, &
¨gs
,Üs->
t
.
£möfo
.
ts
);

839 
	`luaX_√xt
(
ls
);

843 
	`luaX_sy¡axîr‹
(
ls
, "functionárgumentsÉxpected");

846 
	`lua_as£π
(
f
->
k
 =
VNONRELOC
);

847 
ba£
 = 
f
->
u
.
öfo
;

848 i‡(
	`hasmu…ªt
(
¨gs
.
k
))

849 
≈¨ams
 = 
LUA_MULTRET
;

851 i‡(
¨gs
.
k
 !
VVOID
)

852 
	`luaK_exp2√xåeg
(
fs
, &
¨gs
);

853 
≈¨ams
 = 
fs
->
‰ìªg
 - (
ba£
+1);

855 
	`öô_exp
(
f
, 
VCALL
, 
	`luaK_codeABC
(
fs
, 
OP_CALL
, 
ba£
, 
≈¨ams
+1, 2));

856 
	`luaK_fixlöe
(
fs
, 
löe
);

857 
fs
->
‰ìªg
 = 
ba£
+1;

859 
	}
}

871 
	$¥im¨yexp
 (
LexSèã
 *
ls
, 
expdesc
 *
v
) {

873 
ls
->
t
.
tokí
) {

875 
löe
 = 
ls
->
löíumbî
;

876 
	`luaX_√xt
(
ls
);

877 
	`ex¥
(
ls
, 
v
);

878 
	`check_m©ch
(
ls
, ')', '(', 
löe
);

879 
	`luaK_disch¨gev¨s
(
ls
->
fs
, 
v
);

882 
TK_NAME
: {

883 
	`sögÀv¨
(
ls
, 
v
);

887 
	`luaX_sy¡axîr‹
(
ls
, "unexpected symbol");

890 
	}
}

893 
	$suffixedexp
 (
LexSèã
 *
ls
, 
expdesc
 *
v
) {

896 
FuncSèã
 *
fs
 = 
ls
->fs;

897 
löe
 = 
ls
->
löíumbî
;

898 
	`¥im¨yexp
(
ls
, 
v
);

900 
ls
->
t
.
tokí
) {

902 
	`fõld£l
(
ls
, 
v
);

906 
expdesc
 
key
;

907 
	`luaK_exp2™yªgup
(
fs
, 
v
);

908 
	`yödex
(
ls
, &
key
);

909 
	`luaK_ödexed
(
fs
, 
v
, &
key
);

913 
expdesc
 
key
;

914 
	`luaX_√xt
(
ls
);

915 
	`check«me
(
ls
, &
key
);

916 
	`luaK_£lf
(
fs
, 
v
, &
key
);

917 
	`funˇrgs
(
ls
, 
v
, 
löe
);

920 '(': 
TK_STRING
: '{': {

921 
	`luaK_exp2√xåeg
(
fs
, 
v
);

922 
	`funˇrgs
(
ls
, 
v
, 
löe
);

928 
	}
}

931 
	$sim∂ìxp
 (
LexSèã
 *
ls
, 
expdesc
 *
v
) {

934 
ls
->
t
.
tokí
) {

935 
TK_FLT
: {

936 
	`öô_exp
(
v
, 
VKFLT
, 0);

937 
v
->
u
.
nvÆ
 = 
ls
->
t
.
£möfo
.
r
;

940 
TK_INT
: {

941 
	`öô_exp
(
v
, 
VKINT
, 0);

942 
v
->
u
.
ivÆ
 = 
ls
->
t
.
£möfo
.
i
;

945 
TK_STRING
: {

946 
	`code°rög
(
ls
, 
v
,Üs->
t
.
£möfo
.
ts
);

949 
TK_NIL
: {

950 
	`öô_exp
(
v
, 
VNIL
, 0);

953 
TK_TRUE
: {

954 
	`öô_exp
(
v
, 
VTRUE
, 0);

957 
TK_FALSE
: {

958 
	`öô_exp
(
v
, 
VFALSE
, 0);

961 
TK_DOTS
: {

962 
FuncSèã
 *
fs
 = 
ls
->fs;

963 
	`check_c⁄dôi⁄
(
ls
, 
fs
->
f
->
is_v¨¨g
,

965 
	`öô_exp
(
v
, 
VVARARG
, 
	`luaK_codeABC
(
fs
, 
OP_VARARG
, 0, 1, 0));

969 
	`c⁄°ru˘‹
(
ls
, 
v
);

972 
TK_FUNCTION
: {

973 
	`luaX_√xt
(
ls
);

974 
	`body
(
ls
, 
v
, 0,Üs->
löíumbî
);

978 
	`suffixedexp
(
ls
, 
v
);

982 
	`luaX_√xt
(
ls
);

983 
	}
}

986 
UnO¥
 
	$gëun›r
 (
›
) {

987 
›
) {

988 
TK_NOT
:  
OPR_NOT
;

989 '-':  
OPR_MINUS
;

990 '~':  
OPR_BNOT
;

991 '#':  
OPR_LEN
;

992 :  
OPR_NOUNOPR
;

994 
	}
}

997 
BöO¥
 
	$gëbö›r
 (
›
) {

998 
›
) {

999 '+':  
OPR_ADD
;

1000 '-':  
OPR_SUB
;

1001 '*':  
OPR_MUL
;

1002 '%':  
OPR_MOD
;

1003 '^':  
OPR_POW
;

1004 '/':  
OPR_DIV
;

1005 
TK_IDIV
:  
OPR_IDIV
;

1006 '&':  
OPR_BAND
;

1007 '|':  
OPR_BOR
;

1008 '~':  
OPR_BXOR
;

1009 
TK_SHL
:  
OPR_SHL
;

1010 
TK_SHR
:  
OPR_SHR
;

1011 
TK_CONCAT
:  
OPR_CONCAT
;

1012 
TK_NE
:  
OPR_NE
;

1013 
TK_EQ
:  
OPR_EQ
;

1014 '<':  
OPR_LT
;

1015 
TK_LE
:  
OPR_LE
;

1016 '>':  
OPR_GT
;

1017 
TK_GE
:  
OPR_GE
;

1018 
TK_AND
:  
OPR_AND
;

1019 
TK_OR
:  
OPR_OR
;

1020 :  
OPR_NOBINOPR
;

1022 
	}
}

1026 
lu_byã
 
	mÀ·
;

1027 
lu_byã
 
	mright
;

1028 } 
	g¥i‹ôy
[] = {

1041 
	#UNARY_PRIORITY
 12

	)

1048 
BöO¥
 
	$subex¥
 (
LexSèã
 *
ls
, 
expdesc
 *
v
, 
limô
) {

1049 
BöO¥
 
›
;

1050 
UnO¥
 
u›
;

1051 
	`íãæevñ
(
ls
);

1052 
u›
 = 
	`gëun›r
(
ls
->
t
.
tokí
);

1053 i‡(
u›
 !
OPR_NOUNOPR
) {

1054 
löe
 = 
ls
->
löíumbî
;

1055 
	`luaX_√xt
(
ls
);

1056 
	`subex¥
(
ls
, 
v
, 
UNARY_PRIORITY
);

1057 
	`luaK_¥efix
(
ls
->
fs
, 
u›
, 
v
, 
löe
);

1059 
	`sim∂ìxp
(
ls
, 
v
);

1061 
›
 = 
	`gëbö›r
(
ls
->
t
.
tokí
);

1062 
›
 !
OPR_NOBINOPR
 && 
¥i‹ôy
[›].
À·
 > 
limô
) {

1063 
expdesc
 
v2
;

1064 
BöO¥
 
√xt›
;

1065 
löe
 = 
ls
->
löíumbî
;

1066 
	`luaX_√xt
(
ls
);

1067 
	`luaK_öfix
(
ls
->
fs
, 
›
, 
v
);

1069 
√xt›
 = 
	`subex¥
(
ls
, &
v2
, 
¥i‹ôy
[
›
].
right
);

1070 
	`luaK_posfix
(
ls
->
fs
, 
›
, 
v
, &
v2
, 
löe
);

1071 
›
 = 
√xt›
;

1073 
	`Àavñevñ
(
ls
);

1074  
›
;

1075 
	}
}

1078 
	$ex¥
 (
LexSèã
 *
ls
, 
expdesc
 *
v
) {

1079 
	`subex¥
(
ls
, 
v
, 0);

1080 
	}
}

1093 
	$block
 (
LexSèã
 *
ls
) {

1095 
FuncSèã
 *
fs
 = 
ls
->fs;

1096 
BlockC¡
 
bl
;

1097 
	`íãrblock
(
fs
, &
bl
, 0);

1098 
	`°©li°
(
ls
);

1099 
	`Àaveblock
(
fs
);

1100 
	}
}

1107 
	sLHS_assign
 {

1108 
LHS_assign
 *
	m¥ev
;

1109 
expdesc
 
	mv
;

1119 
	$check_c⁄Êi˘
 (
LexSèã
 *
ls
, 
LHS_assign
 *
lh
, 
expdesc
 *
v
) {

1120 
FuncSèã
 *
fs
 = 
ls
->fs;

1121 
exåa
 = 
fs
->
‰ìªg
;

1122 
c⁄Êi˘
 = 0;

1123 ; 
lh
;Üh =Üh->
¥ev
) {

1124 i‡(
lh
->
v
.
k
 =
VINDEXED
) {

1126 i‡(
lh
->
v
.
u
.
öd
.
vt
 =v->
k
 &&Üh->v.u.öd.
t
 =v->u.
öfo
) {

1127 
c⁄Êi˘
 = 1;

1128 
lh
->
v
.
u
.
öd
.
vt
 = 
VLOCAL
;

1129 
lh
->
v
.
u
.
öd
.
t
 = 
exåa
;

1132 i‡(
v
->
k
 =
VLOCAL
 && 
lh
->v.
u
.
öd
.
idx
 =v->u.
öfo
) {

1133 
c⁄Êi˘
 = 1;

1134 
lh
->
v
.
u
.
öd
.
idx
 = 
exåa
;

1138 i‡(
c⁄Êi˘
) {

1140 
OpCode
 
›
 = (
v
->
k
 =
VLOCAL
Ë? 
OP_MOVE
 : 
OP_GETUPVAL
;

1141 
	`luaK_codeABC
(
fs
, 
›
, 
exåa
, 
v
->
u
.
öfo
, 0);

1142 
	`luaK_ª£rvîegs
(
fs
, 1);

1144 
	}
}

1147 
	$assignmít
 (
LexSèã
 *
ls
, 
LHS_assign
 *
lh
, 
nv¨s
) {

1148 
expdesc
 
e
;

1149 
	`check_c⁄dôi⁄
(
ls
, 
	`vkisv¨
(
lh
->
v
.
k
), "syntaxÉrror");

1150 i‡(
	`ã°√xt
(
ls
, ',')) {

1151 
LHS_assign
 
nv
;

1152 
nv
.
¥ev
 = 
lh
;

1153 
	`suffixedexp
(
ls
, &
nv
.
v
);

1154 i‡(
nv
.
v
.
k
 !
VINDEXED
)

1155 
	`check_c⁄Êi˘
(
ls
, 
lh
, &
nv
.
v
);

1156 
	`checklimô
(
ls
->
fs
, 
nv¨s
 +Üs->
L
->
nCˇŒs
, 
LUAI_MAXCCALLS
,

1158 
	`assignmít
(
ls
, &
nv
, 
nv¨s
+1);

1161 
√xps
;

1162 
	`check√xt
(
ls
, '=');

1163 
√xps
 = 
	`ex∂i°
(
ls
, &
e
);

1164 i‡(
√xps
 !
nv¨s
)

1165 
	`adju°_assign
(
ls
, 
nv¨s
, 
√xps
, &
e
);

1167 
	`luaK_£t⁄îë
(
ls
->
fs
, &
e
);

1168 
	`luaK_°‹ev¨
(
ls
->
fs
, &
lh
->
v
, &
e
);

1172 
	`öô_exp
(&
e
, 
VNONRELOC
, 
ls
->
fs
->
‰ìªg
-1);

1173 
	`luaK_°‹ev¨
(
ls
->
fs
, &
lh
->
v
, &
e
);

1174 
	}
}

1177 
	$c⁄d
 (
LexSèã
 *
ls
) {

1179 
expdesc
 
v
;

1180 
	`ex¥
(
ls
, &
v
);

1181 i‡(
v
.
k
 =
VNIL
Ëv.k = 
VFALSE
;

1182 
	`luaK_goi·rue
(
ls
->
fs
, &
v
);

1183  
v
.
f
;

1184 
	}
}

1187 
	$gŸo°©
 (
LexSèã
 *
ls
, 
pc
) {

1188 
löe
 = 
ls
->
löíumbî
;

1189 
TSåög
 *
œbñ
;

1190 
g
;

1191 i‡(
	`ã°√xt
(
ls
, 
TK_GOTO
))

1192 
œbñ
 = 
	`°r_check«me
(
ls
);

1194 
	`luaX_√xt
(
ls
);

1195 
œbñ
 = 
	`luaS_√w
(
ls
->
L
, "break");

1197 
g
 = 
	`√wœbñíåy
(
ls
, &ls->
dyd
->
gt
, 
œbñ
, 
löe
, 
pc
);

1198 
	`födœbñ
(
ls
, 
g
);

1199 
	}
}

1203 
	$checkª≥©ed
 (
FuncSèã
 *
fs
, 
Labñli°
 *
Œ
, 
TSåög
 *
œbñ
) {

1204 
i
;

1205 
i
 = 
fs
->
bl
->
fú°œbñ
; i < 
Œ
->
n
; i++) {

1206 i‡(
	`eq°r
(
œbñ
, 
Œ
->
¨r
[
i
].
«me
)) {

1207 c⁄° *
msg
 = 
	`luaO_pushf°rög
(
fs
->
ls
->
L
,

1209 
	`gë°r
(
œbñ
), 
Œ
->
¨r
[
i
].
löe
);

1210 
	`£mîr‹
(
fs
->
ls
, 
msg
);

1213 
	}
}

1217 
	$skùno›°©
 (
LexSèã
 *
ls
) {

1218 
ls
->
t
.
tokí
 =';' ||Üs->t.tokí =
TK_DBCOLON
)

1219 
	`°©emít
(
ls
);

1220 
	}
}

1223 
	$œbñ°©
 (
LexSèã
 *
ls
, 
TSåög
 *
œbñ
, 
löe
) {

1225 
FuncSèã
 *
fs
 = 
ls
->fs;

1226 
Labñli°
 *
Œ
 = &
ls
->
dyd
->
œbñ
;

1227 
l
;

1228 
	`checkª≥©ed
(
fs
, 
Œ
, 
œbñ
);

1229 
	`check√xt
(
ls
, 
TK_DBCOLON
);

1231 
l
 = 
	`√wœbñíåy
(
ls
, 
Œ
, 
œbñ
, 
löe
, 
	`luaK_gëœbñ
(
fs
));

1232 
	`skùno›°©
(
ls
);

1233 i‡(
	`block_fﬁlow
(
ls
, 0)) {

1235 
Œ
->
¨r
[
l
].
«˘v¨
 = 
fs
->
bl
->nactvar;

1237 
	`födgŸos
(
ls
, &
Œ
->
¨r
[
l
]);

1238 
	}
}

1241 
	$whûe°©
 (
LexSèã
 *
ls
, 
löe
) {

1243 
FuncSèã
 *
fs
 = 
ls
->fs;

1244 
whûeöô
;

1245 
c⁄dexô
;

1246 
BlockC¡
 
bl
;

1247 
	`luaX_√xt
(
ls
);

1248 
whûeöô
 = 
	`luaK_gëœbñ
(
fs
);

1249 
c⁄dexô
 = 
	`c⁄d
(
ls
);

1250 
	`íãrblock
(
fs
, &
bl
, 1);

1251 
	`check√xt
(
ls
, 
TK_DO
);

1252 
	`block
(
ls
);

1253 
	`luaK_jum±o
(
fs
, 
whûeöô
);

1254 
	`check_m©ch
(
ls
, 
TK_END
, 
TK_WHILE
, 
löe
);

1255 
	`Àaveblock
(
fs
);

1256 
	`luaK_∑tchtohîe
(
fs
, 
c⁄dexô
);

1257 
	}
}

1260 
	$ª≥©°©
 (
LexSèã
 *
ls
, 
löe
) {

1262 
c⁄dexô
;

1263 
FuncSèã
 *
fs
 = 
ls
->fs;

1264 
ª≥©_öô
 = 
	`luaK_gëœbñ
(
fs
);

1265 
BlockC¡
 
bl1
, 
bl2
;

1266 
	`íãrblock
(
fs
, &
bl1
, 1);

1267 
	`íãrblock
(
fs
, &
bl2
, 0);

1268 
	`luaX_√xt
(
ls
);

1269 
	`°©li°
(
ls
);

1270 
	`check_m©ch
(
ls
, 
TK_UNTIL
, 
TK_REPEAT
, 
löe
);

1271 
c⁄dexô
 = 
	`c⁄d
(
ls
);

1272 i‡(
bl2
.
upvÆ
)

1273 
	`luaK_∑tch˛o£
(
fs
, 
c⁄dexô
, 
bl2
.
«˘v¨
);

1274 
	`Àaveblock
(
fs
);

1275 
	`luaK_∑tchli°
(
fs
, 
c⁄dexô
, 
ª≥©_öô
);

1276 
	`Àaveblock
(
fs
);

1277 
	}
}

1280 
	$exp1
 (
LexSèã
 *
ls
) {

1281 
expdesc
 
e
;

1282 
ªg
;

1283 
	`ex¥
(
ls
, &
e
);

1284 
	`luaK_exp2√xåeg
(
ls
->
fs
, &
e
);

1285 
	`lua_as£π
(
e
.
k
 =
VNONRELOC
);

1286 
ªg
 = 
e
.
u
.
öfo
;

1287  
ªg
;

1288 
	}
}

1291 
	$f‹body
 (
LexSèã
 *
ls
, 
ba£
, 
löe
, 
nv¨s
, 
i¢um
) {

1293 
BlockC¡
 
bl
;

1294 
FuncSèã
 *
fs
 = 
ls
->fs;

1295 
¥ï
, 
ídf‹
;

1296 
	`adju°loˇlv¨s
(
ls
, 3);

1297 
	`check√xt
(
ls
, 
TK_DO
);

1298 
¥ï
 = 
i¢um
 ? 
	`luaK_codeAsBx
(
fs
, 
OP_FORPREP
, 
ba£
, 
NO_JUMP
Ë: 
	`luaK_jump
(fs);

1299 
	`íãrblock
(
fs
, &
bl
, 0);

1300 
	`adju°loˇlv¨s
(
ls
, 
nv¨s
);

1301 
	`luaK_ª£rvîegs
(
fs
, 
nv¨s
);

1302 
	`block
(
ls
);

1303 
	`Àaveblock
(
fs
);

1304 
	`luaK_∑tchtohîe
(
fs
, 
¥ï
);

1305 i‡(
i¢um
)

1306 
ídf‹
 = 
	`luaK_codeAsBx
(
fs
, 
OP_FORLOOP
, 
ba£
, 
NO_JUMP
);

1308 
	`luaK_codeABC
(
fs
, 
OP_TFORCALL
, 
ba£
, 0, 
nv¨s
);

1309 
	`luaK_fixlöe
(
fs
, 
löe
);

1310 
ídf‹
 = 
	`luaK_codeAsBx
(
fs
, 
OP_TFORLOOP
, 
ba£
 + 2, 
NO_JUMP
);

1312 
	`luaK_∑tchli°
(
fs
, 
ídf‹
, 
¥ï
 + 1);

1313 
	`luaK_fixlöe
(
fs
, 
löe
);

1314 
	}
}

1317 
	$f‹num
 (
LexSèã
 *
ls
, 
TSåög
 *
v¨«me
, 
löe
) {

1319 
FuncSèã
 *
fs
 = 
ls
->fs;

1320 
ba£
 = 
fs
->
‰ìªg
;

1321 
	`√w_loˇlv¨lôîÆ
(
ls
, "(for index)");

1322 
	`√w_loˇlv¨lôîÆ
(
ls
, "(forÜimit)");

1323 
	`√w_loˇlv¨lôîÆ
(
ls
, "(for step)");

1324 
	`√w_loˇlv¨
(
ls
, 
v¨«me
);

1325 
	`check√xt
(
ls
, '=');

1326 
	`exp1
(
ls
);

1327 
	`check√xt
(
ls
, ',');

1328 
	`exp1
(
ls
);

1329 i‡(
	`ã°√xt
(
ls
, ','))

1330 
	`exp1
(
ls
);

1332 
	`luaK_codek
(
fs
, fs->
‰ìªg
, 
	`luaK_ötK
(fs, 1));

1333 
	`luaK_ª£rvîegs
(
fs
, 1);

1335 
	`f‹body
(
ls
, 
ba£
, 
löe
, 1, 1);

1336 
	}
}

1339 
	$f‹li°
 (
LexSèã
 *
ls
, 
TSåög
 *
ödex«me
) {

1341 
FuncSèã
 *
fs
 = 
ls
->fs;

1342 
expdesc
 
e
;

1343 
nv¨s
 = 4;

1344 
löe
;

1345 
ba£
 = 
fs
->
‰ìªg
;

1347 
	`√w_loˇlv¨lôîÆ
(
ls
, "(for generator)");

1348 
	`√w_loˇlv¨lôîÆ
(
ls
, "(for state)");

1349 
	`√w_loˇlv¨lôîÆ
(
ls
, "(for control)");

1351 
	`√w_loˇlv¨
(
ls
, 
ödex«me
);

1352 
	`ã°√xt
(
ls
, ',')) {

1353 
	`√w_loˇlv¨
(
ls
, 
	`°r_check«me
(ls));

1354 
nv¨s
++;

1356 
	`check√xt
(
ls
, 
TK_IN
);

1357 
löe
 = 
ls
->
löíumbî
;

1358 
	`adju°_assign
(
ls
, 3, 
	`ex∂i°
÷s, &
e
), &e);

1359 
	`luaK_check°ack
(
fs
, 3);

1360 
	`f‹body
(
ls
, 
ba£
, 
löe
, 
nv¨s
 - 3, 0);

1361 
	}
}

1364 
	$f‹°©
 (
LexSèã
 *
ls
, 
löe
) {

1366 
FuncSèã
 *
fs
 = 
ls
->fs;

1367 
TSåög
 *
v¨«me
;

1368 
BlockC¡
 
bl
;

1369 
	`íãrblock
(
fs
, &
bl
, 1);

1370 
	`luaX_√xt
(
ls
);

1371 
v¨«me
 = 
	`°r_check«me
(
ls
);

1372 
ls
->
t
.
tokí
) {

1373 '=': 
	`f‹num
(
ls
, 
v¨«me
, 
löe
); ;

1374 ',': 
TK_IN
: 
	`f‹li°
(
ls
, 
v¨«me
); ;

1375 : 
	`luaX_sy¡axîr‹
(
ls
, "'=' or 'in'Éxpected");

1377 
	`check_m©ch
(
ls
, 
TK_END
, 
TK_FOR
, 
löe
);

1378 
	`Àaveblock
(
fs
);

1379 
	}
}

1382 
	$ã°_thí_block
 (
LexSèã
 *
ls
, *
esˇ≥li°
) {

1384 
BlockC¡
 
bl
;

1385 
FuncSèã
 *
fs
 = 
ls
->fs;

1386 
expdesc
 
v
;

1387 
jf
;

1388 
	`luaX_√xt
(
ls
);

1389 
	`ex¥
(
ls
, &
v
);

1390 
	`check√xt
(
ls
, 
TK_THEN
);

1391 i‡(
ls
->
t
.
tokí
 =
TK_GOTO
 ||Üs->t.tokí =
TK_BREAK
) {

1392 
	`luaK_goifÁl£
(
ls
->
fs
, &
v
);

1393 
	`íãrblock
(
fs
, &
bl
, 0);

1394 
	`gŸo°©
(
ls
, 
v
.
t
);

1395 
	`skùno›°©
(
ls
);

1396 i‡(
	`block_fﬁlow
(
ls
, 0)) {

1397 
	`Àaveblock
(
fs
);

1401 
jf
 = 
	`luaK_jump
(
fs
);

1404 
	`luaK_goi·rue
(
ls
->
fs
, &
v
);

1405 
	`íãrblock
(
fs
, &
bl
, 0);

1406 
jf
 = 
v
.
f
;

1408 
	`°©li°
(
ls
);

1409 
	`Àaveblock
(
fs
);

1410 i‡(
ls
->
t
.
tokí
 =
TK_ELSE
 ||

1411 
ls
->
t
.
tokí
 =
TK_ELSEIF
)

1412 
	`luaK_c⁄ˇt
(
fs
, 
esˇ≥li°
, 
	`luaK_jump
(fs));

1413 
	`luaK_∑tchtohîe
(
fs
, 
jf
);

1414 
	}
}

1417 
	$if°©
 (
LexSèã
 *
ls
, 
löe
) {

1419 
FuncSèã
 *
fs
 = 
ls
->fs;

1420 
esˇ≥li°
 = 
NO_JUMP
;

1421 
	`ã°_thí_block
(
ls
, &
esˇ≥li°
);

1422 
ls
->
t
.
tokí
 =
TK_ELSEIF
)

1423 
	`ã°_thí_block
(
ls
, &
esˇ≥li°
);

1424 i‡(
	`ã°√xt
(
ls
, 
TK_ELSE
))

1425 
	`block
(
ls
);

1426 
	`check_m©ch
(
ls
, 
TK_END
, 
TK_IF
, 
löe
);

1427 
	`luaK_∑tchtohîe
(
fs
, 
esˇ≥li°
);

1428 
	}
}

1431 
	$loˇlfunc
 (
LexSèã
 *
ls
) {

1432 
expdesc
 
b
;

1433 
FuncSèã
 *
fs
 = 
ls
->fs;

1434 
	`√w_loˇlv¨
(
ls
, 
	`°r_check«me
(ls));

1435 
	`adju°loˇlv¨s
(
ls
, 1);

1436 
	`body
(
ls
, &
b
, 0,Üs->
löíumbî
);

1438 
	`gëlocv¨
(
fs
, 
b
.
u
.
öfo
)->
°¨çc
 = fs->
pc
;

1439 
	}
}

1442 
	$loˇl°©
 (
LexSèã
 *
ls
) {

1444 
nv¨s
 = 0;

1445 
√xps
;

1446 
expdesc
 
e
;

1448 
	`√w_loˇlv¨
(
ls
, 
	`°r_check«me
(ls));

1449 
nv¨s
++;

1450 } 
	`ã°√xt
(
ls
, ','));

1451 i‡(
	`ã°√xt
(
ls
, '='))

1452 
√xps
 = 
	`ex∂i°
(
ls
, &
e
);

1454 
e
.
k
 = 
VVOID
;

1455 
√xps
 = 0;

1457 
	`adju°_assign
(
ls
, 
nv¨s
, 
√xps
, &
e
);

1458 
	`adju°loˇlv¨s
(
ls
, 
nv¨s
);

1459 
	}
}

1462 
	$fun˙ame
 (
LexSèã
 *
ls
, 
expdesc
 *
v
) {

1464 
ismëhod
 = 0;

1465 
	`sögÀv¨
(
ls
, 
v
);

1466 
ls
->
t
.
tokí
 == '.')

1467 
	`fõld£l
(
ls
, 
v
);

1468 i‡(
ls
->
t
.
tokí
 == ':') {

1469 
ismëhod
 = 1;

1470 
	`fõld£l
(
ls
, 
v
);

1472  
ismëhod
;

1473 
	}
}

1476 
	$func°©
 (
LexSèã
 *
ls
, 
löe
) {

1478 
ismëhod
;

1479 
expdesc
 
v
, 
b
;

1480 
	`luaX_√xt
(
ls
);

1481 
ismëhod
 = 
	`fun˙ame
(
ls
, &
v
);

1482 
	`body
(
ls
, &
b
, 
ismëhod
, 
löe
);

1483 
	`luaK_°‹ev¨
(
ls
->
fs
, &
v
, &
b
);

1484 
	`luaK_fixlöe
(
ls
->
fs
, 
löe
);

1485 
	}
}

1488 
	$ex¥°©
 (
LexSèã
 *
ls
) {

1490 
FuncSèã
 *
fs
 = 
ls
->fs;

1491 
LHS_assign
 
v
;

1492 
	`suffixedexp
(
ls
, &
v
.v);

1493 i‡(
ls
->
t
.
tokí
 == '=' ||Üs->t.token == ',') {

1494 
v
.
¥ev
 = 
NULL
;

1495 
	`assignmít
(
ls
, &
v
, 1);

1498 
	`check_c⁄dôi⁄
(
ls
, 
v
.v.
k
 =
VCALL
, "syntaxÉrror");

1499 
	`SETARG_C
(
	`gëö°ru˘i⁄
(
fs
, &
v
.v), 1);

1501 
	}
}

1504 
	$ªt°©
 (
LexSèã
 *
ls
) {

1506 
FuncSèã
 *
fs
 = 
ls
->fs;

1507 
expdesc
 
e
;

1508 
fú°
, 
ƒë
;

1509 i‡(
	`block_fﬁlow
(
ls
, 1Ë||Üs->
t
.
tokí
 == ';')

1510 
fú°
 = 
ƒë
 = 0;

1512 
ƒë
 = 
	`ex∂i°
(
ls
, &
e
);

1513 i‡(
	`hasmu…ªt
(
e
.
k
)) {

1514 
	`luaK_£tmu…ªt
(
fs
, &
e
);

1515 i‡(
e
.
k
 =
VCALL
 && 
ƒë
 == 1) {

1516 
	`SET_OPCODE
(
	`gëö°ru˘i⁄
(
fs
,&
e
), 
OP_TAILCALL
);

1517 
	`lua_as£π
(
	`GETARG_A
(
	`gëö°ru˘i⁄
(
fs
,&
e
)Ë=fs->
«˘v¨
);

1519 
fú°
 = 
fs
->
«˘v¨
;

1520 
ƒë
 = 
LUA_MULTRET
;

1523 i‡(
ƒë
 == 1)

1524 
fú°
 = 
	`luaK_exp2™yªg
(
fs
, &
e
);

1526 
	`luaK_exp2√xåeg
(
fs
, &
e
);

1527 
fú°
 = 
fs
->
«˘v¨
;

1528 
	`lua_as£π
(
ƒë
 =
fs
->
‰ìªg
 - 
fú°
);

1532 
	`luaK_ªt
(
fs
, 
fú°
, 
ƒë
);

1533 
	`ã°√xt
(
ls
, ';');

1534 
	}
}

1537 
	$°©emít
 (
LexSèã
 *
ls
) {

1538 
löe
 = 
ls
->
löíumbî
;

1539 
	`íãæevñ
(
ls
);

1540 
ls
->
t
.
tokí
) {

1542 
	`luaX_√xt
(
ls
);

1545 
TK_IF
: {

1546 
	`if°©
(
ls
, 
löe
);

1549 
TK_WHILE
: {

1550 
	`whûe°©
(
ls
, 
löe
);

1553 
TK_DO
: {

1554 
	`luaX_√xt
(
ls
);

1555 
	`block
(
ls
);

1556 
	`check_m©ch
(
ls
, 
TK_END
, 
TK_DO
, 
löe
);

1559 
TK_FOR
: {

1560 
	`f‹°©
(
ls
, 
löe
);

1563 
TK_REPEAT
: {

1564 
	`ª≥©°©
(
ls
, 
löe
);

1567 
TK_FUNCTION
: {

1568 
	`func°©
(
ls
, 
löe
);

1571 
TK_LOCAL
: {

1572 
	`luaX_√xt
(
ls
);

1573 i‡(
	`ã°√xt
(
ls
, 
TK_FUNCTION
))

1574 
	`loˇlfunc
(
ls
);

1576 
	`loˇl°©
(
ls
);

1579 
TK_DBCOLON
: {

1580 
	`luaX_√xt
(
ls
);

1581 
	`œbñ°©
(
ls
, 
	`°r_check«me
÷s), 
löe
);

1584 
TK_RETURN
: {

1585 
	`luaX_√xt
(
ls
);

1586 
	`ªt°©
(
ls
);

1589 
TK_BREAK
:

1590 
TK_GOTO
: {

1591 
	`gŸo°©
(
ls
, 
	`luaK_jump
÷s->
fs
));

1595 
	`ex¥°©
(
ls
);

1599 
	`lua_as£π
(
ls
->
fs
->
f
->
max°acksize
 >ls->fs->
‰ìªg
 &&

1600 
ls
->
fs
->
‰ìªg
 >ls->fs->
«˘v¨
);

1601 
ls
->
fs
->
‰ìªg
 =Üs->fs->
«˘v¨
;

1602 
	`Àavñevñ
(
ls
);

1603 
	}
}

1612 
	$maöfunc
 (
LexSèã
 *
ls
, 
FuncSèã
 *
fs
) {

1613 
BlockC¡
 
bl
;

1614 
expdesc
 
v
;

1615 
	`›í_func
(
ls
, 
fs
, &
bl
);

1616 
fs
->
f
->
is_v¨¨g
 = 1;

1617 
	`öô_exp
(&
v
, 
VLOCAL
, 0);

1618 
	`√wupvÆue
(
fs
, 
ls
->
ívn
, &
v
);

1619 
	`luaX_√xt
(
ls
);

1620 
	`°©li°
(
ls
);

1621 
	`check
(
ls
, 
TK_EOS
);

1622 
	`˛o£_func
(
ls
);

1623 
	}
}

1626 
LClosuª
 *
	$luaY_∑r£r
 (
lua_Sèã
 *
L
, 
ZIO
 *
z
, 
Mbuf„r
 *
buff
,

1627 
Dynd©a
 *
dyd
, c⁄° *
«me
, 
fú°ch¨
) {

1628 
LexSèã
 
Àx°©e
;

1629 
FuncSèã
 
func°©e
;

1630 
LClosuª
 *
˛
 = 
	`luaF_√wL˛osuª
(
L
, 1);

1631 
	`£t˛LvÆue
(
L
, L->
t›
, 
˛
);

1632 
	`luaD_ö˘›
(
L
);

1633 
Àx°©e
.
h
 = 
	`luaH_√w
(
L
);

1634 
	`£thvÆue
(
L
, L->
t›
, 
Àx°©e
.
h
);

1635 
	`luaD_ö˘›
(
L
);

1636 
func°©e
.
f
 = 
˛
->
p
 = 
	`luaF_√w¥Ÿo
(
L
);

1637 
func°©e
.
f
->
sour˚
 = 
	`luaS_√w
(
L
, 
«me
);

1638 
	`lua_as£π
(
	`iswhôe
(
func°©e
.
f
));

1639 
Àx°©e
.
buff
 = buff;

1640 
Àx°©e
.
dyd
 = dyd;

1641 
dyd
->
a˘v¨
.
n
 = dyd->
gt
.¿dyd->
œbñ
.n = 0;

1642 
	`luaX_£töput
(
L
, &
Àx°©e
, 
z
, 
func°©e
.
f
->
sour˚
, 
fú°ch¨
);

1643 
	`maöfunc
(&
Àx°©e
, &
func°©e
);

1644 
	`lua_as£π
(!
func°©e
.
¥ev
 && func°©e.
nups
 =1 && !
Àx°©e
.
fs
);

1646 
	`lua_as£π
(
dyd
->
a˘v¨
.
n
 =0 && dyd->
gt
.¿=0 && dyd->
œbñ
.n == 0);

1647 
L
->
t›
--;

1648  
˛
;

1649 
	}
}

	@lib/lua/lua-5.3.4/src/lparser.h

7 #i‚de‡
Õ¨£r_h


8 
	#Õ¨£r_h


	)

10 
	~"Œimôs.h
"

11 
	~"lobje˘.h
"

12 
	~"lzio.h
"

26 
	mVVOID
,

28 
	mVNIL
,

29 
	mVTRUE
,

30 
	mVFALSE
,

31 
	mVK
,

32 
	mVKFLT
,

33 
	mVKINT
,

34 
	mVNONRELOC
,

36 
	mVLOCAL
,

37 
	mVUPVAL
,

38 
	mVINDEXED
,

42 
	mVJMP
,

44 
	mVRELOCABLE
,

46 
	mVCALL
,

47 
	mVVARARG


48 } 
	texpköd
;

51 
	#vkisv¨
(
k
Ë(
VLOCAL
 <(kË&& (kË<
VINDEXED
)

	)

52 
	#vkisöªg
(
k
Ë((kË=
VNONRELOC
 || (kË=
VLOCAL
)

	)

54 
	sexpdesc
 {

55 
expköd
 
	mk
;

57 
lua_I¡egî
 
	mivÆ
;

58 
lua_Numbî
 
	mnvÆ
;

59 
	möfo
;

61 
	midx
;

62 
lu_byã
 
	mt
;

63 
lu_byã
 
	mvt
;

64 } 
	möd
;

65 } 
	mu
;

66 
	mt
;

67 
	mf
;

68 } 
	texpdesc
;

72 
	sV¨desc
 {

73 
	midx
;

74 } 
	tV¨desc
;

78 
	sLabñdesc
 {

79 
TSåög
 *
	m«me
;

80 
	mpc
;

81 
	mlöe
;

82 
lu_byã
 
	m«˘v¨
;

83 } 
	tLabñdesc
;

87 
	sLabñli°
 {

88 
Labñdesc
 *
	m¨r
;

89 
	mn
;

90 
	msize
;

91 } 
	tLabñli°
;

95 
	sDynd©a
 {

97 
V¨desc
 *
	m¨r
;

98 
	mn
;

99 
	msize
;

100 } 
	ma˘v¨
;

101 
Labñli°
 
	mgt
;

102 
Labñli°
 
	mœbñ
;

103 } 
	tDynd©a
;

107 
	gBlockC¡
;

111 
	sFuncSèã
 {

112 
PrŸo
 *
	mf
;

113 
FuncSèã
 *
	m¥ev
;

114 
LexSèã
 *
	mls
;

115 
BlockC¡
 *
	mbl
;

116 
	mpc
;

117 
	mœ°èrgë
;

118 
	mjpc
;

119 
	mnk
;

120 
	m≈
;

121 
	mfú°loˇl
;

122 
	m∆ocv¨s
;

123 
lu_byã
 
	m«˘v¨
;

124 
lu_byã
 
	mnups
;

125 
lu_byã
 
	m‰ìªg
;

126 } 
	tFuncSèã
;

129 
LUAI_FUNC
 
LClosuª
 *
luaY_∑r£r
 (
lua_Sèã
 *
L
, 
ZIO
 *
z
, 
Mbuf„r
 *
buff
,

130 
Dynd©a
 *
dyd
, c⁄° *
«me
, 
fú°ch¨
);

	@lib/lua/lua-5.3.4/src/lprefix.h

7 #i‚de‡
Õªfix_h


8 
	#Õªfix_h


	)

14 #i‡!
deföed
(
LUA_USE_C89
)

16 #i‡!
deföed
(
_XOPEN_SOURCE
)

17 
	#_XOPEN_SOURCE
 600

	)

18 #ñi‡
_XOPEN_SOURCE
 == 0

19 #unde‡
_XOPEN_SOURCE


25 #i‡!
deföed
(
LUA_32BITS
Ë&& !deföed(
_FILE_OFFSET_BITS
)

26 
	#_LARGEFILE_SOURCE
 1

	)

27 
	#_FILE_OFFSET_BITS
 64

	)

36 #i‡
deföed
(
_WIN32
)

38 #i‡!
deföed
(
_CRT_SECURE_NO_WARNINGS
)

39 
	#_CRT_SECURE_NO_WARNINGS


	)

	@lib/lua/lua-5.3.4/src/lstate.c

7 
	#l°©e_c


	)

8 
	#LUA_CORE


	)

10 
	~"Õªfix.h
"

13 
	~<°ddef.h
>

14 
	~<°rög.h
>

16 
	~"lua.h
"

18 
	~"œpi.h
"

19 
	~"ldebug.h
"

20 
	~"ldo.h
"

21 
	~"lfunc.h
"

22 
	~"lgc.h
"

23 
	~"Œex.h
"

24 
	~"lmem.h
"

25 
	~"l°©e.h
"

26 
	~"l°rög.h
"

27 
	~"…abÀ.h
"

28 
	~"…m.h
"

31 #i‡!
deföed
(
LUAI_GCPAUSE
)

32 
	#LUAI_GCPAUSE
 200

	)

35 #i‡!
deföed
(
LUAI_GCMUL
)

36 
	#LUAI_GCMUL
 200

	)

44 #i‡!
deföed
(
luai_make£ed
)

45 
	~<time.h
>

46 
	#luai_make£ed
(Ë
	`ˇ°
(, 
	`time
(
NULL
))

	)

54 
	sLX
 {

55 
lu_byã
 
	mexåa_
[
LUA_EXTRASPACE
];

56 
lua_Sèã
 
	ml
;

57 } 
	tLX
;

63 
	sLG
 {

64 
LX
 
	ml
;

65 
globÆ_Sèã
 
	mg
;

66 } 
	tLG
;

70 
	#‰om°©e
(
L
Ë(
	`ˇ°
(
LX
 *, ca°(
lu_byã
 *, (L)Ë- 
	`off£tof
(LX, 
l
)))

	)

77 
	#addbuff
(
b
,
p
,
e
) \

78 { 
size_t
 
t
 = 
	`ˇ°
(size_t, 
e
); \

79 
	`mem˝y
(
b
 + 
p
, &
t
, —));Ö +—); }

	)

81 
	$make£ed
 (
lua_Sèã
 *
L
) {

82 
buff
[4 * (
size_t
)];

83 
h
 = 
	`luai_make£ed
();

84 
p
 = 0;

85 
	`addbuff
(
buff
, 
p
, 
L
);

86 
	`addbuff
(
buff
, 
p
, &
h
);

87 
	`addbuff
(
buff
, 
p
, 
luaO_nûobje˘
);

88 
	`addbuff
(
buff
, 
p
, &
lua_√w°©e
);

89 
	`lua_as£π
(
p
 =(
buff
));

90  
	`luaS_hash
(
buff
, 
p
, 
h
);

91 
	}
}

98 
	$luaE_£tdebt
 (
globÆ_Sèã
 *
g
, 
l_mem
 
debt
) {

99 
l_mem
 
tb
 = 
	`gëtŸÆbyãs
(
g
);

100 
	`lua_as£π
(
tb
 > 0);

101 i‡(
debt
 < 
tb
 - 
MAX_LMEM
)

102 
debt
 = 
tb
 - 
MAX_LMEM
;

103 
g
->
tŸÆbyãs
 = 
tb
 - 
debt
;

104 
g
->
GCdebt
 = 
debt
;

105 
	}
}

108 
CÆlInfo
 *
	$luaE_exãndCI
 (
lua_Sèã
 *
L
) {

109 
CÆlInfo
 *
ci
 = 
	`luaM_√w
(
L
, CallInfo);

110 
	`lua_as£π
(
L
->
ci
->
√xt
 =
NULL
);

111 
L
->
ci
->
√xt
 = ci;

112 
ci
->
¥evious
 = 
L
->ci;

113 
ci
->
√xt
 = 
NULL
;

114 
L
->
nci
++;

115  
ci
;

116 
	}
}

122 
	$luaE_‰ìCI
 (
lua_Sèã
 *
L
) {

123 
CÆlInfo
 *
ci
 = 
L
->ci;

124 
CÆlInfo
 *
√xt
 = 
ci
->next;

125 
ci
->
√xt
 = 
NULL
;

126 (
ci
 = 
√xt
Ë!
NULL
) {

127 
√xt
 = 
ci
->next;

128 
	`luaM_‰ì
(
L
, 
ci
);

129 
L
->
nci
--;

131 
	}
}

137 
	$luaE_shrökCI
 (
lua_Sèã
 *
L
) {

138 
CÆlInfo
 *
ci
 = 
L
->ci;

139 
CÆlInfo
 *
√xt2
;

141 
ci
->
√xt
 !
NULL
 && (
√xt2
 = ci->next->next) != NULL) {

142 
	`luaM_‰ì
(
L
, 
ci
->
√xt
);

143 
L
->
nci
--;

144 
ci
->
√xt
 = 
√xt2
;

145 
√xt2
->
¥evious
 = 
ci
;

146 
ci
 = 
√xt2
;

148 
	}
}

151 
	$°ack_öô
 (
lua_Sèã
 *
L1
,Üua_Sèã *
L
) {

152 
i
; 
CÆlInfo
 *
ci
;

154 
L1
->
°ack
 = 
	`luaM_√wve˘‹
(
L
, 
BASIC_STACK_SIZE
, 
TVÆue
);

155 
L1
->
°acksize
 = 
BASIC_STACK_SIZE
;

156 
i
 = 0; i < 
BASIC_STACK_SIZE
; i++)

157 
	`£äûvÆue
(
L1
->
°ack
 + 
i
);

158 
L1
->
t›
 = L1->
°ack
;

159 
L1
->
°ack_œ°
 = L1->
°ack
 + L1->
°acksize
 - 
EXTRA_STACK
;

161 
ci
 = &
L1
->
ba£_ci
;

162 
ci
->
√xt
 = ci->
¥evious
 = 
NULL
;

163 
ci
->
ˇŒ°©us
 = 0;

164 
ci
->
func
 = 
L1
->
t›
;

165 
	`£äûvÆue
(
L1
->
t›
++);

166 
ci
->
t›
 = 
L1
->t› + 
LUA_MINSTACK
;

167 
L1
->
ci
 = ci;

168 
	}
}

171 
	$‰ì°ack
 (
lua_Sèã
 *
L
) {

172 i‡(
L
->
°ack
 =
NULL
)

174 
L
->
ci
 = &L->
ba£_ci
;

175 
	`luaE_‰ìCI
(
L
);

176 
	`lua_as£π
(
L
->
nci
 == 0);

177 
	`luaM_‰ì¨øy
(
L
, L->
°ack
, L->
°acksize
);

178 
	}
}

184 
	$öô_ªgi°ry
 (
lua_Sèã
 *
L
, 
globÆ_Sèã
 *
g
) {

185 
TVÆue
 
ãmp
;

187 
TabÀ
 *
ªgi°ry
 = 
	`luaH_√w
(
L
);

188 
	`£thvÆue
(
L
, &
g
->
l_ªgi°ry
, 
ªgi°ry
);

189 
	`luaH_ªsize
(
L
, 
ªgi°ry
, 
LUA_RIDX_LAST
, 0);

191 
	`£âhvÆue
(
L
, &
ãmp
, L);

192 
	`luaH_£töt
(
L
, 
ªgi°ry
, 
LUA_RIDX_MAINTHREAD
, &
ãmp
);

194 
	`£thvÆue
(
L
, &
ãmp
, 
	`luaH_√w
(L));

195 
	`luaH_£töt
(
L
, 
ªgi°ry
, 
LUA_RIDX_GLOBALS
, &
ãmp
);

196 
	}
}

203 
	$f_lua›í
 (
lua_Sèã
 *
L
, *
ud
) {

204 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

205 
	`UNUSED
(
ud
);

206 
	`°ack_öô
(
L
, L);

207 
	`öô_ªgi°ry
(
L
, 
g
);

208 
	`luaS_öô
(
L
);

209 
	`luaT_öô
(
L
);

210 
	`luaX_öô
(
L
);

211 
g
->
g¸u¬ög
 = 1;

212 
g
->
vîsi⁄
 = 
	`lua_vîsi⁄
(
NULL
);

213 
	`luai_u£r°©e›í
(
L
);

214 
	}
}

221 
	$¥eöô_thªad
 (
lua_Sèã
 *
L
, 
globÆ_Sèã
 *
g
) {

222 
	`G
(
L
Ë
g
;

223 
L
->
°ack
 = 
NULL
;

224 
L
->
ci
 = 
NULL
;

225 
L
->
nci
 = 0;

226 
L
->
°acksize
 = 0;

227 
L
->
twups
 = L;

228 
L
->
îr‹Jmp
 = 
NULL
;

229 
L
->
nCˇŒs
 = 0;

230 
L
->
hook
 = 
NULL
;

231 
L
->
hookmask
 = 0;

232 
L
->
ba£hookcou¡
 = 0;

233 
L
->
Ælowhook
 = 1;

234 
	`ª£thookcou¡
(
L
);

235 
L
->
›íupvÆ
 = 
NULL
;

236 
L
->
¬y
 = 1;

237 
L
->
°©us
 = 
LUA_OK
;

238 
L
->
îrfunc
 = 0;

239 
	}
}

242 
	$˛o£_°©e
 (
lua_Sèã
 *
L
) {

243 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

244 
	`luaF_˛o£
(
L
, L->
°ack
);

245 
	`luaC_‰ìÆlobje˘s
(
L
);

246 i‡(
g
->
vîsi⁄
)

247 
	`luai_u£r°©e˛o£
(
L
);

248 
	`luaM_‰ì¨øy
(
L
, 
	`G
(L)->
°π
.
hash
, G(L)->°π.
size
);

249 
	`‰ì°ack
(
L
);

250 
	`lua_as£π
(
	`gëtŸÆbyãs
(
g
Ë=(
LG
));

251 (*
g
->
‰óŒoc
)(g->
ud
, 
	`‰om°©e
(
L
), (
LG
), 0);

252 
	}
}

255 
LUA_API
 
lua_Sèã
 *
	$lua_√wthªad
 (
lua_Sèã
 *
L
) {

256 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

257 
lua_Sèã
 *
L1
;

258 
	`lua_lock
(
L
);

259 
	`luaC_checkGC
(
L
);

261 
L1
 = &
	`ˇ°
(
LX
 *, 
	`luaM_√wobje˘
(
L
, 
LUA_TTHREAD
, (LX)))->
l
;

262 
L1
->
m¨ked
 = 
	`luaC_whôe
(
g
);

263 
L1
->
â
 = 
LUA_TTHREAD
;

265 
L1
->
√xt
 = 
g
->
Ælgc
;

266 
g
->
Ælgc
 = 
	`obj2gco
(
L1
);

268 
	`£âhvÆue
(
L
, L->
t›
, 
L1
);

269 
	`≠i_ö¸_t›
(
L
);

270 
	`¥eöô_thªad
(
L1
, 
g
);

271 
L1
->
hookmask
 = 
L
->hookmask;

272 
L1
->
ba£hookcou¡
 = 
L
->basehookcount;

273 
L1
->
hook
 = 
L
->hook;

274 
	`ª£thookcou¡
(
L1
);

276 
	`mem˝y
(
	`lua_gëexåa•a˚
(
L1
),Üua_gëexåa•a˚(
g
->
maöthªad
),

277 
LUA_EXTRASPACE
);

278 
	`luai_u£r°©ëhªad
(
L
, 
L1
);

279 
	`°ack_öô
(
L1
, 
L
);

280 
	`lua_u∆ock
(
L
);

281  
L1
;

282 
	}
}

285 
	$luaE_‰ìthªad
 (
lua_Sèã
 *
L
,Üua_Sèã *
L1
) {

286 
LX
 *
l
 = 
	`‰om°©e
(
L1
);

287 
	`luaF_˛o£
(
L1
, L1->
°ack
);

288 
	`lua_as£π
(
L1
->
›íupvÆ
 =
NULL
);

289 
	`luai_u£r°©e‰ì
(
L
, 
L1
);

290 
	`‰ì°ack
(
L1
);

291 
	`luaM_‰ì
(
L
, 
l
);

292 
	}
}

295 
LUA_API
 
lua_Sèã
 *
	$lua_√w°©e
 (
lua_AŒoc
 
f
, *
ud
) {

296 
i
;

297 
lua_Sèã
 *
L
;

298 
globÆ_Sèã
 *
g
;

299 
LG
 *
l
 = 
	`ˇ°
(LG *, (*
f
)(
ud
, 
NULL
, 
LUA_TTHREAD
, (LG)));

300 i‡(
l
 =
NULL
)  NULL;

301 
L
 = &
l
->l.l;

302 
g
 = &
l
->g;

303 
L
->
√xt
 = 
NULL
;

304 
L
->
â
 = 
LUA_TTHREAD
;

305 
g
->
cuºítwhôe
 = 
	`bômask
(
WHITE0BIT
);

306 
L
->
m¨ked
 = 
	`luaC_whôe
(
g
);

307 
	`¥eöô_thªad
(
L
, 
g
);

308 
g
->
‰óŒoc
 = 
f
;

309 
g
->
ud
 = ud;

310 
g
->
maöthªad
 = 
L
;

311 
g
->
£ed
 = 
	`make£ed
(
L
);

312 
g
->
g¸u¬ög
 = 0;

313 
g
->
GCe°im©e
 = 0;

314 
g
->
°π
.
size
 = g->°π.
nu£
 = 0;

315 
g
->
°π
.
hash
 = 
NULL
;

316 
	`£äûvÆue
(&
g
->
l_ªgi°ry
);

317 
g
->
∑nic
 = 
NULL
;

318 
g
->
vîsi⁄
 = 
NULL
;

319 
g
->
gc°©e
 = 
GCS∑u£
;

320 
g
->
gcköd
 = 
KGC_NORMAL
;

321 
g
->
Ælgc
 = g->
föobj
 = g->
tobe‚z
 = g->
fixedgc
 = 
NULL
;

322 
g
->
swìpgc
 = 
NULL
;

323 
g
->
gøy
 = g->
gøyagaö
 = 
NULL
;

324 
g
->
wók
 = g->
ïhemî⁄
 = g->
Ælwók
 = 
NULL
;

325 
g
->
twups
 = 
NULL
;

326 
g
->
tŸÆbyãs
 = (
LG
);

327 
g
->
GCdebt
 = 0;

328 
g
->
gcfönum
 = 0;

329 
g
->
g˝au£
 = 
LUAI_GCPAUSE
;

330 
g
->
gc°ïmul
 = 
LUAI_GCMUL
;

331 
i
=0; i < 
LUA_NUMTAGS
; i++Ë
g
->
mt
[i] = 
NULL
;

332 i‡(
	`luaD_øwru≈rŸe˘ed
(
L
, 
f_lua›í
, 
NULL
Ë!
LUA_OK
) {

334 
	`˛o£_°©e
(
L
);

335 
L
 = 
NULL
;

337  
L
;

338 
	}
}

341 
LUA_API
 
	$lua_˛o£
 (
lua_Sèã
 *
L
) {

342 
L
 = 
	`G
(L)->
maöthªad
;

343 
	`lua_lock
(
L
);

344 
	`˛o£_°©e
(
L
);

345 
	}
}

	@lib/lua/lua-5.3.4/src/lstate.h

7 #i‚de‡
l°©e_h


8 
	#l°©e_h


	)

10 
	~"lua.h
"

12 
	~"lobje˘.h
"

13 
	~"…m.h
"

14 
	~"lzio.h
"

33 
	glua_l⁄gjmp
;

40 #i‡!
deföed
(
l_sig«lT
)

41 
	~<sig«l.h
>

42 
	#l_sig«lT
 
sig_©omic_t


	)

47 
	#EXTRA_STACK
 5

	)

50 
	#BASIC_STACK_SIZE
 (2*
LUA_MINSTACK
)

	)

54 
	#KGC_NORMAL
 0

	)

55 
	#KGC_EMERGENCY
 1

	)

58 
	s°rögèbÀ
 {

59 
TSåög
 **
	mhash
;

60 
	mnu£
;

61 
	msize
;

62 } 
	t°rögèbÀ
;

74 
	sCÆlInfo
 {

75 
StkId
 
	mfunc
;

76 
StkId
 
	mt›
;

77 
CÆlInfo
 *
	m¥evious
, *
	m√xt
;

80 
StkId
 
	mba£
;

81 c⁄° 
In°ru˘i⁄
 *
	mßvedpc
;

82 } 
	ml
;

84 
lua_KFun˘i⁄
 
	mk
;

85 
±rdiff_t
 
	mﬁd_îrfunc
;

86 
lua_KC⁄ãxt
 
	m˘x
;

87 } 
	mc
;

88 } 
	mu
;

89 
±rdiff_t
 
	mexåa
;

90 
	mƒesu…s
;

91 
	mˇŒ°©us
;

92 } 
	tCÆlInfo
;

98 
	#CIST_OAH
 (1<<0Ë

	)

99 
	#CIST_LUA
 (1<<1Ë

	)

100 
	#CIST_HOOKED
 (1<<2Ë

	)

101 
	#CIST_FRESH
 (1<<3Ë

	)

103 
	#CIST_YPCALL
 (1<<4Ë

	)

104 
	#CIST_TAIL
 (1<<5Ë

	)

105 
	#CIST_HOOKYIELD
 (1<<6Ë

	)

106 
	#CIST_LEQ
 (1<<7Ë

	)

107 
	#CIST_FIN
 (1<<8Ë

	)

109 
	#isLua
(
ci
Ë((ci)->
ˇŒ°©us
 & 
CIST_LUA
)

	)

112 
	#£tﬂh
(
°
,
v
Ë((°Ë((°Ë& ~
CIST_OAH
Ë| (v))

	)

113 
	#gëﬂh
(
°
Ë((°Ë& 
CIST_OAH
)

	)

119 
	sglobÆ_Sèã
 {

120 
lua_AŒoc
 
	m‰óŒoc
;

121 *
	mud
;

122 
l_mem
 
	mtŸÆbyãs
;

123 
l_mem
 
	mGCdebt
;

124 
lu_mem
 
	mGCmemåav
;

125 
lu_mem
 
	mGCe°im©e
;

126 
°rögèbÀ
 
	m°π
;

127 
TVÆue
 
	ml_ªgi°ry
;

128 
	m£ed
;

129 
lu_byã
 
	mcuºítwhôe
;

130 
lu_byã
 
	mgc°©e
;

131 
lu_byã
 
	mgcköd
;

132 
lu_byã
 
	mg¸u¬ög
;

133 
GCObje˘
 *
	mÆlgc
;

134 
GCObje˘
 **
	mswìpgc
;

135 
GCObje˘
 *
	mföobj
;

136 
GCObje˘
 *
	mgøy
;

137 
GCObje˘
 *
	mgøyagaö
;

138 
GCObje˘
 *
	mwók
;

139 
GCObje˘
 *
	mïhemî⁄
;

140 
GCObje˘
 *
	mÆlwók
;

141 
GCObje˘
 *
	mtobe‚z
;

142 
GCObje˘
 *
	mfixedgc
;

143 
lua_Sèã
 *
	mtwups
;

144 
	mgcfönum
;

145 
	mg˝au£
;

146 
	mgc°ïmul
;

147 
lua_CFun˘i⁄
 
	m∑nic
;

148 
lua_Sèã
 *
	mmaöthªad
;

149 c⁄° 
lua_Numbî
 *
	mvîsi⁄
;

150 
TSåög
 *
	mmemîrmsg
;

151 
TSåög
 *
	mtm«me
[
TM_N
];

152 
TabÀ
 *
	mmt
[
LUA_NUMTAGS
];

153 
TSåög
 *
	m°rˇche
[
STRCACHE_N
][
STRCACHE_M
];

154 } 
	tglobÆ_Sèã
;

160 
	slua_Sèã
 {

161 
	mComm⁄Hódî
;

162 
	mnci
;

163 
lu_byã
 
	m°©us
;

164 
StkId
 
	mt›
;

165 
globÆ_Sèã
 *
	ml_G
;

166 
CÆlInfo
 *
	mci
;

167 c⁄° 
In°ru˘i⁄
 *
	mﬁdpc
;

168 
StkId
 
	m°ack_œ°
;

169 
StkId
 
	m°ack
;

170 
UpVÆ
 *
	m›íupvÆ
;

171 
GCObje˘
 *
	mg˛i°
;

172 
lua_Sèã
 *
	mtwups
;

173 
lua_l⁄gjmp
 *
	mîr‹Jmp
;

174 
CÆlInfo
 
	mba£_ci
;

175 vﬁ©ûê
lua_Hook
 
	mhook
;

176 
±rdiff_t
 
	mîrfunc
;

177 
	m°acksize
;

178 
	mba£hookcou¡
;

179 
	mhookcou¡
;

180 
	m¬y
;

181 
	mnCˇŒs
;

182 
l_sig«lT
 
	mhookmask
;

183 
lu_byã
 
	mÆlowhook
;

185 * 
	m¥iv©e
;

189 
	#G
(
L
Ë(L->
l_G
)

	)

195 
	uGCUni⁄
 {

196 
GCObje˘
 
	mgc
;

197 
TSåög
 
	mts
;

198 
Ud©a
 
	mu
;

199 
Closuª
 
	m˛
;

200 
TabÀ
 
	mh
;

201 
PrŸo
 
	mp
;

202 
lua_Sèã
 
	mth
;

206 
	#ˇ°_u
(
o
Ë
	`ˇ°
(
GCUni⁄
 *, (o))

	)

209 
	#gco2ts
(
o
) \

210 
	`check_exp
(
	`nov¨ü¡
((
o
)->
â
Ë=
LUA_TSTRING
, &((
	`ˇ°_u
(o))->
ts
))

	)

211 
	#gco2u
(
o
Ë
	`check_exp
((o)->
â
 =
LUA_TUSERDATA
, &((
	`ˇ°_u
(o))->
u
))

	)

212 
	#gco2l˛
(
o
Ë
	`check_exp
((o)->
â
 =
LUA_TLCL
, &((
	`ˇ°_u
(o))->
˛
.
l
))

	)

213 
	#gco2c˛
(
o
Ë
	`check_exp
((o)->
â
 =
LUA_TCCL
, &((
	`ˇ°_u
(o))->
˛
.
c
))

	)

214 
	#gco2˛
(
o
) \

215 
	`check_exp
(
	`nov¨ü¡
((
o
)->
â
Ë=
LUA_TFUNCTION
, &((
	`ˇ°_u
(o))->
˛
))

	)

216 
	#gco2t
(
o
Ë
	`check_exp
((o)->
â
 =
LUA_TTABLE
, &((
	`ˇ°_u
(o))->
h
))

	)

217 
	#gco2p
(
o
Ë
	`check_exp
((o)->
â
 =
LUA_TPROTO
, &((
	`ˇ°_u
(o))->
p
))

	)

218 
	#gco2th
(
o
Ë
	`check_exp
((o)->
â
 =
LUA_TTHREAD
, &((
	`ˇ°_u
(o))->
th
))

	)

222 
	#obj2gco
(
v
) \

223 
	`check_exp
(
	`nov¨ü¡
((
v
)->
â
Ë< 
LUA_TDEADKEY
, (&(
	`ˇ°_u
(v)->
gc
)))

	)

227 
	#gëtŸÆbyãs
(
g
Ë
	`ˇ°
(
lu_mem
, (g)->
tŸÆbyãs
 + (g)->
GCdebt
)

	)

229 
LUAI_FUNC
 
luaE_£tdebt
 (
globÆ_Sèã
 *
g
, 
l_mem
 
debt
);

230 
LUAI_FUNC
 
luaE_‰ìthªad
 (
lua_Sèã
 *
L
,Üua_Sèã *
L1
);

231 
LUAI_FUNC
 
CÆlInfo
 *
luaE_exãndCI
 (
lua_Sèã
 *
L
);

232 
LUAI_FUNC
 
luaE_‰ìCI
 (
lua_Sèã
 *
L
);

233 
LUAI_FUNC
 
luaE_shrökCI
 (
lua_Sèã
 *
L
);

	@lib/lua/lua-5.3.4/src/lstring.c

7 
	#l°rög_c


	)

8 
	#LUA_CORE


	)

10 
	~"Õªfix.h
"

13 
	~<°rög.h
>

15 
	~"lua.h
"

17 
	~"ldebug.h
"

18 
	~"ldo.h
"

19 
	~"lmem.h
"

20 
	~"lobje˘.h
"

21 
	~"l°©e.h
"

22 
	~"l°rög.h
"

25 
	#MEMERRMSG
 "nŸÉnough mem‹y"

	)

32 #i‡!
deföed
(
LUAI_HASHLIMIT
)

33 
	#LUAI_HASHLIMIT
 5

	)

40 
	$luaS_eq g°r
 (
TSåög
 *
a
, TSåög *
b
) {

41 
size_t
 
Àn
 = 
a
->
u
.
 gÀn
;

42 
	`lua_as£π
(
a
->
â
 =
LUA_TLNGSTR
 && 
b
->tt == LUA_TLNGSTR);

43  (
a
 =
b
) ||

44 ((
Àn
 =
b
->
u
.
 gÀn
) &&

45 (
	`memcmp
(
	`gë°r
(
a
), gë°r(
b
), 
Àn
) == 0));

46 
	}
}

49 
	$luaS_hash
 (c⁄° *
°r
, 
size_t
 
l
, 
£ed
) {

50 
h
 = 
£ed
 ^ 
	`ˇ°
(, 
l
);

51 
size_t
 
°ï
 = (
l
 >> 
LUAI_HASHLIMIT
) + 1;

52 ; 
l
 >
°ï
;Ü -= step)

53 
h
 ^((h<<5Ë+ (h>>2Ë+ 
	`ˇ°_byã
(
°r
[
l
 - 1]));

54  
h
;

55 
	}
}

58 
	$luaS_hashl⁄g°r
 (
TSåög
 *
ts
) {

59 
	`lua_as£π
(
ts
->
â
 =
LUA_TLNGSTR
);

60 i‡(
ts
->
exåa
 == 0) {

61 
ts
->
hash
 = 
	`luaS_hash
(
	`gë°r
—s),Ås->
u
.
 gÀn
,Ås->hash);

62 
ts
->
exåa
 = 1;

64  
ts
->
hash
;

65 
	}
}

71 
	$luaS_ªsize
 (
lua_Sèã
 *
L
, 
√wsize
) {

72 
i
;

73 
°rögèbÀ
 *
tb
 = &
	`G
(
L
)->
°π
;

74 i‡(
√wsize
 > 
tb
->
size
) {

75 
	`luaM_ªÆlocve˘‹
(
L
, 
tb
->
hash
,Åb->
size
, 
√wsize
, 
TSåög
 *);

76 
i
 = 
tb
->
size
; i < 
√wsize
; i++)

77 
tb
->
hash
[
i
] = 
NULL
;

79 
i
 = 0; i < 
tb
->
size
; i++) {

80 
TSåög
 *
p
 = 
tb
->
hash
[
i
];

81 
tb
->
hash
[
i
] = 
NULL
;

82 
p
) {

83 
TSåög
 *
h√xt
 = 
p
->
u
.hnext;

84 
h
 = 
	`lmod
(
p
->
hash
, 
√wsize
);

85 
p
->
u
.
h√xt
 = 
tb
->
hash
[
h
];

86 
tb
->
hash
[
h
] = 
p
;

87 
p
 = 
h√xt
;

90 i‡(
√wsize
 < 
tb
->
size
) {

92 
	`lua_as£π
(
tb
->
hash
[
√wsize
] =
NULL
 &&Åb->hash[tb->
size
 - 1] == NULL);

93 
	`luaM_ªÆlocve˘‹
(
L
, 
tb
->
hash
,Åb->
size
, 
√wsize
, 
TSåög
 *);

95 
tb
->
size
 = 
√wsize
;

96 
	}
}

103 
	$luaS_˛órˇche
 (
globÆ_Sèã
 *
g
) {

104 
i
, 
j
;

105 
i
 = 0; i < 
STRCACHE_N
; i++)

106 
j
 = 0; j < 
STRCACHE_M
; j++) {

107 i‡(
	`iswhôe
(
g
->
°rˇche
[
i
][
j
]))

108 
g
->
°rˇche
[
i
][
j
] = g->
memîrmsg
;

110 
	}
}

116 
	$luaS_öô
 (
lua_Sèã
 *
L
) {

117 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

118 
i
, 
j
;

119 
	`luaS_ªsize
(
L
, 
MINSTRTABSIZE
);

121 
g
->
memîrmsg
 = 
	`luaS_√wlôîÆ
(
L
, 
MEMERRMSG
);

122 
	`luaC_fix
(
L
, 
	`obj2gco
(
g
->
memîrmsg
));

123 
i
 = 0; i < 
STRCACHE_N
; i++)

124 
j
 = 0; j < 
STRCACHE_M
; j++)

125 
g
->
°rˇche
[
i
][
j
] = g->
memîrmsg
;

126 
	}
}

133 
TSåög
 *
	$¸óã°robj
 (
lua_Sèã
 *
L
, 
size_t
 
l
, 
èg
, 
h
) {

134 
TSåög
 *
ts
;

135 
GCObje˘
 *
o
;

136 
size_t
 
tŸÆsize
;

137 
tŸÆsize
 = 
	`sizñ°rög
(
l
);

138 
o
 = 
	`luaC_√wobj
(
L
, 
èg
, 
tŸÆsize
);

139 
ts
 = 
	`gco2ts
(
o
);

140 
ts
->
hash
 = 
h
;

141 
ts
->
exåa
 = 0;

142 
	`gë°r
(
ts
)[
l
] = '\0';

143  
ts
;

144 
	}
}

147 
TSåög
 *
	$luaS_¸óã g°robj
 (
lua_Sèã
 *
L
, 
size_t
 
l
) {

148 
TSåög
 *
ts
 = 
	`¸óã°robj
(
L
, 
l
, 
LUA_TLNGSTR
, 
	`G
(L)->
£ed
);

149 
ts
->
u
.
 gÀn
 = 
l
;

150  
ts
;

151 
	}
}

154 
	$luaS_ªmove
 (
lua_Sèã
 *
L
, 
TSåög
 *
ts
) {

155 
°rögèbÀ
 *
tb
 = &
	`G
(
L
)->
°π
;

156 
TSåög
 **
p
 = &
tb
->
hash
[
	`lmod
(
ts
->hash,Åb->
size
)];

157 *
p
 !
ts
)

158 
p
 = &(*p)->
u
.
h√xt
;

159 *
p
 = (*p)->
u
.
h√xt
;

160 
tb
->
nu£
--;

161 
	}
}

167 
TSåög
 *
	$öã∫shr°r
 (
lua_Sèã
 *
L
, c⁄° *
°r
, 
size_t
 
l
) {

168 
TSåög
 *
ts
;

169 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

170 
h
 = 
	`luaS_hash
(
°r
, 
l
, 
g
->
£ed
);

171 
TSåög
 **
li°
 = &
g
->
°π
.
hash
[
	`lmod
(
h
, g->°π.
size
)];

172 
	`lua_as£π
(
°r
 !
NULL
);

173 
ts
 = *
li°
;Å†!
NULL
;Å†ts->
u
.
h√xt
) {

174 i‡(
l
 =
ts
->
shæí
 &&

175 (
	`memcmp
(
°r
, 
	`gë°r
(
ts
), 
l
 * ()) == 0)) {

177 i‡(
	`isdód
(
g
, 
ts
))

178 
	`ch™gewhôe
(
ts
);

179  
ts
;

182 i‡(
g
->
°π
.
nu£
 >g->°π.
size
 && g->°π.sizê<
MAX_INT
/2) {

183 
	`luaS_ªsize
(
L
, 
g
->
°π
.
size
 * 2);

184 
li°
 = &
g
->
°π
.
hash
[
	`lmod
(
h
, g->°π.
size
)];

186 
ts
 = 
	`¸óã°robj
(
L
, 
l
, 
LUA_TSHRSTR
, 
h
);

187 
	`mem˝y
(
	`gë°r
(
ts
), 
°r
, 
l
 * ());

188 
ts
->
shæí
 = 
	`ˇ°_byã
(
l
);

189 
ts
->
u
.
h√xt
 = *
li°
;

190 *
li°
 = 
ts
;

191 
g
->
°π
.
nu£
++;

192  
ts
;

193 
	}
}

199 
TSåög
 *
	$luaS_√wl°r
 (
lua_Sèã
 *
L
, c⁄° *
°r
, 
size_t
 
l
) {

200 i‡(
l
 <
LUAI_MAXSHORTLEN
)

201  
	`öã∫shr°r
(
L
, 
°r
, 
l
);

203 
TSåög
 *
ts
;

204 i‡(
l
 >(
MAX_SIZE
 - (
TSåög
))/())

205 
	`luaM_toobig
(
L
);

206 
ts
 = 
	`luaS_¸óã g°robj
(
L
, 
l
);

207 
	`mem˝y
(
	`gë°r
(
ts
), 
°r
, 
l
 * ());

208  
ts
;

210 
	}
}

219 
TSåög
 *
	$luaS_√w
 (
lua_Sèã
 *
L
, c⁄° *
°r
) {

220 
i
 = 
	`poöt2uöt
(
°r
Ë% 
STRCACHE_N
;

221 
j
;

222 
TSåög
 **
p
 = 
	`G
(
L
)->
°rˇche
[
i
];

223 
j
 = 0; j < 
STRCACHE_M
; j++) {

224 i‡(
	`°rcmp
(
°r
, 
	`gë°r
(
p
[
j
])) == 0)

225  
p
[
j
];

228 
j
 = 
STRCACHE_M
 - 1; j > 0; j--)

229 
p
[
j
] =Ö[j - 1];

231 
p
[0] = 
	`luaS_√wl°r
(
L
, 
°r
, 
	`°æí
(str));

232  
p
[0];

233 
	}
}

236 
Ud©a
 *
	$luaS_√wud©a
 (
lua_Sèã
 *
L
, 
size_t
 
s
) {

237 
Ud©a
 *
u
;

238 
GCObje˘
 *
o
;

239 i‡(
s
 > 
MAX_SIZE
 - (
Ud©a
))

240 
	`luaM_toobig
(
L
);

241 
o
 = 
	`luaC_√wobj
(
L
, 
LUA_TUSERDATA
, 
	`sizñud©a
(
s
));

242 
u
 = 
	`gco2u
(
o
);

243 
u
->
Àn
 = 
s
;

244 
u
->
më©abÀ
 = 
NULL
;

245 
	`£tu£rvÆue
(
L
, 
u
, 
luaO_nûobje˘
);

246  
u
;

247 
	}
}

	@lib/lua/lua-5.3.4/src/lstring.h

7 #i‚de‡
l°rög_h


8 
	#l°rög_h


	)

10 
	~"lgc.h
"

11 
	~"lobje˘.h
"

12 
	~"l°©e.h
"

15 
	#sizñ°rög
(
l
Ë((
UTSåög
Ë+ (÷Ë+ 1Ë* ())

	)

17 
	#sizñud©a
(
l
Ë((
UUd©a
Ë+ (l))

	)

18 
	#sizeud©a
(
u
Ë
	`sizñud©a
((u)->
Àn
)

	)

20 
	#luaS_√wlôîÆ
(
L
, 
s
Ë(
	`luaS_√wl°r
(L, "" s, \

21 ((
s
)/())-1))

	)

27 
	#i§e£rved
(
s
Ë((s)->
â
 =
LUA_TSHRSTR
 && (s)->
exåa
 > 0)

	)

33 
	#eqshr°r
(
a
,
b
Ë
	`check_exp
(◊)->
â
 =
LUA_TSHRSTR
, (aË=(b))

	)

36 
LUAI_FUNC
 
luaS_hash
 (c⁄° *
°r
, 
size_t
 
l
, 
£ed
);

37 
LUAI_FUNC
 
luaS_hashl⁄g°r
 (
TSåög
 *
ts
);

38 
LUAI_FUNC
 
luaS_eq g°r
 (
TSåög
 *
a
, TSåög *
b
);

39 
LUAI_FUNC
 
luaS_ªsize
 (
lua_Sèã
 *
L
, 
√wsize
);

40 
LUAI_FUNC
 
luaS_˛órˇche
 (
globÆ_Sèã
 *
g
);

41 
LUAI_FUNC
 
luaS_öô
 (
lua_Sèã
 *
L
);

42 
LUAI_FUNC
 
luaS_ªmove
 (
lua_Sèã
 *
L
, 
TSåög
 *
ts
);

43 
LUAI_FUNC
 
Ud©a
 *
luaS_√wud©a
 (
lua_Sèã
 *
L
, 
size_t
 
s
);

44 
LUAI_FUNC
 
TSåög
 *
luaS_√wl°r
 (
lua_Sèã
 *
L
, c⁄° *
°r
, 
size_t
 
l
);

45 
LUAI_FUNC
 
TSåög
 *
luaS_√w
 (
lua_Sèã
 *
L
, c⁄° *
°r
);

46 
LUAI_FUNC
 
TSåög
 *
luaS_¸óã g°robj
 (
lua_Sèã
 *
L
, 
size_t
 
l
);

	@lib/lua/lua-5.3.4/src/lstrlib.c

7 
	#l°æib_c


	)

8 
	#LUA_LIB


	)

10 
	~"Õªfix.h
"

13 
	~<˘y≥.h
>

14 
	~<Êﬂt.h
>

15 
	~<limôs.h
>

16 
	~<loˇÀ.h
>

17 
	~<°ddef.h
>

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 
	~"lua.h
"

24 
	~"œuxlib.h
"

25 
	~"luÆib.h
"

33 #i‡!
deföed
(
LUA_MAXCAPTURES
)

34 
	#LUA_MAXCAPTURES
 32

	)

39 
	#uch¨
(
c
Ë(()(c))

	)

46 
	#MAX_SIZET
 ((
size_t
)(~(size_t)0))

	)

48 
	#MAXSIZE
 \

49 ((
size_t
Ë< (Ë? 
MAX_SIZET
 : (size_t)(
INT_MAX
))

	)

54 
	$°r_Àn
 (
lua_Sèã
 *
L
) {

55 
size_t
 
l
;

56 
	`luaL_checkl°rög
(
L
, 1, &
l
);

57 
	`lua_pushöãgî
(
L
, (
lua_I¡egî
)
l
);

59 
	}
}

63 
lua_I¡egî
 
	$po§ñ©
 (
lua_I¡egî
 
pos
, 
size_t
 
Àn
) {

64 i‡(
pos
 >= 0) Öos;

65 i‡(0u - (
size_t
)
pos
 > 
Àn
)  0;

66  (
lua_I¡egî
)
Àn
 + 
pos
 + 1;

67 
	}
}

70 
	$°r_sub
 (
lua_Sèã
 *
L
) {

71 
size_t
 
l
;

72 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
l
);

73 
lua_I¡egî
 
°¨t
 = 
	`po§ñ©
(
	`luaL_checköãgî
(
L
, 2), 
l
);

74 
lua_I¡egî
 
íd
 = 
	`po§ñ©
(
	`luaL_›töãgî
(
L
, 3, -1), 
l
);

75 i‡(
°¨t
 < 1) start = 1;

76 i‡(
íd
 > (
lua_I¡egî
)
l
)Énd =Ü;

77 i‡(
°¨t
 <
íd
)

78 
	`lua_pushl°rög
(
L
, 
s
 + 
°¨t
 - 1, (
size_t
)(
íd
 - start) + 1);

79 
	`lua_pushlôîÆ
(
L
, "");

81 
	}
}

84 
	$°r_ªvî£
 (
lua_Sèã
 *
L
) {

85 
size_t
 
l
, 
i
;

86 
luaL_Buf„r
 
b
;

87 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
l
);

88 *
p
 = 
	`luaL_bufföôsize
(
L
, &
b
, 
l
);

89 
i
 = 0; i < 
l
; i++)

90 
p
[
i
] = 
s
[
l
 - i - 1];

91 
	`luaL_pushªsu…size
(&
b
, 
l
);

93 
	}
}

96 
	$°r_lowî
 (
lua_Sèã
 *
L
) {

97 
size_t
 
l
;

98 
size_t
 
i
;

99 
luaL_Buf„r
 
b
;

100 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
l
);

101 *
p
 = 
	`luaL_bufföôsize
(
L
, &
b
, 
l
);

102 
i
=0; i<
l
; i++)

103 
p
[
i
] = 
	`tﬁowî
(
	`uch¨
(
s
[i]));

104 
	`luaL_pushªsu…size
(&
b
, 
l
);

106 
	}
}

109 
	$°r_uµî
 (
lua_Sèã
 *
L
) {

110 
size_t
 
l
;

111 
size_t
 
i
;

112 
luaL_Buf„r
 
b
;

113 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
l
);

114 *
p
 = 
	`luaL_bufföôsize
(
L
, &
b
, 
l
);

115 
i
=0; i<
l
; i++)

116 
p
[
i
] = 
	`touµî
(
	`uch¨
(
s
[i]));

117 
	`luaL_pushªsu…size
(&
b
, 
l
);

119 
	}
}

122 
	$°r_ªp
 (
lua_Sèã
 *
L
) {

123 
size_t
 
l
, 
l£p
;

124 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
l
);

125 
lua_I¡egî
 
n
 = 
	`luaL_checköãgî
(
L
, 2);

126 c⁄° *
£p
 = 
	`luaL_›é°rög
(
L
, 3, "", &
l£p
);

127 i‡(
n
 <0Ë
	`lua_pushlôîÆ
(
L
, "");

128 i‡(
l
 + 
l£p
 <Ü ||Ü +Ü£∞> 
MAXSIZE
 / 
n
)

129  
	`luaL_îr‹
(
L
, "resulting stringÅooÜarge");

131 
size_t
 
tŸÆÀn
 = (size_t)
n
 * 
l
 + (size_t)“ - 1Ë* 
l£p
;

132 
luaL_Buf„r
 
b
;

133 *
p
 = 
	`luaL_bufföôsize
(
L
, &
b
, 
tŸÆÀn
);

134 
n
-- > 1) {

135 
	`mem˝y
(
p
, 
s
, 
l
 * ());Ö +=Ü;

136 i‡(
l£p
 > 0) {

137 
	`mem˝y
(
p
, 
£p
, 
l£p
 * ());

138 
p
 +
l£p
;

141 
	`mem˝y
(
p
, 
s
, 
l
 * ());

142 
	`luaL_pushªsu…size
(&
b
, 
tŸÆÀn
);

145 
	}
}

148 
	$°r_byã
 (
lua_Sèã
 *
L
) {

149 
size_t
 
l
;

150 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
l
);

151 
lua_I¡egî
 
posi
 = 
	`po§ñ©
(
	`luaL_›töãgî
(
L
, 2, 1), 
l
);

152 
lua_I¡egî
 
po£
 = 
	`po§ñ©
(
	`luaL_›töãgî
(
L
, 3, 
posi
), 
l
);

153 
n
, 
i
;

154 i‡(
posi
 < 1)Öosi = 1;

155 i‡(
po£
 > (
lua_I¡egî
)
l
)Öose =Ü;

156 i‡(
posi
 > 
po£
)  0;

157 i‡(
po£
 - 
posi
 >
INT_MAX
)

158  
	`luaL_îr‹
(
L
, "string sliceÅooÜong");

159 
n
 = ()(
po£
 - 
posi
) + 1;

160 
	`luaL_check°ack
(
L
, 
n
, "string sliceÅooÜong");

161 
i
=0; i<
n
; i++)

162 
	`lua_pushöãgî
(
L
, 
	`uch¨
(
s
[
posi
+
i
-1]));

163  
n
;

164 
	}
}

167 
	$°r_ch¨
 (
lua_Sèã
 *
L
) {

168 
n
 = 
	`lua_gët›
(
L
);

169 
i
;

170 
luaL_Buf„r
 
b
;

171 *
p
 = 
	`luaL_bufföôsize
(
L
, &
b
, 
n
);

172 
i
=1; i<=
n
; i++) {

173 
lua_I¡egî
 
c
 = 
	`luaL_checköãgî
(
L
, 
i
);

174 
	`luaL_¨gcheck
(
L
, 
	`uch¨
(
c
Ë=c, 
i
, "value out ofÑange");

175 
p
[
i
 - 1] = 
	`uch¨
(
c
);

177 
	`luaL_pushªsu…size
(&
b
, 
n
);

179 
	}
}

182 
	$wrôî
 (
lua_Sèã
 *
L
, c⁄° *
b
, 
size_t
 
size
, *
B
) {

183 ()
L
;

184 
	`luaL_addl°rög
((
luaL_Buf„r
 *Ë
B
, (c⁄° *)
b
, 
size
);

186 
	}
}

189 
	$°r_dump
 (
lua_Sèã
 *
L
) {

190 
luaL_Buf„r
 
b
;

191 
°rù
 = 
	`lua_toboﬁón
(
L
, 2);

192 
	`luaL_checkty≥
(
L
, 1, 
LUA_TFUNCTION
);

193 
	`lua_£â›
(
L
, 1);

194 
	`luaL_bufföô
(
L
,&
b
);

195 i‡(
	`lua_dump
(
L
, 
wrôî
, &
b
, 
°rù
) != 0)

196  
	`luaL_îr‹
(
L
, "unableÅo dump given function");

197 
	`luaL_pushªsu…
(&
b
);

199 
	}
}

210 
	#CAP_UNFINISHED
 (-1)

	)

211 
	#CAP_POSITION
 (-2)

	)

214 
	sM©chSèã
 {

215 c⁄° *
	m§c_öô
;

216 c⁄° *
	m§c_íd
;

217 c⁄° *
	mp_íd
;

218 
lua_Sèã
 *
	mL
;

219 
	mm©chdïth
;

220 
	mÀvñ
;

222 c⁄° *
	möô
;

223 
±rdiff_t
 
	mÀn
;

224 } 
	mˇ±uª
[
LUA_MAXCAPTURES
];

225 } 
	tM©chSèã
;

229 c⁄° *
m©ch
 (
M©chSèã
 *
ms
, c⁄° *
s
, c⁄° *
p
);

233 #i‡!
deföed
(
MAXCCALLS
)

234 
	#MAXCCALLS
 200

	)

238 
	#L_ESC
 '%'

	)

239 
	#SPECIALS
 "^$*+?.([%-"

	)

242 
	$check_ˇ±uª
 (
M©chSèã
 *
ms
, 
l
) {

243 
l
 -= '1';

244 i‡(
l
 < 0 ||Ü >
ms
->
Àvñ
 || ms->
ˇ±uª
[l].
Àn
 =
CAP_UNFINISHED
)

245  
	`luaL_îr‹
(
ms
->
L
, "övÆid c≠tuª index %%%d", 
l
 + 1);

246  
l
;

247 
	}
}

250 
	$ˇ±uª_to_˛o£
 (
M©chSèã
 *
ms
) {

251 
Àvñ
 = 
ms
->level;

252 
Àvñ
--;Üevel>=0;Üevel--)

253 i‡(
ms
->
ˇ±uª
[
Àvñ
].
Àn
 =
CAP_UNFINISHED
) Üevel;

254  
	`luaL_îr‹
(
ms
->
L
, "invalidÖattern capture");

255 
	}
}

258 c⁄° *
	$˛as£nd
 (
M©chSèã
 *
ms
, c⁄° *
p
) {

259 *
p
++) {

260 
L_ESC
: {

261 i‡(
p
 =
ms
->
p_íd
)

262 
	`luaL_îr‹
(
ms
->
L
, "malformedÖattern (ends with '%%')");

263  
p
+1;

266 i‡(*
p
 == '^')Ö++;

268 i‡(
p
 =
ms
->
p_íd
)

269 
	`luaL_îr‹
(
ms
->
L
, "malformedÖattern (missing ']')");

270 i‡(*(
p
++Ë=
L_ESC
 &&Ö < 
ms
->
p_íd
)

271 
p
++;

272 } *
p
 != ']');

273  
p
+1;

276  
p
;

279 
	}
}

282 
	$m©ch_˛ass
 (
c
, 
˛
) {

283 
ªs
;

284 
	`tﬁowî
(
˛
)) {

285 'a' : 
ªs
 = 
	`ißÕha
(
c
); ;

286 'c' : 
ªs
 = 
	`is˙ål
(
c
); ;

287 'd' : 
ªs
 = 
	`isdigô
(
c
); ;

288 'g' : 
ªs
 = 
	`isgøph
(
c
); ;

289 'l' : 
ªs
 = 
	`i¶owî
(
c
); ;

290 'p' : 
ªs
 = 
	`i•un˘
(
c
); ;

291 's' : 
ªs
 = 
	`is•a˚
(
c
); ;

292 'u' : 
ªs
 = 
	`isuµî
(
c
); ;

293 'w' : 
ªs
 = 
	`iß um
(
c
); ;

294 'x' : 
ªs
 = 
	`isxdigô
(
c
); ;

295 'z' : 
ªs
 = (
c
 == 0); ;

296 :  (
˛
 =
c
);

298  (
	`i¶owî
(
˛
Ë? 
ªs
 : !res);

299 
	}
}

302 
	$m©chbøckë˛ass
 (
c
, c⁄° *
p
, c⁄° *
ec
) {

303 
sig
 = 1;

304 i‡(*(
p
+1) == '^') {

305 
sig
 = 0;

306 
p
++;

308 ++
p
 < 
ec
) {

309 i‡(*
p
 =
L_ESC
) {

310 
p
++;

311 i‡(
	`m©ch_˛ass
(
c
, 
	`uch¨
(*
p
)))

312  
sig
;

314 i‡((*(
p
+1Ë='-'Ë&& (p+2 < 
ec
)) {

315 
p
+=2;

316 i‡(
	`uch¨
(*(
p
-2)Ë<
c
 && c <= uchar(*p))

317  
sig
;

319 i‡(
	`uch¨
(*
p
Ë=
c
Ë 
sig
;

321  !
sig
;

322 
	}
}

325 
	$sögÀm©ch
 (
M©chSèã
 *
ms
, c⁄° *
s
, c⁄° *
p
,

326 c⁄° *
ï
) {

327 i‡(
s
 >
ms
->
§c_íd
)

330 
c
 = 
	`uch¨
(*
s
);

331 *
p
) {

333 
L_ESC
:  
	`m©ch_˛ass
(
c
, 
	`uch¨
(*(
p
+1)));

334 '[':  
	`m©chbøckë˛ass
(
c
, 
p
, 
ï
-1);

335 :  (
	`uch¨
(*
p
Ë=
c
);

338 
	}
}

341 c⁄° *
	$m©chbÆ™˚
 (
M©chSèã
 *
ms
, c⁄° *
s
,

342 c⁄° *
p
) {

343 i‡(
p
 >
ms
->
p_íd
 - 1)

344 
	`luaL_îr‹
(
ms
->
L
, "malformedÖattern (missingárgumentsÅo '%%b')");

345 i‡(*
s
 !*
p
Ë 
NULL
;

347 
b
 = *
p
;

348 
e
 = *(
p
+1);

349 
c⁄t
 = 1;

350 ++
s
 < 
ms
->
§c_íd
) {

351 i‡(*
s
 =
e
) {

352 i‡(--
c⁄t
 =0Ë 
s
+1;

354 i‡(*
s
 =
b
Ë
c⁄t
++;

357  
NULL
;

358 
	}
}

361 c⁄° *
	$max_ex∑nd
 (
M©chSèã
 *
ms
, c⁄° *
s
,

362 c⁄° *
p
, c⁄° *
ï
) {

363 
±rdiff_t
 
i
 = 0;

364 
	`sögÀm©ch
(
ms
, 
s
 + 
i
, 
p
, 
ï
))

365 
i
++;

367 
i
>=0) {

368 c⁄° *
ªs
 = 
	`m©ch
(
ms
, (
s
+
i
), 
ï
+1);

369 i‡(
ªs
) Ñes;

370 
i
--;

372  
NULL
;

373 
	}
}

376 c⁄° *
	$mö_ex∑nd
 (
M©chSèã
 *
ms
, c⁄° *
s
,

377 c⁄° *
p
, c⁄° *
ï
) {

379 c⁄° *
ªs
 = 
	`m©ch
(
ms
, 
s
, 
ï
+1);

380 i‡(
ªs
 !
NULL
)

381  
ªs
;

382 i‡(
	`sögÀm©ch
(
ms
, 
s
, 
p
, 
ï
))

383 
s
++;

384  
NULL
;

386 
	}
}

389 c⁄° *
	$°¨t_ˇ±uª
 (
M©chSèã
 *
ms
, c⁄° *
s
,

390 c⁄° *
p
, 
wh©
) {

391 c⁄° *
ªs
;

392 
Àvñ
 = 
ms
->level;

393 i‡(
Àvñ
 >
LUA_MAXCAPTURES
Ë
	`luaL_îr‹
(
ms
->
L
, "too many captures");

394 
ms
->
ˇ±uª
[
Àvñ
].
öô
 = 
s
;

395 
ms
->
ˇ±uª
[
Àvñ
].
Àn
 = 
wh©
;

396 
ms
->
Àvñ
 =Üevel+1;

397 i‡((
ªs
=
	`m©ch
(
ms
, 
s
, 
p
)Ë=
NULL
)

398 
ms
->
Àvñ
--;

399  
ªs
;

400 
	}
}

403 c⁄° *
	$íd_ˇ±uª
 (
M©chSèã
 *
ms
, c⁄° *
s
,

404 c⁄° *
p
) {

405 
l
 = 
	`ˇ±uª_to_˛o£
(
ms
);

406 c⁄° *
ªs
;

407 
ms
->
ˇ±uª
[
l
].
Àn
 = 
s
 - ms->ˇ±uª[l].
öô
;

408 i‡((
ªs
 = 
	`m©ch
(
ms
, 
s
, 
p
)Ë=
NULL
)

409 
ms
->
ˇ±uª
[
l
].
Àn
 = 
CAP_UNFINISHED
;

410  
ªs
;

411 
	}
}

414 c⁄° *
	$m©ch_ˇ±uª
 (
M©chSèã
 *
ms
, c⁄° *
s
, 
l
) {

415 
size_t
 
Àn
;

416 
l
 = 
	`check_ˇ±uª
(
ms
,Ü);

417 
Àn
 = 
ms
->
ˇ±uª
[
l
].len;

418 i‡((
size_t
)(
ms
->
§c_íd
-
s
Ë>
Àn
 &&

419 
	`memcmp
(
ms
->
ˇ±uª
[
l
].
öô
, 
s
, 
Àn
) == 0)

420  
s
+
Àn
;

421  
NULL
;

422 
	}
}

425 c⁄° *
	$m©ch
 (
M©chSèã
 *
ms
, c⁄° *
s
, c⁄° *
p
) {

426 i‡(
ms
->
m©chdïth
-- == 0)

427 
	`luaL_îr‹
(
ms
->
L
, "patternÅoo complex");

428 
öô
:

429 i‡(
p
 !
ms
->
p_íd
) {

430 *
p
) {

432 i‡(*(
p
 + 1) == ')')

433 
s
 = 
	`°¨t_ˇ±uª
(
ms
, s, 
p
 + 2, 
CAP_POSITION
);

435 
s
 = 
	`°¨t_ˇ±uª
(
ms
, s, 
p
 + 1, 
CAP_UNFINISHED
);

439 
s
 = 
	`íd_ˇ±uª
(
ms
, s, 
p
 + 1);

443 i‡((
p
 + 1Ë!
ms
->
p_íd
)

444 
dÊt
;

445 
s
 = (†=
ms
->
§c_íd
Ë? s : 
NULL
;

448 
L_ESC
: {

449 *(
p
 + 1)) {

451 
s
 = 
	`m©chbÆ™˚
(
ms
, s, 
p
 + 2);

452 i‡(
s
 !
NULL
) {

453 
p
 +4; 
öô
;

458 c⁄° *
ï
; 
¥evious
;

459 
p
 += 2;

460 i‡(*
p
 != '[')

461 
	`luaL_îr‹
(
ms
->
L
, "missing '['áfter '%%f' inÖattern");

462 
ï
 = 
	`˛as£nd
(
ms
, 
p
);

463 
¥evious
 = (
s
 =
ms
->
§c_öô
) ? '\0' : *(s - 1);

464 i‡(!
	`m©chbøckë˛ass
(
	`uch¨
(
¥evious
), 
p
, 
ï
 - 1) &&

465 
	`m©chbøckë˛ass
(
	`uch¨
(*
s
), 
p
, 
ï
 - 1)) {

466 
p
 = 
ï
; 
öô
;

468 
s
 = 
NULL
;

474 
s
 = 
	`m©ch_ˇ±uª
(
ms
, s, 
	`uch¨
(*(
p
 + 1)));

475 i‡(
s
 !
NULL
) {

476 
p
 +2; 
öô
;

480 : 
dÊt
;

484 : 
dÊt
: {

485 c⁄° *
ï
 = 
	`˛as£nd
(
ms
, 
p
);

487 i‡(!
	`sögÀm©ch
(
ms
, 
s
, 
p
, 
ï
)) {

488 i‡(*
ï
 == '*' || *ep == '?' || *ep == '-') {

489 
p
 = 
ï
 + 1; 
öô
;

492 
s
 = 
NULL
;

495 *
ï
) {

497 c⁄° *
ªs
;

498 i‡((
ªs
 = 
	`m©ch
(
ms
, 
s
 + 1, 
ï
 + 1)Ë!
NULL
)

499 
s
 = 
ªs
;

501 
p
 = 
ï
 + 1; 
öô
;

506 
s
++;

509 
s
 = 
	`max_ex∑nd
(
ms
, s, 
p
, 
ï
);

512 
s
 = 
	`mö_ex∑nd
(
ms
, s, 
p
, 
ï
);

515 
s
++; 
p
 = 
ï
; 
öô
;

522 
ms
->
m©chdïth
++;

523  
s
;

524 
	}
}

528 c⁄° *
	$lmemföd
 (c⁄° *
s1
, 
size_t
 
l1
,

529 c⁄° *
s2
, 
size_t
 
l2
) {

530 i‡(
l2
 =0Ë 
s1
;

531 i‡(
l2
 > 
l1
Ë 
NULL
;

533 c⁄° *
öô
;

534 
l2
--;

535 
l1
 =Ü1-
l2
;

536 
l1
 > 0 && (
öô
 = (c⁄° *)
	`memchr
(
s1
, *
s2
,Ü1)Ë!
NULL
) {

537 
öô
++;

538 i‡(
	`memcmp
(
öô
, 
s2
+1, 
l2
) == 0)

539  
öô
-1;

541 
l1
 -
öô
-
s1
;

542 
s1
 = 
öô
;

545  
NULL
;

547 
	}
}

550 
	$push_⁄eˇ±uª
 (
M©chSèã
 *
ms
, 
i
, c⁄° *
s
,

551 c⁄° *
e
) {

552 i‡(
i
 >
ms
->
Àvñ
) {

553 i‡(
i
 == 0)

554 
	`lua_pushl°rög
(
ms
->
L
, 
s
, 
e
 - s);

556 
	`luaL_îr‹
(
ms
->
L
, "övÆid c≠tuª index %%%d", 
i
 + 1);

559 
±rdiff_t
 
l
 = 
ms
->
ˇ±uª
[
i
].
Àn
;

560 i‡(
l
 =
CAP_UNFINISHED
Ë
	`luaL_îr‹
(
ms
->
L
, "unfinished capture");

561 i‡(
l
 =
CAP_POSITION
)

562 
	`lua_pushöãgî
(
ms
->
L
, (ms->
ˇ±uª
[
i
].
öô
 - ms->
§c_öô
) + 1);

564 
	`lua_pushl°rög
(
ms
->
L
, ms->
ˇ±uª
[
i
].
öô
, 
l
);

566 
	}
}

569 
	$push_ˇ±uªs
 (
M©chSèã
 *
ms
, c⁄° *
s
, c⁄° *
e
) {

570 
i
;

571 
∆evñs
 = (
ms
->
Àvñ
 =0 && 
s
) ? 1 : ms->level;

572 
	`luaL_check°ack
(
ms
->
L
, 
∆evñs
, "too many captures");

573 
i
 = 0; i < 
∆evñs
; i++)

574 
	`push_⁄eˇ±uª
(
ms
, 
i
, 
s
, 
e
);

575  
∆evñs
;

576 
	}
}

580 
	$no•ecüls
 (c⁄° *
p
, 
size_t
 
l
) {

581 
size_t
 
u±o
 = 0;

583 i‡(
	`°Ωbrk
(
p
 + 
u±o
, 
SPECIALS
))

585 
u±o
 +
	`°æí
(
p
 + upto) + 1;

586 } 
u±o
 <
l
);

588 
	}
}

591 
	$¥ï°©e
 (
M©chSèã
 *
ms
, 
lua_Sèã
 *
L
,

592 c⁄° *
s
, 
size_t
 
ls
, c⁄° *
p
, size_à
Õ
) {

593 
ms
->
L
 = L;

594 
ms
->
m©chdïth
 = 
MAXCCALLS
;

595 
ms
->
§c_öô
 = 
s
;

596 
ms
->
§c_íd
 = 
s
 + 
ls
;

597 
ms
->
p_íd
 = 
p
 + 
Õ
;

598 
	}
}

601 
	$ª¥ï°©e
 (
M©chSèã
 *
ms
) {

602 
ms
->
Àvñ
 = 0;

603 
	`lua_as£π
(
ms
->
m©chdïth
 =
MAXCCALLS
);

604 
	}
}

607 
	$°r_föd_aux
 (
lua_Sèã
 *
L
, 
föd
) {

608 
size_t
 
ls
, 
Õ
;

609 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
ls
);

610 c⁄° *
p
 = 
	`luaL_checkl°rög
(
L
, 2, &
Õ
);

611 
lua_I¡egî
 
öô
 = 
	`po§ñ©
(
	`luaL_›töãgî
(
L
, 3, 1), 
ls
);

612 i‡(
öô
 < 1) init = 1;

613 i‡(
öô
 > (
lua_I¡egî
)
ls
 + 1) {

614 
	`lua_pushnû
(
L
);

618 i‡(
föd
 && (
	`lua_toboﬁón
(
L
, 4Ë|| 
	`no•ecüls
(
p
, 
Õ
))) {

620 c⁄° *
s2
 = 
	`lmemföd
(
s
 + 
öô
 - 1, 
ls
 - (
size_t
)öô + 1, 
p
, 
Õ
);

621 i‡(
s2
) {

622 
	`lua_pushöãgî
(
L
, (
s2
 - 
s
) + 1);

623 
	`lua_pushöãgî
(
L
, (
s2
 - 
s
Ë+ 
Õ
);

628 
M©chSèã
 
ms
;

629 c⁄° *
s1
 = 
s
 + 
öô
 - 1;

630 
™ch‹
 = (*
p
 == '^');

631 i‡(
™ch‹
) {

632 
p
++; 
Õ
--;

634 
	`¥ï°©e
(&
ms
, 
L
, 
s
, 
ls
, 
p
, 
Õ
);

636 c⁄° *
ªs
;

637 
	`ª¥ï°©e
(&
ms
);

638 i‡((
ªs
=
	`m©ch
(&
ms
, 
s1
, 
p
)Ë!
NULL
) {

639 i‡(
föd
) {

640 
	`lua_pushöãgî
(
L
, (
s1
 - 
s
) + 1);

641 
	`lua_pushöãgî
(
L
, 
ªs
 - 
s
);

642  
	`push_ˇ±uªs
(&
ms
, 
NULL
, 0) + 2;

645  
	`push_ˇ±uªs
(&
ms
, 
s1
, 
ªs
);

647 } 
s1
++ < 
ms
.
§c_íd
 && !
™ch‹
);

649 
	`lua_pushnû
(
L
);

651 
	}
}

654 
	$°r_föd
 (
lua_Sèã
 *
L
) {

655  
	`°r_föd_aux
(
L
, 1);

656 
	}
}

659 
	$°r_m©ch
 (
lua_Sèã
 *
L
) {

660  
	`°r_föd_aux
(
L
, 0);

661 
	}
}

665 
	sGM©chSèã
 {

666 c⁄° *
	m§c
;

667 c⁄° *
	mp
;

668 c⁄° *
	mœ°m©ch
;

669 
M©chSèã
 
	mms
;

670 } 
	tGM©chSèã
;

673 
	$gm©ch_aux
 (
lua_Sèã
 *
L
) {

674 
GM©chSèã
 *
gm
 = (GM©chSèã *)
	`lua_tou£rd©a
(
L
, 
	`lua_upvÆueödex
(3));

675 c⁄° *
§c
;

676 
gm
->
ms
.
L
 = L;

677 
§c
 = 
gm
->§c; sr¯<gm->
ms
.
§c_íd
; src++) {

678 c⁄° *
e
;

679 
	`ª¥ï°©e
(&
gm
->
ms
);

680 i‡((
e
 = 
	`m©ch
(&
gm
->
ms
, 
§c
, gm->
p
)Ë!
NULL
 &&É !gm->
œ°m©ch
) {

681 
gm
->
§c
 = gm->
œ°m©ch
 = 
e
;

682  
	`push_ˇ±uªs
(&
gm
->
ms
, 
§c
, 
e
);

686 
	}
}

689 
	$gm©ch
 (
lua_Sèã
 *
L
) {

690 
size_t
 
ls
, 
Õ
;

691 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
ls
);

692 c⁄° *
p
 = 
	`luaL_checkl°rög
(
L
, 2, &
Õ
);

693 
GM©chSèã
 *
gm
;

694 
	`lua_£â›
(
L
, 2);

695 
gm
 = (
GM©chSèã
 *)
	`lua_√wu£rd©a
(
L
, (GMatchState));

696 
	`¥ï°©e
(&
gm
->
ms
, 
L
, 
s
, 
ls
, 
p
, 
Õ
);

697 
gm
->
§c
 = 
s
; gm->
p
 =Ö; gm->
œ°m©ch
 = 
NULL
;

698 
	`lua_pushc˛osuª
(
L
, 
gm©ch_aux
, 3);

700 
	}
}

703 
	$add_s
 (
M©chSèã
 *
ms
, 
luaL_Buf„r
 *
b
, c⁄° *
s
,

704 c⁄° *
e
) {

705 
size_t
 
l
, 
i
;

706 
lua_Sèã
 *
L
 = 
ms
->L;

707 c⁄° *
√ws
 = 
	`lua_tﬁ°rög
(
L
, 3, &
l
);

708 
i
 = 0; i < 
l
; i++) {

709 i‡(
√ws
[
i
] !
L_ESC
)

710 
	`luaL_addch¨
(
b
, 
√ws
[
i
]);

712 
i
++;

713 i‡(!
	`isdigô
(
	`uch¨
(
√ws
[
i
]))) {

714 i‡(
√ws
[
i
] !
L_ESC
)

715 
	`luaL_îr‹
(
L
, "övÆid u£ o‡'%c' i¿ª∂a˚míà°rög", 
L_ESC
);

716 
	`luaL_addch¨
(
b
, 
√ws
[
i
]);

718 i‡(
√ws
[
i
] == '0')

719 
	`luaL_addl°rög
(
b
, 
s
, 
e
 - s);

721 
	`push_⁄eˇ±uª
(
ms
, 
√ws
[
i
] - '1', 
s
, 
e
);

722 
	`luaL_tﬁ°rög
(
L
, -1, 
NULL
);

723 
	`lua_ªmove
(
L
, -2);

724 
	`luaL_addvÆue
(
b
);

728 
	}
}

731 
	$add_vÆue
 (
M©chSèã
 *
ms
, 
luaL_Buf„r
 *
b
, c⁄° *
s
,

732 c⁄° *
e
, 
å
) {

733 
lua_Sèã
 *
L
 = 
ms
->L;

734 
å
) {

735 
LUA_TFUNCTION
: {

736 
n
;

737 
	`lua_pushvÆue
(
L
, 3);

738 
n
 = 
	`push_ˇ±uªs
(
ms
, 
s
, 
e
);

739 
	`lua_ˇŒ
(
L
, 
n
, 1);

742 
LUA_TTABLE
: {

743 
	`push_⁄eˇ±uª
(
ms
, 0, 
s
, 
e
);

744 
	`lua_gëèbÀ
(
L
, 3);

748 
	`add_s
(
ms
, 
b
, 
s
, 
e
);

752 i‡(!
	`lua_toboﬁón
(
L
, -1)) {

753 
	`lua_p›
(
L
, 1);

754 
	`lua_pushl°rög
(
L
, 
s
, 
e
 - s);

756 i‡(!
	`lua_is°rög
(
L
, -1))

757 
	`luaL_îr‹
(
L
, "övÆidÑïœ˚míàvÆuê◊ %s)", 
	`luaL_ty≥«me
(L, -1));

758 
	`luaL_addvÆue
(
b
);

759 
	}
}

762 
	$°r_gsub
 (
lua_Sèã
 *
L
) {

763 
size_t
 
§˛
, 
Õ
;

764 c⁄° *
§c
 = 
	`luaL_checkl°rög
(
L
, 1, &
§˛
);

765 c⁄° *
p
 = 
	`luaL_checkl°rög
(
L
, 2, &
Õ
);

766 c⁄° *
œ°m©ch
 = 
NULL
;

767 
å
 = 
	`lua_ty≥
(
L
, 3);

768 
lua_I¡egî
 
max_s
 = 
	`luaL_›töãgî
(
L
, 4, 
§˛
 + 1);

769 
™ch‹
 = (*
p
 == '^');

770 
lua_I¡egî
 
n
 = 0;

771 
M©chSèã
 
ms
;

772 
luaL_Buf„r
 
b
;

773 
	`luaL_¨gcheck
(
L
, 
å
 =
LUA_TNUMBER
 ||Å∏=
LUA_TSTRING
 ||

774 
å
 =
LUA_TFUNCTION
 ||Å∏=
LUA_TTABLE
, 3,

776 
	`luaL_bufföô
(
L
, &
b
);

777 i‡(
™ch‹
) {

778 
p
++; 
Õ
--;

780 
	`¥ï°©e
(&
ms
, 
L
, 
§c
, 
§˛
, 
p
, 
Õ
);

781 
n
 < 
max_s
) {

782 c⁄° *
e
;

783 
	`ª¥ï°©e
(&
ms
);

784 i‡((
e
 = 
	`m©ch
(&
ms
, 
§c
, 
p
)Ë!
NULL
 &&É !
œ°m©ch
) {

785 
n
++;

786 
	`add_vÆue
(&
ms
, &
b
, 
§c
, 
e
, 
å
);

787 
§c
 = 
œ°m©ch
 = 
e
;

789 i‡(
§c
 < 
ms
.
§c_íd
)

790 
	`luaL_addch¨
(&
b
, *
§c
++);

792 i‡(
™ch‹
) ;

794 
	`luaL_addl°rög
(&
b
, 
§c
, 
ms
.
§c_íd
-src);

795 
	`luaL_pushªsu…
(&
b
);

796 
	`lua_pushöãgî
(
L
, 
n
);

798 
	}
}

810 #i‡!
deföed
(
lua_numbî2°rx
)

816 
	~<m©h.h
>

818 
	#SIZELENMOD
 ((
LUA_NUMBER_FRMLEN
)/())

	)

827 
	#L_NBFD
 ((
	`l_m©hlim
(
MANT_DIG
Ë- 1)%4 + 1)

	)

833 
lua_Numbî
 
	$adddigô
 (*
buff
, 
n
, 
lua_Numbî
 
x
) {

834 
lua_Numbî
 
dd
 = 
	`l_m©h›
(
Êo‹
)(
x
);

835 
d
 = ()
dd
;

836 
buff
[
n
] = (
d
 < 10 ? d + '0' : d - 10 + 'a');

837  
x
 - 
dd
;

838 
	}
}

841 
	$num2°øux
 (*
buff
, 
sz
, 
lua_Numbî
 
x
) {

843 i‡(
x
 !x || x =(
lua_Numbî
)
HUGE_VAL
 || x == -(lua_Number)HUGE_VAL)

844  
	`l_•rötf
(
buff
, 
sz
, 
LUA_NUMBER_FMT
, (
LUAI_UACNUMBER
)
x
);

845 i‡(
x
 == 0) {

847  
	`l_•rötf
(
buff
, 
sz
, 
LUA_NUMBER_FMT
 "x0p+0", (
LUAI_UACNUMBER
)
x
);

850 
e
;

851 
lua_Numbî
 
m
 = 
	`l_m©h›
(
‰exp
)(
x
, &
e
);

852 
n
 = 0;

853 i‡(
m
 < 0) {

854 
buff
[
n
++] = '-';

855 
m
 = -m;

857 
buff
[
n
++] = '0'; buff[n++] = 'x';

858 
m
 = 
	`adddigô
(
buff
, 
n
++, m * (1 << 
L_NBFD
));

859 
e
 -
L_NBFD
;

860 i‡(
m
 > 0) {

861 
buff
[
n
++] = 
	`lua_gëloˇÀde˝oöt
();

863 
m
 = 
	`adddigô
(
buff
, 
n
++, m * 16);

864 } 
m
 > 0);

866 
n
 +
	`l_•rötf
(
buff
 +Ç, 
sz
 -Ç, "p%+d", 
e
);

867 
	`lua_as£π
(
n
 < 
sz
);

868  
n
;

870 
	}
}

873 
	$lua_numbî2°rx
 (
lua_Sèã
 *
L
, *
buff
, 
sz
,

874 c⁄° *
fmt
, 
lua_Numbî
 
x
) {

875 
n
 = 
	`num2°øux
(
buff
, 
sz
, 
x
);

876 i‡(
fmt
[
SIZELENMOD
] == 'A') {

877 
i
;

878 
i
 = 0; i < 
n
; i++)

879 
buff
[
i
] = 
	`touµî
(
	`uch¨
(buff[i]));

881 i‡(
fmt
[
SIZELENMOD
] != 'a')

882 
	`luaL_îr‹
(
L
, "modifiers for format '%%a'/'%%A'Çot implemented");

883  
n
;

884 
	}
}

896 
	#MAX_ITEM
 (120 + 
	`l_m©hlim
(
MAX_10_EXP
))

	)

900 
	#FLAGS
 "-+ #0"

	)

905 
	#MAX_FORMAT
 32

	)

908 
	$addquŸed
 (
luaL_Buf„r
 *
b
, c⁄° *
s
, 
size_t
 
Àn
) {

909 
	`luaL_addch¨
(
b
, '"');

910 
Àn
--) {

911 i‡(*
s
 == '"' || *s == '\\' || *s == '\n') {

912 
	`luaL_addch¨
(
b
, '\\');

913 
	`luaL_addch¨
(
b
, *
s
);

915 i‡(
	`is˙ål
(
	`uch¨
(*
s
))) {

916 
buff
[10];

917 i‡(!
	`isdigô
(
	`uch¨
(*(
s
+1))))

918 
	`l_•rötf
(
buff
, (buff), "\\%d", ()
	`uch¨
(*
s
));

920 
	`l_•rötf
(
buff
, (buff), "\\%03d", ()
	`uch¨
(*
s
));

921 
	`luaL_add°rög
(
b
, 
buff
);

924 
	`luaL_addch¨
(
b
, *
s
);

925 
s
++;

927 
	`luaL_addch¨
(
b
, '"');

928 
	}
}

934 
	$checkdp
 (*
buff
, 
nb
) {

935 i‡(
	`memchr
(
buff
, '.', 
nb
Ë=
NULL
) {

936 
poöt
 = 
	`lua_gëloˇÀde˝oöt
();

937 *
µoöt
 = (*)
	`memchr
(
buff
, 
poöt
, 
nb
);

938 i‡(
µoöt
) *ppoint = '.';

940 
	}
}

943 
	$addlôîÆ
 (
lua_Sèã
 *
L
, 
luaL_Buf„r
 *
b
, 
¨g
) {

944 
	`lua_ty≥
(
L
, 
¨g
)) {

945 
LUA_TSTRING
: {

946 
size_t
 
Àn
;

947 c⁄° *
s
 = 
	`lua_tﬁ°rög
(
L
, 
¨g
, &
Àn
);

948 
	`addquŸed
(
b
, 
s
, 
Àn
);

951 
LUA_TNUMBER
: {

952 *
buff
 = 
	`luaL_¥ïbuffsize
(
b
, 
MAX_ITEM
);

953 
nb
;

954 i‡(!
	`lua_isöãgî
(
L
, 
¨g
)) {

955 
lua_Numbî
 
n
 = 
	`lua_t⁄umbî
(
L
, 
¨g
);

956 
nb
 = 
	`lua_numbî2°rx
(
L
, 
buff
, 
MAX_ITEM
, "%" 
LUA_NUMBER_FRMLEN
 "a", 
n
);

957 
	`checkdp
(
buff
, 
nb
);

960 
lua_I¡egî
 
n
 = 
	`lua_toöãgî
(
L
, 
¨g
);

961 c⁄° *
f‹m©
 = (
n
 =
LUA_MININTEGER
)

962 ? "0x%" 
LUA_INTEGER_FRMLEN
 "x"

963 : 
LUA_INTEGER_FMT
;

964 
nb
 = 
	`l_•rötf
(
buff
, 
MAX_ITEM
, 
f‹m©
, (
LUAI_UACINT
)
n
);

966 
	`luaL_addsize
(
b
, 
nb
);

969 
LUA_TNIL
: 
LUA_TBOOLEAN
: {

970 
	`luaL_tﬁ°rög
(
L
, 
¨g
, 
NULL
);

971 
	`luaL_addvÆue
(
b
);

975 
	`luaL_¨gîr‹
(
L
, 
¨g
, "value hasÇoÜiteral form");

978 
	}
}

981 c⁄° *
	$sˇnf‹m©
 (
lua_Sèã
 *
L
, c⁄° *
°r‰mt
, *
f‹m
) {

982 c⁄° *
p
 = 
°r‰mt
;

983 *
p
 !'\0' && 
	`°rchr
(
FLAGS
, *pË!
NULL
)Ö++;

984 i‡((
size_t
)(
p
 - 
°r‰mt
Ë>(
FLAGS
)/())

985 
	`luaL_îr‹
(
L
, "invalid format (repeated flags)");

986 i‡(
	`isdigô
(
	`uch¨
(*
p
)))Ö++;

987 i‡(
	`isdigô
(
	`uch¨
(*
p
)))Ö++;

988 i‡(*
p
 == '.') {

989 
p
++;

990 i‡(
	`isdigô
(
	`uch¨
(*
p
)))Ö++;

991 i‡(
	`isdigô
(
	`uch¨
(*
p
)))Ö++;

993 i‡(
	`isdigô
(
	`uch¨
(*
p
)))

994 
	`luaL_îr‹
(
L
, "invalid format (width orÖrecisionÅooÜong)");

995 *(
f‹m
++) = '%';

996 
	`mem˝y
(
f‹m
, 
°r‰mt
, ((
p
 - strfrmt) + 1) * ());

997 
f‹m
 +(
p
 - 
°r‰mt
) + 1;

998 *
f‹m
 = '\0';

999  
p
;

1000 
	}
}

1006 
	$addÀnmod
 (*
f‹m
, c⁄° *
Ànmod
) {

1007 
size_t
 
l
 = 
	`°æí
(
f‹m
);

1008 
size_t
 
lm
 = 
	`°æí
(
Ànmod
);

1009 
•ec
 = 
f‹m
[
l
 - 1];

1010 
	`°r˝y
(
f‹m
 + 
l
 - 1, 
Ànmod
);

1011 
f‹m
[
l
 + 
lm
 - 1] = 
•ec
;

1012 
f‹m
[
l
 + 
lm
] = '\0';

1013 
	}
}

1016 
	$°r_f‹m©
 (
lua_Sèã
 *
L
) {

1017 
t›
 = 
	`lua_gët›
(
L
);

1018 
¨g
 = 1;

1019 
size_t
 
sÊ
;

1020 c⁄° *
°r‰mt
 = 
	`luaL_checkl°rög
(
L
, 
¨g
, &
sÊ
);

1021 c⁄° *
°r‰mt_íd
 = 
°r‰mt
+
sÊ
;

1022 
luaL_Buf„r
 
b
;

1023 
	`luaL_bufföô
(
L
, &
b
);

1024 
°r‰mt
 < 
°r‰mt_íd
) {

1025 i‡(*
°r‰mt
 !
L_ESC
)

1026 
	`luaL_addch¨
(&
b
, *
°r‰mt
++);

1027 i‡(*++
°r‰mt
 =
L_ESC
)

1028 
	`luaL_addch¨
(&
b
, *
°r‰mt
++);

1030 
f‹m
[
MAX_FORMAT
];

1031 *
buff
 = 
	`luaL_¥ïbuffsize
(&
b
, 
MAX_ITEM
);

1032 
nb
 = 0;

1033 i‡(++
¨g
 > 
t›
)

1034 
	`luaL_¨gîr‹
(
L
, 
¨g
, "no value");

1035 
°r‰mt
 = 
	`sˇnf‹m©
(
L
, så‰mt, 
f‹m
);

1036 *
°r‰mt
++) {

1038 
nb
 = 
	`l_•rötf
(
buff
, 
MAX_ITEM
, 
f‹m
, ()
	`luaL_checköãgî
(
L
, 
¨g
));

1043 
lua_I¡egî
 
n
 = 
	`luaL_checköãgî
(
L
, 
¨g
);

1044 
	`addÀnmod
(
f‹m
, 
LUA_INTEGER_FRMLEN
);

1045 
nb
 = 
	`l_•rötf
(
buff
, 
MAX_ITEM
, 
f‹m
, (
LUAI_UACINT
)
n
);

1049 
	`addÀnmod
(
f‹m
, 
LUA_NUMBER_FRMLEN
);

1050 
nb
 = 
	`lua_numbî2°rx
(
L
, 
buff
, 
MAX_ITEM
, 
f‹m
,

1051 
	`luaL_checknumbî
(
L
, 
¨g
));

1055 
lua_Numbî
 
n
 = 
	`luaL_checknumbî
(
L
, 
¨g
);

1056 
	`addÀnmod
(
f‹m
, 
LUA_NUMBER_FRMLEN
);

1057 
nb
 = 
	`l_•rötf
(
buff
, 
MAX_ITEM
, 
f‹m
, (
LUAI_UACNUMBER
)
n
);

1061 
	`addlôîÆ
(
L
, &
b
, 
¨g
);

1065 
size_t
 
l
;

1066 c⁄° *
s
 = 
	`luaL_tﬁ°rög
(
L
, 
¨g
, &
l
);

1067 i‡(
f‹m
[2] == '\0')

1068 
	`luaL_addvÆue
(&
b
);

1070 
	`luaL_¨gcheck
(
L
, 
l
 =
	`°æí
(
s
), 
¨g
, "string contains zeros");

1071 i‡(!
	`°rchr
(
f‹m
, '.'Ë&& 
l
 >= 100) {

1073 
	`luaL_addvÆue
(&
b
);

1076 
nb
 = 
	`l_•rötf
(
buff
, 
MAX_ITEM
, 
f‹m
, 
s
);

1077 
	`lua_p›
(
L
, 1);

1083  
	`luaL_îr‹
(
L
, "invalid option '%%%c'Åo 'format'",

1084 *(
°r‰mt
 - 1));

1087 
	`lua_as£π
(
nb
 < 
MAX_ITEM
);

1088 
	`luaL_addsize
(&
b
, 
nb
);

1091 
	`luaL_pushªsu…
(&
b
);

1093 
	}
}

1106 #i‡!
deföed
(
LUAL_PACKPADBYTE
)

1107 
	#LUAL_PACKPADBYTE
 0x00

	)

1111 
	#MAXINTSIZE
 16

	)

1114 
	#NB
 
CHAR_BIT


	)

1117 
	#MC
 ((1 << 
NB
Ë- 1)

	)

1120 
	#SZINT
 (()(
lua_I¡egî
))

	)

1125 
	mdummy
;

1126 
	mlôée
;

1127 } 
	g«tivìndün
 = {1};

1131 
	scD
 {

1132 
	mc
;

1133 uni⁄ { 
	md
; *
	mp
; 
lua_I¡egî
 
	mi
; 
lua_Numbî
 
	mn
; } 
	mu
;

1136 
	#MAXALIGN
 (
	`off£tof
(
cD
, 
u
))

	)

1142 
	uFty≥s
 {

1143 
	mf
;

1144 
	md
;

1145 
lua_Numbî
 
	mn
;

1146 
	mbuff
[5 * (
lua_Numbî
)];

1147 } 
	tFty≥s
;

1153 
	sHódî
 {

1154 
lua_Sèã
 *
	mL
;

1155 
	mi¶ôée
;

1156 
	mmaxÆign
;

1157 } 
	tHódî
;

1163 
	eKO±i⁄
 {

1164 
	mKöt
,

1165 
	mKuöt
,

1166 
	mKÊﬂt
,

1167 
	mKch¨
,

1168 
	mK°rög
,

1169 
	mKz°r
,

1170 
	mK∑ddög
,

1171 
	mK∑ddÆign
,

1172 
	mKn›


1173 } 
	tKO±i⁄
;

1180 
	$digô
 (
c
Ë{  '0' <¯&& c <'9'; 
	}
}

1182 
	$gënum
 (c⁄° **
fmt
, 
df
) {

1183 i‡(!
	`digô
(**
fmt
))

1184  
df
;

1186 
a
 = 0;

1188 
a
 =á*10 + (*((*
fmt
)++) - '0');

1189 } 
	`digô
(**
fmt
Ë&& 
a
 <(()
MAXSIZE
 - 9)/10);

1190  
a
;

1192 
	}
}

1199 
	$gënumlimô
 (
Hódî
 *
h
, c⁄° **
fmt
, 
df
) {

1200 
sz
 = 
	`gënum
(
fmt
, 
df
);

1201 i‡(
sz
 > 
MAXINTSIZE
 || sz <= 0)

1202 
	`luaL_îr‹
(
h
->
L
, "integral size (%d) out ofÜimits [1,%d]",

1203 
sz
, 
MAXINTSIZE
);

1204  
sz
;

1205 
	}
}

1211 
	$öôhódî
 (
lua_Sèã
 *
L
, 
Hódî
 *
h
) {

1212 
h
->
L
 = L;

1213 
h
->
i¶ôée
 = 
«tivìndün
.
lôée
;

1214 
h
->
maxÆign
 = 1;

1215 
	}
}

1221 
KO±i⁄
 
	$gë›ti⁄
 (
Hódî
 *
h
, c⁄° **
fmt
, *
size
) {

1222 
›t
 = *((*
fmt
)++);

1223 *
size
 = 0;

1224 
›t
) {

1225 'b': *
size
 = ();  
Köt
;

1226 'B': *
size
 = ();  
Kuöt
;

1227 'h': *
size
 = ();  
Köt
;

1228 'H': *
size
 = ();  
Kuöt
;

1229 'l': *
size
 = ();  
Köt
;

1230 'L': *
size
 = ();  
Kuöt
;

1231 'j': *
size
 = (
lua_I¡egî
);  
Köt
;

1232 'J': *
size
 = (
lua_I¡egî
);  
Kuöt
;

1233 'T': *
size
 = (
size_t
);  
Kuöt
;

1234 'f': *
size
 = ();  
KÊﬂt
;

1235 'd': *
size
 = ();  
KÊﬂt
;

1236 'n': *
size
 = (
lua_Numbî
);  
KÊﬂt
;

1237 'i': *
size
 = 
	`gënumlimô
(
h
, 
fmt
, ());  
Köt
;

1238 'I': *
size
 = 
	`gënumlimô
(
h
, 
fmt
, ());  
Kuöt
;

1239 's': *
size
 = 
	`gënumlimô
(
h
, 
fmt
, (
size_t
));  
K°rög
;

1241 *
size
 = 
	`gënum
(
fmt
, -1);

1242 i‡(*
size
 == -1)

1243 
	`luaL_îr‹
(
h
->
L
, "missing size for format option 'c'");

1244  
Kch¨
;

1245 'z':  
Kz°r
;

1246 'x': *
size
 = 1;  
K∑ddög
;

1247 'X':  
K∑ddÆign
;

1249 '<': 
h
->
i¶ôée
 = 1; ;

1250 '>': 
h
->
i¶ôée
 = 0; ;

1251 '=': 
h
->
i¶ôée
 = 
«tivìndün
.
lôée
; ;

1252 '!': 
h
->
maxÆign
 = 
	`gënumlimô
(h, 
fmt
, 
MAXALIGN
); ;

1253 : 
	`luaL_îr‹
(
h
->
L
, "övÆid f‹m© o±i⁄ '%c'", 
›t
);

1255  
Kn›
;

1256 
	}
}

1268 
KO±i⁄
 
	$gëdëaûs
 (
Hódî
 *
h
, 
size_t
 
tŸÆsize
,

1269 c⁄° **
fmt
, *
psize
, *
¡ﬂlign
) {

1270 
KO±i⁄
 
›t
 = 
	`gë›ti⁄
(
h
, 
fmt
, 
psize
);

1271 
Æign
 = *
psize
;

1272 i‡(
›t
 =
K∑ddÆign
) {

1273 i‡(**
fmt
 ='\0' || 
	`gë›ti⁄
(
h
, fmt, &
Æign
Ë=
Kch¨
 ||álign == 0)

1274 
	`luaL_¨gîr‹
(
h
->
L
, 1, "invalidÇext option for option 'X'");

1276 i‡(
Æign
 <1 || 
›t
 =
Kch¨
)

1277 *
¡ﬂlign
 = 0;

1279 i‡(
Æign
 > 
h
->
maxÆign
)

1280 
Æign
 = 
h
->
maxÆign
;

1281 i‡((
Æign
 & (align - 1)) != 0)

1282 
	`luaL_¨gîr‹
(
h
->
L
, 1, "formatásks forálignmentÇotÖower of 2");

1283 *
¡ﬂlign
 = (
Æign
 - ()(
tŸÆsize
 & (align - 1))) & (align - 1);

1285  
›t
;

1286 
	}
}

1295 
	$∑cköt
 (
luaL_Buf„r
 *
b
, 
lua_Unsig√d
 
n
,

1296 
i¶ôée
, 
size
, 
√g
) {

1297 *
buff
 = 
	`luaL_¥ïbuffsize
(
b
, 
size
);

1298 
i
;

1299 
buff
[
i¶ôée
 ? 0 : 
size
 - 1] = ()(
n
 & 
MC
);

1300 
i
 = 1; i < 
size
; i++) {

1301 
n
 >>
NB
;

1302 
buff
[
i¶ôée
 ? 
i
 : 
size
 - 1 - i] = ()(
n
 & 
MC
);

1304 i‡(
√g
 && 
size
 > 
SZINT
) {

1305 
i
 = 
SZINT
; i < 
size
; i++)

1306 
buff
[
i¶ôée
 ? 
i
 : 
size
 - 1 - i] = ()
MC
;

1308 
	`luaL_addsize
(
b
, 
size
);

1309 
	}
}

1316 
	$c›ywôhídün
 (vﬁ©ûê*
de°
, vﬁ©ûêc⁄° *
§c
,

1317 
size
, 
i¶ôée
) {

1318 i‡(
i¶ôée
 =
«tivìndün
.
lôée
) {

1319 
size
-- != 0)

1320 *(
de°
++Ë*(
§c
++);

1323 
de°
 +
size
 - 1;

1324 
size
-- != 0)

1325 *(
de°
--Ë*(
§c
++);

1327 
	}
}

1330 
	$°r_∑ck
 (
lua_Sèã
 *
L
) {

1331 
luaL_Buf„r
 
b
;

1332 
Hódî
 
h
;

1333 c⁄° *
fmt
 = 
	`luaL_check°rög
(
L
, 1);

1334 
¨g
 = 1;

1335 
size_t
 
tŸÆsize
 = 0;

1336 
	`öôhódî
(
L
, &
h
);

1337 
	`lua_pushnû
(
L
);

1338 
	`luaL_bufföô
(
L
, &
b
);

1339 *
fmt
 != '\0') {

1340 
size
, 
¡ﬂlign
;

1341 
KO±i⁄
 
›t
 = 
	`gëdëaûs
(&
h
, 
tŸÆsize
, &
fmt
, &
size
, &
¡ﬂlign
);

1342 
tŸÆsize
 +
¡ﬂlign
 + 
size
;

1343 
¡ﬂlign
-- > 0)

1344 
	`luaL_addch¨
(&
b
, 
LUAL_PACKPADBYTE
);

1345 
¨g
++;

1346 
›t
) {

1347 
Köt
: {

1348 
lua_I¡egî
 
n
 = 
	`luaL_checköãgî
(
L
, 
¨g
);

1349 i‡(
size
 < 
SZINT
) {

1350 
lua_I¡egî
 
lim
 = (lua_I¡egî)1 << ((
size
 * 
NB
) - 1);

1351 
	`luaL_¨gcheck
(
L
, -
lim
 <
n
 &&Ç <Üim, 
¨g
, "integer overflow");

1353 
	`∑cköt
(&
b
, (
lua_Unsig√d
)
n
, 
h
.
i¶ôée
, 
size
, (n < 0));

1356 
Kuöt
: {

1357 
lua_I¡egî
 
n
 = 
	`luaL_checköãgî
(
L
, 
¨g
);

1358 i‡(
size
 < 
SZINT
)

1359 
	`luaL_¨gcheck
(
L
, (
lua_Unsig√d
)
n
 < (÷ua_Unsig√d)1 << (
size
 * 
NB
)),

1360 
¨g
, "unsigned overflow");

1361 
	`∑cköt
(&
b
, (
lua_Unsig√d
)
n
, 
h
.
i¶ôée
, 
size
, 0);

1364 
KÊﬂt
: {

1365 vﬁ©ûê
Fty≥s
 
u
;

1366 *
buff
 = 
	`luaL_¥ïbuffsize
(&
b
, 
size
);

1367 
lua_Numbî
 
n
 = 
	`luaL_checknumbî
(
L
, 
¨g
);

1368 i‡(
size
 =(
u
.
f
)Ëu.‡()
n
;

1369 i‡(
size
 =(
u
.
d
)Ëu.d = ()
n
;

1370 
u
.
n
 =Ç;

1372 
	`c›ywôhídün
(
buff
, 
u
.buff, 
size
, 
h
.
i¶ôée
);

1373 
	`luaL_addsize
(&
b
, 
size
);

1376 
Kch¨
: {

1377 
size_t
 
Àn
;

1378 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 
¨g
, &
Àn
);

1379 
	`luaL_¨gcheck
(
L
, 
Àn
 <(
size_t
)
size
, 
¨g
,

1381 
	`luaL_addl°rög
(&
b
, 
s
, 
Àn
);

1382 
Àn
++ < (
size_t
)
size
)

1383 
	`luaL_addch¨
(&
b
, 
LUAL_PACKPADBYTE
);

1386 
K°rög
: {

1387 
size_t
 
Àn
;

1388 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 
¨g
, &
Àn
);

1389 
	`luaL_¨gcheck
(
L
, 
size
 >()(
size_t
) ||

1390 
Àn
 < ((
size_t
)1 << (
size
 * 
NB
)),

1391 
¨g
, "stringÜength doesÇot fit in given size");

1392 
	`∑cköt
(&
b
, (
lua_Unsig√d
)
Àn
, 
h
.
i¶ôée
, 
size
, 0);

1393 
	`luaL_addl°rög
(&
b
, 
s
, 
Àn
);

1394 
tŸÆsize
 +
Àn
;

1397 
Kz°r
: {

1398 
size_t
 
Àn
;

1399 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 
¨g
, &
Àn
);

1400 
	`luaL_¨gcheck
(
L
, 
	`°æí
(
s
Ë=
Àn
, 
¨g
, "string contains zeros");

1401 
	`luaL_addl°rög
(&
b
, 
s
, 
Àn
);

1402 
	`luaL_addch¨
(&
b
, '\0');

1403 
tŸÆsize
 +
Àn
 + 1;

1406 
K∑ddög
: 
	`luaL_addch¨
(&
b
, 
LUAL_PACKPADBYTE
);

1407 
K∑ddÆign
: 
Kn›
:

1408 
¨g
--;

1412 
	`luaL_pushªsu…
(&
b
);

1414 
	}
}

1417 
	$°r_∑cksize
 (
lua_Sèã
 *
L
) {

1418 
Hódî
 
h
;

1419 c⁄° *
fmt
 = 
	`luaL_check°rög
(
L
, 1);

1420 
size_t
 
tŸÆsize
 = 0;

1421 
	`öôhódî
(
L
, &
h
);

1422 *
fmt
 != '\0') {

1423 
size
, 
¡ﬂlign
;

1424 
KO±i⁄
 
›t
 = 
	`gëdëaûs
(&
h
, 
tŸÆsize
, &
fmt
, &
size
, &
¡ﬂlign
);

1425 
size
 +
¡ﬂlign
;

1426 
	`luaL_¨gcheck
(
L
, 
tŸÆsize
 <
MAXSIZE
 - 
size
, 1,

1428 
tŸÆsize
 +
size
;

1429 
›t
) {

1430 
K°rög
:

1431 
Kz°r
:

1432 
	`luaL_¨gîr‹
(
L
, 1, "variable-length format");

1437 
	`lua_pushöãgî
(
L
, (
lua_I¡egî
)
tŸÆsize
);

1439 
	}
}

1450 
lua_I¡egî
 
	$u≈acköt
 (
lua_Sèã
 *
L
, c⁄° *
°r
,

1451 
i¶ôée
, 
size
, 
issig√d
) {

1452 
lua_Unsig√d
 
ªs
 = 0;

1453 
i
;

1454 
limô
 = (
size
 <
SZINT
) ? size : SZINT;

1455 
i
 = 
limô
 - 1; i >= 0; i--) {

1456 
ªs
 <<
NB
;

1457 
ªs
 |(
lua_Unsig√d
)()
°r
[
i¶ôée
 ? 
i
 : 
size
 - 1 - i];

1459 i‡(
size
 < 
SZINT
) {

1460 i‡(
issig√d
) {

1461 
lua_Unsig√d
 
mask
 = (lua_Unsig√d)1 << (
size
*
NB
 - 1);

1462 
ªs
 = (‘e†^ 
mask
) - mask);

1465 i‡(
size
 > 
SZINT
) {

1466 
mask
 = (!
issig√d
 || (
lua_I¡egî
)
ªs
 >0Ë? 0 : 
MC
;

1467 
i
 = 
limô
; i < 
size
; i++) {

1468 i‡(()
°r
[
i¶ôée
 ? 
i
 : 
size
 - 1 - i] !
mask
)

1469 
	`luaL_îr‹
(
L
, "%d-byã i¡egî d€†nŸ fô i¡ÿLu®I¡egî", 
size
);

1472  (
lua_I¡egî
)
ªs
;

1473 
	}
}

1476 
	$°r_u≈ack
 (
lua_Sèã
 *
L
) {

1477 
Hódî
 
h
;

1478 c⁄° *
fmt
 = 
	`luaL_check°rög
(
L
, 1);

1479 
size_t
 
ld
;

1480 c⁄° *
d©a
 = 
	`luaL_checkl°rög
(
L
, 2, &
ld
);

1481 
size_t
 
pos
 = (size_t)
	`po§ñ©
(
	`luaL_›töãgî
(
L
, 3, 1), 
ld
) - 1;

1482 
n
 = 0;

1483 
	`luaL_¨gcheck
(
L
, 
pos
 <
ld
, 3, "initialÖosition out of string");

1484 
	`öôhódî
(
L
, &
h
);

1485 *
fmt
 != '\0') {

1486 
size
, 
¡ﬂlign
;

1487 
KO±i⁄
 
›t
 = 
	`gëdëaûs
(&
h
, 
pos
, &
fmt
, &
size
, &
¡ﬂlign
);

1488 i‡((
size_t
)
¡ﬂlign
 + 
size
 > ~
pos
 ||Öo†+Çtﬂlig¿+ sizê> 
ld
)

1489 
	`luaL_¨gîr‹
(
L
, 2, "data stringÅoo short");

1490 
pos
 +
¡ﬂlign
;

1492 
	`luaL_check°ack
(
L
, 2, "too manyÑesults");

1493 
n
++;

1494 
›t
) {

1495 
Köt
:

1496 
Kuöt
: {

1497 
lua_I¡egî
 
ªs
 = 
	`u≈acköt
(
L
, 
d©a
 + 
pos
, 
h
.
i¶ôée
, 
size
,

1498 (
›t
 =
Köt
));

1499 
	`lua_pushöãgî
(
L
, 
ªs
);

1502 
KÊﬂt
: {

1503 vﬁ©ûê
Fty≥s
 
u
;

1504 
lua_Numbî
 
num
;

1505 
	`c›ywôhídün
(
u
.
buff
, 
d©a
 + 
pos
, 
size
, 
h
.
i¶ôée
);

1506 i‡(
size
 =(
u
.
f
)Ë
num
 = (
lua_Numbî
)u.f;

1507 i‡(
size
 =(
u
.
d
)Ë
num
 = (
lua_Numbî
)u.d;

1508 
num
 = 
u
.
n
;

1509 
	`lua_pushnumbî
(
L
, 
num
);

1512 
Kch¨
: {

1513 
	`lua_pushl°rög
(
L
, 
d©a
 + 
pos
, 
size
);

1516 
K°rög
: {

1517 
size_t
 
Àn
 = (size_t)
	`u≈acköt
(
L
, 
d©a
 + 
pos
, 
h
.
i¶ôée
, 
size
, 0);

1518 
	`luaL_¨gcheck
(
L
, 
pos
 + 
Àn
 + 
size
 <
ld
, 2, "data stringÅoo short");

1519 
	`lua_pushl°rög
(
L
, 
d©a
 + 
pos
 + 
size
, 
Àn
);

1520 
pos
 +
Àn
;

1523 
Kz°r
: {

1524 
size_t
 
Àn
 = ()
	`°æí
(
d©a
 + 
pos
);

1525 
	`lua_pushl°rög
(
L
, 
d©a
 + 
pos
, 
Àn
);

1526 
pos
 +
Àn
 + 1;

1529 
K∑ddÆign
: 
K∑ddög
: 
Kn›
:

1530 
n
--;

1533 
pos
 +
size
;

1535 
	`lua_pushöãgî
(
L
, 
pos
 + 1);

1536  
n
 + 1;

1537 
	}
}

1542 c⁄° 
luaL_Reg
 
	g°æib
[] = {

1543 {"byã", 
°r_byã
},

1544 {"ch¨", 
°r_ch¨
},

1545 {"dump", 
°r_dump
},

1546 {"föd", 
°r_föd
},

1547 {"f‹m©", 
°r_f‹m©
},

1548 {"gm©ch", 
gm©ch
},

1549 {"gsub", 
°r_gsub
},

1550 {"Àn", 
°r_Àn
},

1551 {"lowî", 
°r_lowî
},

1552 {"m©ch", 
°r_m©ch
},

1553 {"ªp", 
°r_ªp
},

1554 {"ªvî£", 
°r_ªvî£
},

1555 {"sub", 
°r_sub
},

1556 {"uµî", 
°r_uµî
},

1557 {"∑ck", 
°r_∑ck
},

1558 {"∑cksize", 
°r_∑cksize
},

1559 {"u≈ack", 
°r_u≈ack
},

1560 {
NULL
, NULL}

1564 
	$¸óãmë©abÀ
 (
lua_Sèã
 *
L
) {

1565 
	`lua_¸óãèbÀ
(
L
, 0, 1);

1566 
	`lua_pushlôîÆ
(
L
, "");

1567 
	`lua_pushvÆue
(
L
, -2);

1568 
	`lua_£tmë©abÀ
(
L
, -2);

1569 
	`lua_p›
(
L
, 1);

1570 
	`lua_pushvÆue
(
L
, -2);

1571 
	`lua_£tfõld
(
L
, -2, "__index");

1572 
	`lua_p›
(
L
, 1);

1573 
	}
}

1579 
LUAMOD_API
 
	$lua›í_°rög
 (
lua_Sèã
 *
L
) {

1580 
	`luaL_√wlib
(
L
, 
°æib
);

1581 
	`¸óãmë©abÀ
(
L
);

1583 
	}
}

	@lib/lua/lua-5.3.4/src/ltable.c

7 
	#…abÀ_c


	)

8 
	#LUA_CORE


	)

10 
	~"Õªfix.h
"

26 
	~<m©h.h
>

27 
	~<limôs.h
>

29 
	~"lua.h
"

31 
	~"ldebug.h
"

32 
	~"ldo.h
"

33 
	~"lgc.h
"

34 
	~"lmem.h
"

35 
	~"lobje˘.h
"

36 
	~"l°©e.h
"

37 
	~"l°rög.h
"

38 
	~"…abÀ.h
"

39 
	~"lvm.h
"

46 
	#MAXABITS
 
	`ˇ°_öt
((Ë* 
CHAR_BIT
 - 1)

	)

47 
	#MAXASIZE
 (1u << 
MAXABITS
)

	)

55 
	#MAXHBITS
 (
MAXABITS
 - 1)

	)

58 
	#hashpow2
(
t
,
n
Ë(
	`gnode
—, 
	`lmod
(“), 
	`sizíode
—))))

	)

60 
	#hash°r
(
t
,
°r
Ë
	`hashpow2
—, (°r)->
hash
)

	)

61 
	#hashboﬁón
(
t
,
p
Ë
	`hashpow2
—,Ö)

	)

62 
	#hashöt
(
t
,
i
Ë
	`hashpow2
—, i)

	)

69 
	#hashmod
(
t
,
n
Ë(
	`gnode
—, (“Ë% ((
	`sizíode
—)-1)|1))))

	)

72 
	#hashpoöãr
(
t
,
p
Ë
	`hashmod
—, 
	`poöt2uöt
’))

	)

75 
	#dummynode
 (&
dummynode_
)

	)

77 c⁄° 
Node
 
	gdummynode_
 = {

78 {
NILCONSTANT
},

79 {{
NILCONSTANT
, 0}}

96 #i‡!
deföed
(
l_hashÊﬂt
)

97 
	$l_hashÊﬂt
 (
lua_Numbî
 
n
) {

98 
i
;

99 
lua_I¡egî
 
ni
;

100 
n
 = 
	`l_m©h›
(
‰exp
)“, &
i
Ë* -
	`ˇ°_num
(
INT_MIN
);

101 i‡(!
	`lua_numbîtoöãgî
(
n
, &
ni
)) {

102 
	`lua_as£π
(
	`luai_numi¢™
(
n
Ë|| 
	`l_m©h›
(
Ábs
)“Ë=
	`ˇ°_num
(
HUGE_VAL
));

106 
u
 = 
	`ˇ°
(, 
i
Ë+ ca°(, 
ni
);

107  
	`ˇ°_öt
(
u
 <
	`ˇ°
(, 
INT_MAX
) ? u : ~u);

109 
	}
}

117 
Node
 *
	$maöposôi⁄
 (c⁄° 
TabÀ
 *
t
, c⁄° 
TVÆue
 *
key
) {

118 
	`ây≥
(
key
)) {

119 
LUA_TNUMINT
:

120  
	`hashöt
(
t
, 
	`ivÆue
(
key
));

121 
LUA_TNUMFLT
:

122  
	`hashmod
(
t
, 
	`l_hashÊﬂt
(
	`ÊtvÆue
(
key
)));

123 
LUA_TSHRSTR
:

124  
	`hash°r
(
t
, 
	`tsvÆue
(
key
));

125 
LUA_TLNGSTR
:

126  
	`hashpow2
(
t
, 
	`luaS_hashl⁄g°r
(
	`tsvÆue
(
key
)));

127 
LUA_TBOOLEAN
:

128  
	`hashboﬁón
(
t
, 
	`bvÆue
(
key
));

129 
LUA_TLIGHTUSERDATA
:

130  
	`hashpoöãr
(
t
, 
	`pvÆue
(
key
));

131 
LUA_TLCF
:

132  
	`hashpoöãr
(
t
, 
	`fvÆue
(
key
));

134 
	`lua_as£π
(!
	`âisdódkey
(
key
));

135  
	`hashpoöãr
(
t
, 
	`gcvÆue
(
key
));

137 
	}
}

144 
	$¨øyödex
 (c⁄° 
TVÆue
 *
key
) {

145 i‡(
	`âisöãgî
(
key
)) {

146 
lua_I¡egî
 
k
 = 
	`ivÆue
(
key
);

147 i‡(0 < 
k
 && (
lua_Unsig√d
)k <
MAXASIZE
)

148  
	`ˇ°
(, 
k
);

151 
	}
}

159 
	$födödex
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
StkId
 
key
) {

160 
i
;

161 i‡(
	`âi¢û
(
key
))  0;

162 
i
 = 
	`¨øyödex
(
key
);

163 i‡(
i
 !0 && i <
t
->
sizóºay
)

164  
i
;

166 
nx
;

167 
Node
 *
n
 = 
	`maöposôi⁄
(
t
, 
key
);

170 i‡(
	`luaV_øwequÆobj
(
	`gkey
(
n
), 
key
) ||

171 (
	`âisdódkey
(
	`gkey
(
n
)Ë&& 
	`iscﬁÀ˘abÀ
(
key
) &&

172 
	`dódvÆue
(
	`gkey
(
n
)Ë=
	`gcvÆue
(
key
))) {

173 
i
 = 
	`ˇ°_öt
(
n
 - 
	`gnode
(
t
, 0));

175  (
i
 + 1Ë+ 
t
->
sizóºay
;

177 
nx
 = 
	`g√xt
(
n
);

178 i‡(
nx
 == 0)

179 
	`luaG_ru√º‹
(
L
, "invalid keyÅo 'next'");

180 
n
 +
nx
;

183 
	}
}

186 
	$luaH_√xt
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
StkId
 
key
) {

187 
i
 = 
	`födödex
(
L
, 
t
, 
key
);

188 ; 
i
 < 
t
->
sizóºay
; i++) {

189 i‡(!
	`âi¢û
(&
t
->
¨øy
[
i
])) {

190 
	`£tivÆue
(
key
, 
i
 + 1);

191 
	`£tobj2s
(
L
, 
key
+1, &
t
->
¨øy
[
i
]);

195 
i
 -
t
->
sizóºay
; 
	`ˇ°_öt
(iË< 
	`sizíode
(t); i++) {

196 i‡(!
	`âi¢û
(
	`gvÆ
(
	`gnode
(
t
, 
i
)))) {

197 
	`£tobj2s
(
L
, 
key
, 
	`gkey
(
	`gnode
(
t
, 
i
)));

198 
	`£tobj2s
(
L
, 
key
+1, 
	`gvÆ
(
	`gnode
(
t
, 
i
)));

203 
	}
}

219 
	$compuãsizes
 (
nums
[], *
≤a
) {

220 
i
;

221 
twŸoi
;

222 
a
 = 0;

223 
«
 = 0;

224 
›timÆ
 = 0;

226 
i
 = 0, 
twŸoi
 = 1; *
≤a
 >Åwotoi / 2; i++,Åwotoi *= 2) {

227 i‡(
nums
[
i
] > 0) {

228 
a
 +
nums
[
i
];

229 i‡(
a
 > 
twŸoi
/2) {

230 
›timÆ
 = 
twŸoi
;

231 
«
 = 
a
;

235 
	`lua_as£π
((
›timÆ
 =0 || o±imÆ / 2 < 
«
) &&Ça <= optimal);

236 *
≤a
 = 
«
;

237  
›timÆ
;

238 
	}
}

241 
	$cou¡öt
 (c⁄° 
TVÆue
 *
key
, *
nums
) {

242 
k
 = 
	`¨øyödex
(
key
);

243 i‡(
k
 != 0) {

244 
nums
[
	`luaO_˚ûlog2
(
k
)]++;

249 
	}
}

257 
	$numu£¨øy
 (c⁄° 
TabÀ
 *
t
, *
nums
) {

258 
lg
;

259 
âlg
;

260 
au£
 = 0;

261 
i
 = 1;

263 
lg
 = 0, 
âlg
 = 1;Üg <
MAXABITS
;Üg++,Åtlg *= 2) {

264 
lc
 = 0;

265 
lim
 = 
âlg
;

266 i‡(
lim
 > 
t
->
sizóºay
) {

267 
lim
 = 
t
->
sizóºay
;

268 i‡(
i
 > 
lim
)

272 ; 
i
 <
lim
; i++) {

273 i‡(!
	`âi¢û
(&
t
->
¨øy
[
i
-1]))

274 
lc
++;

276 
nums
[
lg
] +
lc
;

277 
au£
 +
lc
;

279  
au£
;

280 
	}
}

283 
	$numu£hash
 (c⁄° 
TabÀ
 *
t
, *
nums
, *
≤a
) {

284 
tŸÆu£
 = 0;

285 
au£
 = 0;

286 
i
 = 
	`sizíode
(
t
);

287 
i
--) {

288 
Node
 *
n
 = &
t
->
node
[
i
];

289 i‡(!
	`âi¢û
(
	`gvÆ
(
n
))) {

290 
au£
 +
	`cou¡öt
(
	`gkey
(
n
), 
nums
);

291 
tŸÆu£
++;

294 *
≤a
 +
au£
;

295  
tŸÆu£
;

296 
	}
}

299 
	$£èºayve˘‹
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
size
) {

300 
i
;

301 
	`luaM_ªÆlocve˘‹
(
L
, 
t
->
¨øy
,Å->
sizóºay
, 
size
, 
TVÆue
);

302 
i
=
t
->
sizóºay
; i<
size
; i++)

303 
	`£äûvÆue
(&
t
->
¨øy
[
i
]);

304 
t
->
sizóºay
 = 
size
;

305 
	}
}

308 
	$£äodeve˘‹
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
size
) {

309 i‡(
size
 == 0) {

310 
t
->
node
 = 
	`ˇ°
(
Node
 *, 
dummynode
);

311 
t
->
lsizíode
 = 0;

312 
t
->
œ°‰ì
 = 
NULL
;

315 
i
;

316 
lsize
 = 
	`luaO_˚ûlog2
(
size
);

317 i‡(
lsize
 > 
MAXHBITS
)

318 
	`luaG_ru√º‹
(
L
, "table overflow");

319 
size
 = 
	`twŸo
(
lsize
);

320 
t
->
node
 = 
	`luaM_√wve˘‹
(
L
, 
size
, 
Node
);

321 
i
 = 0; i < ()
size
; i++) {

322 
Node
 *
n
 = 
	`gnode
(
t
, 
i
);

323 
	`g√xt
(
n
) = 0;

324 
	`£äûvÆue
(
	`wgkey
(
n
));

325 
	`£äûvÆue
(
	`gvÆ
(
n
));

327 
t
->
lsizíode
 = 
	`ˇ°_byã
(
lsize
);

328 
t
->
œ°‰ì
 = 
	`gnode
—, 
size
);

330 
	}
}

333 
	$luaH_ªsize
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
«size
,

334 
nhsize
) {

335 
i
;

336 
j
;

337 
ﬁdasize
 = 
t
->
sizóºay
;

338 
ﬁdhsize
 = 
	`Ælocsizíode
(
t
);

339 
Node
 *
nﬁd
 = 
t
->
node
;

340 i‡(
«size
 > 
ﬁdasize
)

341 
	`£èºayve˘‹
(
L
, 
t
, 
«size
);

343 
	`£äodeve˘‹
(
L
, 
t
, 
nhsize
);

344 i‡(
«size
 < 
ﬁdasize
) {

345 
t
->
sizóºay
 = 
«size
;

347 
i
=
«size
; i<
ﬁdasize
; i++) {

348 i‡(!
	`âi¢û
(&
t
->
¨øy
[
i
]))

349 
	`luaH_£töt
(
L
, 
t
, 
i
 + 1, &t->
¨øy
[i]);

352 
	`luaM_ªÆlocve˘‹
(
L
, 
t
->
¨øy
, 
ﬁdasize
, 
«size
, 
TVÆue
);

355 
j
 = 
ﬁdhsize
 - 1; j >= 0; j--) {

356 
Node
 *
ﬁd
 = 
nﬁd
 + 
j
;

357 i‡(!
	`âi¢û
(
	`gvÆ
(
ﬁd
))) {

360 
	`£tobjt2t
(
L
, 
	`luaH_£t
(L, 
t
, 
	`gkey
(
ﬁd
)), 
	`gvÆ
(old));

363 i‡(
ﬁdhsize
 > 0)

364 
	`luaM_‰ì¨øy
(
L
, 
nﬁd
, 
	`ˇ°
(
size_t
, 
ﬁdhsize
));

365 
	}
}

368 
	$luaH_ªsizóºay
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
«size
) {

369 
nsize
 = 
	`Ælocsizíode
(
t
);

370 
	`luaH_ªsize
(
L
, 
t
, 
«size
, 
nsize
);

371 
	}
}

376 
	$ªhash
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, c⁄° 
TVÆue
 *
ek
) {

377 
asize
;

378 
«
;

379 
nums
[
MAXABITS
 + 1];

380 
i
;

381 
tŸÆu£
;

382 
i
 = 0; i <
MAXABITS
; i++Ë
nums
[i] = 0;

383 
«
 = 
	`numu£¨øy
(
t
, 
nums
);

384 
tŸÆu£
 = 
«
;

385 
tŸÆu£
 +
	`numu£hash
(
t
, 
nums
, &
«
);

387 
«
 +
	`cou¡öt
(
ek
, 
nums
);

388 
tŸÆu£
++;

390 
asize
 = 
	`compuãsizes
(
nums
, &
«
);

392 
	`luaH_ªsize
(
L
, 
t
, 
asize
, 
tŸÆu£
 - 
«
);

393 
	}
}

402 
TabÀ
 *
	$luaH_√w
 (
lua_Sèã
 *
L
) {

403 
GCObje˘
 *
o
 = 
	`luaC_√wobj
(
L
, 
LUA_TTABLE
, (
TabÀ
));

404 
TabÀ
 *
t
 = 
	`gco2t
(
o
);

405 
t
->
më©abÀ
 = 
NULL
;

406 
t
->
Êags
 = 
	`ˇ°_byã
(~0);

407 
t
->
¨øy
 = 
NULL
;

408 
t
->
sizóºay
 = 0;

409 
	`£äodeve˘‹
(
L
, 
t
, 0);

410  
t
;

411 
	}
}

414 
	$luaH_‰ì
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
) {

415 i‡(!
	`isdummy
(
t
))

416 
	`luaM_‰ì¨øy
(
L
, 
t
->
node
, 
	`ˇ°
(
size_t
, 
	`sizíode
(t)));

417 
	`luaM_‰ì¨øy
(
L
, 
t
->
¨øy
,Å->
sizóºay
);

418 
	`luaM_‰ì
(
L
, 
t
);

419 
	}
}

422 
Node
 *
	$gë‰ìpos
 (
TabÀ
 *
t
) {

423 i‡(!
	`isdummy
(
t
)) {

424 
t
->
œ°‰ì
 >Å->
node
) {

425 
t
->
œ°‰ì
--;

426 i‡(
	`âi¢û
(
	`gkey
(
t
->
œ°‰ì
)))

427  
t
->
œ°‰ì
;

430  
NULL
;

431 
	}
}

442 
TVÆue
 *
	$luaH_√wkey
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, c⁄° 
TVÆue
 *
key
) {

443 
Node
 *
mp
;

444 
TVÆue
 
aux
;

445 i‡(
	`âi¢û
(
key
)Ë
	`luaG_ru√º‹
(
L
, "table index isÇil");

446 i‡(
	`âisÊﬂt
(
key
)) {

447 
lua_I¡egî
 
k
;

448 i‡(
	`luaV_toöãgî
(
key
, &
k
, 0)) {

449 
	`£tivÆue
(&
aux
, 
k
);

450 
key
 = &
aux
;

452 i‡(
	`luai_numi¢™
(
	`ÊtvÆue
(
key
)))

453 
	`luaG_ru√º‹
(
L
, "table index is NaN");

455 
mp
 = 
	`maöposôi⁄
(
t
, 
key
);

456 i‡(!
	`âi¢û
(
	`gvÆ
(
mp
)Ë|| 
	`isdummy
(
t
)) {

457 
Node
 *
Ÿhîn
;

458 
Node
 *
f
 = 
	`gë‰ìpos
(
t
);

459 i‡(
f
 =
NULL
) {

460 
	`ªhash
(
L
, 
t
, 
key
);

462  
	`luaH_£t
(
L
, 
t
, 
key
);

464 
	`lua_as£π
(!
	`isdummy
(
t
));

465 
Ÿhîn
 = 
	`maöposôi⁄
(
t
, 
	`gkey
(
mp
));

466 i‡(
Ÿhîn
 !
mp
) {

468 
Ÿhîn
 + 
	`g√xt
(ŸhînË!
mp
)

469 
Ÿhîn
 +
	`g√xt
(othern);

470 
	`g√xt
(
Ÿhîn
Ë
	`ˇ°_öt
(
f
 - othern);

471 *
f
 = *
mp
;

472 i‡(
	`g√xt
(
mp
) != 0) {

473 
	`g√xt
(
f
Ë+
	`ˇ°_öt
(
mp
 - f);

474 
	`g√xt
(
mp
) = 0;

476 
	`£äûvÆue
(
	`gvÆ
(
mp
));

480 i‡(
	`g√xt
(
mp
) != 0)

481 
	`g√xt
(
f
Ë
	`ˇ°_öt
((
mp
 + gnext(mp)) - f);

482 
	`lua_as£π
(
	`g√xt
(
f
) == 0);

483 
	`g√xt
(
mp
Ë
	`ˇ°_öt
(
f
 - mp);

484 
mp
 = 
f
;

487 
	`£äodekey
(
L
, &
mp
->
i_key
, 
key
);

488 
	`luaC_b¨rõrback
(
L
, 
t
, 
key
);

489 
	`lua_as£π
(
	`âi¢û
(
	`gvÆ
(
mp
)));

490  
	`gvÆ
(
mp
);

491 
	}
}

497 c⁄° 
TVÆue
 *
	$luaH_gëöt
 (
TabÀ
 *
t
, 
lua_I¡egî
 
key
) {

499 i‡(
	`l_ˇ°S2U
(
key
Ë- 1 < 
t
->
sizóºay
)

500  &
t
->
¨øy
[
key
 - 1];

502 
Node
 *
n
 = 
	`hashöt
(
t
, 
key
);

504 i‡(
	`âisöãgî
(
	`gkey
(
n
)Ë&& 
	`ivÆue
(gkey“)Ë=
key
)

505  
	`gvÆ
(
n
);

507 
nx
 = 
	`g√xt
(
n
);

508 i‡(
nx
 == 0) ;

509 
n
 +
nx
;

512  
luaO_nûobje˘
;

514 
	}
}

520 c⁄° 
TVÆue
 *
	$luaH_gësh‹t°r
 (
TabÀ
 *
t
, 
TSåög
 *
key
) {

521 
Node
 *
n
 = 
	`hash°r
(
t
, 
key
);

522 
	`lua_as£π
(
key
->
â
 =
LUA_TSHRSTR
);

524 c⁄° 
TVÆue
 *
k
 = 
	`gkey
(
n
);

525 i‡(
	`âisshr°rög
(
k
Ë&& 
	`eqshr°r
(
	`tsvÆue
(k), 
key
))

526  
	`gvÆ
(
n
);

528 
nx
 = 
	`g√xt
(
n
);

529 i‡(
nx
 == 0)

530  
luaO_nûobje˘
;

531 
n
 +
nx
;

534 
	}
}

541 c⁄° 
TVÆue
 *
	$gëgíîic
 (
TabÀ
 *
t
, c⁄° 
TVÆue
 *
key
) {

542 
Node
 *
n
 = 
	`maöposôi⁄
(
t
, 
key
);

544 i‡(
	`luaV_øwequÆobj
(
	`gkey
(
n
), 
key
))

545  
	`gvÆ
(
n
);

547 
nx
 = 
	`g√xt
(
n
);

548 i‡(
nx
 == 0)

549  
luaO_nûobje˘
;

550 
n
 +
nx
;

553 
	}
}

556 c⁄° 
TVÆue
 *
	$luaH_gë°r
 (
TabÀ
 *
t
, 
TSåög
 *
key
) {

557 i‡(
key
->
â
 =
LUA_TSHRSTR
)

558  
	`luaH_gësh‹t°r
(
t
, 
key
);

560 
TVÆue
 
ko
;

561 
	`£tsvÆue
(
	`ˇ°
(
lua_Sèã
 *, 
NULL
), &
ko
, 
key
);

562  
	`gëgíîic
(
t
, &
ko
);

564 
	}
}

570 c⁄° 
TVÆue
 *
	$luaH_gë
 (
TabÀ
 *
t
, c⁄° 
TVÆue
 *
key
) {

571 
	`ây≥
(
key
)) {

572 
LUA_TSHRSTR
:  
	`luaH_gësh‹t°r
(
t
, 
	`tsvÆue
(
key
));

573 
LUA_TNUMINT
:  
	`luaH_gëöt
(
t
, 
	`ivÆue
(
key
));

574 
LUA_TNIL
:  
luaO_nûobje˘
;

575 
LUA_TNUMFLT
: {

576 
lua_I¡egî
 
k
;

577 i‡(
	`luaV_toöãgî
(
key
, &
k
, 0))

578  
	`luaH_gëöt
(
t
, 
k
);

582  
	`gëgíîic
(
t
, 
key
);

584 
	}
}

591 
TVÆue
 *
	$luaH_£t
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, c⁄° 
TVÆue
 *
key
) {

592 c⁄° 
TVÆue
 *
p
 = 
	`luaH_gë
(
t
, 
key
);

593 i‡(
p
 !
luaO_nûobje˘
)

594  
	`ˇ°
(
TVÆue
 *, 
p
);

595  
	`luaH_√wkey
(
L
, 
t
, 
key
);

596 
	}
}

599 
	$luaH_£töt
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
lua_I¡egî
 
key
, 
TVÆue
 *
vÆue
) {

600 c⁄° 
TVÆue
 *
p
 = 
	`luaH_gëöt
(
t
, 
key
);

601 
TVÆue
 *
˚Œ
;

602 i‡(
p
 !
luaO_nûobje˘
)

603 
˚Œ
 = 
	`ˇ°
(
TVÆue
 *, 
p
);

605 
TVÆue
 
k
;

606 
	`£tivÆue
(&
k
, 
key
);

607 
˚Œ
 = 
	`luaH_√wkey
(
L
, 
t
, &
k
);

609 
	`£tobj2t
(
L
, 
˚Œ
, 
vÆue
);

610 
	}
}

613 
	$unbound_£¨ch
 (
TabÀ
 *
t
, 
j
) {

614 
i
 = 
j
;

615 
j
++;

617 !
	`âi¢û
(
	`luaH_gëöt
(
t
, 
j
))) {

618 
i
 = 
j
;

619 i‡(
j
 > 
	`ˇ°
(, 
MAX_INT
)/2) {

621 
i
 = 1;

622 !
	`âi¢û
(
	`luaH_gëöt
(
t
, 
i
))) i++;

623  
i
 - 1;

625 
j
 *= 2;

628 
j
 - 
i
 > 1) {

629 
m
 = (
i
+
j
)/2;

630 i‡(
	`âi¢û
(
	`luaH_gëöt
(
t
, 
m
))Ë
j
 = m;

631 
i
 = 
m
;

633  
i
;

634 
	}
}

641 
	$luaH_gën
 (
TabÀ
 *
t
) {

642 
j
 = 
t
->
sizóºay
;

643 i‡(
j
 > 0 && 
	`âi¢û
(&
t
->
¨øy
[j - 1])) {

645 
i
 = 0;

646 
j
 - 
i
 > 1) {

647 
m
 = (
i
+
j
)/2;

648 i‡(
	`âi¢û
(&
t
->
¨øy
[
m
 - 1])Ë
j
 = m;

649 
i
 = 
m
;

651  
i
;

654 i‡(
	`isdummy
(
t
))

655  
j
;

656  
	`unbound_£¨ch
(
t
, 
j
);

657 
	}
}

661 #i‡
deföed
(
LUA_DEBUG
)

663 
Node
 *
	$luaH_maöposôi⁄
 (c⁄° 
TabÀ
 *
t
, c⁄° 
TVÆue
 *
key
) {

664  
	`maöposôi⁄
(
t
, 
key
);

665 
	}
}

667 
	$luaH_isdummy
 (c⁄° 
TabÀ
 *
t
Ë{  
	`isdummy
—); 
	}
}

	@lib/lua/lua-5.3.4/src/ltable.h

7 #i‚de‡
…abÀ_h


8 
	#…abÀ_h


	)

10 
	~"lobje˘.h
"

13 
	#gnode
(
t
,
i
Ë(&—)->
node
[i])

	)

14 
	#gvÆ
(
n
Ë(&“)->
i_vÆ
)

	)

15 
	#g√xt
(
n
Ë(“)->
i_key
.
nk
.
√xt
)

	)

19 
	#gkey
(
n
Ë
	`ˇ°
(c⁄° 
TVÆue
*, (&“)->
i_key
.
tvk
))

	)

25 
	#wgkey
(
n
Ë(&“)->
i_key
.
nk
)

	)

27 
	#övÆid©eTMˇche
(
t
Ë(—)->
Êags
 = 0)

	)

31 
	#isdummy
(
t
Ë(—)->
œ°‰ì
 =
NULL
)

	)

35 
	#Ælocsizíode
(
t
Ë(
	`isdummy
—Ë? 0 : 
	`sizíode
—))

	)

39 
	#key‰omvÆ
(
v
) \

40 (
	`gkey
(
	`ˇ°
(
Node
 *, ca°(*, (
v
)Ë- 
	`off£tof
(Node, 
i_vÆ
))))

	)

43 
LUAI_FUNC
 c⁄° 
TVÆue
 *
luaH_gëöt
 (
TabÀ
 *
t
, 
lua_I¡egî
 
key
);

44 
LUAI_FUNC
 
luaH_£töt
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
lua_I¡egî
 
key
,

45 
TVÆue
 *
vÆue
);

46 
LUAI_FUNC
 c⁄° 
TVÆue
 *
luaH_gësh‹t°r
 (
TabÀ
 *
t
, 
TSåög
 *
key
);

47 
LUAI_FUNC
 c⁄° 
TVÆue
 *
luaH_gë°r
 (
TabÀ
 *
t
, 
TSåög
 *
key
);

48 
LUAI_FUNC
 c⁄° 
TVÆue
 *
luaH_gë
 (
TabÀ
 *
t
, c⁄° TVÆuê*
key
);

49 
LUAI_FUNC
 
TVÆue
 *
luaH_√wkey
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, c⁄° TVÆuê*
key
);

50 
LUAI_FUNC
 
TVÆue
 *
luaH_£t
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, c⁄° TVÆuê*
key
);

51 
LUAI_FUNC
 
TabÀ
 *
luaH_√w
 (
lua_Sèã
 *
L
);

52 
LUAI_FUNC
 
luaH_ªsize
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
«size
,

53 
nhsize
);

54 
LUAI_FUNC
 
luaH_ªsizóºay
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
«size
);

55 
LUAI_FUNC
 
luaH_‰ì
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
);

56 
LUAI_FUNC
 
luaH_√xt
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
StkId
 
key
);

57 
LUAI_FUNC
 
luaH_gën
 (
TabÀ
 *
t
);

60 #i‡
deföed
(
LUA_DEBUG
)

61 
LUAI_FUNC
 
Node
 *
luaH_maöposôi⁄
 (c⁄° 
TabÀ
 *
t
, c⁄° 
TVÆue
 *
key
);

62 
LUAI_FUNC
 
luaH_isdummy
 (c⁄° 
TabÀ
 *
t
);

	@lib/lua/lua-5.3.4/src/ltablib.c

7 
	#…ablib_c


	)

8 
	#LUA_LIB


	)

10 
	~"Õªfix.h
"

13 
	~<limôs.h
>

14 
	~<°ddef.h
>

15 
	~<°rög.h
>

17 
	~"lua.h
"

19 
	~"œuxlib.h
"

20 
	~"luÆib.h
"

27 
	#TAB_R
 1

	)

28 
	#TAB_W
 2

	)

29 
	#TAB_L
 4

	)

30 
	#TAB_RW
 (
TAB_R
 | 
TAB_W
Ë

	)

33 
	#aux_gën
(
L
,
n
,
w
Ë(
	`checkèb
(L,Ç, (wË| 
TAB_L
), 
	`luaL_Àn
(L,Ç))

	)

36 
	$checkfõld
 (
lua_Sèã
 *
L
, c⁄° *
key
, 
n
) {

37 
	`lua_push°rög
(
L
, 
key
);

38  (
	`lua_øwgë
(
L
, -
n
Ë!
LUA_TNIL
);

39 
	}
}

46 
	$checkèb
 (
lua_Sèã
 *
L
, 
¨g
, 
wh©
) {

47 i‡(
	`lua_ty≥
(
L
, 
¨g
Ë!
LUA_TTABLE
) {

48 
n
 = 1;

49 i‡(
	`lua_gëmë©abÀ
(
L
, 
¨g
) &&

50 (!(
wh©
 & 
TAB_R
Ë|| 
	`checkfõld
(
L
, "__ödex", ++
n
)) &&

51 (!(
wh©
 & 
TAB_W
Ë|| 
	`checkfõld
(
L
, "__√wödex", ++
n
)) &&

52 (!(
wh©
 & 
TAB_L
Ë|| 
	`checkfõld
(
L
, "__Àn", ++
n
))) {

53 
	`lua_p›
(
L
, 
n
);

56 
	`luaL_checkty≥
(
L
, 
¨g
, 
LUA_TTABLE
);

58 
	}
}

61 #i‡
deföed
(
LUA_COMPAT_MAXN
)

62 
	$maxn
 (
lua_Sèã
 *
L
) {

63 
lua_Numbî
 
max
 = 0;

64 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

65 
	`lua_pushnû
(
L
);

66 
	`lua_√xt
(
L
, 1)) {

67 
	`lua_p›
(
L
, 1);

68 i‡(
	`lua_ty≥
(
L
, -1Ë=
LUA_TNUMBER
) {

69 
lua_Numbî
 
v
 = 
	`lua_t⁄umbî
(
L
, -1);

70 i‡(
v
 > 
max
) max = v;

73 
	`lua_pushnumbî
(
L
, 
max
);

75 
	}
}

79 
	$tö£π
 (
lua_Sèã
 *
L
) {

80 
lua_I¡egî
 
e
 = 
	`aux_gën
(
L
, 1, 
TAB_RW
) + 1;

81 
lua_I¡egî
 
pos
;

82 
	`lua_gët›
(
L
)) {

84 
pos
 = 
e
;

88 
lua_I¡egî
 
i
;

89 
pos
 = 
	`luaL_checköãgî
(
L
, 2);

90 
	`luaL_¨gcheck
(
L
, 1 <
pos
 &&Öo†<
e
, 2, "position out of bounds");

91 
i
 = 
e
; i > 
pos
; i--) {

92 
	`lua_gëi
(
L
, 1, 
i
 - 1);

93 
	`lua_£ti
(
L
, 1, 
i
);

98  
	`luaL_îr‹
(
L
, "wrongÇumber ofárgumentsÅo 'insert'");

101 
	`lua_£ti
(
L
, 1, 
pos
);

103 
	}
}

106 
	$åemove
 (
lua_Sèã
 *
L
) {

107 
lua_I¡egî
 
size
 = 
	`aux_gën
(
L
, 1, 
TAB_RW
);

108 
lua_I¡egî
 
pos
 = 
	`luaL_›töãgî
(
L
, 2, 
size
);

109 i‡(
pos
 !
size
)

110 
	`luaL_¨gcheck
(
L
, 1 <
pos
 &&Öo†<
size
 + 1, 1, "position out of bounds");

111 
	`lua_gëi
(
L
, 1, 
pos
);

112  ; 
pos
 < 
size
;Öos++) {

113 
	`lua_gëi
(
L
, 1, 
pos
 + 1);

114 
	`lua_£ti
(
L
, 1, 
pos
);

116 
	`lua_pushnû
(
L
);

117 
	`lua_£ti
(
L
, 1, 
pos
);

119 
	}
}

128 
	$tmove
 (
lua_Sèã
 *
L
) {

129 
lua_I¡egî
 
f
 = 
	`luaL_checköãgî
(
L
, 2);

130 
lua_I¡egî
 
e
 = 
	`luaL_checköãgî
(
L
, 3);

131 
lua_I¡egî
 
t
 = 
	`luaL_checköãgî
(
L
, 4);

132 
â
 = !
	`lua_i¢⁄e‹nû
(
L
, 5) ? 5 : 1;

133 
	`checkèb
(
L
, 1, 
TAB_R
);

134 
	`checkèb
(
L
, 
â
, 
TAB_W
);

135 i‡(
e
 >
f
) {

136 
lua_I¡egî
 
n
, 
i
;

137 
	`luaL_¨gcheck
(
L
, 
f
 > 0 || 
e
 < 
LUA_MAXINTEGER
 + f, 3,

139 
n
 = 
e
 - 
f
 + 1;

140 
	`luaL_¨gcheck
(
L
, 
t
 <
LUA_MAXINTEGER
 - 
n
 + 1, 4,

142 i‡(
t
 > 
e
 ||Å <
f
 || (
â
 !1 && !
	`lua_com∑ª
(
L
, 1,Åt, 
LUA_OPEQ
))) {

143 
i
 = 0; i < 
n
; i++) {

144 
	`lua_gëi
(
L
, 1, 
f
 + 
i
);

145 
	`lua_£ti
(
L
, 
â
, 
t
 + 
i
);

149 
i
 = 
n
 - 1; i >= 0; i--) {

150 
	`lua_gëi
(
L
, 1, 
f
 + 
i
);

151 
	`lua_£ti
(
L
, 
â
, 
t
 + 
i
);

155 
	`lua_pushvÆue
(
L
, 
â
);

157 
	}
}

160 
	$addfõld
 (
lua_Sèã
 *
L
, 
luaL_Buf„r
 *
b
, 
lua_I¡egî
 
i
) {

161 
	`lua_gëi
(
L
, 1, 
i
);

162 i‡(!
	`lua_is°rög
(
L
, -1))

163 
	`luaL_îr‹
(
L
, "invalid value (%s)át index %d inÅable for 'concat'",

164 
	`luaL_ty≥«me
(
L
, -1), 
i
);

165 
	`luaL_addvÆue
(
b
);

166 
	}
}

169 
	$tc⁄ˇt
 (
lua_Sèã
 *
L
) {

170 
luaL_Buf„r
 
b
;

171 
lua_I¡egî
 
œ°
 = 
	`aux_gën
(
L
, 1, 
TAB_R
);

172 
size_t
 
l£p
;

173 c⁄° *
£p
 = 
	`luaL_›é°rög
(
L
, 2, "", &
l£p
);

174 
lua_I¡egî
 
i
 = 
	`luaL_›töãgî
(
L
, 3, 1);

175 
œ°
 = 
	`luaL_›töãgî
(
L
, 4,Üast);

176 
	`luaL_bufföô
(
L
, &
b
);

177 ; 
i
 < 
œ°
; i++) {

178 
	`addfõld
(
L
, &
b
, 
i
);

179 
	`luaL_addl°rög
(&
b
, 
£p
, 
l£p
);

181 i‡(
i
 =
œ°
)

182 
	`addfõld
(
L
, &
b
, 
i
);

183 
	`luaL_pushªsu…
(&
b
);

185 
	}
}

194 
	$∑ck
 (
lua_Sèã
 *
L
) {

195 
i
;

196 
n
 = 
	`lua_gët›
(
L
);

197 
	`lua_¸óãèbÀ
(
L
, 
n
, 1);

198 
	`lua_ö£π
(
L
, 1);

199 
i
 = 
n
; i >= 1; i--)

200 
	`lua_£ti
(
L
, 1, 
i
);

201 
	`lua_pushöãgî
(
L
, 
n
);

202 
	`lua_£tfõld
(
L
, 1, "n");

204 
	}
}

207 
	$u≈ack
 (
lua_Sèã
 *
L
) {

208 
lua_Unsig√d
 
n
;

209 
lua_I¡egî
 
i
 = 
	`luaL_›töãgî
(
L
, 2, 1);

210 
lua_I¡egî
 
e
 = 
	`luaL_›t
(
L
, 
luaL_checköãgî
, 3, 
	`luaL_Àn
(L, 1));

211 i‡(
i
 > 
e
)  0;

212 
n
 = (
lua_Unsig√d
)
e
 - 
i
;

213 i‡(
n
 >()
INT_MAX
 || !
	`lua_check°ack
(
L
, ()(++n)))

214  
	`luaL_îr‹
(
L
, "too manyÑesultsÅo unpack");

215 ; 
i
 < 
e
; i++) {

216 
	`lua_gëi
(
L
, 1, 
i
);

218 
	`lua_gëi
(
L
, 1, 
e
);

219  ()
n
;

220 
	}
}

236 
	tIdxT
;

245 #i‡!
deföed
(
l_øndomizePivŸ
)

247 
	~<time.h
>

250 
	#sof
(
e
Ë(”Ë/ ())

	)

258 
	$l_øndomizePivŸ
 () {

259 
˛ock_t
 
c
 = 
	`˛ock
();

260 
time_t
 
t
 = 
	`time
(
NULL
);

261 
buff
[
	`sof
(
c
Ë+ sof(
t
)];

262 
i
, 
∫d
 = 0;

263 
	`mem˝y
(
buff
, &
c
, 
	`sof
(c) * ());

264 
	`mem˝y
(
buff
 + 
	`sof
(
c
), &
t
, sof(t) * ());

265 
i
 = 0; i < 
	`sof
(
buff
); i++)

266 
∫d
 +
buff
[
i
];

267  
∫d
;

268 
	}
}

274 
	#RANLIMIT
 100u

	)

277 
	$£t2
 (
lua_Sèã
 *
L
, 
IdxT
 
i
, IdxT 
j
) {

278 
	`lua_£ti
(
L
, 1, 
i
);

279 
	`lua_£ti
(
L
, 1, 
j
);

280 
	}
}

287 
	$s‹t_comp
 (
lua_Sèã
 *
L
, 
a
, 
b
) {

288 i‡(
	`lua_i¢û
(
L
, 2))

289  
	`lua_com∑ª
(
L
, 
a
, 
b
, 
LUA_OPLT
);

291 
ªs
;

292 
	`lua_pushvÆue
(
L
, 2);

293 
	`lua_pushvÆue
(
L
, 
a
-1);

294 
	`lua_pushvÆue
(
L
, 
b
-2);

295 
	`lua_ˇŒ
(
L
, 2, 1);

296 
ªs
 = 
	`lua_toboﬁón
(
L
, -1);

297 
	`lua_p›
(
L
, 1);

298  
ªs
;

300 
	}
}

310 
IdxT
 
	$∑πôi⁄
 (
lua_Sèã
 *
L
, 
IdxT
 
lo
, IdxT 
up
) {

311 
IdxT
 
i
 = 
lo
;

312 
IdxT
 
j
 = 
up
 - 1;

316 
	`lua_gëi
(
L
, 1, ++
i
), 
	`s‹t_comp
(L, -1, -2)) {

317 i‡(
i
 =
up
 - 1)

318 
	`luaL_îr‹
(
L
, "invalid order function for sorting");

319 
	`lua_p›
(
L
, 1);

323 
	`lua_gëi
(
L
, 1, --
j
), 
	`s‹t_comp
(L, -3, -1)) {

324 i‡(
j
 < 
i
)

325 
	`luaL_îr‹
(
L
, "invalid order function for sorting");

326 
	`lua_p›
(
L
, 1);

329 i‡(
j
 < 
i
) {

331 
	`lua_p›
(
L
, 1);

333 
	`£t2
(
L
, 
up
 - 1, 
i
);

334  
i
;

337 
	`£t2
(
L
, 
i
, 
j
);

339 
	}
}

346 
IdxT
 
	$choo£PivŸ
 (
IdxT
 
lo
, IdxT 
up
, 
∫d
) {

347 
IdxT
 
r4
 = (
up
 - 
lo
) / 4;

348 
IdxT
 
p
 = 
∫d
 % (
r4
 * 2Ë+ (
lo
 +Ñ4);

349 
	`lua_as£π
(
lo
 + 
r4
 <
p
 &&Ö <
up
 -Ñ4);

350  
p
;

351 
	}
}

357 
	$auxs‹t
 (
lua_Sèã
 *
L
, 
IdxT
 
lo
, IdxT 
up
,

358 
∫d
) {

359 
lo
 < 
up
) {

360 
IdxT
 
p
;

361 
IdxT
 
n
;

363 
	`lua_gëi
(
L
, 1, 
lo
);

364 
	`lua_gëi
(
L
, 1, 
up
);

365 i‡(
	`s‹t_comp
(
L
, -1, -2))

366 
	`£t2
(
L
, 
lo
, 
up
);

368 
	`lua_p›
(
L
, 2);

369 i‡(
up
 - 
lo
 == 1)

371 i‡(
up
 - 
lo
 < 
RANLIMIT
 || 
∫d
 == 0)

372 
p
 = (
lo
 + 
up
)/2;

374 
p
 = 
	`choo£PivŸ
(
lo
, 
up
, 
∫d
);

375 
	`lua_gëi
(
L
, 1, 
p
);

376 
	`lua_gëi
(
L
, 1, 
lo
);

377 i‡(
	`s‹t_comp
(
L
, -2, -1))

378 
	`£t2
(
L
, 
p
, 
lo
);

380 
	`lua_p›
(
L
, 1);

381 
	`lua_gëi
(
L
, 1, 
up
);

382 i‡(
	`s‹t_comp
(
L
, -1, -2))

383 
	`£t2
(
L
, 
p
, 
up
);

385 
	`lua_p›
(
L
, 2);

387 i‡(
up
 - 
lo
 == 2)

389 
	`lua_gëi
(
L
, 1, 
p
);

390 
	`lua_pushvÆue
(
L
, -1);

391 
	`lua_gëi
(
L
, 1, 
up
 - 1);

392 
	`£t2
(
L
, 
p
, 
up
 - 1);

393 
p
 = 
	`∑πôi⁄
(
L
, 
lo
, 
up
);

395 i‡(
p
 - 
lo
 < 
up
 -Ö) {

396 
	`auxs‹t
(
L
, 
lo
, 
p
 - 1, 
∫d
);

397 
n
 = 
p
 - 
lo
;

398 
lo
 = 
p
 + 1;

401 
	`auxs‹t
(
L
, 
p
 + 1, 
up
, 
∫d
);

402 
n
 = 
up
 - 
p
;

403 
up
 = 
p
 - 1;

405 i‡((
up
 - 
lo
Ë/ 128 > 
n
)

406 
∫d
 = 
	`l_øndomizePivŸ
();

408 
	}
}

411 
	$s‹t
 (
lua_Sèã
 *
L
) {

412 
lua_I¡egî
 
n
 = 
	`aux_gën
(
L
, 1, 
TAB_RW
);

413 i‡(
n
 > 1) {

414 
	`luaL_¨gcheck
(
L
, 
n
 < 
INT_MAX
, 1, "arrayÅoo big");

415 i‡(!
	`lua_i¢⁄e‹nû
(
L
, 2))

416 
	`luaL_checkty≥
(
L
, 2, 
LUA_TFUNCTION
);

417 
	`lua_£â›
(
L
, 2);

418 
	`auxs‹t
(
L
, 1, (
IdxT
)
n
, 0);

421 
	}
}

426 c⁄° 
luaL_Reg
 
	gèb_funcs
[] = {

427 {"c⁄ˇt", 
tc⁄ˇt
},

428 #i‡
deföed
(
LUA_COMPAT_MAXN
)

429 {"maxn", 
maxn
},

431 {"ö£π", 
tö£π
},

432 {"∑ck", 
∑ck
},

433 {"u≈ack", 
u≈ack
},

434 {"ªmove", 
åemove
},

435 {"move", 
tmove
},

436 {"s‹t", 
s‹t
},

437 {
NULL
, NULL}

441 
LUAMOD_API
 
	$lua›í_èbÀ
 (
lua_Sèã
 *
L
) {

442 
	`luaL_√wlib
(
L
, 
èb_funcs
);

443 #i‡
	`deföed
(
LUA_COMPAT_UNPACK
)

445 
	`lua_gëfõld
(
L
, -1, "unpack");

446 
	`lua_£tglobÆ
(
L
, "unpack");

449 
	}
}

	@lib/lua/lua-5.3.4/src/ltm.c

7 
	#…m_c


	)

8 
	#LUA_CORE


	)

10 
	~"Õªfix.h
"

13 
	~<°rög.h
>

15 
	~"lua.h
"

17 
	~"ldebug.h
"

18 
	~"ldo.h
"

19 
	~"lobje˘.h
"

20 
	~"l°©e.h
"

21 
	~"l°rög.h
"

22 
	~"…abÀ.h
"

23 
	~"…m.h
"

24 
	~"lvm.h
"

27 c⁄° 
	gud©©y≥«me
[] = "userdata";

29 
LUAI_DDEF
 c⁄° *c⁄° 
	gluaT_ty≥«mes_
[
LUA_TOTALTAGS
] = {

31 "nû", "boﬁón", 
ud©©y≥«me
, "number",

32 "°rög", "èbÀ", "fun˘i⁄", 
ud©©y≥«me
, "thread",

37 
	$luaT_öô
 (
lua_Sèã
 *
L
) {

38 c⁄° *c⁄° 
luaT_evíäame
[] = {

47 
i
;

48 
i
=0; i<
TM_N
; i++) {

49 
	`G
(
L
)->
tm«me
[
i
] = 
	`luaS_√w
(L, 
luaT_evíäame
[i]);

50 
	`luaC_fix
(
L
, 
	`obj2gco
(
	`G
(L)->
tm«me
[
i
]));

52 
	}
}

59 c⁄° 
TVÆue
 *
	$luaT_gëtm
 (
TabÀ
 *
evíts
, 
TMS
 
evít
, 
TSåög
 *
íame
) {

60 c⁄° 
TVÆue
 *
tm
 = 
	`luaH_gësh‹t°r
(
evíts
, 
íame
);

61 
	`lua_as£π
(
evít
 <
TM_EQ
);

62 i‡(
	`âi¢û
(
tm
)) {

63 
evíts
->
Êags
 |
	`ˇ°_byã
(1u<<
evít
);

64  
NULL
;

66  
tm
;

67 
	}
}

70 c⁄° 
TVÆue
 *
	$luaT_gëtmbyobj
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
o
, 
TMS
 
evít
) {

71 
TabÀ
 *
mt
;

72 
	`ânov
(
o
)) {

73 
LUA_TTABLE
:

74 
mt
 = 
	`hvÆue
(
o
)->
më©abÀ
;

76 
LUA_TUSERDATA
:

77 
mt
 = 
	`uvÆue
(
o
)->
më©abÀ
;

80 
mt
 = 
	`G
(
L
)->mt[
	`ânov
(
o
)];

82  (
mt
 ? 
	`luaH_gësh‹t°r
(mt, 
	`G
(
L
)->
tm«me
[
evít
]Ë: 
luaO_nûobje˘
);

83 
	}
}

90 c⁄° *
	$luaT_objty≥«me
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
o
) {

91 
TabÀ
 *
mt
;

92 i‡((
	`âi°abÀ
(
o
Ë&& (
mt
 = 
	`hvÆue
(o)->
më©abÀ
Ë!
NULL
) ||

93 (
	`âisfuŒu£rd©a
(
o
Ë&& (
mt
 = 
	`uvÆue
(o)->
më©abÀ
Ë!
NULL
)) {

94 c⁄° 
TVÆue
 *
«me
 = 
	`luaH_gësh‹t°r
(
mt
, 
	`luaS_√w
(
L
, "__name"));

95 i‡(
	`âis°rög
(
«me
))

96  
	`gë°r
(
	`tsvÆue
(
«me
));

98  
	`ây≥«me
(
	`ânov
(
o
));

99 
	}
}

102 
	$luaT_ˇŒTM
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
f
, c⁄° TVÆuê*
p1
,

103 c⁄° 
TVÆue
 *
p2
, TVÆuê*
p3
, 
ha§es
) {

104 
±rdiff_t
 
ªsu…
 = 
	`ßve°ack
(
L
, 
p3
);

105 
StkId
 
func
 = 
L
->
t›
;

106 
	`£tobj2s
(
L
, 
func
, 
f
);

107 
	`£tobj2s
(
L
, 
func
 + 1, 
p1
);

108 
	`£tobj2s
(
L
, 
func
 + 2, 
p2
);

109 
L
->
t›
 += 3;

110 i‡(!
ha§es
)

111 
	`£tobj2s
(
L
, L->
t›
++, 
p3
);

113 i‡(
	`isLua
(
L
->
ci
))

114 
	`luaD_ˇŒ
(
L
, 
func
, 
ha§es
);

116 
	`luaD_ˇŒnoyõld
(
L
, 
func
, 
ha§es
);

117 i‡(
ha§es
) {

118 
p3
 = 
	`ª°‹e°ack
(
L
, 
ªsu…
);

119 
	`£tobjs2s
(
L
, 
p3
, --L->
t›
);

121 
	}
}

124 
	$luaT_ˇŒböTM
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
p1
, c⁄° TVÆuê*
p2
,

125 
StkId
 
ªs
, 
TMS
 
evít
) {

126 c⁄° 
TVÆue
 *
tm
 = 
	`luaT_gëtmbyobj
(
L
, 
p1
, 
evít
);

127 i‡(
	`âi¢û
(
tm
))

128 
tm
 = 
	`luaT_gëtmbyobj
(
L
, 
p2
, 
evít
);

129 i‡(
	`âi¢û
(
tm
))  0;

130 
	`luaT_ˇŒTM
(
L
, 
tm
, 
p1
, 
p2
, 
ªs
, 1);

132 
	}
}

135 
	$luaT_åyböTM
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
p1
, c⁄° TVÆuê*
p2
,

136 
StkId
 
ªs
, 
TMS
 
evít
) {

137 i‡(!
	`luaT_ˇŒböTM
(
L
, 
p1
, 
p2
, 
ªs
, 
evít
)) {

138 
evít
) {

139 
TM_CONCAT
:

140 
	`luaG_c⁄ˇãº‹
(
L
, 
p1
, 
p2
);

142 
TM_BAND
: 
TM_BOR
: 
TM_BXOR
:

143 
TM_SHL
: 
TM_SHR
: 
TM_BNOT
: {

144 
lua_Numbî
 
dummy
;

145 i‡(
	`t⁄umbî
(
p1
, &
dummy
Ë&&Å⁄umbî(
p2
, &dummy))

146 
	`luaG_toöãº‹
(
L
, 
p1
, 
p2
);

148 
	`luaG_›öãº‹
(
L
, 
p1
, 
p2
, "perform bitwise operation on");

152 
	`luaG_›öãº‹
(
L
, 
p1
, 
p2
, "performárithmetic on");

155 
	}
}

158 
	$luaT_ˇŒ‹dîTM
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
p1
, c⁄° TVÆuê*
p2
,

159 
TMS
 
evít
) {

160 i‡(!
	`luaT_ˇŒböTM
(
L
, 
p1
, 
p2
, L->
t›
, 
evít
))

163  !
	`l_isÁl£
(
L
->
t›
);

164 
	}
}

	@lib/lua/lua-5.3.4/src/ltm.h

7 #i‚de‡
…m_h


8 
	#…m_h


	)

11 
	~"lobje˘.h
"

19 
	mTM_INDEX
,

20 
	mTM_NEWINDEX
,

21 
	mTM_GC
,

22 
	mTM_MODE
,

23 
	mTM_LEN
,

24 
	mTM_EQ
,

25 
	mTM_ADD
,

26 
	mTM_SUB
,

27 
	mTM_MUL
,

28 
	mTM_MOD
,

29 
	mTM_POW
,

30 
	mTM_DIV
,

31 
	mTM_IDIV
,

32 
	mTM_BAND
,

33 
	mTM_BOR
,

34 
	mTM_BXOR
,

35 
	mTM_SHL
,

36 
	mTM_SHR
,

37 
	mTM_UNM
,

38 
	mTM_BNOT
,

39 
	mTM_LT
,

40 
	mTM_LE
,

41 
	mTM_CONCAT
,

42 
	mTM_CALL
,

43 
	mTM_N


44 } 
	tTMS
;

48 
	#gÁ°tm
(
g
,
ë
,
e
Ë(”tË=
NULL
 ? NULL : \

49 ((
ë
)->
Êags
 & (1u<<(
e
))Ë? 
NULL
 : 
	`luaT_gëtm
”t,É, (
g
)->
tm«me
[e]))

	)

51 
	#Á°tm
(
l
,
ë
,
e
Ë
	`gÁ°tm
(
	`G
÷),Ét,É)

	)

53 
	#ây≥«me
(
x
Ë
luaT_ty≥«mes_
[(xË+ 1]

	)

55 
LUAI_DDEC
 c⁄° *c⁄° 
	gluaT_ty≥«mes_
[
LUA_TOTALTAGS
];

58 
LUAI_FUNC
 c⁄° *
luaT_objty≥«me
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
o
);

60 
LUAI_FUNC
 c⁄° 
TVÆue
 *
luaT_gëtm
 (
TabÀ
 *
evíts
, 
TMS
 
evít
, 
TSåög
 *
íame
);

61 
LUAI_FUNC
 c⁄° 
TVÆue
 *
luaT_gëtmbyobj
 (
lua_Sèã
 *
L
, c⁄° TVÆuê*
o
,

62 
TMS
 
evít
);

63 
LUAI_FUNC
 
luaT_öô
 (
lua_Sèã
 *
L
);

65 
LUAI_FUNC
 
luaT_ˇŒTM
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
f
, c⁄° TVÆuê*
p1
,

66 c⁄° 
TVÆue
 *
p2
, TVÆuê*
p3
, 
ha§es
);

67 
LUAI_FUNC
 
luaT_ˇŒböTM
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
p1
, c⁄° TVÆuê*
p2
,

68 
StkId
 
ªs
, 
TMS
 
evít
);

69 
LUAI_FUNC
 
luaT_åyböTM
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
p1
, c⁄° TVÆuê*
p2
,

70 
StkId
 
ªs
, 
TMS
 
evít
);

71 
LUAI_FUNC
 
luaT_ˇŒ‹dîTM
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
p1
,

72 c⁄° 
TVÆue
 *
p2
, 
TMS
 
evít
);

	@lib/lua/lua-5.3.4/src/lua-socket.c

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<°döt.h
>

12 
	~<sig«l.h
>

13 
	~<öây≥s.h
>

14 
	~<sys/ty≥s.h
>

15 
	~<uni°d.h
>

16 
	~<°rög.h
>

17 
	~<sys/queue.h
>

18 
	~<√töë/ö.h
>

19 
	~<√t/if.h
>

20 
	~<f˙é.h
>

21 
	~<£tjmp.h
>

22 
	~<°d¨g.h
>

23 
	~<˘y≥.h
>

24 
	~<î∫o.h
>

25 
	~<gë›t.h
>

26 
	~<ãrmios.h
>

27 
	~<sys/io˘l.h
>

28 
	~<libgí.h
>

29 
	~<¨∑/öë.h
>

30 
	~<√tdb.h
>

31 
	~<as£π.h
>

33 
	~<πe_c⁄fig.h
>

34 
	~<πe_vîsi⁄.h
>

36 
	~<πe_log.h
>

37 
	~<πe_èûq.h
>

38 
	~<πe_comm⁄.h
>

39 
	~<πe_mem‹y.h
>

40 
	~<πe_mem˝y.h
>

41 
	~<πe_memz⁄e.h
>

42 
	~<πe_mÆloc.h
>

43 
	~<πe_ól.h
>

44 
	~<πe_≥r_lc‹e.h
>

45 
	~<πe_œunch.h
>

46 
	~<πe_©omic.h
>

47 
	~<πe_cy˛es.h
>

48 
	~<πe_¥e„tch.h
>

49 
	~<πe_lc‹e.h
>

50 
	~<πe_bønch_¥edi˘i⁄.h
>

51 
	~<πe_pci.h
>

52 
	~<πe_øndom.h
>

53 
	~<πe_timî.h
>

54 
	~<πe_debug.h
>

55 
	~<πe_ëhî.h
>

56 
	~<πe_ëhdev.h
>

57 
	~<πe_rög.h
>

58 
	~<πe_mempoﬁ.h
>

59 
	~<πe_mbuf.h
>

61 
	#lua_c


	)

62 
	~"lua.h
"

63 
	~"luÆib.h
"

64 
	~"œuxlib.h
"

66 
	~"lua-sockë.h
"

67 
	~"lua_shñl.h
"

69 
lua_Sèã
 * 
	gl°©e
;

71 
lua_Sèã
 * 
	$lua_°©e_poöãr
(Ë{  
l°©e
; 
	}
}

73 * 
lua_gë_¥iv©e
(* 
L
);

74 
lua_shñl
(*);

75 
lua_£t_°dfûes
(
lua_Sèã
 * 
L
, 
FILE
 * 
ö
, FILE * 
out
, FILE * 
îr
);

76 
lua_ª£t_°dfûes
(
lua_Sèã
 * 
L
);

77 
execuã_lua_°rög
(
lua_Sèã
 * 
L
, * 
°r
);

78 
execuã_lua_˛o£
(
lua_Sèã
 * 
L
);

81 
	$_sockë_›í
(
luaSîvî_t
 * 
pSîvî
)

83 i‡–
pSîvî
 !
NULL
 ) {

84 
pSîvî
->
ö
 = 
	`fd›í
’Sîvî->
˛õ¡_sockë
, "r");

85 
pSîvî
->
out
 = 
	`fd›í
’Sîvî->
˛õ¡_sockë
, "w");

86 
pSîvî
->
îr
 = 
	`fd›í
’Sîvî->
˛õ¡_sockë
, "w");

88 
	}
}

91 
	$_sockë_˛o£
(
luaSîvî_t
 * 
pSîvî
)

93 i‡–
pSîvî
 !
NULL
 ) {

94 
	`f˛o£
(
pSîvî
->
ö
);

95 
	`f˛o£
(
pSîvî
->
out
);

96 
	`f˛o£
(
pSîvî
->
îr
);

98 
	}
}

101 
	$_gë_°dout
(* 
¨g
)

103 
luaSîvî_t
 * 
s
;

105 i‡–
¨g
 =
NULL
 )

106  
°dout
;

107 
s
 = 
	`luaL_gë¥iv©e
(
¨g
);

108 i‡–(
s
 =
NULL
Ë|| (s->
out
 == NULL) )

109  
°dout
;

110  
s
->
out
;

111 
	}
}

114 
	$_gë_°dö
(* 
¨g
)

116 
luaSîvî_t
 * 
s
;

118 i‡–
¨g
 =
NULL
 )

119  
°dö
;

120 
s
 = 
	`luaL_gë¥iv©e
(
¨g
);

121 i‡–(
s
 =
NULL
Ë|| (s->
ö
 == NULL) )

122  
°dö
;

123  
s
->
ö
;

124 
	}
}

127 
	$_gë_°dîr
(* 
¨g
)

129 
luaSîvî_t
 * 
s
;

131 i‡–
¨g
 =
NULL
 )

132  
°dîr
;

133 
s
 = 
	`luaL_gë¥iv©e
(
¨g
);

134 i‡–(
s
 =
NULL
Ë|| (s->
îr
 == NULL) )

135  
°dîr
;

136  
s
->
îr
;

137 
	}
}

140 
	$_£t_°dfûes
(
lua_Sèã
 * 
L
, 
luaSîvî_t
 * 
pSîvî
)

142 
	`lua_£t_°dfûes
(
L
, 
pSîvî
->
ö
,ÖSîvî->
out
,ÖSîvî->
îr
);

143 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

144 
	}
}

147 
	$_ª£t_°dfûes
(
lua_Sèã
 * 
L
)

149 
	`sig«l
(
SIGPIPE
, 
SIG_DFL
);

150 
	`lua_ª£t_°dfûes
(
L
);

151 
	}
}

166 
	$¥o˚ss_£rvî_ªque°s
–
luaSîvî_t
 * 
pSîvî
 )

168 
sockaddr_ö
 
ùaddr
;

169 
sockÀn_t
 
Àn
;

171 
pSîvî
->
˛õ¡_sockë
 = -1;

173 
Àn
 = (
sockaddr_ö
);

174 i‡–(
pSîvî
->
˛õ¡_sockë
 = 
	`ac˚±
’Sîvî->
£rvî_sockë
, (
sockaddr
 *)&
ùaddr
, &
Àn
)) < 0) {

175 
	`≥º‹
("accept failed");

179 i‡–
pSîvî
->
˛õ¡_sockë
 > 0 ) {

181 
	`_sockë_›í
(
pSîvî
);

182 
	`lua_shñl
(
pSîvî
);

183 
	`_sockë_˛o£
(
pSîvî
);

185 
	`˛o£
(
pSîvî
->
˛õ¡_sockë
);

186 
pSîvî
->
˛õ¡_sockë
 = -1;

190 i‡–
pSîvî
->
£rvî_sockë
 > 0 ) {

191 
	`˛o£
(
pSîvî
->
£rvî_sockë
);

192 
pSîvî
->
£rvî_sockë
 = -1;

194 
	}
}

209 
	$£rvî_¸óã
–* 
¨g
 )

211 
luaSîvî_t
 * 
pSîvî
 = (luaSîvî_à*)
¨g
;

212 * 
îr_msg
 = 
NULL
;

213 
sockaddr_ö
 
ùaddr
;

214 
ho°ít
 * 
pHo°
;

215 
lögî
 = 1;

217 
îr_msg
 = "gethostbyname failed";

218 if–(
pHo°
 = 
	`gëho°by«me
(
pSîvî
->
ho°«me
)Ë=
NULL
 )

219 
îr‹_exô
;

221 
îr_msg
 = "Socket create failed";

222 i‡–(
pSîvî
->
£rvî_sockë
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0)) < 0 )

223 
îr‹_exô
;

225 
	`mem£t
(&
ùaddr
, 0, (ipaddr));

226 
ùaddr
.
sö_Ámûy
 = 
AF_INET
;

227 
ùaddr
.
sö_p‹t
 = 
	`ht⁄s
(
pSîvî
->
sockë_p‹t
);

228 
ùaddr
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

230 
îr_msg
 = "Setsockopt failed";

231 i‡(
	`£tsock›t
(
pSîvî
->
£rvî_sockë
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
lögî
, (linger)) == -1)

232 
îr‹_exô
;

234 
îr_msg
 = "Bind failed";

235 i‡(
	`böd
(
pSîvî
->
£rvî_sockë
, (
sockaddr
 *Ë&
ùaddr
, (ipaddr)) < 0)

236 
îr‹_exô
;

238 
îr_msg
 = "Listen failed";

239 i‡(
	`li°í
(
pSîvî
->
£rvî_sockë
, 5) < 0)

240 
îr‹_exô
;

242 
	`¥o˚ss_£rvî_ªque°s
(
pSîvî
);

246 
îr‹_exô
:

247 i‡–
pSîvî
->
£rvî_sockë
 != -1 )

248 
	`˛o£
–
pSîvî
->
£rvî_sockë
 );

249 
pSîvî
->
£rvî_sockë
 = -1;

250 i‡–
îr_msg
 ) {

251 
	`≥º‹
(
îr_msg
);

252 
	`fÊush
(
°dout
);

255 
	}
}

270 
	$lua_£rvî
(* 
¨g
) {

272 
	`±hªad_dëach
–
	`±hªad_£lf
() );

274 
	`£rvî_¸óã
((
luaSîvî_t
 *)
¨g
);

276  
NULL
;

277 
	}
}

292 
	$lua_öô_sockë
(
lua_Sèã
 * 
L
, 
±hªad_t
 * 
±hªad
, * 
ho°«me
, 
p‹t
)

294 
luaSîvî_t
 * 
p
;

295 
r
;

297 
p
 = 
	`luaL_gë¥iv©e
(
L
);

298 i‡–
p
 =
NULL
 )

301 
p
->
˛õ¡_sockë
 = -1;

302 
p
->
£rvî_sockë
 = -1;

303 
p
->
sockë_p‹t
 = 
p‹t
;

304 
p
->
ho°«me
 = 
	`°rdup
( (hostname) ? hostname : "localhost" );

307 
r
 = 
	`±hªad_¸óã
(
±hªad
, 
NULL
, 
lua_£rvî
, 
p
);

308 
	`as£π
–
r
 == 0 );

310 
	}
}

325 
	$lua_¸óã_ö°™˚
()

327 
luaSîvî_t
 * 
p
;

328 
lua_Sèã
 * 
L
;

330 
p
 = (
luaSîvî_t
 *)
	`ˇŒoc
(1, (luaServer_t));

331 i‡(
p
 =
NULL
)

332  
NULL
;

334 
L
 = 
	`luaL_√w°©e
();

335 i‡–
L
 =
NULL
 ) {

336 
	`‰ì
(
p
);

337  
NULL
;

340 
p
->
˛õ¡_sockë
 = -1;

341 
p
->
£rvî_sockë
 = -1;

342 
p
->
ö
 = 
NULL
;

343 
p
->
out
 = 
NULL
;

344 
p
->
îr
 = 
NULL
;

346 
	`luaL_£çriv©e
(
L
, 
p
);

349 
	`lua_wrôe°rög
(
LUA_COPYRIGHT
, 
	`°æí
(LUA_COPYRIGHT));

350 
	`lua_wrôñöe
();

352 
	`lua_√wlibs_öô
(
L
);

354 
l°©e
 = 
L
;

356  
L
;

357 
	}
}

	@lib/lua/lua-5.3.4/src/lua-socket.h

9 #i‚de‡
_LUA_SOCKET_H_


10 
	#_LUA_SOCKET_H_


	)

11 
	~<±hªad.h
>

12 
	~"lua.h
"

15 
	#MAX_LUA_BUFFER_SIZE
 1024

	)

17 
	sluaSîvî_s
 {

18 
öt32_t
 
	m£rvî_sockë
;

19 
öt32_t
 
	m˛õ¡_sockë
;

20 
öt32_t
 
	msockë_p‹t
;

21 * 
	mout
, * 
	mö
, * 
	mîr
;

22 * 
	mho°«me
;

23 
	md©a
[
MAX_LUA_BUFFER_SIZE
];

24 } 
	tluaSîvî_t
;

26 
_lua_›ílib
(
lua_Sèã
 *
L
);

27 * 
_gë_°dout
(* 
¨g
);

28 * 
_gë_°dö
(* 
¨g
);

29 * 
_gë_°dîr
(* 
¨g
);

30 
_£t_°dfûes
(
lua_Sèã
 * 
L
, 
luaSîvî_t
 * 
pSîvî
);

31 
_ª£t_°dfûes
(
lua_Sèã
 * 
L
);

33 
lua_öô_sockë
(
lua_Sèã
 * 
L
, 
±hªad_t
 * 
±hªad
, * 
ho°«me
, 
p‹t
);

34 * 
lua_¸óã_ö°™˚
();

	@lib/lua/lua-5.3.4/src/lua.c

7 
	#lua_c


	)

9 
	~"Õªfix.h
"

12 
	~<sig«l.h
>

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<°rög.h
>

17 
	~"lua.h
"

19 
	~"œuxlib.h
"

20 
	~"luÆib.h
"

24 #i‡!
deföed
(
LUA_PROMPT
)

25 
	#LUA_PROMPT
 "> "

	)

26 
	#LUA_PROMPT2
 ">> "

	)

29 #i‡!
deföed
(
LUA_PROGNAME
)

30 
	#LUA_PROGNAME
 "lua"

	)

33 #i‡!
deföed
(
LUA_MAXINPUT
)

34 
	#LUA_MAXINPUT
 512

	)

37 #i‡!
deföed
(
LUA_INIT_VAR
)

38 
	#LUA_INIT_VAR
 "LUA_INIT"

	)

41 
	#LUA_INITVARVERSION
 
LUA_INIT_VAR
 
LUA_VERSUFFIX


	)

48 #i‡!
deföed
(
lua_°dö_is_ây
)

50 #i‡
deföed
(
LUA_USE_POSIX
)

52 
	~<uni°d.h
>

53 
	#lua_°dö_is_ây
(Ë
	`ißây
(0)

	)

55 #ñi‡
deföed
(
LUA_USE_WINDOWS
)

57 
	~<io.h
>

58 
	~<wödows.h
>

60 
	#lua_°dö_is_ây
(Ë
	`_ißây
(
	`_fûío
(
°dö
))

	)

65 
	#lua_°dö_is_ây
(Ë1

	)

78 #i‡!
deföed
(
lua_ªadlöe
)

80 #i‡
deföed
(
LUA_USE_READLINE
)

82 
	~<ªadlöe/ªadlöe.h
>

83 
	~<ªadlöe/hi°‹y.h
>

84 
	#lua_ªadlöe
(
L
,
b
,
p
Ë(()L, ((b)=
	`ªadlöe
’)Ë!
NULL
)

	)

85 
	#lua_ßvñöe
(
L
,
löe
Ë(()L, 
	`add_hi°‹y
÷öe))

	)

86 
	#lua_‰ìlöe
(
L
,
b
Ë(()L, 
	`‰ì
(b))

	)

90 
	#lua_ªadlöe
(
L
,
b
,
p
) \

91 (()
L
, 
	`Âuts
(
p
, 
°dout
), 
	`fÊush
(stdout), \

92 
	`fgës
(
b
, 
LUA_MAXINPUT
, 
°dö
Ë!
NULL
Ë

	)

93 
	#lua_ßvñöe
(
L
,
löe
Ë{ ()L; (Óöe; }

	)

94 
	#lua_‰ìlöe
(
L
,
b
Ë{ ()L; ()b; }

	)

103 
lua_Sèã
 *
	gglobÆL
 = 
NULL
;

105 c⁄° *
	g¥og«me
 = 
LUA_PROGNAME
;

111 
	$l°›
 (
lua_Sèã
 *
L
, 
lua_Debug
 *
¨
) {

112 ()
¨
;

113 
	`lua_£thook
(
L
, 
NULL
, 0, 0);

114 
	`luaL_îr‹
(
L
, "interrupted!");

115 
	}
}

124 
	$œ˘i⁄
 (
i
) {

125 
	`sig«l
(
i
, 
SIG_DFL
);

126 
	`lua_£thook
(
globÆL
, 
l°›
, 
LUA_MASKCALL
 | 
LUA_MASKRET
 | 
LUA_MASKCOUNT
, 1);

127 
	}
}

130 
	$¥öt_ußge
 (c⁄° *
bad›ti⁄
) {

131 
	`lua_wrôe°rögîr‹
("%s: ", 
¥og«me
);

132 i‡(
bad›ti⁄
[1] == 'e' || badoption[1] == 'l')

133 
	`lua_wrôe°rögîr‹
("'%s'Çìd†¨gumít\n", 
bad›ti⁄
);

135 
	`lua_wrôe°rögîr‹
("uƒecognized o±i⁄ '%s'\n", 
bad›ti⁄
);

136 
	`lua_wrôe°rögîr‹
(

147 
¥og«me
);

148 
	}
}

155 
	$l_mesßge
 (c⁄° *
≤ame
, c⁄° *
msg
) {

156 i‡(
≤ame
Ë
	`lua_wrôe°rögîr‹
("%s: ",Öname);

157 
	`lua_wrôe°rögîr‹
("%s\n", 
msg
);

158 
	}
}

166 
	$ªp‹t
 (
lua_Sèã
 *
L
, 
°©us
) {

167 i‡(
°©us
 !
LUA_OK
) {

168 c⁄° *
msg
 = 
	`lua_to°rög
(
L
, -1);

169 
	`l_mesßge
(
¥og«me
, 
msg
);

170 
	`lua_p›
(
L
, 1);

172  
°©us
;

173 
	}
}

179 
	$msgh™dÀr
 (
lua_Sèã
 *
L
) {

180 c⁄° *
msg
 = 
	`lua_to°rög
(
L
, 1);

181 i‡(
msg
 =
NULL
) {

182 i‡(
	`luaL_ˇŒmëa
(
L
, 1, "__tostring") &&

183 
	`lua_ty≥
(
L
, -1Ë=
LUA_TSTRING
)

186 
msg
 = 
	`lua_pushf°rög
(
L
, "(error object isá %s value)",

187 
	`luaL_ty≥«me
(
L
, 1));

189 
	`luaL_åa˚back
(
L
, L, 
msg
, 1);

191 
	}
}

198 
	$doˇŒ
 (
lua_Sèã
 *
L
, 
«rg
, 
ƒes
) {

199 
°©us
;

200 
ba£
 = 
	`lua_gët›
(
L
Ë- 
«rg
;

201 
	`lua_pushcfun˘i⁄
(
L
, 
msgh™dÀr
);

202 
	`lua_ö£π
(
L
, 
ba£
);

203 
globÆL
 = 
L
;

204 
	`sig«l
(
SIGINT
, 
œ˘i⁄
);

205 
°©us
 = 
	`lua_pˇŒ
(
L
, 
«rg
, 
ƒes
, 
ba£
);

206 
	`sig«l
(
SIGINT
, 
SIG_DFL
);

207 
	`lua_ªmove
(
L
, 
ba£
);

208  
°©us
;

209 
	}
}

212 
	$¥öt_vîsi⁄
 () {

213 
	`lua_wrôe°rög
(
LUA_COPYRIGHT
, 
	`°æí
(LUA_COPYRIGHT));

214 
	`lua_wrôñöe
();

215 
	}
}

226 
	$¸óã¨gèbÀ
 (
lua_Sèã
 *
L
, **
¨gv
, 
¨gc
, 
s¸ùt
) {

227 
i
, 
«rg
;

228 i‡(
s¸ùt
 =
¨gc
) script = 0;

229 
«rg
 = 
¨gc
 - (
s¸ùt
 + 1);

230 
	`lua_¸óãèbÀ
(
L
, 
«rg
, 
s¸ùt
 + 1);

231 
i
 = 0; i < 
¨gc
; i++) {

232 
	`lua_push°rög
(
L
, 
¨gv
[
i
]);

233 
	`lua_øw£ti
(
L
, -2, 
i
 - 
s¸ùt
);

235 
	`lua_£tglobÆ
(
L
, "arg");

236 
	}
}

239 
	$dochunk
 (
lua_Sèã
 *
L
, 
°©us
) {

240 i‡(
°©us
 =
LUA_OK
Ë°©u†
	`doˇŒ
(
L
, 0, 0);

241  
	`ªp‹t
(
L
, 
°©us
);

242 
	}
}

245 
	$dofûe
 (
lua_Sèã
 *
L
, c⁄° *
«me
) {

246  
	`dochunk
(
L
, 
	`luaL_lﬂdfûe
(L, 
«me
));

247 
	}
}

250 
	$do°rög
 (
lua_Sèã
 *
L
, c⁄° *
s
, c⁄° *
«me
) {

251  
	`dochunk
(
L
, 
	`luaL_lﬂdbuf„r
(L, 
s
, 
	`°æí
(s), 
«me
));

252 
	}
}

259 
	$dﬁibøry
 (
lua_Sèã
 *
L
, c⁄° *
«me
) {

260 
°©us
;

261 
	`lua_gëglobÆ
(
L
, "require");

262 
	`lua_push°rög
(
L
, 
«me
);

263 
°©us
 = 
	`doˇŒ
(
L
, 1, 1);

264 i‡(
°©us
 =
LUA_OK
)

265 
	`lua_£tglobÆ
(
L
, 
«me
);

266  
	`ªp‹t
(
L
, 
°©us
);

267 
	}
}

273 c⁄° *
	$gë_¥om±
 (
lua_Sèã
 *
L
, 
fú°löe
) {

274 c⁄° *
p
;

275 
	`lua_gëglobÆ
(
L
, 
fú°löe
 ? "_PROMPT" : "_PROMPT2");

276 
p
 = 
	`lua_to°rög
(
L
, -1);

277 i‡(
p
 =
NULL
Ë∞(
fú°löe
 ? 
LUA_PROMPT
 : 
LUA_PROMPT2
);

278  
p
;

279 
	}
}

282 
	#EOFMARK
 "<eof>"

	)

283 
	#m¨kÀn
 ((
EOFMARK
)/(Ë- 1)

	)

291 
	$öcom∂ëe
 (
lua_Sèã
 *
L
, 
°©us
) {

292 i‡(
°©us
 =
LUA_ERRSYNTAX
) {

293 
size_t
 
lmsg
;

294 c⁄° *
msg
 = 
	`lua_tﬁ°rög
(
L
, -1, &
lmsg
);

295 i‡(
lmsg
 >
m¨kÀn
 && 
	`°rcmp
(
msg
 +Ümsg - m¨kÀn, 
EOFMARK
) == 0) {

296 
	`lua_p›
(
L
, 1);

301 
	}
}

307 
	$pushlöe
 (
lua_Sèã
 *
L
, 
fú°löe
) {

308 
buf„r
[
LUA_MAXINPUT
];

309 *
b
 = 
buf„r
;

310 
size_t
 
l
;

311 c⁄° *
¥mt
 = 
	`gë_¥om±
(
L
, 
fú°löe
);

312 
ªad°©us
 = 
	`lua_ªadlöe
(
L
, 
b
, 
¥mt
);

313 i‡(
ªad°©us
 == 0)

315 
	`lua_p›
(
L
, 1);

316 
l
 = 
	`°æí
(
b
);

317 i‡(
l
 > 0 && 
b
[l-1] == '\n')

318 
b
[--
l
] = '\0';

319 i‡(
fú°löe
 && 
b
[0] == '=')

320 
	`lua_pushf°rög
(
L
, "ªtu∫ %s", 
b
 + 1);

322 
	`lua_pushl°rög
(
L
, 
b
, 
l
);

323 
	`lua_‰ìlöe
(
L
, 
b
);

325 
	}
}

332 
	$addªtu∫
 (
lua_Sèã
 *
L
) {

333 c⁄° *
löe
 = 
	`lua_to°rög
(
L
, -1);

334 c⁄° *
ªéöe
 = 
	`lua_pushf°rög
(
L
, "ªtu∫ %s;", 
löe
);

335 
°©us
 = 
	`luaL_lﬂdbuf„r
(
L
, 
ªéöe
, 
	`°æí
(retline), "=stdin");

336 i‡(
°©us
 =
LUA_OK
) {

337 
	`lua_ªmove
(
L
, -2);

338 i‡(
löe
[0] != '\0')

339 
	`lua_ßvñöe
(
L
, 
löe
);

342 
	`lua_p›
(
L
, 2);

343  
°©us
;

344 
	}
}

350 
	$mu…ûöe
 (
lua_Sèã
 *
L
) {

352 
size_t
 
Àn
;

353 c⁄° *
löe
 = 
	`lua_tﬁ°rög
(
L
, 1, &
Àn
);

354 
°©us
 = 
	`luaL_lﬂdbuf„r
(
L
, 
löe
, 
Àn
, "=stdin");

355 i‡(!
	`öcom∂ëe
(
L
, 
°©us
Ë|| !
	`pushlöe
(L, 0)) {

356 
	`lua_ßvñöe
(
L
, 
löe
);

357  
°©us
;

359 
	`lua_pushlôîÆ
(
L
, "\n");

360 
	`lua_ö£π
(
L
, -2);

361 
	`lua_c⁄ˇt
(
L
, 3);

363 
	}
}

372 
	$lﬂdlöe
 (
lua_Sèã
 *
L
) {

373 
°©us
;

374 
	`lua_£â›
(
L
, 0);

375 i‡(!
	`pushlöe
(
L
, 1))

377 i‡((
°©us
 = 
	`addªtu∫
(
L
)Ë!
LUA_OK
)

378 
°©us
 = 
	`mu…ûöe
(
L
);

379 
	`lua_ªmove
(
L
, 1);

380 
	`lua_as£π
(
	`lua_gët›
(
L
) == 1);

381  
°©us
;

382 
	}
}

388 
	$l_¥öt
 (
lua_Sèã
 *
L
) {

389 
n
 = 
	`lua_gët›
(
L
);

390 i‡(
n
 > 0) {

391 
	`luaL_check°ack
(
L
, 
LUA_MINSTACK
, "too manyÑesultsÅoÖrint");

392 
	`lua_gëglobÆ
(
L
, "print");

393 
	`lua_ö£π
(
L
, 1);

394 i‡(
	`lua_pˇŒ
(
L
, 
n
, 0, 0Ë!
LUA_OK
)

395 
	`l_mesßge
(
¥og«me
, 
	`lua_pushf°rög
(
L
, "error calling 'print' (%s)",

396 
	`lua_to°rög
(
L
, -1)));

398 
	}
}

405 
	$doREPL
 (
lua_Sèã
 *
L
) {

406 
°©us
;

407 c⁄° *
ﬁd¥og«me
 = 
¥og«me
;

408 
¥og«me
 = 
NULL
;

409 (
°©us
 = 
	`lﬂdlöe
(
L
)) != -1) {

410 i‡(
°©us
 =
LUA_OK
)

411 
°©us
 = 
	`doˇŒ
(
L
, 0, 
LUA_MULTRET
);

412 i‡(
°©us
 =
LUA_OK
Ë
	`l_¥öt
(
L
);

413 
	`ªp‹t
(
L
, 
°©us
);

415 
	`lua_£â›
(
L
, 0);

416 
	`lua_wrôñöe
();

417 
¥og«me
 = 
ﬁd¥og«me
;

418 
	}
}

424 
	$push¨gs
 (
lua_Sèã
 *
L
) {

425 
i
, 
n
;

426 i‡(
	`lua_gëglobÆ
(
L
, "¨g"Ë!
LUA_TTABLE
)

427 
	`luaL_îr‹
(
L
, "'arg' isÇotáÅable");

428 
n
 = ()
	`luaL_Àn
(
L
, -1);

429 
	`luaL_check°ack
(
L
, 
n
 + 3, "too manyárgumentsÅo script");

430 
i
 = 1; i <
n
; i++)

431 
	`lua_øwgëi
(
L
, -
i
, i);

432 
	`lua_ªmove
(
L
, -
i
);

433  
n
;

434 
	}
}

437 
	$h™dÀ_s¸ùt
 (
lua_Sèã
 *
L
, **
¨gv
) {

438 
°©us
;

439 c⁄° *
‚ame
 = 
¨gv
[0];

440 i‡(
	`°rcmp
(
‚ame
, "-"Ë=0 && såcmp(
¨gv
[-1], "--") != 0)

441 
‚ame
 = 
NULL
;

442 
°©us
 = 
	`luaL_lﬂdfûe
(
L
, 
‚ame
);

443 i‡(
°©us
 =
LUA_OK
) {

444 
n
 = 
	`push¨gs
(
L
);

445 
°©us
 = 
	`doˇŒ
(
L
, 
n
, 
LUA_MULTRET
);

447  
	`ªp‹t
(
L
, 
°©us
);

448 
	}
}

453 
	#has_îr‹
 1

	)

454 
	#has_i
 2

	)

455 
	#has_v
 4

	)

456 
	#has_e
 8

	)

457 
	#has_E
 16

	)

465 
	$cﬁÀ˘¨gs
 (**
¨gv
, *
fú°
) {

466 
¨gs
 = 0;

467 
i
;

468 
i
 = 1; 
¨gv
[i] !
NULL
; i++) {

469 *
fú°
 = 
i
;

470 i‡(
¨gv
[
i
][0] != '-')

471  
¨gs
;

472 
¨gv
[
i
][1]) {

474 i‡(
¨gv
[
i
][2] != '\0')

475  
has_îr‹
;

476 *
fú°
 = 
i
 + 1;

477  
¨gs
;

479  
¨gs
;

481 i‡(
¨gv
[
i
][2] != '\0')

482  
has_îr‹
;

483 
¨gs
 |
has_E
;

486 
¨gs
 |
has_i
;

488 i‡(
¨gv
[
i
][2] != '\0')

489  
has_îr‹
;

490 
¨gs
 |
has_v
;

493 
¨gs
 |
has_e
;

495 i‡(
¨gv
[
i
][2] == '\0') {

496 
i
++;

497 i‡(
¨gv
[
i
] =
NULL
 ||árgv[i][0] == '-')

498  
has_îr‹
;

502  
has_îr‹
;

505 *
fú°
 = 
i
;

506  
¨gs
;

507 
	}
}

514 
	$ru«rgs
 (
lua_Sèã
 *
L
, **
¨gv
, 
n
) {

515 
i
;

516 
i
 = 1; i < 
n
; i++) {

517 
›ti⁄
 = 
¨gv
[
i
][1];

518 
	`lua_as£π
(
¨gv
[
i
][0] == '-');

519 i‡(
›ti⁄
 == 'e' || option == 'l') {

520 
°©us
;

521 c⁄° *
exåa
 = 
¨gv
[
i
] + 2;

522 i‡(*
exåa
 ='\0'Ëexå®
¨gv
[++
i
];

523 
	`lua_as£π
(
exåa
 !
NULL
);

524 
°©us
 = (
›ti⁄
 == 'e')

525 ? 
	`do°rög
(
L
, 
exåa
, "=(commandÜine)")

526 : 
	`dﬁibøry
(
L
, 
exåa
);

527 i‡(
°©us
 !
LUA_OK
)  0;

531 
	}
}

535 
	$h™dÀ_luaöô
 (
lua_Sèã
 *
L
) {

536 c⁄° *
«me
 = "=" 
LUA_INITVARVERSION
;

537 c⁄° *
öô
 = 
	`gëív
(
«me
 + 1);

538 i‡(
öô
 =
NULL
) {

539 
«me
 = "=" 
LUA_INIT_VAR
;

540 
öô
 = 
	`gëív
(
«me
 + 1);

542 i‡(
öô
 =
NULL
Ë 
LUA_OK
;

543 i‡(
öô
[0] == '@')

544  
	`dofûe
(
L
, 
öô
+1);

546  
	`do°rög
(
L
, 
öô
, 
«me
);

547 
	}
}

554 
	$pmaö
 (
lua_Sèã
 *
L
) {

555 
¨gc
 = ()
	`lua_toöãgî
(
L
, 1);

556 **
¨gv
 = (**)
	`lua_tou£rd©a
(
L
, 2);

557 
s¸ùt
;

558 
¨gs
 = 
	`cﬁÀ˘¨gs
(
¨gv
, &
s¸ùt
);

559 
	`luaL_checkvîsi⁄
(
L
);

560 i‡(
¨gv
[0] &&árgv[0][0]Ë
¥og«me
 =árgv[0];

561 i‡(
¨gs
 =
has_îr‹
) {

562 
	`¥öt_ußge
(
¨gv
[
s¸ùt
]);

565 i‡(
¨gs
 & 
has_v
)

566 
	`¥öt_vîsi⁄
();

567 i‡(
¨gs
 & 
has_E
) {

568 
	`lua_pushboﬁón
(
L
, 1);

569 
	`lua_£tfõld
(
L
, 
LUA_REGISTRYINDEX
, "LUA_NOENV");

571 
	`luaL_›ílibs
(
L
);

572 
	`¸óã¨gèbÀ
(
L
, 
¨gv
, 
¨gc
, 
s¸ùt
);

573 i‡(!(
¨gs
 & 
has_E
)) {

574 i‡(
	`h™dÀ_luaöô
(
L
Ë!
LUA_OK
)

577 i‡(!
	`ru«rgs
(
L
, 
¨gv
, 
s¸ùt
))

579 i‡(
s¸ùt
 < 
¨gc
 &&

580 
	`h™dÀ_s¸ùt
(
L
, 
¨gv
 + 
s¸ùt
Ë!
LUA_OK
)

582 i‡(
¨gs
 & 
has_i
)

583 
	`doREPL
(
L
);

584 i‡(
s¸ùt
 =
¨gc
 && !(
¨gs
 & (
has_e
 | 
has_v
))) {

585 i‡(
	`lua_°dö_is_ây
()) {

586 
	`¥öt_vîsi⁄
();

587 
	`doREPL
(
L
);

589 
	`dofûe
(
L
, 
NULL
);

591 
	`lua_pushboﬁón
(
L
, 1);

593 
	}
}

596 
	$maö
 (
¨gc
, **
¨gv
) {

597 
°©us
, 
ªsu…
;

598 
lua_Sèã
 *
L
 = 
	`luaL_√w°©e
();

599 i‡(
L
 =
NULL
) {

600 
	`l_mesßge
(
¨gv
[0], "cannot create state:ÇotÉnough memory");

601  
EXIT_FAILURE
;

603 
	`lua_pushcfun˘i⁄
(
L
, &
pmaö
);

604 
	`lua_pushöãgî
(
L
, 
¨gc
);

605 
	`lua_pushlightu£rd©a
(
L
, 
¨gv
);

606 
°©us
 = 
	`lua_pˇŒ
(
L
, 2, 1, 0);

607 
ªsu…
 = 
	`lua_toboﬁón
(
L
, -1);

608 
	`ªp‹t
(
L
, 
°©us
);

609 
	`lua_˛o£
(
L
);

610  (
ªsu…
 && 
°©us
 =
LUA_OK
Ë? 
EXIT_SUCCESS
 : 
EXIT_FAILURE
;

611 
	}
}

	@lib/lua/lua-5.3.4/src/lua.h

9 #i‚de‡
lua_h


10 
	#lua_h


	)

12 
	~<°d¨g.h
>

13 
	~<°ddef.h
>

16 
	~"luac⁄f.h
"

19 
	#LUA_VERSION_MAJOR
 "5"

	)

20 
	#LUA_VERSION_MINOR
 "3"

	)

21 
	#LUA_VERSION_NUM
 503

	)

22 
	#LUA_VERSION_RELEASE
 "4"

	)

24 
	#LUA_VERSION
 "Lu®" 
LUA_VERSION_MAJOR
 "." 
LUA_VERSION_MINOR


	)

25 
	#LUA_RELEASE
 
LUA_VERSION
 "." 
LUA_VERSION_RELEASE


	)

26 
	#LUA_COPYRIGHT
 
LUA_RELEASE
 " C›yrighà(CË1994-2017 Lua.‹g, PUC-Rio"

	)

27 
	#LUA_AUTHORS
 "R. Iîußlimschy, L. H. dêFigueúedo, W. Cñes"

	)

31 
	#LUA_SIGNATURE
 "\x1bLua"

	)

34 
	#LUA_MULTRET
 (-1)

	)

42 
	#LUA_REGISTRYINDEX
 (-
LUAI_MAXSTACK
 - 1000)

	)

43 
	#lua_upvÆueödex
(
i
Ë(
LUA_REGISTRYINDEX
 - (i))

	)

47 
	#LUA_OK
 0

	)

48 
	#LUA_YIELD
 1

	)

49 
	#LUA_ERRRUN
 2

	)

50 
	#LUA_ERRSYNTAX
 3

	)

51 
	#LUA_ERRMEM
 4

	)

52 
	#LUA_ERRGCMM
 5

	)

53 
	#LUA_ERRERR
 6

	)

56 
lua_Sèã
 
	tlua_Sèã
;

62 
	#LUA_TNONE
 (-1)

	)

64 
	#LUA_TNIL
 0

	)

65 
	#LUA_TBOOLEAN
 1

	)

66 
	#LUA_TLIGHTUSERDATA
 2

	)

67 
	#LUA_TNUMBER
 3

	)

68 
	#LUA_TSTRING
 4

	)

69 
	#LUA_TTABLE
 5

	)

70 
	#LUA_TFUNCTION
 6

	)

71 
	#LUA_TUSERDATA
 7

	)

72 
	#LUA_TTHREAD
 8

	)

74 
	#LUA_NUMTAGS
 9

	)

79 
	#LUA_MINSTACK
 20

	)

83 
	#LUA_RIDX_MAINTHREAD
 1

	)

84 
	#LUA_RIDX_GLOBALS
 2

	)

85 
	#LUA_RIDX_LAST
 
LUA_RIDX_GLOBALS


	)

89 
LUA_NUMBER
 
	tlua_Numbî
;

93 
LUA_INTEGER
 
	tlua_I¡egî
;

96 
LUA_UNSIGNED
 
	tlua_Unsig√d
;

99 
LUA_KCONTEXT
 
	tlua_KC⁄ãxt
;

105 (*
	tlua_CFun˘i⁄
Ë(
	tlua_Sèã
 *
	tL
);

110 (*
	tlua_KFun˘i⁄
Ë(
	tlua_Sèã
 *
	tL
, 
	t°©us
, 
	tlua_KC⁄ãxt
 
	t˘x
);

116 c⁄° * (*
	tlua_Ródî
Ë(
	tlua_Sèã
 *
	tL
, *
	tud
, 
	tsize_t
 *
	tsz
);

118 (*
	tlua_Wrôî
Ë(
	tlua_Sèã
 *
	tL
, c⁄° *
	tp
, 
	tsize_t
 
	tsz
, *
	tud
);

124 * (*
	tlua_AŒoc
Ë(*
	tud
, *
	t±r
, 
	tsize_t
 
	tosize
, size_à
	tnsize
);

131 #i‡
	`deföed
(
LUA_USER_H
)

132 #ö˛udê
LUA_USER_H


139 c⁄° 
lua_idít
[];

145 
LUA_API
 
lua_Sèã
 *(
lua_√w°©e
Ë(
lua_AŒoc
 
f
, *
ud
);

146 
LUA_API
 (
lua_˛o£
Ë(
lua_Sèã
 *
L
);

147 
LUA_API
 
lua_Sèã
 *(
lua_√wthªad
Ë÷ua_Sèã *
L
);

149 
LUA_API
 
	$lua_CFun˘i⁄
 (
lua_©∑nic
Ë(
lua_Sèã
 *
L
, 
lua_CFun˘i⁄
 
∑nicf
);

152 
LUA_API
 c⁄° 
lua_Numbî
 *(
lua_vîsi⁄
Ë(
lua_Sèã
 *
L
);

158 
LUA_API
 (
lua_absödex
Ë(
lua_Sèã
 *
L
, 
idx
);

159 
LUA_API
 (
lua_gët›
Ë(
lua_Sèã
 *
L
);

160 
LUA_API
 (
lua_£â›
Ë(
lua_Sèã
 *
L
, 
idx
);

161 
LUA_API
 (
lua_pushvÆue
Ë(
lua_Sèã
 *
L
, 
idx
);

162 
LUA_API
 (
lua_rŸ©e
Ë(
lua_Sèã
 *
L
, 
idx
, 
n
);

163 
LUA_API
 (
lua_c›y
Ë(
lua_Sèã
 *
L
, 
‰omidx
, 
toidx
);

164 
LUA_API
 (
lua_check°ack
Ë(
lua_Sèã
 *
L
, 
n
);

166 
LUA_API
 (
lua_xmove
Ë(
lua_Sèã
 *
‰om
,Üua_Sèã *
to
, 
n
);

173 
LUA_API
 (
lua_i¢umbî
Ë(
lua_Sèã
 *
L
, 
idx
);

174 
LUA_API
 (
lua_is°rög
Ë(
lua_Sèã
 *
L
, 
idx
);

175 
LUA_API
 (
lua_iscfun˘i⁄
Ë(
lua_Sèã
 *
L
, 
idx
);

176 
LUA_API
 (
lua_isöãgî
Ë(
lua_Sèã
 *
L
, 
idx
);

177 
LUA_API
 (
lua_isu£rd©a
Ë(
lua_Sèã
 *
L
, 
idx
);

178 
LUA_API
 (
lua_ty≥
Ë(
lua_Sèã
 *
L
, 
idx
);

179 
LUA_API
 c⁄° *(
lua_ty≥«me
Ë(
lua_Sèã
 *
L
, 
ç
);

181 
LUA_API
 
	$lua_Numbî
 (
lua_t⁄umbîx
Ë(
lua_Sèã
 *
L
, 
idx
, *
i¢um
);

182 
LUA_API
 
	$lua_I¡egî
 (
lua_toöãgîx
Ë(
lua_Sèã
 *
L
, 
idx
, *
i¢um
);

183 
LUA_API
 (
lua_toboﬁón
Ë(
lua_Sèã
 *
L
, 
idx
);

184 
LUA_API
 c⁄° *(
lua_tﬁ°rög
Ë(
lua_Sèã
 *
L
, 
idx
, 
size_t
 *
Àn
);

185 
LUA_API
 
	$size_t
 (
lua_øwÀn
Ë(
lua_Sèã
 *
L
, 
idx
);

186 
LUA_API
 
	$lua_CFun˘i⁄
 (
lua_tocfun˘i⁄
Ë(
lua_Sèã
 *
L
, 
idx
);

187 
LUA_API
 *(
lua_tou£rd©a
Ë(
lua_Sèã
 *
L
, 
idx
);

188 
LUA_API
 
lua_Sèã
 *(
lua_tŸhªad
Ë÷ua_Sèã *
L
, 
idx
);

189 
LUA_API
 c⁄° *(
lua_t›oöãr
Ë(
lua_Sèã
 *
L
, 
idx
);

196 
	#LUA_OPADD
 0

	)

197 
	#LUA_OPSUB
 1

	)

198 
	#LUA_OPMUL
 2

	)

199 
	#LUA_OPMOD
 3

	)

200 
	#LUA_OPPOW
 4

	)

201 
	#LUA_OPDIV
 5

	)

202 
	#LUA_OPIDIV
 6

	)

203 
	#LUA_OPBAND
 7

	)

204 
	#LUA_OPBOR
 8

	)

205 
	#LUA_OPBXOR
 9

	)

206 
	#LUA_OPSHL
 10

	)

207 
	#LUA_OPSHR
 11

	)

208 
	#LUA_OPUNM
 12

	)

209 
	#LUA_OPBNOT
 13

	)

211 
LUA_API
 (
lua_¨ôh
Ë(
lua_Sèã
 *
L
, 
›
);

213 
	#LUA_OPEQ
 0

	)

214 
	#LUA_OPLT
 1

	)

215 
	#LUA_OPLE
 2

	)

217 
LUA_API
 (
lua_øwequÆ
Ë(
lua_Sèã
 *
L
, 
idx1
, 
idx2
);

218 
LUA_API
 (
lua_com∑ª
Ë(
lua_Sèã
 *
L
, 
idx1
, 
idx2
, 
›
);

224 
LUA_API
 (
lua_pushnû
Ë(
lua_Sèã
 *
L
);

225 
LUA_API
 (
lua_pushnumbî
Ë(
lua_Sèã
 *
L
, 
lua_Numbî
 
n
);

226 
LUA_API
 (
lua_pushöãgî
Ë(
lua_Sèã
 *
L
, 
lua_I¡egî
 
n
);

227 
LUA_API
 c⁄° *(
lua_pushl°rög
Ë(
lua_Sèã
 *
L
, c⁄° *
s
, 
size_t
 
Àn
);

228 
LUA_API
 c⁄° *(
lua_push°rög
Ë(
lua_Sèã
 *
L
, c⁄° *
s
);

229 
LUA_API
 c⁄° *(
lua_pushvf°rög
Ë(
lua_Sèã
 *
L
, c⁄° *
fmt
,

230 
va_li°
 
¨gp
);

231 
LUA_API
 c⁄° *(
lua_pushf°rög
Ë(
lua_Sèã
 *
L
, c⁄° *
fmt
, ...);

232 
LUA_API
 (
lua_pushc˛osuª
Ë(
lua_Sèã
 *
L
, 
lua_CFun˘i⁄
 
‚
, 
n
);

233 
LUA_API
 (
lua_pushboﬁón
Ë(
lua_Sèã
 *
L
, 
b
);

234 
LUA_API
 (
lua_pushlightu£rd©a
Ë(
lua_Sèã
 *
L
, *
p
);

235 
LUA_API
 (
lua_pushthªad
Ë(
lua_Sèã
 *
L
);

241 
LUA_API
 (
lua_gëglobÆ
Ë(
lua_Sèã
 *
L
, c⁄° *
«me
);

242 
LUA_API
 (
lua_gëèbÀ
Ë(
lua_Sèã
 *
L
, 
idx
);

243 
LUA_API
 (
lua_gëfõld
Ë(
lua_Sèã
 *
L
, 
idx
, c⁄° *
k
);

244 
LUA_API
 (
lua_gëi
Ë(
lua_Sèã
 *
L
, 
idx
, 
lua_I¡egî
 
n
);

245 
LUA_API
 (
lua_øwgë
Ë(
lua_Sèã
 *
L
, 
idx
);

246 
LUA_API
 (
lua_øwgëi
Ë(
lua_Sèã
 *
L
, 
idx
, 
lua_I¡egî
 
n
);

247 
LUA_API
 (
lua_øwgëp
Ë(
lua_Sèã
 *
L
, 
idx
, c⁄° *
p
);

249 
LUA_API
 (
lua_¸óãèbÀ
Ë(
lua_Sèã
 *
L
, 
«º
, 
ƒec
);

250 
LUA_API
 *(
lua_√wu£rd©a
Ë(
lua_Sèã
 *
L
, 
size_t
 
sz
);

251 
LUA_API
 (
lua_gëmë©abÀ
Ë(
lua_Sèã
 *
L
, 
objödex
);

252 
LUA_API
 (
lua_gëu£rvÆue
Ë(
lua_Sèã
 *
L
, 
idx
);

258 
LUA_API
 (
lua_£tglobÆ
Ë(
lua_Sèã
 *
L
, c⁄° *
«me
);

259 
LUA_API
 (
lua_£âabÀ
Ë(
lua_Sèã
 *
L
, 
idx
);

260 
LUA_API
 (
lua_£tfõld
Ë(
lua_Sèã
 *
L
, 
idx
, c⁄° *
k
);

261 
LUA_API
 (
lua_£ti
Ë(
lua_Sèã
 *
L
, 
idx
, 
lua_I¡egî
 
n
);

262 
LUA_API
 (
lua_øw£t
Ë(
lua_Sèã
 *
L
, 
idx
);

263 
LUA_API
 (
lua_øw£ti
Ë(
lua_Sèã
 *
L
, 
idx
, 
lua_I¡egî
 
n
);

264 
LUA_API
 (
lua_øw£ç
Ë(
lua_Sèã
 *
L
, 
idx
, c⁄° *
p
);

265 
LUA_API
 (
lua_£tmë©abÀ
Ë(
lua_Sèã
 *
L
, 
objödex
);

266 
LUA_API
 (
lua_£tu£rvÆue
Ë(
lua_Sèã
 *
L
, 
idx
);

272 
LUA_API
 (
lua_ˇŒk
Ë(
lua_Sèã
 *
L
, 
«rgs
, 
ƒesu…s
,

273 
lua_KC⁄ãxt
 
˘x
, 
lua_KFun˘i⁄
 
k
);

274 
	#lua_ˇŒ
(
L
,
n
,
r
Ë
	`lua_ˇŒk
(L, (n), (r), 0, 
NULL
)

	)

276 
LUA_API
 (
lua_pˇŒk
Ë(
lua_Sèã
 *
L
, 
«rgs
, 
ƒesu…s
, 
îrfunc
,

277 
lua_KC⁄ãxt
 
˘x
, 
lua_KFun˘i⁄
 
k
);

278 
	#lua_pˇŒ
(
L
,
n
,
r
,
f
Ë
	`lua_pˇŒk
(L, (n), (r), (f), 0, 
NULL
)

	)

280 
LUA_API
 (
lua_lﬂd
Ë(
lua_Sèã
 *
L
, 
lua_Ródî
 
ªadî
, *
dt
,

281 c⁄° *
chunk«me
, c⁄° *
mode
);

283 
LUA_API
 (
lua_dump
Ë(
lua_Sèã
 *
L
, 
lua_Wrôî
 
wrôî
, *
d©a
, 
°rù
);

289 
LUA_API
 (
lua_yõldk
Ë(
lua_Sèã
 *
L
, 
ƒesu…s
, 
lua_KC⁄ãxt
 
˘x
,

290 
lua_KFun˘i⁄
 
k
);

291 
LUA_API
 (
lua_ªsume
Ë(
lua_Sèã
 *
L
,Üua_Sèã *
‰om
, 
«rg
);

292 
LUA_API
 (
lua_°©us
Ë(
lua_Sèã
 *
L
);

293 
LUA_API
 (
lua_isyõldabÀ
Ë(
lua_Sèã
 *
L
);

295 
	#lua_yõld
(
L
,
n
Ë
	`lua_yõldk
(L, (n), 0, 
NULL
)

	)

302 
	#LUA_GCSTOP
 0

	)

303 
	#LUA_GCRESTART
 1

	)

304 
	#LUA_GCCOLLECT
 2

	)

305 
	#LUA_GCCOUNT
 3

	)

306 
	#LUA_GCCOUNTB
 4

	)

307 
	#LUA_GCSTEP
 5

	)

308 
	#LUA_GCSETPAUSE
 6

	)

309 
	#LUA_GCSETSTEPMUL
 7

	)

310 
	#LUA_GCISRUNNING
 9

	)

312 
LUA_API
 (
lua_gc
Ë(
lua_Sèã
 *
L
, 
wh©
, 
d©a
);

319 
LUA_API
 (
lua_îr‹
Ë(
lua_Sèã
 *
L
);

321 
LUA_API
 (
lua_√xt
Ë(
lua_Sèã
 *
L
, 
idx
);

323 
LUA_API
 (
lua_c⁄ˇt
Ë(
lua_Sèã
 *
L
, 
n
);

324 
LUA_API
 (
lua_Àn
Ë(
lua_Sèã
 *
L
, 
idx
);

326 
LUA_API
 
	$size_t
 (
lua_°rögt⁄umbî
Ë(
lua_Sèã
 *
L
, c⁄° *
s
);

328 
LUA_API
 
	$lua_AŒoc
 (
lua_gëÆlocf
Ë(
lua_Sèã
 *
L
, **
ud
);

329 
LUA_API
 (
lua_£èŒocf
Ë(
lua_Sèã
 *
L
, 
lua_AŒoc
 
f
, *
ud
);

339 
	#lua_gëexåa•a˚
(
L
Ë((*)((*)(LË- 
LUA_EXTRASPACE
))

	)

341 
	#lua_t⁄umbî
(
L
,
i
Ë
	`lua_t⁄umbîx
(L,(i),
NULL
)

	)

342 
	#lua_toöãgî
(
L
,
i
Ë
	`lua_toöãgîx
(L,(i),
NULL
)

	)

344 
	#lua_p›
(
L
,
n
Ë
	`lua_£â›
(L, -“)-1)

	)

346 
	#lua_√wèbÀ
(
L
Ë
	`lua_¸óãèbÀ
(L, 0, 0)

	)

348 
	#lua_ªgi°î
(
L
,
n
,
f
Ë(
	`lua_pushcfun˘i⁄
(L, (f)), 
	`lua_£tglobÆ
(L, (n)))

	)

350 
	#lua_pushcfun˘i⁄
(
L
,
f
Ë
	`lua_pushc˛osuª
(L, (f), 0)

	)

352 
	#lua_isfun˘i⁄
(
L
,
n
Ë(
	`lua_ty≥
(L, (n)Ë=
LUA_TFUNCTION
)

	)

353 
	#lua_i°abÀ
(
L
,
n
Ë(
	`lua_ty≥
(L, (n)Ë=
LUA_TTABLE
)

	)

354 
	#lua_i¶ightu£rd©a
(
L
,
n
Ë(
	`lua_ty≥
(L, (n)Ë=
LUA_TLIGHTUSERDATA
)

	)

355 
	#lua_i¢û
(
L
,
n
Ë(
	`lua_ty≥
(L, (n)Ë=
LUA_TNIL
)

	)

356 
	#lua_isboﬁón
(
L
,
n
Ë(
	`lua_ty≥
(L, (n)Ë=
LUA_TBOOLEAN
)

	)

357 
	#lua_i°hªad
(
L
,
n
Ë(
	`lua_ty≥
(L, (n)Ë=
LUA_TTHREAD
)

	)

358 
	#lua_i¢⁄e
(
L
,
n
Ë(
	`lua_ty≥
(L, (n)Ë=
LUA_TNONE
)

	)

359 
	#lua_i¢⁄e‹nû
(
L
, 
n
Ë(
	`lua_ty≥
(L, (n)Ë<0)

	)

361 
	#lua_pushlôîÆ
(
L
, 
s
Ë
	`lua_push°rög
(L, "" s)

	)

363 
	#lua_pushglobÆèbÀ
(
L
) \

364 (()
	`lua_øwgëi
(
L
, 
LUA_REGISTRYINDEX
, 
LUA_RIDX_GLOBALS
))

	)

366 
	#lua_to°rög
(
L
,
i
Ë
	`lua_tﬁ°rög
(L, (i), 
NULL
)

	)

369 
	#lua_ö£π
(
L
,
idx
Ë
	`lua_rŸ©e
(L, (idx), 1)

	)

371 
	#lua_ªmove
(
L
,
idx
Ë(
	`lua_rŸ©e
(L, (idx), -1), 
	`lua_p›
(L, 1))

	)

373 
	#lua_ª∂a˚
(
L
,
idx
Ë(
	`lua_c›y
(L, -1, (idx)), 
	`lua_p›
(L, 1))

	)

383 #i‡
	`deföed
(
LUA_COMPAT_APIINTCASTS
)

385 
	#lua_pushunsig√d
(
L
,
n
Ë
	`lua_pushöãgî
(L, (
lua_I¡egî
)“))

	)

386 
	#lua_tounsig√dx
(
L
,
i
,
is
Ë((
lua_Unsig√d
)
	`lua_toöãgîx
(L,i,is))

	)

387 
	#lua_tounsig√d
(
L
,
i
Ë
	`lua_tounsig√dx
(L,(i),
NULL
)

	)

402 
	#LUA_HOOKCALL
 0

	)

403 
	#LUA_HOOKRET
 1

	)

404 
	#LUA_HOOKLINE
 2

	)

405 
	#LUA_HOOKCOUNT
 3

	)

406 
	#LUA_HOOKTAILCALL
 4

	)

412 
	#LUA_MASKCALL
 (1 << 
LUA_HOOKCALL
)

	)

413 
	#LUA_MASKRET
 (1 << 
LUA_HOOKRET
)

	)

414 
	#LUA_MASKLINE
 (1 << 
LUA_HOOKLINE
)

	)

415 
	#LUA_MASKCOUNT
 (1 << 
LUA_HOOKCOUNT
)

	)

417 
lua_Debug
 
	tlua_Debug
;

421 (*
	tlua_Hook
Ë(
	tlua_Sèã
 *
	tL
, 
	tlua_Debug
 *
	t¨
);

424 
LUA_API
 (
lua_gë°ack
Ë(
lua_Sèã
 *
L
, 
Àvñ
, 
lua_Debug
 *
¨
);

425 
LUA_API
 (
lua_gëöfo
Ë(
lua_Sèã
 *
L
, c⁄° *
wh©
, 
lua_Debug
 *
¨
);

426 
LUA_API
 c⁄° *(
lua_gëloˇl
Ë(
lua_Sèã
 *
L
, c⁄° 
lua_Debug
 *
¨
, 
n
);

427 
LUA_API
 c⁄° *(
lua_£éoˇl
Ë(
lua_Sèã
 *
L
, c⁄° 
lua_Debug
 *
¨
, 
n
);

428 
LUA_API
 c⁄° *(
lua_gëupvÆue
Ë(
lua_Sèã
 *
L
, 
funcödex
, 
n
);

429 
LUA_API
 c⁄° *(
lua_£tupvÆue
Ë(
lua_Sèã
 *
L
, 
funcödex
, 
n
);

431 
LUA_API
 *(
lua_upvÆueid
Ë(
lua_Sèã
 *
L
, 
fidx
, 
n
);

432 
LUA_API
 (
lua_upvÆuejoö
Ë(
lua_Sèã
 *
L
, 
fidx1
, 
n1
,

433 
fidx2
, 
n2
);

435 
LUA_API
 (
lua_£thook
Ë(
lua_Sèã
 *
L
, 
lua_Hook
 
func
, 
mask
, 
cou¡
);

436 
LUA_API
 
	$lua_Hook
 (
lua_gëhook
Ë(
lua_Sèã
 *
L
);

437 
LUA_API
 (
lua_gëhookmask
Ë(
lua_Sèã
 *
L
);

438 
LUA_API
 (
lua_gëhookcou¡
Ë(
lua_Sèã
 *
L
);

440 
LUA_API
 (
lua_£çriv©e
Ë(
lua_Sèã
 * 
L
, * 
vÆ
) ;

441 
LUA_API
 * (
lua_gë¥iv©e
Ë(
lua_Sèã
 * 
L
);

444 
	slua_Debug
 {

445 
evít
;

446 c⁄° *
«me
;

447 c⁄° *
«mewh©
;

448 c⁄° *
wh©
;

449 c⁄° *
sour˚
;

450 
cuºíéöe
;

451 
löedeföed
;

452 
œ°löedeföed
;

453 
nups
;

454 
≈¨ams
;

455 
isv¨¨g
;

456 
i°aûˇŒ
;

457 
sh‹t_§c
[
LUA_IDSIZE
];

459 
CÆlInfo
 *
i_ci
;

488 
	`lua_ˇŒback_routöe
(*);

	@lib/lua/lua-5.3.4/src/lua.hpp

6 
	~"lua.h
"

7 
	~"luÆib.h
"

8 
	~"œuxlib.h
"

	@lib/lua/lua-5.3.4/src/lua_shell.c

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<°rög.h
>

10 
	~<sig«l.h
>

12 
	#lua_c


	)

14 
	~"lua.h
"

15 
	~"l°©e.h
"

17 
	~"œuxlib.h
"

18 
	~"luÆib.h
"

19 
	~"lua-sockë.h
"

20 
	~"lua_shñl.h
"

22 #i‡!
deföed
(
LUA_PROGNAME
)

23 
	#LUA_PROGNAME
 "lua-shñl"

	)

26 #i‡!
deföed
(
LUA_MAXINPUT
)

27 
	#LUA_MAXINPUT
 1024

	)

30 #i‡!
deföed
(
LUA_INIT
)

31 
	#LUA_INIT
 "LUA_INIT"

	)

34 
	#LUA_INITVERSION
 \

35 
LUA_INIT
 "_" 
LUA_VERSION_MAJOR
 "_" 
LUA_VERSION_MINOR


	)

43 #i‡
deföed
(
LUA_USE_READLINE
)

45 
	~<ªadlöe/ªadlöe.h
>

46 
	~<ªadlöe/hi°‹y.h
>

47 
	#lua_ªadlöe
(
L
,
b
Ë(()L, ((b)=
	`ªadlöe
(
NULL
)Ë!NULL)

	)

48 
	#lua_ßvñöe
(
L
,
idx
) \

49 i‡(
	`lua_øwÀn
(
L
,
idx
) > 0) \

50 
	`add_hi°‹y
(
	`lua_to°rög
(
L
, 
idx
));

	)

51 
	#lua_‰ìlöe
(
L
,
b
Ë(()L, 
	`‰ì
(b))

	)

53 #ñi‡!
deföed
(
lua_ªadlöe
)

55 
	#lua_ªadlöe
(
L
,
b
) \

56 (()
L
, 
	`fgës
(
b
, 
LUA_MAXINPUT
, 
	`_gë_°dö
(L)Ë!
NULL
Ë

	)

57 
	#lua_ßvñöe
(
L
,
idx
Ë{ ()L; ()idx; }

	)

58 
	#lua_‰ìlöe
(
L
,
b
Ë{ ()L; ()b; }

	)

62 
lua_Sèã
 *
	gglobÆL
 = 
NULL
;

64 c⁄° *
	g¥og«me
 = 
LUA_PROGNAME
;

66 
	$l°›
(
lua_Sèã
 *
L
, 
lua_Debug
 *
¨
) {

67 (Ë
¨
;

68 
	`lua_£thook
(
L
, 
NULL
, 0, 0);

69 
	`luaL_îr‹
(
L
, "interrupted!");

70 
	}
}

72 
	$œ˘i⁄
(
i
) {

73 
	`sig«l
(
i
, 
SIG_DFL
 );

75 
	`lua_£thook
(
globÆL
, 
l°›
, 
LUA_MASKCALL
 | 
LUA_MASKRET
 | 
LUA_MASKCOUNT
, 1);

76 
	}
}

78 
	$l_mesßge
(
lua_Sèã
 *
L
, c⁄° *
≤ame
, c⁄° *
msg
) {

79 i‡(
≤ame
)

80 
	`lua_wrôe°rögîr‹
("%s: ", 
≤ame
);

81 
	`lua_wrôe°rögîr‹
("%s\n", 
msg
);

82 
	}
}

84 
	$ªp‹t
(
lua_Sèã
 *
L
, 
°©us
) {

85 i‡(
°©us
 !
LUA_OK
 && !
	`lua_i¢û
(
L
, -1)) {

86 c⁄° *
msg
 = 
	`lua_to°rög
(
L
, -1);

87 i‡(
msg
 =
NULL
 )

88 
msg
 = "(error object isÇotá string)";

89 
	`l_mesßge
(
L
, 
¥og«me
, 
msg
);

90 
	`lua_p›
(
L
, 1);

92 
	`lua_gc
(
L
, 
LUA_GCCOLLECT
, 0);

94  
°©us
;

95 
	}
}

98 
	$föÆªp‹t
(
lua_Sèã
 *
L
, 
°©us
) {

99 i‡(
°©us
 !
LUA_OK
) {

100 c⁄° *
msg
 =

101 (
	`lua_ty≥
(
L
, -1Ë=
LUA_TSTRING
Ë? 
	`lua_to°rög
(L, -1Ë: 
NULL
;

102 i‡(
msg
 =
NULL
 )

103 
msg
 = "(error object isÇotá string)";

104 
	`l_mesßge
(
L
, 
¥og«me
, 
msg
);

105 
	`lua_p›
(
L
, 1);

107 
	}
}

109 
	$åa˚back
(
lua_Sèã
 *
L
) {

110 c⁄° *
msg
 = 
	`lua_to°rög
(
L
, 1);

111 i‡(
msg
)

112 
	`luaL_åa˚back
(
L
, L, 
msg
, 1);

113 i‡(!
	`lua_i¢⁄e‹nû
(
L
, 1)) {

114 i‡(!
	`luaL_ˇŒmëa
(
L
, 1, "__tostring"))

115 
	`lua_pushlôîÆ
(
L
, "(noÉrror message)");

118 
	}
}

120 
	$doˇŒ
(
lua_Sèã
 *
L
, 
«rg
, 
ƒes
) {

121 
°©us
;

122 
ba£
 = 
	`lua_gët›
(
L
Ë- 
«rg
;

124 
	`lua_pushcfun˘i⁄
(
L
, 
åa˚back
);

126 
	`lua_ö£π
(
L
, 
ba£
);

127 
globÆL
 = 
L
;

128 
	`sig«l
(
SIGINT
, 
œ˘i⁄
);

129 
°©us
 = 
	`lua_pˇŒ
(
L
, 
«rg
, 
ƒes
, 
ba£
);

130 
	`sig«l
(
SIGINT
, 
SIG_DFL
 );

131 
globÆL
 = 
NULL
;

132 
	`lua_ªmove
(
L
, 
ba£
);

134  
°©us
;

135 
	}
}

137 
	$dofûe
(
lua_Sèã
 *
L
, c⁄° *
«me
) {

138 
°©us
 = 
	`luaL_lﬂdfûe
(
L
, 
«me
);

139 i‡(
°©us
 =
LUA_OK
)

140 
°©us
 = 
	`doˇŒ
(
L
, 0, 0);

141  
	`ªp‹t
(
L
, 
°©us
);

142 
	}
}

144 
	$do°rög
(
lua_Sèã
 *
L
, c⁄° *
s
, c⁄° *
«me
) {

145 
°©us
 = 
	`luaL_lﬂdbuf„r
(
L
, 
s
, 
	`°æí
(s), 
«me
);

146 i‡(
°©us
 =
LUA_OK
)

147 
°©us
 = 
	`doˇŒ
(
L
, 0, 0);

148  
	`ªp‹t
(
L
, 
°©us
);

149 
	}
}

151 
	$dﬁibøry
(
lua_Sèã
 *
L
, c⁄° *
«me
) {

152 
°©us
;

153 
	`lua_gëglobÆ
(
L
, "require");

154 
	`lua_push°rög
(
L
, 
«me
);

155 
°©us
 = 
	`doˇŒ
(
L
, 1, 1);

156 i‡(
°©us
 =
LUA_OK
)

157 
	`lua_£tglobÆ
(
L
, 
«me
);

158  
	`ªp‹t
(
L
, 
°©us
);

159 
	}
}

162 
	#EOFMARK
 "<eof>"

	)

163 
	#m¨kÀn
 ((
EOFMARK
)/(Ë- 1)

	)

165 
	$öcom∂ëe
(
lua_Sèã
 *
L
, 
°©us
) {

166 i‡(
°©us
 =
LUA_ERRSYNTAX
) {

167 
size_t
 
lmsg
;

168 c⁄° *
msg
 = 
	`lua_tﬁ°rög
(
L
, -1, &
lmsg
);

169 i‡(
lmsg
 >
m¨kÀn
 && 
	`°rcmp
(
msg
 +Ümsg - m¨kÀn, 
EOFMARK
) == 0) {

170 
	`lua_p›
(
L
, 1);

175 
	}
}

177 
	$pushlöe
(
lua_Sèã
 *
L
, 
fú°löe
) {

178 
buf„r
[
LUA_MAXINPUT
];

179 *
b
 = 
buf„r
;

180 
size_t
 
l
;

182 i‡(
	`lua_ªadlöe
(
L
, 
b
) == 0)

185 
l
 = 
	`°æí
(
b
);

186 i‡(
l
 > 0 && 
b
[l - 1] == '\n')

187 
b
[
l
 - 1] = '\0';

188 i‡(
fú°löe
 && 
b
[0] == '=')

189 
	`lua_pushf°rög
(
L
, "ªtu∫ %s", 
b
 + 1);

191 
	`lua_push°rög
(
L
, 
b
);

192 
	`lua_‰ìlöe
(
L
, 
b
);

195 
	}
}

197 
	$lﬂdlöe
(
lua_Sèã
 *
L
) {

198 
°©us
;

200 
	`lua_£â›
(
L
, 0);

201 i‡(!
	`pushlöe
(
L
, 1))

205 
size_t
 
l
;

206 c⁄° *
löe
 = 
	`lua_tﬁ°rög
(
L
, 1, &
l
);

208 
°©us
 = 
	`luaL_lﬂdbuf„r
(
L
, 
löe
, 
l
, "=stdin");

209 i‡(!
	`öcom∂ëe
(
L
, 
°©us
))

212 i‡(!
	`pushlöe
(
L
, 0))

215 
	`lua_pushlôîÆ
(
L
, "\n");

216 
	`lua_ö£π
(
L
, -2);

217 
	`lua_c⁄ˇt
(
L
, 3);

219 
	`lua_ßvñöe
(
L
, 1);

220 
	`lua_ªmove
(
L
, 1);

221  
°©us
;

222 
	}
}

224 
	$dŸty
(
lua_Sèã
 *
L
) {

225 
°©us
;

226 c⁄° *
ﬁd¥og«me
 = 
¥og«me
;

227 
¥og«me
 = 
NULL
;

229 (
°©us
 = 
	`lﬂdlöe
(
L
)) != -1) {

230 i‡(
°©us
 =
LUA_OK
)

231 
°©us
 = 
	`doˇŒ
(
L
, 0, 
LUA_MULTRET
);

232 
	`ªp‹t
(
L
, 
°©us
);

233 i‡(
°©us
 =
LUA_OK
 && 
	`lua_gët›
(
L
) > 0) {

234 
	`luaL_check°ack
(
L
, 
LUA_MINSTACK
, "too manyÑesultsÅoÖrint");

235 
	`lua_gëglobÆ
(
L
, "print");

236 
	`lua_ö£π
(
L
, 1);

237 i‡(
	`lua_pˇŒ
(
L
, 
	`lua_gët›
(L)-1, 0, 0Ë!
LUA_OK
)

238 
	`l_mesßge
(
L
, 
¥og«me
,

239 
	`lua_pushf°rög
(
L
,

240 "îr‹ cÆlög " 
	`LUA_QL
("print") " (%s)",

241 
	`lua_to°rög
(
L
, -1)));

244 
	`lua_£â›
(
L
, 0);

245 
	`lua_wrôñöe
();

247 
¥og«me
 = 
ﬁd¥og«me
;

248 
	}
}

250 
	$h™dÀ_luaöô
(
lua_Sèã
 *
L
) {

251 c⁄° *
«me
 = "=" 
LUA_INITVERSION
;

252 c⁄° *
öô
 = 
	`gëív
(
«me
 + 1);

253 i‡(
öô
 =
NULL
 ) {

254 
«me
 = "=" 
LUA_INIT
;

255 
öô
 = 
	`gëív
(
«me
 + 1);

257 i‡(
öô
 =
NULL
 )

258  
LUA_OK
;

259 i‡(
öô
[0] == '@')

260  
	`dofûe
(
L
, 
öô
 + 1);

262  
	`do°rög
(
L
, 
öô
, 
«me
);

263 
	}
}

265 
√wlib_t
 
	g√wlibs
[
MAX_NEW_LIBS
];

266 
	g√wlibs_idx
 = 0;

268 
	$lua_√wlib_add
(
√wlib_t
 
n
) {

269 i‡–
√wlibs_idx
 >
MAX_NEW_LIBS
 )

271 
√wlibs
[
√wlibs_idx
++] = 
n
;

273 
	}
}

275 
	$lua_√wlibs_öô
(
lua_Sèã
 * 
L
) {

276 
i
;

278 
i
 = 0; i < 
√wlibs_idx
; i++)

279 
√wlibs
[
i
](
L
);

280 
	}
}

282 
	$pmaö
(
lua_Sèã
 *
L
) {

285 
	`luaL_checkvîsi⁄
(
L
);

287 
	`lua_√wlibs_öô
(
L
);

289 i‡(
	`h™dÀ_luaöô
(
L
Ë!
LUA_OK
)

292 
	`_£t_°dfûes
(
L
, 
	`luaL_gë¥iv©e
(L));

294 
	`dŸty
(
L
);

296 
	`_ª£t_°dfûes
(
L
);

298 
	`lua_pushboﬁón
(
L
, 1);

301 
	}
}

303 
	$lua_shñl
(* 
pSîvî
) {

304 
°©us
, 
ªsu…
;

305 
lua_Sèã
 *
L
;

307 
L
 = 
	`luaL_√w°©e
();

308 i‡(
L
 =
NULL
 ) {

309 
	`l_mesßge
(
L
, "Lua-Shell", "cannot create state:ÇotÉnough memory");

310  
EXIT_FAILURE
;

312 
	`luaL_£çriv©e
(
L
, 
pSîvî
);

315 
	`lua_pushcfun˘i⁄
(
L
, &
pmaö
);

316 
°©us
 = 
	`lua_pˇŒ
(
L
, 0, 1, 0);

317 
ªsu…
 = 
	`lua_toboﬁón
(
L
, -1);

318 
	`föÆªp‹t
(
L
, 
°©us
);

319 
	`lua_˛o£
(
L
);

321  (
ªsu…
 && 
°©us
 =
LUA_OK
Ë? 
EXIT_SUCCESS
 : 
EXIT_FAILURE
;

322 
	}
}

337 
	$execuã_lua_°rög
–
lua_Sèã
 * 
L
, * 
buf„r
 )

339 i‡–(
buf„r
 =
NULL
Ë|| (
L
 == NULL) )

342 i‡–
	`luaL_do°rög
(
L
, 
buf„r
) != 0 ) {

343 
	`Ârötf
(
°dîr
,"%s\n", 
	`lua_to°rög
(
L
,-1));

348 
	}
}

363 
	$execuã_lua_˛o£
(
lua_Sèã
 * 
L
)

365 i‡–
L
 )

366 
	`lua_˛o£
(
L
);

367 
	}
}

369 
LUA_API
 
	$lua_£çriv©e
(
lua_Sèã
 * 
L
, * 
vÆ
) {

370 
L
->
¥iv©e
 = 
vÆ
;

371 
	}
}

373 
LUA_API
 * 
	$lua_gë¥iv©e
(
lua_Sèã
 * 
L
) {

374  
L
->
¥iv©e
;

375 
	}
}

377 
LUALIB_API
 *

378 
	$luaL_gë¥iv©e
(
lua_Sèã
 * 
L
)

380  (
L
 =
NULL
Ë? NULL : 
	`lua_gë¥iv©e
(L);

381 
	}
}

383 
LUALIB_API
 

384 
	$luaL_£çriv©e
(
lua_Sèã
 * 
L
, * 
vÆ
)

386 i‡–
L
 =
NULL
 )

388 
	`lua_£çriv©e
(
L
, 
vÆ
);

390 
	}
}

393 
	$lua_£t_°dfûes
(
lua_Sèã
 * 
L
, * 
ö
, * 
out
, * 
îr
)

395 
	`luaL_gëmë©abÀ
(
L
, 
LUA_FILEHANDLE
);

396 i‡(
	`lua_i¢û
(
L
, -1)) {

397 
	`¥ötf
("luaL_getmetatable()Ñeturned NIL\n");

402 
	`¸óã°dfûe
(
L
, 
ö
, 
IO_INPUT
, "stdin");

403 
	`¸óã°dfûe
(
L
, 
out
, 
IO_OUTPUT
, "stdout");

404 
	`¸óã°dfûe
(
L
, 
îr
, 
NULL
, "stderr");

405 
	}
}

408 
	$lua_ª£t_°dfûes
(
lua_Sèã
 * 
L
)

410 
	`luaL_gëmë©abÀ
(
L
, 
LUA_FILEHANDLE
);

411 i‡(
	`lua_i¢û
(
L
, -1))

415 
	`¸óã°dfûe
(
L
, 
°dö
, 
IO_INPUT
, "stdin");

416 
	`¸óã°dfûe
(
L
, 
°dout
, 
IO_OUTPUT
, "stdout");

417 
	`¸óã°dfûe
(
L
, 
°dîr
, 
NULL
, "stderr");

418 
	}
}

	@lib/lua/lua-5.3.4/src/lua_shell.h

8 #i‚de‡
LUA_SHELL_H_


9 
	#LUA_SHELL_H_


	)

11 
	#lua_c


	)

12 
	~"lua.h
"

13 
	~"œuxlib.h
"

15 #ifde‡
__˝lu•lus


19 
	#IO_PREFIX
 "_IO_"

	)

20 
	#IOPREF_LEN
 ((
IO_PREFIX
)/(Ë- 1)

	)

21 
	#IO_INPUT
 (
IO_PREFIX
 "öput")

	)

22 
	#IO_OUTPUT
 (
IO_PREFIX
 "ouçut")

	)

24 
	#MAX_NEW_LIBS
 16

	)

25 (*
√wlib_t
)(
	tlua_Sèã
 * 
	tL
);

27 
lua_√wlib_add
(
√wlib_t
 
n
);

28 
lua_√wlibs_öô
(
lua_Sèã
 * 
L
);

30 
LUALIB_API
 
luaL_£çriv©e
(
lua_Sèã
 * 
L
, * 
vÆ
);

31 
LUALIB_API
 * 
luaL_gë¥iv©e
(
lua_Sèã
 * 
L
);

33 
LUA_API
 (
lua_£çriv©e
Ë(
lua_Sèã
 * 
L
, * 
vÆ
) ;

34 
LUA_API
 * (
lua_gë¥iv©e
Ë(
lua_Sèã
 * 
L
);

36 
¸óã°dfûe
 (
lua_Sèã
 *
L
, 
FILE
 *
f
, c⁄° *
k
,

37 c⁄° *
‚ame
);

39 #ifde‡
__˝lu•lus


	@lib/lua/lua-5.3.4/src/luac.c

7 
	#luac_c


	)

8 
	#LUA_CORE


	)

10 
	~"Õªfix.h
"

12 
	~<˘y≥.h
>

13 
	~<î∫o.h
>

14 
	~<°dio.h
>

15 
	~<°dlib.h
>

16 
	~<°rög.h
>

18 
	~"lua.h
"

19 
	~"œuxlib.h
"

21 
	~"lobje˘.h
"

22 
	~"l°©e.h
"

23 
	~"lundump.h
"

25 
PrötFun˘i⁄
(c⁄° 
PrŸo
* 
f
, 
fuŒ
);

26 
	#luaU_¥öt
 
PrötFun˘i⁄


	)

28 
	#PROGNAME
 "luac"

	)

29 
	#OUTPUT
 
PROGNAME
 ".out"

	)

31 
	gli°ög
=0;

32 
	gdumpög
=1;

33 
	g°rùpög
=0;

34 
	gOuçut
[]={ 
OUTPUT
 };

35 c⁄° * 
	gouçut
=
Ouçut
;

36 c⁄° * 
	g¥og«me
=
PROGNAME
;

38 
	$Áèl
(c⁄° * 
mesßge
)

40 
	`Ârötf
(
°dîr
,"%s: %s\n",
¥og«me
,
mesßge
);

41 
	`exô
(
EXIT_FAILURE
);

42 
	}
}

44 
	$ˇ¬Ÿ
(c⁄° * 
wh©
)

46 
	`Ârötf
(
°dîr
,"%s: c™nŸ %†%s: %s\n",
¥og«me
,
wh©
,
ouçut
,
	`°ªº‹
(
î∫o
));

47 
	`exô
(
EXIT_FAILURE
);

48 
	}
}

50 
	$ußge
(c⁄° * 
mesßge
)

52 i‡(*
mesßge
=='-')

53 
	`Ârötf
(
°dîr
,"%s: uƒecognized o±i⁄ '%s'\n",
¥og«me
,
mesßge
);

55 
	`Ârötf
(
°dîr
,"%s: %s\n",
¥og«me
,
mesßge
);

56 
	`Ârötf
(
°dîr
,

66 ,
¥og«me
,
Ouçut
);

67 
	`exô
(
EXIT_FAILURE
);

68 
	}
}

70 
	#IS
(
s
Ë(
	`°rcmp
(
¨gv
[
i
],s)==0)

	)

72 
	$dﬂrgs
(
¨gc
, * 
¨gv
[])

74 
i
;

75 
vîsi⁄
=0;

76 i‡(
¨gv
[0]!=
NULL
 && *¨gv[0]!=0Ë
¥og«me
=argv[0];

77 
i
=1; i<
¨gc
; i++)

79 i‡(*
¨gv
[
i
]!='-')

81 i‡(
	`IS
("--"))

83 ++
i
;

84 i‡(
vîsi⁄
) ++version;

87 i‡(
	`IS
("-"))

89 i‡(
	`IS
("-l"))

90 ++
li°ög
;

91 i‡(
	`IS
("-o"))

93 
ouçut
=
¨gv
[++
i
];

94 i‡(
ouçut
==
NULL
 || *output==0 || (*output=='-' && output[1]!=0))

95 
	`ußge
("'-o'Çeedsárgument");

96 i‡(
	`IS
("-")Ë
ouçut
=
NULL
;

98 i‡(
	`IS
("-p"))

99 
dumpög
=0;

100 i‡(
	`IS
("-s"))

101 
°rùpög
=1;

102 i‡(
	`IS
("-v"))

103 ++
vîsi⁄
;

105 
	`ußge
(
¨gv
[
i
]);

107 i‡(
i
==
¨gc
 && (
li°ög
 || !
dumpög
))

109 
dumpög
=0;

110 
¨gv
[--
i
]=
Ouçut
;

112 i‡(
vîsi⁄
)

114 
	`¥ötf
("%s\n",
LUA_COPYRIGHT
);

115 i‡(
vîsi⁄
==
¨gc
-1Ë
	`exô
(
EXIT_SUCCESS
);

117  
i
;

118 
	}
}

120 
	#FUNCTION
 "(fun˘i⁄(Înd)();"

	)

122 c⁄° * 
	$ªadî
(
lua_Sèã
 *
L
, *
ud
, 
size_t
 *
size
)

124 
	`UNUSED
(
L
);

125 i‡((*(*)
ud
)--)

127 *
size
=(
FUNCTION
)-1;

128  
FUNCTION
;

132 *
size
=0;

133  
NULL
;

135 
	}
}

137 
	#t›rŸo
(
L
,
i
Ë
	`gë¥Ÿo
(L->
t›
+(i))

	)

139 c⁄° 
PrŸo
* 
	$comböe
(
lua_Sèã
* 
L
, 
n
)

141 i‡(
n
==1)

142  
	`t›rŸo
(
L
,-1);

145 
PrŸo
* 
f
;

146 
i
=
n
;

147 i‡(
	`lua_lﬂd
(
L
,
ªadî
,&
i
,"=(" 
PROGNAME
 ")",
NULL
)!=
LUA_OK
Ë
	`Áèl
(
	`lua_to°rög
(L,-1));

148 
f
=
	`t›rŸo
(
L
,-1);

149 
i
=0; i<
n
; i++)

151 
f
->
p
[
i
]=
	`t›rŸo
(
L
,i-
n
-1);

152 i‡(
f
->
p
[
i
]->
sizeupvÆues
>0Ëf->p[i]->
upvÆues
[0].
ö°ack
=0;

154 
f
->
sizñöeöfo
=0;

155  
f
;

157 
	}
}

159 
	$wrôî
(
lua_Sèã
* 
L
, c⁄° * 
p
, 
size_t
 
size
, * 
u
)

161 
	`UNUSED
(
L
);

162  (
	`fwrôe
(
p
,
size
,1,(
FILE
*)
u
)!=1) && (size!=0);

163 
	}
}

165 
	$pmaö
(
lua_Sèã
* 
L
)

167 
¨gc
=()
	`lua_toöãgî
(
L
,1);

168 ** 
¨gv
=(**)
	`lua_tou£rd©a
(
L
,2);

169 c⁄° 
PrŸo
* 
f
;

170 
i
;

171 i‡(!
	`lua_check°ack
(
L
,
¨gc
)Ë
	`Áèl
("too many input files");

172 
i
=0; i<
¨gc
; i++)

174 c⁄° * 
fûíame
=
	`IS
("-"Ë? 
NULL
 : 
¨gv
[
i
];

175 i‡(
	`luaL_lﬂdfûe
(
L
,
fûíame
)!=
LUA_OK
Ë
	`Áèl
(
	`lua_to°rög
(L,-1));

177 
f
=
	`comböe
(
L
,
¨gc
);

178 i‡(
li°ög
Ë
	`luaU_¥öt
(
f
,listing>1);

179 i‡(
dumpög
)

181 
FILE
* 
D
(
ouçut
==
NULL
Ë? 
°dout
 : 
	`f›í
(output,"wb");

182 i‡(
D
==
NULL
Ë
	`ˇ¬Ÿ
("open");

183 
	`lua_lock
(
L
);

184 
	`luaU_dump
(
L
,
f
,
wrôî
,
D
,
°rùpög
);

185 
	`lua_u∆ock
(
L
);

186 i‡(
	`„º‹
(
D
)Ë
	`ˇ¬Ÿ
("write");

187 i‡(
	`f˛o£
(
D
)Ë
	`ˇ¬Ÿ
("close");

190 
	}
}

192 
	$maö
(
¨gc
, * 
¨gv
[])

194 
lua_Sèã
* 
L
;

195 
i
=
	`dﬂrgs
(
¨gc
,
¨gv
);

196 
¨gc
-=
i
; 
¨gv
+=i;

197 i‡(
¨gc
<=0Ë
	`ußge
("no input files given");

198 
L
=
	`luaL_√w°©e
();

199 i‡(
L
==
NULL
Ë
	`Áèl
("cannot create state:ÇotÉnough memory");

200 
	`lua_pushcfun˘i⁄
(
L
,&
pmaö
);

201 
	`lua_pushöãgî
(
L
,
¨gc
);

202 
	`lua_pushlightu£rd©a
(
L
,
¨gv
);

203 i‡(
	`lua_pˇŒ
(
L
,2,0,0)!=
LUA_OK
Ë
	`Áèl
(
	`lua_to°rög
(L,-1));

204 
	`lua_˛o£
(
L
);

205  
EXIT_SUCCESS
;

206 
	}
}

214 
	#luac_c


	)

215 
	#LUA_CORE


	)

217 
	~"ldebug.h
"

218 
	~"l›codes.h
"

220 
	#VOID
(
p
Ë((c⁄° *)’))

	)

222 
	$PrötSåög
(c⁄° 
TSåög
* 
ts
)

224 c⁄° * 
s
=
	`gë°r
(
ts
);

225 
size_t
 
i
,
n
=
	`ts¶í
(
ts
);

226 
	`¥ötf
("%c",'"');

227 
i
=0; i<
n
; i++)

229 
c
=()()
s
[
i
];

230 
c
)

232 '"': 
	`¥ötf
("\\\""); ;

233 '\\': 
	`¥ötf
("\\\\"); ;

234 '\a': 
	`¥ötf
("\\a"); ;

235 '\b': 
	`¥ötf
("\\b"); ;

236 '\f': 
	`¥ötf
("\\f"); ;

237 '\n': 
	`¥ötf
("\\n"); ;

238 '\r': 
	`¥ötf
("\\r"); ;

239 '\t': 
	`¥ötf
("\\t"); ;

240 '\v': 
	`¥ötf
("\\v"); ;

241 : i‡(
	`i•röt
(
c
))

242 
	`¥ötf
("%c",
c
);

244 
	`¥ötf
("\\%03d",
c
);

247 
	`¥ötf
("%c",'"');

248 
	}
}

250 
	$PrötC⁄°™t
(c⁄° 
PrŸo
* 
f
, 
i
)

252 c⁄° 
TVÆue
* 
o
=&
f
->
k
[
i
];

253 
	`ây≥
(
o
))

255 
LUA_TNIL
:

256 
	`¥ötf
("nil");

258 
LUA_TBOOLEAN
:

259 
	`¥ötf
(
	`bvÆue
(
o
) ? "true" : "false");

261 
LUA_TNUMFLT
:

263 
buff
[100];

264 
	`•rötf
(
buff
,
LUA_NUMBER_FMT
,
	`ÊtvÆue
(
o
));

265 
	`¥ötf
("%s",
buff
);

266 i‡(
buff
[
	`°r•n
(buff,"-0123456789")]=='\0'Ë
	`¥ötf
(".0");

269 
LUA_TNUMINT
:

270 
	`¥ötf
(
LUA_INTEGER_FMT
,
	`ivÆue
(
o
));

272 
LUA_TSHRSTR
: 
LUA_TLNGSTR
:

273 
	`PrötSåög
(
	`tsvÆue
(
o
));

276 
	`¥ötf
("?Åy≥=%d",
	`ây≥
(
o
));

279 
	}
}

281 
	#UPVALNAME
(
x
Ë((
f
->
upvÆues
[x].
«me
Ë? 
	`gë°r
(f->upvÆues[x].«meË: "-")

	)

282 
	#MYK
(
x
Ë(-1-(x))

	)

284 
	$PrötCode
(c⁄° 
PrŸo
* 
f
)

286 c⁄° 
In°ru˘i⁄
* 
code
=
f
->code;

287 
pc
,
n
=
f
->
sizecode
;

288 
pc
=0;Öc<
n
;Öc++)

290 
In°ru˘i⁄
 
i
=
code
[
pc
];

291 
OpCode
 
o
=
	`GET_OPCODE
(
i
);

292 
a
=
	`GETARG_A
(
i
);

293 
b
=
	`GETARG_B
(
i
);

294 
c
=
	`GETARG_C
(
i
);

295 
ax
=
	`GETARG_Ax
(
i
);

296 
bx
=
	`GETARG_Bx
(
i
);

297 
sbx
=
	`GETARG_sBx
(
i
);

298 
löe
=
	`gëfun˛öe
(
f
,
pc
);

299 
	`¥ötf
("\t%d\t",
pc
+1);

300 i‡(
löe
>0Ë
	`¥ötf
("[%d]\t",line); printf("[-]\t");

301 
	`¥ötf
("%-9s\t",
luaP_›«mes
[
o
]);

302 
	`gëOpMode
(
o
))

304 
iABC
:

305 
	`¥ötf
("%d",
a
);

306 i‡(
	`gëBMode
(
o
)!=
OpArgN
Ë
	`¥ötf
(" %d",
	`ISK
(
b
Ë? (
	`MYK
(
	`INDEXK
(b))) : b);

307 i‡(
	`gëCMode
(
o
)!=
OpArgN
Ë
	`¥ötf
(" %d",
	`ISK
(
c
Ë? (
	`MYK
(
	`INDEXK
(c))) : c);

309 
iABx
:

310 
	`¥ötf
("%d",
a
);

311 i‡(
	`gëBMode
(
o
)==
OpArgK
Ë
	`¥ötf
(" %d",
	`MYK
(
bx
));

312 i‡(
	`gëBMode
(
o
)==
OpArgU
Ë
	`¥ötf
(" %d",
bx
);

314 
iAsBx
:

315 
	`¥ötf
("%d %d",
a
,
sbx
);

317 
iAx
:

318 
	`¥ötf
("%d",
	`MYK
(
ax
));

321 
o
)

323 
OP_LOADK
:

324 
	`¥ötf
("\t; "); 
	`PrötC⁄°™t
(
f
,
bx
);

326 
OP_GETUPVAL
:

327 
OP_SETUPVAL
:

328 
	`¥ötf
("\t; %s",
	`UPVALNAME
(
b
));

330 
OP_GETTABUP
:

331 
	`¥ötf
("\t; %s",
	`UPVALNAME
(
b
));

332 i‡(
	`ISK
(
c
)Ë{ 
	`¥ötf
(" "); 
	`PrötC⁄°™t
(
f
,
	`INDEXK
(c)); }

334 
OP_SETTABUP
:

335 
	`¥ötf
("\t; %s",
	`UPVALNAME
(
a
));

336 i‡(
	`ISK
(
b
)Ë{ 
	`¥ötf
(" "); 
	`PrötC⁄°™t
(
f
,
	`INDEXK
(b)); }

337 i‡(
	`ISK
(
c
)Ë{ 
	`¥ötf
(" "); 
	`PrötC⁄°™t
(
f
,
	`INDEXK
(c)); }

339 
OP_GETTABLE
:

340 
OP_SELF
:

341 i‡(
	`ISK
(
c
)Ë{ 
	`¥ötf
("\t; "); 
	`PrötC⁄°™t
(
f
,
	`INDEXK
(c)); }

343 
OP_SETTABLE
:

344 
OP_ADD
:

345 
OP_SUB
:

346 
OP_MUL
:

347 
OP_POW
:

348 
OP_DIV
:

349 
OP_IDIV
:

350 
OP_BAND
:

351 
OP_BOR
:

352 
OP_BXOR
:

353 
OP_SHL
:

354 
OP_SHR
:

355 
OP_EQ
:

356 
OP_LT
:

357 
OP_LE
:

358 i‡(
	`ISK
(
b
Ë|| ISK(
c
))

360 
	`¥ötf
("\t; ");

361 i‡(
	`ISK
(
b
)Ë
	`PrötC⁄°™t
(
f
,
	`INDEXK
(b)); 
	`¥ötf
("-");

362 
	`¥ötf
(" ");

363 i‡(
	`ISK
(
c
)Ë
	`PrötC⁄°™t
(
f
,
	`INDEXK
(c)); 
	`¥ötf
("-");

366 
OP_JMP
:

367 
OP_FORLOOP
:

368 
OP_FORPREP
:

369 
OP_TFORLOOP
:

370 
	`¥ötf
("\t;Åÿ%d",
sbx
+
pc
+2);

372 
OP_CLOSURE
:

373 
	`¥ötf
("\t; %p",
	`VOID
(
f
->
p
[
bx
]));

375 
OP_SETLIST
:

376 i‡(
c
==0Ë
	`¥ötf
("\t; %d",()
code
[++
pc
]); printf("\t; %d",c);

378 
OP_EXTRAARG
:

379 
	`¥ötf
("\t; "); 
	`PrötC⁄°™t
(
f
,
ax
);

384 
	`¥ötf
("\n");

386 
	}
}

388 
	#SS
(
x
Ë((x==1)?"":"s")

	)

389 
	#S
(
x
Ë()(x),
	`SS
(x)

	)

391 
	$PrötHódî
(c⁄° 
PrŸo
* 
f
)

393 c⁄° * 
s
=
f
->
sour˚
 ? 
	`gë°r
(f->source) : "=?";

394 i‡(*
s
=='@' || *s=='=')

395 
s
++;

396 i‡(*
s
==
LUA_SIGNATURE
[0])

397 
s
="(bstring)";

399 
s
="(string)";

400 
	`¥ötf
("\n%s <%s:%d,%d> (%d instruction%sát %p)\n",

401 (
f
->
löedeföed
==0)?"maö":"fun˘i⁄",
s
,

402 
f
->
löedeföed
,f->
œ°löedeföed
,

403 
	`S
(
f
->
sizecode
),
	`VOID
(f));

404 
	`¥ötf
("%d%sÖaram%s, %d slot%s, %d upvalue%s, ",

405 ()(
f
->
num∑øms
),f->
is_v¨¨g
?"+":"",
	`SS
(f->numparams),

406 
	`S
(
f
->
max°acksize
),S(f->
sizeupvÆues
));

407 
	`¥ötf
("%dÜocal%s, %d constant%s, %d function%s\n",

408 
	`S
(
f
->
sizñocv¨s
),S(f->
sizek
),S(f->
sizï
));

409 
	}
}

411 
	$PrötDebug
(c⁄° 
PrŸo
* 
f
)

413 
i
,
n
;

414 
n
=
f
->
sizek
;

415 
	`¥ötf
("c⁄°™t†(%dËf‹ %p:\n",
n
,
	`VOID
(
f
));

416 
i
=0; i<
n
; i++)

418 
	`¥ötf
("\t%d\t",
i
+1);

419 
	`PrötC⁄°™t
(
f
,
i
);

420 
	`¥ötf
("\n");

422 
n
=
f
->
sizñocv¨s
;

423 
	`¥ötf
("loˇl†(%dËf‹ %p:\n",
n
,
	`VOID
(
f
));

424 
i
=0; i<
n
; i++)

426 
	`¥ötf
("\t%d\t%s\t%d\t%d\n",

427 
i
,
	`gë°r
(
f
->
locv¨s
[i].
v¨«me
),f->locv¨s[i].
°¨çc
+1,f->locv¨s[i].
ídpc
+1);

429 
n
=
f
->
sizeupvÆues
;

430 
	`¥ötf
("upvÆue†(%dËf‹ %p:\n",
n
,
	`VOID
(
f
));

431 
i
=0; i<
n
; i++)

433 
	`¥ötf
("\t%d\t%s\t%d\t%d\n",

434 
i
,
	`UPVALNAME
(i),
f
->
upvÆues
[i].
ö°ack
,f->upvÆues[i].
idx
);

436 
	}
}

438 
	$PrötFun˘i⁄
(c⁄° 
PrŸo
* 
f
, 
fuŒ
)

440 
i
,
n
=
f
->
sizï
;

441 
	`PrötHódî
(
f
);

442 
	`PrötCode
(
f
);

443 i‡(
fuŒ
Ë
	`PrötDebug
(
f
);

444 
i
=0; i<
n
; i++Ë
	`PrötFun˘i⁄
(
f
->
p
[i],
fuŒ
);

445 
	}
}

	@lib/lua/lua-5.3.4/src/luaconf.h

8 #i‚de‡
luac⁄f_h


9 
	#luac⁄f_h


	)

11 
	~<limôs.h
>

12 
	~<°ddef.h
>

50 #i‡!
deföed
(
LUA_USE_C89
Ë&& deföed(
_WIN32
Ë&& !deföed(
_WIN32_WCE
)

51 
	#LUA_USE_WINDOWS


	)

55 #i‡
deföed
(
LUA_USE_WINDOWS
)

56 
	#LUA_DL_DLL


	)

57 
	#LUA_USE_C89


	)

61 #i‡
deföed
(
LUA_USE_LINUX
)

62 
	#LUA_USE_POSIX


	)

63 
	#LUA_USE_DLOPEN


	)

64 #unde‡
LUA_USE_READLINE


68 #i‡
deföed
(
LUA_USE_MACOSX
)

69 
	#LUA_USE_POSIX


	)

70 
	#LUA_USE_DLOPEN


	)

71 
	#LUA_USE_READLINE


	)

80 #i‡
deföed
(
LUA_USE_C89
Ë&& !deföed(
LUA_USE_WINDOWS
)

81 
	#LUA_C89_NUMBERS


	)

90 #i‡((
INT_MAX
 >> 15) >> 15) >= 1

91 
	#LUAI_BITSINT
 32

	)

94 
	#LUAI_BITSINT
 16

	)

109 
	#LUA_INT_INT
 1

	)

110 
	#LUA_INT_LONG
 2

	)

111 
	#LUA_INT_LONGLONG
 3

	)

114 
	#LUA_FLOAT_FLOAT
 1

	)

115 
	#LUA_FLOAT_DOUBLE
 2

	)

116 
	#LUA_FLOAT_LONGDOUBLE
 3

	)

118 #i‡
deföed
(
LUA_32BITS
)

122 #i‡
LUAI_BITSINT
 >= 32

123 
	#LUA_INT_TYPE
 
LUA_INT_INT


	)

125 
	#LUA_INT_TYPE
 
LUA_INT_LONG


	)

127 
	#LUA_FLOAT_TYPE
 
LUA_FLOAT_FLOAT


	)

129 #ñi‡
deföed
(
LUA_C89_NUMBERS
)

133 
	#LUA_INT_TYPE
 
LUA_INT_LONG


	)

134 
	#LUA_FLOAT_TYPE
 
LUA_FLOAT_DOUBLE


	)

142 #i‡!
deföed
(
LUA_INT_TYPE
)

143 
	#LUA_INT_TYPE
 
LUA_INT_LONGLONG


	)

146 #i‡!
deföed
(
LUA_FLOAT_TYPE
)

147 
	#LUA_FLOAT_TYPE
 
LUA_FLOAT_DOUBLE


	)

168 
	#LUA_PATH_SEP
 ";"

	)

169 
	#LUA_PATH_MARK
 "?"

	)

170 
	#LUA_EXEC_DIR
 "!"

	)

182 
	#LUA_VDIR
 
LUA_VERSION_MAJOR
 "." 
LUA_VERSION_MINOR


	)

183 #i‡
deföed
(
_WIN32
)

188 
	#LUA_LDIR
 "!\\lua\\"

	)

189 
	#LUA_CDIR
 "!\\"

	)

190 
	#LUA_SHRDIR
 "!\\..\\sh¨e\\lua\\" 
LUA_VDIR
 "\\"

	)

191 
	#LUA_PATH_DEFAULT
 \

192 
LUA_LDIR
"?.lua;" LUA_LDIR"?\\init.lua;" \

193 
LUA_CDIR
"?.lua;" LUA_CDIR"?\\init.lua;" \

194 
LUA_SHRDIR
"?.lua;" LUA_SHRDIR"?\\init.lua;" \

195 ".\\?.lua;" ".\\?\\öô.lua"

	)

196 
	#LUA_CPATH_DEFAULT
 \

197 
LUA_CDIR
"?.dll;" \

198 
LUA_CDIR
"..\\lib\\lua\\" 
LUA_VDIR
 "\\?.dll;" \

199 
LUA_CDIR
"lﬂdÆl.dŒ;" ".\\?.dŒ"

	)

203 
	#LUA_ROOT
 "/u§/loˇl/"

	)

204 
	#LUA_LDIR
 
LUA_ROOT
 "sh¨e/lua/" 
LUA_VDIR
 "/"

	)

205 
	#LUA_CDIR
 
LUA_ROOT
 "lib/lua/" 
LUA_VDIR
 "/"

	)

206 
	#LUA_PATH_DEFAULT
 \

207 
LUA_LDIR
"?.lua;" LUA_LDIR"?/init.lua;" \

208 
LUA_CDIR
"?.lua;" LUA_CDIR"?/init.lua;" \

209 "./?.lua;" "./?/öô.lua"

	)

210 
	#LUA_CPATH_DEFAULT
 \

211 
LUA_CDIR
"?.so;" LUA_CDIR"lﬂdÆl.so;" "./?.so"

	)

220 #i‡
deföed
(
_WIN32
)

221 
	#LUA_DIRSEP
 "\\"

	)

223 
	#LUA_DIRSEP
 "/"

	)

244 #i‡
deföed
(
LUA_BUILD_AS_DLL
)

246 #i‡
deföed
(
LUA_CORE
Ë|| deföed(
LUA_LIB
)

247 
	#LUA_API
 
	`__de˛•ec
(
dŒexp‹t
)

	)

249 
	#LUA_API
 
	`__de˛•ec
(
dŒimp‹t
)

	)

254 
	#LUA_API
 

	)

260 
	#LUALIB_API
 
LUA_API


	)

261 
	#LUAMOD_API
 
LUALIB_API


	)

278 #i‡
deföed
(
__GNUC__
Ë&& ((__GNUC__*100 + 
__GNUC_MINOR__
) >= 302) && \

279 
	$deföed
(
__ELF__
)

280 
	#LUAI_FUNC
 
	`__©åibuã__
((
	`visibûôy
("hiddí"))Ë

	)

282 
	#LUAI_FUNC
 

	)

285 
	#LUAI_DDEC
 
LUAI_FUNC


	)

286 
	#LUAI_DDEF


	)

303 #i‡
	`deföed
(
LUA_COMPAT_5_2
)

309 
	#LUA_COMPAT_MATHLIB


	)

314 
	#LUA_COMPAT_BITLIB


	)

319 
	#LUA_COMPAT_IPAIRS


	)

326 
	#LUA_COMPAT_APIINTCASTS


	)

331 #i‡
	`deföed
(
LUA_COMPAT_5_1
)

334 
	#LUA_COMPAT_MATHLIB


	)

335 
	#LUA_COMPAT_APIINTCASTS


	)

341 
	#LUA_COMPAT_UNPACK


	)

347 
	#LUA_COMPAT_LOADERS


	)

353 
	#lua_˝ˇŒ
(
L
,
f
,
u
) \

354 (
	`lua_pushcfun˘i⁄
(
L
, (
f
)), \

355 
	`lua_pushlightu£rd©a
(
L
,(
u
)), \

356 
	`lua_pˇŒ
(
L
,1,0,0))

	)

363 
	#LUA_COMPAT_LOG10


	)

369 
	#LUA_COMPAT_LOADSTRING


	)

374 
	#LUA_COMPAT_MAXN


	)

381 
	#lua_°æí
(
L
,
i
Ë
	`lua_øwÀn
(L, (i))

	)

383 
	#lua_objÀn
(
L
,
i
Ë
	`lua_øwÀn
(L, (i))

	)

385 
	#lua_equÆ
(
L
,
idx1
,
idx2
Ë
	`lua_com∑ª
(L,(idx1),(idx2),
LUA_OPEQ
)

	)

386 
	#lua_Às°h™
(
L
,
idx1
,
idx2
Ë
	`lua_com∑ª
(L,(idx1),(idx2),
LUA_OPLT
)

	)

392 
	#LUA_COMPAT_MODULE


	)

434 
	#l_Êo‹
(
x
Ë(
	`l_m©h›
(
Êo‹
)(x))

	)

436 
	#lua_numbî2°r
(
s
,
sz
,
n
) \

437 
	`l_•rötf
((
s
), 
sz
, 
LUA_NUMBER_FMT
, (
LUAI_UACNUMBER
)(
n
))

	)

447 
	#lua_numbîtoöãgî
(
n
,
p
) \

448 ((
n
Ë>(
LUA_NUMBER
)(
LUA_MININTEGER
) && \

449 (
n
Ë< -(
LUA_NUMBER
)(
LUA_MININTEGER
) && \

450 (*(
p
Ë(
LUA_INTEGER
)(
n
), 1))

	)

455 #i‡
LUA_FLOAT_TYPE
 =
LUA_FLOAT_FLOAT


457 
	#LUA_NUMBER
 

	)

459 
	#l_m©hlim
(
n
Ë(
FLT_
##n)

	)

461 
	#LUAI_UACNUMBER
 

	)

463 
	#LUA_NUMBER_FRMLEN
 ""

	)

464 
	#LUA_NUMBER_FMT
 "%.7g"

	)

466 
	#l_m©h›
(
›
Ë›##
f


	)

468 
	#lua_°r2numbî
(
s
,
p
Ë
	`°πof
((s), (p))

	)

471 #ñi‡
LUA_FLOAT_TYPE
 =
LUA_FLOAT_LONGDOUBLE


473 
	#LUA_NUMBER
 

	)

475 
	#l_m©hlim
(
n
Ë(
LDBL_
##n)

	)

477 
	#LUAI_UACNUMBER
 

	)

479 
	#LUA_NUMBER_FRMLEN
 "L"

	)

480 
	#LUA_NUMBER_FMT
 "%.19Lg"

	)

482 
	#l_m©h›
(
›
Ë›##
l


	)

484 
	#lua_°r2numbî
(
s
,
p
Ë
	`°πﬁd
((s), (p))

	)

486 #ñi‡
LUA_FLOAT_TYPE
 =
LUA_FLOAT_DOUBLE


488 
	#LUA_NUMBER
 

	)

490 
	#l_m©hlim
(
n
Ë(
DBL_
##n)

	)

492 
	#LUAI_UACNUMBER
 

	)

494 
	#LUA_NUMBER_FRMLEN
 ""

	)

495 
	#LUA_NUMBER_FMT
 "%.14g"

	)

497 
	#l_m©h›
(
›
Ë
	)
op

499 
	#lua_°r2numbî
(
s
,
p
Ë
	`°πod
((s), (p))

	)

526 
	#LUA_INTEGER_FMT
 "%" 
LUA_INTEGER_FRMLEN
 "d"

	)

528 
	#LUAI_UACINT
 
LUA_INTEGER


	)

530 
	#lua_öãgî2°r
(
s
,
sz
,
n
) \

531 
	`l_•rötf
((
s
), 
sz
, 
LUA_INTEGER_FMT
, (
LUAI_UACINT
)(
n
))

	)

537 
	#LUA_UNSIGNED
 
LUAI_UACINT


	)

542 #i‡
LUA_INT_TYPE
 =
LUA_INT_INT


544 
	#LUA_INTEGER
 

	)

545 
	#LUA_INTEGER_FRMLEN
 ""

	)

547 
	#LUA_MAXINTEGER
 
INT_MAX


	)

548 
	#LUA_MININTEGER
 
INT_MIN


	)

550 #ñi‡
LUA_INT_TYPE
 =
LUA_INT_LONG


552 
	#LUA_INTEGER
 

	)

553 
	#LUA_INTEGER_FRMLEN
 "l"

	)

555 
	#LUA_MAXINTEGER
 
LONG_MAX


	)

556 
	#LUA_MININTEGER
 
LONG_MIN


	)

558 #ñi‡
LUA_INT_TYPE
 =
LUA_INT_LONGLONG


561 #i‡
	`deföed
(
LLONG_MAX
)

564 
	#LUA_INTEGER
 

	)

565 
	#LUA_INTEGER_FRMLEN
 "Œ"

	)

567 
	#LUA_MAXINTEGER
 
LLONG_MAX


	)

568 
	#LUA_MININTEGER
 
LLONG_MIN


	)

570 #ñi‡
	`deföed
(
LUA_USE_WINDOWS
)

573 
	#LUA_INTEGER
 
__öt64


	)

574 
	#LUA_INTEGER_FRMLEN
 "I64"

	)

576 
	#LUA_MAXINTEGER
 
_I64_MAX


	)

577 
	#LUA_MININTEGER
 
_I64_MIN


	)

605 #i‡!
	`deföed
(
LUA_USE_C89
)

606 
	#l_•rötf
(
s
,
sz
,
f
,
i
Ë
	`¢¥ötf
(s,sz,f,i)

	)

608 
	#l_•rötf
(
s
,
sz
,
f
,
i
Ë(()(sz), 
	`•rötf
(s,f,i))

	)

618 #i‡!
	`deföed
(
LUA_USE_C89
)

619 
	#lua_°rx2numbî
(
s
,
p
Ë
	`lua_°r2numbî
(s,p)

	)

629 #i‡!
	`deföed
(
LUA_USE_C89
)

630 
	#lua_numbî2°rx
(
L
,
b
,
sz
,
f
,
n
) \

631 (()
L
, 
	`l_•rötf
(
b
,
sz
,
f
,(
LUAI_UACNUMBER
)(
n
)))

	)

641 #i‡
	`deföed
(
LUA_USE_C89
Ë|| (deföed(
HUGE_VAL
Ë&& !deföed(
HUGE_VALF
))

642 #unde‡
l_m©h›


643 #unde‡
lua_°r2numbî


644 
	#l_m©h›
(
›
Ë(
lua_Numbî
)›

	)

645 
	#lua_°r2numbî
(
s
,
p
Ë((
lua_Numbî
)
	`°πod
((s), (p)))

	)

655 
	#LUA_KCONTEXT
 
±rdiff_t


	)

657 #i‡!
	`deföed
(
LUA_USE_C89
Ë&& deföed(
__STDC_VERSION__
) && \

658 
__STDC_VERSION__
 >= 199901L

659 
	~<°döt.h
>

660 #i‡
	`deföed
(
INTPTR_MAX
)

661 #unde‡
LUA_KCONTEXT


662 
	#LUA_KCONTEXT
 
öçå_t


	)

672 #i‡!
	`deföed
(
lua_gëloˇÀde˝oöt
)

673 
	#lua_gëloˇÀde˝oöt
(Ë(
	`loˇÀc⁄v
()->
decimÆ_poöt
[0])

	)

699 #i‡
	`deföed
(
LUA_USE_APICHECK
)

700 
	~<as£π.h
>

701 
	#luai_≠icheck
(
l
,
e
Ë
	`as£π
”)

	)

721 #i‡
LUAI_BITSINT
 >= 32

722 
	#LUAI_MAXSTACK
 1000000

	)

724 
	#LUAI_MAXSTACK
 15000

	)

733 
	#LUA_EXTRASPACE
 ((*))

	)

741 
	#LUA_IDSIZE
 60

	)

751 #i‡
LUA_FLOAT_TYPE
 =
LUA_FLOAT_LONGDOUBLE


752 
	#LUAL_BUFFERSIZE
 8192

	)

754 
	#LUAL_BUFFERSIZE
 (()(0x80 * (*Ë* (
lua_I¡egî
)))

	)

765 
	#LUA_QL
(
x
Ë"'" x "'"

	)

766 
	#LUA_QS
 
	`LUA_QL
("%s")

	)

785 #i‡
	`deföed
(
LUA_LIB
Ë|| deföed(
lua_c
)

786 
	~<°dio.h
>

787 * 
	`_gë_°dout
(* 
L
);

788 
	#lua_put°rög
(
s
Ë(
	`fwrôe
((s), (), 
	`°æí
(s), 
	`_gë_°dout
(
L
)), 
	`fÊush
(_gë_°dout(L)))

	)

789 
	#lua_wrôe°rög
(
s
,
l
Ë(
	`fwrôe
((s), (), (l), 
	`_gë_°dout
(
L
)), 
	`fÊush
(_gë_°dout(L)))

	)

790 
	#lua_wrôñöe
(Ë(
	`lua_wrôe°rög
("\n", 1), 
	`fÊush
(
	`_gë_°dout
(
L
)))

	)

797 * 
	`_gë_°dîr
(* 
L
);

798 
	#lua_wrôe°rögîr‹
(
s
, 
p
) \

799 (
	`Ârötf
(
	`_gë_°dîr
(
L
), (
s
), (
p
)), 
	`fÊush
(_gë_°dîr(L)))

	)

	@lib/lua/lua-5.3.4/src/lualib.h

8 #i‚de‡
luÆib_h


9 
	#luÆib_h


	)

11 
	~"lua.h
"

15 
	#LUA_VERSUFFIX
 "_" 
LUA_VERSION_MAJOR
 "_" 
LUA_VERSION_MINOR


	)

18 
LUAMOD_API
 (
lua›í_ba£
Ë(
lua_Sèã
 *
L
);

20 
	#LUA_COLIBNAME
 "c‹outöe"

	)

21 
LUAMOD_API
 (
lua›í_c‹outöe
Ë(
lua_Sèã
 *
L
);

23 
	#LUA_TABLIBNAME
 "èbÀ"

	)

24 
LUAMOD_API
 (
lua›í_èbÀ
Ë(
lua_Sèã
 *
L
);

26 
	#LUA_IOLIBNAME
 "io"

	)

27 
LUAMOD_API
 (
lua›í_io
Ë(
lua_Sèã
 *
L
);

29 
	#LUA_OSLIBNAME
 "os"

	)

30 
LUAMOD_API
 (
lua›í_os
Ë(
lua_Sèã
 *
L
);

32 
	#LUA_STRLIBNAME
 "°rög"

	)

33 
LUAMOD_API
 (
lua›í_°rög
Ë(
lua_Sèã
 *
L
);

35 
	#LUA_UTF8LIBNAME
 "utf8"

	)

36 
LUAMOD_API
 (
lua›í_utf8
Ë(
lua_Sèã
 *
L
);

38 
	#LUA_BITLIBNAME
 "bô32"

	)

39 
LUAMOD_API
 (
lua›í_bô32
Ë(
lua_Sèã
 *
L
);

41 
	#LUA_MATHLIBNAME
 "m©h"

	)

42 
LUAMOD_API
 (
lua›í_m©h
Ë(
lua_Sèã
 *
L
);

44 
	#LUA_DBLIBNAME
 "debug"

	)

45 
LUAMOD_API
 (
lua›í_debug
Ë(
lua_Sèã
 *
L
);

47 
	#LUA_LOADLIBNAME
 "∑ckage"

	)

48 
LUAMOD_API
 (
lua›í_∑ckage
Ë(
lua_Sèã
 *
L
);

52 
LUALIB_API
 (
luaL_›ílibs
Ë(
lua_Sèã
 *
L
);

56 #i‡!
	`deföed
(
lua_as£π
)

57 
	#lua_as£π
(
x
Ë(()0)

	)

	@lib/lua/lua-5.3.4/src/lundump.c

7 
	#lundump_c


	)

8 
	#LUA_CORE


	)

10 
	~"Õªfix.h
"

13 
	~<°rög.h
>

15 
	~"lua.h
"

17 
	~"ldebug.h
"

18 
	~"ldo.h
"

19 
	~"lfunc.h
"

20 
	~"lmem.h
"

21 
	~"lobje˘.h
"

22 
	~"l°rög.h
"

23 
	~"lundump.h
"

24 
	~"lzio.h
"

27 #i‡!
deföed
(
luai_vîifycode
)

28 
	#luai_vîifycode
(
L
,
b
,
f
Ë

	)

33 
lua_Sèã
 *
	mL
;

34 
ZIO
 *
	mZ
;

35 c⁄° *
	m«me
;

36 } 
	tLﬂdSèã
;

39 
l_n‹ë
 
	$îr‹
(
LﬂdSèã
 *
S
, c⁄° *
why
) {

40 
	`luaO_pushf°rög
(
S
->
L
, "%s: %†¥ecompûed chunk", S->
«me
, 
why
);

41 
	`luaD_throw
(
S
->
L
, 
LUA_ERRSYNTAX
);

42 
	}
}

49 
	#LﬂdVe˘‹
(
S
,
b
,
n
Ë
	`LﬂdBlock
(S,b,“)*((b)[0]))

	)

51 
	$LﬂdBlock
 (
LﬂdSèã
 *
S
, *
b
, 
size_t
 
size
) {

52 i‡(
	`luaZ_ªad
(
S
->
Z
, 
b
, 
size
) != 0)

53 
	`îr‹
(
S
, "truncated");

54 
	}
}

57 
	#LﬂdV¨
(
S
,
x
Ë
	`LﬂdVe˘‹
(S,&x,1)

	)

60 
lu_byã
 
	$LﬂdByã
 (
LﬂdSèã
 *
S
) {

61 
lu_byã
 
x
;

62 
	`LﬂdV¨
(
S
, 
x
);

63  
x
;

64 
	}
}

67 
	$LﬂdI¡
 (
LﬂdSèã
 *
S
) {

68 
x
;

69 
	`LﬂdV¨
(
S
, 
x
);

70  
x
;

71 
	}
}

74 
lua_Numbî
 
	$LﬂdNumbî
 (
LﬂdSèã
 *
S
) {

75 
lua_Numbî
 
x
;

76 
	`LﬂdV¨
(
S
, 
x
);

77  
x
;

78 
	}
}

81 
lua_I¡egî
 
	$LﬂdI¡egî
 (
LﬂdSèã
 *
S
) {

82 
lua_I¡egî
 
x
;

83 
	`LﬂdV¨
(
S
, 
x
);

84  
x
;

85 
	}
}

88 
TSåög
 *
	$LﬂdSåög
 (
LﬂdSèã
 *
S
) {

89 
size_t
 
size
 = 
	`LﬂdByã
(
S
);

90 i‡(
size
 == 0xFF)

91 
	`LﬂdV¨
(
S
, 
size
);

92 i‡(
size
 == 0)

93  
NULL
;

94 i‡(--
size
 <
LUAI_MAXSHORTLEN
) {

95 
buff
[
LUAI_MAXSHORTLEN
];

96 
	`LﬂdVe˘‹
(
S
, 
buff
, 
size
);

97  
	`luaS_√wl°r
(
S
->
L
, 
buff
, 
size
);

100 
TSåög
 *
ts
 = 
	`luaS_¸óã g°robj
(
S
->
L
, 
size
);

101 
	`LﬂdVe˘‹
(
S
, 
	`gë°r
(
ts
), 
size
);

102  
ts
;

104 
	}
}

107 
	$LﬂdCode
 (
LﬂdSèã
 *
S
, 
PrŸo
 *
f
) {

108 
n
 = 
	`LﬂdI¡
(
S
);

109 
f
->
code
 = 
	`luaM_√wve˘‹
(
S
->
L
, 
n
, 
In°ru˘i⁄
);

110 
f
->
sizecode
 = 
n
;

111 
	`LﬂdVe˘‹
(
S
, 
f
->
code
, 
n
);

112 
	}
}

115 
LﬂdFun˘i⁄
(
LﬂdSèã
 *
S
, 
PrŸo
 *
f
, 
TSåög
 *
psour˚
);

118 
	$LﬂdC⁄°™ts
 (
LﬂdSèã
 *
S
, 
PrŸo
 *
f
) {

119 
i
;

120 
n
 = 
	`LﬂdI¡
(
S
);

121 
f
->
k
 = 
	`luaM_√wve˘‹
(
S
->
L
, 
n
, 
TVÆue
);

122 
f
->
sizek
 = 
n
;

123 
i
 = 0; i < 
n
; i++)

124 
	`£äûvÆue
(&
f
->
k
[
i
]);

125 
i
 = 0; i < 
n
; i++) {

126 
TVÆue
 *
o
 = &
f
->
k
[
i
];

127 
t
 = 
	`LﬂdByã
(
S
);

128 
t
) {

129 
LUA_TNIL
:

130 
	`£äûvÆue
(
o
);

132 
LUA_TBOOLEAN
:

133 
	`£tbvÆue
(
o
, 
	`LﬂdByã
(
S
));

135 
LUA_TNUMFLT
:

136 
	`£tÊtvÆue
(
o
, 
	`LﬂdNumbî
(
S
));

138 
LUA_TNUMINT
:

139 
	`£tivÆue
(
o
, 
	`LﬂdI¡egî
(
S
));

141 
LUA_TSHRSTR
:

142 
LUA_TLNGSTR
:

143 
	`£tsvÆue2n
(
S
->
L
, 
o
, 
	`LﬂdSåög
(S));

146 
	`lua_as£π
(0);

149 
	}
}

152 
	$LﬂdPrŸos
 (
LﬂdSèã
 *
S
, 
PrŸo
 *
f
) {

153 
i
;

154 
n
 = 
	`LﬂdI¡
(
S
);

155 
f
->
p
 = 
	`luaM_√wve˘‹
(
S
->
L
, 
n
, 
PrŸo
 *);

156 
f
->
sizï
 = 
n
;

157 
i
 = 0; i < 
n
; i++)

158 
f
->
p
[
i
] = 
NULL
;

159 
i
 = 0; i < 
n
; i++) {

160 
f
->
p
[
i
] = 
	`luaF_√w¥Ÿo
(
S
->
L
);

161 
	`LﬂdFun˘i⁄
(
S
, 
f
->
p
[
i
], f->
sour˚
);

163 
	}
}

166 
	$LﬂdUpvÆues
 (
LﬂdSèã
 *
S
, 
PrŸo
 *
f
) {

167 
i
, 
n
;

168 
n
 = 
	`LﬂdI¡
(
S
);

169 
f
->
upvÆues
 = 
	`luaM_√wve˘‹
(
S
->
L
, 
n
, 
UpvÆdesc
);

170 
f
->
sizeupvÆues
 = 
n
;

171 
i
 = 0; i < 
n
; i++)

172 
f
->
upvÆues
[
i
].
«me
 = 
NULL
;

173 
i
 = 0; i < 
n
; i++) {

174 
f
->
upvÆues
[
i
].
ö°ack
 = 
	`LﬂdByã
(
S
);

175 
f
->
upvÆues
[
i
].
idx
 = 
	`LﬂdByã
(
S
);

177 
	}
}

180 
	$LﬂdDebug
 (
LﬂdSèã
 *
S
, 
PrŸo
 *
f
) {

181 
i
, 
n
;

182 
n
 = 
	`LﬂdI¡
(
S
);

183 
f
->
löeöfo
 = 
	`luaM_√wve˘‹
(
S
->
L
, 
n
, );

184 
f
->
sizñöeöfo
 = 
n
;

185 
	`LﬂdVe˘‹
(
S
, 
f
->
löeöfo
, 
n
);

186 
n
 = 
	`LﬂdI¡
(
S
);

187 
f
->
locv¨s
 = 
	`luaM_√wve˘‹
(
S
->
L
, 
n
, 
LocV¨
);

188 
f
->
sizñocv¨s
 = 
n
;

189 
i
 = 0; i < 
n
; i++)

190 
f
->
locv¨s
[
i
].
v¨«me
 = 
NULL
;

191 
i
 = 0; i < 
n
; i++) {

192 
f
->
locv¨s
[
i
].
v¨«me
 = 
	`LﬂdSåög
(
S
);

193 
f
->
locv¨s
[
i
].
°¨çc
 = 
	`LﬂdI¡
(
S
);

194 
f
->
locv¨s
[
i
].
ídpc
 = 
	`LﬂdI¡
(
S
);

196 
n
 = 
	`LﬂdI¡
(
S
);

197 
i
 = 0; i < 
n
; i++)

198 
f
->
upvÆues
[
i
].
«me
 = 
	`LﬂdSåög
(
S
);

199 
	}
}

202 
	$LﬂdFun˘i⁄
 (
LﬂdSèã
 *
S
, 
PrŸo
 *
f
, 
TSåög
 *
psour˚
) {

203 
f
->
sour˚
 = 
	`LﬂdSåög
(
S
);

204 i‡(
f
->
sour˚
 =
NULL
)

205 
f
->
sour˚
 = 
psour˚
;

206 
f
->
löedeföed
 = 
	`LﬂdI¡
(
S
);

207 
f
->
œ°löedeföed
 = 
	`LﬂdI¡
(
S
);

208 
f
->
num∑øms
 = 
	`LﬂdByã
(
S
);

209 
f
->
is_v¨¨g
 = 
	`LﬂdByã
(
S
);

210 
f
->
max°acksize
 = 
	`LﬂdByã
(
S
);

211 
	`LﬂdCode
(
S
, 
f
);

212 
	`LﬂdC⁄°™ts
(
S
, 
f
);

213 
	`LﬂdUpvÆues
(
S
, 
f
);

214 
	`LﬂdPrŸos
(
S
, 
f
);

215 
	`LﬂdDebug
(
S
, 
f
);

216 
	}
}

219 
	$checklôîÆ
 (
LﬂdSèã
 *
S
, c⁄° *
s
, c⁄° *
msg
) {

220 
buff
[(
LUA_SIGNATURE
Ë+ (
LUAC_DATA
)];

221 
size_t
 
Àn
 = 
	`°æí
(
s
);

222 
	`LﬂdVe˘‹
(
S
, 
buff
, 
Àn
);

223 i‡(
	`memcmp
(
s
, 
buff
, 
Àn
) != 0)

224 
	`îr‹
(
S
, 
msg
);

225 
	}
}

228 
	$fchecksize
 (
LﬂdSèã
 *
S
, 
size_t
 
size
, c⁄° *
äame
) {

229 i‡(
	`LﬂdByã
(
S
Ë!
size
)

230 
	`îr‹
(
S
, 
	`luaO_pushf°rög
(S->
L
, "%†sizêmism©ch in", 
äame
));

231 
	}
}

234 
	#checksize
(
S
,
t
Ë
	`fchecksize
(S,—),#t)

	)

236 
	$checkHódî
 (
LﬂdSèã
 *
S
) {

237 
	`checklôîÆ
(
S
, 
LUA_SIGNATURE
 + 1, "notá");

238 i‡(
	`LﬂdByã
(
S
Ë!
LUAC_VERSION
)

239 
	`îr‹
(
S
, "version mismatch in");

240 i‡(
	`LﬂdByã
(
S
Ë!
LUAC_FORMAT
)

241 
	`îr‹
(
S
, "format mismatch in");

242 
	`checklôîÆ
(
S
, 
LUAC_DATA
, "corrupted");

243 
	`checksize
(
S
, );

244 
	`checksize
(
S
, 
size_t
);

245 
	`checksize
(
S
, 
In°ru˘i⁄
);

246 
	`checksize
(
S
, 
lua_I¡egî
);

247 
	`checksize
(
S
, 
lua_Numbî
);

248 i‡(
	`LﬂdI¡egî
(
S
Ë!
LUAC_INT
)

249 
	`îr‹
(
S
, "endianness mismatch in");

250 i‡(
	`LﬂdNumbî
(
S
Ë!
LUAC_NUM
)

251 
	`îr‹
(
S
, "float format mismatch in");

252 
	}
}

258 
LClosuª
 *
	$luaU_undump
(
lua_Sèã
 *
L
, 
ZIO
 *
Z
, c⁄° *
«me
) {

259 
LﬂdSèã
 
S
;

260 
LClosuª
 *
˛
;

261 i‡(*
«me
 == '@' || *name == '=')

262 
S
.
«me
 =Çame + 1;

263 i‡(*
«me
 =
LUA_SIGNATURE
[0])

264 
S
.
«me
 = "binary string";

266 
S
.
«me
 =Çame;

267 
S
.
L
 = L;

268 
S
.
Z
 = Z;

269 
	`checkHódî
(&
S
);

270 
˛
 = 
	`luaF_√wL˛osuª
(
L
, 
	`LﬂdByã
(&
S
));

271 
	`£t˛LvÆue
(
L
, L->
t›
, 
˛
);

272 
	`luaD_ö˘›
(
L
);

273 
˛
->
p
 = 
	`luaF_√w¥Ÿo
(
L
);

274 
	`LﬂdFun˘i⁄
(&
S
, 
˛
->
p
, 
NULL
);

275 
	`lua_as£π
(
˛
->
nupvÆues
 =˛->
p
->
sizeupvÆues
);

276 
	`luai_vîifycode
(
L
, 
buff
, 
˛
->
p
);

277  
˛
;

278 
	}
}

	@lib/lua/lua-5.3.4/src/lundump.h

7 #i‚de‡
lundump_h


8 
	#lundump_h


	)

10 
	~"Œimôs.h
"

11 
	~"lobje˘.h
"

12 
	~"lzio.h
"

16 
	#LUAC_DATA
 "\x19\x93\r\n\x1a\n"

	)

18 
	#LUAC_INT
 0x5678

	)

19 
	#LUAC_NUM
 
	`ˇ°_num
(370.5)

	)

21 
	#MYINT
(
s
Ë(s[0]-'0')

	)

22 
	#LUAC_VERSION
 (
	`MYINT
(
LUA_VERSION_MAJOR
)*16+MYINT(
LUA_VERSION_MINOR
))

	)

23 
	#LUAC_FORMAT
 0

	)

26 
LUAI_FUNC
 
LClosuª
* 
luaU_undump
 (
lua_Sèã
* 
L
, 
ZIO
* 
Z
, c⁄° * 
«me
);

29 
LUAI_FUNC
 
luaU_dump
 (
lua_Sèã
* 
L
, c⁄° 
PrŸo
* 
f
, 
lua_Wrôî
 
w
,

30 * 
d©a
, 
°rù
);

	@lib/lua/lua-5.3.4/src/lutf8lib.c

7 
	#lutf8lib_c


	)

8 
	#LUA_LIB


	)

10 
	~"Õªfix.h
"

13 
	~<as£π.h
>

14 
	~<limôs.h
>

15 
	~<°dlib.h
>

16 
	~<°rög.h
>

18 
	~"lua.h
"

20 
	~"œuxlib.h
"

21 
	~"luÆib.h
"

23 
	#MAXUNICODE
 0x10FFFF

	)

25 
	#isc⁄t
(
p
Ë((*’Ë& 0xC0Ë=0x80)

	)

30 
lua_I¡egî
 
	$u_po§ñ©
 (
lua_I¡egî
 
pos
, 
size_t
 
Àn
) {

31 i‡(
pos
 >= 0) Öos;

32 i‡(0u - (
size_t
)
pos
 > 
Àn
)  0;

33  (
lua_I¡egî
)
Àn
 + 
pos
 + 1;

34 
	}
}

40 c⁄° *
	$utf8_decode
 (c⁄° *
o
, *
vÆ
) {

41 c⁄° 
limôs
[] = {0xFF, 0x7F, 0x7FF, 0xFFFF};

42 c⁄° *
s
 = (c⁄° *)
o
;

43 
c
 = 
s
[0];

44 
ªs
 = 0;

45 i‡(
c
 < 0x80)

46 
ªs
 = 
c
;

48 
cou¡
 = 0;

49 
c
 & 0x40) {

50 
cc
 = 
s
[++
cou¡
];

51 i‡((
cc
 & 0xC0) != 0x80)

52  
NULL
;

53 
ªs
 = (ª†<< 6Ë| (
cc
 & 0x3F);

54 
c
 <<= 1;

56 
ªs
 |((
c
 & 0x7FË<< (
cou¡
 * 5));

57 i‡(
cou¡
 > 3 || 
ªs
 > 
MAXUNICODE
 ||Ñe†<
limôs
[count])

58  
NULL
;

59 
s
 +
cou¡
;

61 i‡(
vÆ
Ë*vÆ = 
ªs
;

62  (c⁄° *)
s
 + 1;

63 
	}
}

71 
	$utÊí
 (
lua_Sèã
 *
L
) {

72 
n
 = 0;

73 
size_t
 
Àn
;

74 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
Àn
);

75 
lua_I¡egî
 
posi
 = 
	`u_po§ñ©
(
	`luaL_›töãgî
(
L
, 2, 1), 
Àn
);

76 
lua_I¡egî
 
posj
 = 
	`u_po§ñ©
(
	`luaL_›töãgî
(
L
, 3, -1), 
Àn
);

77 
	`luaL_¨gcheck
(
L
, 1 <
posi
 && --posò<(
lua_I¡egî
)
Àn
, 2,

79 
	`luaL_¨gcheck
(
L
, --
posj
 < (
lua_I¡egî
)
Àn
, 3,

81 
posi
 <
posj
) {

82 c⁄° *
s1
 = 
	`utf8_decode
(
s
 + 
posi
, 
NULL
);

83 i‡(
s1
 =
NULL
) {

84 
	`lua_pushnû
(
L
);

85 
	`lua_pushöãgî
(
L
, 
posi
 + 1);

88 
posi
 = 
s1
 - 
s
;

89 
n
++;

91 
	`lua_pushöãgî
(
L
, 
n
);

93 
	}
}

100 
	$codïoöt
 (
lua_Sèã
 *
L
) {

101 
size_t
 
Àn
;

102 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
Àn
);

103 
lua_I¡egî
 
posi
 = 
	`u_po§ñ©
(
	`luaL_›töãgî
(
L
, 2, 1), 
Àn
);

104 
lua_I¡egî
 
po£
 = 
	`u_po§ñ©
(
	`luaL_›töãgî
(
L
, 3, 
posi
), 
Àn
);

105 
n
;

106 c⁄° *
£
;

107 
	`luaL_¨gcheck
(
L
, 
posi
 >= 1, 2, "out ofÑange");

108 
	`luaL_¨gcheck
(
L
, 
po£
 <(
lua_I¡egî
)
Àn
, 3, "out ofÑange");

109 i‡(
posi
 > 
po£
)  0;

110 i‡(
po£
 - 
posi
 >
INT_MAX
)

111  
	`luaL_îr‹
(
L
, "string sliceÅooÜong");

112 
n
 = ()(
po£
 - 
posi
) + 1;

113 
	`luaL_check°ack
(
L
, 
n
, "string sliceÅooÜong");

114 
n
 = 0;

115 
£
 = 
s
 + 
po£
;

116 
s
 +
posi
 - 1; s < 
£
;) {

117 
code
;

118 
s
 = 
	`utf8_decode
(s, &
code
);

119 i‡(
s
 =
NULL
)

120  
	`luaL_îr‹
(
L
, "invalid UTF-8 code");

121 
	`lua_pushöãgî
(
L
, 
code
);

122 
n
++;

124  
n
;

125 
	}
}

128 
	$pushutfch¨
 (
lua_Sèã
 *
L
, 
¨g
) {

129 
lua_I¡egî
 
code
 = 
	`luaL_checköãgî
(
L
, 
¨g
);

130 
	`luaL_¨gcheck
(
L
, 0 <
code
 && codê<
MAXUNICODE
, 
¨g
, "value out ofÑange");

131 
	`lua_pushf°rög
(
L
, "%U", ()
code
);

132 
	}
}

138 
	$utfch¨
 (
lua_Sèã
 *
L
) {

139 
n
 = 
	`lua_gët›
(
L
);

140 i‡(
n
 == 1)

141 
	`pushutfch¨
(
L
, 1);

143 
i
;

144 
luaL_Buf„r
 
b
;

145 
	`luaL_bufföô
(
L
, &
b
);

146 
i
 = 1; i <
n
; i++) {

147 
	`pushutfch¨
(
L
, 
i
);

148 
	`luaL_addvÆue
(&
b
);

150 
	`luaL_pushªsu…
(&
b
);

153 
	}
}

160 
	$byãoff£t
 (
lua_Sèã
 *
L
) {

161 
size_t
 
Àn
;

162 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
Àn
);

163 
lua_I¡egî
 
n
 = 
	`luaL_checköãgî
(
L
, 2);

164 
lua_I¡egî
 
posi
 = (
n
 >0Ë? 1 : 
Àn
 + 1;

165 
posi
 = 
	`u_po§ñ©
(
	`luaL_›töãgî
(
L
, 3,Öosi), 
Àn
);

166 
	`luaL_¨gcheck
(
L
, 1 <
posi
 && --posò<(
lua_I¡egî
)
Àn
, 3,

168 i‡(
n
 == 0) {

170 
posi
 > 0 && 
	`isc⁄t
(
s
 +Öosi))Öosi--;

173 i‡(
	`isc⁄t
(
s
 + 
posi
))

174 
	`luaL_îr‹
(
L
, "initialÖosition isá continuation byte");

175 i‡(
n
 < 0) {

176 
n
 < 0 && 
posi
 > 0) {

178 
posi
--;

179 } 
posi
 > 0 && 
	`isc⁄t
(
s
 +Öosi));

180 
n
++;

184 
n
--;

185 
n
 > 0 && 
posi
 < (
lua_I¡egî
)
Àn
) {

187 
posi
++;

188 } 
	`isc⁄t
(
s
 + 
posi
));

189 
n
--;

193 i‡(
n
 == 0)

194 
	`lua_pushöãgî
(
L
, 
posi
 + 1);

196 
	`lua_pushnû
(
L
);

198 
	}
}

201 
	$ôî_aux
 (
lua_Sèã
 *
L
) {

202 
size_t
 
Àn
;

203 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
Àn
);

204 
lua_I¡egî
 
n
 = 
	`lua_toöãgî
(
L
, 2) - 1;

205 i‡(
n
 < 0)

206 
n
 = 0;

207 i‡(
n
 < (
lua_I¡egî
)
Àn
) {

208 
n
++;

209 
	`isc⁄t
(
s
 + 
n
))Ç++;

211 i‡(
n
 >(
lua_I¡egî
)
Àn
)

214 
code
;

215 c⁄° *
√xt
 = 
	`utf8_decode
(
s
 + 
n
, &
code
);

216 i‡(
√xt
 =
NULL
 || 
	`isc⁄t
(next))

217  
	`luaL_îr‹
(
L
, "invalid UTF-8 code");

218 
	`lua_pushöãgî
(
L
, 
n
 + 1);

219 
	`lua_pushöãgî
(
L
, 
code
);

222 
	}
}

225 
	$ôî_codes
 (
lua_Sèã
 *
L
) {

226 
	`luaL_check°rög
(
L
, 1);

227 
	`lua_pushcfun˘i⁄
(
L
, 
ôî_aux
);

228 
	`lua_pushvÆue
(
L
, 1);

229 
	`lua_pushöãgî
(
L
, 0);

231 
	}
}

235 
	#UTF8PATT
 "[\0-\x7F\xC2-\xF4][\x80-\xBF]*"

	)

238 c⁄° 
luaL_Reg
 
	gfuncs
[] = {

239 {"off£t", 
byãoff£t
},

240 {"codïoöt", 
codïoöt
},

241 {"ch¨", 
utfch¨
},

242 {"Àn", 
utÊí
},

243 {"codes", 
ôî_codes
},

245 {"ch¨∑âîn", 
NULL
},

246 {
NULL
, NULL}

250 
LUAMOD_API
 
	$lua›í_utf8
 (
lua_Sèã
 *
L
) {

251 
	`luaL_√wlib
(
L
, 
funcs
);

252 
	`lua_pushl°rög
(
L
, 
UTF8PATT
, (UTF8PATT)/() - 1);

253 
	`lua_£tfõld
(
L
, -2, "charpattern");

255 
	}
}

	@lib/lua/lua-5.3.4/src/lvm.c

7 
	#lvm_c


	)

8 
	#LUA_CORE


	)

10 
	~"Õªfix.h
"

12 
	~<Êﬂt.h
>

13 
	~<limôs.h
>

14 
	~<m©h.h
>

15 
	~<°dio.h
>

16 
	~<°dlib.h
>

17 
	~<°rög.h
>

19 
	~"lua.h
"

21 
	~"ldebug.h
"

22 
	~"ldo.h
"

23 
	~"lfunc.h
"

24 
	~"lgc.h
"

25 
	~"lobje˘.h
"

26 
	~"l›codes.h
"

27 
	~"l°©e.h
"

28 
	~"l°rög.h
"

29 
	~"…abÀ.h
"

30 
	~"…m.h
"

31 
	~"lvm.h
"

35 
	#MAXTAGLOOP
 2000

	)

44 #i‡!
deföed
(
l_ötfôsf
)

47 
	#NBM
 (
	`l_m©hlim
(
MANT_DIG
))

	)

56 #i‡((((
LUA_MAXINTEGER
 >> (
NBM
 / 4)) >> (NBM / 4)) >> (NBM / 4)) \

57 >> (
	gNBM
 - (3 * (NBM / 4)))) > 0

59 
	#l_ötfôsf
(
i
) \

60 (-((
lua_I¡egî
)1 << 
NBM
Ë<(
i
Ë&& (iË<(÷ua_I¡egî)1 << NBM))

	)

72 
	$luaV_t⁄umbî_
 (c⁄° 
TVÆue
 *
obj
, 
lua_Numbî
 *
n
) {

73 
TVÆue
 
v
;

74 i‡(
	`âisöãgî
(
obj
)) {

75 *
n
 = 
	`ˇ°_num
(
	`ivÆue
(
obj
));

78 i‡(
	`cvt2num
(
obj
) &&

79 
	`luaO_°r2num
(
	`svÆue
(
obj
), &
v
Ë=
	`v¶í
(obj) + 1) {

80 *
n
 = 
	`nvÆue
(&
v
);

85 
	}
}

94 
	$luaV_toöãgî
 (c⁄° 
TVÆue
 *
obj
, 
lua_I¡egî
 *
p
, 
mode
) {

95 
TVÆue
 
v
;

96 
agaö
:

97 i‡(
	`âisÊﬂt
(
obj
)) {

98 
lua_Numbî
 
n
 = 
	`ÊtvÆue
(
obj
);

99 
lua_Numbî
 
f
 = 
	`l_Êo‹
(
n
);

100 i‡(
n
 !
f
) {

101 i‡(
mode
 == 0)  0;

102 i‡(
mode
 > 1)

103 
f
 += 1;

105  
	`lua_numbîtoöãgî
(
f
, 
p
);

107 i‡(
	`âisöãgî
(
obj
)) {

108 *
p
 = 
	`ivÆue
(
obj
);

111 i‡(
	`cvt2num
(
obj
) &&

112 
	`luaO_°r2num
(
	`svÆue
(
obj
), &
v
Ë=
	`v¶í
(obj) + 1) {

113 
obj
 = &
v
;

114 
agaö
;

117 
	}
}

135 
	$f‹limô
 (c⁄° 
TVÆue
 *
obj
, 
lua_I¡egî
 *
p
,Üua_I¡egî 
°ï
,

136 *
°›now
) {

137 *
°›now
 = 0;

138 i‡(!
	`luaV_toöãgî
(
obj
, 
p
, (
°ï
 < 0 ? 2 : 1))) {

139 
lua_Numbî
 
n
;

140 i‡(!
	`t⁄umbî
(
obj
, &
n
))

142 i‡(
	`luai_num…
(0, 
n
)) {

143 *
p
 = 
LUA_MAXINTEGER
;

144 i‡(
°ï
 < 0Ë*
°›now
 = 1;

147 *
p
 = 
LUA_MININTEGER
;

148 i‡(
°ï
 >0Ë*
°›now
 = 1;

152 
	}
}

160 
	$luaV_föishgë
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
t
, TVÆuê*
key
, 
StkId
 
vÆ
,

161 c⁄° 
TVÆue
 *
¶Ÿ
) {

162 
lo›
;

163 c⁄° 
TVÆue
 *
tm
;

164 
lo›
 = 0;Üo› < 
MAXTAGLOOP
;Üoop++) {

165 i‡(
¶Ÿ
 =
NULL
) {

166 
	`lua_as£π
(!
	`âi°abÀ
(
t
));

167 
tm
 = 
	`luaT_gëtmbyobj
(
L
, 
t
, 
TM_INDEX
);

168 i‡(
	`âi¢û
(
tm
))

169 
	`luaG_ty≥îr‹
(
L
, 
t
, "index");

173 
	`lua_as£π
(
	`âi¢û
(
¶Ÿ
));

174 
tm
 = 
	`Á°tm
(
L
, 
	`hvÆue
(
t
)->
më©abÀ
, 
TM_INDEX
);

175 i‡(
tm
 =
NULL
) {

176 
	`£äûvÆue
(
vÆ
);

181 i‡(
	`âisfun˘i⁄
(
tm
)) {

182 
	`luaT_ˇŒTM
(
L
, 
tm
, 
t
, 
key
, 
vÆ
, 1);

185 
t
 = 
tm
;

186 i‡(
	`luaV_Á°gë
(
L
,
t
,
key
,
¶Ÿ
,
luaH_gë
)) {

187 
	`£tobj2s
(
L
, 
vÆ
, 
¶Ÿ
);

192 
	`luaG_ru√º‹
(
L
, "'__index' chainÅooÜong;ÖossibleÜoop");

193 
	}
}

203 
	$luaV_föish£t
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
t
, TVÆuê*
key
,

204 
StkId
 
vÆ
, c⁄° 
TVÆue
 *
¶Ÿ
) {

205 
lo›
;

206 
lo›
 = 0;Üo› < 
MAXTAGLOOP
;Üoop++) {

207 c⁄° 
TVÆue
 *
tm
;

208 i‡(
¶Ÿ
 !
NULL
) {

209 
TabÀ
 *
h
 = 
	`hvÆue
(
t
);

210 
	`lua_as£π
(
	`âi¢û
(
¶Ÿ
));

211 
tm
 = 
	`Á°tm
(
L
, 
h
->
më©abÀ
, 
TM_NEWINDEX
);

212 i‡(
tm
 =
NULL
) {

213 i‡(
¶Ÿ
 =
luaO_nûobje˘
)

214 
¶Ÿ
 = 
	`luaH_√wkey
(
L
, 
h
, 
key
);

216 
	`£tobj2t
(
L
, 
	`ˇ°
(
TVÆue
 *, 
¶Ÿ
), 
vÆ
);

217 
	`övÆid©eTMˇche
(
h
);

218 
	`luaC_b¨rõrback
(
L
, 
h
, 
vÆ
);

224 i‡(
	`âi¢û
(
tm
 = 
	`luaT_gëtmbyobj
(
L
, 
t
, 
TM_NEWINDEX
)))

225 
	`luaG_ty≥îr‹
(
L
, 
t
, "index");

228 i‡(
	`âisfun˘i⁄
(
tm
)) {

229 
	`luaT_ˇŒTM
(
L
, 
tm
, 
t
, 
key
, 
vÆ
, 0);

232 
t
 = 
tm
;

233 i‡(
	`luaV_Á°£t
(
L
, 
t
, 
key
, 
¶Ÿ
, 
luaH_gë
, 
vÆ
))

237 
	`luaG_ru√º‹
(
L
, "'__newindex' chainÅooÜong;ÖossibleÜoop");

238 
	}
}

248 
	$l_°rcmp
 (c⁄° 
TSåög
 *
ls
, c⁄° TSåög *
rs
) {

249 c⁄° *
l
 = 
	`gë°r
(
ls
);

250 
size_t
 
Œ
 = 
	`ts¶í
(
ls
);

251 c⁄° *
r
 = 
	`gë°r
(
rs
);

252 
size_t
 
Ã
 = 
	`ts¶í
(
rs
);

254 
ãmp
 = 
	`°rcﬁl
(
l
, 
r
);

255 i‡(
ãmp
 != 0)

256  
ãmp
;

258 
size_t
 
Àn
 = 
	`°æí
(
l
);

259 i‡(
Àn
 =
Ã
)

260  (
Àn
 =
Œ
) ? 0 : 1;

261 i‡(
Àn
 =
Œ
)

264 
Àn
++;

265 
l
 +
Àn
; 
Œ
 -Àn; 
r
 +Àn; 
Ã
 -=Üen;

268 
	}
}

281 
	$LTötÊﬂt
 (
lua_I¡egî
 
i
, 
lua_Numbî
 
f
) {

282 #i‡
	`deföed
(
l_ötfôsf
)

283 i‡(!
	`l_ötfôsf
(
i
)) {

284 i‡(
f
 >-
	`ˇ°_num
(
LUA_MININTEGER
))

286 i‡(
f
 > 
	`ˇ°_num
(
LUA_MININTEGER
))

287  (
i
 < 
	`ˇ°
(
lua_I¡egî
, 
f
));

292  
	`luai_num…
(
	`ˇ°_num
(
i
), 
f
);

293 
	}
}

300 
	$LEötÊﬂt
 (
lua_I¡egî
 
i
, 
lua_Numbî
 
f
) {

301 #i‡
	`deföed
(
l_ötfôsf
)

302 i‡(!
	`l_ötfôsf
(
i
)) {

303 i‡(
f
 >-
	`ˇ°_num
(
LUA_MININTEGER
))

305 i‡(
f
 >
	`ˇ°_num
(
LUA_MININTEGER
))

306  (
i
 <
	`ˇ°
(
lua_I¡egî
, 
f
));

311  
	`luai_numÀ
(
	`ˇ°_num
(
i
), 
f
);

312 
	}
}

318 
	$LTnum
 (c⁄° 
TVÆue
 *
l
, c⁄° TVÆuê*
r
) {

319 i‡(
	`âisöãgî
(
l
)) {

320 
lua_I¡egî
 
li
 = 
	`ivÆue
(
l
);

321 i‡(
	`âisöãgî
(
r
))

322  
li
 < 
	`ivÆue
(
r
);

324  
	`LTötÊﬂt
(
li
, 
	`ÊtvÆue
(
r
));

327 
lua_Numbî
 
lf
 = 
	`ÊtvÆue
(
l
);

328 i‡(
	`âisÊﬂt
(
r
))

329  
	`luai_num…
(
lf
, 
	`ÊtvÆue
(
r
));

330 i‡(
	`luai_numi¢™
(
lf
))

333  !
	`LEötÊﬂt
(
	`ivÆue
(
r
), 
lf
);

335 
	}
}

341 
	$LEnum
 (c⁄° 
TVÆue
 *
l
, c⁄° TVÆuê*
r
) {

342 i‡(
	`âisöãgî
(
l
)) {

343 
lua_I¡egî
 
li
 = 
	`ivÆue
(
l
);

344 i‡(
	`âisöãgî
(
r
))

345  
li
 <
	`ivÆue
(
r
);

347  
	`LEötÊﬂt
(
li
, 
	`ÊtvÆue
(
r
));

350 
lua_Numbî
 
lf
 = 
	`ÊtvÆue
(
l
);

351 i‡(
	`âisÊﬂt
(
r
))

352  
	`luai_numÀ
(
lf
, 
	`ÊtvÆue
(
r
));

353 i‡(
	`luai_numi¢™
(
lf
))

356  !
	`LTötÊﬂt
(
	`ivÆue
(
r
), 
lf
);

358 
	}
}

364 
	$luaV_Às°h™
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
l
, c⁄° TVÆuê*
r
) {

365 
ªs
;

366 i‡(
	`âi¢umbî
(
l
Ë&&Åti¢umbî(
r
))

367  
	`LTnum
(
l
, 
r
);

368 i‡(
	`âis°rög
(
l
Ë&&Åtis°rög(
r
))

369  
	`l_°rcmp
(
	`tsvÆue
(
l
),ÅsvÆue(
r
)) < 0;

370 i‡((
ªs
 = 
	`luaT_ˇŒ‹dîTM
(
L
, 
l
, 
r
, 
TM_LT
)) < 0)

371 
	`luaG_‹dîîr‹
(
L
, 
l
, 
r
);

372  
ªs
;

373 
	}
}

384 
	$luaV_Às£quÆ
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
l
, c⁄° TVÆuê*
r
) {

385 
ªs
;

386 i‡(
	`âi¢umbî
(
l
Ë&&Åti¢umbî(
r
))

387  
	`LEnum
(
l
, 
r
);

388 i‡(
	`âis°rög
(
l
Ë&&Åtis°rög(
r
))

389  
	`l_°rcmp
(
	`tsvÆue
(
l
),ÅsvÆue(
r
)) <= 0;

390 i‡((
ªs
 = 
	`luaT_ˇŒ‹dîTM
(
L
, 
l
, 
r
, 
TM_LE
)) >= 0)

391  
ªs
;

393 
L
->
ci
->
ˇŒ°©us
 |
CIST_LEQ
;

394 
ªs
 = 
	`luaT_ˇŒ‹dîTM
(
L
, 
r
, 
l
, 
TM_LT
);

395 
L
->
ci
->
ˇŒ°©us
 ^
CIST_LEQ
;

396 i‡(
ªs
 < 0)

397 
	`luaG_‹dîîr‹
(
L
, 
l
, 
r
);

398  !
ªs
;

400 
	}
}

407 
	$luaV_equÆobj
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
t1
, c⁄° TVÆuê*
t2
) {

408 c⁄° 
TVÆue
 *
tm
;

409 i‡(
	`ây≥
(
t1
Ë!ây≥(
t2
)) {

410 i‡(
	`ânov
(
t1
Ë!ânov(
t2
Ë||Åäov—1Ë!
LUA_TNUMBER
)

413 
lua_I¡egî
 
i1
, 
i2
;

414  (
	`toöãgî
(
t1
, &
i1
Ë&&Åoöãgî(
t2
, &
i2
) && i1 == i2);

418 
	`ây≥
(
t1
)) {

419 
LUA_TNIL
:  1;

420 
LUA_TNUMINT
:  (
	`ivÆue
(
t1
Ë=ivÆue(
t2
));

421 
LUA_TNUMFLT
:  
	`luai_numeq
(
	`ÊtvÆue
(
t1
), f…vÆue(
t2
));

422 
LUA_TBOOLEAN
:  
	`bvÆue
(
t1
Ë=bvÆue(
t2
);

423 
LUA_TLIGHTUSERDATA
:  
	`pvÆue
(
t1
Ë=pvÆue(
t2
);

424 
LUA_TLCF
:  
	`fvÆue
(
t1
Ë=fvÆue(
t2
);

425 
LUA_TSHRSTR
:  
	`eqshr°r
(
	`tsvÆue
(
t1
),ÅsvÆue(
t2
));

426 
LUA_TLNGSTR
:  
	`luaS_eq g°r
(
	`tsvÆue
(
t1
),ÅsvÆue(
t2
));

427 
LUA_TUSERDATA
: {

428 i‡(
	`uvÆue
(
t1
Ë=uvÆue(
t2
))  1;

429 i‡(
L
 =
NULL
)  0;

430 
tm
 = 
	`Á°tm
(
L
, 
	`uvÆue
(
t1
)->
më©abÀ
, 
TM_EQ
);

431 i‡(
tm
 =
NULL
)

432 
tm
 = 
	`Á°tm
(
L
, 
	`uvÆue
(
t2
)->
më©abÀ
, 
TM_EQ
);

435 
LUA_TTABLE
: {

436 i‡(
	`hvÆue
(
t1
Ë=hvÆue(
t2
))  1;

437 i‡(
L
 =
NULL
)  0;

438 
tm
 = 
	`Á°tm
(
L
, 
	`hvÆue
(
t1
)->
më©abÀ
, 
TM_EQ
);

439 i‡(
tm
 =
NULL
)

440 
tm
 = 
	`Á°tm
(
L
, 
	`hvÆue
(
t2
)->
më©abÀ
, 
TM_EQ
);

444  
	`gcvÆue
(
t1
Ë=gcvÆue(
t2
);

446 i‡(
tm
 =
NULL
)

448 
	`luaT_ˇŒTM
(
L
, 
tm
, 
t1
, 
t2
, L->
t›
, 1);

449  !
	`l_isÁl£
(
L
->
t›
);

450 
	}
}

454 
	#to°rög
(
L
,
o
) \

455 (
	`âis°rög
(
o
Ë|| (
	`cvt2°r
(oË&& (
	`luaO_to°rög
(
L
, o), 1)))

	)

457 
	#i£m±y°r
(
o
Ë(
	`âisshr°rög
(oË&& 
	`tsvÆue
(o)->
shæí
 =0)

	)

460 
	$c›y2buff
 (
StkId
 
t›
, 
n
, *
buff
) {

461 
size_t
 
é
 = 0;

463 
size_t
 
l
 = 
	`v¶í
(
t›
 - 
n
);

464 
	`mem˝y
(
buff
 + 
é
, 
	`svÆue
(
t›
 - 
n
), 
l
 * ());

465 
é
 +
l
;

466 } --
n
 > 0);

467 
	}
}

474 
	$luaV_c⁄ˇt
 (
lua_Sèã
 *
L
, 
tŸÆ
) {

475 
	`lua_as£π
(
tŸÆ
 >= 2);

477 
StkId
 
t›
 = 
L
->top;

478 
n
 = 2;

479 i‡(!(
	`âis°rög
(
t›
-2Ë|| 
	`cvt2°r
—›-2)Ë|| !
	`to°rög
(
L
,Åop-1))

480 
	`luaT_åyböTM
(
L
, 
t›
-2,Å›-1,Å›-2, 
TM_CONCAT
);

481 i‡(
	`i£m±y°r
(
t›
 - 1))

482 
	`ˇ°_void
(
	`to°rög
(
L
, 
t›
 - 2));

483 i‡(
	`i£m±y°r
(
t›
 - 2)) {

484 
	`£tobjs2s
(
L
, 
t›
 - 2,Åop - 1);

488 
size_t
 
é
 = 
	`v¶í
(
t›
 - 1);

489 
TSåög
 *
ts
;

491 
n
 = 1;Ç < 
tŸÆ
 && 
	`to°rög
(
L
, 
t›
 -Ç - 1);Ç++) {

492 
size_t
 
l
 = 
	`v¶í
(
t›
 - 
n
 - 1);

493 i‡(
l
 >(
MAX_SIZE
/()Ë- 
é
)

494 
	`luaG_ru√º‹
(
L
, "stringÜength overflow");

495 
é
 +
l
;

497 i‡(
é
 <
LUAI_MAXSHORTLEN
) {

498 
buff
[
LUAI_MAXSHORTLEN
];

499 
	`c›y2buff
(
t›
, 
n
, 
buff
);

500 
ts
 = 
	`luaS_√wl°r
(
L
, 
buff
, 
é
);

503 
ts
 = 
	`luaS_¸óã g°robj
(
L
, 
é
);

504 
	`c›y2buff
(
t›
, 
n
, 
	`gë°r
(
ts
));

506 
	`£tsvÆue2s
(
L
, 
t›
 - 
n
, 
ts
);

508 
tŸÆ
 -
n
-1;

509 
L
->
t›
 -
n
-1;

510 } 
tŸÆ
 > 1);

511 
	}
}

517 
	$luaV_objÀn
 (
lua_Sèã
 *
L
, 
StkId
 
ø
, c⁄° 
TVÆue
 *
rb
) {

518 c⁄° 
TVÆue
 *
tm
;

519 
	`ây≥
(
rb
)) {

520 
LUA_TTABLE
: {

521 
TabÀ
 *
h
 = 
	`hvÆue
(
rb
);

522 
tm
 = 
	`Á°tm
(
L
, 
h
->
më©abÀ
, 
TM_LEN
);

523 i‡(
tm
) ;

524 
	`£tivÆue
(
ø
, 
	`luaH_gën
(
h
));

527 
LUA_TSHRSTR
: {

528 
	`£tivÆue
(
ø
, 
	`tsvÆue
(
rb
)->
shæí
);

531 
LUA_TLNGSTR
: {

532 
	`£tivÆue
(
ø
, 
	`tsvÆue
(
rb
)->
u
.
 gÀn
);

536 
tm
 = 
	`luaT_gëtmbyobj
(
L
, 
rb
, 
TM_LEN
);

537 i‡(
	`âi¢û
(
tm
))

538 
	`luaG_ty≥îr‹
(
L
, 
rb
, "getÜength of");

542 
	`luaT_ˇŒTM
(
L
, 
tm
, 
rb
,Ñb, 
ø
, 1);

543 
	}
}

552 
lua_I¡egî
 
	$luaV_div
 (
lua_Sèã
 *
L
, 
lua_I¡egî
 
m
,Üua_I¡egî 
n
) {

553 i‡(
	`l_ˇ°S2U
(
n
) + 1u <= 1u) {

554 i‡(
n
 == 0)

555 
	`luaG_ru√º‹
(
L
, "attemptÅo divide by zero");

556  
	`öt›
(-, 0, 
m
);

559 
lua_I¡egî
 
q
 = 
m
 / 
n
;

560 i‡((
m
 ^ 
n
) < 0 && m %Ç != 0)

561 
q
 -= 1;

562  
q
;

564 
	}
}

572 
lua_I¡egî
 
	$luaV_mod
 (
lua_Sèã
 *
L
, 
lua_I¡egî
 
m
,Üua_I¡egî 
n
) {

573 i‡(
	`l_ˇ°S2U
(
n
) + 1u <= 1u) {

574 i‡(
n
 == 0)

575 
	`luaG_ru√º‹
(
L
, "attemptÅoÖerform 'n%%0'");

579 
lua_I¡egî
 
r
 = 
m
 % 
n
;

580 i‡(
r
 !0 && (
m
 ^ 
n
) < 0)

581 
r
 +
n
;

582  
r
;

584 
	}
}

588 
	#NBITS
 
	`ˇ°_öt
((
lua_I¡egî
Ë* 
CHAR_BIT
)

	)

593 
lua_I¡egî
 
	$luaV_shi·l
 (
lua_I¡egî
 
x
,Üua_I¡egî 
y
) {

594 i‡(
y
 < 0) {

595 i‡(
y
 <-
NBITS
)  0;

596  
	`öt›
(>>, 
x
, -
y
);

599 i‡(
y
 >
NBITS
)  0;

600  
	`öt›
(<<, 
x
, 
y
);

602 
	}
}

610 
LClosuª
 *
	$gëˇched
 (
PrŸo
 *
p
, 
UpVÆ
 **
ícup
, 
StkId
 
ba£
) {

611 
LClosuª
 *
c
 = 
p
->
ˇche
;

612 i‡(
c
 !
NULL
) {

613 
nup
 = 
p
->
sizeupvÆues
;

614 
UpvÆdesc
 *
uv
 = 
p
->
upvÆues
;

615 
i
;

616 
i
 = 0; i < 
nup
; i++) {

617 
TVÆue
 *
v
 = 
uv
[
i
].
ö°ack
 ? 
ba£
 + uv[i].
idx
 : 
ícup
[uv[i].idx]->v;

618 i‡(
c
->
upvÆs
[
i
]->
v
 != v)

619  
NULL
;

622  
c
;

623 
	}
}

632 
	$push˛osuª
 (
lua_Sèã
 *
L
, 
PrŸo
 *
p
, 
UpVÆ
 **
ícup
, 
StkId
 
ba£
,

633 
StkId
 
ø
) {

634 
nup
 = 
p
->
sizeupvÆues
;

635 
UpvÆdesc
 *
uv
 = 
p
->
upvÆues
;

636 
i
;

637 
LClosuª
 *
n˛
 = 
	`luaF_√wL˛osuª
(
L
, 
nup
);

638 
n˛
->
p
 =Ö;

639 
	`£t˛LvÆue
(
L
, 
ø
, 
n˛
);

640 
i
 = 0; i < 
nup
; i++) {

641 i‡(
uv
[
i
].
ö°ack
)

642 
n˛
->
upvÆs
[
i
] = 
	`luaF_födupvÆ
(
L
, 
ba£
 + 
uv
[i].
idx
);

644 
n˛
->
upvÆs
[
i
] = 
ícup
[
uv
[i].
idx
];

645 
n˛
->
upvÆs
[
i
]->
ªfcou¡
++;

648 i‡(!
	`isbœck
(
p
))

649 
p
->
ˇche
 = 
n˛
;

650 
	}
}

656 
	$luaV_föishOp
 (
lua_Sèã
 *
L
) {

657 
CÆlInfo
 *
ci
 = 
L
->ci;

658 
StkId
 
ba£
 = 
ci
->
u
.
l
.base;

659 
In°ru˘i⁄
 
ö°
 = *(
ci
->
u
.
l
.
ßvedpc
 - 1);

660 
OpCode
 
›
 = 
	`GET_OPCODE
(
ö°
);

661 
›
) {

662 
OP_ADD
: 
OP_SUB
: 
OP_MUL
: 
OP_DIV
: 
OP_IDIV
:

663 
OP_BAND
: 
OP_BOR
: 
OP_BXOR
: 
OP_SHL
: 
OP_SHR
:

664 
OP_MOD
: 
OP_POW
:

665 
OP_UNM
: 
OP_BNOT
: 
OP_LEN
:

666 
OP_GETTABUP
: 
OP_GETTABLE
: 
OP_SELF
: {

667 
	`£tobjs2s
(
L
, 
ba£
 + 
	`GETARG_A
(
ö°
), --L->
t›
);

670 
OP_LE
: 
OP_LT
: 
OP_EQ
: {

671 
ªs
 = !
	`l_isÁl£
(
L
->
t›
 - 1);

672 
L
->
t›
--;

673 i‡(
ci
->
ˇŒ°©us
 & 
CIST_LEQ
) {

674 
	`lua_as£π
(
›
 =
OP_LE
);

675 
ci
->
ˇŒ°©us
 ^
CIST_LEQ
;

676 
ªs
 = !res;

678 
	`lua_as£π
(
	`GET_OPCODE
(*
ci
->
u
.
l
.
ßvedpc
Ë=
OP_JMP
);

679 i‡(
ªs
 !
	`GETARG_A
(
ö°
))

680 
ci
->
u
.
l
.
ßvedpc
++;

683 
OP_CONCAT
: {

684 
StkId
 
t›
 = 
L
->top - 1;

685 
b
 = 
	`GETARG_B
(
ö°
);

686 
tŸÆ
 = 
	`ˇ°_öt
(
t›
 - 1 - (
ba£
 + 
b
));

687 
	`£tobj2s
(
L
, 
t›
 - 2,Åop);

688 i‡(
tŸÆ
 > 1) {

689 
L
->
t›
 =Åop - 1;

690 
	`luaV_c⁄ˇt
(
L
, 
tŸÆ
);

693 
	`£tobj2s
(
L
, 
ci
->
u
.
l
.
ba£
 + 
	`GETARG_A
(
ö°
), L->
t›
 - 1);

694 
L
->
t›
 = 
ci
->top;

697 
OP_TFORCALL
: {

698 
	`lua_as£π
(
	`GET_OPCODE
(*
ci
->
u
.
l
.
ßvedpc
Ë=
OP_TFORLOOP
);

699 
L
->
t›
 = 
ci
->top;

702 
OP_CALL
: {

703 i‡(
	`GETARG_C
(
ö°
) - 1 >= 0)

704 
L
->
t›
 = 
ci
->top;

707 
OP_TAILCALL
: 
OP_SETTABUP
: 
OP_SETTABLE
:

709 : 
	`lua_as£π
(0);

711 
	}
}

728 
	#RA
(
i
Ë(
ba£
+
	`GETARG_A
(i))

	)

729 
	#RB
(
i
Ë
	`check_exp
(
	`gëBMode
(
	`GET_OPCODE
(i)Ë=
OpArgR
, 
ba£
+
	`GETARG_B
(i))

	)

730 
	#RC
(
i
Ë
	`check_exp
(
	`gëCMode
(
	`GET_OPCODE
(i)Ë=
OpArgR
, 
ba£
+
	`GETARG_C
(i))

	)

731 
	#RKB
(
i
Ë
	`check_exp
(
	`gëBMode
(
	`GET_OPCODE
(i)Ë=
OpArgK
, \

732 
	`ISK
(
	`GETARG_B
(
i
)Ë? 
k
+
	`INDEXK
(GETARG_B(i)Ë: 
ba£
+GETARG_B(i))

	)

733 
	#RKC
(
i
Ë
	`check_exp
(
	`gëCMode
(
	`GET_OPCODE
(i)Ë=
OpArgK
, \

734 
	`ISK
(
	`GETARG_C
(
i
)Ë? 
k
+
	`INDEXK
(GETARG_C(i)Ë: 
ba£
+GETARG_C(i))

	)

738 
	#dojump
(
ci
,
i
,
e
) \

739 { 
a
 = 
	`GETARG_A
(
i
); \

740 i‡(
a
 !0Ë
	`luaF_˛o£
(
L
, 
ci
->
u
.
l
.
ba£
 +á - 1); \

741 
ci
->
u
.
l
.
ßvedpc
 +
	`GETARG_sBx
(
i
Ë+ 
e
; }

	)

744 
	#d⁄extjump
(
ci
Ë{ 
i
 = *ci->
u
.
l
.
ßvedpc
; 
	`dojump
(ci, i, 1); }

	)

747 
	#PrŸe˘
(
x
Ë{ {x;}; 
ba£
 = 
ci
->
u
.
l
.ba£; }

	)

749 
	#checkGC
(
L
,
c
) \

750 { 
	`luaC_c⁄dGC
(
L
, L->
t›
 = (
c
), \

751 
	`PrŸe˘
(
L
->
t›
 = 
ci
->top)); \

752 
	`luai_thªadyõld
(
L
); }

	)

756 
	#vm„tch
() { \

757 
i
 = *(
ci
->
u
.
l
.
ßvedpc
++); \

758 i‡(
L
->
hookmask
 & (
LUA_MASKLINE
 | 
LUA_MASKCOUNT
)) \

759 
	`PrŸe˘
(
	`luaG_åa˚exec
(
L
)); \

760 
ø
 = 
	`RA
(
i
); \

761 
	`lua_as£π
(
ba£
 =
ci
->
u
.
l
.base); \

762 
	`lua_as£π
(
ba£
 <
L
->
t›
 && L->t› < L->
°ack
 + L->
°acksize
); \

763 }

	)

765 
	#vmdi•©ch
(
o
Ëo)

	)

766 
	#vmˇ£
(
l
Ël:

	)

767 
	#vmbªak
 

	)

774 
	#gëèbÀPrŸe˘ed
(
L
,
t
,
k
,
v
Ë{ c⁄° 
TVÆue
 *
¶Ÿ
; \

775 i‡(
	`luaV_Á°gë
(
L
,
t
,
k
,
¶Ÿ
,
luaH_gë
)Ë{ 
	`£tobj2s
(L, 
v
, slot); } \

776 
	`PrŸe˘
(
	`luaV_föishgë
(
L
,
t
,
k
,
v
,
¶Ÿ
)); }

	)

780 
	#£âabÀPrŸe˘ed
(
L
,
t
,
k
,
v
Ë{ c⁄° 
TVÆue
 *
¶Ÿ
; \

781 i‡(!
	`luaV_Á°£t
(
L
,
t
,
k
,
¶Ÿ
,
luaH_gë
,
v
)) \

782 
	`PrŸe˘
(
	`luaV_föish£t
(
L
,
t
,
k
,
v
,
¶Ÿ
)); }

	)

786 
	$luaV_execuã
 (
lua_Sèã
 *
L
) {

787 
CÆlInfo
 *
ci
 = 
L
->ci;

788 
LClosuª
 *
˛
;

789 
TVÆue
 *
k
;

790 
StkId
 
ba£
;

791 
ci
->
ˇŒ°©us
 |
CIST_FRESH
;

792 
√w‰ame
:

793 
	`lua_as£π
(
ci
 =
L
->ci);

794 
˛
 = 
	`˛LvÆue
(
ci
->
func
);

795 
k
 = 
˛
->
p
->k;

796 
ba£
 = 
ci
->
u
.
l
.base;

799 
In°ru˘i⁄
 
i
;

800 
StkId
 
ø
;

801 
	`vm„tch
();

802 
	`vmdi•©ch
 (
	`GET_OPCODE
(
i
)) {

803 
	`vmˇ£
(
OP_MOVE
) {

804 
	`£tobjs2s
(
L
, 
ø
, 
	`RB
(
i
));

805 
vmbªak
;

807 
	`vmˇ£
(
OP_LOADK
) {

808 
TVÆue
 *
rb
 = 
k
 + 
	`GETARG_Bx
(
i
);

809 
	`£tobj2s
(
L
, 
ø
, 
rb
);

810 
vmbªak
;

812 
	`vmˇ£
(
OP_LOADKX
) {

813 
TVÆue
 *
rb
;

814 
	`lua_as£π
(
	`GET_OPCODE
(*
ci
->
u
.
l
.
ßvedpc
Ë=
OP_EXTRAARG
);

815 
rb
 = 
k
 + 
	`GETARG_Ax
(*
ci
->
u
.
l
.
ßvedpc
++);

816 
	`£tobj2s
(
L
, 
ø
, 
rb
);

817 
vmbªak
;

819 
	`vmˇ£
(
OP_LOADBOOL
) {

820 
	`£tbvÆue
(
ø
, 
	`GETARG_B
(
i
));

821 i‡(
	`GETARG_C
(
i
)Ë
ci
->
u
.
l
.
ßvedpc
++;

822 
vmbªak
;

824 
	`vmˇ£
(
OP_LOADNIL
) {

825 
b
 = 
	`GETARG_B
(
i
);

827 
	`£äûvÆue
(
ø
++);

828 } 
b
--);

829 
vmbªak
;

831 
	`vmˇ£
(
OP_GETUPVAL
) {

832 
b
 = 
	`GETARG_B
(
i
);

833 
	`£tobj2s
(
L
, 
ø
, 
˛
->
upvÆs
[
b
]->
v
);

834 
vmbªak
;

836 
	`vmˇ£
(
OP_GETTABUP
) {

837 
TVÆue
 *
upvÆ
 = 
˛
->
upvÆs
[
	`GETARG_B
(
i
)]->
v
;

838 
TVÆue
 *
rc
 = 
	`RKC
(
i
);

839 
	`gëèbÀPrŸe˘ed
(
L
, 
upvÆ
, 
rc
, 
ø
);

840 
vmbªak
;

842 
	`vmˇ£
(
OP_GETTABLE
) {

843 
StkId
 
rb
 = 
	`RB
(
i
);

844 
TVÆue
 *
rc
 = 
	`RKC
(
i
);

845 
	`gëèbÀPrŸe˘ed
(
L
, 
rb
, 
rc
, 
ø
);

846 
vmbªak
;

848 
	`vmˇ£
(
OP_SETTABUP
) {

849 
TVÆue
 *
upvÆ
 = 
˛
->
upvÆs
[
	`GETARG_A
(
i
)]->
v
;

850 
TVÆue
 *
rb
 = 
	`RKB
(
i
);

851 
TVÆue
 *
rc
 = 
	`RKC
(
i
);

852 
	`£âabÀPrŸe˘ed
(
L
, 
upvÆ
, 
rb
, 
rc
);

853 
vmbªak
;

855 
	`vmˇ£
(
OP_SETUPVAL
) {

856 
UpVÆ
 *
uv
 = 
˛
->
upvÆs
[
	`GETARG_B
(
i
)];

857 
	`£tobj
(
L
, 
uv
->
v
, 
ø
);

858 
	`luaC_upvÆb¨rõr
(
L
, 
uv
);

859 
vmbªak
;

861 
	`vmˇ£
(
OP_SETTABLE
) {

862 
TVÆue
 *
rb
 = 
	`RKB
(
i
);

863 
TVÆue
 *
rc
 = 
	`RKC
(
i
);

864 
	`£âabÀPrŸe˘ed
(
L
, 
ø
, 
rb
, 
rc
);

865 
vmbªak
;

867 
	`vmˇ£
(
OP_NEWTABLE
) {

868 
b
 = 
	`GETARG_B
(
i
);

869 
c
 = 
	`GETARG_C
(
i
);

870 
TabÀ
 *
t
 = 
	`luaH_√w
(
L
);

871 
	`£thvÆue
(
L
, 
ø
, 
t
);

872 i‡(
b
 !0 || 
c
 != 0)

873 
	`luaH_ªsize
(
L
, 
t
, 
	`luaO_fb2öt
(
b
),ÜuaO_fb2öt(
c
));

874 
	`checkGC
(
L
, 
ø
 + 1);

875 
vmbªak
;

877 
	`vmˇ£
(
OP_SELF
) {

878 c⁄° 
TVÆue
 *
aux
;

879 
StkId
 
rb
 = 
	`RB
(
i
);

880 
TVÆue
 *
rc
 = 
	`RKC
(
i
);

881 
TSåög
 *
key
 = 
	`tsvÆue
(
rc
);

882 
	`£tobjs2s
(
L
, 
ø
 + 1, 
rb
);

883 i‡(
	`luaV_Á°gë
(
L
, 
rb
, 
key
, 
aux
, 
luaH_gë°r
)) {

884 
	`£tobj2s
(
L
, 
ø
, 
aux
);

886 
	`PrŸe˘
(
	`luaV_föishgë
(
L
, 
rb
, 
rc
, 
ø
, 
aux
));

887 
vmbªak
;

889 
	`vmˇ£
(
OP_ADD
) {

890 
TVÆue
 *
rb
 = 
	`RKB
(
i
);

891 
TVÆue
 *
rc
 = 
	`RKC
(
i
);

892 
lua_Numbî
 
nb
;Üua_Numbî 
nc
;

893 i‡(
	`âisöãgî
(
rb
Ë&&Åtisöãgî(
rc
)) {

894 
lua_I¡egî
 
ib
 = 
	`ivÆue
(
rb
);Üua_I¡egî 
ic
 = ivÆue(
rc
);

895 
	`£tivÆue
(
ø
, 
	`öt›
(+, 
ib
, 
ic
));

897 i‡(
	`t⁄umbî
(
rb
, &
nb
Ë&&Å⁄umbî(
rc
, &
nc
)) {

898 
	`£tÊtvÆue
(
ø
, 
	`luai_numadd
(
L
, 
nb
, 
nc
));

900 { 
	`PrŸe˘
(
	`luaT_åyböTM
(
L
, 
rb
, 
rc
, 
ø
, 
TM_ADD
)); }

901 
vmbªak
;

903 
	`vmˇ£
(
OP_SUB
) {

904 
TVÆue
 *
rb
 = 
	`RKB
(
i
);

905 
TVÆue
 *
rc
 = 
	`RKC
(
i
);

906 
lua_Numbî
 
nb
;Üua_Numbî 
nc
;

907 i‡(
	`âisöãgî
(
rb
Ë&&Åtisöãgî(
rc
)) {

908 
lua_I¡egî
 
ib
 = 
	`ivÆue
(
rb
);Üua_I¡egî 
ic
 = ivÆue(
rc
);

909 
	`£tivÆue
(
ø
, 
	`öt›
(-, 
ib
, 
ic
));

911 i‡(
	`t⁄umbî
(
rb
, &
nb
Ë&&Å⁄umbî(
rc
, &
nc
)) {

912 
	`£tÊtvÆue
(
ø
, 
	`luai_numsub
(
L
, 
nb
, 
nc
));

914 { 
	`PrŸe˘
(
	`luaT_åyböTM
(
L
, 
rb
, 
rc
, 
ø
, 
TM_SUB
)); }

915 
vmbªak
;

917 
	`vmˇ£
(
OP_MUL
) {

918 
TVÆue
 *
rb
 = 
	`RKB
(
i
);

919 
TVÆue
 *
rc
 = 
	`RKC
(
i
);

920 
lua_Numbî
 
nb
;Üua_Numbî 
nc
;

921 i‡(
	`âisöãgî
(
rb
Ë&&Åtisöãgî(
rc
)) {

922 
lua_I¡egî
 
ib
 = 
	`ivÆue
(
rb
);Üua_I¡egî 
ic
 = ivÆue(
rc
);

923 
	`£tivÆue
(
ø
, 
	`öt›
(*, 
ib
, 
ic
));

925 i‡(
	`t⁄umbî
(
rb
, &
nb
Ë&&Å⁄umbî(
rc
, &
nc
)) {

926 
	`£tÊtvÆue
(
ø
, 
	`luai_nummul
(
L
, 
nb
, 
nc
));

928 { 
	`PrŸe˘
(
	`luaT_åyböTM
(
L
, 
rb
, 
rc
, 
ø
, 
TM_MUL
)); }

929 
vmbªak
;

931 
	`vmˇ£
(
OP_DIV
) {

932 
TVÆue
 *
rb
 = 
	`RKB
(
i
);

933 
TVÆue
 *
rc
 = 
	`RKC
(
i
);

934 
lua_Numbî
 
nb
;Üua_Numbî 
nc
;

935 i‡(
	`t⁄umbî
(
rb
, &
nb
Ë&&Å⁄umbî(
rc
, &
nc
)) {

936 
	`£tÊtvÆue
(
ø
, 
	`luai_numdiv
(
L
, 
nb
, 
nc
));

938 { 
	`PrŸe˘
(
	`luaT_åyböTM
(
L
, 
rb
, 
rc
, 
ø
, 
TM_DIV
)); }

939 
vmbªak
;

941 
	`vmˇ£
(
OP_BAND
) {

942 
TVÆue
 *
rb
 = 
	`RKB
(
i
);

943 
TVÆue
 *
rc
 = 
	`RKC
(
i
);

944 
lua_I¡egî
 
ib
;Üua_I¡egî 
ic
;

945 i‡(
	`toöãgî
(
rb
, &
ib
Ë&&Åoöãgî(
rc
, &
ic
)) {

946 
	`£tivÆue
(
ø
, 
	`öt›
(&, 
ib
, 
ic
));

948 { 
	`PrŸe˘
(
	`luaT_åyböTM
(
L
, 
rb
, 
rc
, 
ø
, 
TM_BAND
)); }

949 
vmbªak
;

951 
	`vmˇ£
(
OP_BOR
) {

952 
TVÆue
 *
rb
 = 
	`RKB
(
i
);

953 
TVÆue
 *
rc
 = 
	`RKC
(
i
);

954 
lua_I¡egî
 
ib
;Üua_I¡egî 
ic
;

955 i‡(
	`toöãgî
(
rb
, &
ib
Ë&&Åoöãgî(
rc
, &
ic
)) {

956 
	`£tivÆue
(
ø
, 
	`öt›
(|, 
ib
, 
ic
));

958 { 
	`PrŸe˘
(
	`luaT_åyböTM
(
L
, 
rb
, 
rc
, 
ø
, 
TM_BOR
)); }

959 
vmbªak
;

961 
	`vmˇ£
(
OP_BXOR
) {

962 
TVÆue
 *
rb
 = 
	`RKB
(
i
);

963 
TVÆue
 *
rc
 = 
	`RKC
(
i
);

964 
lua_I¡egî
 
ib
;Üua_I¡egî 
ic
;

965 i‡(
	`toöãgî
(
rb
, &
ib
Ë&&Åoöãgî(
rc
, &
ic
)) {

966 
	`£tivÆue
(
ø
, 
	`öt›
(^, 
ib
, 
ic
));

968 { 
	`PrŸe˘
(
	`luaT_åyböTM
(
L
, 
rb
, 
rc
, 
ø
, 
TM_BXOR
)); }

969 
vmbªak
;

971 
	`vmˇ£
(
OP_SHL
) {

972 
TVÆue
 *
rb
 = 
	`RKB
(
i
);

973 
TVÆue
 *
rc
 = 
	`RKC
(
i
);

974 
lua_I¡egî
 
ib
;Üua_I¡egî 
ic
;

975 i‡(
	`toöãgî
(
rb
, &
ib
Ë&&Åoöãgî(
rc
, &
ic
)) {

976 
	`£tivÆue
(
ø
, 
	`luaV_shi·l
(
ib
, 
ic
));

978 { 
	`PrŸe˘
(
	`luaT_åyböTM
(
L
, 
rb
, 
rc
, 
ø
, 
TM_SHL
)); }

979 
vmbªak
;

981 
	`vmˇ£
(
OP_SHR
) {

982 
TVÆue
 *
rb
 = 
	`RKB
(
i
);

983 
TVÆue
 *
rc
 = 
	`RKC
(
i
);

984 
lua_I¡egî
 
ib
;Üua_I¡egî 
ic
;

985 i‡(
	`toöãgî
(
rb
, &
ib
Ë&&Åoöãgî(
rc
, &
ic
)) {

986 
	`£tivÆue
(
ø
, 
	`luaV_shi·l
(
ib
, -
ic
));

988 { 
	`PrŸe˘
(
	`luaT_åyböTM
(
L
, 
rb
, 
rc
, 
ø
, 
TM_SHR
)); }

989 
vmbªak
;

991 
	`vmˇ£
(
OP_MOD
) {

992 
TVÆue
 *
rb
 = 
	`RKB
(
i
);

993 
TVÆue
 *
rc
 = 
	`RKC
(
i
);

994 
lua_Numbî
 
nb
;Üua_Numbî 
nc
;

995 i‡(
	`âisöãgî
(
rb
Ë&&Åtisöãgî(
rc
)) {

996 
lua_I¡egî
 
ib
 = 
	`ivÆue
(
rb
);Üua_I¡egî 
ic
 = ivÆue(
rc
);

997 
	`£tivÆue
(
ø
, 
	`luaV_mod
(
L
, 
ib
, 
ic
));

999 i‡(
	`t⁄umbî
(
rb
, &
nb
Ë&&Å⁄umbî(
rc
, &
nc
)) {

1000 
lua_Numbî
 
m
;

1001 
	`luai_nummod
(
L
, 
nb
, 
nc
, 
m
);

1002 
	`£tÊtvÆue
(
ø
, 
m
);

1004 { 
	`PrŸe˘
(
	`luaT_åyböTM
(
L
, 
rb
, 
rc
, 
ø
, 
TM_MOD
)); }

1005 
vmbªak
;

1007 
	`vmˇ£
(
OP_IDIV
) {

1008 
TVÆue
 *
rb
 = 
	`RKB
(
i
);

1009 
TVÆue
 *
rc
 = 
	`RKC
(
i
);

1010 
lua_Numbî
 
nb
;Üua_Numbî 
nc
;

1011 i‡(
	`âisöãgî
(
rb
Ë&&Åtisöãgî(
rc
)) {

1012 
lua_I¡egî
 
ib
 = 
	`ivÆue
(
rb
);Üua_I¡egî 
ic
 = ivÆue(
rc
);

1013 
	`£tivÆue
(
ø
, 
	`luaV_div
(
L
, 
ib
, 
ic
));

1015 i‡(
	`t⁄umbî
(
rb
, &
nb
Ë&&Å⁄umbî(
rc
, &
nc
)) {

1016 
	`£tÊtvÆue
(
ø
, 
	`luai_numidiv
(
L
, 
nb
, 
nc
));

1018 { 
	`PrŸe˘
(
	`luaT_åyböTM
(
L
, 
rb
, 
rc
, 
ø
, 
TM_IDIV
)); }

1019 
vmbªak
;

1021 
	`vmˇ£
(
OP_POW
) {

1022 
TVÆue
 *
rb
 = 
	`RKB
(
i
);

1023 
TVÆue
 *
rc
 = 
	`RKC
(
i
);

1024 
lua_Numbî
 
nb
;Üua_Numbî 
nc
;

1025 i‡(
	`t⁄umbî
(
rb
, &
nb
Ë&&Å⁄umbî(
rc
, &
nc
)) {

1026 
	`£tÊtvÆue
(
ø
, 
	`luai_numpow
(
L
, 
nb
, 
nc
));

1028 { 
	`PrŸe˘
(
	`luaT_åyböTM
(
L
, 
rb
, 
rc
, 
ø
, 
TM_POW
)); }

1029 
vmbªak
;

1031 
	`vmˇ£
(
OP_UNM
) {

1032 
TVÆue
 *
rb
 = 
	`RB
(
i
);

1033 
lua_Numbî
 
nb
;

1034 i‡(
	`âisöãgî
(
rb
)) {

1035 
lua_I¡egî
 
ib
 = 
	`ivÆue
(
rb
);

1036 
	`£tivÆue
(
ø
, 
	`öt›
(-, 0, 
ib
));

1038 i‡(
	`t⁄umbî
(
rb
, &
nb
)) {

1039 
	`£tÊtvÆue
(
ø
, 
	`luai_numunm
(
L
, 
nb
));

1042 
	`PrŸe˘
(
	`luaT_åyböTM
(
L
, 
rb
,Ñb, 
ø
, 
TM_UNM
));

1044 
vmbªak
;

1046 
	`vmˇ£
(
OP_BNOT
) {

1047 
TVÆue
 *
rb
 = 
	`RB
(
i
);

1048 
lua_I¡egî
 
ib
;

1049 i‡(
	`toöãgî
(
rb
, &
ib
)) {

1050 
	`£tivÆue
(
ø
, 
	`öt›
(^, ~
	`l_ˇ°S2U
(0), 
ib
));

1053 
	`PrŸe˘
(
	`luaT_åyböTM
(
L
, 
rb
,Ñb, 
ø
, 
TM_BNOT
));

1055 
vmbªak
;

1057 
	`vmˇ£
(
OP_NOT
) {

1058 
TVÆue
 *
rb
 = 
	`RB
(
i
);

1059 
ªs
 = 
	`l_isÁl£
(
rb
);

1060 
	`£tbvÆue
(
ø
, 
ªs
);

1061 
vmbªak
;

1063 
	`vmˇ£
(
OP_LEN
) {

1064 
	`PrŸe˘
(
	`luaV_objÀn
(
L
, 
ø
, 
	`RB
(
i
)));

1065 
vmbªak
;

1067 
	`vmˇ£
(
OP_CONCAT
) {

1068 
b
 = 
	`GETARG_B
(
i
);

1069 
c
 = 
	`GETARG_C
(
i
);

1070 
StkId
 
rb
;

1071 
L
->
t›
 = 
ba£
 + 
c
 + 1;

1072 
	`PrŸe˘
(
	`luaV_c⁄ˇt
(
L
, 
c
 - 
b
 + 1));

1073 
ø
 = 
	`RA
(
i
);

1074 
rb
 = 
ba£
 + 
b
;

1075 
	`£tobjs2s
(
L
, 
ø
, 
rb
);

1076 
	`checkGC
(
L
, (
ø
 >
rb
 ?Ña + 1 :Ñb));

1077 
L
->
t›
 = 
ci
->top;

1078 
vmbªak
;

1080 
	`vmˇ£
(
OP_JMP
) {

1081 
	`dojump
(
ci
, 
i
, 0);

1082 
vmbªak
;

1084 
	`vmˇ£
(
OP_EQ
) {

1085 
TVÆue
 *
rb
 = 
	`RKB
(
i
);

1086 
TVÆue
 *
rc
 = 
	`RKC
(
i
);

1087 
	`PrŸe˘
(

1088 i‡(
	`luaV_equÆobj
(
L
, 
rb
, 
rc
Ë!
	`GETARG_A
(
i
))

1089 
ci
->
u
.
l
.
ßvedpc
++;

1091 
	`d⁄extjump
(
ci
);

1093 
vmbªak
;

1095 
	`vmˇ£
(
OP_LT
) {

1096 
	`PrŸe˘
(

1097 i‡(
	`luaV_Às°h™
(
L
, 
	`RKB
(
i
), 
	`RKC
(i)Ë!
	`GETARG_A
(i))

1098 
ci
->
u
.
l
.
ßvedpc
++;

1100 
	`d⁄extjump
(
ci
);

1102 
vmbªak
;

1104 
	`vmˇ£
(
OP_LE
) {

1105 
	`PrŸe˘
(

1106 i‡(
	`luaV_Às£quÆ
(
L
, 
	`RKB
(
i
), 
	`RKC
(i)Ë!
	`GETARG_A
(i))

1107 
ci
->
u
.
l
.
ßvedpc
++;

1109 
	`d⁄extjump
(
ci
);

1111 
vmbªak
;

1113 
	`vmˇ£
(
OP_TEST
) {

1114 i‡(
	`GETARG_C
(
i
Ë? 
	`l_isÁl£
(
ø
) : !l_isfalse(ra))

1115 
ci
->
u
.
l
.
ßvedpc
++;

1117 
	`d⁄extjump
(
ci
);

1118 
vmbªak
;

1120 
	`vmˇ£
(
OP_TESTSET
) {

1121 
TVÆue
 *
rb
 = 
	`RB
(
i
);

1122 i‡(
	`GETARG_C
(
i
Ë? 
	`l_isÁl£
(
rb
) : !l_isfalse(rb))

1123 
ci
->
u
.
l
.
ßvedpc
++;

1125 
	`£tobjs2s
(
L
, 
ø
, 
rb
);

1126 
	`d⁄extjump
(
ci
);

1128 
vmbªak
;

1130 
	`vmˇ£
(
OP_CALL
) {

1131 
b
 = 
	`GETARG_B
(
i
);

1132 
ƒesu…s
 = 
	`GETARG_C
(
i
) - 1;

1133 i‡(
b
 !0Ë
L
->
t›
 = 
ø
+b;

1134 i‡(
	`luaD_¥eˇŒ
(
L
, 
ø
, 
ƒesu…s
)) {

1135 i‡(
ƒesu…s
 >= 0)

1136 
L
->
t›
 = 
ci
->top;

1137 
	`PrŸe˘
(()0);

1140 
ci
 = 
L
->ci;

1141 
√w‰ame
;

1143 
vmbªak
;

1145 
	`vmˇ£
(
OP_TAILCALL
) {

1146 
b
 = 
	`GETARG_B
(
i
);

1147 i‡(
b
 !0Ë
L
->
t›
 = 
ø
+b;

1148 
	`lua_as£π
(
	`GETARG_C
(
i
Ë- 1 =
LUA_MULTRET
);

1149 i‡(
	`luaD_¥eˇŒ
(
L
, 
ø
, 
LUA_MULTRET
)) {

1150 
	`PrŸe˘
(()0);

1154 
CÆlInfo
 *
nci
 = 
L
->
ci
;

1155 
CÆlInfo
 *
oci
 = 
nci
->
¥evious
;

1156 
StkId
 
nfunc
 = 
nci
->
func
;

1157 
StkId
 
ofunc
 = 
oci
->
func
;

1159 
StkId
 
lim
 = 
nci
->
u
.
l
.
ba£
 + 
	`gë¥Ÿo
(
nfunc
)->
num∑øms
;

1160 
aux
;

1162 i‡(
˛
->
p
->
sizï
 > 0Ë
	`luaF_˛o£
(
L
, 
oci
->
u
.
l
.
ba£
);

1164 
aux
 = 0; 
nfunc
 +áux < 
lim
;áux++)

1165 
	`£tobjs2s
(
L
, 
ofunc
 + 
aux
, 
nfunc
 +áux);

1166 
oci
->
u
.
l
.
ba£
 = 
ofunc
 + (
nci
->u.l.ba£ - 
nfunc
);

1167 
oci
->
t›
 = 
L
->t› = 
ofunc
 + (L->t› - 
nfunc
);

1168 
oci
->
u
.
l
.
ßvedpc
 = 
nci
->u.l.savedpc;

1169 
oci
->
ˇŒ°©us
 |
CIST_TAIL
;

1170 
ci
 = 
L
->cò
oci
;

1171 
	`lua_as£π
(
L
->
t›
 =
oci
->
u
.
l
.
ba£
 + 
	`gë¥Ÿo
(
ofunc
)->
max°acksize
);

1172 
√w‰ame
;

1174 
vmbªak
;

1176 
	`vmˇ£
(
OP_RETURN
) {

1177 
b
 = 
	`GETARG_B
(
i
);

1178 i‡(
˛
->
p
->
sizï
 > 0Ë
	`luaF_˛o£
(
L
, 
ba£
);

1179 
b
 = 
	`luaD_posˇŒ
(
L
, 
ci
, 
ø
, (b !0 ? b - 1 : 
	`ˇ°_öt
(L->
t›
 -Ña)));

1180 i‡(
ci
->
ˇŒ°©us
 & 
CIST_FRESH
)

1183 
ci
 = 
L
->ci;

1184 i‡(
b
Ë
L
->
t›
 = 
ci
->top;

1185 
	`lua_as£π
(
	`isLua
(
ci
));

1186 
	`lua_as£π
(
	`GET_OPCODE
(*((
ci
)->
u
.
l
.
ßvedpc
 - 1)Ë=
OP_CALL
);

1187 
√w‰ame
;

1190 
	`vmˇ£
(
OP_FORLOOP
) {

1191 i‡(
	`âisöãgî
(
ø
)) {

1192 
lua_I¡egî
 
°ï
 = 
	`ivÆue
(
ø
 + 2);

1193 
lua_I¡egî
 
idx
 = 
	`öt›
(+, 
	`ivÆue
(
ø
), 
°ï
);

1194 
lua_I¡egî
 
limô
 = 
	`ivÆue
(
ø
 + 1);

1195 i‡((0 < 
°ï
Ë? (
idx
 <
limô
) : (limit <= idx)) {

1196 
ci
->
u
.
l
.
ßvedpc
 +
	`GETARG_sBx
(
i
);

1197 
	`chgivÆue
(
ø
, 
idx
);

1198 
	`£tivÆue
(
ø
 + 3, 
idx
);

1202 
lua_Numbî
 
°ï
 = 
	`ÊtvÆue
(
ø
 + 2);

1203 
lua_Numbî
 
idx
 = 
	`luai_numadd
(
L
, 
	`ÊtvÆue
(
ø
), 
°ï
);

1204 
lua_Numbî
 
limô
 = 
	`ÊtvÆue
(
ø
 + 1);

1205 i‡(
	`luai_num…
(0, 
°ï
Ë? 
	`luai_numÀ
(
idx
, 
limô
)

1206 : 
	`luai_numÀ
(
limô
, 
idx
)) {

1207 
ci
->
u
.
l
.
ßvedpc
 +
	`GETARG_sBx
(
i
);

1208 
	`chgÊtvÆue
(
ø
, 
idx
);

1209 
	`£tÊtvÆue
(
ø
 + 3, 
idx
);

1212 
vmbªak
;

1214 
	`vmˇ£
(
OP_FORPREP
) {

1215 
TVÆue
 *
öô
 = 
ø
;

1216 
TVÆue
 *
∂imô
 = 
ø
 + 1;

1217 
TVÆue
 *
p°ï
 = 
ø
 + 2;

1218 
lua_I¡egî
 
ûimô
;

1219 
°›now
;

1220 i‡(
	`âisöãgî
(
öô
Ë&&Åtisöãgî(
p°ï
) &&

1221 
	`f‹limô
(
∂imô
, &
ûimô
, 
	`ivÆue
(
p°ï
), &
°›now
)) {

1223 
lua_I¡egî
 
öôv
 = (
°›now
 ? 0 : 
	`ivÆue
(
öô
));

1224 
	`£tivÆue
(
∂imô
, 
ûimô
);

1225 
	`£tivÆue
(
öô
, 
	`öt›
(-, 
öôv
, 
	`ivÆue
(
p°ï
)));

1228 
lua_Numbî
 
nöô
;Üua_Numbî 
∆imô
;Üua_Numbî 
n°ï
;

1229 i‡(!
	`t⁄umbî
(
∂imô
, &
∆imô
))

1230 
	`luaG_ru√º‹
(
L
, "'for'Üimit must beáÇumber");

1231 
	`£tÊtvÆue
(
∂imô
, 
∆imô
);

1232 i‡(!
	`t⁄umbî
(
p°ï
, &
n°ï
))

1233 
	`luaG_ru√º‹
(
L
, "'for' step must beáÇumber");

1234 
	`£tÊtvÆue
(
p°ï
, 
n°ï
);

1235 i‡(!
	`t⁄umbî
(
öô
, &
nöô
))

1236 
	`luaG_ru√º‹
(
L
, "'for' initial value must beáÇumber");

1237 
	`£tÊtvÆue
(
öô
, 
	`luai_numsub
(
L
, 
nöô
, 
n°ï
));

1239 
ci
->
u
.
l
.
ßvedpc
 +
	`GETARG_sBx
(
i
);

1240 
vmbªak
;

1242 
	`vmˇ£
(
OP_TFORCALL
) {

1243 
StkId
 
cb
 = 
ø
 + 3;

1244 
	`£tobjs2s
(
L
, 
cb
+2, 
ø
+2);

1245 
	`£tobjs2s
(
L
, 
cb
+1, 
ø
+1);

1246 
	`£tobjs2s
(
L
, 
cb
, 
ø
);

1247 
L
->
t›
 = 
cb
 + 3;

1248 
	`PrŸe˘
(
	`luaD_ˇŒ
(
L
, 
cb
, 
	`GETARG_C
(
i
)));

1249 
L
->
t›
 = 
ci
->top;

1250 
i
 = *(
ci
->
u
.
l
.
ßvedpc
++);

1251 
ø
 = 
	`RA
(
i
);

1252 
	`lua_as£π
(
	`GET_OPCODE
(
i
Ë=
OP_TFORLOOP
);

1253 
l_tf‹lo›
;

1255 
	`vmˇ£
(
OP_TFORLOOP
) {

1256 
l_tf‹lo›
:

1257 i‡(!
	`âi¢û
(
ø
 + 1)) {

1258 
	`£tobjs2s
(
L
, 
ø
,Ña + 1);

1259 
ci
->
u
.
l
.
ßvedpc
 +
	`GETARG_sBx
(
i
);

1261 
vmbªak
;

1263 
	`vmˇ£
(
OP_SETLIST
) {

1264 
n
 = 
	`GETARG_B
(
i
);

1265 
c
 = 
	`GETARG_C
(
i
);

1266 
œ°
;

1267 
TabÀ
 *
h
;

1268 i‡(
n
 =0Ë¿
	`ˇ°_öt
(
L
->
t›
 - 
ø
) - 1;

1269 i‡(
c
 == 0) {

1270 
	`lua_as£π
(
	`GET_OPCODE
(*
ci
->
u
.
l
.
ßvedpc
Ë=
OP_EXTRAARG
);

1271 
c
 = 
	`GETARG_Ax
(*
ci
->
u
.
l
.
ßvedpc
++);

1273 
h
 = 
	`hvÆue
(
ø
);

1274 
œ°
 = ((
c
-1)*
LFIELDS_PER_FLUSH
Ë+ 
n
;

1275 i‡(
œ°
 > 
h
->
sizóºay
)

1276 
	`luaH_ªsizóºay
(
L
, 
h
, 
œ°
);

1277 ; 
n
 > 0;Ç--) {

1278 
TVÆue
 *
vÆ
 = 
ø
+
n
;

1279 
	`luaH_£töt
(
L
, 
h
, 
œ°
--, 
vÆ
);

1280 
	`luaC_b¨rõrback
(
L
, 
h
, 
vÆ
);

1282 
L
->
t›
 = 
ci
->top;

1283 
vmbªak
;

1285 
	`vmˇ£
(
OP_CLOSURE
) {

1286 
PrŸo
 *
p
 = 
˛
->p->p[
	`GETARG_Bx
(
i
)];

1287 
LClosuª
 *
n˛
 = 
	`gëˇched
(
p
, 
˛
->
upvÆs
, 
ba£
);

1288 i‡(
n˛
 =
NULL
)

1289 
	`push˛osuª
(
L
, 
p
, 
˛
->
upvÆs
, 
ba£
, 
ø
);

1291 
	`£t˛LvÆue
(
L
, 
ø
, 
n˛
);

1292 
	`checkGC
(
L
, 
ø
 + 1);

1293 
vmbªak
;

1295 
	`vmˇ£
(
OP_VARARG
) {

1296 
b
 = 
	`GETARG_B
(
i
) - 1;

1297 
j
;

1298 
n
 = 
	`ˇ°_öt
(
ba£
 - 
ci
->
func
Ë- 
˛
->
p
->
num∑øms
 - 1;

1299 i‡(
n
 < 0)

1300 
n
 = 0;

1301 i‡(
b
 < 0) {

1302 
b
 = 
n
;

1303 
	`PrŸe˘
(
	`luaD_check°ack
(
L
, 
n
));

1304 
ø
 = 
	`RA
(
i
);

1305 
L
->
t›
 = 
ø
 + 
n
;

1307 
j
 = 0; j < 
b
 && j < 
n
; j++)

1308 
	`£tobjs2s
(
L
, 
ø
 + 
j
, 
ba£
 - 
n
 + j);

1309 ; 
j
 < 
b
; j++)

1310 
	`£äûvÆue
(
ø
 + 
j
);

1311 
vmbªak
;

1313 
	`vmˇ£
(
OP_EXTRAARG
) {

1314 
	`lua_as£π
(0);

1315 
vmbªak
;

1319 
	}
}

	@lib/lua/lua-5.3.4/src/lvm.h

7 #i‚de‡
lvm_h


8 
	#lvm_h


	)

11 
	~"ldo.h
"

12 
	~"lobje˘.h
"

13 
	~"…m.h
"

16 #i‡!
deföed
(
LUA_NOCVTN2S
)

17 
	#cvt2°r
(
o
Ë
	`âi¢umbî
(o)

	)

19 
	#cvt2°r
(
o
Ë0

	)

23 #i‡!
deföed
(
LUA_NOCVTS2N
)

24 
	#cvt2num
(
o
Ë
	`âis°rög
(o)

	)

26 
	#cvt2num
(
o
Ë0

	)

35 #i‡!
deföed
(
LUA_FLOORN2I
)

36 
	#LUA_FLOORN2I
 0

	)

40 
	#t⁄umbî
(
o
,
n
) \

41 (
	`âisÊﬂt
(
o
Ë? (*(
n
Ë
	`ÊtvÆue
(o), 1Ë: 
	`luaV_t⁄umbî_
(o,n))

	)

43 
	#toöãgî
(
o
,
i
) \

44 (
	`âisöãgî
(
o
Ë? (*(
i
Ë
	`ivÆue
(o), 1Ë: 
	`luaV_toöãgî
(o,i,
LUA_FLOORN2I
))

	)

46 
	#öt›
(
›
,
v1
,
v2
Ë
	`l_ˇ°U2S
(
	`l_ˇ°S2U
(v1Ë›Ü_ˇ°S2U(v2))

	)

48 
	#luaV_øwequÆobj
(
t1
,
t2
Ë
	`luaV_equÆobj
(
NULL
,t1,t2)

	)

58 
	#luaV_Á°gë
(
L
,
t
,
k
,
¶Ÿ
,
f
) \

59 (!
	`âi°abÀ
(
t
) \

60 ? (
¶Ÿ
 = 
NULL
, 0) \

61 : (
¶Ÿ
 = 
	`f
(
	`hvÆue
(
t
), 
k
), \

62 !
	`âi¢û
(
¶Ÿ
))Ë

	)

67 
	#luaV_gëèbÀ
(
L
,
t
,
k
,
v
Ë{ c⁄° 
TVÆue
 *
¶Ÿ
; \

68 i‡(
	`luaV_Á°gë
(
L
,
t
,
k
,
¶Ÿ
,
luaH_gë
)Ë{ 
	`£tobj2s
(L, 
v
, slot); } \

69 
	`luaV_föishgë
(
L
,
t
,
k
,
v
,
¶Ÿ
); }

	)

80 
	#luaV_Á°£t
(
L
,
t
,
k
,
¶Ÿ
,
f
,
v
) \

81 (!
	`âi°abÀ
(
t
) \

82 ? (
¶Ÿ
 = 
NULL
, 0) \

83 : (
¶Ÿ
 = 
	`f
(
	`hvÆue
(
t
), 
k
), \

84 
	`âi¢û
(
¶Ÿ
) ? 0 \

85 : (
	`luaC_b¨rõrback
(
L
, 
	`hvÆue
(
t
), 
v
), \

86 
	`£tobj2t
(
L
, 
	`ˇ°
(
TVÆue
 *,
¶Ÿ
), 
v
), \

87 1)))

	)

90 
	#luaV_£âabÀ
(
L
,
t
,
k
,
v
Ë{ c⁄° 
TVÆue
 *
¶Ÿ
; \

91 i‡(!
	`luaV_Á°£t
(
L
,
t
,
k
,
¶Ÿ
,
luaH_gë
,
v
)) \

92 
	`luaV_föish£t
(
L
,
t
,
k
,
v
,
¶Ÿ
); }

	)

96 
LUAI_FUNC
 
luaV_equÆobj
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
t1
, c⁄° TVÆuê*
t2
);

97 
LUAI_FUNC
 
luaV_Às°h™
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
l
, c⁄° TVÆuê*
r
);

98 
LUAI_FUNC
 
luaV_Às£quÆ
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
l
, c⁄° TVÆuê*
r
);

99 
LUAI_FUNC
 
luaV_t⁄umbî_
 (c⁄° 
TVÆue
 *
obj
, 
lua_Numbî
 *
n
);

100 
LUAI_FUNC
 
luaV_toöãgî
 (c⁄° 
TVÆue
 *
obj
, 
lua_I¡egî
 *
p
, 
mode
);

101 
LUAI_FUNC
 
luaV_föishgë
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
t
, TVÆuê*
key
,

102 
StkId
 
vÆ
, c⁄° 
TVÆue
 *
¶Ÿ
);

103 
LUAI_FUNC
 
luaV_föish£t
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
t
, TVÆuê*
key
,

104 
StkId
 
vÆ
, c⁄° 
TVÆue
 *
¶Ÿ
);

105 
LUAI_FUNC
 
luaV_föishOp
 (
lua_Sèã
 *
L
);

106 
LUAI_FUNC
 
luaV_execuã
 (
lua_Sèã
 *
L
);

107 
LUAI_FUNC
 
luaV_c⁄ˇt
 (
lua_Sèã
 *
L
, 
tŸÆ
);

108 
LUAI_FUNC
 
lua_I¡egî
 
luaV_div
 (
lua_Sèã
 *
L
,Üua_I¡egî 
x
,Üua_I¡egî 
y
);

109 
LUAI_FUNC
 
lua_I¡egî
 
luaV_mod
 (
lua_Sèã
 *
L
,Üua_I¡egî 
x
,Üua_I¡egî 
y
);

110 
LUAI_FUNC
 
lua_I¡egî
 
luaV_shi·l
 (lua_I¡egî 
x
,Üua_I¡egî 
y
);

111 
LUAI_FUNC
 
luaV_objÀn
 (
lua_Sèã
 *
L
, 
StkId
 
ø
, c⁄° 
TVÆue
 *
rb
);

	@lib/lua/lua-5.3.4/src/lzio.c

7 
	#lzio_c


	)

8 
	#LUA_CORE


	)

10 
	~"Õªfix.h
"

13 
	~<°rög.h
>

15 
	~"lua.h
"

17 
	~"Œimôs.h
"

18 
	~"lmem.h
"

19 
	~"l°©e.h
"

20 
	~"lzio.h
"

23 
	$luaZ_fûl
 (
ZIO
 *
z
) {

24 
size_t
 
size
;

25 
lua_Sèã
 *
L
 = 
z
->L;

26 c⁄° *
buff
;

27 
	`lua_u∆ock
(
L
);

28 
buff
 = 
z
->
	`ªadî
(
L
, z->
d©a
, &
size
);

29 
	`lua_lock
(
L
);

30 i‡(
buff
 =
NULL
 || 
size
 == 0)

31  
EOZ
;

32 
z
->
n
 = 
size
 - 1;

33 
z
->
p
 = 
buff
;

34  
	`ˇ°_uch¨
(*(
z
->
p
++));

35 
	}
}

38 
	$luaZ_öô
 (
lua_Sèã
 *
L
, 
ZIO
 *
z
, 
lua_Ródî
 
ªadî
, *
d©a
) {

39 
z
->
L
 = L;

40 
z
->
ªadî
 =Ñeader;

41 
z
->
d©a
 = data;

42 
z
->
n
 = 0;

43 
z
->
p
 = 
NULL
;

44 
	}
}

48 
size_t
 
	$luaZ_ªad
 (
ZIO
 *
z
, *
b
, 
size_t
 
n
) {

49 
n
) {

50 
size_t
 
m
;

51 i‡(
z
->
n
 == 0) {

52 i‡(
	`luaZ_fûl
(
z
Ë=
EOZ
)

53  
n
;

55 
z
->
n
++;

56 
z
->
p
--;

59 
m
 = (
n
 <
z
->n) ?Ç : z->n;

60 
	`mem˝y
(
b
, 
z
->
p
, 
m
);

61 
z
->
n
 -
m
;

62 
z
->
p
 +
m
;

63 
b
 = (*)b + 
m
;

64 
n
 -
m
;

67 
	}
}

	@lib/lua/lua-5.3.4/src/lzio.h

8 #i‚de‡
lzio_h


9 
	#lzio_h


	)

11 
	~"lua.h
"

13 
	~"lmem.h
"

16 
	#EOZ
 (-1Ë

	)

18 
Zio
 
	tZIO
;

20 
	#zgëc
(
z
Ë(((z)->
n
--)>0 ? 
	`ˇ°_uch¨
(*(z)->
p
++Ë: 
	`luaZ_fûl
(z))

	)

23 
	sMbuf„r
 {

24 *
	mbuf„r
;

25 
size_t
 
	mn
;

26 
size_t
 
	mbuffsize
;

27 } 
	tMbuf„r
;

29 
	#luaZ_öôbuf„r
(
L
, 
buff
Ë((buff)->
buf„r
 = 
NULL
, (buff)->
buffsize
 = 0)

	)

31 
	#luaZ_buf„r
(
buff
Ë((buff)->
buf„r
)

	)

32 
	#luaZ_sizebuf„r
(
buff
Ë((buff)->
buffsize
)

	)

33 
	#luaZ_bufÊí
(
buff
Ë((buff)->
n
)

	)

35 
	#luaZ_buf‰emove
(
buff
,
i
Ë((buff)->
n
 -(i))

	)

36 
	#luaZ_ª£tbuf„r
(
buff
Ë((buff)->
n
 = 0)

	)

39 
	#luaZ_ªsizebuf„r
(
L
, 
buff
, 
size
) \

40 ((
buff
)->
buf„r
 = 
	`luaM_ªÆlocvch¨
(
L
, (buff)->buffer, \

41 (
buff
)->
buffsize
, 
size
), \

42 (
buff
)->
buffsize
 = 
size
)

	)

44 
	#luaZ_‰ìbuf„r
(
L
, 
buff
Ë
	`luaZ_ªsizebuf„r
(L, buff, 0)

	)

47 
LUAI_FUNC
 
luaZ_öô
 (
lua_Sèã
 *
L
, 
ZIO
 *
z
, 
lua_Ródî
 
ªadî
,

48 *
d©a
);

49 
LUAI_FUNC
 
size_t
 
luaZ_ªad
 (
ZIO
* 
z
, *
b
, size_à
n
);

55 
	sZio
 {

56 
size_t
 
	mn
;

57 c⁄° *
	mp
;

58 
lua_Ródî
 
	mªadî
;

59 *
	md©a
;

60 
lua_Sèã
 *
	mL
;

64 
LUAI_FUNC
 
luaZ_fûl
 (
ZIO
 *
z
);

	@/usr/include/arpa/inet.h

18 #i‚de‡
_ARPA_INET_H


19 
	#_ARPA_INET_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<√töë/ö.h
>

25 #i‚de‡
__sockÀn_t_deföed


26 
__sockÀn_t
 
	tsockÀn_t
;

27 
	#__sockÀn_t_deföed


	)

30 
__BEGIN_DECLS


34 
ö_addr_t
 
	$öë_addr
 (c⁄° *
__˝
Ë
__THROW
;

37 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

41 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

42 
__THROW
;

45 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

49 
ö_addr_t
 
	$öë_√tw‹k
 (c⁄° *
__˝
Ë
__THROW
;

53 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

58 
	$öë_±⁄
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

59 *
__ª°ri˘
 
__buf
Ë
__THROW
;

64 c⁄° *
	$öë_¡›
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

65 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

66 
__THROW
;

70 #ifde‡
__USE_MISC


73 
	$öë_©⁄
 (c⁄° *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

77 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

82 *
	$öë_√t_¡›
 (
__af
, c⁄° *
__˝
, 
__bôs
,

83 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

88 
	$öë_√t_±⁄
 (
__af
, c⁄° *
__˝
,

89 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

94 
	$öë_nßp_addr
 (c⁄° *
__˝
,

95 *
__buf
, 
__Àn
Ë
__THROW
;

99 *
	$öë_nßp_¡ﬂ
 (
__Àn
, c⁄° *
__˝
,

100 *
__buf
Ë
__THROW
;

103 
__END_DECLS


	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

118 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


119 #unde‡
°©ic_as£π


120 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #ifde‡
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #ifde‡
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/dlfcn.h

19 #i‚def 
_DLFCN_H


20 
	#_DLFCN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

27 
	~<bôs/dlf˙.h
>

30 #ifde‡
__USE_GNU


35 
	#RTLD_NEXT
 ((*Ë-1l)

	)

40 
	#RTLD_DEFAULT
 ((*Ë0)

	)

44 
	tLmid_t
;

47 
	#LM_ID_BASE
 0

	)

48 
	#LM_ID_NEWLM
 -1

	)

52 
__BEGIN_DECLS


56 *
	$dl›í
 (c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

60 
	$dl˛o£
 (*
__h™dÀ
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1));

64 *
	$dlsym
 (*
__ª°ri˘
 
__h™dÀ
,

65 c⁄° *
__ª°ri˘
 
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

67 #ifde‡
__USE_GNU


69 *
	$dlm›í
 (
Lmid_t
 
__nsid
, c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

73 *
	$dlvsym
 (*
__ª°ri˘
 
__h™dÀ
,

74 c⁄° *
__ª°ri˘
 
__«me
,

75 c⁄° *
__ª°ri˘
 
__vîsi⁄
)

76 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

82 *
	$dÀº‹
 (Ë
__THROW
;

85 #ifde‡
__USE_GNU


90 c⁄° *
dli_‚ame
;

91 *
dli_fba£
;

92 c⁄° *
dli_¢ame
;

93 *
dli_ßddr
;

94 } 
	tDl_öfo
;

98 
	$dœddr
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
)

99 
__THROW
 
	`__n⁄nuŒ
 ((2));

102 
	$dœddr1
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
,

103 **
__exåa_öfo
, 
__Êags
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

111 
RTLD_DL_SYMENT
 = 1,

114 
RTLD_DL_LINKMAP
 = 2

123 
	$dlöfo
 (*
__ª°ri˘
 
__h™dÀ
,

124 
__ªque°
, *
__ª°ri˘
 
__¨g
)

125 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

131 
RTLD_DI_LMID
 = 1,

135 
RTLD_DI_LINKMAP
 = 2,

137 
RTLD_DI_CONFIGADDR
 = 3,

144 
RTLD_DI_SERINFO
 = 4,

145 
RTLD_DI_SERINFOSIZE
 = 5,

149 
RTLD_DI_ORIGIN
 = 6,

151 
RTLD_DI_PROFILENAME
 = 7,

152 
RTLD_DI_PROFILEOUT
 = 8,

157 
RTLD_DI_TLS_MODID
 = 9,

163 
RTLD_DI_TLS_DATA
 = 10,

165 
RTLD_DI_MAX
 = 10

173 *
dls_«me
;

174 
dls_Êags
;

175 } 
	tDl_£Ω©h
;

181 
size_t
 
dls_size
;

182 
dls_˙t
;

183 
Dl_£Ω©h
 
dls_£Ω©h
[1];

184 } 
	tDl_£röfo
;

188 
__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/execinfo.h

18 #i‚de‡
_EXECINFO_H


19 
	#_EXECINFO_H
 1

	)

21 
	~<„©uªs.h
>

23 
__BEGIN_DECLS


27 
	$backåa˚
 (**
__¨øy
, 
__size
Ë
	`__n⁄nuŒ
 ((1));

32 **
	$backåa˚_symbﬁs
 (*c⁄° *
__¨øy
, 
__size
)

33 
__THROW
 
	`__n⁄nuŒ
 ((1));

38 
	$backåa˚_symbﬁs_fd
 (*c⁄° *
__¨øy
, 
__size
, 
__fd
)

39 
__THROW
 
	`__n⁄nuŒ
 ((1));

41 
__END_DECLS


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

77 
	~<bôs/°©.h
>

79 
	#S_IFMT
 
__S_IFMT


	)

80 
	#S_IFDIR
 
__S_IFDIR


	)

81 
	#S_IFCHR
 
__S_IFCHR


	)

82 
	#S_IFBLK
 
__S_IFBLK


	)

83 
	#S_IFREG
 
__S_IFREG


	)

84 #ifde‡
__S_IFIFO


85 
	#S_IFIFO
 
__S_IFIFO


	)

87 #ifde‡
__S_IFLNK


88 
	#S_IFLNK
 
__S_IFLNK


	)

90 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


91 
	#S_IFSOCK
 
__S_IFSOCK


	)

96 
	#S_ISUID
 
__S_ISUID


	)

97 
	#S_ISGID
 
__S_ISGID


	)

99 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


101 
	#S_ISVTX
 
__S_ISVTX


	)

104 
	#S_IRUSR
 
__S_IREAD


	)

105 
	#S_IWUSR
 
__S_IWRITE


	)

106 
	#S_IXUSR
 
__S_IEXEC


	)

108 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

110 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

111 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

112 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

114 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

116 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

117 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

118 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

120 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

123 #ifdef 
__USE_MISC


124 #i‚de‡
R_OK


127 
	#R_OK
 4

	)

128 
	#W_OK
 2

	)

129 
	#X_OK
 1

	)

130 
	#F_OK
 0

	)

135 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


136 
	#SEEK_SET
 0

	)

137 
	#SEEK_CUR
 1

	)

138 
	#SEEK_END
 2

	)

146 
f˙é
 (
__fd
, 
__cmd
, ...);

155 #i‚de‡
__USE_FILE_OFFSET64


156 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

158 #ifde‡
__REDIRECT


159 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

160 
	`__n⁄nuŒ
 ((1));

162 
	#›í
 
›í64


	)

165 #ifde‡
__USE_LARGEFILE64


166 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

169 #ifde‡
__USE_ATFILE


179 #i‚de‡
__USE_FILE_OFFSET64


180 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

181 
	`__n⁄nuŒ
 ((2));

183 #ifde‡
__REDIRECT


184 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

185 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

187 
	#›í©
 
›í©64


	)

190 #ifde‡
__USE_LARGEFILE64


191 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

192 
	`__n⁄nuŒ
 ((2));

201 #i‚de‡
__USE_FILE_OFFSET64


202 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

204 #ifde‡
__REDIRECT


205 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

206 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

208 
	#¸ót
 
¸ót64


	)

211 #ifde‡
__USE_LARGEFILE64


212 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

215 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

216 && !
deföed
 
__USE_POSIX
))

225 
	#F_ULOCK
 0

	)

226 
	#F_LOCK
 1

	)

227 
	#F_TLOCK
 2

	)

228 
	#F_TEST
 3

	)

230 #i‚de‡
__USE_FILE_OFFSET64


231 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

233 #ifde‡
__REDIRECT


234 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

236 
	#lockf
 
lockf64


	)

239 #ifde‡
__USE_LARGEFILE64


240 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

244 #ifde‡
__USE_XOPEN2K


247 #i‚de‡
__USE_FILE_OFFSET64


248 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

249 
__advi£
Ë
__THROW
;

251 #ifde‡
__REDIRECT_NTH


252 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

253 
__off64_t
 
__Àn
, 
__advi£
),

254 
posix_Ádvi£64
);

256 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

259 #ifde‡
__USE_LARGEFILE64


260 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

261 
__advi£
Ë
__THROW
;

269 #i‚de‡
__USE_FILE_OFFSET64


270 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

272 #ifde‡
__REDIRECT


273 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

274 
__off64_t
 
__Àn
),

275 
posix_ÁŒoˇã64
);

277 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

280 #ifde‡
__USE_LARGEFILE64


281 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

287 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

288 && 
deföed
 
__va_¨g_∑ck_Àn


289 
	~<bôs/f˙é2.h
>

292 
__END_DECLS


	@/usr/include/fnmatch.h

18 #i‚def 
_FNMATCH_H


19 
	#_FNMATCH_H
 1

	)

21 #ifdef 
__˝lu•lus


27 #unde‡
FNM_PATHNAME


28 #unde‡
FNM_NOESCAPE


29 #unde‡
FNM_PERIOD


32 
	#FNM_PATHNAME
 (1 << 0Ë

	)

33 
	#FNM_NOESCAPE
 (1 << 1Ë

	)

34 
	#FNM_PERIOD
 (1 << 2Ë

	)

36 #i‡!
deföed
 
_POSIX_C_SOURCE
 || _POSIX_C_SOURCE < 2 || deföed 
_GNU_SOURCE


37 
	#FNM_FILE_NAME
 
FNM_PATHNAME


	)

38 
	#FNM_LEADING_DIR
 (1 << 3Ë

	)

39 
	#FNM_CASEFOLD
 (1 << 4Ë

	)

40 
	#FNM_EXTMATCH
 (1 << 5Ë

	)

44 
	#FNM_NOMATCH
 1

	)

50 #ifde‡
_XOPEN_SOURCE


51 
	#FNM_NOSYS
 (-1)

	)

56 
‚m©ch
 (c⁄° *
__∑âîn
, c⁄° *
__«me
, 
__Êags
);

58 #ifdef 
__˝lu•lus


	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/libgen.h

18 #i‚de‡
_LIBGEN_H


19 
	#_LIBGEN_H
 1

	)

21 
	~<„©uªs.h
>

23 
__BEGIN_DECLS


26 *
	$dú«me
 (*
__∑th
Ë
__THROW
;

34 *
	$__xpg_ba£«me
 (*
__∑th
Ë
__THROW
;

35 
	#ba£«me
 
__xpg_ba£«me


	)

37 
__END_DECLS


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	~<„©uªs.h
>

31 
	#MB_LEN_MAX
 16

	)

36 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

41 #i‚de‡
_LIMITS_H


42 
	#_LIMITS_H
 1

	)

44 
	~<bôs/w‹dsize.h
>

53 
	#CHAR_BIT
 8

	)

56 
	#SCHAR_MIN
 (-128)

	)

57 
	#SCHAR_MAX
 127

	)

60 
	#UCHAR_MAX
 255

	)

63 #ifde‡
__CHAR_UNSIGNED__


64 
	#CHAR_MIN
 0

	)

65 
	#CHAR_MAX
 
UCHAR_MAX


	)

67 
	#CHAR_MIN
 
SCHAR_MIN


	)

68 
	#CHAR_MAX
 
SCHAR_MAX


	)

72 
	#SHRT_MIN
 (-32768)

	)

73 
	#SHRT_MAX
 32767

	)

76 
	#USHRT_MAX
 65535

	)

79 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

80 
	#INT_MAX
 2147483647

	)

83 
	#UINT_MAX
 4294967295U

	)

86 #i‡
__WORDSIZE
 == 64

87 
	#LONG_MAX
 9223372036854775807L

	)

89 
	#LONG_MAX
 2147483647L

	)

91 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

94 #i‡
__WORDSIZE
 == 64

95 
	#ULONG_MAX
 18446744073709551615UL

	)

97 
	#ULONG_MAX
 4294967295UL

	)

100 #ifde‡
__USE_ISOC99


103 
	#LLONG_MAX
 9223372036854775807LL

	)

104 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

107 
	#ULLONG_MAX
 18446744073709551615ULL

	)

121 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


123 #ö˛ude_√xà<
limôs
.
h
>

129 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

141 #ifdef 
__USE_POSIX


143 
	~<bôs/posix1_lim.h
>

146 #ifdef 
__USE_POSIX2


147 
	~<bôs/posix2_lim.h
>

150 #ifdef 
__USE_XOPEN


151 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/if_tun.h

16 #i‚de‡
__IF_TUN_H


17 
	#__IF_TUN_H


	)

19 
	~<löux/ty≥s.h
>

20 
	~<löux/if_ëhî.h
>

21 
	~<löux/fûãr.h
>

24 
	#TUN_READQ_SIZE
 500

	)

26 
	#TUN_TUN_DEV
 
IFF_TUN


	)

27 
	#TUN_TAP_DEV
 
IFF_TAP


	)

28 
	#TUN_TYPE_MASK
 0x000f

	)

31 
	#TUNSETNOCSUM
 
	`_IOW
('T', 200, )

	)

32 
	#TUNSETDEBUG
 
	`_IOW
('T', 201, )

	)

33 
	#TUNSETIFF
 
	`_IOW
('T', 202, )

	)

34 
	#TUNSETPERSIST
 
	`_IOW
('T', 203, )

	)

35 
	#TUNSETOWNER
 
	`_IOW
('T', 204, )

	)

36 
	#TUNSETLINK
 
	`_IOW
('T', 205, )

	)

37 
	#TUNSETGROUP
 
	`_IOW
('T', 206, )

	)

38 
	#TUNGETFEATURES
 
	`_IOR
('T', 207, )

	)

39 
	#TUNSETOFFLOAD
 
	`_IOW
('T', 208, )

	)

40 
	#TUNSETTXFILTER
 
	`_IOW
('T', 209, )

	)

41 
	#TUNGETIFF
 
	`_IOR
('T', 210, )

	)

42 
	#TUNGETSNDBUF
 
	`_IOR
('T', 211, )

	)

43 
	#TUNSETSNDBUF
 
	`_IOW
('T', 212, )

	)

44 
	#TUNATTACHFILTER
 
	`_IOW
('T', 213, 
sock_Ârog
)

	)

45 
	#TUNDETACHFILTER
 
	`_IOW
('T', 214, 
sock_Ârog
)

	)

46 
	#TUNGETVNETHDRSZ
 
	`_IOR
('T', 215, )

	)

47 
	#TUNSETVNETHDRSZ
 
	`_IOW
('T', 216, )

	)

48 
	#TUNSETQUEUE
 
	`_IOW
('T', 217, )

	)

49 
	#TUNSETIFINDEX
 
	`_IOW
('T', 218, )

	)

50 
	#TUNGETFILTER
 
	`_IOR
('T', 219, 
sock_Ârog
)

	)

51 
	#TUNSETVNETLE
 
	`_IOW
('T', 220, )

	)

52 
	#TUNGETVNETLE
 
	`_IOR
('T', 221, )

	)

57 
	#TUNSETVNETBE
 
	`_IOW
('T', 222, )

	)

58 
	#TUNGETVNETBE
 
	`_IOR
('T', 223, )

	)

61 
	#IFF_TUN
 0x0001

	)

62 
	#IFF_TAP
 0x0002

	)

63 
	#IFF_NO_PI
 0x1000

	)

65 
	#IFF_ONE_QUEUE
 0x2000

	)

66 
	#IFF_VNET_HDR
 0x4000

	)

67 
	#IFF_TUN_EXCL
 0x8000

	)

68 
	#IFF_MULTI_QUEUE
 0x0100

	)

69 
	#IFF_ATTACH_QUEUE
 0x0200

	)

70 
	#IFF_DETACH_QUEUE
 0x0400

	)

72 
	#IFF_PERSIST
 0x0800

	)

73 
	#IFF_NOFILTER
 0x1000

	)

76 
	#TUN_TX_TIMESTAMP
 1

	)

79 
	#TUN_F_CSUM
 0x01

	)

80 
	#TUN_F_TSO4
 0x02

	)

81 
	#TUN_F_TSO6
 0x04

	)

82 
	#TUN_F_TSO_ECN
 0x08

	)

83 
	#TUN_F_UFO
 0x10

	)

86 
	#TUN_PKT_STRIP
 0x0001

	)

87 
	stun_pi
 {

88 
__u16
 
	mÊags
;

89 
__be16
 
	m¥Ÿo
;

100 
	#TUN_FLT_ALLMULTI
 0x0001

	)

101 
	stun_fûãr
 {

102 
__u16
 
	mÊags
;

103 
__u16
 
	mcou¡
;

104 
__u8
 
	maddr
[0][
ETH_ALEN
];

	@/usr/include/locale.h

22 #i‚def 
_LOCALE_H


23 
	#_LOCALE_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_NULL


	)

28 
	~<°ddef.h
>

29 
	~<bôs/loˇÀ.h
>

31 
	g__BEGIN_DECLS


35 
	#LC_CTYPE
 
__LC_CTYPE


	)

36 
	#LC_NUMERIC
 
__LC_NUMERIC


	)

37 
	#LC_TIME
 
__LC_TIME


	)

38 
	#LC_COLLATE
 
__LC_COLLATE


	)

39 
	#LC_MONETARY
 
__LC_MONETARY


	)

40 
	#LC_MESSAGES
 
__LC_MESSAGES


	)

41 
	#LC_ALL
 
__LC_ALL


	)

42 
	#LC_PAPER
 
__LC_PAPER


	)

43 
	#LC_NAME
 
__LC_NAME


	)

44 
	#LC_ADDRESS
 
__LC_ADDRESS


	)

45 
	#LC_TELEPHONE
 
__LC_TELEPHONE


	)

46 
	#LC_MEASUREMENT
 
__LC_MEASUREMENT


	)

47 
	#LC_IDENTIFICATION
 
__LC_IDENTIFICATION


	)

50 
__BEGIN_NAMESPACE_STD


53 
	slc⁄v


57 *
	mdecimÆ_poöt
;

58 *
	mthoußnds_£p
;

64 *
	mgroupög
;

70 *
	möt_cuº_symbﬁ
;

71 *
	mcuºícy_symbﬁ
;

72 *
	mm⁄_decimÆ_poöt
;

73 *
	mm⁄_thoußnds_£p
;

74 *
	mm⁄_groupög
;

75 *
	mposôive_sign
;

76 *
	m√g©ive_sign
;

77 
	möt_‰ac_digôs
;

78 
	m‰ac_digôs
;

80 
	mp_cs_¥e˚des
;

82 
	mp_£p_by_•a˚
;

84 
	mn_cs_¥e˚des
;

86 
	mn_£p_by_•a˚
;

93 
	mp_sign_po¢
;

94 
	mn_sign_po¢
;

95 #ifde‡
__USE_ISOC99


97 
	möt_p_cs_¥e˚des
;

99 
	möt_p_£p_by_•a˚
;

101 
	möt_n_cs_¥e˚des
;

103 
	möt_n_£p_by_•a˚
;

110 
	möt_p_sign_po¢
;

111 
	möt_n_sign_po¢
;

113 
	m__öt_p_cs_¥e˚des
;

114 
	m__öt_p_£p_by_•a˚
;

115 
	m__öt_n_cs_¥e˚des
;

116 
	m__öt_n_£p_by_•a˚
;

117 
	m__öt_p_sign_po¢
;

118 
	m__öt_n_sign_po¢
;

124 *
	$£éoˇÀ
 (
__ˇãg‹y
, c⁄° *
__loˇÀ
Ë
__THROW
;

127 
lc⁄v
 *
	$loˇÀc⁄v
 (Ë
__THROW
;

129 
__END_NAMESPACE_STD


132 #ifdef 
__USE_XOPEN2K8


145 
	~<xloˇÀ.h
>

151 
__loˇÀ_t
 
	$√wloˇÀ
 (
__ˇãg‹y_mask
, c⁄° *
__loˇÀ
,

152 
__loˇÀ_t
 
__ba£
Ë
__THROW
;

158 
	#LC_CTYPE_MASK
 (1 << 
__LC_CTYPE
)

	)

159 
	#LC_NUMERIC_MASK
 (1 << 
__LC_NUMERIC
)

	)

160 
	#LC_TIME_MASK
 (1 << 
__LC_TIME
)

	)

161 
	#LC_COLLATE_MASK
 (1 << 
__LC_COLLATE
)

	)

162 
	#LC_MONETARY_MASK
 (1 << 
__LC_MONETARY
)

	)

163 
	#LC_MESSAGES_MASK
 (1 << 
__LC_MESSAGES
)

	)

164 
	#LC_PAPER_MASK
 (1 << 
__LC_PAPER
)

	)

165 
	#LC_NAME_MASK
 (1 << 
__LC_NAME
)

	)

166 
	#LC_ADDRESS_MASK
 (1 << 
__LC_ADDRESS
)

	)

167 
	#LC_TELEPHONE_MASK
 (1 << 
__LC_TELEPHONE
)

	)

168 
	#LC_MEASUREMENT_MASK
 (1 << 
__LC_MEASUREMENT
)

	)

169 
	#LC_IDENTIFICATION_MASK
 (1 << 
__LC_IDENTIFICATION
)

	)

170 
	#LC_ALL_MASK
 (
LC_CTYPE_MASK
 \

171 | 
LC_NUMERIC_MASK
 \

172 | 
LC_TIME_MASK
 \

173 | 
LC_COLLATE_MASK
 \

174 | 
LC_MONETARY_MASK
 \

175 | 
LC_MESSAGES_MASK
 \

176 | 
LC_PAPER_MASK
 \

177 | 
LC_NAME_MASK
 \

178 | 
LC_ADDRESS_MASK
 \

179 | 
LC_TELEPHONE_MASK
 \

180 | 
LC_MEASUREMENT_MASK
 \

181 | 
LC_IDENTIFICATION_MASK
 \

182 )

	)

186 
__loˇÀ_t
 
	$du∂oˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

190 
	$‰ìloˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

197 
__loˇÀ_t
 
	$u£loˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

201 
	#LC_GLOBAL_LOCALE
 ((
__loˇÀ_t
Ë-1L)

	)

205 
__END_DECLS


	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/m©h-ve˘‹.h
>

35 
	~<bôs/huge_vÆ.h
>

36 #ifde‡
__USE_ISOC99


37 
	~<bôs/huge_vÆf.h
>

38 
	~<bôs/huge_vÆl.h
>

41 
	~<bôs/öf.h
>

44 
	~<bôs/«n.h
>

48 
	~<bôs/m©hdef.h
>

55 
	#__SIMD_DECL
(
fun˘i⁄
Ë
	`__CONCAT
 (
__DECL_SIMD_
, fun˘i⁄)

	)

57 
	#__MATHCALL_VEC
(
fun˘i⁄
, 
suffix
, 
¨gs
) \

58 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

59 
	`__MATHCALL
 (
fun˘i⁄
, 
suffix
, 
¨gs
)

	)

61 
	#__MATHDECL_VEC
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

62 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

63 
	`__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
)

	)

65 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

66 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

67 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

68 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

69 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

70 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

71 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

72 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

73 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

74 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

75 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

76 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

78 
	#_MdoubÀ_
 

	)

79 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

80 
	#__MATH_DECLARING_DOUBLE
 1

	)

81 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

82 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

83 
	~<bôs/m©hˇŒs.h
>

84 #unde‡
_MdoubÀ_


85 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


86 #unde‡
_MdoubÀ_END_NAMESPACE


87 #unde‡
__MATH_PRECNAME


88 #unde‡
__MATH_DECLARING_DOUBLE


90 #ifde‡
__USE_ISOC99


96 #i‚de‡
_MÊﬂt_


97 
	#_MÊﬂt_
 

	)

99 
	#_MdoubÀ_
 
_MÊﬂt_


	)

100 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

101 
	#__MATH_DECLARING_DOUBLE
 0

	)

102 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

103 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

104 
	~<bôs/m©hˇŒs.h
>

105 #unde‡
_MdoubÀ_


106 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


107 #unde‡
_MdoubÀ_END_NAMESPACE


108 #unde‡
__MATH_PRECNAME


109 #unde‡
__MATH_DECLARING_DOUBLE


111 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

112 || 
deföed
 
__LDBL_COMPAT
 \

113 || 
deföed
 
_LIBC_TEST


114 #ifde‡
__LDBL_COMPAT


116 #ifde‡
__USE_ISOC99


117 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

118 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

119 #ifde‡
__REDIRECT_NTH


120 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

121 
__∆dbl_√xâow¨df
)

122 
	`__©åibuã__
 ((
__c⁄°__
));

123 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

124 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

125 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

126 (
__x
, 
__y
),

127 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

131 #unde‡
__MATHDECL_1


132 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

133 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

134 
¨gs
, 
Æüs
)

	)

135 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

136 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

142 #i‚de‡
_Ml⁄g_doubÀ_


143 
	#_Ml⁄g_doubÀ_
 

	)

145 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

146 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

147 
	#__MATH_DECLARING_DOUBLE
 0

	)

148 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

149 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

150 
	#__MATH_DECLARE_LDOUBLE
 1

	)

151 
	~<bôs/m©hˇŒs.h
>

152 #unde‡
_MdoubÀ_


153 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


154 #unde‡
_MdoubÀ_END_NAMESPACE


155 #unde‡
__MATH_PRECNAME


156 #unde‡
__MATH_DECLARING_DOUBLE


161 #unde‡
__MATHDECL_1


162 #unde‡
__MATHDECL


163 #unde‡
__MATHCALL


166 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


168 
signgam
;

173 #ifde‡
__USE_ISOC99


211 
FP_NAN
 =

212 
	#FP_NAN
 0

	)

213 
FP_NAN
,

214 
FP_INFINITE
 =

215 
	#FP_INFINITE
 1

	)

216 
FP_INFINITE
,

217 
FP_ZERO
 =

218 
	#FP_ZERO
 2

	)

219 
FP_ZERO
,

220 
FP_SUBNORMAL
 =

221 
	#FP_SUBNORMAL
 3

	)

222 
FP_SUBNORMAL
,

223 
FP_NORMAL
 =

224 
	#FP_NORMAL
 4

	)

225 
FP_NORMAL


233 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
 \

234 && !
deföed
 
__OPTIMIZE_SIZE__


235 
	#Â˛assify
(
x
Ë
	`__buûtö_Â˛assify
 (
FP_NAN
, 
FP_INFINITE
, \

236 
FP_NORMAL
, 
FP_SUBNORMAL
, 
FP_ZERO
, 
x
)

	)

237 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


238 
	#Â˛assify
(
x
) \

239 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

241 
	#Â˛assify
(
x
) \

242 ( (
x
) ==  () \

243 ? 
	`__Â˛assifyf
 (
x
) \

244 :  (
x
) ==  () \

245 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

249 #i‡
	`__GNUC_PREREQ
 (4,0)

250 
	#signbô
(
x
) \

251 ( (
x
) ==  () \

252 ? 
	`__buûtö_signbôf
 (
x
) \

253 :  (
x
) ==  () \

254 ? 
	`__buûtö_signbô
 (
x
Ë: 
	`__buûtö_signbôl
 (x))

	)

256 #ifde‡
__NO_LONG_DOUBLE_MATH


257 
	#signbô
(
x
) \

258 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

260 
	#signbô
(
x
) \

261 ( (
x
) ==  () \

262 ? 
	`__signbôf
 (
x
) \

263 :  (
x
) ==  () \

264 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

269 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


270 
	#isföôe
(
x
Ë
	`__buûtö_isföôe
 (x)

	)

271 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


272 
	#isföôe
(
x
) \

273 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

275 
	#isföôe
(
x
) \

276 ( (
x
) ==  () \

277 ? 
	`__föôef
 (
x
) \

278 :  (
x
) ==  () \

279 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

283 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


284 
	#i¢‹mÆ
(
x
Ë
	`__buûtö_i¢‹mÆ
 (x)

	)

286 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

291 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


292 
	#i¢™
(
x
Ë
	`__buûtö_i¢™
 (x)

	)

293 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


294 
	#i¢™
(
x
) \

295 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

297 
	#i¢™
(
x
) \

298 ( (
x
) ==  () \

299 ? 
	`__i¢™f
 (
x
) \

300 :  (
x
) ==  () \

301 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

305 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


306 
	#isöf
(
x
Ë
	`__buûtö_isöf_sign
 (x)

	)

307 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


308 
	#isöf
(
x
) \

309 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

311 
	#isöf
(
x
) \

312 ( (
x
) ==  () \

313 ? 
	`__isöff
 (
x
) \

314 :  (
x
) ==  () \

315 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

319 
	#MATH_ERRNO
 1

	)

320 
	#MATH_ERREXCEPT
 2

	)

325 #i‚de‡
__FAST_MATH__


326 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

331 #ifde‡
__USE_GNU


333 #ifde‡
__NO_LONG_DOUBLE_MATH


334 
	#issig«lög
(
x
) \

335 ( (
x
Ë= (Ë? 
	`__issig«lögf
 (xË: 
	`__issig«lög
 (x))

	)

337 
	#issig«lög
(
x
) \

338 ( (
x
) ==  () \

339 ? 
	`__issig«lögf
 (
x
) \

340 :  (
x
) ==  () \

341 ? 
	`__issig«lög
 (
x
Ë: 
	`__issig«lögl
 (x))

	)

345 #ifdef 
__USE_MISC


349 
_IEEE_
 = -1,

350 
_SVID_
,

351 
_XOPEN_
,

352 
_POSIX_
,

353 
_ISOC_


354 } 
	t_LIB_VERSION_TYPE
;

359 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

363 #ifde‡
__USE_MISC


369 #ifde‡
__˝lu•lus


370 
__ex˚±i⁄


372 
ex˚±i⁄


375 
ty≥
;

376 *
«me
;

377 
¨g1
;

378 
¨g2
;

379 
ªtvÆ
;

380 
	}
};

382 #ifde‡
__˝lu•lus


383 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

385 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

388 
	#X_TLOSS
 1.41484755040568800000e+16

	)

391 
	#DOMAIN
 1

	)

392 
	#SING
 2

	)

393 
	#OVERFLOW
 3

	)

394 
	#UNDERFLOW
 4

	)

395 
	#TLOSS
 5

	)

396 
	#PLOSS
 6

	)

399 
	#HUGE
 3.40282347e+38F

	)

403 #ifde‡
__USE_XOPEN


405 
	#MAXFLOAT
 3.40282347e+38F

	)

412 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


413 
	#M_E
 2.7182818284590452354

	)

414 
	#M_LOG2E
 1.4426950408889634074

	)

415 
	#M_LOG10E
 0.43429448190325182765

	)

416 
	#M_LN2
 0.69314718055994530942

	)

417 
	#M_LN10
 2.30258509299404568402

	)

418 
	#M_PI
 3.14159265358979323846

	)

419 
	#M_PI_2
 1.57079632679489661923

	)

420 
	#M_PI_4
 0.78539816339744830962

	)

421 
	#M_1_PI
 0.31830988618379067154

	)

422 
	#M_2_PI
 0.63661977236758134308

	)

423 
	#M_2_SQRTPI
 1.12837916709551257390

	)

424 
	#M_SQRT2
 1.41421356237309504880

	)

425 
	#M_SQRT1_2
 0.70710678118654752440

	)

431 #ifde‡
__USE_GNU


432 
	#M_El
 2.718281828459045235360287471352662498L

	)

433 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

434 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

435 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

436 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

437 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

438 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

439 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

440 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

441 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

442 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

443 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

444 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

451 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


452 
	#__NO_MATH_INLINES
 1

	)

455 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

462 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

463 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

464 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

465 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

466 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

467 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

471 #ifde‡
__USE_EXTERN_INLINES


472 
	~<bôs/m©hölöe.h
>

477 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

478 
	~<bôs/m©h-föôe.h
>

481 #ifde‡
__USE_ISOC99


485 #i‚de‡
isgª©î


486 
	#isgª©î
(
x
, 
y
) \

487 (
__exãnsi⁄__
 \

488 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

489 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

493 #i‚de‡
isgª©îequÆ


494 
	#isgª©îequÆ
(
x
, 
y
) \

495 (
__exãnsi⁄__
 \

496 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

497 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

501 #i‚de‡
i¶ess


502 
	#i¶ess
(
x
, 
y
) \

503 (
__exãnsi⁄__
 \

504 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

505 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

509 #i‚de‡
i¶es£quÆ


510 
	#i¶es£quÆ
(
x
, 
y
) \

511 (
__exãnsi⁄__
 \

512 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

513 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

517 #i‚de‡
i¶essgª©î


518 
	#i¶essgª©î
(
x
, 
y
) \

519 (
__exãnsi⁄__
 \

520 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

521 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

525 #i‚de‡
isun‹dîed


526 
	#isun‹dîed
(
u
, 
v
) \

527 (
__exãnsi⁄__
 \

528 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

529 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

534 
	g__END_DECLS


	@/usr/include/net/if.h

19 #i‚de‡
_NET_IF_H


20 
	#_NET_IF_H
 1

	)

22 
	~<„©uªs.h
>

24 #ifde‡
__USE_MISC


25 
	~<sys/ty≥s.h
>

26 
	~<sys/sockë.h
>

31 
	#IF_NAMESIZE
 16

	)

33 
	sif_«meödex


35 
	mif_ödex
;

36 *
	mif_«me
;

40 #ifde‡
__USE_MISC


44 
	mIFF_UP
 = 0x1,

45 
	#IFF_UP
 
IFF_UP


	)

46 
	mIFF_BROADCAST
 = 0x2,

47 
	#IFF_BROADCAST
 
IFF_BROADCAST


	)

48 
	mIFF_DEBUG
 = 0x4,

49 
	#IFF_DEBUG
 
IFF_DEBUG


	)

50 
	mIFF_LOOPBACK
 = 0x8,

51 
	#IFF_LOOPBACK
 
IFF_LOOPBACK


	)

52 
	mIFF_POINTOPOINT
 = 0x10,

53 
	#IFF_POINTOPOINT
 
IFF_POINTOPOINT


	)

54 
	mIFF_NOTRAILERS
 = 0x20,

55 
	#IFF_NOTRAILERS
 
IFF_NOTRAILERS


	)

56 
	mIFF_RUNNING
 = 0x40,

57 
	#IFF_RUNNING
 
IFF_RUNNING


	)

58 
	mIFF_NOARP
 = 0x80,

59 
	#IFF_NOARP
 
IFF_NOARP


	)

60 
	mIFF_PROMISC
 = 0x100,

61 
	#IFF_PROMISC
 
IFF_PROMISC


	)

64 
	mIFF_ALLMULTI
 = 0x200,

65 
	#IFF_ALLMULTI
 
IFF_ALLMULTI


	)

67 
	mIFF_MASTER
 = 0x400,

68 
	#IFF_MASTER
 
IFF_MASTER


	)

69 
	mIFF_SLAVE
 = 0x800,

70 
	#IFF_SLAVE
 
IFF_SLAVE


	)

72 
	mIFF_MULTICAST
 = 0x1000,

73 
	#IFF_MULTICAST
 
IFF_MULTICAST


	)

75 
	mIFF_PORTSEL
 = 0x2000,

76 
	#IFF_PORTSEL
 
IFF_PORTSEL


	)

77 
	mIFF_AUTOMEDIA
 = 0x4000,

78 
	#IFF_AUTOMEDIA
 
IFF_AUTOMEDIA


	)

79 
	mIFF_DYNAMIC
 = 0x8000

80 
	#IFF_DYNAMIC
 
IFF_DYNAMIC


	)

88 
	siÁddr


90 
sockaddr
 
	miÁ_addr
;

93 
sockaddr
 
	mifu_brﬂdaddr
;

94 
sockaddr
 
	mifu_d°addr
;

95 } 
	miÁ_ifu
;

96 
iÁ˚
 *
	miÁ_iÂ
;

97 
iÁddr
 *
	miÁ_√xt
;

100 
	#iÁ_brﬂdaddr
 
iÁ_ifu
.
ifu_brﬂdaddr


	)

101 
	#iÁ_d°addr
 
iÁ_ifu
.
ifu_d°addr


	)

111 
	sifm≠


113 
	mmem_°¨t
;

114 
	mmem_íd
;

115 
	mba£_addr
;

116 
	múq
;

117 
	mdma
;

118 
	mp‹t
;

126 
	si‰eq


128 
	#IFHWADDRLEN
 6

	)

129 
	#IFNAMSIZ
 
IF_NAMESIZE


	)

132 
	mi‰n_«me
[
IFNAMSIZ
];

133 } 
	mi‰_i‰n
;

137 
sockaddr
 
	mi‰u_addr
;

138 
sockaddr
 
	mi‰u_d°addr
;

139 
sockaddr
 
	mi‰u_brﬂdaddr
;

140 
sockaddr
 
	mi‰u_√tmask
;

141 
sockaddr
 
	mi‰u_hwaddr
;

142 
	mi‰u_Êags
;

143 
	mi‰u_ivÆue
;

144 
	mi‰u_mtu
;

145 
ifm≠
 
	mi‰u_m≠
;

146 
	mi‰u_¶ave
[
IFNAMSIZ
];

147 
	mi‰u_√w«me
[
IFNAMSIZ
];

148 
__ˇddr_t
 
	mi‰u_d©a
;

149 } 
	mi‰_i‰u
;

151 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

152 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

153 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

154 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

155 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

156 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

157 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

158 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

159 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

160 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

161 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

162 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

163 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

164 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

165 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

166 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

167 
	#_IOT_i‰eq
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),16,0,0)

	)

168 
	#_IOT_i‰eq_sh‹t
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

169 
	#_IOT_i‰eq_öt
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

176 
	sifc⁄f


178 
	mifc_Àn
;

181 
__ˇddr_t
 
	mifcu_buf
;

182 
i‰eq
 *
	mifcu_ªq
;

183 } 
	mifc_ifcu
;

185 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

186 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

187 
	#_IOT_ifc⁄f
 
	`_IOT
(
	`_IOTS
(
ifc⁄f
),1,0,0,0,0Ë

	)

190 
__BEGIN_DECLS


193 
	$if_«mëoödex
 (c⁄° *
__i‚ame
Ë
__THROW
;

194 *
	$if_ödext⁄ame
 (
__ifödex
, *
__i‚ame
Ë
__THROW
;

197 
if_«meödex
 *
	$if_«meödex
 (Ë
__THROW
;

200 
	$if_‰ì«meödex
 (
if_«meödex
 *
__±r
Ë
__THROW
;

202 
__END_DECLS


	@/usr/include/netdb.h

22 #i‚def 
_NETDB_H


23 
	#_NETDB_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<√töë/ö.h
>

28 
	~<°döt.h
>

29 #ifde‡
__USE_MISC


32 
	~<Ωc/√tdb.h
>

35 #ifde‡
__USE_GNU


36 
	#__√ed_sigevít_t


	)

37 
	~<bôs/sigöfo.h
>

38 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 
	~<bôs/√tdb.h
>

45 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

46 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

47 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

48 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

49 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

50 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

53 
	g__BEGIN_DECLS


55 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


58 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

61 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

65 
	#HOST_NOT_FOUND
 1

	)

66 
	#TRY_AGAIN
 2

	)

68 
	#NO_RECOVERY
 3

	)

70 
	#NO_DATA
 4

	)

73 #ifde‡
__USE_MISC


74 
	#NETDB_INTERNAL
 -1

	)

75 
	#NETDB_SUCCESS
 0

	)

76 
	#NO_ADDRESS
 
NO_DATA


	)

79 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_XOPEN_EXTENDED


81 
	#IPPORT_RESERVED
 1024

	)

84 #ifde‡
__USE_GNU


86 
	#SCOPE_DELIMITER
 '%'

	)

89 #ifde‡
__USE_MISC


92 
	$hîr‹
 (c⁄° *
__°r
Ë
__THROW
;

95 c⁄° *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

100 
	sho°ít


102 *
h_«me
;

103 **
h_Æü£s
;

104 
h_addπy≥
;

105 
h_Àngth
;

106 **
h_addr_li°
;

107 #ifde‡
__USE_MISC


108 
	#h_addr
 
h_addr_li°
[0]

	)

117 
	`£tho°ít
 (
__°ay_›í
);

123 
	`ídho°ít
 ();

130 
ho°ít
 *
	`gëho°ít
 ();

137 
ho°ít
 *
	`gëho°byaddr
 (c⁄° *
__addr
, 
__sockÀn_t
 
__Àn
,

138 
__ty≥
);

144 
ho°ít
 *
	`gëho°by«me
 (c⁄° *
__«me
);

146 #ifde‡
__USE_MISC


155 
ho°ít
 *
	`gëho°by«me2
 (c⁄° *
__«me
, 
__af
);

167 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

168 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

169 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

170 *
__ª°ri˘
 
__h_î∫›
);

172 
	`gëho°byaddr_r
 (c⁄° *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

173 
__ty≥
,

174 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

176 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

177 *
__ª°ri˘
 
__h_î∫›
);

179 
	`gëho°by«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

180 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

181 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

182 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

183 *
__ª°ri˘
 
__h_î∫›
);

185 
	`gëho°by«me2_r
 (c⁄° *
__ª°ri˘
 
__«me
, 
__af
,

186 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

187 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

188 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

189 *
__ª°ri˘
 
__h_î∫›
);

198 
	`£äëít
 (
__°ay_›í
);

204 
	`íd√ã¡
 ();

211 
√ã¡
 *
	`gë√ã¡
 ();

218 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

224 
√ã¡
 *
	`gë√tby«me
 (c⁄° *
__«me
);

226 #ifdef 
__USE_MISC


237 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

238 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

239 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

240 *
__ª°ri˘
 
__h_î∫›
);

242 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

243 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

244 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

245 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

246 *
__ª°ri˘
 
__h_î∫›
);

248 
	`gë√tby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

249 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

250 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

251 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

252 *
__ª°ri˘
 
__h_î∫›
);

257 
	s£rvít


259 *
s_«me
;

260 **
s_Æü£s
;

261 
s_p‹t
;

262 *
s_¥Ÿo
;

270 
	`£t£rvít
 (
__°ay_›í
);

276 
	`íd£rvít
 ();

283 
£rvít
 *
	`gë£rvít
 ();

290 
£rvít
 *
	`gë£rvby«me
 (c⁄° *
__«me
, c⁄° *
__¥Ÿo
);

297 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, c⁄° *
__¥Ÿo
);

300 #ifdef 
__USE_MISC


308 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

309 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

310 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

312 
	`gë£rvby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

313 c⁄° *
__ª°ri˘
 
__¥Ÿo
,

314 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

315 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

316 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

318 
	`gë£rvbyp‹t_r
 (
__p‹t
, c⁄° *
__ª°ri˘
 
__¥Ÿo
,

319 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

320 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

321 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

326 
	s¥Ÿ€¡


328 *
p_«me
;

329 **
p_Æü£s
;

330 
p_¥Ÿo
;

338 
	`£çrŸ€¡
 (
__°ay_›í
);

344 
	`íd¥Ÿ€¡
 ();

351 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

357 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (c⁄° *
__«me
);

363 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

366 #ifdef 
__USE_MISC


374 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

375 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

376 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

378 
	`gë¥Ÿoby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

379 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

380 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

381 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

383 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

384 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

385 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

386 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

395 
	`£äëgª¡
 (c⁄° *
__√tgroup
);

403 
	`íd√tgª¡
 ();

412 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

413 **
__ª°ri˘
 
__u£Ω
,

414 **
__ª°ri˘
 
__domaöp
);

423 
	`ö√tgr
 (c⁄° *
__√tgroup
, c⁄° *
__ho°
,

424 c⁄° *
__u£r
, c⁄° *
__domaö
);

432 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

433 **
__ª°ri˘
 
__u£Ω
,

434 **
__ª°ri˘
 
__domaöp
,

435 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

439 #ifde‡
__USE_MISC


451 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

452 c⁄° *
__ª°ri˘
 
__locu£r
,

453 c⁄° *
__ª°ri˘
 
__ªmu£r
,

454 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

463 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

464 c⁄° *
__ª°ri˘
 
__locu£r
,

465 c⁄° *
__ª°ri˘
 
__ªmu£r
,

466 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

467 
ß_Ámûy_t
 
__af
);

479 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

480 c⁄° *
__ª°ri˘
 
__«me
,

481 c⁄° *
__ª°ri˘
 
__∑ss
,

482 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

491 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

492 c⁄° *
__ª°ri˘
 
__«me
,

493 c⁄° *
__ª°ri˘
 
__∑ss
,

494 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

495 
ß_Ámûy_t
 
__af
);

505 
	`ru£rok
 (c⁄° *
__rho°
, 
__su£r
,

506 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

515 
	`ru£rok_af
 (c⁄° *
__rho°
, 
__su£r
,

516 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

517 
ß_Ámûy_t
 
__af
);

528 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

529 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

539 
	`úu£rok_af
 (c⁄° *
__øddr
, 
__su£r
,

540 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

541 
ß_Ámûy_t
 
__af
);

551 
	`ºesvp‹t
 (*
__Æp‹t
);

560 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

565 #ifde‡
__USE_XOPEN2K


567 
	saddröfo


569 
ai_Êags
;

570 
ai_Ámûy
;

571 
ai_sockty≥
;

572 
ai_¥Ÿocﬁ
;

573 
sockÀn_t
 
ai_addæí
;

574 
sockaddr
 *
ai_addr
;

575 *
ai_ˇn⁄«me
;

576 
addröfo
 *
ai_√xt
;

579 #ifde‡
__USE_GNU


581 
	sgaicb


583 c⁄° *
¨_«me
;

584 c⁄° *
¨_£rvi˚
;

585 c⁄° 
addröfo
 *
¨_ªque°
;

586 
addröfo
 *
¨_ªsu…
;

588 
__ªtu∫
;

589 
__glibc_ª£rved
[5];

593 
	#GAI_WAIT
 0

	)

594 
	#GAI_NOWAIT
 1

	)

598 
	#AI_PASSIVE
 0x0001

	)

599 
	#AI_CANONNAME
 0x0002

	)

600 
	#AI_NUMERICHOST
 0x0004

	)

601 
	#AI_V4MAPPED
 0x0008

	)

602 
	#AI_ALL
 0x0010

	)

603 
	#AI_ADDRCONFIG
 0x0020

	)

605 #ifde‡
__USE_GNU


606 
	#AI_IDN
 0x0040

	)

609 
	#AI_CANONIDN
 0x0080

	)

610 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

612 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

615 
	#AI_NUMERICSERV
 0x0400

	)

618 
	#EAI_BADFLAGS
 -1

	)

619 
	#EAI_NONAME
 -2

	)

620 
	#EAI_AGAIN
 -3

	)

621 
	#EAI_FAIL
 -4

	)

622 
	#EAI_FAMILY
 -6

	)

623 
	#EAI_SOCKTYPE
 -7

	)

624 
	#EAI_SERVICE
 -8

	)

625 
	#EAI_MEMORY
 -10

	)

626 
	#EAI_SYSTEM
 -11

	)

627 
	#EAI_OVERFLOW
 -12

	)

628 #ifde‡
__USE_GNU


629 
	#EAI_NODATA
 -5

	)

630 
	#EAI_ADDRFAMILY
 -9

	)

631 
	#EAI_INPROGRESS
 -100

	)

632 
	#EAI_CANCELED
 -101

	)

633 
	#EAI_NOTCANCELED
 -102

	)

634 
	#EAI_ALLDONE
 -103

	)

635 
	#EAI_INTR
 -104

	)

636 
	#EAI_IDN_ENCODE
 -105

	)

639 #ifde‡
__USE_MISC


640 
	#NI_MAXHOST
 1025

	)

641 
	#NI_MAXSERV
 32

	)

644 
	#NI_NUMERICHOST
 1

	)

645 
	#NI_NUMERICSERV
 2

	)

646 
	#NI_NOFQDN
 4

	)

647 
	#NI_NAMEREQD
 8

	)

648 
	#NI_DGRAM
 16

	)

649 #ifde‡
__USE_GNU


650 
	#NI_IDN
 32

	)

651 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

653 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

662 
	`gëaddröfo
 (c⁄° *
__ª°ri˘
 
__«me
,

663 c⁄° *
__ª°ri˘
 
__£rvi˚
,

664 c⁄° 
addröfo
 *
__ª°ri˘
 
__ªq
,

665 
addröfo
 **
__ª°ri˘
 
__∑i
);

668 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

671 c⁄° *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

677 
	`gë«meöfo
 (c⁄° 
sockaddr
 *
__ª°ri˘
 
__ß
,

678 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

679 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

680 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

683 #ifde‡
__USE_GNU


692 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

693 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

703 
	`gai_su•íd
 (c⁄° 
gaicb
 *c⁄° 
__li°
[], 
__ít
,

704 c⁄° 
time•ec
 *
__timeout
);

707 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

710 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

713 
__END_DECLS


	@/usr/include/netinet/in.h

18 #i‚def 
_NETINET_IN_H


19 
	#_NETINET_IN_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<°döt.h
>

23 
	~<sys/sockë.h
>

24 
	~<bôs/ty≥s.h
>

27 
__BEGIN_DECLS


30 
uöt32_t
 
	tö_addr_t
;

31 
	sö_addr


33 
ö_addr_t
 
	ms_addr
;

37 
	~<bôs/ö.h
>

42 
	mIPPROTO_IP
 = 0,

43 
	#IPPROTO_IP
 
IPPROTO_IP


	)

44 
	mIPPROTO_ICMP
 = 1,

45 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

46 
	mIPPROTO_IGMP
 = 2,

47 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

48 
	mIPPROTO_IPIP
 = 4,

49 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

50 
	mIPPROTO_TCP
 = 6,

51 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

52 
	mIPPROTO_EGP
 = 8,

53 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

54 
	mIPPROTO_PUP
 = 12,

55 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

56 
	mIPPROTO_UDP
 = 17,

57 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

58 
	mIPPROTO_IDP
 = 22,

59 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

60 
	mIPPROTO_TP
 = 29,

61 
	#IPPROTO_TP
 
IPPROTO_TP


	)

62 
	mIPPROTO_DCCP
 = 33,

63 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

64 
	mIPPROTO_IPV6
 = 41,

65 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

66 
	mIPPROTO_RSVP
 = 46,

67 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

68 
	mIPPROTO_GRE
 = 47,

69 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

70 
	mIPPROTO_ESP
 = 50,

71 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

72 
	mIPPROTO_AH
 = 51,

73 
	#IPPROTO_AH
 
IPPROTO_AH


	)

74 
	mIPPROTO_MTP
 = 92,

75 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

76 
	mIPPROTO_BEETPH
 = 94,

77 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_UDPLITE
 = 136,

87 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

88 
	mIPPROTO_MPLS
 = 137,

89 
	#IPPROTO_MPLS
 
IPPROTO_MPLS


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


98 #i‚de‡
__USE_KERNEL_IPV6_DEFS


101 
	mIPPROTO_HOPOPTS
 = 0,

102 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

103 
	mIPPROTO_ROUTING
 = 43,

104 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

105 
	mIPPROTO_FRAGMENT
 = 44,

106 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

107 
	mIPPROTO_ICMPV6
 = 58,

108 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

109 
	mIPPROTO_NONE
 = 59,

110 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

111 
	mIPPROTO_DSTOPTS
 = 60,

112 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

113 
	mIPPROTO_MH
 = 135

114 
	#IPPROTO_MH
 
IPPROTO_MH


	)

119 
uöt16_t
 
	tö_p‹t_t
;

124 
	mIPPORT_ECHO
 = 7,

125 
	mIPPORT_DISCARD
 = 9,

126 
	mIPPORT_SYSTAT
 = 11,

127 
	mIPPORT_DAYTIME
 = 13,

128 
	mIPPORT_NETSTAT
 = 15,

129 
	mIPPORT_FTP
 = 21,

130 
	mIPPORT_TELNET
 = 23,

131 
	mIPPORT_SMTP
 = 25,

132 
	mIPPORT_TIMESERVER
 = 37,

133 
	mIPPORT_NAMESERVER
 = 42,

134 
	mIPPORT_WHOIS
 = 43,

135 
	mIPPORT_MTP
 = 57,

137 
	mIPPORT_TFTP
 = 69,

138 
	mIPPORT_RJE
 = 77,

139 
	mIPPORT_FINGER
 = 79,

140 
	mIPPORT_TTYLINK
 = 87,

141 
	mIPPORT_SUPDUP
 = 95,

144 
	mIPPORT_EXECSERVER
 = 512,

145 
	mIPPORT_LOGINSERVER
 = 513,

146 
	mIPPORT_CMDSERVER
 = 514,

147 
	mIPPORT_EFSSERVER
 = 520,

150 
	mIPPORT_BIFFUDP
 = 512,

151 
	mIPPORT_WHOSERVER
 = 513,

152 
	mIPPORT_ROUTESERVER
 = 520,

155 
	mIPPORT_RESERVED
 = 1024,

158 
	mIPPORT_USERRESERVED
 = 5000

166 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

167 
	#IN_CLASSA_NET
 0xff000000

	)

168 
	#IN_CLASSA_NSHIFT
 24

	)

169 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

170 
	#IN_CLASSA_MAX
 128

	)

172 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

173 
	#IN_CLASSB_NET
 0xffff0000

	)

174 
	#IN_CLASSB_NSHIFT
 16

	)

175 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

176 
	#IN_CLASSB_MAX
 65536

	)

178 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

179 
	#IN_CLASSC_NET
 0xffffff00

	)

180 
	#IN_CLASSC_NSHIFT
 8

	)

181 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

183 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

184 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

186 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

187 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

190 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

192 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

194 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

197 
	#IN_LOOPBACKNET
 127

	)

199 #i‚de‡
INADDR_LOOPBACK


200 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

204 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

205 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

206 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

207 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

209 #i‚de‡
__USE_KERNEL_IPV6_DEFS


211 
	sö6_addr


215 
uöt8_t
 
	m__u6_addr8
[16];

216 #ifde‡
__USE_MISC


217 
uöt16_t
 
	m__u6_addr16
[8];

218 
uöt32_t
 
	m__u6_addr32
[4];

220 } 
	m__ö6_u
;

221 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

222 #ifde‡
__USE_MISC


223 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

224 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

229 c⁄° 
ö6_addr
 
ö6addr_™y
;

230 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

231 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

232 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

234 
	#INET_ADDRSTRLEN
 16

	)

235 
	#INET6_ADDRSTRLEN
 46

	)

239 
	ssockaddr_ö


241 
__SOCKADDR_COMMON
 (
sö_
);

242 
ö_p‹t_t
 
	msö_p‹t
;

243 
ö_addr
 
	msö_addr
;

246 
	msö_zîo
[ (
sockaddr
) -

247 
__SOCKADDR_COMMON_SIZE
 -

248  (
ö_p‹t_t
) -

249  (
ö_addr
)];

252 #i‚de‡
__USE_KERNEL_IPV6_DEFS


254 
	ssockaddr_ö6


256 
__SOCKADDR_COMMON
 (
sö6_
);

257 
ö_p‹t_t
 
	msö6_p‹t
;

258 
uöt32_t
 
	msö6_Êowöfo
;

259 
ö6_addr
 
	msö6_addr
;

260 
uöt32_t
 
	msö6_sc›e_id
;

264 #ifde‡
__USE_MISC


266 
	sù_mªq


269 
ö_addr
 
	mimr_mu…üddr
;

272 
ö_addr
 
	mimr_öãrÁ˚
;

275 
	sù_mªq_sour˚


278 
ö_addr
 
	mimr_mu…üddr
;

281 
ö_addr
 
	mimr_öãrÁ˚
;

284 
ö_addr
 
	mimr_sour˚addr
;

288 #i‚de‡
__USE_KERNEL_IPV6_DEFS


290 
	sùv6_mªq


293 
ö6_addr
 
	mùv6mr_mu…üddr
;

296 
	mùv6mr_öãrÁ˚
;

300 #ifde‡
__USE_MISC


302 
	sgroup_ªq


305 
uöt32_t
 
	mgr_öãrÁ˚
;

308 
sockaddr_°‹age
 
	mgr_group
;

311 
	sgroup_sour˚_ªq


314 
uöt32_t
 
	mg§_öãrÁ˚
;

317 
sockaddr_°‹age
 
	mg§_group
;

320 
sockaddr_°‹age
 
	mg§_sour˚
;

325 
	sù_msfûãr


328 
ö_addr
 
	mimsf_mu…üddr
;

331 
ö_addr
 
	mimsf_öãrÁ˚
;

334 
uöt32_t
 
	mimsf_fmode
;

337 
uöt32_t
 
	mimsf_num§c
;

339 
ö_addr
 
	mimsf_¶i°
[1];

342 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

343 -  (
ö_addr
) \

344 + (
num§c
Ë*  (
ö_addr
))

	)

346 
	sgroup_fûãr


349 
uöt32_t
 
	mgf_öãrÁ˚
;

352 
sockaddr_°‹age
 
	mgf_group
;

355 
uöt32_t
 
	mgf_fmode
;

358 
uöt32_t
 
	mgf_num§c
;

360 
sockaddr_°‹age
 
	mgf_¶i°
[1];

363 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

364 -  (
sockaddr_°‹age
) \

365 + ((
num§c
) \

366 *  (
sockaddr_°‹age
)))

	)

376 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

377 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

378 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

379 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

380 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

381 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

382 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

384 
	~<ídün.h
>

387 
	~<bôs/byãsw≠.h
>

389 #ifde‡
__OPTIMIZE__


393 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


396 
	#¡ohl
(
x
Ë(x)

	)

397 
	#¡ohs
(
x
Ë(x)

	)

398 
	#ht⁄l
(
x
Ë(x)

	)

399 
	#ht⁄s
(
x
Ë(x)

	)

401 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


402 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

403 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

404 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

405 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

410 #ifde‡
__GNUC__


411 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

412 (
__exãnsi⁄__
 \

413 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

414 
__a
->
s6_addr32
[0] == 0 \

415 && 
__a
->
s6_addr32
[1] == 0 \

416 && 
__a
->
s6_addr32
[2] == 0 \

417 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

419 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

420 (
__exãnsi⁄__
 \

421 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

422 
__a
->
s6_addr32
[0] == 0 \

423 && 
__a
->
s6_addr32
[1] == 0 \

424 && 
__a
->
s6_addr32
[2] == 0 \

425 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

427 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

428 (
__exãnsi⁄__
 \

429 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

430 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

432 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

433 (
__exãnsi⁄__
 \

434 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

435 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

437 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

438 (
__exãnsi⁄__
 \

439 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

440 
__a
->
s6_addr32
[0] == 0 \

441 && 
__a
->
s6_addr32
[1] == 0 \

442 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

444 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

445 (
__exãnsi⁄__
 \

446 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

447 
__a
->
s6_addr32
[0] == 0 \

448 && 
__a
->
s6_addr32
[1] == 0 \

449 && 
__a
->
s6_addr32
[2] == 0 \

450 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

452 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

453 (
__exãnsi⁄__
 \

454 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

455 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

456 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

457 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

458 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

459 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

461 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

462 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

463 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

464 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

465 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

467 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

468 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

469 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

470 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

471 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

473 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

474 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

475 =
	`ht⁄l
 (0x„800000))

	)

477 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

478 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

479 =
	`ht⁄l
 (0x„c00000))

	)

481 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

482 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

483 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

484 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

486 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

487 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

488 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

489 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

490 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

492 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

493 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

494 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

495 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

496 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

499 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

501 #ifde‡
__USE_MISC


503 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

506 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

507 
__THROW
;

511 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

512 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

513 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

515 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

516 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

517 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

519 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

520 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

521 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

523 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

524 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

525 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

527 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

528 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

529 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

532 #ifde‡
__USE_GNU


533 
cmsghdr
;

535 #i‚de‡
__USE_KERNEL_IPV6_DEFS


537 
	sö6_pktöfo


539 
ö6_addr
 
ùi6_addr
;

540 
ùi6_ifödex
;

544 
	sù6_mtuöfo


546 
sockaddr_ö6
 
ù6m_addr
;

547 
uöt32_t
 
ù6m_mtu
;

552 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

553 
__THROW
 
__©åibuã_dïªˇãd__
;

554 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

555 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

556 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

557 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

558 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

559 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

560 
__mu…x
, 
__∂usy
)

561 
__THROW
 
__©åibuã_dïªˇãd__
;

562 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

563 
uöt8_t
 **
__çåp
)

564 
__THROW
 
__©åibuã_dïªˇãd__
;

565 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

566 
uöt8_t
 **
__çåp
, 
__ty≥
)

567 
__THROW
 
__©åibuã_dïªˇãd__
;

571 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

572 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

573 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

574 **
__d©abuÂ
Ë
__THROW
;

575 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

576 
__THROW
;

577 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

578 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

579 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

580 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

581 **
__d©abuÂ
Ë
__THROW
;

582 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

583 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

584 **
__d©abuÂ
Ë
__THROW
;

585 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

586 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

590 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

591 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

592 
__£gmíts
Ë
__THROW
;

593 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

594 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

595 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

596 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

597 
__THROW
;

603 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

604 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

605 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

606 
__THROW
;

609 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

610 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

611 
uöt32_t
 
__num§c
,

612 c⁄° 
ö_addr
 *
__¶i°
)

613 
__THROW
;

617 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

618 c⁄° 
sockaddr
 *
__group
,

619 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

620 
uöt32_t
 *
__num§c
,

621 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

624 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

625 c⁄° 
sockaddr
 *
__group
,

626 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

627 
uöt32_t
 
__num§c
,

628 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

631 
__END_DECLS


	@/usr/include/pcap/pcap.h

35 #i‚de‡
lib_pˇp_pˇp_h


36 
	#lib_pˇp_pˇp_h


	)

38 #i‡
deföed
(
WIN32
)

39 
	~<pˇp-°döc.h
>

40 #ñi‡
deföed
(
MSDOS
)

41 
	~<sys/ty≥s.h
>

42 
	~<sys/sockë.h
>

44 
	~<sys/ty≥s.h
>

45 
	~<sys/time.h
>

48 #i‚de‡
PCAP_DONT_INCLUDE_PCAP_BPF_H


49 
	~<pˇp/bpf.h
>

52 
	~<°dio.h
>

54 #ifde‡
__˝lu•lus


65 
	#PCAP_VERSION_MAJOR
 2

	)

66 
	#PCAP_VERSION_MINOR
 4

	)

68 
	#PCAP_ERRBUF_SIZE
 256

	)

74 #i‡
BPF_RELEASE
 - 0 < 199406

75 
	tbpf_öt32
;

76 
u_öt
 
	tbpf_u_öt32
;

79 
pˇp
 
	tpˇp_t
;

80 
pˇp_dum≥r
 
	tpˇp_dum≥r_t
;

81 
pˇp_if
 
	tpˇp_if_t
;

82 
pˇp_addr
 
	tpˇp_addr_t
;

122 
	spˇp_fûe_hódî
 {

123 
bpf_u_öt32
 
magic
;

124 
u_sh‹t
 
vîsi⁄_maj‹
;

125 
u_sh‹t
 
vîsi⁄_mö‹
;

126 
bpf_öt32
 
thisz⁄e
;

127 
bpf_u_öt32
 
sigfigs
;

128 
bpf_u_öt32
 
¢≠Àn
;

129 
bpf_u_öt32
 
lökty≥
;

138 
	#LT_FCS_LENGTH_PRESENT
(
x
Ë((xË& 0x04000000)

	)

139 
	#LT_FCS_LENGTH
(
x
Ë(((xË& 0xF0000000Ë>> 28)

	)

140 
	#LT_FCS_DATALINK_EXT
(
x
Ë((((xË& 0xFË<< 28Ë| 0x04000000)

	)

143 
PCAP_D_INOUT
 = 0,

144 
PCAP_D_IN
,

145 
PCAP_D_OUT


146 } 
	tpˇp_dúe˘i⁄_t
;

160 
	spˇp_pkthdr
 {

161 
timevÆ
 
ts
;

162 
bpf_u_öt32
 
ˇ∂í
;

163 
bpf_u_öt32
 
Àn
;

169 
	spˇp_°©
 {

170 
u_öt
 
ps_ªcv
;

171 
u_öt
 
ps_dr›
;

172 
u_öt
 
ps_ifdr›
;

173 #ifde‡
WIN32


174 
u_öt
 
bs_ˇ±
;

178 #ifde‡
MSDOS


182 
	spˇp_°©_ex
 {

183 
u_l⁄g
 
rx_∑ckës
;

184 
u_l⁄g
 
tx_∑ckës
;

185 
u_l⁄g
 
rx_byãs
;

186 
u_l⁄g
 
tx_byãs
;

187 
u_l⁄g
 
rx_îr‹s
;

188 
u_l⁄g
 
tx_îr‹s
;

189 
u_l⁄g
 
rx_dr›≥d
;

190 
u_l⁄g
 
tx_dr›≥d
;

191 
u_l⁄g
 
mu…iˇ°
;

192 
u_l⁄g
 
cﬁlisi⁄s
;

195 
u_l⁄g
 
rx_Àngth_îr‹s
;

196 
u_l⁄g
 
rx_ovî_îr‹s
;

197 
u_l⁄g
 
rx_¸c_îr‹s
;

198 
u_l⁄g
 
rx_‰ame_îr‹s
;

199 
u_l⁄g
 
rx_fifo_îr‹s
;

200 
u_l⁄g
 
rx_mis£d_îr‹s
;

203 
u_l⁄g
 
tx_ab‹ãd_îr‹s
;

204 
u_l⁄g
 
tx_ˇºõr_îr‹s
;

205 
u_l⁄g
 
tx_fifo_îr‹s
;

206 
u_l⁄g
 
tx_hóπbót_îr‹s
;

207 
u_l⁄g
 
tx_wödow_îr‹s
;

214 
	spˇp_if
 {

215 
pˇp_if
 *
√xt
;

216 *
«me
;

217 *
des¸ùti⁄
;

218 
pˇp_addr
 *
addªs£s
;

219 
bpf_u_öt32
 
Êags
;

222 
	#PCAP_IF_LOOPBACK
 0x00000001

	)

223 
	#PCAP_IF_UP
 0x00000002

	)

224 
	#PCAP_IF_RUNNING
 0x00000004

	)

229 
	spˇp_addr
 {

230 
pˇp_addr
 *
√xt
;

231 
sockaddr
 *
addr
;

232 
sockaddr
 *
√tmask
;

233 
sockaddr
 *
brﬂdaddr
;

234 
sockaddr
 *
d°addr
;

237 (*
pˇp_h™dÀr
)(
	tu_ch¨
 *, c⁄° 
	tpˇp_pkthdr
 *,

238 c⁄° 
	tu_ch¨
 *);

246 
	#PCAP_ERROR
 -1

	)

247 
	#PCAP_ERROR_BREAK
 -2

	)

248 
	#PCAP_ERROR_NOT_ACTIVATED
 -3

	)

249 
	#PCAP_ERROR_ACTIVATED
 -4

	)

250 
	#PCAP_ERROR_NO_SUCH_DEVICE
 -5

	)

251 
	#PCAP_ERROR_RFMON_NOTSUP
 -6

	)

252 
	#PCAP_ERROR_NOT_RFMON
 -7

	)

253 
	#PCAP_ERROR_PERM_DENIED
 -8

	)

254 
	#PCAP_ERROR_IFACE_NOT_UP
 -9

	)

255 
	#PCAP_ERROR_CANTSET_TSTAMP_TYPE
 -10

	)

256 
	#PCAP_ERROR_PROMISC_PERM_DENIED
 -11

	)

257 
	#PCAP_ERROR_TSTAMP_PRECISION_NOTSUP
 -12

	)

264 
	#PCAP_WARNING
 1

	)

265 
	#PCAP_WARNING_PROMISC_NOTSUP
 2

	)

266 
	#PCAP_WARNING_TSTAMP_TYPE_NOTSUP
 3

	)

272 
	#PCAP_NETMASK_UNKNOWN
 0xffffffff

	)

274 *
pˇp_lookupdev
(*);

275 
pˇp_looku≤ë
(c⁄° *, 
bpf_u_öt32
 *, bpf_u_int32 *, *);

277 
pˇp_t
 *
pˇp_¸óã
(const *, *);

278 
pˇp_£t_¢≠Àn
(
pˇp_t
 *, );

279 
pˇp_£t_¥omisc
(
pˇp_t
 *, );

280 
pˇp_ˇn_£t_rfm⁄
(
pˇp_t
 *);

281 
pˇp_£t_rfm⁄
(
pˇp_t
 *, );

282 
pˇp_£t_timeout
(
pˇp_t
 *, );

283 
pˇp_£t_t°amp_ty≥
(
pˇp_t
 *, );

284 
pˇp_£t_immedüã_mode
(
pˇp_t
 *, );

285 
pˇp_£t_buf„r_size
(
pˇp_t
 *, );

286 
pˇp_£t_t°amp_¥ecisi⁄
(
pˇp_t
 *, );

287 
pˇp_gë_t°amp_¥ecisi⁄
(
pˇp_t
 *);

288 
pˇp_a˘iv©e
(
pˇp_t
 *);

290 
pˇp_li°_t°amp_ty≥s
(
pˇp_t
 *, **);

291 
pˇp_‰ì_t°amp_ty≥s
(*);

292 
pˇp_t°amp_ty≥_«me_to_vÆ
(const *);

293 c⁄° *
pˇp_t°amp_ty≥_vÆ_to_«me
();

294 c⁄° *
pˇp_t°amp_ty≥_vÆ_to_des¸ùti⁄
();

334 
	#PCAP_TSTAMP_HOST
 0

	)

335 
	#PCAP_TSTAMP_HOST_LOWPREC
 1

	)

336 
	#PCAP_TSTAMP_HOST_HIPREC
 2

	)

337 
	#PCAP_TSTAMP_ADAPTER
 3

	)

338 
	#PCAP_TSTAMP_ADAPTER_UNSYNCED
 4

	)

346 
	#PCAP_TSTAMP_PRECISION_MICRO
 0

	)

347 
	#PCAP_TSTAMP_PRECISION_NANO
 1

	)

349 
pˇp_t
 *
pˇp_›í_live
(const *, , , , *);

350 
pˇp_t
 *
pˇp_›í_dód
(, );

351 
pˇp_t
 *
pˇp_›í_dód_wôh_t°amp_¥ecisi⁄
(, , 
u_öt
);

352 
pˇp_t
 *
pˇp_›í_ofÊöe_wôh_t°amp_¥ecisi⁄
(c⁄° *, 
u_öt
, *);

353 
pˇp_t
 *
pˇp_›í_ofÊöe
(const *, *);

354 #i‡
deföed
(
WIN32
)

355 
pˇp_t
 *
pˇp_h›í_ofÊöe_wôh_t°amp_¥ecisi⁄
(
öçå_t
, 
u_öt
, *);

356 
pˇp_t
 *
pˇp_h›í_ofÊöe
(
öçå_t
, *);

357 #i‡!
deföed
(
LIBPCAP_EXPORTS
)

358 
	#pˇp_f›í_ofÊöe_wôh_t°amp_¥ecisi⁄
(
f
,
p
,
b
) \

359 
	`pˇp_h›í_ofÊöe_wôh_t°amp_¥ecisi⁄
(
	`_gë_osfh™dÀ
(
	`_fûío
(
f
)), 
p
, 
b
)

	)

360 
	#pˇp_f›í_ofÊöe
(
f
,
b
) \

361 
	`pˇp_h›í_ofÊöe
(
	`_gë_osfh™dÀ
(
	`_fûío
(
f
)), 
b
)

	)

363 
pˇp_t
 *
pˇp_f›í_ofÊöe_wôh_t°amp_¥ecisi⁄
(
FILE
 *, 
u_öt
, *);

364 
pˇp_t
 *
pˇp_f›í_ofÊöe
(
FILE
 *, *);

367 
pˇp_t
 *
pˇp_f›í_ofÊöe_wôh_t°amp_¥ecisi⁄
(
FILE
 *, 
u_öt
, *);

368 
pˇp_t
 *
pˇp_f›í_ofÊöe
(
FILE
 *, *);

371 
pˇp_˛o£
(
pˇp_t
 *);

372 
pˇp_lo›
(
pˇp_t
 *, , 
pˇp_h™dÀr
, 
u_ch¨
 *);

373 
pˇp_di•©ch
(
pˇp_t
 *, , 
pˇp_h™dÀr
, 
u_ch¨
 *);

374 c⁄° 
u_ch¨
*

375 
pˇp_√xt
(
pˇp_t
 *, 
pˇp_pkthdr
 *);

376 
pˇp_√xt_ex
(
pˇp_t
 *, 
pˇp_pkthdr
 **, c⁄° 
u_ch¨
 **);

377 
pˇp_bªaklo›
(
pˇp_t
 *);

378 
pˇp_°©s
(
pˇp_t
 *, 
pˇp_°©
 *);

379 
pˇp_£tfûãr
(
pˇp_t
 *, 
bpf_¥ogøm
 *);

380 
pˇp_£tdúe˘i⁄
(
pˇp_t
 *, 
pˇp_dúe˘i⁄_t
);

381 
pˇp_gën⁄block
(
pˇp_t
 *, *);

382 
pˇp_£ä⁄block
(
pˇp_t
 *, , *);

383 
pˇp_öje˘
(
pˇp_t
 *, c⁄° *, 
size_t
);

384 
pˇp_£nd∑ckë
(
pˇp_t
 *, c⁄° 
u_ch¨
 *, );

385 c⁄° *
pˇp_°©u°o°r
();

386 c⁄° *
pˇp_°ªº‹
();

387 *
pˇp_gëîr
(
pˇp_t
 *);

388 
pˇp_≥º‹
(
pˇp_t
 *, *);

389 
pˇp_compûe
(
pˇp_t
 *, 
bpf_¥ogøm
 *, const *, ,

390 
bpf_u_öt32
);

391 
pˇp_compûe_n›ˇp
(, , 
bpf_¥ogøm
 *,

392 c⁄° *, , 
bpf_u_öt32
);

393 
pˇp_‰ìcode
(
bpf_¥ogøm
 *);

394 
pˇp_ofÊöe_fûãr
(c⁄° 
bpf_¥ogøm
 *,

395 c⁄° 
pˇp_pkthdr
 *, c⁄° 
u_ch¨
 *);

396 
pˇp_d©Æök
(
pˇp_t
 *);

397 
pˇp_d©Æök_ext
(
pˇp_t
 *);

398 
pˇp_li°_d©Æöks
(
pˇp_t
 *, **);

399 
pˇp_£t_d©Æök
(
pˇp_t
 *, );

400 
pˇp_‰ì_d©Æöks
(*);

401 
pˇp_d©Æök_«me_to_vÆ
(const *);

402 c⁄° *
pˇp_d©Æök_vÆ_to_«me
();

403 c⁄° *
pˇp_d©Æök_vÆ_to_des¸ùti⁄
();

404 
pˇp_¢≠shŸ
(
pˇp_t
 *);

405 
pˇp_is_sw≠≥d
(
pˇp_t
 *);

406 
pˇp_maj‹_vîsi⁄
(
pˇp_t
 *);

407 
pˇp_mö‹_vîsi⁄
(
pˇp_t
 *);

410 
FILE
 *
pˇp_fûe
(
pˇp_t
 *);

411 
pˇp_fûío
(
pˇp_t
 *);

413 
pˇp_dum≥r_t
 *
pˇp_dump_›í
(
pˇp_t
 *, const *);

414 
pˇp_dum≥r_t
 *
pˇp_dump_f›í
(
pˇp_t
 *, 
FILE
 *
Â
);

415 
pˇp_dum≥r_t
 *
pˇp_dump_›í_≠≥nd
(
pˇp_t
 *, const *);

416 
FILE
 *
pˇp_dump_fûe
(
pˇp_dum≥r_t
 *);

417 
pˇp_dump_·ñl
(
pˇp_dum≥r_t
 *);

418 
pˇp_dump_Êush
(
pˇp_dum≥r_t
 *);

419 
pˇp_dump_˛o£
(
pˇp_dum≥r_t
 *);

420 
pˇp_dump
(
u_ch¨
 *, c⁄° 
pˇp_pkthdr
 *, const u_char *);

422 
pˇp_födÆldevs
(
pˇp_if_t
 **, *);

423 
pˇp_‰ìÆldevs
(
pˇp_if_t
 *);

425 c⁄° *
pˇp_lib_vîsi⁄
();

434 #i‡!
deföed
(
__NëBSD__
Ë&& !deföed(
__QNX__
)

435 
u_öt
 
bpf_fûãr
(c⁄° 
bpf_ö¢
 *, c⁄° 
u_ch¨
 *, u_int, u_int);

437 
bpf_vÆid©e
(c⁄° 
bpf_ö¢
 *
f
, 
Àn
);

438 *
bpf_image
(c⁄° 
bpf_ö¢
 *, );

439 
bpf_dump
(c⁄° 
bpf_¥ogøm
 *, );

441 #i‡
deföed
(
WIN32
)

447 
pˇp_£tbuff
(
pˇp_t
 *
p
, 
dim
);

448 
pˇp_£tmode
(
pˇp_t
 *
p
, 
mode
);

449 
pˇp_£tmötoc›y
(
pˇp_t
 *
p
, 
size
);

450 
Ad≠ãr
 *
pˇp_gë_ad≠ãr
(
pˇp_t
 *
p
);

452 #ifde‡
WPCAP


454 
	~<Wö32-Exãnsi⁄s.h
>

457 
	#MODE_CAPT
 0

	)

458 
	#MODE_STAT
 1

	)

459 
	#MODE_MON
 2

	)

461 #ñi‡
deföed
(
MSDOS
)

467 
pˇp_°©s_ex
 (
pˇp_t
 *, 
pˇp_°©_ex
 *);

468 
pˇp_£t_waô
 (
pˇp_t
 *
p
, (*
yõld
)(), 
waô
);

469 
u_l⁄g
 
pˇp_mac_∑ckës
 ();

477 
pˇp_gë_£À˘abÀ_fd
(
pˇp_t
 *);

481 #ifde‡
__˝lu•lus


	@/usr/include/poll.h

1 
	~<sys/pﬁl.h
>

	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


85 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


86 
	#PTHREAD_MUTEX_INITIALIZER
 \

87 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

88 #ifde‡
__USE_GNU


89 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

90 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

91 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

92 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

93 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

94 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

98 
	#PTHREAD_MUTEX_INITIALIZER
 \

99 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

100 #ifde‡
__USE_GNU


101 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

102 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

103 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

105 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

113 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


116 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

117 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

119 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


125 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


126 #i‡
__WORDSIZE
 == 64

127 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

132 
	#PTHREAD_RWLOCK_INITIALIZER
 \

133 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

134 #ifde‡
__USE_GNU


135 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


136 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

137 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, \

138 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

140 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


141 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

142 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

143 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

145 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

146 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

147 0 } }

	)

157 
	mPTHREAD_INHERIT_SCHED
,

158 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

159 
	mPTHREAD_EXPLICIT_SCHED


160 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

167 
	mPTHREAD_SCOPE_SYSTEM
,

168 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

169 
	mPTHREAD_SCOPE_PROCESS


170 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

177 
	mPTHREAD_PROCESS_PRIVATE
,

178 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

179 
	mPTHREAD_PROCESS_SHARED


180 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

186 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

190 
	s_±hªad_˛ónup_buf„r


192 (*
	m__routöe
) (*);

193 *
	m__¨g
;

194 
	m__ˇn˚…y≥
;

195 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

201 
	mPTHREAD_CANCEL_ENABLE
,

202 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

203 
	mPTHREAD_CANCEL_DISABLE


204 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

208 
	mPTHREAD_CANCEL_DEFERRED
,

209 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

210 
	mPTHREAD_CANCEL_ASYNCHRONOUS


211 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

213 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

217 
	#PTHREAD_ONCE_INIT
 0

	)

220 #ifde‡
__USE_XOPEN2K


224 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

228 
__BEGIN_DECLS


233 
	$±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

234 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

235 *(*
__°¨t_routöe
) (*),

236 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

242 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

250 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

252 #ifde‡
__USE_GNU


255 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

263 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

264 c⁄° 
time•ec
 *
__ab°ime
);

271 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

275 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

278 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

279 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

287 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

291 
__THROW
 
	`__n⁄nuŒ
 ((1));

294 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

295 *
__dëach°©e
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

299 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

300 
__dëach°©e
)

301 
__THROW
 
	`__n⁄nuŒ
 ((1));

305 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

306 
size_t
 *
__gu¨dsize
)

307 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

310 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

311 
size_t
 
__gu¨dsize
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1));

316 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

317 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

321 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

322 c⁄° 
sched_∑øm
 *
__ª°ri˘


323 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

326 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


327 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

328 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

331 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

332 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


336 
__©å
, *
__ª°ri˘
 
__öhîô
)

337 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

340 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

341 
__öhîô
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1));

346 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

347 *
__ª°ri˘
 
__sc›e
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

351 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

352 
__THROW
 
	`__n⁄nuŒ
 ((1));

355 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


356 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

363 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

364 *
__°ackaddr
)

365 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

368 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


369 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

370 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

375 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

376 
size_t
 
__°acksize
)

377 
__THROW
 
	`__n⁄nuŒ
 ((1));

379 #ifde‡
__USE_XOPEN2K


381 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

382 **
__ª°ri˘
 
__°ackaddr
,

383 
size_t
 *
__ª°ri˘
 
__°acksize
)

384 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

389 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

390 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 #ifde‡
__USE_GNU


396 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

397 
size_t
 
__˝u£tsize
,

398 c⁄° 
˝u_£t_t
 *
__˝u£t
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

403 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

404 
size_t
 
__˝u£tsize
,

405 
˝u_£t_t
 *
__˝u£t
)

406 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

409 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

410 
__THROW
 
	`__n⁄nuŒ
 ((1));

414 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

415 
__THROW
 
	`__n⁄nuŒ
 ((1));

420 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2));

429 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

430 c⁄° 
sched_∑øm
 *
__∑øm
)

431 
__THROW
 
	`__n⁄nuŒ
 ((3));

434 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

435 *
__ª°ri˘
 
__pﬁicy
,

436 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

437 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

440 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

441 
__THROW
;

444 #ifde‡
__USE_GNU


446 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

447 
size_t
 
__buÊí
)

448 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

452 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 #ifde‡
__USE_UNIX98


458 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

461 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

464 #ifde‡
__USE_GNU


469 
	$±hªad_yõld
 (Ë
__THROW
;

474 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

475 c⁄° 
˝u_£t_t
 *
__˝u£t
)

476 
__THROW
 
	`__n⁄nuŒ
 ((3));

479 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

480 
˝u_£t_t
 *
__˝u£t
)

481 
__THROW
 
	`__n⁄nuŒ
 ((3));

494 
	$±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

495 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

506 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

510 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

513 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

518 
	`±hªad_ã°ˇn˚l
 ();

527 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

528 
__mask_was_ßved
;

529 } 
__ˇn˚l_jmp_buf
[1];

530 *
__∑d
[4];

531 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

534 #i‚de‡
__˛ónup_f˘_©åibuã


535 
	#__˛ónup_f˘_©åibuã


	)

540 
	s__±hªad_˛ónup_‰ame


542 (*
__ˇn˚l_routöe
) (*);

543 *
__ˇn˚l_¨g
;

544 
__do_ô
;

545 
__ˇn˚l_ty≥
;

548 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


549 #ifde‡
__˝lu•lus


551 ˛as†
	c__±hªad_˛ónup_˛ass


553 (*
__ˇn˚l_routöe
) (*);

554 *
__ˇn˚l_¨g
;

555 
__do_ô
;

556 
__ˇn˚l_ty≥
;

558 
public
:

559 
	$__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

560 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

561 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

562 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

563 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

564 &
__ˇn˚l_ty≥
); 
	}
}

565 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

575 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

577 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

581 
	#±hªad_˛ónup_p›
(
execuã
) \

582 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

583 } 0)

	)

585 #ifde‡
__USE_GNU


589 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

591 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

592 
__˛‰ame
.
	`__de„r
 ()

	)

597 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

598 
__˛‰ame
.
	`__ª°‹e
 (); \

599 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

600 } 0)

	)

607 
__exã∫_ölöe
 

608 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

610 i‡(
__‰ame
->
__do_ô
)

611 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

612 
	}
}

621 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

623 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

624 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

625 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

626 .
__do_ô
 = 1 };

	)

630 
	#±hªad_˛ónup_p›
(
execuã
) \

631 
__˛‰ame
.
__do_ô
 = (
execuã
); \

632 } 0)

	)

634 #ifde‡
__USE_GNU


638 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

640 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

641 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

642 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

643 .
__do_ô
 = 1 }; \

644 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

645 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

650 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

651 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

652 
__˛‰ame
.
__do_ô
 = (
execuã
); \

653 } 0)

	)

664 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

666 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

667 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

668 *
__ˇn˚l_¨g
 = (
¨g
); \

669 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

670 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

671 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

673 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

674 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

678 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

679 dÿ{

	)

680 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

681 
__˛ónup_f˘_©åibuã
;

685 
	#±hªad_˛ónup_p›
(
execuã
) \

688 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

689 i‡(
execuã
) \

690 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

691 } 0)

	)

692 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

693 
__˛ónup_f˘_©åibuã
;

695 #ifde‡
__USE_GNU


699 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

701 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

702 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

703 *
__ˇn˚l_¨g
 = (
¨g
); \

704 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

705 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

706 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

708 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

709 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

713 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

714 dÿ{

	)

715 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

716 
__˛ónup_f˘_©åibuã
;

721 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

724 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

725 i‡(
execuã
) \

726 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

727 
	}
} 0)

	)

728 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

729 
__˛ónup_f˘_©åibuã
;

733 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

734 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

735 #i‚de‡
SHARED


736 
	`__©åibuã__
 ((
__wók__
))

742 
__jmp_buf_èg
;

743 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

749 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

750 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

751 
__THROW
 
	`__n⁄nuŒ
 ((1));

754 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

755 
__THROW
 
	`__n⁄nuŒ
 ((1));

758 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

759 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

763 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

765 #ifde‡
__USE_XOPEN2K


767 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

768 c⁄° 
time•ec
 *
__ª°ri˘


769 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

773 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

774 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

778 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

779 
__ª°ri˘
 
__muãx
,

780 *
__ª°ri˘
 
__¥io˚ûög
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

785 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

786 
__¥io˚ûög
,

787 *
__ª°ri˘
 
__ﬁd_˚ûög
)

788 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

791 #ifde‡
__USE_XOPEN2K8


793 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

794 
__THROW
 
	`__n⁄nuŒ
 ((1));

795 #ifde‡
__USE_GNU


796 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

797 
__THROW
 
	`__n⁄nuŒ
 ((1));

806 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1));

810 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1));

814 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

815 
__ª°ri˘
 
__©å
,

816 *
__ª°ri˘
 
__psh¨ed
)

817 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

820 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

821 
__psh¨ed
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

824 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


826 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


827 
__©å
, *
__ª°ri˘
 
__köd
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

833 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

834 
__THROW
 
	`__n⁄nuŒ
 ((1));

838 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

839 
__ª°ri˘
 
__©å
,

840 *
__ª°ri˘
 
__¥Ÿocﬁ
)

841 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

845 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

846 
__¥Ÿocﬁ
)

847 
__THROW
 
	`__n⁄nuŒ
 ((1));

850 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

851 
__ª°ri˘
 
__©å
,

852 *
__ª°ri˘
 
__¥io˚ûög
)

853 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__¥io˚ûög
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

860 #ifde‡
__USE_XOPEN2K


862 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

863 *
__robu°√ss
)

864 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

865 #ifde‡
__USE_GNU


866 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

867 *
__robu°√ss
)

868 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

872 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

873 
__robu°√ss
)

874 
__THROW
 
	`__n⁄nuŒ
 ((1));

875 #ifde‡
__USE_GNU


876 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

877 
__robu°√ss
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

883 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


888 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

889 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


890 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

893 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

894 
__THROW
 
	`__n⁄nuŒ
 ((1));

897 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

898 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

901 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

902 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

904 #ifde‡
__USE_XOPEN2K


906 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

907 c⁄° 
time•ec
 *
__ª°ri˘


908 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

912 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

913 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

916 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

917 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

919 #ifde‡
__USE_XOPEN2K


921 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

922 c⁄° 
time•ec
 *
__ª°ri˘


923 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

927 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

928 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

934 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

935 
__THROW
 
	`__n⁄nuŒ
 ((1));

938 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

939 
__THROW
 
	`__n⁄nuŒ
 ((1));

942 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

943 
__ª°ri˘
 
__©å
,

944 *
__ª°ri˘
 
__psh¨ed
)

945 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

948 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

949 
__psh¨ed
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

954 
__ª°ri˘
 
__©å
,

955 *
__ª°ri˘
 
__¥ef
)

956 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

959 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

960 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

968 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

969 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

970 
__THROW
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

974 
__THROW
 
	`__n⁄nuŒ
 ((1));

977 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

978 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

981 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

982 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

989 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

990 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

991 
	`__n⁄nuŒ
 ((1, 2));

1000 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1001 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1002 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1003 
	`__n⁄nuŒ
 ((1, 2, 3));

1008 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1009 
__THROW
 
	`__n⁄nuŒ
 ((1));

1012 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1013 
__THROW
 
	`__n⁄nuŒ
 ((1));

1016 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1017 
__ª°ri˘
 
__©å
,

1018 *
__ª°ri˘
 
__psh¨ed
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1022 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1023 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1025 #ifde‡
__USE_XOPEN2K


1027 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1028 
__ª°ri˘
 
__©å
,

1029 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1030 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1033 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1034 
__˛ockid_t
 
__˛ock_id
)

1035 
__THROW
 
	`__n⁄nuŒ
 ((1));

1039 #ifde‡
__USE_XOPEN2K


1044 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1045 
__THROW
 
	`__n⁄nuŒ
 ((1));

1048 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1049 
__THROW
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1053 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1056 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1057 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1060 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1061 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1068 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1069 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1070 
__©å
, 
__cou¡
)

1071 
__THROW
 
	`__n⁄nuŒ
 ((1));

1074 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1075 
__THROW
 
	`__n⁄nuŒ
 ((1));

1078 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1079 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1083 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1084 
__THROW
 
	`__n⁄nuŒ
 ((1));

1087 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1088 
__THROW
 
	`__n⁄nuŒ
 ((1));

1091 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1092 
__ª°ri˘
 
__©å
,

1093 *
__ª°ri˘
 
__psh¨ed
)

1094 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1097 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1098 
__psh¨ed
)

1099 
__THROW
 
	`__n⁄nuŒ
 ((1));

1111 
	$±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1112 (*
__de°r_fun˘i⁄
) (*))

1113 
__THROW
 
	`__n⁄nuŒ
 ((1));

1116 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1119 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1122 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1123 c⁄° *
__poöãr
Ë
__THROW
 ;

1126 #ifde‡
__USE_XOPEN2K


1128 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1129 
__˛ockid_t
 *
__˛ock_id
)

1130 
__THROW
 
	`__n⁄nuŒ
 ((2));

1145 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1146 (*
__∑ª¡
) (),

1147 (*
__chûd
Ë()Ë
__THROW
;

1150 #ifde‡
__USE_EXTERN_INLINES


1152 
__exã∫_ölöe
 

1153 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1155  
__thªad1
 =
__thªad2
;

1156 
	}
}

1159 
	g__END_DECLS


	@/usr/include/setjmp.h

22 #i‚def 
_SETJMP_H


23 
	#_SETJMP_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/sig£t.h
>

34 
	s__jmp_buf_èg


40 
__jmp_buf
 
	m__jmpbuf
;

41 
	m__mask_was_ßved
;

42 
__sig£t_t
 
	m__ßved_mask
;

46 
__BEGIN_NAMESPACE_STD


48 
__jmp_buf_èg
 
	tjmp_buf
[1];

52 
	$£tjmp
 (
jmp_buf
 
__ív
Ë
__THROWNL
;

54 
__END_NAMESPACE_STD


59 
	$__sig£tjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__ßvemask
Ë
__THROWNL
;

63 
	$_£tjmp
 (
__jmp_buf_èg
 
__ív
[1]Ë
__THROWNL
;

67 
	#£tjmp
(
ív
Ë
	`_£tjmp
 (ív)

	)

70 
__BEGIN_NAMESPACE_STD


74 
	$l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

75 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

77 
__END_NAMESPACE_STD


79 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


83 
	$_l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

84 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

88 #ifdef 
__USE_POSIX


92 
__jmp_buf_èg
 
	tsigjmp_buf
[1];

96 
	#sig£tjmp
(
ív
, 
ßvemask
Ë
	`__sig£tjmp
 (ív, savemask)

	)

102 
	$sigl⁄gjmp
 (
sigjmp_buf
 
__ív
, 
__vÆ
)

103 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

108 #i‡
__USE_FORTIFY_LEVEL
 > 0

109 
	~<bôs/£tjmp2.h
>

112 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_MISC


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_MISC


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #ifde‡
__USE_XOPEN2K8


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

166 #ifde‡
__USE_XOPEN


167 #ifde‡
__GNUC__


168 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

170 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

172 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

177 #ifde‡
__USE_MISC


184 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

187 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

190 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

193 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

197 #ifde‡
__USE_MISC


198 
	#NSIG
 
_NSIG


	)

201 #ifde‡
__USE_GNU


202 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

206 #ifde‡
__USE_MISC


207 
__sigh™dÀr_t
 
	tsig_t
;

210 #ifde‡
__USE_POSIX


213 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

216 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

226 
__THROW
 
	`__n⁄nuŒ
 ((1));

228 #ifde‡
__USE_GNU


230 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

233 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

234 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

237 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

238 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

243 
	~<bôs/siga˘i⁄.h
>

246 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

247 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

254 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

257 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

258 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

261 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

268 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

269 
	`__n⁄nuŒ
 ((1, 2));

271 #ifde‡
__USE_POSIX199309


276 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

277 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

284 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

285 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

286 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

287 
	`__n⁄nuŒ
 ((1));

291 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

292 
__THROW
;

297 #ifde‡
__USE_MISC


301 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

302 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

306 
	~<bôs/sigc⁄ãxt.h
>

309 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

314 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


315 
	#__√ed_size_t


	)

316 
	~<°ddef.h
>

321 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

323 
	~<bôs/sig°ack.h
>

324 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


326 
	~<sys/uc⁄ãxt.h
>

332 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

333 
__THROW
 
__©åibuã_dïªˇãd__
;

337 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

338 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

342 #ifde‡
__USE_XOPEN_EXTENDED


346 
	$sighﬁd
 (
__sig
Ë
__THROW
;

349 
	$sigªl£
 (
__sig
Ë
__THROW
;

352 
	$sigign‹e
 (
__sig
Ë
__THROW
;

355 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

358 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


361 
	~<bôs/±hªadty≥s.h
>

362 
	~<bôs/sigthªad.h
>

369 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

371 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

375 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #ifde‡
__WORDSIZE32_SIZE_ULONG


264 
	#SIZE_MAX
 (4294967295UL)

	)

266 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

282 
	#INT8_C
(
c
Ë
	)
c

283 
	#INT16_C
(
c
Ë
	)
c

284 
	#INT32_C
(
c
Ë
	)
c

285 #i‡
__WORDSIZE
 == 64

286 
	#INT64_C
(
c
Ë¯## 
L


	)

288 
	#INT64_C
(
c
Ë¯## 
LL


	)

292 
	#UINT8_C
(
c
Ë
	)
c

293 
	#UINT16_C
(
c
Ë
	)
c

294 
	#UINT32_C
(
c
Ë¯## 
U


	)

295 #i‡
__WORDSIZE
 == 64

296 
	#UINT64_C
(
c
Ë¯## 
UL


	)

298 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#INTMAX_C
(
c
Ë¯## 
L


	)

304 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

306 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

307 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_MISC


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #ifde‡
__USE_POSIX


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #ifde‡
__USE_POSIX


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #ifde‡
__USE_POSIX2


872 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

878 
	`p˛o£
 (
FILE
 *
__°ªam
);

882 #ifdef 
__USE_POSIX


884 *
	$˘îmid
 (*
__s
Ë
__THROW
;

888 #ifde‡
__USE_XOPEN


890 *
	`cu£rid
 (*
__s
);

894 #ifdef 
__USE_GNU


895 
ob°ack
;

898 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

899 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

900 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

901 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

902 c⁄° *
__ª°ri˘
 
__f‹m©
,

903 
_G_va_li°
 
__¨gs
)

904 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

908 #ifde‡
__USE_POSIX


912 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

916 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

919 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

922 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


926 
	#__√ed_gë›t


	)

927 
	~<gë›t.h
>

932 #ifde‡
__USE_EXTERN_INLINES


933 
	~<bôs/°dio.h
>

935 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


936 
	~<bôs/°dio2.h
>

938 #ifde‡
__LDBL_COMPAT


939 
	~<bôs/°dio-ldbl.h
>

942 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_MISC


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #ifde‡
__USE_ISOC99


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_MISC


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #ifde‡
__USE_ISOC99


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #ifde‡
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #ifde‡
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_MISC


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	$©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #ifde‡
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


618 #i‚de‡
__USE_FILE_OFFSET64


619 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 #ifde‡
__REDIRECT


622 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

623 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

625 
	#mk°emp
 
mk°emp64


	)

628 #ifde‡
__USE_LARGEFILE64


629 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_MISC


640 #i‚de‡
__USE_FILE_OFFSET64


641 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #ifde‡
__REDIRECT


644 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

645 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

647 
	#mk°emps
 
mk°emps64


	)

650 #ifde‡
__USE_LARGEFILE64


651 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

652 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

656 #ifde‡
__USE_XOPEN2K8


662 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

665 #ifde‡
__USE_GNU


672 #i‚de‡
__USE_FILE_OFFSET64


673 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 #ifde‡
__REDIRECT


676 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

677 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

679 
	#mko°emp
 
mko°emp64


	)

682 #ifde‡
__USE_LARGEFILE64


683 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #i‚de‡
__USE_FILE_OFFSET64


693 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

694 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

696 #ifde‡
__REDIRECT


697 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

698 
__Êags
), 
mko°emps64
)

699 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

701 
	#mko°emps
 
mko°emps64


	)

704 #ifde‡
__USE_LARGEFILE64


705 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

706 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

711 
__BEGIN_NAMESPACE_STD


716 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

717 
__END_NAMESPACE_STD


720 #ifdef 
__USE_GNU


723 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

724 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

727 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


733 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

734 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

739 #i‚de‡
__COMPAR_FN_T


740 
	#__COMPAR_FN_T


	)

741 (*
	t__com∑r_‚_t
) (const *, const *);

743 #ifdef 
__USE_GNU


744 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

747 #ifde‡
__USE_GNU


748 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

751 
__BEGIN_NAMESPACE_STD


754 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

755 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

756 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

758 #ifde‡
__USE_EXTERN_INLINES


759 
	~<bôs/°dlib-b£¨ch.h
>

764 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

766 #ifde‡
__USE_GNU


767 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

768 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

769 
	`__n⁄nuŒ
 ((1, 4));

774 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

775 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
__END_NAMESPACE_STD


778 #ifde‡
__USE_ISOC99


779 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

780 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

784 
__BEGIN_NAMESPACE_STD


788 
div_t
 
	$div
 (
__numî
, 
__díom
)

789 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

790 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

791 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

792 
__END_NAMESPACE_STD


794 #ifde‡
__USE_ISOC99


795 
__BEGIN_NAMESPACE_C99


796 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

797 
__díom
)

798 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

799 
__END_NAMESPACE_C99


803 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

804 || 
deföed
 
__USE_MISC


811 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

812 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

817 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

818 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

823 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

824 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

827 #ifde‡
__USE_MISC


829 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

833 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

834 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

835 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

836 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

841 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

844 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

845 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

846 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

848 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

849 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

850 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

851 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

852 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

853 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

854 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

855 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

859 
__BEGIN_NAMESPACE_STD


862 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

865 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

866 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

869 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

873 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

874 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

876 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

877 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

878 
__THROW
;

879 
__END_NAMESPACE_STD


882 #ifde‡
__USE_MISC


887 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


898 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

899 *c⁄° *
__ª°ri˘
 
__tokís
,

900 **
__ª°ri˘
 
__vÆuï
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

905 #ifde‡
__USE_XOPEN


907 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

913 #ifde‡
__USE_XOPEN2KXSI


915 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

918 #ifde‡
__USE_XOPEN


923 
	$gø¡±
 (
__fd
Ë
__THROW
;

927 
	$u∆ock±
 (
__fd
Ë
__THROW
;

932 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

935 #ifde‡
__USE_GNU


939 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

940 
__THROW
 
	`__n⁄nuŒ
 ((2));

943 
	`gë±
 ();

946 #ifde‡
__USE_MISC


950 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

951 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 
	~<bôs/°dlib-Êﬂt.h
>

957 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


958 
	~<bôs/°dlib.h
>

960 #ifde‡
__LDBL_COMPAT


961 
	~<bôs/°dlib-ldbl.h
>

965 #unde‡
__√ed_mÆloc_™d_ˇŒoc


967 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

36 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

69 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


72 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

74 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__OPTIMIZE__


78 
__exã∫_Æways_ölöe
 *

79 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


81  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

84 
__exã∫_Æways_ölöe
 const *

85 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


87  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 
__END_NAMESPACE_STD


97 #ifde‡
__USE_GNU


100 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


101 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


112 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2));

153 
__END_NAMESPACE_STD


155 #ifde‡
__USE_XOPEN2K8


159 
	~<xloˇÀ.h
>

162 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

163 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

165 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

166 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

169 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


171 *
	$°rdup
 (c⁄° *
__s
)

172 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_XOPEN2K8


179 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

180 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


185 
	#°rdu∑
(
s
) \

186 (
__exãnsi⁄__
 \

188 c⁄° *
__ﬁd
 = (
s
); \

189 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

190 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

191 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

192 
	}
}))

	)

195 
	#°∫du∑
(
s
, 
n
) \

196 (
__exãnsi⁄__
 \

198 c⁄° *
__ﬁd
 = (
s
); \

199 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

200 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

201 
__√w
[
__Àn
] = '\0'; \

202 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

203 }))

	)

206 
	g__BEGIN_NAMESPACE_STD


208 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


211 *
°rchr
 (*
__s
, 
__c
)

212 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

213 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

214 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

216 #ifde‡
__OPTIMIZE__


217 
__exã∫_Æways_ölöe
 *

218 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

223 
__exã∫_Æways_ölöe
 const *

224 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


226  
__buûtö_°rchr
 (
__s
, 
__c
);

231 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

232 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

235 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


238 *
	`°ºchr
 (*
__s
, 
__c
)

239 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

241 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

243 #ifde‡
__OPTIMIZE__


244 
__exã∫_Æways_ölöe
 *

245 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
__exã∫_Æways_ölöe
 const *

251 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


253  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

256 
	}
}

258 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

259 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

261 
__END_NAMESPACE_STD


263 #ifde‡
__USE_GNU


266 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


267 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

268 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

269 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

270 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 
__BEGIN_NAMESPACE_STD


280 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

281 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


290 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

291 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

293 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

295 #ifde‡
__OPTIMIZE__


296 
__exã∫_Æways_ölöe
 *

297 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


299  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

302 
__exã∫_Æways_ölöe
 const *

303 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


305  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

308 
	}
}

310 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

311 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


317 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

318 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

320 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

322 #ifde‡
__OPTIMIZE__


323 
__exã∫_Æways_ölöe
 *

324 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


326  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

329 
__exã∫_Æways_ölöe
 const *

330 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


332  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

335 
	}
}

337 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

338 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

343 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

344 
__THROW
 
	`__n⁄nuŒ
 ((2));

345 
__END_NAMESPACE_STD


349 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

350 c⁄° *
__ª°ri˘
 
__dñim
,

351 **
__ª°ri˘
 
__ßve_±r
)

352 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

353 #ifde‡
__USE_POSIX


354 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

355 **
__ª°ri˘
 
__ßve_±r
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

359 #ifde‡
__USE_GNU


361 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


362 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

363 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

365 c⁄° *
__√edÀ
)

366 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

368 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

369 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 #ifde‡
__USE_GNU


377 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

378 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

379 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

383 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

384 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

385 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

387 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

392 
__BEGIN_NAMESPACE_STD


394 
size_t
 
	$°æí
 (c⁄° *
__s
)

395 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 
__END_NAMESPACE_STD


398 #ifdef 
__USE_XOPEN2K8


401 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

402 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

406 
__BEGIN_NAMESPACE_STD


408 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

409 
__END_NAMESPACE_STD


410 #ifde‡
__USE_XOPEN2K


418 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


421 #ifde‡
__REDIRECT_NTH


422 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

423 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

424 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

426 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

427 
__THROW
 
	`__n⁄nuŒ
 ((2));

428 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

433 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

434 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

438 #ifde‡
__USE_XOPEN2K8


440 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

446 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

448 #ifde‡
__USE_MISC


450 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

451 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

457 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

458 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

461 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


464 *
	`ödex
 (*
__s
, 
__c
)

465 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

466 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

467 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

469 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


470 
__exã∫_Æways_ölöe
 *

471 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


473  
	`__buûtö_ödex
 (
__s
, 
__c
);

476 
__exã∫_Æways_ölöe
 const *

477 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


479  
	`__buûtö_ödex
 (
__s
, 
__c
);

482 
	}
}

484 *
	$ödex
 (c⁄° *
__s
, 
__c
)

485 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

489 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


492 *
	`rödex
 (*
__s
, 
__c
)

493 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

495 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

497 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


498 
__exã∫_Æways_ölöe
 *

499 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


501  
	`__buûtö_rödex
 (
__s
, 
__c
);

504 
__exã∫_Æways_ölöe
 const *

505 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


507  
	`__buûtö_rödex
 (
__s
, 
__c
);

510 
	}
}

512 *
	$rödex
 (c⁄° *
__s
, 
__c
)

513 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

518 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

522 #ifdef 
__USE_GNU


523 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

524 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

525 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

530 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

533 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

534 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

537 #ifdef 
__USE_GNU


540 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

541 
__loˇÀ_t
 
__loc
)

542 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

544 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

545 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

546 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

549 #ifdef 
__USE_MISC


552 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

553 c⁄° *
__ª°ri˘
 
__dñim
)

554 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifdef 
__USE_XOPEN2K8


559 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

562 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

563 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

570 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

572 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

573 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 #ifdef 
__USE_GNU


579 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

580 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

583 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

586 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

588 #i‚de‡
ba£«me


593 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


594 "C++" *
	$ba£«me
 (*
__fûíame
)

595 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

596 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

597 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

599 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

605 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

606 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

607 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


627 
	~<bôs/°rög.h
>

630 
	~<bôs/°rög2.h
>

633 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


635 
	~<bôs/°rög3.h
>

639 #i‡
deföed
 
__USE_GNU
 && deföed 
__OPTIMIZE__
 \

640 && 
deföed
 
__exã∫_Æways_ölöe
 && 
	$__GNUC_PREREQ
 (3,2)

641 #i‡!
deföed
 
_FORCE_INLINES
 && !deföed 
_HAVE_STRING_ARCH_memp˝y


643 #unde‡
memp˝y


644 #unde‡
__memp˝y


645 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

646 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

648 
__exã∫_Æways_ölöe
 *

649 
	$__memp˝y_ölöe
 (*
__ª°ri˘
 
__de°
,

650 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

652  (*Ë
	`mem˝y
 (
__de°
, 
__§c
, 
__n
) + __n;

653 
	}
}

658 
	g__END_DECLS


	@/usr/include/sys/ioctl.h

18 #i‚def 
_SYS_IOCTL_H


19 
	#_SYS_IOCTL_H
 1

	)

21 
	~<„©uªs.h
>

23 
	g__BEGIN_DECLS


26 
	~<bôs/io˘ls.h
>

29 
	~<bôs/io˘l-ty≥s.h
>

36 
	~<sys/âydeÁu…s.h
>

41 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

43 
__END_DECLS


	@/usr/include/sys/queue.h

32 #i‚def 
_SYS_QUEUE_H_


33 
	#_SYS_QUEUE_H_


	)

84 
	#LIST_HEAD
(
«me
, 
ty≥
) \

85 
	s«me
 { \

86 
ty≥
 *
lh_fú°
; \

87 }

	)

89 
	#LIST_HEAD_INITIALIZER
(
hód
) \

90 { 
NULL
 }

	)

92 
	#LIST_ENTRY
(
ty≥
) \

94 
ty≥
 *
À_√xt
; \

95 
ty≥
 **
À_¥ev
; \

96 }

	)

101 
	#LIST_INIT
(
hód
) do { \

102 (
hód
)->
lh_fú°
 = 
NULL
; \

103 }  0)

	)

105 
	#LIST_INSERT_AFTER
(
li°ñm
, 
ñm
, 
fõld
) do { \

106 i‡(((
ñm
)->
fõld
.
À_√xt
 = (
li°ñm
)->fõld.À_√xtË!
NULL
) \

107 (
li°ñm
)->
fõld
.
À_√xt
->fõld.
À_¥ev
 = \

108 &(
ñm
)->
fõld
.
À_√xt
; \

109 (
li°ñm
)->
fõld
.
À_√xt
 = (
ñm
); \

110 (
ñm
)->
fõld
.
À_¥ev
 = &(
li°ñm
)->fõld.
À_√xt
; \

111 }  0)

	)

113 
	#LIST_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

114 (
ñm
)->
fõld
.
À_¥ev
 = (
li°ñm
)->field.le_prev; \

115 (
ñm
)->
fõld
.
À_√xt
 = (
li°ñm
); \

116 *(
li°ñm
)->
fõld
.
À_¥ev
 = (
ñm
); \

117 (
li°ñm
)->
fõld
.
À_¥ev
 = &(
ñm
)->fõld.
À_√xt
; \

118 }  0)

	)

120 
	#LIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

121 i‡(((
ñm
)->
fõld
.
À_√xt
 = (
hód
)->
lh_fú°
Ë!
NULL
) \

122 (
hód
)->
lh_fú°
->
fõld
.
À_¥ev
 = &(
ñm
)->fõld.
À_√xt
;\

123 (
hód
)->
lh_fú°
 = (
ñm
); \

124 (
ñm
)->
fõld
.
À_¥ev
 = &(
hód
)->
lh_fú°
; \

125 }  0)

	)

127 
	#LIST_REMOVE
(
ñm
, 
fõld
) do { \

128 i‡((
ñm
)->
fõld
.
À_√xt
 !
NULL
) \

129 (
ñm
)->
fõld
.
À_√xt
->fõld.
À_¥ev
 = \

130 (
ñm
)->
fõld
.
À_¥ev
; \

131 *(
ñm
)->
fõld
.
À_¥ev
 = (ñm)->fõld.
À_√xt
; \

132 }  0)

	)

134 
	#LIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

135 (
v¨
Ë((
hód
)->
lh_fú°
); \

136 (
v¨
); \

137 (
v¨
Ë((v¨)->
fõld
.
À_√xt
))

	)

142 
	#LIST_EMPTY
(
hód
Ë((hód)->
lh_fú°
 =
NULL
)

	)

143 
	#LIST_FIRST
(
hód
Ë((hód)->
lh_fú°
)

	)

144 
	#LIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
À_√xt
)

	)

150 
	#SLIST_HEAD
(
«me
, 
ty≥
) \

151 
	s«me
 { \

152 
ty≥
 *
¶h_fú°
; \

153 }

	)

155 
	#SLIST_HEAD_INITIALIZER
(
hód
) \

156 { 
NULL
 }

	)

158 
	#SLIST_ENTRY
(
ty≥
) \

160 
ty≥
 *
¶e_√xt
; \

161 }

	)

166 
	#SLIST_INIT
(
hód
) do { \

167 (
hód
)->
¶h_fú°
 = 
NULL
; \

168 }  0)

	)

170 
	#SLIST_INSERT_AFTER
(
¶i°ñm
, 
ñm
, 
fõld
) do { \

171 (
ñm
)->
fõld
.
¶e_√xt
 = (
¶i°ñm
)->field.sle_next; \

172 (
¶i°ñm
)->
fõld
.
¶e_√xt
 = (
ñm
); \

173 }  0)

	)

175 
	#SLIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

176 (
ñm
)->
fõld
.
¶e_√xt
 = (
hód
)->
¶h_fú°
; \

177 (
hód
)->
¶h_fú°
 = (
ñm
); \

178 }  0)

	)

180 
	#SLIST_REMOVE_HEAD
(
hód
, 
fõld
) do { \

181 (
hód
)->
¶h_fú°
 = (hód)->¶h_fú°->
fõld
.
¶e_√xt
; \

182 }  0)

	)

184 
	#SLIST_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

185 i‡((
hód
)->
¶h_fú°
 =(
ñm
)) { \

186 
	`SLIST_REMOVE_HEAD
((
hód
), 
fõld
); \

189 
ty≥
 *
cuªlm
 = (
hód
)->
¶h_fú°
; \

190 
cuªlm
->
fõld
.
¶e_√xt
 !(
ñm
)) \

191 
cuªlm
 = cuªlm->
fõld
.
¶e_√xt
; \

192 
cuªlm
->
fõld
.
¶e_√xt
 = \

193 
cuªlm
->
fõld
.
¶e_√xt
->field.sle_next; \

195 }  0)

	)

197 
	#SLIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

198 (
v¨
Ë(
hód
)->
¶h_fú°
; (v¨); (v¨Ë(v¨)->
fõld
.
¶e_√xt
)

	)

203 
	#SLIST_EMPTY
(
hód
Ë((hód)->
¶h_fú°
 =
NULL
)

	)

204 
	#SLIST_FIRST
(
hód
Ë((hód)->
¶h_fú°
)

	)

205 
	#SLIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
¶e_√xt
)

	)

211 
	#STAILQ_HEAD
(
«me
, 
ty≥
) \

212 
	s«me
 { \

213 
ty≥
 *
°qh_fú°
; \

214 
ty≥
 **
°qh_œ°
; \

215 }

	)

217 
	#STAILQ_HEAD_INITIALIZER
(
hód
) \

218 { 
NULL
, &(
hód
).
°qh_fú°
 }

	)

220 
	#STAILQ_ENTRY
(
ty≥
) \

222 
ty≥
 *
°qe_√xt
; \

223 }

	)

228 
	#STAILQ_INIT
(
hód
) do { \

229 (
hód
)->
°qh_fú°
 = 
NULL
; \

230 (
hód
)->
°qh_œ°
 = &(hód)->
°qh_fú°
; \

231 }  0)

	)

233 
	#STAILQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

234 i‡(((
ñm
)->
fõld
.
°qe_√xt
 = (
hód
)->
°qh_fú°
Ë=
NULL
) \

235 (
hód
)->
°qh_œ°
 = &(
ñm
)->
fõld
.
°qe_√xt
; \

236 (
hód
)->
°qh_fú°
 = (
ñm
); \

237 }  0)

	)

239 
	#STAILQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

240 (
ñm
)->
fõld
.
°qe_√xt
 = 
NULL
; \

241 *(
hód
)->
°qh_œ°
 = (
ñm
); \

242 (
hód
)->
°qh_œ°
 = &(
ñm
)->
fõld
.
°qe_√xt
; \

243 }  0)

	)

245 
	#STAILQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

246 i‡(((
ñm
)->
fõld
.
°qe_√xt
 = (
li°ñm
)->fõld.°qe_√xtË=
NULL
)\

247 (
hód
)->
°qh_œ°
 = &(
ñm
)->
fõld
.
°qe_√xt
; \

248 (
li°ñm
)->
fõld
.
°qe_√xt
 = (
ñm
); \

249 }  0)

	)

251 
	#STAILQ_REMOVE_HEAD
(
hód
, 
fõld
) do { \

252 i‡(((
hód
)->
°qh_fú°
 = (hód)->°qh_fú°->
fõld
.
°qe_√xt
Ë=
NULL
) \

253 (
hód
)->
°qh_œ°
 = &(hód)->
°qh_fú°
; \

254 }  0)

	)

256 
	#STAILQ_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

257 i‡((
hód
)->
°qh_fú°
 =(
ñm
)) { \

258 
	`STAILQ_REMOVE_HEAD
((
hód
), 
fõld
); \

260 
ty≥
 *
cuªlm
 = (
hód
)->
°qh_fú°
; \

261 
cuªlm
->
fõld
.
°qe_√xt
 !(
ñm
)) \

262 
cuªlm
 = cuªlm->
fõld
.
°qe_√xt
; \

263 i‡((
cuªlm
->
fõld
.
°qe_√xt
 = \

264 
cuªlm
->
fõld
.
°qe_√xt
->fõld.°qe_√xtË=
NULL
) \

265 (
hód
)->
°qh_œ°
 = &(
cuªlm
)->
fõld
.
°qe_√xt
; \

267 }  0)

	)

269 
	#STAILQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

270 (
v¨
Ë((
hód
)->
°qh_fú°
); \

271 (
v¨
); \

272 (
v¨
Ë((v¨)->
fõld
.
°qe_√xt
))

	)

274 
	#STAILQ_CONCAT
(
hód1
, 
hód2
) do { \

275 i‡(!
	`STAILQ_EMPTY
((
hód2
))) { \

276 *(
hód1
)->
°qh_œ°
 = (
hód2
)->
°qh_fú°
; \

277 (
hód1
)->
°qh_œ°
 = (
hód2
)->stqh_last; \

278 
	`STAILQ_INIT
((
hód2
)); \

280 }  0)

	)

285 
	#STAILQ_EMPTY
(
hód
Ë((hód)->
°qh_fú°
 =
NULL
)

	)

286 
	#STAILQ_FIRST
(
hód
Ë((hód)->
°qh_fú°
)

	)

287 
	#STAILQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
°qe_√xt
)

	)

293 
	#SIMPLEQ_HEAD
(
«me
, 
ty≥
) \

294 
	s«me
 { \

295 
ty≥
 *
sqh_fú°
; \

296 
ty≥
 **
sqh_œ°
; \

297 }

	)

299 
	#SIMPLEQ_HEAD_INITIALIZER
(
hód
) \

300 { 
NULL
, &(
hód
).
sqh_fú°
 }

	)

302 
	#SIMPLEQ_ENTRY
(
ty≥
) \

304 
ty≥
 *
sqe_√xt
; \

305 }

	)

310 
	#SIMPLEQ_INIT
(
hód
) do { \

311 (
hód
)->
sqh_fú°
 = 
NULL
; \

312 (
hód
)->
sqh_œ°
 = &(hód)->
sqh_fú°
; \

313 }  0)

	)

315 
	#SIMPLEQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

316 i‡(((
ñm
)->
fõld
.
sqe_√xt
 = (
hód
)->
sqh_fú°
Ë=
NULL
) \

317 (
hód
)->
sqh_œ°
 = &(
ñm
)->
fõld
.
sqe_√xt
; \

318 (
hód
)->
sqh_fú°
 = (
ñm
); \

319 }  0)

	)

321 
	#SIMPLEQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

322 (
ñm
)->
fõld
.
sqe_√xt
 = 
NULL
; \

323 *(
hód
)->
sqh_œ°
 = (
ñm
); \

324 (
hód
)->
sqh_œ°
 = &(
ñm
)->
fõld
.
sqe_√xt
; \

325 }  0)

	)

327 
	#SIMPLEQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

328 i‡(((
ñm
)->
fõld
.
sqe_√xt
 = (
li°ñm
)->fõld.sqe_√xtË=
NULL
)\

329 (
hód
)->
sqh_œ°
 = &(
ñm
)->
fõld
.
sqe_√xt
; \

330 (
li°ñm
)->
fõld
.
sqe_√xt
 = (
ñm
); \

331 }  0)

	)

333 
	#SIMPLEQ_REMOVE_HEAD
(
hód
, 
fõld
) do { \

334 i‡(((
hód
)->
sqh_fú°
 = (hód)->sqh_fú°->
fõld
.
sqe_√xt
Ë=
NULL
) \

335 (
hód
)->
sqh_œ°
 = &(hód)->
sqh_fú°
; \

336 }  0)

	)

338 
	#SIMPLEQ_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

339 i‡((
hód
)->
sqh_fú°
 =(
ñm
)) { \

340 
	`SIMPLEQ_REMOVE_HEAD
((
hód
), 
fõld
); \

342 
ty≥
 *
cuªlm
 = (
hód
)->
sqh_fú°
; \

343 
cuªlm
->
fõld
.
sqe_√xt
 !(
ñm
)) \

344 
cuªlm
 = cuªlm->
fõld
.
sqe_√xt
; \

345 i‡((
cuªlm
->
fõld
.
sqe_√xt
 = \

346 
cuªlm
->
fõld
.
sqe_√xt
->fõld.sqe_√xtË=
NULL
) \

347 (
hód
)->
sqh_œ°
 = &(
cuªlm
)->
fõld
.
sqe_√xt
; \

349 }  0)

	)

351 
	#SIMPLEQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

352 (
v¨
Ë((
hód
)->
sqh_fú°
); \

353 (
v¨
); \

354 (
v¨
Ë((v¨)->
fõld
.
sqe_√xt
))

	)

359 
	#SIMPLEQ_EMPTY
(
hód
Ë((hód)->
sqh_fú°
 =
NULL
)

	)

360 
	#SIMPLEQ_FIRST
(
hód
Ë((hód)->
sqh_fú°
)

	)

361 
	#SIMPLEQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
sqe_√xt
)

	)

367 
	#_TAILQ_HEAD
(
«me
, 
ty≥
, 
quÆ
) \

368 
	s«me
 { \

369 
quÆ
 
ty≥
 *
tqh_fú°
; \

370 
quÆ
 
ty≥
 *quÆ *
tqh_œ°
; \

371 }

	)

372 
	#TAILQ_HEAD
(
«me
, 
ty≥
Ë
	`_TAILQ_HEAD
“ame, ty≥,)

	)

374 
	#TAILQ_HEAD_INITIALIZER
(
hód
) \

375 { 
NULL
, &(
hód
).
tqh_fú°
 }

	)

377 
	#_TAILQ_ENTRY
(
ty≥
, 
quÆ
) \

379 
quÆ
 
ty≥
 *
tqe_√xt
; \

380 
quÆ
 
ty≥
 *quÆ *
tqe_¥ev
; \

381 }

	)

382 
	#TAILQ_ENTRY
(
ty≥
Ë
	`_TAILQ_ENTRY
(ty≥,)

	)

387 
	#TAILQ_INIT
(
hód
) do { \

388 (
hód
)->
tqh_fú°
 = 
NULL
; \

389 (
hód
)->
tqh_œ°
 = &(hód)->
tqh_fú°
; \

390 }  0)

	)

392 
	#TAILQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

393 i‡(((
ñm
)->
fõld
.
tqe_√xt
 = (
hód
)->
tqh_fú°
Ë!
NULL
) \

394 (
hód
)->
tqh_fú°
->
fõld
.
tqe_¥ev
 = \

395 &(
ñm
)->
fõld
.
tqe_√xt
; \

397 (
hód
)->
tqh_œ°
 = &(
ñm
)->
fõld
.
tqe_√xt
; \

398 (
hód
)->
tqh_fú°
 = (
ñm
); \

399 (
ñm
)->
fõld
.
tqe_¥ev
 = &(
hód
)->
tqh_fú°
; \

400 }  0)

	)

402 
	#TAILQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

403 (
ñm
)->
fõld
.
tqe_√xt
 = 
NULL
; \

404 (
ñm
)->
fõld
.
tqe_¥ev
 = (
hód
)->
tqh_œ°
; \

405 *(
hód
)->
tqh_œ°
 = (
ñm
); \

406 (
hód
)->
tqh_œ°
 = &(
ñm
)->
fõld
.
tqe_√xt
; \

407 }  0)

	)

409 
	#TAILQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

410 i‡(((
ñm
)->
fõld
.
tqe_√xt
 = (
li°ñm
)->fõld.tqe_√xtË!
NULL
)\

411 (
ñm
)->
fõld
.
tqe_√xt
->fõld.
tqe_¥ev
 = \

412 &(
ñm
)->
fõld
.
tqe_√xt
; \

414 (
hód
)->
tqh_œ°
 = &(
ñm
)->
fõld
.
tqe_√xt
; \

415 (
li°ñm
)->
fõld
.
tqe_√xt
 = (
ñm
); \

416 (
ñm
)->
fõld
.
tqe_¥ev
 = &(
li°ñm
)->fõld.
tqe_√xt
; \

417 }  0)

	)

419 
	#TAILQ_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

420 (
ñm
)->
fõld
.
tqe_¥ev
 = (
li°ñm
)->field.tqe_prev; \

421 (
ñm
)->
fõld
.
tqe_√xt
 = (
li°ñm
); \

422 *(
li°ñm
)->
fõld
.
tqe_¥ev
 = (
ñm
); \

423 (
li°ñm
)->
fõld
.
tqe_¥ev
 = &(
ñm
)->fõld.
tqe_√xt
; \

424 }  0)

	)

426 
	#TAILQ_REMOVE
(
hód
, 
ñm
, 
fõld
) do { \

427 i‡(((
ñm
)->
fõld
.
tqe_√xt
Ë!
NULL
) \

428 (
ñm
)->
fõld
.
tqe_√xt
->fõld.
tqe_¥ev
 = \

429 (
ñm
)->
fõld
.
tqe_¥ev
; \

431 (
hód
)->
tqh_œ°
 = (
ñm
)->
fõld
.
tqe_¥ev
; \

432 *(
ñm
)->
fõld
.
tqe_¥ev
 = (ñm)->fõld.
tqe_√xt
; \

433 }  0)

	)

435 
	#TAILQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

436 (
v¨
Ë((
hód
)->
tqh_fú°
); \

437 (
v¨
); \

438 (
v¨
Ë((v¨)->
fõld
.
tqe_√xt
))

	)

440 
	#TAILQ_FOREACH_REVERSE
(
v¨
, 
hód
, 
hód«me
, 
fõld
) \

441 (
v¨
Ë(*(((
hód«me
 *)((
hód
)->
tqh_œ°
))->tqh_last)); \

442 (
v¨
); \

443 (
v¨
Ë(*(((
hód«me
 *)((v¨)->
fõld
.
tqe_¥ev
))->
tqh_œ°
)))

	)

445 
	#TAILQ_CONCAT
(
hód1
, 
hód2
, 
fõld
) do { \

446 i‡(!
	`TAILQ_EMPTY
(
hód2
)) { \

447 *(
hód1
)->
tqh_œ°
 = (
hód2
)->
tqh_fú°
; \

448 (
hód2
)->
tqh_fú°
->
fõld
.
tqe_¥ev
 = (
hód1
)->
tqh_œ°
; \

449 (
hód1
)->
tqh_œ°
 = (
hód2
)->tqh_last; \

450 
	`TAILQ_INIT
((
hód2
)); \

452 }  0)

	)

457 
	#TAILQ_EMPTY
(
hód
Ë((hód)->
tqh_fú°
 =
NULL
)

	)

458 
	#TAILQ_FIRST
(
hód
Ë((hód)->
tqh_fú°
)

	)

459 
	#TAILQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
tqe_√xt
)

	)

461 
	#TAILQ_LAST
(
hód
, 
hód«me
) \

462 (*(((
hód«me
 *)((
hód
)->
tqh_œ°
))->tqh_œ°))

	)

463 
	#TAILQ_PREV
(
ñm
, 
hód«me
, 
fõld
) \

464 (*(((
hód«me
 *)((
ñm
)->
fõld
.
tqe_¥ev
))->
tqh_œ°
))

	)

470 
	#CIRCLEQ_HEAD
(
«me
, 
ty≥
) \

471 
	s«me
 { \

472 
ty≥
 *
cqh_fú°
; \

473 
ty≥
 *
cqh_œ°
; \

474 }

	)

476 
	#CIRCLEQ_HEAD_INITIALIZER
(
hód
) \

477 { (*)&
hód
, (*)&hód }

	)

479 
	#CIRCLEQ_ENTRY
(
ty≥
) \

481 
ty≥
 *
cqe_√xt
; \

482 
ty≥
 *
cqe_¥ev
; \

483 }

	)

488 
	#CIRCLEQ_INIT
(
hód
) do { \

489 (
hód
)->
cqh_fú°
 = (*)(head); \

490 (
hód
)->
cqh_œ°
 = (*)(head); \

491 }  0)

	)

493 
	#CIRCLEQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

494 (
ñm
)->
fõld
.
cqe_√xt
 = (
li°ñm
)->field.cqe_next; \

495 (
ñm
)->
fõld
.
cqe_¥ev
 = (
li°ñm
); \

496 i‡((
li°ñm
)->
fõld
.
cqe_√xt
 =(*)(
hód
)) \

497 (
hód
)->
cqh_œ°
 = (
ñm
); \

499 (
li°ñm
)->
fõld
.
cqe_√xt
->fõld.
cqe_¥ev
 = (
ñm
); \

500 (
li°ñm
)->
fõld
.
cqe_√xt
 = (
ñm
); \

501 }  0)

	)

503 
	#CIRCLEQ_INSERT_BEFORE
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

504 (
ñm
)->
fõld
.
cqe_√xt
 = (
li°ñm
); \

505 (
ñm
)->
fõld
.
cqe_¥ev
 = (
li°ñm
)->field.cqe_prev; \

506 i‡((
li°ñm
)->
fõld
.
cqe_¥ev
 =(*)(
hód
)) \

507 (
hód
)->
cqh_fú°
 = (
ñm
); \

509 (
li°ñm
)->
fõld
.
cqe_¥ev
->fõld.
cqe_√xt
 = (
ñm
); \

510 (
li°ñm
)->
fõld
.
cqe_¥ev
 = (
ñm
); \

511 }  0)

	)

513 
	#CIRCLEQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

514 (
ñm
)->
fõld
.
cqe_√xt
 = (
hód
)->
cqh_fú°
; \

515 (
ñm
)->
fõld
.
cqe_¥ev
 = (*)(
hód
); \

516 i‡((
hód
)->
cqh_œ°
 == (*)(head)) \

517 (
hód
)->
cqh_œ°
 = (
ñm
); \

519 (
hód
)->
cqh_fú°
->
fõld
.
cqe_¥ev
 = (
ñm
); \

520 (
hód
)->
cqh_fú°
 = (
ñm
); \

521 }  0)

	)

523 
	#CIRCLEQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

524 (
ñm
)->
fõld
.
cqe_√xt
 = (*)(
hód
); \

525 (
ñm
)->
fõld
.
cqe_¥ev
 = (
hód
)->
cqh_œ°
; \

526 i‡((
hód
)->
cqh_fú°
 == (*)(head)) \

527 (
hód
)->
cqh_fú°
 = (
ñm
); \

529 (
hód
)->
cqh_œ°
->
fõld
.
cqe_√xt
 = (
ñm
); \

530 (
hód
)->
cqh_œ°
 = (
ñm
); \

531 }  0)

	)

533 
	#CIRCLEQ_REMOVE
(
hód
, 
ñm
, 
fõld
) do { \

534 i‡((
ñm
)->
fõld
.
cqe_√xt
 =(*)(
hód
)) \

535 (
hód
)->
cqh_œ°
 = (
ñm
)->
fõld
.
cqe_¥ev
; \

537 (
ñm
)->
fõld
.
cqe_√xt
->fõld.
cqe_¥ev
 = \

538 (
ñm
)->
fõld
.
cqe_¥ev
; \

539 i‡((
ñm
)->
fõld
.
cqe_¥ev
 =(*)(
hód
)) \

540 (
hód
)->
cqh_fú°
 = (
ñm
)->
fõld
.
cqe_√xt
; \

542 (
ñm
)->
fõld
.
cqe_¥ev
->fõld.
cqe_√xt
 = \

543 (
ñm
)->
fõld
.
cqe_√xt
; \

544 }  0)

	)

546 
	#CIRCLEQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

547 (
v¨
Ë((
hód
)->
cqh_fú°
); \

548 (
v¨
Ë!(c⁄° *)(
hód
); \

549 (
v¨
Ë((v¨)->
fõld
.
cqe_√xt
))

	)

551 
	#CIRCLEQ_FOREACH_REVERSE
(
v¨
, 
hód
, 
fõld
) \

552 (
v¨
Ë((
hód
)->
cqh_œ°
); \

553 (
v¨
Ë!(c⁄° *)(
hód
); \

554 (
v¨
Ë((v¨)->
fõld
.
cqe_¥ev
))

	)

559 
	#CIRCLEQ_EMPTY
(
hód
Ë((hód)->
cqh_fú°
 =(*)(hód))

	)

560 
	#CIRCLEQ_FIRST
(
hód
Ë((hód)->
cqh_fú°
)

	)

561 
	#CIRCLEQ_LAST
(
hód
Ë((hód)->
cqh_œ°
)

	)

562 
	#CIRCLEQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
cqe_√xt
)

	)

563 
	#CIRCLEQ_PREV
(
ñm
, 
fõld
Ë(”lm)->fõld.
cqe_¥ev
)

	)

565 
	#CIRCLEQ_LOOP_NEXT
(
hód
, 
ñm
, 
fõld
) \

566 (((
ñm
)->
fõld
.
cqe_√xt
 =(*)(
hód
)) \

567 ? ((
hód
)->
cqh_fú°
) \

568 : (
ñm
->
fõld
.
cqe_√xt
))

	)

569 
	#CIRCLEQ_LOOP_PREV
(
hód
, 
ñm
, 
fõld
) \

570 (((
ñm
)->
fõld
.
cqe_¥ev
 =(*)(
hód
)) \

571 ? ((
hód
)->
cqh_œ°
) \

572 : (
ñm
->
fõld
.
cqe_¥ev
))

	)

	@/usr/include/sys/stat.h

22 #i‚def 
_SYS_STAT_H


23 
	#_SYS_STAT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_ATFILE


30 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


31 
	#__√ed_time_t


	)

33 #ifde‡
__USE_ATFILE


34 
	#__√ed_time•ec


	)

36 
	~<time.h
>

39 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


42 #i‚de‡
__dev_t_deföed


43 
__dev_t
 
	tdev_t
;

44 
	#__dev_t_deföed


	)

47 #i‚de‡
__gid_t_deföed


48 
__gid_t
 
	tgid_t
;

49 
	#__gid_t_deföed


	)

52 #i‚de‡
__öo_t_deföed


53 #i‚de‡
__USE_FILE_OFFSET64


54 
__öo_t
 
	töo_t
;

56 
__öo64_t
 
	töo_t
;

58 
	#__öo_t_deföed


	)

61 #i‚de‡
__mode_t_deföed


62 
__mode_t
 
	tmode_t
;

63 
	#__mode_t_deföed


	)

66 #i‚de‡
__∆ök_t_deföed


67 
__∆ök_t
 
	t∆ök_t
;

68 
	#__∆ök_t_deföed


	)

71 #i‚de‡
__off_t_deföed


72 #i‚de‡
__USE_FILE_OFFSET64


73 
__off_t
 
	toff_t
;

75 
__off64_t
 
	toff_t
;

77 
	#__off_t_deföed


	)

80 #i‚de‡
__uid_t_deföed


81 
__uid_t
 
	tuid_t
;

82 
	#__uid_t_deföed


	)

86 #ifde‡
__USE_UNIX98


87 #i‚de‡
__blk˙t_t_deföed


88 #i‚de‡
__USE_FILE_OFFSET64


89 
__blk˙t_t
 
	tblk˙t_t
;

91 
__blk˙t64_t
 
	tblk˙t_t
;

93 
	#__blk˙t_t_deföed


	)

96 #i‚de‡
__blksize_t_deföed


97 
__blksize_t
 
	tblksize_t
;

98 
	#__blksize_t_deföed


	)

102 
	g__BEGIN_DECLS


104 
	~<bôs/°©.h
>

106 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


107 
	#S_IFMT
 
__S_IFMT


	)

108 
	#S_IFDIR
 
__S_IFDIR


	)

109 
	#S_IFCHR
 
__S_IFCHR


	)

110 
	#S_IFBLK
 
__S_IFBLK


	)

111 
	#S_IFREG
 
__S_IFREG


	)

112 #ifde‡
__S_IFIFO


113 
	#S_IFIFO
 
__S_IFIFO


	)

115 #ifde‡
__S_IFLNK


116 
	#S_IFLNK
 
__S_IFLNK


	)

118 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

119 && 
deföed
 
	g__S_IFSOCK


120 
	#S_IFSOCK
 
__S_IFSOCK


	)

126 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

128 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

129 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

130 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

131 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

132 #ifde‡
__S_IFIFO


133 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

135 #ifde‡
__S_IFLNK


136 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

139 #i‡
deföed
 
__USE_MISC
 && !deföed 
__S_IFLNK


140 
	#S_ISLNK
(
mode
Ë0

	)

143 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K
) \

144 && 
deföed
 
	g__S_IFSOCK


145 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

146 #ñi‡
deföed
 
__USE_XOPEN2K


147 
	#S_ISSOCK
(
mode
Ë0

	)

154 #ifdef 
__USE_POSIX199309


155 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

156 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

157 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

163 
	#S_ISUID
 
__S_ISUID


	)

164 
	#S_ISGID
 
__S_ISGID


	)

166 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


168 
	#S_ISVTX
 
__S_ISVTX


	)

171 
	#S_IRUSR
 
__S_IREAD


	)

172 
	#S_IWUSR
 
__S_IWRITE


	)

173 
	#S_IXUSR
 
__S_IEXEC


	)

175 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

177 #ifde‡
__USE_MISC


178 
	#S_IREAD
 
S_IRUSR


	)

179 
	#S_IWRITE
 
S_IWUSR


	)

180 
	#S_IEXEC
 
S_IXUSR


	)

183 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

184 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

185 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

187 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

189 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

190 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

191 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

193 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

196 #ifdef 
__USE_MISC


198 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

199 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

200 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

202 
	#S_BLKSIZE
 512

	)

206 #i‚de‡
__USE_FILE_OFFSET64


208 
	$°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

209 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

213 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

215 #ifde‡
__REDIRECT_NTH


216 
	`__REDIRECT_NTH
 (
°©
, (c⁄° *
__ª°ri˘
 
__fûe
,

217 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

218 
	`__n⁄nuŒ
 ((1, 2));

219 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

220 
	`__n⁄nuŒ
 ((2));

222 
	#°©
 
°©64


	)

223 
	#f°©
 
f°©64


	)

226 #ifde‡
__USE_LARGEFILE64


227 
	$°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

228 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

229 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

232 #ifde‡
__USE_ATFILE


236 #i‚de‡
__USE_FILE_OFFSET64


237 
	$f°©©
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

238 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

239 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

241 #ifde‡
__REDIRECT_NTH


242 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

243 
°©
 *
__ª°ri˘
 
__buf
,

244 
__Êag
),

245 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

247 
	#f°©©
 
f°©©64


	)

251 #ifde‡
__USE_LARGEFILE64


252 
	$f°©©64
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

253 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

254 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

258 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


259 #i‚de‡
__USE_FILE_OFFSET64


262 
	$l°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

263 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

265 #ifde‡
__REDIRECT_NTH


266 
	`__REDIRECT_NTH
 (
l°©
,

267 (c⁄° *
__ª°ri˘
 
__fûe
,

268 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

269 
	`__n⁄nuŒ
 ((1, 2));

271 
	#l°©
 
l°©64


	)

274 #ifde‡
__USE_LARGEFILE64


275 
	$l°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

276 
°©64
 *
__ª°ri˘
 
__buf
)

277 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

283 
	$chmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

284 
__THROW
 
	`__n⁄nuŒ
 ((1));

286 #ifde‡
__USE_MISC


290 
	$lchmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

291 
__THROW
 
	`__n⁄nuŒ
 ((1));

295 #ifde‡
__USE_POSIX


296 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

299 #ifde‡
__USE_ATFILE


302 
	$fchmod©
 (
__fd
, c⁄° *
__fûe
, 
__mode_t
 
__mode
,

303 
__Êag
)

304 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

313 #ifdef 
__USE_GNU


316 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

320 
	$mkdú
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1));

323 #ifde‡
__USE_ATFILE


327 
	$mkdú©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

328 
__THROW
 
	`__n⁄nuŒ
 ((2));

334 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


335 
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

336 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_ATFILE


342 
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

343 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

349 
	$mkfifo
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

350 
__THROW
 
	`__n⁄nuŒ
 ((1));

352 #ifde‡
__USE_ATFILE


356 
	$mkfifﬂt
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 #ifde‡
__USE_ATFILE


363 
	$utimíßt
 (
__fd
, c⁄° *
__∑th
,

364 c⁄° 
time•ec
 
__times
[2],

365 
__Êags
)

366 
__THROW
 
	`__n⁄nuŒ
 ((2));

369 #ifde‡
__USE_XOPEN2K8


371 
	$futimís
 (
__fd
, c⁄° 
time•ec
 
__times
[2]Ë
__THROW
;

389 #i‚de‡
_STAT_VER


390 
	#_STAT_VER
 0

	)

392 #i‚de‡
_MKNOD_VER


393 
	#_MKNOD_VER
 0

	)

397 #i‚de‡
__USE_FILE_OFFSET64


398 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

399 
__THROW
 
	`__n⁄nuŒ
 ((3));

400 
	$__x°©
 (
__vî
, c⁄° *
__fûíame
,

401 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

402 
	$__lx°©
 (
__vî
, c⁄° *
__fûíame
,

403 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

404 
	$__fx°©©
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

405 
°©
 *
__°©_buf
, 
__Êag
)

406 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

408 #ifde‡
__REDIRECT_NTH


409 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

410 
°©
 *
__°©_buf
), 
__fx°©64
)

411 
	`__n⁄nuŒ
 ((3));

412 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, c⁄° *
__fûíame
,

413 
°©
 *
__°©_buf
), 
__x°©64
)

414 
	`__n⁄nuŒ
 ((2, 3));

415 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, c⁄° *
__fûíame
,

416 
°©
 *
__°©_buf
), 
__lx°©64
)

417 
	`__n⁄nuŒ
 ((2, 3));

418 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

419 c⁄° *
__fûíame
,

420 
°©
 *
__°©_buf
, 
__Êag
),

421 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

424 
	#__fx°©
 
__fx°©64


	)

425 
	#__x°©
 
__x°©64


	)

426 
	#__lx°©
 
__lx°©64


	)

430 #ifde‡
__USE_LARGEFILE64


431 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

432 
__THROW
 
	`__n⁄nuŒ
 ((3));

433 
	$__x°©64
 (
__vî
, c⁄° *
__fûíame
,

434 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

435 
	$__lx°©64
 (
__vî
, c⁄° *
__fûíame
,

436 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

437 
	$__fx°©©64
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

438 
°©64
 *
__°©_buf
, 
__Êag
)

439 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

441 
	$__xmknod
 (
__vî
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

442 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

444 
	$__xmknod©
 (
__vî
, 
__fd
, c⁄° *
__∑th
,

445 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

446 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

448 #ifde‡
__USE_EXTERN_INLINES


451 
__exã∫_ölöe
 

452 
	`__NTH
 (
	$°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

454  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

455 
	}
}

457 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


458 
__exã∫_ölöe
 

459 
__NTH
 (
	$l°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

461  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

462 
	}
}

465 
__exã∫_ölöe
 

466 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

468  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

469 
	}
}

471 #ifde‡
__USE_ATFILE


472 
__exã∫_ölöe
 

473 
__NTH
 (
	$f°©©
 (
__fd
, c⁄° *
__fûíame
, 
°©
 *
__°©buf
,

474 
__Êag
))

476  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

477 
	}
}

480 #ifde‡
__USE_MISC


481 
__exã∫_ölöe
 

482 
__NTH
 (
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

484  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

485 
	}
}

488 #ifde‡
__USE_ATFILE


489 
__exã∫_ölöe
 

490 
__NTH
 (
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

491 
__dev_t
 
__dev
))

493  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

494 
	}
}

497 #i‡
deföed
 
__USE_LARGEFILE64
 \

498 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

499 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

500 
__exã∫_ölöe
 

501 
__NTH
 (
	$°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

503  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

504 
	}
}

506 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


507 
__exã∫_ölöe
 

508 
__NTH
 (
	$l°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

510  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

511 
	}
}

514 
__exã∫_ölöe
 

515 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

517  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

518 
	}
}

520 #ifde‡
__USE_ATFILE


521 
__exã∫_ölöe
 

522 
__NTH
 (
	$f°©©64
 (
__fd
, c⁄° *
__fûíame
, 
°©64
 *
__°©buf
,

523 
__Êag
))

525  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

526 
	}
}

533 
	g__END_DECLS


	@/usr/include/sys/time.h

18 #i‚de‡
_SYS_TIME_H


19 
	#_SYS_TIME_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	#__√ed_time_t


	)

25 
	~<time.h
>

26 
	#__√ed_timevÆ


	)

27 
	~<bôs/time.h
>

29 
	~<sys/£À˘.h
>

31 #i‚de‡
__su£c⁄ds_t_deföed


32 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

33 
	#__su£c⁄ds_t_deföed


	)

37 
	g__BEGIN_DECLS


39 #ifde‡
__USE_GNU


41 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

42 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

43 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

44 }

	)

45 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

46 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

47 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

48 }

	)

52 #ifde‡
__USE_MISC


55 
	stimez⁄e


57 
	mtz_möuãswe°
;

58 
	mtz_d°time
;

61 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

63 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

71 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

72 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

74 #ifde‡
__USE_MISC


77 
	$£âimeofday
 (c⁄° 
timevÆ
 *
__tv
,

78 c⁄° 
timez⁄e
 *
__tz
)

79 
__THROW
;

85 
	$adjtime
 (c⁄° 
timevÆ
 *
__dñè
,

86 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

91 
	e__ôimî_which


94 
ITIMER_REAL
 = 0,

95 
	#ITIMER_REAL
 
ITIMER_REAL


	)

97 
ITIMER_VIRTUAL
 = 1,

98 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

101 
ITIMER_PROF
 = 2

102 
	#ITIMER_PROF
 
ITIMER_PROF


	)

107 
	sôimîvÆ


110 
timevÆ
 
ô_öãrvÆ
;

112 
timevÆ
 
ô_vÆue
;

115 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


118 
__ôimî_which
 
	t__ôimî_which_t
;

120 
	t__ôimî_which_t
;

125 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

126 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

131 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

132 c⁄° 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

133 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

138 
	$utimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

139 
__THROW
 
	`__n⁄nuŒ
 ((1));

141 #ifde‡
__USE_MISC


143 
	$lutimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

144 
__THROW
 
	`__n⁄nuŒ
 ((1));

147 
	$futimes
 (
__fd
, c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

150 #ifde‡
__USE_GNU


154 
	$futimeßt
 (
__fd
, c⁄° *
__fûe
,

155 c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

159 #ifde‡
__USE_MISC


162 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

163 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

164 
	#timîcmp
(
a
, 
b
, 
CMP
) \

165 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

166 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

167 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

168 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

170 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

171 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

172 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

174 ++(
ªsu…
)->
tv_£c
; \

175 (
ªsu…
)->
tv_u£c
 -= 1000000; \

177 
	}
} 0)

	)

178 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

180 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

181 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

182 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

183 --(
ªsu…
)->
tv_£c
; \

184 (
ªsu…
)->
tv_u£c
 += 1000000; \

186 } 0)

	)

189 
	g__END_DECLS


	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_MISC


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_MISC


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#__√ed_˛ock_t


	)

129 
	#__√ed_time_t


	)

130 
	#__√ed_timî_t


	)

131 
	#__√ed_˛ockid_t


	)

132 
	~<time.h
>

134 #ifde‡
__USE_XOPEN


135 #i‚de‡
__u£c⁄ds_t_deföed


136 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

137 
	#__u£c⁄ds_t_deföed


	)

139 #i‚de‡
__su£c⁄ds_t_deföed


140 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

141 
	#__su£c⁄ds_t_deföed


	)

145 
	#__√ed_size_t


	)

146 
	~<°ddef.h
>

148 #ifde‡
__USE_MISC


150 
	tul⁄g
;

151 
	tush‹t
;

152 
	tuöt
;

157 #i‡!
__GNUC_PREREQ
 (2, 7)

160 #i‚de‡
__öt8_t_deföed


161 
	#__öt8_t_deföed


	)

162 
	töt8_t
;

163 
	töt16_t
;

164 
	töt32_t
;

165 #i‡
__WORDSIZE
 == 64

166 
	töt64_t
;

168 
__exãnsi⁄__
 
	töt64_t
;

173 
	tu_öt8_t
;

174 
	tu_öt16_t
;

175 
	tu_öt32_t
;

176 #i‡
__WORDSIZE
 == 64

177 
	tu_öt64_t
;

179 
__exãnsi⁄__
 
	tu_öt64_t
;

182 
	tªgi°î_t
;

187 
	#__ötN_t
(
N
, 
MODE
) \

188 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

190 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #i‚de‡
	t__öt8_t_deföed


193 
	t__öt8_t_deföed


	)

194 
	t__ötN_t
 (8, 
	t__QI__
);

195 
__ötN_t
 (16, 
__HI__
);

196 
__ötN_t
 (32, 
__SI__
);

197 
__ötN_t
 (64, 
__DI__
);

200 
__u_ötN_t
 (8, 
__QI__
);

201 
__u_ötN_t
 (16, 
__HI__
);

202 
__u_ötN_t
 (32, 
__SI__
);

203 
__u_ötN_t
 (64, 
__DI__
);

205 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

211 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_MISC


216 
	~<ídün.h
>

219 
	~<sys/£À˘.h
>

222 
	~<sys/sysma¸os.h
>

226 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

227 && !
deföed
 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/sys/wait.h

22 #i‚def 
_SYS_WAIT_H


23 
	#_SYS_WAIT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<sig«l.h
>

32 #i‡!
deföed
 
_STDLIB_H
 || (!deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K8
)

35 
	~<bôs/waôÊags.h
>

37 #ifdef 
__USE_MISC


42 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


43 
	#__WAIT_INT
(
°©us
) \

44 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

45 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

47 
	#__WAIT_INT
(
°©us
Ë(*(c⁄° *Ë&(°©us))

	)

55 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


56 
	#__WAIT_STATUS
 *

	)

57 
	#__WAIT_STATUS_DEFN
 *

	)

62 
waô
 *
	m__u±r
;

63 *
	m__ùå
;

64 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

71 
	#__WAIT_STATUS
 *

	)

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	~<bôs/waô°©us.h
>

79 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

80 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

81 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

82 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

83 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

84 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

85 #ifde‡
__WIFCONTINUED


86 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifdef 
__USE_MISC


91 
	#WCOREFLAG
 
__WCOREFLAG


	)

92 
	#WCOREDUMP
(
°©us
Ë
	`__WCOREDUMP
 (
	`__WAIT_INT
 (°©us))

	)

93 
	#W_EXITCODE
(
ªt
, 
sig
Ë
	`__W_EXITCODE
 (ªt, sig)

	)

94 
	#W_STOPCODE
(
sig
Ë
	`__W_STOPCODE
 (sig)

	)

102 
__pid_t
 
waô
 (
__WAIT_STATUS
 
__°©_loc
);

104 #ifdef 
__USE_MISC


106 
	#WAIT_ANY
 (-1Ë

	)

107 
	#WAIT_MYPGRP
 0

	)

125 
__pid_t
 
waôpid
 (__pid_à
__pid
, *
__°©_loc
, 
__›ti⁄s
);

127 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


128 #i‚de‡
__id_t_deföed


129 
	~<bôs/ty≥s.h
>

130 
__id_t
 
	tid_t
;

131 
	#__id_t_deföed


	)

134 
	#__√ed_sigöfo_t


	)

135 
	~<bôs/sigöfo.h
>

148 
waôid
 (
idty≥_t
 
__idty≥
, 
__id_t
 
__id
, 
sigöfo_t
 *
__öf›
,

149 
__›ti⁄s
);

152 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


155 
	grußge
;

162 
__pid_t
 
	$waô3
 (
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

163 
rußge
 * 
__ußge
Ë
__THROWNL
;

166 #ifde‡
__USE_MISC


168 
__pid_t
 
	$waô4
 (
__pid_t
 
__pid
, 
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

169 
rußge
 *
__ußge
Ë
__THROWNL
;

173 
__END_DECLS


	@/usr/include/termios.h

22 #i‚def 
_TERMIOS_H


23 
	#_TERMIOS_H
 1

	)

25 
	~<„©uªs.h
>

26 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


28 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__pid_t_deföed


30 
__pid_t
 
	tpid_t
;

31 
	#__pid_t_deföed


	)

35 
	g__BEGIN_DECLS


39 
	~<bôs/ãrmios.h
>

41 #ifde‡
__USE_MISC


44 
	#CCEQ
(
vÆ
, 
c
Ë((cË=(vÆË&& (vÆË!
_POSIX_VDISABLE
)

	)

48 
•ìd_t
 
	$cfgëo•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

51 
•ìd_t
 
	$cfgëi•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

54 
	$cf£to•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

57 
	$cf£ti•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

59 #ifdef 
__USE_MISC


61 
	$cf£t•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

66 
	$tcgë©å
 (
__fd
, 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

70 
	$tc£èâr
 (
__fd
, 
__›ti⁄Æ_a˘i⁄s
,

71 c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

74 #ifdef 
__USE_MISC


76 
	$cfmakîaw
 (
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

80 
	$tc£ndbªak
 (
__fd
, 
__duøti⁄
Ë
__THROW
;

86 
	`tcdøö
 (
__fd
);

90 
	$tcÊush
 (
__fd
, 
__queue_£À˘‹
Ë
__THROW
;

94 
	$tcÊow
 (
__fd
, 
__a˘i⁄
Ë
__THROW
;

97 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


99 
__pid_t
 
	$tcgësid
 (
__fd
Ë
__THROW
;

103 #ifde‡
__USE_MISC


104 
	~<sys/âydeÁu…s.h
>

107 
__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #ifde‡
__USE_POSIX


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_MISC


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_POSIX


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_POSIX


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_MISC


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

111 
	#_XOPEN_CRYPT
 1

	)

115 
	#_XOPEN_ENH_I18N
 1

	)

118 
	#_XOPEN_LEGACY
 1

	)

205 
	~<bôs/posix_›t.h
>

208 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


209 
	~<bôs/ívú⁄míts.h
>

213 
	#STDIN_FILENO
 0

	)

214 
	#STDOUT_FILENO
 1

	)

215 
	#STDERR_FILENO
 2

	)

220 
	~<bôs/ty≥s.h
>

222 #i‚def 
__ssize_t_deföed


223 
__ssize_t
 
	tssize_t
;

224 
	#__ssize_t_deföed


	)

227 
	#__√ed_size_t


	)

228 
	#__√ed_NULL


	)

229 
	~<°ddef.h
>

231 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


234 #i‚de‡
__gid_t_deföed


235 
__gid_t
 
	tgid_t
;

236 
	#__gid_t_deföed


	)

239 #i‚de‡
__uid_t_deföed


240 
__uid_t
 
	tuid_t
;

241 
	#__uid_t_deföed


	)

244 #i‚de‡
__off_t_deföed


245 #i‚de‡
__USE_FILE_OFFSET64


246 
__off_t
 
	toff_t
;

248 
__off64_t
 
	toff_t
;

250 
	#__off_t_deföed


	)

252 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


253 
__off64_t
 
	toff64_t
;

254 
	#__off64_t_deföed


	)

257 #i‚de‡
__u£c⁄ds_t_deföed


258 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

259 
	#__u£c⁄ds_t_deföed


	)

262 #i‚de‡
__pid_t_deföed


263 
__pid_t
 
	tpid_t
;

264 
	#__pid_t_deföed


	)

268 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


269 #i‚de‡
__öçå_t_deföed


270 
__öçå_t
 
	töçå_t
;

271 
	#__öçå_t_deföed


	)

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


276 #i‚de‡
__sockÀn_t_deföed


277 
__sockÀn_t
 
	tsockÀn_t
;

278 
	#__sockÀn_t_deföed


	)

284 
	#R_OK
 4

	)

285 
	#W_OK
 2

	)

286 
	#X_OK
 1

	)

287 
	#F_OK
 0

	)

290 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #ifde‡
__USE_GNU


295 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 #ifde‡
__USE_ATFILE


307 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

308 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 #i‚def 
_STDIO_H


314 
	#SEEK_SET
 0

	)

315 
	#SEEK_CUR
 1

	)

316 
	#SEEK_END
 2

	)

317 #ifde‡
__USE_GNU


318 
	#SEEK_DATA
 3

	)

319 
	#SEEK_HOLE
 4

	)

323 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


325 
	#L_SET
 
SEEK_SET


	)

326 
	#L_INCR
 
SEEK_CUR


	)

327 
	#L_XTND
 
SEEK_END


	)

336 #i‚de‡
__USE_FILE_OFFSET64


337 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

339 #ifde‡
__REDIRECT_NTH


340 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

341 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

342 
l£ek64
);

344 
	#l£ek
 
l£ek64


	)

347 #ifde‡
__USE_LARGEFILE64


348 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

349 
__THROW
;

356 
	`˛o£
 (
__fd
);

363 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

369 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

371 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


372 #i‚de‡
__USE_FILE_OFFSET64


379 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

380 
__off_t
 
__off£t
Ë
__wur
;

387 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

388 
__off_t
 
__off£t
Ë
__wur
;

390 #ifde‡
__REDIRECT


391 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

392 
__off64_t
 
__off£t
),

393 
¥ód64
Ë
__wur
;

394 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

395 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

396 
pwrôe64
Ë
__wur
;

398 
	#¥ód
 
¥ód64


	)

399 
	#pwrôe
 
pwrôe64


	)

403 #ifde‡
__USE_LARGEFILE64


407 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

408 
__off64_t
 
__off£t
Ë
__wur
;

411 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

412 
__off64_t
 
__off£t
Ë
__wur
;

420 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

422 #ifde‡
__USE_GNU


425 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

435 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

447 
	`¶ìp
 (
__£c⁄ds
);

449 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

450 || 
deföed
 
__USE_MISC


455 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

456 
__THROW
;

463 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

472 
	`∑u£
 ();

476 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

477 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

479 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


481 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

486 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

487 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

491 #ifde‡
__USE_ATFILE


494 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

495 
__gid_t
 
__group
, 
__Êag
)

496 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

500 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

502 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


504 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

514 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

516 #ifdef 
__USE_GNU


520 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

523 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

524 || 
deföed
 
__USE_MISC


528 *
	$gëwd
 (*
__buf
)

529 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

534 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

537 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

539 #ifde‡
__USE_GNU


542 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

546 **
__ívú⁄
;

547 #ifde‡
__USE_GNU


548 **
ívú⁄
;

554 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

555 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifde‡
__USE_XOPEN2K8


560 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((2));

566 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

588 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

590 #ifde‡
__USE_GNU


593 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

594 *c⁄° 
__ívp
[])

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


601 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

606 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

612 
	~<bôs/c⁄‚ame.h
>

615 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

616 
__THROW
 
	`__n⁄nuŒ
 ((1));

619 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

622 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

624 #ifdef 
__USE_POSIX2


626 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

631 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

640 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

641 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


642 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

649 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

651 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


663 
	$£çgΩ
 (Ë
__THROW
;

670 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

672 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


674 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

678 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

681 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

687 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

692 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

694 #ifdef 
__USE_GNU


696 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

703 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

705 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


708 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

711 #ifde‡
__USE_XOPEN2K


713 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

720 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

722 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


725 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

728 #ifde‡
__USE_XOPEN2K


730 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

733 #ifde‡
__USE_GNU


736 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

737 
__THROW
;

741 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

742 
__THROW
;

746 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

747 
__THROW
 
__wur
;

751 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

752 
__THROW
 
__wur
;

759 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

761 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

762 || 
deföed
 
__USE_MISC


767 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

773 *
	$ây«me
 (
__fd
Ë
__THROW
;

777 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

778 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

782 
	$ißây
 (
__fd
Ë
__THROW
;

784 #i‡
deföed
 
__USE_MISC
 \

785 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

788 
	$ây¶Ÿ
 (Ë
__THROW
;

793 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

794 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

796 #ifde‡
__USE_ATFILE


799 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

800 c⁄° *
__to
, 
__Êags
)

801 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

804 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


806 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

812 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

813 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

814 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

817 #ifde‡
__USE_ATFILE


819 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

820 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

823 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

824 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

825 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

829 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

831 #ifde‡
__USE_ATFILE


833 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

834 
__THROW
 
	`__n⁄nuŒ
 ((2));

838 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

842 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

845 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

852 *
	`gëlogö
 ();

853 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


860 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

863 #ifdef 
__USE_MISC


865 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

869 #ifdef 
__USE_POSIX2


873 
	#__√ed_gë›t


	)

874 
	~<gë›t.h
>

878 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


882 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

886 #i‡
deföed
 
__USE_MISC


889 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

890 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

894 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

900 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

902 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

903 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

909 
	$vh™gup
 (Ë
__THROW
;

912 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

920 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

921 
size_t
 
__off£t
, 
__sˇÀ
)

922 
__THROW
 
	`__n⁄nuŒ
 ((1));

928 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

932 *
	$gëu£rshñl
 (Ë
__THROW
;

933 
	$ídu£rshñl
 (Ë
__THROW
;

934 
	$£tu£rshñl
 (Ë
__THROW
;

940 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

944 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

947 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

951 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

959 
	`fsync
 (
__fd
);

962 #ifde‡
__USE_GNU


965 
	$syncfs
 (
__fd
Ë
__THROW
;

969 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


972 
	`gëho°id
 ();

975 
	$sync
 (Ë
__THROW
;

978 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


981 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

986 
	$gëdèbÀsize
 (Ë
__THROW
;

992 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


995 #i‚de‡
__USE_FILE_OFFSET64


996 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

999 #ifde‡
__REDIRECT_NTH


1000 
	`__REDIRECT_NTH
 (
åunˇã
,

1001 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1002 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1004 
	#åunˇã
 
åunˇã64


	)

1007 #ifde‡
__USE_LARGEFILE64


1008 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1009 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1014 #i‡
deföed
 
__USE_POSIX199309
 \

1015 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1018 #i‚de‡
__USE_FILE_OFFSET64


1019 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1021 #ifde‡
__REDIRECT_NTH


1022 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1023 
·runˇã64
Ë
__wur
;

1025 
	#·runˇã
 
·runˇã64


	)

1028 #ifde‡
__USE_LARGEFILE64


1029 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1035 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1036 || 
deföed
 
__USE_MISC


1040 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1046 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1050 #ifde‡
__USE_MISC


1061 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1066 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1078 
	#F_ULOCK
 0

	)

1079 
	#F_LOCK
 1

	)

1080 
	#F_TLOCK
 2

	)

1081 
	#F_TEST
 3

	)

1083 #i‚de‡
__USE_FILE_OFFSET64


1084 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1086 #ifde‡
__REDIRECT


1087 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1088 
lockf64
Ë
__wur
;

1090 
	#lockf
 
lockf64


	)

1093 #ifde‡
__USE_LARGEFILE64


1094 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1099 #ifde‡
__USE_GNU


1104 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1105 (
__exãnsi⁄__
 \

1106 ({ 
__ªsu…
; \

1107 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1108 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1109 
__ªsu…
; 
	}
}))

	)

1112 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1115 
fd©async
 (
__fûdes
);

1121 #ifdef 
__USE_XOPEN


1123 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1124 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1128 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1129 
__THROW
 
	`__n⁄nuŒ
 ((1));

1136 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1137 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1143 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1145 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1150 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1151 
	~<bôs/uni°d.h
>

1154 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 3)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 3)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/confname.h

19 #i‚de‡
_UNISTD_H


26 
	m_PC_LINK_MAX
,

27 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

28 
	m_PC_MAX_CANON
,

29 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

30 
	m_PC_MAX_INPUT
,

31 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

32 
	m_PC_NAME_MAX
,

33 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

34 
	m_PC_PATH_MAX
,

35 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

36 
	m_PC_PIPE_BUF
,

37 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

38 
	m_PC_CHOWN_RESTRICTED
,

39 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

40 
	m_PC_NO_TRUNC
,

41 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

42 
	m_PC_VDISABLE
,

43 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

44 
	m_PC_SYNC_IO
,

45 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

46 
	m_PC_ASYNC_IO
,

47 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

48 
	m_PC_PRIO_IO
,

49 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

50 
	m_PC_SOCK_MAXBUF
,

51 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

52 
	m_PC_FILESIZEBITS
,

53 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

54 
	m_PC_REC_INCR_XFER_SIZE
,

55 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

56 
	m_PC_REC_MAX_XFER_SIZE
,

57 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

58 
	m_PC_REC_MIN_XFER_SIZE
,

59 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

60 
	m_PC_REC_XFER_ALIGN
,

61 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

62 
	m_PC_ALLOC_SIZE_MIN
,

63 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

64 
	m_PC_SYMLINK_MAX
,

65 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

66 
	m_PC_2_SYMLINKS


67 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

73 
	m_SC_ARG_MAX
,

74 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

75 
	m_SC_CHILD_MAX
,

76 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

77 
	m_SC_CLK_TCK
,

78 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

79 
	m_SC_NGROUPS_MAX
,

80 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

81 
	m_SC_OPEN_MAX
,

82 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

83 
	m_SC_STREAM_MAX
,

84 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

85 
	m_SC_TZNAME_MAX
,

86 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

87 
	m_SC_JOB_CONTROL
,

88 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

89 
	m_SC_SAVED_IDS
,

90 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

91 
	m_SC_REALTIME_SIGNALS
,

92 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

93 
	m_SC_PRIORITY_SCHEDULING
,

94 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

95 
	m_SC_TIMERS
,

96 
	#_SC_TIMERS
 
_SC_TIMERS


	)

97 
	m_SC_ASYNCHRONOUS_IO
,

98 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

99 
	m_SC_PRIORITIZED_IO
,

100 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

101 
	m_SC_SYNCHRONIZED_IO
,

102 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

103 
	m_SC_FSYNC
,

104 
	#_SC_FSYNC
 
_SC_FSYNC


	)

105 
	m_SC_MAPPED_FILES
,

106 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

107 
	m_SC_MEMLOCK
,

108 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

109 
	m_SC_MEMLOCK_RANGE
,

110 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

111 
	m_SC_MEMORY_PROTECTION
,

112 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

113 
	m_SC_MESSAGE_PASSING
,

114 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

115 
	m_SC_SEMAPHORES
,

116 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

117 
	m_SC_SHARED_MEMORY_OBJECTS
,

118 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

119 
	m_SC_AIO_LISTIO_MAX
,

120 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

121 
	m_SC_AIO_MAX
,

122 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

123 
	m_SC_AIO_PRIO_DELTA_MAX
,

124 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

125 
	m_SC_DELAYTIMER_MAX
,

126 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

127 
	m_SC_MQ_OPEN_MAX
,

128 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

129 
	m_SC_MQ_PRIO_MAX
,

130 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

131 
	m_SC_VERSION
,

132 
	#_SC_VERSION
 
_SC_VERSION


	)

133 
	m_SC_PAGESIZE
,

134 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

135 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

136 
	m_SC_RTSIG_MAX
,

137 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

138 
	m_SC_SEM_NSEMS_MAX
,

139 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

140 
	m_SC_SEM_VALUE_MAX
,

141 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

142 
	m_SC_SIGQUEUE_MAX
,

143 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

144 
	m_SC_TIMER_MAX
,

145 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

149 
	m_SC_BC_BASE_MAX
,

150 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

151 
	m_SC_BC_DIM_MAX
,

152 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

153 
	m_SC_BC_SCALE_MAX
,

154 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

155 
	m_SC_BC_STRING_MAX
,

156 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

157 
	m_SC_COLL_WEIGHTS_MAX
,

158 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

159 
	m_SC_EQUIV_CLASS_MAX
,

160 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

161 
	m_SC_EXPR_NEST_MAX
,

162 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

163 
	m_SC_LINE_MAX
,

164 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

165 
	m_SC_RE_DUP_MAX
,

166 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

167 
	m_SC_CHARCLASS_NAME_MAX
,

168 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

170 
	m_SC_2_VERSION
,

171 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

172 
	m_SC_2_C_BIND
,

173 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

174 
	m_SC_2_C_DEV
,

175 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

176 
	m_SC_2_FORT_DEV
,

177 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

178 
	m_SC_2_FORT_RUN
,

179 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

180 
	m_SC_2_SW_DEV
,

181 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

182 
	m_SC_2_LOCALEDEF
,

183 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

185 
	m_SC_PII
,

186 
	#_SC_PII
 
_SC_PII


	)

187 
	m_SC_PII_XTI
,

188 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

189 
	m_SC_PII_SOCKET
,

190 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

191 
	m_SC_PII_INTERNET
,

192 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

193 
	m_SC_PII_OSI
,

194 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

195 
	m_SC_POLL
,

196 
	#_SC_POLL
 
_SC_POLL


	)

197 
	m_SC_SELECT
,

198 
	#_SC_SELECT
 
_SC_SELECT


	)

199 
	m_SC_UIO_MAXIOV
,

200 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

201 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

202 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

203 
	m_SC_PII_INTERNET_STREAM
,

204 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

205 
	m_SC_PII_INTERNET_DGRAM
,

206 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

207 
	m_SC_PII_OSI_COTS
,

208 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

209 
	m_SC_PII_OSI_CLTS
,

210 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

211 
	m_SC_PII_OSI_M
,

212 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

213 
	m_SC_T_IOV_MAX
,

214 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

217 
	m_SC_THREADS
,

218 
	#_SC_THREADS
 
_SC_THREADS


	)

219 
	m_SC_THREAD_SAFE_FUNCTIONS
,

220 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

221 
	m_SC_GETGR_R_SIZE_MAX
,

222 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

223 
	m_SC_GETPW_R_SIZE_MAX
,

224 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

225 
	m_SC_LOGIN_NAME_MAX
,

226 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

227 
	m_SC_TTY_NAME_MAX
,

228 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

229 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

230 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

231 
	m_SC_THREAD_KEYS_MAX
,

232 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

233 
	m_SC_THREAD_STACK_MIN
,

234 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

235 
	m_SC_THREAD_THREADS_MAX
,

236 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

237 
	m_SC_THREAD_ATTR_STACKADDR
,

238 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

239 
	m_SC_THREAD_ATTR_STACKSIZE
,

240 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

241 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

242 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

243 
	m_SC_THREAD_PRIO_INHERIT
,

244 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

245 
	m_SC_THREAD_PRIO_PROTECT
,

246 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

247 
	m_SC_THREAD_PROCESS_SHARED
,

248 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

250 
	m_SC_NPROCESSORS_CONF
,

251 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

252 
	m_SC_NPROCESSORS_ONLN
,

253 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

254 
	m_SC_PHYS_PAGES
,

255 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

256 
	m_SC_AVPHYS_PAGES
,

257 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

258 
	m_SC_ATEXIT_MAX
,

259 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

260 
	m_SC_PASS_MAX
,

261 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

263 
	m_SC_XOPEN_VERSION
,

264 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

265 
	m_SC_XOPEN_XCU_VERSION
,

266 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

267 
	m_SC_XOPEN_UNIX
,

268 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

269 
	m_SC_XOPEN_CRYPT
,

270 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

271 
	m_SC_XOPEN_ENH_I18N
,

272 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

273 
	m_SC_XOPEN_SHM
,

274 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

276 
	m_SC_2_CHAR_TERM
,

277 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

278 
	m_SC_2_C_VERSION
,

279 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

280 
	m_SC_2_UPE
,

281 
	#_SC_2_UPE
 
_SC_2_UPE


	)

283 
	m_SC_XOPEN_XPG2
,

284 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

285 
	m_SC_XOPEN_XPG3
,

286 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

287 
	m_SC_XOPEN_XPG4
,

288 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

290 
	m_SC_CHAR_BIT
,

291 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

292 
	m_SC_CHAR_MAX
,

293 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

294 
	m_SC_CHAR_MIN
,

295 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

296 
	m_SC_INT_MAX
,

297 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

298 
	m_SC_INT_MIN
,

299 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

300 
	m_SC_LONG_BIT
,

301 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

302 
	m_SC_WORD_BIT
,

303 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

304 
	m_SC_MB_LEN_MAX
,

305 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

306 
	m_SC_NZERO
,

307 
	#_SC_NZERO
 
_SC_NZERO


	)

308 
	m_SC_SSIZE_MAX
,

309 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

310 
	m_SC_SCHAR_MAX
,

311 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

312 
	m_SC_SCHAR_MIN
,

313 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

314 
	m_SC_SHRT_MAX
,

315 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

316 
	m_SC_SHRT_MIN
,

317 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

318 
	m_SC_UCHAR_MAX
,

319 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

320 
	m_SC_UINT_MAX
,

321 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

322 
	m_SC_ULONG_MAX
,

323 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

324 
	m_SC_USHRT_MAX
,

325 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

327 
	m_SC_NL_ARGMAX
,

328 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

329 
	m_SC_NL_LANGMAX
,

330 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

331 
	m_SC_NL_MSGMAX
,

332 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

333 
	m_SC_NL_NMAX
,

334 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

335 
	m_SC_NL_SETMAX
,

336 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

337 
	m_SC_NL_TEXTMAX
,

338 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

340 
	m_SC_XBS5_ILP32_OFF32
,

341 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

342 
	m_SC_XBS5_ILP32_OFFBIG
,

343 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

344 
	m_SC_XBS5_LP64_OFF64
,

345 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

346 
	m_SC_XBS5_LPBIG_OFFBIG
,

347 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

349 
	m_SC_XOPEN_LEGACY
,

350 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

351 
	m_SC_XOPEN_REALTIME
,

352 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

353 
	m_SC_XOPEN_REALTIME_THREADS
,

354 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

356 
	m_SC_ADVISORY_INFO
,

357 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

358 
	m_SC_BARRIERS
,

359 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

360 
	m_SC_BASE
,

361 
	#_SC_BASE
 
_SC_BASE


	)

362 
	m_SC_C_LANG_SUPPORT
,

363 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

364 
	m_SC_C_LANG_SUPPORT_R
,

365 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

366 
	m_SC_CLOCK_SELECTION
,

367 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

368 
	m_SC_CPUTIME
,

369 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

370 
	m_SC_THREAD_CPUTIME
,

371 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

372 
	m_SC_DEVICE_IO
,

373 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

374 
	m_SC_DEVICE_SPECIFIC
,

375 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

376 
	m_SC_DEVICE_SPECIFIC_R
,

377 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

378 
	m_SC_FD_MGMT
,

379 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

380 
	m_SC_FIFO
,

381 
	#_SC_FIFO
 
_SC_FIFO


	)

382 
	m_SC_PIPE
,

383 
	#_SC_PIPE
 
_SC_PIPE


	)

384 
	m_SC_FILE_ATTRIBUTES
,

385 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

386 
	m_SC_FILE_LOCKING
,

387 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

388 
	m_SC_FILE_SYSTEM
,

389 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

390 
	m_SC_MONOTONIC_CLOCK
,

391 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

392 
	m_SC_MULTI_PROCESS
,

393 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

394 
	m_SC_SINGLE_PROCESS
,

395 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

396 
	m_SC_NETWORKING
,

397 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

398 
	m_SC_READER_WRITER_LOCKS
,

399 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

400 
	m_SC_SPIN_LOCKS
,

401 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

402 
	m_SC_REGEXP
,

403 
	#_SC_REGEXP
 
_SC_REGEXP


	)

404 
	m_SC_REGEX_VERSION
,

405 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

406 
	m_SC_SHELL
,

407 
	#_SC_SHELL
 
_SC_SHELL


	)

408 
	m_SC_SIGNALS
,

409 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

410 
	m_SC_SPAWN
,

411 
	#_SC_SPAWN
 
_SC_SPAWN


	)

412 
	m_SC_SPORADIC_SERVER
,

413 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

414 
	m_SC_THREAD_SPORADIC_SERVER
,

415 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

416 
	m_SC_SYSTEM_DATABASE
,

417 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

418 
	m_SC_SYSTEM_DATABASE_R
,

419 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

420 
	m_SC_TIMEOUTS
,

421 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

422 
	m_SC_TYPED_MEMORY_OBJECTS
,

423 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

424 
	m_SC_USER_GROUPS
,

425 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

426 
	m_SC_USER_GROUPS_R
,

427 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

428 
	m_SC_2_PBS
,

429 
	#_SC_2_PBS
 
_SC_2_PBS


	)

430 
	m_SC_2_PBS_ACCOUNTING
,

431 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

432 
	m_SC_2_PBS_LOCATE
,

433 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

434 
	m_SC_2_PBS_MESSAGE
,

435 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

436 
	m_SC_2_PBS_TRACK
,

437 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

438 
	m_SC_SYMLOOP_MAX
,

439 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

440 
	m_SC_STREAMS
,

441 
	#_SC_STREAMS
 
_SC_STREAMS


	)

442 
	m_SC_2_PBS_CHECKPOINT
,

443 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

445 
	m_SC_V6_ILP32_OFF32
,

446 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

447 
	m_SC_V6_ILP32_OFFBIG
,

448 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

449 
	m_SC_V6_LP64_OFF64
,

450 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

451 
	m_SC_V6_LPBIG_OFFBIG
,

452 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

454 
	m_SC_HOST_NAME_MAX
,

455 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

456 
	m_SC_TRACE
,

457 
	#_SC_TRACE
 
_SC_TRACE


	)

458 
	m_SC_TRACE_EVENT_FILTER
,

459 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

460 
	m_SC_TRACE_INHERIT
,

461 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

462 
	m_SC_TRACE_LOG
,

463 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

465 
	m_SC_LEVEL1_ICACHE_SIZE
,

466 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

467 
	m_SC_LEVEL1_ICACHE_ASSOC
,

468 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

469 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

470 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

471 
	m_SC_LEVEL1_DCACHE_SIZE
,

472 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

473 
	m_SC_LEVEL1_DCACHE_ASSOC
,

474 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

475 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

476 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

477 
	m_SC_LEVEL2_CACHE_SIZE
,

478 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

479 
	m_SC_LEVEL2_CACHE_ASSOC
,

480 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

481 
	m_SC_LEVEL2_CACHE_LINESIZE
,

482 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

483 
	m_SC_LEVEL3_CACHE_SIZE
,

484 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

485 
	m_SC_LEVEL3_CACHE_ASSOC
,

486 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

487 
	m_SC_LEVEL3_CACHE_LINESIZE
,

488 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

489 
	m_SC_LEVEL4_CACHE_SIZE
,

490 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

491 
	m_SC_LEVEL4_CACHE_ASSOC
,

492 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

493 
	m_SC_LEVEL4_CACHE_LINESIZE
,

494 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

497 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

498 
	#_SC_IPV6
 
_SC_IPV6


	)

499 
	m_SC_RAW_SOCKETS
,

500 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

502 
	m_SC_V7_ILP32_OFF32
,

503 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

504 
	m_SC_V7_ILP32_OFFBIG
,

505 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

506 
	m_SC_V7_LP64_OFF64
,

507 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

508 
	m_SC_V7_LPBIG_OFFBIG
,

509 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

511 
	m_SC_SS_REPL_MAX
,

512 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

514 
	m_SC_TRACE_EVENT_NAME_MAX
,

515 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

516 
	m_SC_TRACE_NAME_MAX
,

517 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

518 
	m_SC_TRACE_SYS_MAX
,

519 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

520 
	m_SC_TRACE_USER_EVENT_MAX
,

521 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

523 
	m_SC_XOPEN_STREAMS
,

524 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

526 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

527 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

528 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


529 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

535 
	m_CS_PATH
,

536 
	#_CS_PATH
 
_CS_PATH


	)

538 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

539 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

540 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	m_CS_GNU_LIBC_VERSION
,

543 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

544 
	m_CS_GNU_LIBPTHREAD_VERSION
,

545 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

547 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

548 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

549 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

552 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

553 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	m_CS_LFS_CFLAGS
 = 1000,

556 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

557 
	m_CS_LFS_LDFLAGS
,

558 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

559 
	m_CS_LFS_LIBS
,

560 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

561 
	m_CS_LFS_LINTFLAGS
,

562 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

563 
	m_CS_LFS64_CFLAGS
,

564 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

565 
	m_CS_LFS64_LDFLAGS
,

566 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

567 
	m_CS_LFS64_LIBS
,

568 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

569 
	m_CS_LFS64_LINTFLAGS
,

570 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

572 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

573 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

575 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

577 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

579 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

580 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

581 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

588 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

589 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LIBS
,

593 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

594 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

595 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

596 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

597 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

605 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

606 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

613 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

621 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

622 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

629 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

630 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

638 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

639 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

646 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

654 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

655 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

662 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

663 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

671 
	m_CS_V6_ENV
,

672 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

673 
	m_CS_V7_ENV


674 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/dlfcn.h

19 #i‚de‡
_DLFCN_H


24 
	#RTLD_LAZY
 0x00001

	)

25 
	#RTLD_NOW
 0x00002

	)

26 
	#RTLD_BINDING_MASK
 0x3

	)

27 
	#RTLD_NOLOAD
 0x00004

	)

28 
	#RTLD_DEEPBIND
 0x00008

	)

33 
	#RTLD_GLOBAL
 0x00100

	)

38 
	#RTLD_LOCAL
 0

	)

41 
	#RTLD_NODELETE
 0x01000

	)

43 #ifde‡
__USE_GNU


54 
	#DL_CALL_FCT
(
f˘p
, 
¨gs
) \

55 (
	`_dl_mcou¡_wøµî_check
 ((*Ë(
f˘p
)), (*(f˘p)Ë
¨gs
)

	)

57 
__BEGIN_DECLS


60 
	$_dl_mcou¡_wøµî_check
 (*
__£lÂc
Ë
__THROW
;

62 
__END_DECLS


	@/usr/include/bits/environments.h

18 #i‚de‡
_UNISTD_H


22 
	~<bôs/w‹dsize.h
>

42 #i‡
__WORDSIZE
 == 64

56 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 
	#_XBS5_LP64_OFF64
 1

	)

69 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

70 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

71 
	#_XBS5_ILP32_OFFBIG
 1

	)

73 #i‚de‡
__x86_64__


75 
	#_POSIX_V7_ILP32_OFF32
 1

	)

76 
	#_POSIX_V6_ILP32_OFF32
 1

	)

77 
	#_XBS5_ILP32_OFF32
 1

	)

95 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

96 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

97 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


98 
	#__ILP32_OFFBIG_CFLAGS
 "-mx32"

	)

99 
	#__ILP32_OFFBIG_LDFLAGS
 "-mx32"

	)

101 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

102 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

104 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

105 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

19 #ifde‡
_ERRNO_H


21 #unde‡
EDOM


22 #unde‡
EILSEQ


23 #unde‡
ERANGE


24 
	~<löux/î∫o.h
>

27 
	#ENOTSUP
 
EOPNOTSUPP


	)

30 #i‚de‡
ECANCELED


31 
	#ECANCELED
 125

	)

35 #i‚de‡
EOWNERDEAD


36 
	#EOWNERDEAD
 130

	)

37 
	#ENOTRECOVERABLE
 131

	)

40 #i‚de‡
ERFKILL


41 
	#ERFKILL
 132

	)

44 #i‚de‡
EHWPOISON


45 
	#EHWPOISON
 133

	)

48 #i‚de‡
__ASSEMBLER__


50 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

52 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


54 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

59 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


63 
	#EDOM
 33

	)

64 
	#EILSEQ
 84

	)

65 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

19 #i‚de‡
_FCNTL_H


23 #ifde‡
__x86_64__


24 
	#__O_LARGEFILE
 0

	)

27 #ifde‡
__x86_64__


29 
	#F_GETLK64
 5

	)

30 
	#F_SETLK64
 6

	)

31 
	#F_SETLKW64
 7

	)

35 
	sÊock


37 
	ml_ty≥
;

38 
	ml_whí˚
;

39 #i‚de‡
__USE_FILE_OFFSET64


40 
__off_t
 
	ml_°¨t
;

41 
__off_t
 
	ml_Àn
;

43 
__off64_t
 
	ml_°¨t
;

44 
__off64_t
 
	ml_Àn
;

46 
__pid_t
 
	ml_pid
;

49 #ifde‡
__USE_LARGEFILE64


50 
	sÊock64


52 
	ml_ty≥
;

53 
	ml_whí˚
;

54 
__off64_t
 
	ml_°¨t
;

55 
__off64_t
 
	ml_Àn
;

56 
__pid_t
 
	ml_pid
;

61 
	~<bôs/f˙é-löux.h
>

	@/usr/include/bits/fcntl2.h

19 #i‚def 
_FCNTL_H


25 #i‚de‡
__USE_FILE_OFFSET64


26 
	$__›í_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

27 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

28 
›í
Ë
	`__n⁄nuŒ
 ((1));

30 
	`__REDIRECT
 (
__›í_2
, (c⁄° *
__∑th
, 
__oÊag
),

31 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

32 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

33 
›í64
Ë
	`__n⁄nuŒ
 ((1));

35 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

37 
	`__îr‹de˛
 (
__›í_missög_mode
,

40 
__f‹tify_fun˘i⁄
 

41 
	$›í
 (c⁄° *
__∑th
, 
__oÊag
, ...)

43 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

44 
	`__›í_too_m™y_¨gs
 ();

46 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

48 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

50 
	`__›í_missög_mode
 ();

51  
	`__›í_2
 (
__∑th
, 
__oÊag
);

53  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

56 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

57  
	`__›í_2
 (
__∑th
, 
__oÊag
);

59  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

60 
	}
}

63 #ifde‡
__USE_LARGEFILE64


64 
	$__›í64_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

65 
	`__REDIRECT
 (
__›í64_Æüs
, (c⁄° *
__∑th
, 
__oÊag
,

66 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

67 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

69 
	`__îr‹de˛
 (
__›í64_missög_mode
,

72 
__f‹tify_fun˘i⁄
 

73 
	$›í64
 (c⁄° *
__∑th
, 
__oÊag
, ...)

75 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

76 
	`__›í64_too_m™y_¨gs
 ();

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

80 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

82 
	`__›í64_missög_mode
 ();

83  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

85  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

88 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

89  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

91  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

92 
	}
}

96 #ifde‡
__USE_ATFILE


97 #i‚de‡
__USE_FILE_OFFSET64


98 
	$__›í©_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

99 
	`__n⁄nuŒ
 ((2));

100 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

101 
__oÊag
, ...), 
›í©
)

102 
	`__n⁄nuŒ
 ((2));

104 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, c⁄° *
__∑th
,

105 
__oÊag
), 
__›í©64_2
)

106 
	`__n⁄nuŒ
 ((2));

107 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

108 
__oÊag
, ...), 
›í©64
)

109 
	`__n⁄nuŒ
 ((2));

111 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

113 
	`__îr‹de˛
 (
__›í©_missög_mode
,

116 
__f‹tify_fun˘i⁄
 

117 
	$›í©
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

119 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

120 
	`__›í©_too_m™y_¨gs
 ();

122 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

124 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

126 
	`__›í©_missög_mode
 ();

127  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

129  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

132 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

133  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

135  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

136 
	}
}

139 #ifde‡
__USE_LARGEFILE64


140 
	$__›í©64_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

141 
	`__n⁄nuŒ
 ((2));

142 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, c⁄° *
__∑th
,

143 
__oÊag
, ...), 
›í©64
)

144 
	`__n⁄nuŒ
 ((2));

145 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

147 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

150 
__f‹tify_fun˘i⁄
 

151 
	$›í©64
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

153 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

154 
	`__›í©64_too_m™y_¨gs
 ();

156 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

158 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

160 
	`__›í©64_missög_mode
 ();

161  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

163  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

166 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

167  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

169  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

170 
	}
}

	@/usr/include/bits/huge_val.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
())

	)

28 #ñi‡
__GNUC_PREREQ
(2,96)

29 
	#HUGE_VAL
 (
__exãnsi⁄__
 0x1.0
p2047
)

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#HUGE_VAL
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__DI__
))); 
__d
; }) \

35 { 
__l
: 0x7ff0000000000000ULL }).
__d
)

	)

39 
	~<ídün.h
>

41 uni⁄ { 
	m__c
[8]; 
	m__d
; } 
	t__huge_vÆ_t
;

43 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


44 
	#__HUGE_VAL_byãs
 { 0x7f, 0xf0, 0, 0, 0, 0, 0, 0 }

	)

46 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


47 
	#__HUGE_VAL_byãs
 { 0, 0, 0, 0, 0, 0, 0xf0, 0x7‡}

	)

50 
__huge_vÆ_t
 
	g__huge_vÆ
 = { 
__HUGE_VAL_byãs
 };

51 
	#HUGE_VAL
 (
__huge_vÆ
.
__d
)

	)

	@/usr/include/bits/huge_valf.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
())

	)

28 #ñi‡
__GNUC_PREREQ
(2,96)

29 
	#HUGE_VALF
 (
__exãnsi⁄__
 0x1.0
p255f
)

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#HUGE_VALF
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__SI__
))); 
__d
; }) \

35 { 
__l
: 0x7f800000UL }).
__d
)

	)

39 uni⁄ { 
	m__c
[4]; 
	m__f
; } 
	t__huge_vÆf_t
;

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#__HUGE_VALF_byãs
 { 0x7f, 0x80, 0, 0 }

	)

44 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


45 
	#__HUGE_VALF_byãs
 { 0, 0, 0x80, 0x7‡}

	)

48 
__huge_vÆf_t
 
	g__huge_vÆf
 = { 
__HUGE_VALF_byãs
 };

49 
	#HUGE_VALF
 (
__huge_vÆf
.
__f
)

	)

	@/usr/include/bits/huge_vall.h

20 #i‚de‡
_MATH_H


24 #i‡
__GNUC_PREREQ
(3,3)

25 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
())

	)

26 #ñi‡
__GNUC_PREREQ
(2,96)

27 
	#HUGE_VALL
 (
__exãnsi⁄__
 0x1.0
p32767L
)

	)

30 
	#__HUGE_VALL_byãs
 { 0, 0, 0, 0, 0, 0, 0, 0x80, 0xff, 0x7f, 0, 0 }

	)

32 
	#__huge_vÆl_t
 uni⁄ { 
__c
[12]; 
__ld
; }

	)

33 #ifde‡
__GNUC__


34 
	#HUGE_VALL
 (
__exãnsi⁄__
 \

35 ((
__huge_vÆl_t
Ë{ 
__c
: 
__HUGE_VALL_byãs
 }).
__ld
)

	)

37 
__huge_vÆl_t
 
	g__huge_vÆl
 = { 
__HUGE_VALL_byãs
 };

38 
	#HUGE_VALL
 (
__huge_vÆl
.
__ld
)

	)

	@/usr/include/bits/in.h

20 #i‚de‡
_NETINET_IN_H


29 #i‡
deföed
 
_UAPI_LINUX_IN6_H
 || deföed 
_UAPI_IPV6_H


33 
	#__USE_KERNEL_IPV6_DEFS


	)

39 
	#IP_OPTIONS
 4

	)

40 
	#IP_HDRINCL
 3

	)

41 
	#IP_TOS
 1

	)

42 
	#IP_TTL
 2

	)

43 
	#IP_RECVOPTS
 6

	)

45 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

46 
	#IP_RETOPTS
 7

	)

47 
	#IP_MULTICAST_IF
 32

	)

48 
	#IP_MULTICAST_TTL
 33

	)

49 
	#IP_MULTICAST_LOOP
 34

	)

50 
	#IP_ADD_MEMBERSHIP
 35

	)

51 
	#IP_DROP_MEMBERSHIP
 36

	)

52 
	#IP_UNBLOCK_SOURCE
 37

	)

53 
	#IP_BLOCK_SOURCE
 38

	)

54 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

55 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

56 
	#IP_MSFILTER
 41

	)

57 #ifde‡
__USE_MISC


58 
	#MCAST_JOIN_GROUP
 42

	)

59 
	#MCAST_BLOCK_SOURCE
 43

	)

60 
	#MCAST_UNBLOCK_SOURCE
 44

	)

61 
	#MCAST_LEAVE_GROUP
 45

	)

62 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

63 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

64 
	#MCAST_MSFILTER
 48

	)

65 
	#IP_MULTICAST_ALL
 49

	)

66 
	#IP_UNICAST_IF
 50

	)

68 
	#MCAST_EXCLUDE
 0

	)

69 
	#MCAST_INCLUDE
 1

	)

72 
	#IP_ROUTER_ALERT
 5

	)

73 
	#IP_PKTINFO
 8

	)

74 
	#IP_PKTOPTIONS
 9

	)

75 
	#IP_PMTUDISC
 10

	)

76 
	#IP_MTU_DISCOVER
 10

	)

77 
	#IP_RECVERR
 11

	)

78 
	#IP_RECVTTL
 12

	)

79 
	#IP_RECVTOS
 13

	)

80 
	#IP_MTU
 14

	)

81 
	#IP_FREEBIND
 15

	)

82 
	#IP_IPSEC_POLICY
 16

	)

83 
	#IP_XFRM_POLICY
 17

	)

84 
	#IP_PASSSEC
 18

	)

85 
	#IP_TRANSPARENT
 19

	)

86 
	#IP_MULTICAST_ALL
 49

	)

89 
	#IP_ORIGDSTADDR
 20

	)

90 
	#IP_RECVORIGDSTADDR
 
IP_ORIGDSTADDR


	)

92 
	#IP_MINTTL
 21

	)

93 
	#IP_NODEFRAG
 22

	)

94 
	#IP_CHECKSUM
 23

	)

95 
	#IP_BIND_ADDRESS_NO_PORT
 24

	)

98 
	#IP_PMTUDISC_DONT
 0

	)

99 
	#IP_PMTUDISC_WANT
 1

	)

100 
	#IP_PMTUDISC_DO
 2

	)

101 
	#IP_PMTUDISC_PROBE
 3

	)

105 
	#IP_PMTUDISC_INTERFACE
 4

	)

107 
	#IP_PMTUDISC_OMIT
 5

	)

109 
	#IP_MULTICAST_IF
 32

	)

110 
	#IP_MULTICAST_TTL
 33

	)

111 
	#IP_MULTICAST_LOOP
 34

	)

112 
	#IP_ADD_MEMBERSHIP
 35

	)

113 
	#IP_DROP_MEMBERSHIP
 36

	)

114 
	#IP_UNBLOCK_SOURCE
 37

	)

115 
	#IP_BLOCK_SOURCE
 38

	)

116 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

117 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

118 
	#IP_MSFILTER
 41

	)

119 
	#IP_MULTICAST_ALL
 49

	)

120 
	#IP_UNICAST_IF
 50

	)

123 
	#SOL_IP
 0

	)

125 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

126 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

127 
	#IP_MAX_MEMBERSHIPS
 20

	)

129 #ifde‡
__USE_MISC


133 
	sù_›ts


135 
ö_addr
 
	mù_d°
;

136 
	mù_›ts
[40];

140 
	sù_mªqn


142 
ö_addr
 
	mimr_mu…üddr
;

143 
ö_addr
 
	mimr_addªss
;

144 
	mimr_ifödex
;

148 
	sö_pktöfo


150 
	mùi_ifödex
;

151 
ö_addr
 
	mùi_•ec_d°
;

152 
ö_addr
 
	mùi_addr
;

159 
	#IPV6_ADDRFORM
 1

	)

160 
	#IPV6_2292PKTINFO
 2

	)

161 
	#IPV6_2292HOPOPTS
 3

	)

162 
	#IPV6_2292DSTOPTS
 4

	)

163 
	#IPV6_2292RTHDR
 5

	)

164 
	#IPV6_2292PKTOPTIONS
 6

	)

165 
	#IPV6_CHECKSUM
 7

	)

166 
	#IPV6_2292HOPLIMIT
 8

	)

168 
	#SCM_SRCRT
 
IPV6_RXSRCRT


	)

170 
	#IPV6_NEXTHOP
 9

	)

171 
	#IPV6_AUTHHDR
 10

	)

172 
	#IPV6_UNICAST_HOPS
 16

	)

173 
	#IPV6_MULTICAST_IF
 17

	)

174 
	#IPV6_MULTICAST_HOPS
 18

	)

175 
	#IPV6_MULTICAST_LOOP
 19

	)

176 
	#IPV6_JOIN_GROUP
 20

	)

177 
	#IPV6_LEAVE_GROUP
 21

	)

178 
	#IPV6_ROUTER_ALERT
 22

	)

179 
	#IPV6_MTU_DISCOVER
 23

	)

180 
	#IPV6_MTU
 24

	)

181 
	#IPV6_RECVERR
 25

	)

182 
	#IPV6_V6ONLY
 26

	)

183 
	#IPV6_JOIN_ANYCAST
 27

	)

184 
	#IPV6_LEAVE_ANYCAST
 28

	)

185 
	#IPV6_IPSEC_POLICY
 34

	)

186 
	#IPV6_XFRM_POLICY
 35

	)

189 
	#IPV6_RECVPKTINFO
 49

	)

190 
	#IPV6_PKTINFO
 50

	)

191 
	#IPV6_RECVHOPLIMIT
 51

	)

192 
	#IPV6_HOPLIMIT
 52

	)

193 
	#IPV6_RECVHOPOPTS
 53

	)

194 
	#IPV6_HOPOPTS
 54

	)

195 
	#IPV6_RTHDRDSTOPTS
 55

	)

196 
	#IPV6_RECVRTHDR
 56

	)

197 
	#IPV6_RTHDR
 57

	)

198 
	#IPV6_RECVDSTOPTS
 58

	)

199 
	#IPV6_DSTOPTS
 59

	)

200 
	#IPV6_RECVPATHMTU
 60

	)

201 
	#IPV6_PATHMTU
 61

	)

202 
	#IPV6_DONTFRAG
 62

	)

205 
	#IPV6_RECVTCLASS
 66

	)

206 
	#IPV6_TCLASS
 67

	)

209 
	#IPV6_ADD_MEMBERSHIP
 
IPV6_JOIN_GROUP


	)

210 
	#IPV6_DROP_MEMBERSHIP
 
IPV6_LEAVE_GROUP


	)

211 
	#IPV6_RXHOPOPTS
 
IPV6_HOPOPTS


	)

212 
	#IPV6_RXDSTOPTS
 
IPV6_DSTOPTS


	)

215 
	#IPV6_PMTUDISC_DONT
 0

	)

216 
	#IPV6_PMTUDISC_WANT
 1

	)

217 
	#IPV6_PMTUDISC_DO
 2

	)

218 
	#IPV6_PMTUDISC_PROBE
 3

	)

219 
	#IPV6_PMTUDISC_INTERFACE
 4

	)

220 
	#IPV6_PMTUDISC_OMIT
 5

	)

223 
	#SOL_IPV6
 41

	)

224 
	#SOL_ICMPV6
 58

	)

227 
	#IPV6_RTHDR_LOOSE
 0

	)

228 
	#IPV6_RTHDR_STRICT
 1

	)

230 
	#IPV6_RTHDR_TYPE_0
 0

	)

	@/usr/include/bits/inf.h

19 #i‚de‡
_MATH_H


25 #i‡
__GNUC_PREREQ
(3,3)

26 
	#INFINITY
 (
	`__buûtö_öff
())

	)

28 
	#INFINITY
 
HUGE_VALF


	)

	@/usr/include/bits/ioctl-types.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	swösize


29 
	mws_row
;

30 
	mws_cﬁ
;

31 
	mws_xpixñ
;

32 
	mws_ypixñ
;

35 
	#NCC
 8

	)

36 
	sãrmio


38 
	mc_iÊag
;

39 
	mc_oÊag
;

40 
	mc_cÊag
;

41 
	mc_lÊag
;

42 
	mc_löe
;

43 
	mc_cc
[
NCC
];

47 
	#TIOCM_LE
 0x001

	)

48 
	#TIOCM_DTR
 0x002

	)

49 
	#TIOCM_RTS
 0x004

	)

50 
	#TIOCM_ST
 0x008

	)

51 
	#TIOCM_SR
 0x010

	)

52 
	#TIOCM_CTS
 0x020

	)

53 
	#TIOCM_CAR
 0x040

	)

54 
	#TIOCM_RNG
 0x080

	)

55 
	#TIOCM_DSR
 0x100

	)

56 
	#TIOCM_CD
 
TIOCM_CAR


	)

57 
	#TIOCM_RI
 
TIOCM_RNG


	)

62 
	#N_TTY
 0

	)

63 
	#N_SLIP
 1

	)

64 
	#N_MOUSE
 2

	)

65 
	#N_PPP
 3

	)

66 
	#N_STRIP
 4

	)

67 
	#N_AX25
 5

	)

68 
	#N_X25
 6

	)

69 
	#N_6PACK
 7

	)

70 
	#N_MASC
 8

	)

71 
	#N_R3964
 9

	)

72 
	#N_PROFIBUS_FDL
 10

	)

73 
	#N_IRDA
 11

	)

74 
	#N_SMSBLOCK
 12

	)

75 
	#N_HDLC
 13

	)

76 
	#N_SYNC_PPP
 14

	)

77 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

18 #i‚de‡
_SYS_IOCTL_H


23 
	~<asm/io˘ls.h
>

26 
	#SIOCADDRT
 0x890B

	)

27 
	#SIOCDELRT
 0x890C

	)

28 
	#SIOCRTMSG
 0x890D

	)

31 
	#SIOCGIFNAME
 0x8910

	)

32 
	#SIOCSIFLINK
 0x8911

	)

33 
	#SIOCGIFCONF
 0x8912

	)

34 
	#SIOCGIFFLAGS
 0x8913

	)

35 
	#SIOCSIFFLAGS
 0x8914

	)

36 
	#SIOCGIFADDR
 0x8915

	)

37 
	#SIOCSIFADDR
 0x8916

	)

38 
	#SIOCGIFDSTADDR
 0x8917

	)

39 
	#SIOCSIFDSTADDR
 0x8918

	)

40 
	#SIOCGIFBRDADDR
 0x8919

	)

41 
	#SIOCSIFBRDADDR
 0x891®

	)

42 
	#SIOCGIFNETMASK
 0x891b

	)

43 
	#SIOCSIFNETMASK
 0x891¯

	)

44 
	#SIOCGIFMETRIC
 0x891d

	)

45 
	#SIOCSIFMETRIC
 0x891ê

	)

46 
	#SIOCGIFMEM
 0x891‡

	)

47 
	#SIOCSIFMEM
 0x8920

	)

48 
	#SIOCGIFMTU
 0x8921

	)

49 
	#SIOCSIFMTU
 0x8922

	)

50 
	#SIOCSIFNAME
 0x8923

	)

51 
	#SIOCSIFHWADDR
 0x8924

	)

52 
	#SIOCGIFENCAP
 0x8925

	)

53 
	#SIOCSIFENCAP
 0x8926

	)

54 
	#SIOCGIFHWADDR
 0x8927

	)

55 
	#SIOCGIFSLAVE
 0x8929

	)

56 
	#SIOCSIFSLAVE
 0x8930

	)

57 
	#SIOCADDMULTI
 0x8931

	)

58 
	#SIOCDELMULTI
 0x8932

	)

59 
	#SIOCGIFINDEX
 0x8933

	)

60 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

61 
	#SIOCSIFPFLAGS
 0x8934

	)

62 
	#SIOCGIFPFLAGS
 0x8935

	)

63 
	#SIOCDIFADDR
 0x8936

	)

64 
	#SIOCSIFHWBROADCAST
 0x8937

	)

65 
	#SIOCGIFCOUNT
 0x8938

	)

67 
	#SIOCGIFBR
 0x8940

	)

68 
	#SIOCSIFBR
 0x8941

	)

70 
	#SIOCGIFTXQLEN
 0x8942

	)

71 
	#SIOCSIFTXQLEN
 0x8943

	)

76 
	#SIOCDARP
 0x8953

	)

77 
	#SIOCGARP
 0x8954

	)

78 
	#SIOCSARP
 0x8955

	)

81 
	#SIOCDRARP
 0x8960

	)

82 
	#SIOCGRARP
 0x8961

	)

83 
	#SIOCSRARP
 0x8962

	)

87 
	#SIOCGIFMAP
 0x8970

	)

88 
	#SIOCSIFMAP
 0x8971

	)

92 
	#SIOCADDDLCI
 0x8980

	)

93 
	#SIOCDELDLCI
 0x8981

	)

102 
	#SIOCDEVPRIVATE
 0x89F0

	)

108 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/locale.h

19 #i‡!
deföed
 
_LOCALE_H
 && !deföed 
_LANGINFO_H


23 #i‚de‡
_BITS_LOCALE_H


24 
	#_BITS_LOCALE_H
 1

	)

26 
	#__LC_CTYPE
 0

	)

27 
	#__LC_NUMERIC
 1

	)

28 
	#__LC_TIME
 2

	)

29 
	#__LC_COLLATE
 3

	)

30 
	#__LC_MONETARY
 4

	)

31 
	#__LC_MESSAGES
 5

	)

32 
	#__LC_ALL
 6

	)

33 
	#__LC_PAPER
 7

	)

34 
	#__LC_NAME
 8

	)

35 
	#__LC_ADDRESS
 9

	)

36 
	#__LC_TELEPHONE
 10

	)

37 
	#__LC_MEASUREMENT
 11

	)

38 
	#__LC_IDENTIFICATION
 12

	)

	@/usr/include/bits/math-finite.h

19 #i‚de‡
_MATH_H


24 
__REDIRECT_NTH
 (
acos
, (), 
__acos_föôe
);

25 #ifde‡
__USE_ISOC99


26 
__REDIRECT_NTH
 (
acosf
, (), 
__acosf_föôe
);

27 #ifde‡
__MATH_DECLARE_LDOUBLE


28 #ifde‡
__NO_LONG_DOUBLE_MATH


29 
__REDIRECT_NTH
 (
aco¶
, (), 
__acos_föôe
);

31 
__REDIRECT_NTH
 (
aco¶
, (), 
__aco¶_föôe
);

36 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


38 
__REDIRECT_NTH
 (
acosh
, (), 
__acosh_föôe
);

40 #ifde‡
__USE_ISOC99


41 
__REDIRECT_NTH
 (
acoshf
, (), 
__acoshf_föôe
);

42 #ifde‡
__MATH_DECLARE_LDOUBLE


43 #ifde‡
__NO_LONG_DOUBLE_MATH


44 
__REDIRECT_NTH
 (
acoshl
, (), 
__acosh_föôe
);

46 
__REDIRECT_NTH
 (
acoshl
, (), 
__acoshl_föôe
);

52 
__REDIRECT_NTH
 (
asö
, (), 
__asö_föôe
);

53 #ifde‡
__USE_ISOC99


54 
__REDIRECT_NTH
 (
asöf
, (), 
__asöf_föôe
);

55 #ifde‡
__MATH_DECLARE_LDOUBLE


56 #ifde‡
__NO_LONG_DOUBLE_MATH


57 
__REDIRECT_NTH
 (
asöl
, (), 
__asö_föôe
);

59 
__REDIRECT_NTH
 (
asöl
, (), 
__asöl_föôe
);

65 
__REDIRECT_NTH
 (
©™2
, (, ), 
__©™2_föôe
);

66 #ifde‡
__USE_ISOC99


67 
__REDIRECT_NTH
 (
©™2f
, (, ), 
__©™2f_föôe
);

68 #ifde‡
__MATH_DECLARE_LDOUBLE


69 #ifde‡
__NO_LONG_DOUBLE_MATH


70 
__REDIRECT_NTH
 (
©™2l
, (, ),

71 
__©™2_föôe
);

73 
__REDIRECT_NTH
 (
©™2l
, (, ),

74 
__©™2l_föôe
);

79 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


81 
__REDIRECT_NTH
 (
©™h
, (), 
__©™h_föôe
);

83 #ifde‡
__USE_ISOC99


84 
__REDIRECT_NTH
 (
©™hf
, (), 
__©™hf_föôe
);

85 #ifde‡
__MATH_DECLARE_LDOUBLE


86 #ifde‡
__NO_LONG_DOUBLE_MATH


87 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™h_föôe
);

89 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™hl_föôe
);

95 
__REDIRECT_NTH
 (
cosh
, (), 
__cosh_föôe
);

96 #ifde‡
__USE_ISOC99


97 
__REDIRECT_NTH
 (
coshf
, (), 
__coshf_föôe
);

98 #ifde‡
__MATH_DECLARE_LDOUBLE


99 #ifde‡
__NO_LONG_DOUBLE_MATH


100 
__REDIRECT_NTH
 (
coshl
, (), 
__cosh_föôe
);

102 
__REDIRECT_NTH
 (
coshl
, (), 
__coshl_föôe
);

108 
__REDIRECT_NTH
 (
exp
, (), 
__exp_föôe
);

109 #ifde‡
__USE_ISOC99


110 
__REDIRECT_NTH
 (
expf
, (), 
__expf_föôe
);

111 #ifde‡
__MATH_DECLARE_LDOUBLE


112 #ifde‡
__NO_LONG_DOUBLE_MATH


113 
__REDIRECT_NTH
 (
ex∂
, (), 
__exp_föôe
);

115 
__REDIRECT_NTH
 (
ex∂
, (), 
__ex∂_föôe
);

120 #ifde‡
__USE_GNU


122 
__REDIRECT_NTH
 (
exp10
, (), 
__exp10_föôe
);

123 
__REDIRECT_NTH
 (
exp10f
, (), 
__exp10f_föôe
);

124 #ifde‡
__MATH_DECLARE_LDOUBLE


125 #ifde‡
__NO_LONG_DOUBLE_MATH


126 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10_föôe
);

128 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10l_föôe
);

133 
__REDIRECT_NTH
 (
pow10
, (), 
__exp10_föôe
);

134 
__REDIRECT_NTH
 (
pow10f
, (), 
__exp10f_föôe
);

135 #ifde‡
__MATH_DECLARE_LDOUBLE


136 #ifde‡
__NO_LONG_DOUBLE_MATH


137 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10_föôe
);

139 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10l_föôe
);

144 #ifde‡
__USE_ISOC99


146 
__REDIRECT_NTH
 (
exp2
, (), 
__exp2_föôe
);

147 
__REDIRECT_NTH
 (
exp2f
, (), 
__exp2f_föôe
);

148 #ifde‡
__MATH_DECLARE_LDOUBLE


149 #ifde‡
__NO_LONG_DOUBLE_MATH


150 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2_föôe
);

152 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2l_föôe
);

158 
__REDIRECT_NTH
 (
fmod
, (, ), 
__fmod_föôe
);

159 #ifde‡
__USE_ISOC99


160 
__REDIRECT_NTH
 (
fmodf
, (, ), 
__fmodf_föôe
);

161 #ifde‡
__MATH_DECLARE_LDOUBLE


162 #ifde‡
__NO_LONG_DOUBLE_MATH


163 
__REDIRECT_NTH
 (
fmodl
, (, ),

164 
__fmod_föôe
);

166 
__REDIRECT_NTH
 (
fmodl
, (, ),

167 
__fmodl_föôe
);

172 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99


174 
__REDIRECT_NTH
 (
hypŸ
, (, ), 
__hypŸ_föôe
);

176 #ifde‡
__USE_ISOC99


177 
__REDIRECT_NTH
 (
hypŸf
, (, ), 
__hypŸf_föôe
);

178 #ifde‡
__MATH_DECLARE_LDOUBLE


179 #ifde‡
__NO_LONG_DOUBLE_MATH


180 
__REDIRECT_NTH
 (
hypŸl
, (, ),

181 
__hypŸ_föôe
);

183 
__REDIRECT_NTH
 (
hypŸl
, (, ),

184 
__hypŸl_föôe
);

189 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


191 
__REDIRECT_NTH
 (
j0
, (), 
__j0_föôe
);

193 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


194 
__REDIRECT_NTH
 (
j0f
, (), 
__j0f_föôe
);

195 #ifde‡
__MATH_DECLARE_LDOUBLE


196 #ifde‡
__NO_LONG_DOUBLE_MATH


197 
__REDIRECT_NTH
 (
j0l
, (), 
__j0_föôe
);

199 
__REDIRECT_NTH
 (
j0l
, (), 
__j0l_föôe
);

204 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


206 
__REDIRECT_NTH
 (
y0
, (), 
__y0_föôe
);

208 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


209 
__REDIRECT_NTH
 (
y0f
, (), 
__y0f_föôe
);

210 #ifde‡
__MATH_DECLARE_LDOUBLE


211 #ifde‡
__NO_LONG_DOUBLE_MATH


212 
__REDIRECT_NTH
 (
y0l
, (), 
__y0_föôe
);

214 
__REDIRECT_NTH
 (
y0l
, (), 
__y0l_föôe
);

219 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


221 
__REDIRECT_NTH
 (
j1
, (), 
__j1_föôe
);

223 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


224 
__REDIRECT_NTH
 (
j1f
, (), 
__j1f_föôe
);

225 #ifde‡
__MATH_DECLARE_LDOUBLE


226 #ifde‡
__NO_LONG_DOUBLE_MATH


227 
__REDIRECT_NTH
 (
j1l
, (), 
__j1_föôe
);

229 
__REDIRECT_NTH
 (
j1l
, (), 
__j1l_föôe
);

234 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


236 
__REDIRECT_NTH
 (
y1
, (), 
__y1_föôe
);

238 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


239 
__REDIRECT_NTH
 (
y1f
, (), 
__y1f_föôe
);

240 #ifde‡
__MATH_DECLARE_LDOUBLE


241 #ifde‡
__NO_LONG_DOUBLE_MATH


242 
__REDIRECT_NTH
 (
y1l
, (), 
__y1_föôe
);

244 
__REDIRECT_NTH
 (
y1l
, (), 
__y1l_föôe
);

249 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


251 
__REDIRECT_NTH
 (
jn
, (, ), 
__jn_föôe
);

253 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


254 
__REDIRECT_NTH
 (
jnf
, (, ), 
__jnf_föôe
);

255 #ifde‡
__MATH_DECLARE_LDOUBLE


256 #ifde‡
__NO_LONG_DOUBLE_MATH


257 
__REDIRECT_NTH
 (
j∆
, (, ), 
__jn_föôe
);

259 
__REDIRECT_NTH
 (
j∆
, (, ), 
__j∆_föôe
);

264 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


266 
__REDIRECT_NTH
 (
yn
, (, ), 
__yn_föôe
);

268 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


269 
__REDIRECT_NTH
 (
ynf
, (, ), 
__ynf_föôe
);

270 #ifde‡
__MATH_DECLARE_LDOUBLE


271 #ifde‡
__NO_LONG_DOUBLE_MATH


272 
__REDIRECT_NTH
 (
y∆
, (, ), 
__yn_föôe
);

274 
__REDIRECT_NTH
 (
y∆
, (, ), 
__y∆_föôe
);

279 #ifde‡
__USE_MISC


281 
__REDIRECT_NTH
 (
lgamma_r
, (, *), 
__lgamma_r_föôe
);

282 #ifde‡
__USE_ISOC99


283 
__REDIRECT_NTH
 (
lgammaf_r
, (, *), 
__lgammaf_r_föôe
);

284 #ifde‡
__MATH_DECLARE_LDOUBLE


285 #ifde‡
__NO_LONG_DOUBLE_MATH


286 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

287 
__lgamma_r_föôe
);

289 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

290 
__lgammÆ_r_föôe
);

296 
__lgamma_r_föôe
 (, *);

297 
__lgammaf_r_föôe
 (, *);

298 #ifde‡
__NO_LONG_DOUBLE_MATH


299 
__REDIRECT_NTH
 (
__lgammÆ_r_föôe
, (, *),

300 
__lgamma_r_föôe
);

302 
__lgammÆ_r_föôe
 (, *);

305 #i‡((
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99
) \

306 && 
deföed
 
	g__exã∫_Æways_ölöe
)

308 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgamma
 (
__d
))

310 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


311  
	`__lgamma_r_föôe
 (
__d
, &
signgam
);

313 
__loˇl_signgam
 = 0;

314  
	`__lgamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

316 
	}
}

318 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__exã∫_Æways_ölöe


319 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammaf
 (
__d
))

321 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


322  
	`__lgammaf_r_föôe
 (
__d
, &
signgam
);

324 
__loˇl_signgam
 = 0;

325  
	`__lgammaf_r_föôe
 (
__d
, &
__loˇl_signgam
);

327 
	}
}

328 #ifde‡
__MATH_DECLARE_LDOUBLE


329 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammÆ
 (
__d
))

331 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


332  
	`__lgammÆ_r_föôe
 (
__d
, &
signgam
);

334 
__loˇl_signgam
 = 0;

335  
	`__lgammÆ_r_föôe
 (
__d
, &
__loˇl_signgam
);

337 
	}
}

341 #i‡((
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)) \

342 && 
deföed
 
	g__exã∫_Æways_ölöe
)

344 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gamma
 (
__d
))

346  
	`__lgamma_r_föôe
 (
__d
, &
signgam
);

347 
	}
}

348 #ifde‡
__USE_ISOC99


349 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammaf
 (
__d
))

351  
	`__lgammaf_r_föôe
 (
__d
, &
signgam
);

352 
	}
}

353 #ifde‡
__MATH_DECLARE_LDOUBLE


354 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammÆ
 (
__d
))

356  
	`__lgammÆ_r_föôe
 (
__d
, &
signgam
);

357 
	}
}

363 
__REDIRECT_NTH
 (
log
, (), 
__log_föôe
);

364 #ifde‡
__USE_ISOC99


365 
__REDIRECT_NTH
 (
logf
, (), 
__logf_föôe
);

366 #ifde‡
__MATH_DECLARE_LDOUBLE


367 #ifde‡
__NO_LONG_DOUBLE_MATH


368 
__REDIRECT_NTH
 (
logl
, (), 
__log_föôe
);

370 
__REDIRECT_NTH
 (
logl
, (), 
__logl_föôe
);

376 
__REDIRECT_NTH
 (
log10
, (), 
__log10_föôe
);

377 #ifde‡
__USE_ISOC99


378 
__REDIRECT_NTH
 (
log10f
, (), 
__log10f_föôe
);

379 #ifde‡
__MATH_DECLARE_LDOUBLE


380 #ifde‡
__NO_LONG_DOUBLE_MATH


381 
__REDIRECT_NTH
 (
log10l
, (), 
__log10_föôe
);

383 
__REDIRECT_NTH
 (
log10l
, (), 
__log10l_föôe
);

388 #ifde‡
__USE_ISOC99


390 
__REDIRECT_NTH
 (
log2
, (), 
__log2_föôe
);

391 
__REDIRECT_NTH
 (
log2f
, (), 
__log2f_föôe
);

392 #ifde‡
__MATH_DECLARE_LDOUBLE


393 #ifde‡
__NO_LONG_DOUBLE_MATH


394 
__REDIRECT_NTH
 (
log2l
, (), 
__log2_föôe
);

396 
__REDIRECT_NTH
 (
log2l
, (), 
__log2l_föôe
);

402 
__REDIRECT_NTH
 (
pow
, (, ), 
__pow_föôe
);

403 #ifde‡
__USE_ISOC99


404 
__REDIRECT_NTH
 (
powf
, (, ), 
__powf_föôe
);

405 #ifde‡
__MATH_DECLARE_LDOUBLE


406 #ifde‡
__NO_LONG_DOUBLE_MATH


407 
__REDIRECT_NTH
 (
powl
, (, ),

408 
__pow_föôe
);

410 
__REDIRECT_NTH
 (
powl
, (, ),

411 
__powl_föôe
);

416 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


418 
__REDIRECT_NTH
 (
ªmaödî
, (, ), 
__ªmaödî_föôe
);

420 #ifde‡
__USE_ISOC99


421 
__REDIRECT_NTH
 (
ªmaödîf
, (, ), 
__ªmaödîf_föôe
);

422 #ifde‡
__MATH_DECLARE_LDOUBLE


423 #ifde‡
__NO_LONG_DOUBLE_MATH


424 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

425 
__ªmaödî_föôe
);

427 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

428 
__ªmaödîl_föôe
);

433 #i‡(
deföed
 
__USE_MISC
 \

434 || (
deföed
 
	g__USE_XOPEN_EXTENDED
 && !deföed 
	g__USE_XOPEN2K8
))

436 
__REDIRECT_NTH
 (
sˇlb
, (, ), 
__sˇlb_föôe
);

438 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


439 
__REDIRECT_NTH
 (
sˇlbf
, (, ), 
__sˇlbf_föôe
);

440 #ifde‡
__MATH_DECLARE_LDOUBLE


441 #ifde‡
__NO_LONG_DOUBLE_MATH


442 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

443 
__sˇlb_föôe
);

445 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

446 
__sˇlbl_föôe
);

452 
__REDIRECT_NTH
 (
söh
, (), 
__söh_föôe
);

453 #ifde‡
__USE_ISOC99


454 
__REDIRECT_NTH
 (
söhf
, (), 
__söhf_föôe
);

455 #ifde‡
__MATH_DECLARE_LDOUBLE


456 #ifde‡
__NO_LONG_DOUBLE_MATH


457 
__REDIRECT_NTH
 (
söhl
, (), 
__söh_föôe
);

459 
__REDIRECT_NTH
 (
söhl
, (), 
__söhl_föôe
);

465 
__REDIRECT_NTH
 (
sqπ
, (), 
__sqπ_föôe
);

466 #ifde‡
__USE_ISOC99


467 
__REDIRECT_NTH
 (
sqπf
, (), 
__sqπf_föôe
);

468 #ifde‡
__MATH_DECLARE_LDOUBLE


469 #ifde‡
__NO_LONG_DOUBLE_MATH


470 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπ_föôe
);

472 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπl_föôe
);

477 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__exã∫_Æways_ölöe


479 
__gamma_r_föôe
 (, *);

480 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgamma
 (
__d
))

482 
__loˇl_signgam
 = 0;

483 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

484  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

485 
	}
}

486 
__gammaf_r_föôe
 (, *);

487 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammaf
 (
__d
))

489 
__loˇl_signgam
 = 0;

490 
__ªs
 = 
	`__gammaf_r_föôe
 (
__d
, &
__loˇl_signgam
);

491  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

492 
	}
}

493 #ifde‡
__MATH_DECLARE_LDOUBLE


494 
__gammÆ_r_föôe
 (, *);

495 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammÆ
 (
__d
))

497 
__loˇl_signgam
 = 0;

498 #ifde‡
__NO_LONG_DOUBLE_MATH


499 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

501 
__ªs
 = 
	`__gammÆ_r_föôe
 (
__d
, &
__loˇl_signgam
);

503  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

504 
	}
}

	@/usr/include/bits/math-vector.h

19 #i‚de‡
_MATH_H


25 
	~<bôs/libm-simd-de˛-°ubs.h
>

27 #i‡
deföed
 
__x86_64__
 && deföed 
__FAST_MATH__


28 #i‡
deföed
 
_OPENMP
 && _OPENMP >= 201307

30 
	#__DECL_SIMD_x86_64
 
	`_Pøgma
 ("om∞de˛¨êsimdÇŸöbønch")

	)

31 #ñi‡
__GNUC_PREREQ
 (6,0)

33 
	#__DECL_SIMD_x86_64
 
	`__©åibuã__
 ((
	`__simd__
 ("nŸöbønch")))

	)

36 #ifde‡
__DECL_SIMD_x86_64


37 #unde‡
__DECL_SIMD_cos


38 
	#__DECL_SIMD_cos
 
__DECL_SIMD_x86_64


	)

39 #unde‡
__DECL_SIMD_cosf


40 
	#__DECL_SIMD_cosf
 
__DECL_SIMD_x86_64


	)

41 #unde‡
__DECL_SIMD_sö


42 
	#__DECL_SIMD_sö
 
__DECL_SIMD_x86_64


	)

43 #unde‡
__DECL_SIMD_söf


44 
	#__DECL_SIMD_söf
 
__DECL_SIMD_x86_64


	)

45 #unde‡
__DECL_SIMD_söcos


46 
	#__DECL_SIMD_söcos
 
__DECL_SIMD_x86_64


	)

47 #unde‡
__DECL_SIMD_söcosf


48 
	#__DECL_SIMD_söcosf
 
__DECL_SIMD_x86_64


	)

49 #unde‡
__DECL_SIMD_log


50 
	#__DECL_SIMD_log
 
__DECL_SIMD_x86_64


	)

51 #unde‡
__DECL_SIMD_logf


52 
	#__DECL_SIMD_logf
 
__DECL_SIMD_x86_64


	)

53 #unde‡
__DECL_SIMD_exp


54 
	#__DECL_SIMD_exp
 
__DECL_SIMD_x86_64


	)

55 #unde‡
__DECL_SIMD_expf


56 
	#__DECL_SIMD_expf
 
__DECL_SIMD_x86_64


	)

57 #unde‡
__DECL_SIMD_pow


58 
	#__DECL_SIMD_pow
 
__DECL_SIMD_x86_64


	)

59 #unde‡
__DECL_SIMD_powf


60 
	#__DECL_SIMD_powf
 
__DECL_SIMD_x86_64


	)

	@/usr/include/bits/mathcalls.h

45 #i‚de‡
_MATH_H


52 
_MdoubÀ_BEGIN_NAMESPACE


54 
__MATHCALL
 (
acos
,, (
_MdoubÀ_
 
__x
));

56 
__MATHCALL
 (
asö
,, (
_MdoubÀ_
 
__x
));

58 
__MATHCALL
 (
©™
,, (
_MdoubÀ_
 
__x
));

60 
__MATHCALL
 (
©™2
,, (
_MdoubÀ_
 
__y
, _MdoubÀ_ 
__x
));

63 
__MATHCALL_VEC
 (
cos
,, (
_MdoubÀ_
 
__x
));

65 
__MATHCALL_VEC
 (
sö
,, (
_MdoubÀ_
 
__x
));

67 
__MATHCALL
 (
èn
,, (
_MdoubÀ_
 
__x
));

72 
__MATHCALL
 (
cosh
,, (
_MdoubÀ_
 
__x
));

74 
__MATHCALL
 (
söh
,, (
_MdoubÀ_
 
__x
));

76 
__MATHCALL
 (
ènh
,, (
_MdoubÀ_
 
__x
));

77 
	g_MdoubÀ_END_NAMESPACE


79 #ifde‡
__USE_GNU


81 
__MATHDECL_VEC
 (,
söcos
,,

82 (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__söx
, _MdoubÀ_ *
__cosx
));

85 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


86 
__BEGIN_NAMESPACE_C99


88 
__MATHCALL
 (
acosh
,, (
_MdoubÀ_
 
__x
));

90 
__MATHCALL
 (
asöh
,, (
_MdoubÀ_
 
__x
));

92 
__MATHCALL
 (
©™h
,, (
_MdoubÀ_
 
__x
));

93 
	g__END_NAMESPACE_C99


98 
_MdoubÀ_BEGIN_NAMESPACE


100 
__MATHCALL_VEC
 (
exp
,, (
_MdoubÀ_
 
__x
));

103 
__MATHCALL
 (
‰exp
,, (
_MdoubÀ_
 
__x
, *
__exp⁄ít
));

106 
__MATHCALL
 (
ldexp
,, (
_MdoubÀ_
 
__x
, 
__exp⁄ít
));

109 
__MATHCALL_VEC
 (
log
,, (
_MdoubÀ_
 
__x
));

112 
__MATHCALL
 (
log10
,, (
_MdoubÀ_
 
__x
));

115 
__MATHCALL
 (
modf
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__ùå
)Ë
__n⁄nuŒ
 ((2));

116 
	g_MdoubÀ_END_NAMESPACE


118 #ifde‡
__USE_GNU


120 
__MATHCALL
 (
exp10
,, (
_MdoubÀ_
 
__x
));

122 
__MATHCALL
 (
pow10
,, (
_MdoubÀ_
 
__x
));

125 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
__MATHCALL
 (
expm1
,, (
_MdoubÀ_
 
__x
));

131 
__MATHCALL
 (
log1p
,, (
_MdoubÀ_
 
__x
));

134 
__MATHCALL
 (
logb
,, (
_MdoubÀ_
 
__x
));

135 
	g__END_NAMESPACE_C99


138 #ifde‡
__USE_ISOC99


139 
__BEGIN_NAMESPACE_C99


141 
__MATHCALL
 (
exp2
,, (
_MdoubÀ_
 
__x
));

144 
__MATHCALL
 (
log2
,, (
_MdoubÀ_
 
__x
));

145 
	g__END_NAMESPACE_C99


151 
_MdoubÀ_BEGIN_NAMESPACE


153 
__MATHCALL_VEC
 (
pow
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

156 
__MATHCALL
 (
sqπ
,, (
_MdoubÀ_
 
__x
));

157 
	g_MdoubÀ_END_NAMESPACE


159 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99


160 
__BEGIN_NAMESPACE_C99


162 
__MATHCALL
 (
hypŸ
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

163 
	g__END_NAMESPACE_C99


166 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


167 
__BEGIN_NAMESPACE_C99


169 
__MATHCALL
 (
cbπ
,, (
_MdoubÀ_
 
__x
));

170 
	g__END_NAMESPACE_C99


176 
_MdoubÀ_BEGIN_NAMESPACE


178 
__MATHCALLX
 (
˚û
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

181 
__MATHCALLX
 (
Ábs
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

184 
__MATHCALLX
 (
Êo‹
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

187 
__MATHCALL
 (
fmod
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

192 
__MATHDECL_1
 (,
__isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

195 
__MATHDECL_1
 (,
__föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

196 
	g_MdoubÀ_END_NAMESPACE


198 #ifde‡
__USE_MISC


199 #i‡(!
deföed
 
__˝lu•lus
 \

200 || 
	g__˝lu•lus
 < 201103L \

201 || 
	g__MATH_DECLARING_DOUBLE
 == 0)

204 
__MATHDECL_1
 (,
isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

208 
__MATHDECL_1
 (,
föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

211 
__MATHCALL
 (
dªm
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

215 
__MATHCALL
 (
signifiˇnd
,, (
_MdoubÀ_
 
__x
));

218 #ifde‡
__USE_ISOC99


219 
__BEGIN_NAMESPACE_C99


221 
__MATHCALLX
 (
c›ysign
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

222 
	g__END_NAMESPACE_C99


225 #ifde‡
__USE_ISOC99


226 
__BEGIN_NAMESPACE_C99


228 
__MATHCALLX
 (
«n
,, (c⁄° *
__ègb
), (
__c⁄°__
));

229 
	g__END_NAMESPACE_C99


234 
__MATHDECL_1
 (,
__i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

236 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

237 #i‡(!
deföed
 
__˝lu•lus
 \

238 || 
	g__˝lu•lus
 < 201103L \

239 || 
	g__MATH_DECLARING_DOUBLE
 == 0)

241 
__MATHDECL_1
 (,
i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

245 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && 
__MATH_DECLARING_DOUBLE
)

247 
__MATHCALL
 (
j0
,, (
_MdoubÀ_
));

248 
__MATHCALL
 (
j1
,, (
_MdoubÀ_
));

249 
__MATHCALL
 (
jn
,, (, 
_MdoubÀ_
));

250 
__MATHCALL
 (
y0
,, (
_MdoubÀ_
));

251 
__MATHCALL
 (
y1
,, (
_MdoubÀ_
));

252 
__MATHCALL
 (
yn
,, (, 
_MdoubÀ_
));

256 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99


257 
__BEGIN_NAMESPACE_C99


259 
__MATHCALL
 (
îf
,, (
_MdoubÀ_
));

260 
__MATHCALL
 (
îfc
,, (
_MdoubÀ_
));

261 
__MATHCALL
 (
lgamma
,, (
_MdoubÀ_
));

262 
	g__END_NAMESPACE_C99


265 #ifde‡
__USE_ISOC99


266 
__BEGIN_NAMESPACE_C99


268 
__MATHCALL
 (
tgamma
,, (
_MdoubÀ_
));

269 
	g__END_NAMESPACE_C99


272 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

274 
__MATHCALL
 (
gamma
,, (
_MdoubÀ_
));

277 #ifde‡
__USE_MISC


281 
__MATHCALL
 (
lgamma
,
_r
, (
_MdoubÀ_
, *
__signgamp
));

285 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


286 
__BEGIN_NAMESPACE_C99


289 
__MATHCALL
 (
röt
,, (
_MdoubÀ_
 
__x
));

292 
__MATHCALLX
 (
√xè·î
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

293 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__LDBL_COMPAT


294 
__MATHCALLX
 (
√xâow¨d
,, (
_MdoubÀ_
 
__x
, 
__y
), (
__c⁄°__
));

298 
__MATHCALL
 (
ªmaödî
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

300 #ifde‡
__USE_ISOC99


302 
__MATHCALL
 (
sˇlbn
,, (
_MdoubÀ_
 
__x
, 
__n
));

306 
__MATHDECL
 (,
ûogb
,, (
_MdoubÀ_
 
__x
));

309 #ifde‡
__USE_ISOC99


311 
__MATHCALL
 (
sˇlb 
,, (
_MdoubÀ_
 
__x
, 
__n
));

315 
__MATHCALL
 (
√¨byöt
,, (
_MdoubÀ_
 
__x
));

319 
__MATHCALLX
 (
round
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

323 
__MATHCALLX
 (
åunc
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

328 
__MATHCALL
 (
ªmquo
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, *
__quo
));

335 
__MATHDECL
 (,
Ãöt
,, (
_MdoubÀ_
 
__x
));

336 
__exãnsi⁄__


337 
__MATHDECL
 (,
Œröt
,, (
_MdoubÀ_
 
__x
));

341 
__MATHDECL
 (,
Ãound
,, (
_MdoubÀ_
 
__x
));

342 
__exãnsi⁄__


343 
__MATHDECL
 (,
Œround
,, (
_MdoubÀ_
 
__x
));

347 
__MATHCALL
 (
fdim
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

350 
__MATHCALLX
 (
fmax
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

353 
__MATHCALLX
 (
fmö
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

357 
__MATHDECL_1
 (, 
__Â˛assify
,, (
_MdoubÀ_
 
__vÆue
))

358 
__©åibuã__
 ((
__c⁄°__
));

361 
__MATHDECL_1
 (, 
__signbô
,, (
_MdoubÀ_
 
__vÆue
))

362 
__©åibuã__
 ((
__c⁄°__
));

366 
__MATHCALL
 (
fma
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, _MdoubÀ_ 
__z
));

369 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


370 
	g__END_NAMESPACE_C99


373 #ifde‡
__USE_GNU


375 
__MATHDECL_1
 (, 
__issig«lög
,, (
_MdoubÀ_
 
__vÆue
))

376 
__©åibuã__
 ((
__c⁄°__
));

379 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

380 && 
	g__MATH_DECLARING_DOUBLE
 \

381 && !
deföed
 
	g__USE_XOPEN2K8
)

383 
__MATHCALL
 (
sˇlb
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__n
));

	@/usr/include/bits/mathdef.h

18 #i‡!
deföed
 
_MATH_H
 && !deföed 
_COMPLEX_H


22 #i‡
deföed
 
__USE_ISOC99
 && deföed 
_MATH_H
 && !deföed 
_MATH_H_MATHDEF


23 
	#_MATH_H_MATHDEF
 1

	)

25 #i‡
deföed
 
__x86_64__
 || (deföed 
__FLT_EVAL_METHOD__
 && __FLT_EVAL_METHOD__ == 0)

28 
	tÊﬂt_t
;

29 
	tdoubÀ_t
;

35 
	tÊﬂt_t
;

37 
	tdoubÀ_t
;

42 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

43 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

47 #ifde‡
__FP_FAST_FMA


48 
	#FP_FAST_FMA
 1

	)

51 #ifde‡
__FP_FAST_FMAF


52 
	#FP_FAST_FMAF
 1

	)

55 #ifde‡
__FP_FAST_FMAL


56 
	#FP_FAST_FMAL
 1

	)

	@/usr/include/bits/mathinline.h

19 #i‚de‡
_MATH_H


23 #i‚de‡
__exã∫_Æways_ölöe


24 
	#__MATH_INLINE
 
__ölöe


	)

26 
	#__MATH_INLINE
 
__exã∫_Æways_ölöe


	)

30 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__
 && __GNUC__ >= 2

32 #i‡!
__GNUC_PREREQ
 (2,97)

37 #unde‡
isgª©î


38 #unde‡
isgª©îequÆ


39 #unde‡
i¶ess


40 #unde‡
i¶es£quÆ


41 #unde‡
i¶essgª©î


42 #unde‡
isun‹dîed


43 #ifde‡
__i686__


46 
	#isgª©î
(
x
, 
y
) \

47 ({ 
__ªsu…
; \

48 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

49 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

50 
__ªsu…
; })

	)

51 
	#isgª©îequÆ
(
x
, 
y
) \

52 ({ 
__ªsu…
; \

53 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

54 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

55 
__ªsu…
; })

	)

57 
	#i¶ess
(
x
, 
y
) \

58 ({ 
__ªsu…
; \

59 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

60 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

61 
__ªsu…
; })

	)

63 
	#i¶es£quÆ
(
x
, 
y
) \

64 ({ 
__ªsu…
; \

65 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

66 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

67 
__ªsu…
; })

	)

69 
	#i¶essgª©î
(
x
, 
y
) \

70 ({ 
__ªsu…
; \

71 
	`__asm__
 ("fucomip %%st(1), %%st; setne %%al" \

72 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

73 
__ªsu…
; })

	)

75 
	#isun‹dîed
(
x
, 
y
) \

76 ({ 
__ªsu…
; \

77 
	`__asm__
 ("fucomip %%st(1), %%st; setp %%al" \

78 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

79 
__ªsu…
; })

	)

82 
	#isgª©î
(
x
, 
y
) \

83 ({ 
__ªsu…
; \

84 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

85 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

86 
__ªsu…
; })

	)

88 
	#isgª©îequÆ
(
x
, 
y
) \

89 ({ 
__ªsu…
; \

90 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

91 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

92 
__ªsu…
; })

	)

94 
	#i¶ess
(
x
, 
y
) \

95 ({ 
__ªsu…
; \

96 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

97 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

98 
__ªsu…
; })

	)

100 
	#i¶es£quÆ
(
x
, 
y
) \

101 ({ 
__ªsu…
; \

102 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

103 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

104 
__ªsu…
; })

	)

106 
	#i¶essgª©î
(
x
, 
y
) \

107 ({ 
__ªsu…
; \

108 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x44, %%ah; setz %%al" \

109 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

110 
__ªsu…
; })

	)

112 
	#isun‹dîed
(
x
, 
y
) \

113 ({ 
__ªsu…
; \

114 
	`__asm__
 ("fucompp; fnstsw; sahf; setp %%al" \

115 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

116 
__ªsu…
; })

	)

122 #i‡
__GNUC_PREREQ
 (2, 8)

123 
__BEGIN_NAMESPACE_C99


126 
__MATH_INLINE
 

127 
__NTH
 (
	$__signbôf
 (
__x
))

129 #ifde‡
__SSE2_MATH__


130 
__m
;

131 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

132  (
__m
 & 0x8) != 0;

134 
__exãnsi⁄__
 uni⁄ { 
__f
; 
__i
; } 
__u
 = { __f: 
__x
 };

135  
__u
.
__i
 < 0;

137 
	}
}

138 
__MATH_INLINE
 

139 
__NTH
 (
	$__signbô
 (
__x
))

141 #ifde‡
__SSE2_MATH__


142 
__m
;

143 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

144  (
__m
 & 0x80) != 0;

146 
__exãnsi⁄__
 uni⁄ { 
__d
; 
__i
[2]; } 
__u
 = { __d: 
__x
 };

147  
__u
.
__i
[1] < 0;

149 
	}
}

150 
__MATH_INLINE
 

151 
__NTH
 (
	$__signbôl
 (
__x
))

153 
__exãnsi⁄__
 uni⁄ { 
__l
; 
__i
[3]; } 
__u
 = { __l: 
__x
 };

154  (
__u
.
__i
[2] & 0x8000) != 0;

155 
	}
}

157 
	g__END_NAMESPACE_C99


164 #i‡
__GNUC_PREREQ
 (2, 8)

165 #i‡!
__GNUC_PREREQ
 (3, 4Ë&& !
deföed
 
__NO_MATH_INLINES
 \

166 && 
deföed
 
	g__OPTIMIZE__


170 #ifde‡
__USE_ISOC99


171 
	g__BEGIN_NAMESPACE_C99


174 #ifde‡
__SSE_MATH__


175 
__MATH_INLINE
 

176 
__NTH
 (
	$Ãötf
 (
__x
))

178 
__ªs
;

183 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

184  
__ªs
;

185 
	}
}

187 #ifde‡
__SSE2_MATH__


188 
__MATH_INLINE
 

189 
__NTH
 (
	$Ãöt
 (
__x
))

191 
__ªs
;

196 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

197  
__ªs
;

198 
	}
}

200 #ifde‡
__x86_64__


201 
__exãnsi⁄__


202 
__MATH_INLINE
 

203 
__NTH
 (
	$Œrötf
 (
__x
))

205 
__ªs
;

210 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

211  
__ªs
;

212 
	}
}

213 
__exãnsi⁄__


214 
__MATH_INLINE
 

215 
__NTH
 (
	$Œröt
 (
__x
))

217 
__ªs
;

222 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

223  
__ªs
;

224 
	}
}

227 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0 \

228 && 
deföed
 
__SSE2_MATH__


230 
__MATH_INLINE
 

231 
__NTH
 (
	$fmaxf
 (
__x
, 
__y
))

233 #ifde‡
__AVX__


234 
__ªs
;

235 
	`__asm
 ("vmaxs†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

236  
__ªs
;

238 
	`__asm
 ("maxs†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

239  
__x
;

241 
	}
}

242 
__MATH_INLINE
 

243 
__NTH
 (
	$fmax
 (
__x
, 
__y
))

245 #ifde‡
__AVX__


246 
__ªs
;

247 
	`__asm
 ("vmaxsd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

248  
__ªs
;

250 
	`__asm
 ("maxsd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

251  
__x
;

253 
	}
}

256 
__MATH_INLINE
 

257 
__NTH
 (
	$fmöf
 (
__x
, 
__y
))

259 #ifde‡
__AVX__


260 
__ªs
;

261 
	`__asm
 ("vmös†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

262  
__ªs
;

264 
	`__asm
 ("mös†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

265  
__x
;

267 
	}
}

268 
__MATH_INLINE
 

269 
__NTH
 (
	$fmö
 (
__x
, 
__y
))

271 #ifde‡
__AVX__


272 
__ªs
;

273 
	`__asm
 ("vmösd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

274  
__ªs
;

276 
	`__asm
 ("mösd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

277  
__x
;

279 
	}
}

282 
	g__END_NAMESPACE_C99


285 #i‡
deföed
 
__SSE4_1__
 && deföed 
__SSE2_MATH__


286 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


287 
__BEGIN_NAMESPACE_C99


290 
__MATH_INLINE
 

291 
__NTH
 (
	$röt
 (
__x
))

293 
__ªs
;

298 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

299  
__ªs
;

300 
	}
}

301 
__MATH_INLINE
 

302 
__NTH
 (
	$rötf
 (
__x
))

304 
__ªs
;

309 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

310  
__ªs
;

311 
	}
}

313 #ifde‡
__USE_ISOC99


315 
__MATH_INLINE
 

316 
__NTH
 (
	$√¨byöt
 (
__x
))

318 
__ªs
;

323 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

324  
__ªs
;

325 
	}
}

326 
__MATH_INLINE
 

327 
__NTH
 (
	$√¨byötf
 (
__x
))

329 
__ªs
;

334 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

335  
__ªs
;

336 
	}
}

339 
	g__END_NAMESPACE_C99


342 
__BEGIN_NAMESPACE_STD


344 
__MATH_INLINE
 

345 
__NTH
 (
	$˚û
 (
__x
))

347 
__ªs
;

348 
	`__asm
 ("roundsd $2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

349  
__ªs
;

350 
	}
}

351 
__END_NAMESPACE_STD


353 
__BEGIN_NAMESPACE_C99


354 
__MATH_INLINE
 

355 
__NTH
 (
	$˚ûf
 (
__x
))

357 
__ªs
;

358 
	`__asm
 ("rounds†$2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

359  
__ªs
;

360 
	}
}

361 
__END_NAMESPACE_C99


363 
__BEGIN_NAMESPACE_STD


365 
__MATH_INLINE
 

366 
__NTH
 (
	$Êo‹
 (
__x
))

368 
__ªs
;

369 
	`__asm
 ("roundsd $1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

370  
__ªs
;

371 
	}
}

372 
__END_NAMESPACE_STD


374 
__BEGIN_NAMESPACE_C99


375 
__MATH_INLINE
 

376 
__NTH
 (
	$Êo‹f
 (
__x
))

378 
__ªs
;

379 
	`__asm
 ("rounds†$1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

380  
__ªs
;

381 
	}
}

382 
	g__END_NAMESPACE_C99


390 #i‡!
deföed
 
__SSE2_MATH__
 && !deföed 
__x86_64__


391 #i‡((!
deföed
 
__NO_MATH_INLINES
 || deföed 
__LIBC_INTERNAL_MATH_INLINES
) \

392 && 
deföed
 
	g__OPTIMIZE__
)

396 #unde‡
m©h_îrh™dlög


405 #ifde‡
__USE_ISOC99


406 
	#__ölöe_m©h›
(
func
, 
›
) \

407 
	`__ölöe_m©h›_
 (, 
func
, 
›
) \

408 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

409 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

410 
	#__ölöe_m©h›NP
(
func
, 
›
) \

411 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
) \

412 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

413 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

415 
	#__ölöe_m©h›
(
func
, 
›
) \

416 
	`__ölöe_m©h›_
 (, 
func
, 
›
)

	)

417 
	#__ölöe_m©h›NP
(
func
, 
›
) \

418 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
)

	)

421 
	#__ölöe_m©h›_
(
Êﬂt_ty≥
, 
func
, 
›
) \

422 
	`__ölöe_m©h›_de˛_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

423 
	#__ölöe_m©h›NP_
(
Êﬂt_ty≥
, 
func
, 
›
) \

424 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

427 #ifde‡
__USE_ISOC99


428 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

429 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
) \

430 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

431 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

432 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

433 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
) \

434 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

435 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

437 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

438 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
)

	)

439 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

440 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
)

	)

443 
	#__ölöe_m©h›_de˛_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

444 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

445 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
)

	)

447 
	#__ölöe_m©h›_de˛NP_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

448 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
__x
)) \

450 
Êﬂt_ty≥
 
__ªsu…
; \

451 
__asm
 
	`__vﬁ©ûe__
 (
›
 : "Ò" (
__ªsu…
Ë: 
∑øms
); \

452  
__ªsu…
; \

453 }

	)

456 #ifde‡
__USE_ISOC99


457 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

458 
	`__ölöe_m©hcode_
 (, 
func
, 
¨g
, 
code
) \

459 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

460 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

461 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

462 
	`__ölöe_m©hcodeNP_
 (, 
func
, 
¨g
, 
code
) \

463 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

464 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

465 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

466 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

467 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

468 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

469 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

470 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

471 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

472 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

473 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

474 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

475 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

476 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

477 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

478 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

479 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

480 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

482 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

483 
	`__ölöe_m©hcode_
 (, 
func
, (
¨g
), 
code
)

	)

484 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

485 
	`__ölöe_m©hcodeNP_
 (, 
func
, (
¨g
), 
code
)

	)

486 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

487 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

488 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

489 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

490 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

491 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

492 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

493 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

496 
	#__ölöe_m©hcode_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

497 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

498 
	`__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
)

	)

500 
	#__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

501 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g
)) \

503 
code
; \

504 }

	)

507 
	#__ölöe_m©hcode2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

508 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

509 
	`__ölöe_m©hcodeNP2_
 (
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

511 
	#__ölöe_m©hcodeNP2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

512 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
)) \

514 
code
; \

515 }

	)

517 
	#__ölöe_m©hcode3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

518 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

519 
	`__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

521 
	#__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

522 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
, \

523 
Êﬂt_ty≥
 
¨g3
)) \

525 
code
; \

526 }

	)

530 #i‡!
deföed
 
__NO_MATH_INLINES
 && deföed 
__OPTIMIZE__


534 #ifde‡
__FAST_MATH__


535 #ifde‡
__USE_GNU


536 
	#__söcos_code
 \

537 
__co§
; \

538 
__sör
; \

539 
__swtmp
; \

540 
__asm
 
__vﬁ©ûe__
 \

555 : "Ò" (
__co§
), "=u" (
__sör
), "˜" (
__swtmp
Ë: "0" (
__x
)); \

556 *
__söx
 = 
__sör
; \

557 *
__cosx
 = 
__co§


	)

559 
__MATH_INLINE
 

560 
__NTH
 (
	$__söcos
 (
__x
, *
__söx
, *
__cosx
))

562 
__söcos_code
;

563 
	}
}

565 
__MATH_INLINE
 

566 
__NTH
 (
	$__söcosf
 (
__x
, *
__söx
, *
__cosx
))

568 
__söcos_code
;

569 
	}
}

571 
__MATH_INLINE
 

572 
__NTH
 (
	$__söco¶
 (
__x
, *
__söx
, *
__cosx
))

574 
__söcos_code
;

575 
	}
}

582 #i‡
__GNUC_PREREQ
 (3, 5)

583 
	#__expm1_code
 \

584 
__ãmp
; \

585 
__ãmp
 = 
	`__buûtö_expm1l
 (
__x
); \

586  
__ãmp
 ? __ãm∞: 
__x


	)

588 
	#__expm1_code
 \

589 
__vÆue
; \

590 
__exp⁄ít
; \

591 
__ãmp
; \

592 
__asm
 
__vﬁ©ûe__
 \

601 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

602 
__asm
 
__vﬁ©ûe__
 \

604 : "Ò" (
__ãmp
Ë: "0" (1.0), "u" (
__exp⁄ít
)); \

605 
__ãmp
 -= 1.0; \

606 
__ãmp
 +
__vÆue
; \

607  
__ãmp
 ? __ãm∞: 
__x


	)

609 
	$__ölöe_m©hcodeNP_
 (, 
__expm1l
, 
__x
, 
__expm1_code
)

611 #i‡
	`__GNUC_PREREQ
 (3, 4)

612 
	`__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
,  
	$__buûtö_ex∂
 (
__x
))

614 
	#__exp_code
 \

615 
__vÆue
; \

616 
__exp⁄ít
; \

617 
__asm
 
__vﬁ©ûe__
 \

625 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

626 
__vÆue
 += 1.0; \

627 
__asm
 
__vﬁ©ûe__
 \

629 : "Ò" (
__vÆue
Ë: "0" (__vÆue), "u" (
__exp⁄ít
)); \

630  
__vÆue


	)

631 
	$__ölöe_m©hcodeNP
 (
exp
, 
__x
, 
__exp_code
)

632 
	$__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
, 
__exp_code
)

636 #i‡!
	`__GNUC_PREREQ
 (3, 5)

637 
	`__ölöe_m©hcodeNP
 (
èn
, 
__x
, \

638 
__vÆue
; \

639 
__vÆue2
 
	`__©åibuã__
 ((
__unu£d__
)); \

640 
__asm
 
__vﬁ©ûe__
 \

642 : "Ò" (
__vÆue2
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

643  
__vÆue
)

648 #i‡
	`__GNUC_PREREQ
 (3, 4)

649 
	`__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
,

650  
	$__buûtö_©™2l
 (
__y
, 
__x
))

652 
	#__©™2_code
 \

653 
__vÆue
; \

654 
__asm
 
__vﬁ©ûe__
 \

656 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "st(1)"); \

657  
__vÆue


	)

658 #ifde‡
__FAST_MATH__


659 
	$__ölöe_m©hcodeNP2
 (
©™2
, 
__y
, 
__x
, 
__©™2_code
)

661 
	$__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
, 
__©™2_code
)

665 #i‡
deföed
 
__FAST_MATH__
 && !
	`__GNUC_PREREQ
 (3, 5)

666 
	`__ölöe_m©hcodeNP2
 (
fmod
, 
__x
, 
__y
, \

667 
__vÆue
; \

668 
__asm
 
__vﬁ©ûe__
 \

673 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "ax", "cc"); \

674  
__vÆue
)

678 #ifde‡
__FAST_MATH__


679 #i‡!
	`__GNUC_PREREQ
 (3,3)

680 
	`__ölöe_m©h›NP
 (
sqπ
, "fsqrt")

681 
	`__ölöe_m©h›NP_
 (, 
__sqπl
, "fsqrt")

682 
	#__libc_sqπl
(
n
Ë
	`__sqπl
 (n)

	)

684 
	#__libc_sqπl
(
n
Ë
	`__buûtö_sqπl
 (n)

	)

688 #i‡
	`__GNUC_PREREQ
 (2, 8)

689 
	`__ölöe_m©hcodeNP_
 (, 
Ábs
, 
__x
,  
	$__buûtö_Ábs
 (
__x
))

690 #ifde‡
__USE_ISOC99


691 
	`__ölöe_m©hcodeNP_
 (, 
Ábsf
, 
__x
,  
	$__buûtö_Ábsf
 (
__x
))

692 
	`__ölöe_m©hcodeNP_
 (, 
Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

694 
	`__ölöe_m©hcodeNP_
 (, 
__Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

696 
	`__ölöe_m©h›
 (
Ábs
, "fabs")

697 
	`__ölöe_m©h›_
 (, 
__Áb¶
, "fabs")

700 #ifde‡
__FAST_MATH__


701 #i‡!
	`__GNUC_PREREQ
 (3, 4)

703 
	`__ölöe_m©h›NP
 (
sö
, "fsin")

705 
	`__ölöe_m©h›NP
 (
cos
, "fcos")

707 
	`__ölöe_m©h›_de˛NP
 (
log
, "Êd 2; fxch; fyl2x", "0" (
__x
) : "st(1)")

710 #i‡!
	`__GNUC_PREREQ
 (3, 5)

711 
	`__ölöe_m©h›_de˛NP
 (
log10
, "Êdlg2; fxch; fyl2x", "0" (
__x
) : "st(1)")

713 
	`__ölöe_m©hcodeNP
 (
asö
, 
__x
,  
	`__©™2l
 (__x, 
	`__libc_sqπl
 (1.0 - __x * __x)))

714 
	`__ölöe_m©hcodeNP
 (
acos
, 
__x
,  
	`__©™2l
 (
	`__libc_sqπl
 (1.0 - __x * __x), __x))

717 #i‡!
	`__GNUC_PREREQ
 (3, 4)

718 
	`__ölöe_m©h›_de˛NP
 (
©™
, "Êd1; f∑èn", "0" (
__x
) : "st(1)")

722 
	`__ölöe_m©hcode_
 (, 
__sgn1l
, 
__x
, \

723 
__exãnsi⁄__
 uni⁄ { 
__xld
; 
__xi
[3]; } 
__n
 = \

724 { 
__xld
: 
__x
 
	}
}; \

725 
	g__n
.
	g__xi
[2] = (
__n
.
__xi
[2] & 0x8000) | 0x3fff; \

726 
	g__n
.
	g__xi
[1] = 0x80000000; \

727 
	g__n
.
	g__xi
[0] = 0; \

728  
	g__n
.
	g__xld
)

731 #ifde‡
__FAST_MATH__


733 
__ölöe_m©hcodeNP
 (
söh
, 
__x
, \

734 
__exm1
 = 
__expm1l
 (
__Áb¶
 (
__x
)); \

735  0.5 * (
__exm1
 / (__exm1 + 1.0Ë+ __exm1Ë* 
	$__sgn1l
 (
__x
))

737 
	`__ölöe_m©hcodeNP
 (
cosh
, 
__x
, \

738 
__ex
 = 
	`__ex∂
 (
__x
); \

739  0.5 * (
__ex
 + 1.0 / __ex))

741 
	`__ölöe_m©hcodeNP
 (
ènh
, 
__x
, \

742 
__exm1
 = 
	`__expm1l
 (-
	`__Áb¶
 (
__x
 + __x)); \

743  
__exm1
 / (__exm1 + 2.0Ë* 
	`__sgn1l
 (-
__x
))

746 
	`__ölöe_m©hcodeNP
 (
Êo‹
, 
__x
, \

747 
__vÆue
; \

748 
__ign‹e
; \

749 
__cw
; \

750 
__cwtmp
; \

751 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

759 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

760 "=m" (
__cw
) \

761 : "0" (
__x
)); \

762  
__vÆue
)

764 
	`__ölöe_m©hcodeNP
 (
˚û
, 
__x
, \

765 
__vÆue
; \

766 
__ign‹e
; \

767 
__cw
; \

768 
__cwtmp
; \

769 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

777 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

778 "=m" (
__cw
) \

779 : "0" (
__x
)); \

780  
__vÆue
)

782 #ifde‡
__FAST_MATH__


783 
	#__ldexp_code
 \

784 
__vÆue
; \

785 
__asm
 
__vﬁ©ûe__
 \

787 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" ((Ë
__y
)); \

788  
__vÆue


	)

790 
__MATH_INLINE
 

791 
	`__NTH
 (
	$ldexp
 (
__x
, 
__y
))

793 
__ldexp_code
;

794 
	}
}

799 #ifde‡
__USE_ISOC99


801 #ifde‡
__FAST_MATH__


802 
	$__ölöe_m©hcodeNP
 (
expm1
, 
__x
, 
__expm1_code
)

806 
	#__M_SQRT2
 1.41421356237309504880L

	)

808 #i‡!
	`__GNUC_PREREQ
 (3, 5)

809 
	`__ölöe_m©hcodeNP
 (
log1p
, 
__x
, \

810 
__vÆue
; \

811 i‡(
	`__Áb¶
 (
__x
Ë>1.0 - 0.5 * 
__M_SQRT2
) \

812 
__vÆue
 = 
	`logl
 (1.0 + 
__x
); \

814 
__asm
 
__vﬁ©ûe__
 \

818 : "Ò" (
__vÆue
Ë: "0" (
__x
) : "st(1)"); \

819  
__vÆue
)

824 
	`__ölöe_m©hcodeNP
 (
asöh
, 
__x
, \

825 
__y
 = 
	`__Áb¶
 (
__x
); \

826  (
	`log1∂
 (
__y
 * __y / (
	`__libc_sqπl
 (__y * __y + 1.0) + 1.0) + __y) \

827 * 
	$__sgn1l
 (
__x
)))

829 
	`__ölöe_m©hcodeNP
 (
acosh
, 
__x
, \

830  
	`logl
 (
__x
 + 
	`__libc_sqπl
 (__x - 1.0) * __libc_sqrtl (__x + 1.0)))

832 
	`__ölöe_m©hcodeNP
 (
©™h
, 
__x
, \

833 
__y
 = 
	`__Áb¶
 (
__x
); \

834  -0.5 * 
	`log1∂
 (-(
__y
 + __yË/ (1.0 + __y)Ë* 
	$__sgn1l
 (
__x
))

837 
	`__ölöe_m©hcodeNP2
 (
hypŸ
, 
__x
, 
__y
,

838  
	`__libc_sqπl
 (
__x
 * __x + 
__y
 * __y))

840 #i‡!
	`__GNUC_PREREQ
 (3, 5)

841 
	`__ölöe_m©hcodeNP
(
logb
, 
__x
, \

842 
__vÆue
; \

843 
__junk
; \

844 
__asm
 
__vﬁ©ûe__
 \

846 : "Ò" (
__junk
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

847  
__vÆue
)

853 #ifde‡
__USE_ISOC99


854 #ifde‡
__FAST_MATH__


856 #i‡!
	`__GNUC_PREREQ
 (3, 5)

857 
	`__ölöe_m©h›_de˛NP
 (
log2
, "Êd1; fxch; fyl2x", "0" (
__x
) : "st(1)")

860 
__MATH_INLINE
 

861 
	`__NTH
 (
	$ldexpf
 (
__x
, 
__y
))

863 
__ldexp_code
;

864 
	}
}

866 
__MATH_INLINE
 

867 
__NTH
 (
	$ldex∂
 (
__x
, 
__y
))

869 
__ldexp_code
;

870 
	}
}

872 
__ölöe_m©h›NP
 (
röt
, "frndint")

875 
	#__Ãöt_code
 \

876 
__Ãöåes
; \

877 
__asm__
 
__vﬁ©ûe__
 \

879 : "=m" (
__Ãöåes
Ë: "t" (
__x
) : "st"); \

880  
__Ãöåes


	)

881 
__MATH_INLINE
 

882 
__NTH
 (
	$Ãötf
 (
__x
))

884 
__Ãöt_code
;

885 
	}
}

886 
__MATH_INLINE
 

887 
__NTH
 (
	$Ãöt
 (
__x
))

889 
__Ãöt_code
;

890 
	}
}

891 
__MATH_INLINE
 

892 
__NTH
 (
	$Ãöé
 (
__x
))

894 
__Ãöt_code
;

895 
	}
}

896 #unde‡
__Ãöt_code


898 
	#__Œröt_code
 \

899 
__Œröåes
; \

900 
__asm__
 
__vﬁ©ûe__
 \

902 : "=m" (
__Œröåes
Ë: "t" (
__x
) : "st"); \

903  
__Œröåes


	)

904 
__exãnsi⁄__


905 
__MATH_INLINE
 

906 
__NTH
 (
	$Œrötf
 (
__x
))

908 
__Œröt_code
;

909 
	}
}

910 
__exãnsi⁄__


911 
__MATH_INLINE
 

912 
__NTH
 (
	$Œröt
 (
__x
))

914 
__Œröt_code
;

915 
	}
}

916 
__exãnsi⁄__


917 
__MATH_INLINE
 

918 
__NTH
 (
	$Œröé
 (
__x
))

920 
__Œröt_code
;

921 
	}
}

922 #unde‡
__Œröt_code


927 #ifde‡
__USE_MISC


929 #i‡
deföed
 
__FAST_MATH__
 && !
__GNUC_PREREQ
 (3, 5)

930 
__ölöe_m©hcodeNP2
 (
dªm
, 
__x
, 
__y
, \

931 
__vÆue
; \

932 
__˛obbîed
; \

933 
__asm
 
__vﬁ©ûe__
 \

938 : "Ò" (
__vÆue
), "=&a" (
__˛obbîed
Ë: "0" (
__x
), "u" (
__y
) : "cc"); \

939  
__vÆue
)

944 
__MATH_INLINE
 

945 
__NTH
 (
	$__föôe
 (
__x
))

947  (
__exãnsi⁄__


948 (((((uni⁄ { 
__d
; 
__i
[2]; }Ë{__d: 
__x
}).__i[1]

950 
	}
}

955 #unde‡
__©™2_code


956 #ifde‡
__FAST_MATH__


957 #unde‡
__expm1_code


958 #unde‡
__exp_code


959 #unde‡
__söcos_code


966 #ifde‡
__LIBC_INTERNAL_MATH_INLINES


967 
__ölöe_m©h›
 (
__õì754_sqπ
, "fsqrt")

968 
__ölöe_m©hcode2_
 (, 
__õì754_©™2l
, 
__y
, 
__x
,

969 
__vÆue
;

970 
__asm
 
__vﬁ©ûe__
 ("fpatan\n\t"

971 : "Ò" (
__vÆue
)

972 : "0" (
__x
), "u" (
__y
) : "st(1)");

973  
__vÆue
;)

	@/usr/include/bits/nan.h

19 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

28 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#NAN
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
 ((
	`__mode__
 (
__SI__
))); 
__d
; }) \

35 { 
__l
: 0x7fc00000UL }).
__d
)

	)

39 
	~<ídün.h
>

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#__q«n_byãs
 { 0x7f, 0xc0, 0, 0 }

	)

44 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


45 
	#__q«n_byãs
 { 0, 0, 0xc0, 0x7‡}

	)

48 uni⁄ { 
	m__c
[4]; 
	m__d
; } 
__q«n_uni⁄


49 
__©åibuã__
 ((
__unu£d__
)Ë{ 
__q«n_byãs
 };

50 
	#NAN
 (
__q«n_uni⁄
.
__d
)

	)

	@/usr/include/bits/netdb.h

18 #i‚de‡
_NETDB_H


26 
	s√ã¡


28 *
	mn_«me
;

29 **
	mn_Æü£s
;

30 
	mn_addπy≥
;

31 
uöt32_t
 
	mn_√t
;

	@/usr/include/bits/posix1_lim.h

24 #i‚def 
_BITS_POSIX1_LIM_H


25 
	#_BITS_POSIX1_LIM_H
 1

	)

31 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

34 
	#_POSIX_AIO_MAX
 1

	)

37 
	#_POSIX_ARG_MAX
 4096

	)

40 #ifde‡
__USE_XOPEN2K


41 
	#_POSIX_CHILD_MAX
 25

	)

43 
	#_POSIX_CHILD_MAX
 6

	)

47 
	#_POSIX_DELAYTIMER_MAX
 32

	)

51 
	#_POSIX_HOST_NAME_MAX
 255

	)

54 
	#_POSIX_LINK_MAX
 8

	)

57 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

60 
	#_POSIX_MAX_CANON
 255

	)

64 
	#_POSIX_MAX_INPUT
 255

	)

67 
	#_POSIX_MQ_OPEN_MAX
 8

	)

70 
	#_POSIX_MQ_PRIO_MAX
 32

	)

73 
	#_POSIX_NAME_MAX
 14

	)

76 #ifde‡
__USE_XOPEN2K


77 
	#_POSIX_NGROUPS_MAX
 8

	)

79 
	#_POSIX_NGROUPS_MAX
 0

	)

83 #ifde‡
__USE_XOPEN2K


84 
	#_POSIX_OPEN_MAX
 20

	)

86 
	#_POSIX_OPEN_MAX
 16

	)

89 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


92 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

96 
	#_POSIX_PATH_MAX
 256

	)

99 
	#_POSIX_PIPE_BUF
 512

	)

103 
	#_POSIX_RE_DUP_MAX
 255

	)

106 
	#_POSIX_RTSIG_MAX
 8

	)

109 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

112 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

115 
	#_POSIX_SIGQUEUE_MAX
 32

	)

118 
	#_POSIX_SSIZE_MAX
 32767

	)

121 
	#_POSIX_STREAM_MAX
 8

	)

124 
	#_POSIX_SYMLINK_MAX
 255

	)

128 
	#_POSIX_SYMLOOP_MAX
 8

	)

131 
	#_POSIX_TIMER_MAX
 32

	)

134 
	#_POSIX_TTY_NAME_MAX
 9

	)

137 #ifde‡
__USE_XOPEN2K


138 
	#_POSIX_TZNAME_MAX
 6

	)

140 
	#_POSIX_TZNAME_MAX
 3

	)

143 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


145 
	#_POSIX_QLIMIT
 1

	)

149 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

152 
	#_POSIX_UIO_MAXIOV
 16

	)

156 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

160 
	~<bôs/loˇl_lim.h
>

163 #i‚def 
SSIZE_MAX


164 
	#SSIZE_MAX
 
LONG_MAX


	)

171 #i‚def 
NGROUPS_MAX


172 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

22 #i‚def 
_BITS_POSIX2_LIM_H


23 
	#_BITS_POSIX2_LIM_H
 1

	)

27 
	#_POSIX2_BC_BASE_MAX
 99

	)

30 
	#_POSIX2_BC_DIM_MAX
 2048

	)

33 
	#_POSIX2_BC_SCALE_MAX
 99

	)

36 
	#_POSIX2_BC_STRING_MAX
 1000

	)

40 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

44 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

47 
	#_POSIX2_LINE_MAX
 2048

	)

51 
	#_POSIX2_RE_DUP_MAX
 255

	)

55 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

62 #i‚def 
BC_BASE_MAX


63 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

65 #i‚def 
BC_DIM_MAX


66 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

68 #i‚def 
BC_SCALE_MAX


69 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

71 #i‚def 
BC_STRING_MAX


72 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

74 #i‚def 
COLL_WEIGHTS_MAX


75 
	#COLL_WEIGHTS_MAX
 255

	)

77 #i‚def 
EXPR_NEST_MAX


78 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

80 #i‚def 
LINE_MAX


81 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

83 #i‚def 
CHARCLASS_NAME_MAX


84 
	#CHARCLASS_NAME_MAX
 2048

	)

88 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/posix_opt.h

19 #i‚def 
_BITS_POSIX_OPT_H


20 
	#_BITS_POSIX_OPT_H
 1

	)

23 
	#_POSIX_JOB_CONTROL
 1

	)

26 
	#_POSIX_SAVED_IDS
 1

	)

29 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

32 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

35 
	#_POSIX_FSYNC
 200809L

	)

38 
	#_POSIX_MAPPED_FILES
 200809L

	)

41 
	#_POSIX_MEMLOCK
 200809L

	)

44 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

47 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

50 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

54 
	#_POSIX_VDISABLE
 '\0'

	)

57 
	#_POSIX_NO_TRUNC
 1

	)

60 
	#_XOPEN_REALTIME
 1

	)

63 
	#_XOPEN_REALTIME_THREADS
 1

	)

66 
	#_XOPEN_SHM
 1

	)

69 
	#_POSIX_THREADS
 200809L

	)

72 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

73 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

76 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

79 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

82 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

85 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

89 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

91 #ifde‡
__USE_XOPEN2K8


93 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

96 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

100 
	#_POSIX_SEMAPHORES
 200809L

	)

103 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

106 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

107 
	#_POSIX_ASYNC_IO
 1

	)

109 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

111 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

114 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

117 
	#_LFS_LARGEFILE
 1

	)

118 
	#_LFS64_LARGEFILE
 1

	)

119 
	#_LFS64_STDIO
 1

	)

122 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

125 
	#_POSIX_CPUTIME
 0

	)

128 
	#_POSIX_THREAD_CPUTIME
 0

	)

131 
	#_POSIX_REGEXP
 1

	)

134 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

137 
	#_POSIX_SHELL
 1

	)

140 
	#_POSIX_TIMEOUTS
 200809L

	)

143 
	#_POSIX_SPIN_LOCKS
 200809L

	)

146 
	#_POSIX_SPAWN
 200809L

	)

149 
	#_POSIX_TIMERS
 200809L

	)

152 
	#_POSIX_BARRIERS
 200809L

	)

155 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

158 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

161 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

164 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

167 
	#_POSIX_ADVISORY_INFO
 200809L

	)

170 
	#_POSIX_IPV6
 200809L

	)

173 
	#_POSIX_RAW_SOCKETS
 200809L

	)

176 
	#_POSIX2_CHAR_TERM
 200809L

	)

179 
	#_POSIX_SPORADIC_SERVER
 -1

	)

180 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

183 
	#_POSIX_TRACE
 -1

	)

184 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

185 
	#_POSIX_TRACE_INHERIT
 -1

	)

186 
	#_POSIX_TRACE_LOG
 -1

	)

189 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

18 #i‚de‡
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±hªad_t
;

63 
	u±hªad_©å_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__Æign
;

68 #i‚de‡
__have_±hªad_©å_t


69 
±hªad_©å_t
 
	t±hªad_©å_t
;

70 
	#__have_±hªad_©å_t
 1

	)

74 #ifde‡
__x86_64__


75 
	s__±hªad_öã∫Æ_li°


77 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

78 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

79 } 
	t__±hªad_li°_t
;

81 
	s__±hªad_öã∫Æ_¶i°


83 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

84 } 
	t__±hªad_¶i°_t
;

92 
	s__±hªad_muãx_s


94 
	m__lock
;

95 
	m__cou¡
;

96 
	m__ow√r
;

97 #ifde‡
__x86_64__


98 
	m__nu£rs
;

102 
	m__köd
;

103 #ifde‡
__x86_64__


104 
	m__•ös
;

105 
	m__ñisi⁄
;

106 
__±hªad_li°_t
 
	m__li°
;

107 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

109 
	#__PTHREAD_SPINS
 0, 0

	)

111 
	m__nu£rs
;

112 
__exãnsi⁄__
 union

116 
	m__e•ös
;

117 
	m__ñisi⁄
;

118 
	#__•ös
 
__ñisi⁄_d©a
.
__e•ös


	)

119 
	#__ñisi⁄
 
__ñisi⁄_d©a
.
__ñisi⁄


	)

120 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

121 } 
	m__ñisi⁄_d©a
;

122 
__±hªad_¶i°_t
 
	m__li°
;

125 } 
	m__d©a
;

126 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

127 
	m__Æign
;

128 } 
	t±hªad_muãx_t
;

132 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

133 
	m__Æign
;

134 } 
	t±hªad_muãx©å_t
;

143 
	m__lock
;

144 
	m__fuãx
;

145 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

146 
__exãnsi⁄__
 
	m__wakeup_£q
;

147 
__exãnsi⁄__
 
	m__wokí_£q
;

148 *
	m__muãx
;

149 
	m__nwaôîs
;

150 
	m__brﬂdˇ°_£q
;

151 } 
	m__d©a
;

152 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

153 
__exãnsi⁄__
 
	m__Æign
;

154 } 
	t±hªad_c⁄d_t
;

158 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

159 
	m__Æign
;

160 } 
	t±hªad_c⁄d©å_t
;

164 
	t±hªad_key_t
;

168 
	t±hªad_⁄˚_t
;

171 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


176 #ifde‡
__x86_64__


179 
	m__lock
;

180 
	m__ƒ_ªadîs
;

181 
	m__ªadîs_wakeup
;

182 
	m__wrôî_wakeup
;

183 
	m__ƒ_ªadîs_queued
;

184 
	m__ƒ_wrôîs_queued
;

185 
	m__wrôî
;

186 
	m__sh¨ed
;

187 sig√d 
	m__rwñisi⁄
;

188 #ifde‡ 
__ILP32__


189 
	m__∑d1
[3];

190 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0 }

	)

192 
	m__∑d1
[7];

193 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0, 0, 0, 0, 0 }

	)

195 
	m__∑d2
;

198 
	m__Êags
;

199 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

200 } 
	m__d©a
;

204 
	m__lock
;

205 
	m__ƒ_ªadîs
;

206 
	m__ªadîs_wakeup
;

207 
	m__wrôî_wakeup
;

208 
	m__ƒ_ªadîs_queued
;

209 
	m__ƒ_wrôîs_queued
;

212 
	m__Êags
;

213 
	m__sh¨ed
;

214 sig√d 
	m__rwñisi⁄
;

215 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0

	)

216 
	m__∑d2
;

217 
	m__wrôî
;

218 } 
	m__d©a
;

220 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

221 
	m__Æign
;

222 } 
	t±hªad_rwlock_t
;

226 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

227 
	m__Æign
;

228 } 
	t±hªad_rwlock©å_t
;

232 #ifde‡
__USE_XOPEN2K


234 vﬁ©ûê
	t±hªad_•ölock_t
;

241 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

242 
	m__Æign
;

243 } 
	t±hªad_b¨rõr_t
;

247 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

248 
	m__Æign
;

249 } 
	t±hªad_b¨rõøâr_t
;

253 #i‚de‡
__x86_64__


255 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/setjmp.h

19 #i‚de‡
_BITS_SETJMP_H


20 
	#_BITS_SETJMP_H
 1

	)

22 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


26 
	~<bôs/w‹dsize.h
>

28 #i‚de‡
_ASM


30 #i‡
__WORDSIZE
 == 64

31 
	t__jmp_buf
[8];

32 #ñi‡
deföed
 
__x86_64__


33 
__exãnsi⁄__
 
	t__jmp_buf
[8];

35 
	t__jmp_buf
[6];

	@/usr/include/bits/setjmp2.h

19 #i‚de‡
_SETJMP_H


24 #ifde‡
__REDIRECT_NTH


25 
__REDIRECT_NTHNL
 (
l⁄gjmp
,

26 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

27 
__l⁄gjmp_chk
Ë
__©åibuã__
 ((
__n‹ëu∫__
));

28 
__REDIRECT_NTHNL
 (
_l⁄gjmp
,

29 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

30 
__l⁄gjmp_chk
Ë
__©åibuã__
 ((
__n‹ëu∫__
));

31 
__REDIRECT_NTHNL
 (
sigl⁄gjmp
,

32 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

33 
__l⁄gjmp_chk
Ë
__©åibuã__
 ((
__n‹ëu∫__
));

35 
__l⁄gjmp_chk
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

36 
__THROWNL
 
__©åibuã__
 ((
__n‹ëu∫__
));

37 
	#l⁄gjmp
 
__l⁄gjmp_chk


	)

38 
	#_l⁄gjmp
 
__l⁄gjmp_chk


	)

39 
	#sigl⁄gjmp
 
__l⁄gjmp_chk


	)

	@/usr/include/bits/sigaction.h

19 #i‚de‡
_SIGNAL_H


24 
	ssiga˘i⁄


27 #ifde‡
__USE_POSIX199309


31 
__sigh™dÀr_t
 
	mß_h™dÀr
;

33 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

35 
	m__siga˘i⁄_h™dÀr
;

36 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

37 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

39 
__sigh™dÀr_t
 
	mß_h™dÀr
;

43 
__sig£t_t
 
	mß_mask
;

46 
	mß_Êags
;

49 (*
	mß_ª°‹î
) ();

53 
	#SA_NOCLDSTOP
 1

	)

54 
	#SA_NOCLDWAIT
 2

	)

55 
	#SA_SIGINFO
 4

	)

57 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


58 
	#SA_ONSTACK
 0x08000000

	)

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


61 
	#SA_RESTART
 0x10000000

	)

62 
	#SA_NODEFER
 0x40000000

	)

64 
	#SA_RESETHAND
 0x80000000

	)

66 #ifde‡
__USE_MISC


67 
	#SA_INTERRUPT
 0x20000000

	)

70 
	#SA_NOMASK
 
SA_NODEFER


	)

71 
	#SA_ONESHOT
 
SA_RESETHAND


	)

72 
	#SA_STACK
 
SA_ONSTACK


	)

76 
	#SIG_BLOCK
 0

	)

77 
	#SIG_UNBLOCK
 1

	)

78 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

18 #i‚de‡
_BITS_SIGCONTEXT_H


19 
	#_BITS_SIGCONTEXT_H
 1

	)

21 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


25 
	#FP_XSTATE_MAGIC1
 0x46505853U

	)

26 
	#FP_XSTATE_MAGIC2
 0x46505845U

	)

27 
	#FP_XSTATE_MAGIC2_SIZE
 (
FP_XSTATE_MAGIC2
)

	)

29 
	s_Âx_sw_byãs


31 
__uöt32_t
 
	mmagic1
;

32 
__uöt32_t
 
	mexãnded_size
;

33 
__uöt64_t
 
	mx°©e_bv
;

34 
__uöt32_t
 
	mx°©e_size
;

35 
__uöt32_t
 
	m∑ddög
[7];

38 
	s_Âªg


40 
	msignifiˇnd
[4];

41 
	mexp⁄ít
;

44 
	s_Âxªg


46 
	msignifiˇnd
[4];

47 
	mexp⁄ít
;

48 
	m∑ddög
[3];

51 
	s_xmmªg


53 
__uöt32_t
 
	mñemít
[4];

58 #i‚de‡
__x86_64__


60 
	s_Â°©e


63 
__uöt32_t
 
	mcw
;

64 
__uöt32_t
 
	msw
;

65 
__uöt32_t
 
	mèg
;

66 
__uöt32_t
 
	mùoff
;

67 
__uöt32_t
 
	mcs£l
;

68 
__uöt32_t
 
	md©aoff
;

69 
__uöt32_t
 
	md©a£l
;

70 
_Âªg
 
	m_°
[8];

71 
	m°©us
;

72 
	mmagic
;

75 
__uöt32_t
 
	m_fx§_ív
[6];

76 
__uöt32_t
 
	mmxc§
;

77 
__uöt32_t
 
	mª£rved
;

78 
_Âxªg
 
	m_fx§_°
[8];

79 
_xmmªg
 
	m_xmm
[8];

80 
__uöt32_t
 
	m∑ddög
[56];

83 #i‚de‡
sigc⁄ãxt_°ru˘


88 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

91 
	#X86_FXSR_MAGIC
 0x0000

	)

93 
	ssigc⁄ãxt


95 
	mgs
, 
	m__gsh
;

96 
	mfs
, 
	m__fsh
;

97 
	mes
, 
	m__esh
;

98 
	mds
, 
	m__dsh
;

99 
	medi
;

100 
	mesi
;

101 
	mebp
;

102 
	me•
;

103 
	mebx
;

104 
	medx
;

105 
	mecx
;

106 
	móx
;

107 
	må≠no
;

108 
	mîr
;

109 
	meù
;

110 
	mcs
, 
	m__csh
;

111 
	meÊags
;

112 
	me•_©_sig«l
;

113 
	mss
, 
	m__ssh
;

114 
_Â°©e
 * 
	mÂ°©e
;

115 
	mﬁdmask
;

116 
	m¸2
;

121 
	s_Â°©e


124 
__uöt16_t
 
	mcwd
;

125 
__uöt16_t
 
	mswd
;

126 
__uöt16_t
 
	m·w
;

127 
__uöt16_t
 
	mf›
;

128 
__uöt64_t
 
	mrù
;

129 
__uöt64_t
 
	mrdp
;

130 
__uöt32_t
 
	mmxc§
;

131 
__uöt32_t
 
	mmx¸_mask
;

132 
_Âxªg
 
	m_°
[8];

133 
_xmmªg
 
	m_xmm
[16];

134 
__uöt32_t
 
	m∑ddög
[24];

137 
	ssigc⁄ãxt


139 
__uöt64_t
 
	mr8
;

140 
__uöt64_t
 
	mr9
;

141 
__uöt64_t
 
	mr10
;

142 
__uöt64_t
 
	mr11
;

143 
__uöt64_t
 
	mr12
;

144 
__uöt64_t
 
	mr13
;

145 
__uöt64_t
 
	mr14
;

146 
__uöt64_t
 
	mr15
;

147 
__uöt64_t
 
	mrdi
;

148 
__uöt64_t
 
	mrsi
;

149 
__uöt64_t
 
	mrbp
;

150 
__uöt64_t
 
	mrbx
;

151 
__uöt64_t
 
	mrdx
;

152 
__uöt64_t
 
	møx
;

153 
__uöt64_t
 
	mrcx
;

154 
__uöt64_t
 
	mr•
;

155 
__uöt64_t
 
	mrù
;

156 
__uöt64_t
 
	meÊags
;

157 
	mcs
;

158 
	mgs
;

159 
	mfs
;

160 
	m__∑d0
;

161 
__uöt64_t
 
	mîr
;

162 
__uöt64_t
 
	må≠no
;

163 
__uöt64_t
 
	mﬁdmask
;

164 
__uöt64_t
 
	m¸2
;

165 
__exãnsi⁄__
 union

167 
_Â°©e
 * 
	mÂ°©e
;

168 
__uöt64_t
 
	m__Â°©e_w‹d
;

170 
__uöt64_t
 
	m__ª£rved1
 [8];

175 
	s_xßve_hdr


177 
__uöt64_t
 
	mx°©e_bv
;

178 
__uöt64_t
 
	mª£rved1
[2];

179 
__uöt64_t
 
	mª£rved2
[5];

182 
	s_ymmh_°©e


184 
__uöt32_t
 
	mymmh_•a˚
[64];

187 
	s_x°©e


189 
_Â°©e
 
	mÂ°©e
;

190 
_xßve_hdr
 
	mx°©e_hdr
;

191 
_ymmh_°©e
 
	mymmh
;

	@/usr/include/bits/siginfo.h

19 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

20 && !
deföed
 
	g__√ed_sigevít_t


24 
	~<bôs/w‹dsize.h
>

26 #i‡(!
deföed
 
__have_sigvÆ_t
 \

27 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

28 || 
deföed
 
	g__√ed_sigevít_t
))

29 
	#__have_sigvÆ_t
 1

	)

32 
	usigvÆ


34 
	msivÆ_öt
;

35 *
	msivÆ_±r
;

36 } 
	tsigvÆ_t
;

39 #i‡(!
deföed
 
__have_sigöfo_t
 \

40 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

41 
	#__have_sigöfo_t
 1

	)

43 
	#__SI_MAX_SIZE
 128

	)

44 #i‡
__WORDSIZE
 == 64

45 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

47 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

50 #i‡
deföed
 
__x86_64__
 && 
__WORDSIZE
 == 32

55 
__˛ock_t
 
	t__©åibuã__
 ((
	t__Æig√d__
 (4))Ë
	t__sigchld_˛ock_t
;

56 
	#__SI_ALIGNMENT
 
	`__©åibuã__
 ((
	`__Æig√d__
 (8)))

	)

58 
__˛ock_t
 
	t__sigchld_˛ock_t
;

59 
	#__SI_ALIGNMENT


	)

64 
si_signo
;

65 
si_î∫o
;

67 
si_code
;

71 
_∑d
[
__SI_PAD_SIZE
];

76 
__pid_t
 
si_pid
;

77 
__uid_t
 
si_uid
;

78 } 
_kûl
;

83 
si_tid
;

84 
si_ovîrun
;

85 
sigvÆ_t
 
si_sigvÆ
;

86 } 
_timî
;

91 
__pid_t
 
si_pid
;

92 
__uid_t
 
si_uid
;

93 
sigvÆ_t
 
si_sigvÆ
;

94 } 
_π
;

99 
__pid_t
 
si_pid
;

100 
__uid_t
 
si_uid
;

101 
si_°©us
;

102 
__sigchld_˛ock_t
 
si_utime
;

103 
__sigchld_˛ock_t
 
si_°ime
;

104 } 
_sigchld
;

109 *
si_addr
;

110 
si_addr_lsb
;

113 *
_lowî
;

114 *
_uµî
;

115 } 
si_addr_bnd
;

116 } 
_sigÁu…
;

121 
si_b™d
;

122 
si_fd
;

123 } 
_sigpﬁl
;

128 *
_ˇŒ_addr
;

129 
_sysˇŒ
;

130 
_¨ch
;

131 } 
_sigsys
;

132 } 
_sifõlds
;

133 } 
	tsigöfo_t
 
	t__SI_ALIGNMENT
;

137 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

138 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

139 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

140 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

141 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

142 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

143 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

144 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

145 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

146 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

147 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

148 
	#si_addr_lsb
 
_sifõlds
.
_sigÁu…
.
si_addr_lsb


	)

149 
	#si_lowî
 
_sifõlds
.
_sigÁu…
.
si_addr_bnd
.
_lowî


	)

150 
	#si_uµî
 
_sifõlds
.
_sigÁu…
.
si_addr_bnd
.
_uµî


	)

151 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

152 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

153 
	#si_ˇŒ_addr
 
_sifõlds
.
_sigsys
.
_ˇŒ_addr


	)

154 
	#si_sysˇŒ
 
_sifõlds
.
_sigsys
.
_sysˇŒ


	)

155 
	#si_¨ch
 
_sifõlds
.
_sigsys
.
_¨ch


	)

162 
SI_ASYNCNL
 = -60,

163 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

164 
SI_TKILL
 = -6,

165 
	#SI_TKILL
 
SI_TKILL


	)

166 
SI_SIGIO
,

167 
	#SI_SIGIO
 
SI_SIGIO


	)

168 
SI_ASYNCIO
,

169 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

170 
SI_MESGQ
,

171 
	#SI_MESGQ
 
SI_MESGQ


	)

172 
SI_TIMER
,

173 
	#SI_TIMER
 
SI_TIMER


	)

174 
SI_QUEUE
,

175 
	#SI_QUEUE
 
SI_QUEUE


	)

176 
SI_USER
,

177 
	#SI_USER
 
SI_USER


	)

178 
SI_KERNEL
 = 0x80

179 
	#SI_KERNEL
 
SI_KERNEL


	)

183 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


187 
ILL_ILLOPC
 = 1,

188 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

189 
ILL_ILLOPN
,

190 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

191 
ILL_ILLADR
,

192 
	#ILL_ILLADR
 
ILL_ILLADR


	)

193 
ILL_ILLTRP
,

194 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

195 
ILL_PRVOPC
,

196 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

197 
ILL_PRVREG
,

198 
	#ILL_PRVREG
 
ILL_PRVREG


	)

199 
ILL_COPROC
,

200 
	#ILL_COPROC
 
ILL_COPROC


	)

201 
ILL_BADSTK


202 
	#ILL_BADSTK
 
ILL_BADSTK


	)

208 
FPE_INTDIV
 = 1,

209 
	#FPE_INTDIV
 
FPE_INTDIV


	)

210 
FPE_INTOVF
,

211 
	#FPE_INTOVF
 
FPE_INTOVF


	)

212 
FPE_FLTDIV
,

213 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

214 
FPE_FLTOVF
,

215 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

216 
FPE_FLTUND
,

217 
	#FPE_FLTUND
 
FPE_FLTUND


	)

218 
FPE_FLTRES
,

219 
	#FPE_FLTRES
 
FPE_FLTRES


	)

220 
FPE_FLTINV
,

221 
	#FPE_FLTINV
 
FPE_FLTINV


	)

222 
FPE_FLTSUB


223 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

229 
SEGV_MAPERR
 = 1,

230 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

231 
SEGV_ACCERR


232 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

238 
BUS_ADRALN
 = 1,

239 
	#BUS_ADRALN
 
BUS_ADRALN


	)

240 
BUS_ADRERR
,

241 
	#BUS_ADRERR
 
BUS_ADRERR


	)

242 
BUS_OBJERR
,

243 
	#BUS_OBJERR
 
BUS_OBJERR


	)

244 
BUS_MCEERR_AR
,

245 
	#BUS_MCEERR_AR
 
BUS_MCEERR_AR


	)

246 
BUS_MCEERR_AO


247 
	#BUS_MCEERR_AO
 
BUS_MCEERR_AO


	)

251 #ifde‡
__USE_XOPEN_EXTENDED


255 
TRAP_BRKPT
 = 1,

256 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

257 
TRAP_TRACE


258 
	#TRAP_TRACE
 
TRAP_TRACE


	)

262 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


266 
CLD_EXITED
 = 1,

267 
	#CLD_EXITED
 
CLD_EXITED


	)

268 
CLD_KILLED
,

269 
	#CLD_KILLED
 
CLD_KILLED


	)

270 
CLD_DUMPED
,

271 
	#CLD_DUMPED
 
CLD_DUMPED


	)

272 
CLD_TRAPPED
,

273 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

274 
CLD_STOPPED
,

275 
	#CLD_STOPPED
 
CLD_STOPPED


	)

276 
CLD_CONTINUED


277 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

283 
POLL_IN
 = 1,

284 
	#POLL_IN
 
POLL_IN


	)

285 
POLL_OUT
,

286 
	#POLL_OUT
 
POLL_OUT


	)

287 
POLL_MSG
,

288 
	#POLL_MSG
 
POLL_MSG


	)

289 
POLL_ERR
,

290 
	#POLL_ERR
 
POLL_ERR


	)

291 
POLL_PRI
,

292 
	#POLL_PRI
 
POLL_PRI


	)

293 
POLL_HUP


294 
	#POLL_HUP
 
POLL_HUP


	)

298 #unde‡
__√ed_sigöfo_t


302 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

303 && !
deföed
 
__have_sigevít_t


304 
	#__have_sigevít_t
 1

	)

307 
	#__SIGEV_MAX_SIZE
 64

	)

308 #i‡
__WORDSIZE
 == 64

309 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

311 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

315 #i‚de‡
__have_±hªad_©å_t


316 
±hªad_©å_t
 
	t±hªad_©å_t
;

317 
	#__have_±hªad_©å_t
 1

	)

320 
	ssigevít


322 
sigvÆ_t
 
sigev_vÆue
;

323 
sigev_signo
;

324 
sigev_nŸify
;

328 
_∑d
[
__SIGEV_PAD_SIZE
];

332 
__pid_t
 
_tid
;

336 (*
_fun˘i⁄
Ë(
sigvÆ_t
);

337 
±hªad_©å_t
 *
_©åibuã
;

338 } 
_sigev_thªad
;

339 } 
_sigev_un
;

340 } 
	tsigevít_t
;

343 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

344 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

349 
SIGEV_SIGNAL
 = 0,

350 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

351 
SIGEV_NONE
,

352 
	#SIGEV_NONE
 
SIGEV_NONE


	)

353 
SIGEV_THREAD
,

354 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

356 
SIGEV_THREAD_ID
 = 4

357 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

19 #ifdef 
_SIGNAL_H


22 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

23 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

24 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

26 #ifde‡
__USE_UNIX98


27 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

32 
	#SIGHUP
 1

	)

33 
	#SIGINT
 2

	)

34 
	#SIGQUIT
 3

	)

35 
	#SIGILL
 4

	)

36 
	#SIGTRAP
 5

	)

37 
	#SIGABRT
 6

	)

38 
	#SIGIOT
 6

	)

39 
	#SIGBUS
 7

	)

40 
	#SIGFPE
 8

	)

41 
	#SIGKILL
 9

	)

42 
	#SIGUSR1
 10

	)

43 
	#SIGSEGV
 11

	)

44 
	#SIGUSR2
 12

	)

45 
	#SIGPIPE
 13

	)

46 
	#SIGALRM
 14

	)

47 
	#SIGTERM
 15

	)

48 
	#SIGSTKFLT
 16

	)

49 
	#SIGCLD
 
SIGCHLD


	)

50 
	#SIGCHLD
 17

	)

51 
	#SIGCONT
 18

	)

52 
	#SIGSTOP
 19

	)

53 
	#SIGTSTP
 20

	)

54 
	#SIGTTIN
 21

	)

55 
	#SIGTTOU
 22

	)

56 
	#SIGURG
 23

	)

57 
	#SIGXCPU
 24

	)

58 
	#SIGXFSZ
 25

	)

59 
	#SIGVTALRM
 26

	)

60 
	#SIGPROF
 27

	)

61 
	#SIGWINCH
 28

	)

62 
	#SIGPOLL
 
SIGIO


	)

63 
	#SIGIO
 29

	)

64 
	#SIGPWR
 30

	)

65 
	#SIGSYS
 31

	)

66 
	#SIGUNUSED
 31

	)

68 
	#_NSIG
 65

	)

71 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

72 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

76 
	#__SIGRTMIN
 32

	)

77 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

19 #i‚def 
_SIGSET_H_ty≥s


20 
	#_SIGSET_H_ty≥s
 1

	)

22 
	t__sig_©omic_t
;

26 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

29 
	m__vÆ
[
_SIGSET_NWORDS
];

30 } 
	t__sig£t_t
;

41 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


42 
	#_SIGSET_H_‚s
 1

	)

44 #i‚de‡
_EXTERN_INLINE


45 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

49 
	#__sigmask
(
sig
) \

50 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

53 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

55 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

56 
	#__sigem±y£t
(
£t
) \

57 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

58 
sig£t_t
 *
__£t
 = (
£t
); \

59 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

60 0; }))

	)

61 
	#__sigfûl£t
(
£t
) \

62 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

63 
sig£t_t
 *
__£t
 = (
£t
); \

64 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

65 0; }))

	)

67 #ifde‡
__USE_GNU


71 
	#__sigi£m±y£t
(
£t
) \

72 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

73 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

74 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

75 !
__ªt
 && --
__˙t
 >= 0) \

76 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

77 
__ªt
 =0; }))

	)

78 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

79 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

80 
sig£t_t
 *
__de°
 = (
de°
); \

81 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

82 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

83 --
__˙t
 >= 0) \

84 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

85 & 
__right
->
__vÆ
[
__˙t
]); \

86 0; }))

	)

87 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

88 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

89 
sig£t_t
 *
__de°
 = (
de°
); \

90 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

91 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

92 --
__˙t
 >= 0) \

93 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

94 | 
__right
->
__vÆ
[
__˙t
]); \

95 0; }))

	)

102 
__sigismembî
 (c⁄° 
__sig£t_t
 *, );

103 
__sigadd£t
 (
__sig£t_t
 *, );

104 
__sigdñ£t
 (
__sig£t_t
 *, );

106 #ifde‡
__USE_EXTERN_INLINES


107 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

108 
_EXTERN_INLINE
 \

109 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

111 
__mask
 = 
	`__sigmask
 (
__sig
); \

112 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

113  
BODY
; \

114 }

	)

116 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
) ? 1 : 0, const)

117 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

118 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

120 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

19 #i‚de‡
_SIGNAL_H


25 
	ssig°ack


27 *
	mss_•
;

28 
	mss_⁄°ack
;

35 
	mSS_ONSTACK
 = 1,

36 
	#SS_ONSTACK
 
SS_ONSTACK


	)

37 
	mSS_DISABLE


38 
	#SS_DISABLE
 
SS_DISABLE


	)

42 
	#MINSIGSTKSZ
 2048

	)

45 
	#SIGSTKSZ
 8192

	)

49 
	ssigÆt°ack


51 *
	mss_•
;

52 
	mss_Êags
;

53 
size_t
 
	mss_size
;

54 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

19 #i‚de‡
_BITS_SIGTHREAD_H


20 
	#_BITS_SIGTHREAD_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


30 
	$±hªad_sigmask
 (
__how
,

31 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

32 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

35 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

37 #ifde‡
__USE_GNU


39 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

40 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/stat.h

18 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_STAT_H


23 
	#_BITS_STAT_H
 1

	)

26 #i‚de‡
__x86_64__


27 
	#_STAT_VER_LINUX_OLD
 1

	)

28 
	#_STAT_VER_KERNEL
 1

	)

29 
	#_STAT_VER_SVR4
 2

	)

30 
	#_STAT_VER_LINUX
 3

	)

33 
	#_MKNOD_VER_LINUX
 1

	)

34 
	#_MKNOD_VER_SVR4
 2

	)

35 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

37 
	#_STAT_VER_KERNEL
 0

	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‚de‡
__x86_64__


50 
	m__∑d1
;

52 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‚de‡
__x86_64__


58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #ifde‡
__x86_64__


67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‚de‡
__x86_64__


71 
	m__∑d2
;

73 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #ifde‡
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

105 #ifde‡
__x86_64__


106 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__glibc_ª£rved4
;

110 
	m__glibc_ª£rved5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #ifde‡
__x86_64__


123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #ifde‡
__x86_64__


135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #ifde‡
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

156 
__time_t
 
	m°_©ime
;

157 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

163 #ifde‡
__x86_64__


164 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifde‡
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
__BEGIN_NAMESPACE_STD


24 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

25 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

26 
	$__LDBL_REDIR_DECL
 (
•rötf
)

27 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

28 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

29 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

30 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

31 && !
deföed
 
__REDIRECT
 \

32 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

33 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

34 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

37 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

41 
__END_NAMESPACE_STD


43 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


44 
__BEGIN_NAMESPACE_C99


45 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

46 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

47 
__END_NAMESPACE_C99


50 #ifdef 
__USE_ISOC99


51 
__BEGIN_NAMESPACE_C99


52 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

53 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

54 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

55 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

58 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

62 
__END_NAMESPACE_C99


65 #ifde‡
__USE_XOPEN2K8


66 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

67 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

70 #ifde‡
__USE_GNU


71 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

73 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

74 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

75 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

78 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


79 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

80 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

81 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


82 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

85 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

88 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

89 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

90 #ifde‡
__USE_XOPEN2K8


91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

94 #ifde‡
__USE_GNU


95 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

96 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

97 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

98 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_STDIO_H


23 #i‚de‡
__exã∫_ölöe


24 
	#__STDIO_INLINE
 
ölöe


	)

26 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

30 #ifde‡
__USE_EXTERN_INLINES


33 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

35 
__STDIO_INLINE
 

36 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

38  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

39 
	}
}

43 
__STDIO_INLINE
 

44 
	$gëch¨
 ()

46  
	`_IO_gëc
 (
°dö
);

47 
	}
}

50 #ifde‡
__USE_MISC


52 
__STDIO_INLINE
 

53 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

55  
	`_IO_gëc_u∆ocked
 (
__Â
);

56 
	}
}

60 #ifde‡
__USE_POSIX


62 
__STDIO_INLINE
 

63 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

65  
	`_IO_gëc_u∆ocked
 (
__Â
);

66 
	}
}

69 
__STDIO_INLINE
 

70 
	$gëch¨_u∆ocked
 ()

72  
	`_IO_gëc_u∆ocked
 (
°dö
);

73 
	}
}

78 
__STDIO_INLINE
 

79 
	$putch¨
 (
__c
)

81  
	`_IO_putc
 (
__c
, 
°dout
);

82 
	}
}

85 #ifde‡
__USE_MISC


87 
__STDIO_INLINE
 

88 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

90  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

91 
	}
}

95 #ifde‡
__USE_POSIX


97 
__STDIO_INLINE
 

98 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

100  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

101 
	}
}

104 
__STDIO_INLINE
 

105 
	$putch¨_u∆ocked
 (
__c
)

107  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

108 
	}
}

112 #ifdef 
__USE_GNU


114 
__STDIO_INLINE
 
_IO_ssize_t


115 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

117  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

118 
	}
}

122 #ifde‡
__USE_MISC


124 
__STDIO_INLINE
 

125 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

127  
	`_IO_„of_u∆ocked
 (
__°ªam
);

128 
	}
}

131 
__STDIO_INLINE
 

132 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

134  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

135 
	}
}

141 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

142 && !
deföed
 
	g__˝lu•lus


144 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

145 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

146 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

147 && (
size_t
Ë(
size
) != 0) \

148 ? ({ *
__±r
 = (*Ë(
±r
); \

149 
FILE
 *
__°ªam
 = (
°ªam
); \

150 
size_t
 
__˙t
; \

151 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

152 
__˙t
 > 0; --__cnt) \

154 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

155 i‡(
__c
 =
EOF
) \

157 *
__±r
++ = 
__c
; \

159 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

160 / (
size_t
Ë(
size
); }) \

161 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

162 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

164 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

165 (Ë(
n
), (
size_t
) 0) \

166 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

168 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

169 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

170 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

171 && (
size_t
Ë(
size
) != 0) \

172 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

173 
FILE
 *
__°ªam
 = (
°ªam
); \

174 
size_t
 
__˙t
; \

175 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

176 
__˙t
 > 0; --__cnt) \

177 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

179 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

180 / (
size_t
Ë(
size
); }) \

181 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

182 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

184 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

185 (Ë(
n
), (
size_t
) 0) \

186 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

190 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #i‚de‡
_STDIO_H


23 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

24 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

25 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

26 c⁄° *
__ª°ri˘
 
__f‹m©
,

27 
_G_va_li°
 
__≠
Ë
__THROW
;

29 #ifde‡
__va_¨g_∑ck


30 
__f‹tify_fun˘i⁄
 

31 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

33  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

34 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

35 
	}
}

36 #ñi‡!
deföed
 
__˝lu•lus


37 
	#•rötf
(
°r
, ...) \

38 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

39 
__VA_ARGS__
)

	)

42 
__f‹tify_fun˘i⁄
 

43 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

44 
_G_va_li°
 
__≠
))

46  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

47 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

48 
	}
}

50 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


52 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

53 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

54 ...Ë
__THROW
;

55 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

56 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

57 
_G_va_li°
 
__≠
Ë
__THROW
;

59 #ifde‡
__va_¨g_∑ck


60 
__f‹tify_fun˘i⁄
 

61 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

62 c⁄° *
__ª°ri˘
 
__fmt
, ...))

64  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

65 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

66 
	}
}

67 #ñi‡!
deföed
 
__˝lu•lus


68 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

69 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

70 
__VA_ARGS__
)

	)

73 
__f‹tify_fun˘i⁄
 

74 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

75 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

77  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

78 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

79 
	}
}

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

85 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

86 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

87 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

88 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

90 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

91 
_G_va_li°
 
__≠
);

93 #ifde‡
__va_¨g_∑ck


94 
__f‹tify_fun˘i⁄
 

95 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

97  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

98 
	`__va_¨g_∑ck
 ());

99 
	}
}

101 
__f‹tify_fun˘i⁄
 

102 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

104  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

105 
	}
}

106 #ñi‡!
deföed
 
__˝lu•lus


107 
	#¥ötf
(...) \

108 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

109 
	#Ârötf
(
°ªam
, ...) \

110 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

113 
__f‹tify_fun˘i⁄
 

114 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

116 #ifde‡
__USE_EXTERN_INLINES


117  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

119  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

121 
	}
}

123 
__f‹tify_fun˘i⁄
 

124 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

125 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

127  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

128 
	}
}

130 #ifde‡
__USE_XOPEN2K8


131 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

132 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

133 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

134 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

135 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

137 #ifde‡
__va_¨g_∑ck


138 
__f‹tify_fun˘i⁄
 

139 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

141  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

142 
	`__va_¨g_∑ck
 ());

143 
	}
}

144 #ñi‡!
deföed
 
__˝lu•lus


145 
	#d¥ötf
(
fd
, ...) \

146 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

149 
__f‹tify_fun˘i⁄
 

150 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

152  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

153 
	}
}

156 #ifde‡
__USE_GNU


158 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

159 c⁄° *
__ª°ri˘
 
__fmt
, ...)

160 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

161 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

162 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

163 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

164 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

165 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

167 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

168 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

169 
__Êag
,

170 c⁄° *
__ª°ri˘
 
__f‹m©
,

171 
_G_va_li°
 
__¨gs
)

172 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

174 #ifde‡
__va_¨g_∑ck


175 
__f‹tify_fun˘i⁄
 

176 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

178  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

179 
	`__va_¨g_∑ck
 ());

180 
	}
}

182 
__f‹tify_fun˘i⁄
 

183 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

186  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

187 
	`__va_¨g_∑ck
 ());

188 
	}
}

190 
__f‹tify_fun˘i⁄
 

191 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

192 c⁄° *
__ª°ri˘
 
__fmt
, ...))

194  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

195 
	`__va_¨g_∑ck
 ());

196 
	}
}

197 #ñi‡!
deföed
 
__˝lu•lus


198 
	#a•rötf
(
±r
, ...) \

199 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

200 
	#__a•rötf
(
±r
, ...) \

201 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

202 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

203 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

206 
__f‹tify_fun˘i⁄
 

207 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

208 
_G_va_li°
 
__≠
))

210  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

211 
	}
}

213 
__f‹tify_fun˘i⁄
 

214 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

215 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

217  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

218 
__≠
);

219 
	}
}

225 #i‡!
deföed
 
__USE_ISOC11
 \

226 || (
deföed
 
	g__˝lu•lus
 && __˝lu•lu†<201103L && !deföed 
__USE_GNU
)

227 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

228 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

229 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

232 
__f‹tify_fun˘i⁄
 
__wur
 *

233 
	$gës
 (*
__°r
)

235 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

236  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

237  
	`__gës_w¨n
 (
__°r
);

238 
	}
}

241 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

242 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

243 *
	`__REDIRECT
 (
__fgës_Æüs
,

244 (*
__ª°ri˘
 
__s
, 
__n
,

245 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

246 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

247 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

249 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

252 
__f‹tify_fun˘i⁄
 
__wur
 *

253 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

255 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

257 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

258  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

260 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

261  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

263  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

264 
	}
}

266 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

269 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

270 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

271 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

272 
‰ód
Ë
__wur
;

273 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

274 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

275 
size_t
 
__size
, size_à
__n
,

276 
FILE
 *
__ª°ri˘
 
__°ªam
),

277 
__‰ód_chk
)

278 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

281 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


282 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

283 
FILE
 *
__ª°ri˘
 
__°ªam
)

285 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

287 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

288 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

289 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

290  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

292 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

293  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

295  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

296 
	}
}

298 #ifde‡
__USE_GNU


299 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

300 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

302 (*
__ª°ri˘
 
__s
, 
__n
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

304 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

305 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

306 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

307 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

310 
__f‹tify_fun˘i⁄
 
__wur
 *

311 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

313 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

315 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

316  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

318 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

319  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

321  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

322 
	}
}

325 #ifde‡
__USE_MISC


326 #unde‡
‰ód_u∆ocked


327 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

330 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

331 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

332 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

333 
‰ód_u∆ocked
Ë
__wur
;

334 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

335 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

336 
size_t
 
__size
, size_à
__n
,

337 
FILE
 *
__ª°ri˘
 
__°ªam
),

338 
__‰ód_u∆ocked_chk
)

339 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

342 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


343 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

344 
FILE
 *
__ª°ri˘
 
__°ªam
)

346 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

349 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

350 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

351  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

352 
__°ªam
);

354 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

355  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

356 
__°ªam
);

359 #ifde‡
__USE_EXTERN_INLINES


360 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

361 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

362 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

363 && 
__size
 * 
__n
 <= 8)

365 
size_t
 
__˙t
 = 
__size
 * 
__n
;

366 *
__˝å
 = (*Ë
__±r
;

367 i‡(
__˙t
 == 0)

370 ; 
__˙t
 > 0; --__cnt)

372 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

373 i‡(
__c
 =
EOF
)

375 *
__˝å
++ = 
__c
;

377  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

380  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

381 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


22 #ifde‡
_STDIO_H


23 
	#L_tm≤am
 20

	)

24 
	#TMP_MAX
 238328

	)

25 
	#FILENAME_MAX
 4096

	)

27 #ifde‡
__USE_POSIX


28 
	#L_˘îmid
 9

	)

29 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


30 
	#L_cu£rid
 9

	)

35 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

40 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


41 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-bsearch.h

19 
__exã∫_ölöe
 *

20 
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

21 
__com∑r_‚_t
 
__com∑r
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 c⁄° *
__p
;

25 
__com∑ris⁄
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (*Ë(((c⁄° *Ë
__ba£
Ë+ (
__idx
 * 
__size
));

33 
__com∑ris⁄
 = (*
__com∑r
Ë(
__key
, 
__p
);

34 i‡(
__com∑ris⁄
 < 0)

35 
__u
 = 
__idx
;

36 i‡(
__com∑ris⁄
 > 0)

37 
__l
 = 
__idx
 + 1;

39  (*Ë
__p
;

42  
NULL
;

43 
	}
}

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__BEGIN_NAMESPACE_STD


25 
__exã∫_ölöe
 

26 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

28  
	`°πod
 (
__≈å
, (**Ë
NULL
);

29 
	}
}

30 
	g__END_NAMESPACE_STD


	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
__BEGIN_NAMESPACE_C99


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

26 
__END_NAMESPACE_C99


29 #ifde‡
__USE_GNU


30 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

33 #ifde‡
__USE_MISC


34 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

35 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

36 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

38 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/string.h

19 #i‚de‡
_STRING_H


24 
	#_STRING_INLINE_u«lig√d
 1

	)

27 
	#_HAVE_STRING_ARCH_memp˝y
 1

	)

31 #i‡!
deföed
 
__x86_64__
 && (deföed 
__i486__
 || deföed 
__≥¡ium__
 \

32 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

33 || 
deföed
 
	g__noc⁄a__
 || deföed 
	g__©om__
 \

34 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__c‹ei7__
 \

35 || 
deföed
 
	g__ßndybridge__
 || deföed 
	g__haswñl__
 \

36 || 
deföed
 
	g__b⁄√Œ__
 || deföed 
	g__sûvîm⁄t__
 \

37 || 
deföed
 
	g__k6__
 || deföed 
	g__geode__
 \

38 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

39 || 
deföed
 
	g__amdÁm10__
 || deföed 
	g__bdvî1__
 \

40 || 
deföed
 
	g__bdvî2__
 || deföed 
	g__bdvî3__
 \

41 || 
deföed
 
	g__bdvî4__
 || deföed 
	g__btvî1__
 \

42 || 
deföed
 
	g__btvî2__
)

46 #i‡!
deföed
 
__NO_STRING_INLINES
 && deföed 
__USE_STRING_INLINES
 \

47 && 
deföed
 
	g__GNUC__
 && __GNUC__ >= 2

49 #i‚de‡
__STRING_INLINE


50 #i‚de‡
__exã∫_ölöe


51 
	#__STRING_INLINE
 
ölöe


	)

53 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

58 
	#__STRING_SMALL_GET16
(
§c
, 
idx
) \

59 ((((c⁄° *Ë(
§c
))[
idx
 + 1] << 8) \

60 | ((c⁄° *Ë(
§c
))[
idx
])

	)

61 
	#__STRING_SMALL_GET32
(
§c
, 
idx
) \

62 (((((c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

63 | ((c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

64 | ((c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

65 | ((c⁄° *Ë(
§c
))[
idx
])

	)

69 
	#_HAVE_STRING_ARCH_mem˝y
 1

	)

70 
	#mem˝y
(
de°
, 
§c
, 
n
) \

71 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

72 ? 
	`__mem˝y_c
 ((
de°
), (
§c
), (
n
)) \

73 : 
	`__mem˝y_g
 ((
de°
), (
§c
), (
n
))))

	)

74 
	#__mem˝y_c
(
de°
, 
§c
, 
n
) \

75 ((
n
) == 0 \

76 ? (
de°
) \

77 : (((
n
) % 4 == 0) \

78 ? 
	`__mem˝y_by4
 (
de°
, 
§c
, 
n
) \

79 : (((
n
) % 2 == 0) \

80 ? 
	`__mem˝y_by2
 (
de°
, 
§c
, 
n
) \

81 : 
	`__mem˝y_g
 (
de°
, 
§c
, 
n
))))

	)

83 
__STRING_INLINE
 *
__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
,

84 
size_t
 
__n
);

86 
__STRING_INLINE
 *

87 
	$__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

89 
__d0
, 
__d1
;

90 *
__tmp
 = 
__de°
;

91 
__asm__
 
__vﬁ©ûe__


99 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

100 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 4)

102  
__de°
;

103 
	}
}

105 
__STRING_INLINE
 *
__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
,

106 
size_t
 
__n
);

108 
__STRING_INLINE
 *

109 
	$__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

111 
__d0
, 
__d1
;

112 *
__tmp
 = 
__de°
;

113 
__asm__
 
__vﬁ©ûe__


126 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

127 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 2)

129  
__de°
;

130 
	}
}

132 
__STRING_INLINE
 *
__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
);

134 
__STRING_INLINE
 *

135 
	$__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

137 
__d0
, 
__d1
, 
__d2
;

138 *
__tmp
 = 
__de°
;

139 
__asm__
 
__vﬁ©ûe__


150 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

151 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

152 : "0" (
__n
), "1" (
__tmp
), "2" (
__§c
),

153 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
)

155  
__de°
;

156 
	}
}

158 
	#_HAVE_STRING_ARCH_memmove
 1

	)

159 #i‚de‡
_FORCE_INLINES


162 
	#memmove
(
de°
, 
§c
, 
n
Ë
	`__memmove_g
 (de°, src,Ç)

	)

164 
__STRING_INLINE
 *
	$__memmove_g
 (*, c⁄° *, 
size_t
)

165 
	`__asm__
 ("memmove");

167 
__STRING_INLINE
 *

168 
	$__memmove_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

170 
__d0
, 
__d1
, 
__d2
;

171 *
__tmp
 = 
__de°
;

172 i‡(
__de°
 < 
__§c
)

173 
__asm__
 
__vﬁ©ûe__


176 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

177 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

178 : "0" (
__n
), "1" (
__§c
), "2" (
__tmp
),

179 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

181 
__asm__
 
__vﬁ©ûe__


187 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

188 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

189 : "0" (
__n
), "1" (__¿+ (c⁄° *Ë
__§c
),

190 "2" (
__n
 + (*Ë
__tmp
),

191 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

192  
__de°
;

193 
	}
}

197 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

198 #i‚de‡
_FORCE_INLINES


199 #i‚de‡
__PIC__


201 
__STRING_INLINE
 

202 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

204 
__d0
, 
__d1
, 
__d2
;

205 
__ªs
;

206 
__asm__
 
__vﬁ©ûe__


214 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

215 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

216 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

217 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

219  
__ªs
;

220 
	}
}

225 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

226 
	#_USE_STRING_ARCH_mem£t
 1

	)

227 
	#mem£t
(
s
, 
c
, 
n
) \

228 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

229 ? ((
n
) == 1 \

230 ? 
	`__mem£t_c1
 ((
s
), (
c
)) \

231 : 
	`__mem£t_gc
 ((
s
), (
c
), (
n
))) \

232 : (
	`__buûtö_c⁄°™t_p
 (
c
) \

233 ? (
	`__buûtö_c⁄°™t_p
 (
n
) \

234 ? 
	`__mem£t_c˙
 ((
s
), (
c
), (
n
)) \

235 : 
	`mem£t
 ((
s
), (
c
), (
n
))) \

236 : (
	`__buûtö_c⁄°™t_p
 (
n
) \

237 ? 
	`__mem£t_g˙
 ((
s
), (
c
), (
n
)) \

238 : 
	`mem£t
 ((
s
), (
c
), (
n
))))))

	)

240 
	#__mem£t_c1
(
s
, 
c
Ë({ *
__s
 = (s); \

241 *((*Ë
__s
Ë(Ë(
c
); \

242 
__s
; })

	)

244 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

245 ({ *
__s
 = (
s
); \

247 
__ui
; \

248 
__usi
; \

249 
__uc
; \

250 } *
__u
 = 
__s
; \

251 
__c
 = ((Ë((Ë(
c
))) * 0x01010101; \

257 i‡((
n
) == 3 || (n) >= 5) \

258 
__asm__
 
	`__vﬁ©ûe__
 ("" : "Ù" (
__c
) : "0" (__c)); \

261 
n
) \

264 
__u
->
__ui
 = 
__c
; \

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

267 
__u
->
__ui
 = 
__c
; \

268 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

270 
__u
->
__ui
 = 
__c
; \

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

273 
__u
->
__usi
 = (Ë
__c
; \

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

275 
__u
->
__uc
 = (Ë
__c
; \

279 
__u
->
__ui
 = 
__c
; \

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

282 
__u
->
__ui
 = 
__c
; \

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

285 
__u
->
__ui
 = 
__c
; \

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

288 
__u
->
__usi
 = (Ë
__c
; \

292 
__u
->
__ui
 = 
__c
; \

293 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

295 
__u
->
__ui
 = 
__c
; \

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

298 
__u
->
__ui
 = 
__c
; \

299 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

301 
__u
->
__uc
 = (Ë
__c
; \

305 
__u
->
__ui
 = 
__c
; \

306 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

308 
__u
->
__ui
 = 
__c
; \

309 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

311 
__u
->
__ui
 = 
__c
; \

312 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

314 
__u
->
__ui
 = 
__c
; \

319 
__s
; })

	)

321 
	#__mem£t_c˙
(
s
, 
c
, 
n
) \

322 (((
n
) % 4 == 0) \

323 ? 
	`__mem£t_c˙_by4
 (
s
, ((Ë((Ë(
c
))) * 0x01010101,\

324 
n
) \

325 : (((
n
) % 2 == 0) \

326 ? 
	`__mem£t_c˙_by2
 (
s
, \

327 ((Ë((Ë(
c
))) * 0x01010101,\

328 
n
) \

329 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

331 
__STRING_INLINE
 *
__mem£t_c˙_by4
 (*
__s
, 
__c
,

332 
size_t
 
__n
);

334 
__STRING_INLINE
 *

335 
	$__mem£t_c˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

337 *
__tmp
 = 
__s
;

338 
__d0
;

339 #ifde‡
__i686__


340 
__asm__
 
__vﬁ©ûe__


343 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

344 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

345 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

348 
__asm__
 
__vﬁ©ûe__


354 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

355 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

356 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

359  
__s
;

360 
	}
}

362 
__STRING_INLINE
 *
__mem£t_c˙_by2
 (*
__s
, 
__c
,

363 
size_t
 
__n
);

365 
__STRING_INLINE
 *

366 
	$__mem£t_c˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

368 
__d0
, 
__d1
;

369 *
__tmp
 = 
__s
;

370 #ifde‡
__i686__


371 
__asm__
 
__vﬁ©ûe__


375 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

376 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

377 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

380 
__asm__
 
__vﬁ©ûe__


386 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

387 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

388 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

391  
__s
;

392 
	}
}

394 
	#__mem£t_g˙
(
s
, 
c
, 
n
) \

395 (((
n
) % 4 == 0) \

396 ? 
	`__mem£t_g˙_by4
 (
s
, 
c
, 
n
) \

397 : (((
n
) % 2 == 0) \

398 ? 
	`__mem£t_g˙_by2
 (
s
, 
c
, 
n
) \

399 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

401 
__STRING_INLINE
 *
__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
);

403 
__STRING_INLINE
 *

404 
	$__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

406 *
__tmp
 = 
__s
;

407 
__d0
;

408 
__asm__
 
__vﬁ©ûe__


418 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

419 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

420 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

422  
__s
;

423 
	}
}

425 
__STRING_INLINE
 *
__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
);

427 
__STRING_INLINE
 *

428 
	$__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

430 
__d0
, 
__d1
;

431 *
__tmp
 = 
__s
;

432 
__asm__
 
__vﬁ©ûe__


443 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

444 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

445 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

447  
__s
;

448 
	}
}

452 
	#_HAVE_STRING_ARCH_memchr
 1

	)

453 #i‚de‡
_FORCE_INLINES


454 
__STRING_INLINE
 *

455 
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

457 
__d0
;

458 #ifde‡
__i686__


459 
__d1
;

461 *
__ªs
;

462 i‡(
__n
 == 0)

463  
NULL
;

464 #ifde‡
__i686__


465 
__asm__
 
__vﬁ©ûe__


469 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

470 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

471 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

474 
__asm__
 
__vﬁ©ûe__


480 : "=D" (
__ªs
), "=&c" (
__d0
)

481 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

482 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

485  
__ªs
 - 1;

486 
	}
}

489 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

490 #i‚de‡
_FORCE_INLINES


491 
__STRING_INLINE
 *
__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
);

493 
__STRING_INLINE
 *

494 
	$__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

496 
__d0
;

497 #ifde‡
__i686__


498 
__d1
;

500 *
__ªs
;

501 i‡(
__n
 == 0)

502  
NULL
;

503 #ifde‡
__i686__


504 
__asm__
 
__vﬁ©ûe__


510 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

511 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

512 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

515 
__asm__
 
__vﬁ©ûe__


522 : "=D" (
__ªs
), "=&c" (
__d0
)

523 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

524 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

527  
__ªs
;

528 
	}
}

529 #ifde‡
__USE_GNU


530 
	#memrchr
(
s
, 
c
, 
n
Ë
	`__memrchr
 ((s), (c), (n))

	)

535 
	#_HAVE_STRING_ARCH_øwmemchr
 1

	)

536 
__STRING_INLINE
 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

538 #i‚de‡
_FORCE_INLINES


539 
__STRING_INLINE
 *

540 
	$__øwmemchr
 (c⁄° *
__s
, 
__c
)

542 
__d0
;

543 *
__ªs
;

544 
__asm__
 
__vﬁ©ûe__


547 : "=D" (
__ªs
), "=&c" (
__d0
)

548 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

549 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

551  
__ªs
 - 1;

552 
	}
}

553 #ifde‡
__USE_GNU


554 
__STRING_INLINE
 *

555 
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

557  
	`__øwmemchr
 (
__s
, 
__c
);

558 
	}
}

564 
	#_HAVE_STRING_ARCH_°æí
 1

	)

565 
	#°æí
(
°r
) \

566 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
°r
) \

567 ? 
	`__buûtö_°æí
 (
°r
) \

568 : 
	`__°æí_g
 (
°r
)))

	)

569 
__STRING_INLINE
 
size_t
 
__°æí_g
 (c⁄° *
__°r
);

571 
__STRING_INLINE
 
size_t


572 
	$__°æí_g
 (c⁄° *
__°r
)

574 
__dummy
;

575 c⁄° *
__tmp
 = 
__°r
;

576 
__asm__
 
__vﬁ©ûe__


582 : "Ù" (
__tmp
), "=&q" (
__dummy
)

583 : "0" (
__°r
),

584 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__°r
)

586  
__tmp
 - 
__°r
 - 1;

587 
	}
}

591 
	#_HAVE_STRING_ARCH_°r˝y
 1

	)

592 
	#°r˝y
(
de°
, 
§c
) \

593 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

594 ? ( ((
§c
)[0]Ë=1 && 
	`°æí
 (src) + 1 <= 8 \

595 ? 
	`__°r˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

596 : (*Ë
	`mem˝y
 ((*Ë(
de°
), \

597 (c⁄° *Ë(
§c
), \

598 
	`°æí
 (
§c
) + 1)) \

599 : 
	`__°r˝y_g
 ((
de°
), (
§c
))))

	)

601 
	#__°r˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

602 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

604 
__ui
; \

605 
__usi
; \

606 
__uc
; \

607 
__c
; \

608 } *
__u
 = (*Ë
__de°
; \

609 
§˛í
) \

612 
__u
->
__uc
 = '\0'; \

615 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

618 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

619 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

620 
__u
->
__uc
 = '\0'; \

623 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

626 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

627 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

628 
__u
->
__uc
 = '\0'; \

631 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

632 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

633 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

636 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

637 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

638 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

640 
__u
->
__uc
 = '\0'; \

643 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

645 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

648 (*Ë
__de°
; }))

	)

650 
__STRING_INLINE
 *
__°r˝y_g
 (*
__de°
, c⁄° *
__§c
);

652 
__STRING_INLINE
 *

653 
	$__°r˝y_g
 (*
__de°
, c⁄° *
__§c
)

655 *
__tmp
 = 
__de°
;

656 
__dummy
;

657 
__asm__
 
__vﬁ©ûe__


666 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
),

667 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

668 : "0" (
__§c
), "1" (
__tmp
),

669 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

671  
__de°
;

672 
	}
}

675 #ifde‡
__USE_GNU


676 
	#_HAVE_STRING_ARCH_°p˝y
 1

	)

678 
	#__°p˝y
(
de°
, 
§c
) \

679 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

680 ? (
	`°æí
 (
§c
) + 1 <= 8 \

681 ? 
	`__°p˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

682 : 
	`__°p˝y_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1)) \

683 : 
	`__°p˝y_g
 ((
de°
), (
§c
))))

	)

684 
	#__°p˝y_c
(
de°
, 
§c
, 
§˛í
) \

685 ((
§˛í
) % 4 == 0 \

686 ? 
	`__memp˝y_by4
 (
de°
, 
§c
, 
§˛í
) - 1 \

687 : ((
§˛í
) % 2 == 0 \

688 ? 
	`__memp˝y_by2
 (
de°
, 
§c
, 
§˛í
) - 1 \

689 : 
	`__memp˝y_byn
 (
de°
, 
§c
, 
§˛í
Ë- 1))

	)

692 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 ((de°), (§c))

	)

694 
	#__°p˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

695 (
	`__exãnsi⁄__
 ({ union { \

696 
__ui
; \

697 
__usi
; \

698 
__uc
; \

699 
__c
; \

700 } *
__u
 = (*Ë(
de°
); \

701 
§˛í
) \

704 
__u
->
__uc
 = '\0'; \

707 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

708 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

711 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

712 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

713 
__u
->
__uc
 = '\0'; \

716 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

717 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

720 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

721 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

722 
__u
->
__uc
 = '\0'; \

725 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

726 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

727 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

728 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

731 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

732 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

733 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

734 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

735 
__u
->
__uc
 = '\0'; \

738 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

739 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

740 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

741 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

744 (*Ë
__u
; }))

	)

746 
__STRING_INLINE
 *
__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
,

747 
size_t
 
__§˛í
);

749 
__STRING_INLINE
 *

750 
	$__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

752 *
__tmp
 = 
__de°
;

753 
__d0
, 
__d1
;

754 
__asm__
 
__vﬁ©ûe__


762 : "=&r" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

763 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4)

765  
__tmp
;

766 
	}
}

768 
__STRING_INLINE
 *
__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
,

769 
size_t
 
__§˛í
);

771 
__STRING_INLINE
 *

772 
	$__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

774 *
__tmp
 = 
__de°
;

775 
__d0
, 
__d1
;

776 
__asm__
 
__vﬁ©ûe__


789 : "=&q" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
),

790 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

791 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

792 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

794  
__tmp
 + 2;

795 
	}
}

797 
__STRING_INLINE
 *
__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
,

798 
size_t
 
__§˛í
);

800 
__STRING_INLINE
 *

801 
	$__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

803 
__d0
, 
__d1
;

804 *
__tmp
 = 
__de°
;

805 
__asm__
 
__vﬁ©ûe__


816 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

817 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

818 : "0" (
__tmp
), "1" (
__§˛í
), "2" (
__§c
),

819 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

821  
__tmp
;

822 
	}
}

824 
__STRING_INLINE
 *
__°p˝y_g
 (*
__de°
, c⁄° *
__§c
);

826 
__STRING_INLINE
 *

827 
	$__°p˝y_g
 (*
__de°
, c⁄° *
__§c
)

829 *
__tmp
 = 
__de°
;

830 
__dummy
;

831 
__asm__
 
__vﬁ©ûe__


840 : "=&r" (
__§c
), "Ù" (
__tmp
), "=&q" (
__dummy
),

841 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

842 : "0" (
__§c
), "1" (
__tmp
),

843 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

845  
__tmp
 - 1;

846 
	}
}

851 
	#_HAVE_STRING_ARCH_°∫˝y
 1

	)

852 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

853 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

854 ? ((
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

855 ? (*Ë
	`mem˝y
 ((*Ë(
de°
), \

856 (c⁄° *Ë(
§c
), 
n
) \

857 : 
	`__°∫˝y_cg
 ((
de°
), (
§c
), 
	`°æí
 (§cË+ 1, 
n
))) \

858 : 
	`__°∫˝y_gg
 ((
de°
), (
§c
), 
n
)))

	)

859 
	#__°∫˝y_cg
(
de°
, 
§c
, 
§˛í
, 
n
) \

860 (((
§˛í
) % 4 == 0) \

861 ? 
	`__°∫˝y_by4
 (
de°
, 
§c
, 
§˛í
, 
n
) \

862 : (((
§˛í
) % 2 == 0) \

863 ? 
	`__°∫˝y_by2
 (
de°
, 
§c
, 
§˛í
, 
n
) \

864 : 
	`__°∫˝y_byn
 (
de°
, 
§c
, 
§˛í
, 
n
)))

	)

866 
__STRING_INLINE
 *
__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[],

867 
size_t
 
__§˛í
, size_à
__n
);

869 
__STRING_INLINE
 *

870 
	$__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

872 *
__tmp
 = 
__de°
;

873 
__dummy1
, 
__dummy2
;

874 
__asm__
 
__vﬁ©ûe__


882 : "=&r" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

883 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

884 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4),

885 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

887 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

888  
__de°
;

889 
	}
}

891 
__STRING_INLINE
 *
__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[],

892 
size_t
 
__§˛í
, size_à
__n
);

894 
__STRING_INLINE
 *

895 
	$__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

897 *
__tmp
 = 
__de°
;

898 
__dummy1
, 
__dummy2
;

899 
__asm__
 
__vﬁ©ûe__


912 : "=&q" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

913 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

914 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

915 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

917 (Ë
	`mem£t
 (
__tmp
 + 2, '\0', 
__n
 - 
__§˛í
);

918  
__de°
;

919 
	}
}

921 
__STRING_INLINE
 *
__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[],

922 
size_t
 
__§˛í
, size_à
__n
);

924 
__STRING_INLINE
 *

925 
	$__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

927 
__d0
, 
__d1
;

928 *
__tmp
 = 
__de°
;

929 
__asm__
 
__vﬁ©ûe__


940 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

941 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

942 : "1" (
__§˛í
), "0" (
__tmp
),"2" (
__§c
),

943 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

945 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

946  
__de°
;

947 
	}
}

949 
__STRING_INLINE
 *
__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
,

950 
size_t
 
__n
);

952 
__STRING_INLINE
 *

953 
	$__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

955 *
__tmp
 = 
__de°
;

956 
__dummy
;

957 i‡(
__n
 > 0)

958 
__asm__
 
__vﬁ©ûe__


974 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

975 : "0" (
__§c
), "1" (
__tmp
), "3" (
__n
)

978  
__de°
;

979 
	}
}

983 
	#_HAVE_STRING_ARCH_°rˇt
 1

	)

984 
	#°rˇt
(
de°
, 
§c
) \

985 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

986 ? 
	`__°rˇt_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

987 : 
	`__°rˇt_g
 ((
de°
), (
§c
))))

	)

989 
__STRING_INLINE
 *
__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[],

990 
size_t
 
__§˛í
);

992 
__STRING_INLINE
 *

993 
	$__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
)

995 #ifde‡
__i686__


996 
__d0
;

997 *
__tmp
;

998 
__asm__
 
__vﬁ©ûe__


1000 : "=D" (
__tmp
), "=&c" (
__d0
),

1001 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1002 : "0" (
__de°
), "1" (0xffffffff), "a" (0),

1003 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1005 --
__tmp
;

1007 *
__tmp
 = 
__de°
;

1008 
__asm__
 
__vﬁ©ûe__


1014 : "Ù" (
__tmp
),

1015 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1016 : "0" (
__tmp
),

1017 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1020 (Ë
	`mem˝y
 (
__tmp
, 
__§c
, 
__§˛í
);

1021  
__de°
;

1022 
	}
}

1024 
__STRING_INLINE
 *
__°rˇt_g
 (*
__de°
, c⁄° *
__§c
);

1026 
__STRING_INLINE
 *

1027 
	$__°rˇt_g
 (*
__de°
, c⁄° *
__§c
)

1029 *
__tmp
 = 
__de°
;

1030 
__dummy
;

1031 
__asm__
 
__vﬁ©ûe__


1044 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
),

1045 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1046 : "1" (
__tmp
), "2" (
__§c
),

1047 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

1049  
__de°
;

1050 
	}
}

1054 
	#_HAVE_STRING_ARCH_°∫ˇt
 1

	)

1055 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

1056 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

1057 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

1058 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

1059 ? 
	`°rˇt
 (
__de°
, (
§c
)) \

1060 : (*(*)
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

1061 (c⁄° *Ë(
§c
), \

1062 (
n
)Ë0, 
__de°
)) \

1063 : 
	`__°∫ˇt_g
 (
__de°
, (
§c
), (
n
)); }))

	)

1065 
__STRING_INLINE
 *
__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[],

1066 
size_t
 
__n
);

1068 
__STRING_INLINE
 *

1069 
	$__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__n
)

1071 *
__tmp
 = 
__de°
;

1072 
__dummy
;

1073 #ifde‡
__i686__


1074 
__asm__
 
__vﬁ©ûe__


1088 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__§c
), "=&c" (
__n
)

1089 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__§c
), "3" (0xffffffff)

1092 --
__tmp
;

1093 
__asm__
 
__vﬁ©ûe__


1110 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__n
)

1111 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
)

1114  
__de°
;

1115 
	}
}

1119 
	#_HAVE_STRING_ARCH_°rcmp
 1

	)

1120 
	#°rcmp
(
s1
, 
s2
) \

1121 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

1122 && ( ((
s1
)[0]Ë!1 || 
	`°æí
 (s1) >= 4) \

1123 && ( ((
s2
)[0]Ë!1 || 
	`°æí
 (s2) >= 4) \

1124 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

1125 (
	`°æí
 (
s1
Ë< såÀ¿(
s2
) \

1126 ? 
	`°æí
 (
s1
Ë: såÀ¿(
s2
)) + 1) \

1127 : (
	`__buûtö_c⁄°™t_p
 (
s1
) &&  ((s1)[0]) == 1 \

1128 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (
s1
) < 4 \

1129 ? (
	`__buûtö_c⁄°™t_p
 (
s2
) &&  ((s2)[0]) == 1 \

1130 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1131 (c⁄° *Ë(
s2
), \

1132 
	`°æí
 (
s1
)) \

1133 : 
	`__°rcmp_cg
 ((c⁄° *Ë(
s1
), \

1134 (c⁄° *Ë(
s2
), \

1135 
	`°æí
 (
s1
))) \

1136 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&  ((
s1
)[0]) == 1 \

1137 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (s2) < 4 \

1138 ? (
	`__buûtö_c⁄°™t_p
 (
s1
) \

1139 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1140 (c⁄° *Ë(
s2
), \

1141 
	`°æí
 (
s2
)) \

1142 : 
	`__°rcmp_gc
 ((c⁄° *Ë(
s1
), \

1143 (c⁄° *Ë(
s2
), \

1144 
	`°æí
 (
s2
))) \

1145 : 
	`__°rcmp_gg
 ((
s1
), (
s2
))))))

	)

1147 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

1148 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = (
s1
)[0] - (
s2
)[0]; \

1149 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

1151 
__ªsu…
 = (
s1
)[1] - (
s2
)[1]; \

1152 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

1154 
__ªsu…
 = (
s1
)[2] - (
s2
)[2]; \

1155 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

1156 
__ªsu…
 = (
s1
)[3] - (
s2
)[3]; \

1159 
__ªsu…
; }))

	)

1161 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

1162 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = (
s2
); \

1163 
__ªsu…
 = (
s1
)[0] - 
__s2
[0]; \

1164 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

1166 
__ªsu…
 = (
s1
)[1] - 
__s2
[1]; \

1167 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

1169 
__ªsu…
 = (
s1
)[2] - 
__s2
[2]; \

1170 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

1171 
__ªsu…
 = (
s1
)[3] - 
__s2
[3]; \

1174 
__ªsu…
; }))

	)

1176 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

1177 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = (
s1
); \

1178 
__ªsu…
 = 
__s1
[0] - (
s2
)[0]; \

1179 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

1181 
__ªsu…
 = 
__s1
[1] - (
s2
)[1]; \

1182 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

1184 
__ªsu…
 = 
__s1
[2] - (
s2
)[2]; \

1185 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

1186 
__ªsu…
 = 
__s1
[3] - (
s2
)[3]; \

1189 
__ªsu…
; }))

	)

1191 
__STRING_INLINE
 
__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
);

1193 
__STRING_INLINE
 

1194 
	$__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
)

1196 
__ªs
;

1197 
__asm__
 
__vﬁ©ûe__


1213 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
)

1214 : "1" (
__s1
), "2" (
__s2
),

1215 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s1
),

1216 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s2
)

1218  
__ªs
;

1219 
	}
}

1223 
	#_HAVE_STRING_ARCH_°∫cmp
 1

	)

1224 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

1225 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`°æí
 (s1Ë< ((
size_t
Ë(
n
)) \

1226 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1227 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`°æí
 (s2Ë< ((
size_t
Ë(
n
))\

1228 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1229 : 
	`__°∫cmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1231 
__STRING_INLINE
 
__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
,

1232 
size_t
 
__n
);

1234 
__STRING_INLINE
 

1235 
	$__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

1237 
__ªs
;

1238 
__asm__
 
__vﬁ©ûe__


1257 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1258 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1259 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

1260 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

1262  
__ªs
;

1263 
	}
}

1267 
	#_HAVE_STRING_ARCH_°rchr
 1

	)

1268 
	#_USE_STRING_ARCH_°rchr
 1

	)

1269 
	#°rchr
(
s
, 
c
) \

1270 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1271 ? ((
c
) == '\0' \

1272 ? (*Ë
	`__øwmemchr
 ((
s
), (
c
)) \

1273 : 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1274 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1276 
__STRING_INLINE
 *
__°rchr_c
 (c⁄° *
__s
, 
__c
);

1278 
__STRING_INLINE
 *

1279 
	$__°rchr_c
 (c⁄° *
__s
, 
__c
)

1281 
__d0
;

1282 *
__ªs
;

1283 
__asm__
 
__vﬁ©ûe__


1293 : "Ù" (
__ªs
), "=&a" (
__d0
)

1294 : "0" (
__s
), "1" (
__c
),

1295 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1297  
__ªs
;

1298 
	}
}

1300 
__STRING_INLINE
 *
__°rchr_g
 (c⁄° *
__s
, 
__c
);

1302 
__STRING_INLINE
 *

1303 
	$__°rchr_g
 (c⁄° *
__s
, 
__c
)

1305 
__d0
;

1306 *
__ªs
;

1307 
__asm__
 
__vﬁ©ûe__


1318 : "Ù" (
__ªs
), "=&a" (
__d0
)

1319 : "0" (
__s
), "1" (
__c
),

1320 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1322  
__ªs
;

1323 
	}
}

1327 
	#_HAVE_STRING_ARCH_°rch∫ul
 1

	)

1328 
	#__°rch∫ul
(
s
, 
c
) \

1329 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1330 ? ((
c
) == '\0' \

1331 ? (*Ë
	`__øwmemchr
 ((
s
), 
c
) \

1332 : 
	`__°rch∫ul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1333 : 
	`__°rch∫ul_g
 ((
s
), 
c
)))

	)

1335 
__STRING_INLINE
 *
__°rch∫ul_c
 (c⁄° *
__s
, 
__c
);

1337 
__STRING_INLINE
 *

1338 
	$__°rch∫ul_c
 (c⁄° *
__s
, 
__c
)

1340 
__d0
;

1341 *
__ªs
;

1342 
__asm__
 
__vﬁ©ûe__


1352 : "Ù" (
__ªs
), "=&a" (
__d0
)

1353 : "0" (
__s
), "1" (
__c
),

1354 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1356  
__ªs
;

1357 
	}
}

1359 
__STRING_INLINE
 *
__°rch∫ul_g
 (c⁄° *
__s
, 
__c
);

1361 
__STRING_INLINE
 *

1362 
	$__°rch∫ul_g
 (c⁄° *
__s
, 
__c
)

1364 
__d0
;

1365 *
__ªs
;

1366 
__asm__
 
__vﬁ©ûe__


1377 : "Ù" (
__ªs
), "=&a" (
__d0
)

1378 : "0" (
__s
), "1" (
__c
),

1379 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1381  
__ªs
;

1382 
	}
}

1383 #ifde‡
__USE_GNU


1384 
	#°rch∫ul
(
s
, 
c
Ë
	`__°rch∫ul
 ((s), (c))

	)

1388 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1390 
	#_HAVE_STRING_ARCH_ödex
 1

	)

1391 
	#ödex
(
s
, 
c
) \

1392 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1393 ? 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1394 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1399 
	#_HAVE_STRING_ARCH_°ºchr
 1

	)

1400 
	#°ºchr
(
s
, 
c
) \

1401 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1402 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1403 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1405 #ifde‡
__i686__


1406 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1408 
__STRING_INLINE
 *

1409 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1411 
__d0
, 
__d1
;

1412 *
__ªs
;

1413 
__asm__
 
__vﬁ©ûe__


1421 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1422 : "0" (1), "1" (
__s
), "2" (
__c
),

1423 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1425  
__ªs
 - 1;

1426 
	}
}

1428 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1430 
__STRING_INLINE
 *

1431 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1433 
__d0
, 
__d1
;

1434 *
__ªs
;

1435 
__asm__
 
__vﬁ©ûe__


1444 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1445 : "0" (1), "1" (
__s
), "2" (
__c
),

1446 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1448  
__ªs
 - 1;

1449 
	}
}

1451 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1453 
__STRING_INLINE
 *

1454 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1456 
__d0
, 
__d1
;

1457 *
__ªs
;

1458 
__asm__
 
__vﬁ©ûe__


1468 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1469 : "0" (0), "1" (
__s
), "2" (
__c
),

1470 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1472  
__ªs
;

1473 
	}
}

1475 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1477 
__STRING_INLINE
 *

1478 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1480 
__d0
, 
__d1
;

1481 *
__ªs
;

1482 
__asm__
 
__vﬁ©ûe__


1493 : "Ù" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1494 : "0" (0), "1" (
__s
), "2" (
__c
),

1495 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1497  
__ªs
;

1498 
	}
}

1502 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1504 
	#_HAVE_STRING_ARCH_rödex
 1

	)

1505 
	#rödex
(
s
, 
c
) \

1506 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1507 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1508 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1514 
	#_HAVE_STRING_ARCH_°rc•n
 1

	)

1515 
	#°rc•n
(
s
, 
ªje˘
) \

1516 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
) &&  ((reject)[0]) == 1 \

1517 ? ((
ªje˘
)[0] == '\0' \

1518 ? 
	`°æí
 (
s
) \

1519 : ((
ªje˘
)[1] == '\0' \

1520 ? 
	`__°rc•n_c1
 ((
s
), (((
ªje˘
)[0] << 8) & 0xff00)) \

1521 : 
	`__°rc•n_cg
 ((
s
), (
ªje˘
), 
	`°æí
 (reject)))) \

1522 : 
	`__°rc•n_g
 ((
s
), (
ªje˘
))))

	)

1524 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

1526 #i‚de‡
_FORCE_INLINES


1527 
__STRING_INLINE
 
size_t


1528 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

1530 
__d0
;

1531 *
__ªs
;

1532 
__asm__
 
__vﬁ©ûe__


1541 : "Ù" (
__ªs
), "=&a" (
__d0
)

1542 : "0" (
__s
), "1" (
__ªje˘
),

1543 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1545  (
__ªs
 - 1Ë- 
__s
;

1546 
	}
}

1549 
__STRING_INLINE
 
size_t
 
__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[],

1550 
size_t
 
__ªje˘_Àn
);

1552 
__STRING_INLINE
 
size_t


1553 
	$__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[], 
size_t
 
__ªje˘_Àn
)

1555 
__d0
, 
__d1
, 
__d2
;

1556 c⁄° *
__ªs
;

1557 
__asm__
 
__vﬁ©ûe__


1568 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1569 : "0" (
__s
), "d" (
__ªje˘
), "g" (
__ªje˘_Àn
)

1571  (
__ªs
 - 1Ë- 
__s
;

1572 
	}
}

1574 
__STRING_INLINE
 
size_t
 
__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
);

1575 #ifde‡
__PIC__


1577 
__STRING_INLINE
 
size_t


1578 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1580 
__d0
, 
__d1
, 
__d2
;

1581 c⁄° *
__ªs
;

1582 
__asm__
 
__vﬁ©ûe__


1599 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1600 : "r" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1602  (
__ªs
 - 1Ë- 
__s
;

1603 
	}
}

1605 
__STRING_INLINE
 
size_t


1606 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1608 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1609 c⁄° *
__ªs
;

1610 
__asm__
 
__vﬁ©ûe__


1624 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1625 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ªje˘
), "b" (__reject)

1628  (
__ªs
 - 1Ë- 
__s
;

1629 
	}
}

1635 
	#_HAVE_STRING_ARCH_°r•n
 1

	)

1636 
	#°r•n
(
s
, 
ac˚±
) \

1637 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1638 ? ((
ac˚±
)[0] == '\0' \

1639 ? ((Ë(
s
), 0) \

1640 : ((
ac˚±
)[1] == '\0' \

1641 ? 
	`__°r•n_c1
 ((
s
), (((
ac˚±
)[0] << 8 ) & 0xff00)) \

1642 : 
	`__°r•n_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1643 : 
	`__°r•n_g
 ((
s
), (
ac˚±
))))

	)

1645 #i‚de‡
_FORCE_INLINES


1646 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1648 
__STRING_INLINE
 
size_t


1649 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1651 
__d0
;

1652 *
__ªs
;

1654 
__asm__
 
__vﬁ©ûe__


1660 : "Ù" (
__ªs
), "=&q" (
__d0
)

1661 : "0" (
__s
), "1" (
__ac˚±
),

1662 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1664  (
__ªs
 - 1Ë- 
__s
;

1665 
	}
}

1668 
__STRING_INLINE
 
size_t
 
__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1669 
size_t
 
__ac˚±_Àn
);

1671 
__STRING_INLINE
 
size_t


1672 
	$__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1674 
__d0
, 
__d1
, 
__d2
;

1675 c⁄° *
__ªs
;

1676 
__asm__
 
__vﬁ©ûe__


1687 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1688 : "0" (
__s
), "g" (
__ac˚±
), "g" (
__ac˚±_Àn
),

1691 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
),

1692 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__ac˚±_Àn
]; } *)
__ac˚±
)

1694  (
__ªs
 - 1Ë- 
__s
;

1695 
	}
}

1697 
__STRING_INLINE
 
size_t
 
__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1698 #ifde‡
__PIC__


1700 
__STRING_INLINE
 
size_t


1701 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1703 
__d0
, 
__d1
, 
__d2
;

1704 c⁄° *
__ªs
;

1705 
__asm__
 
__vﬁ©ûe__


1721 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1722 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1724  (
__ªs
 - 1Ë- 
__s
;

1725 
	}
}

1727 
__STRING_INLINE
 
size_t


1728 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1730 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1731 c⁄° *
__ªs
;

1732 
__asm__
 
__vﬁ©ûe__


1746 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1747 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ac˚±
), "b" (__accept)

1749  (
__ªs
 - 1Ë- 
__s
;

1750 
	}
}

1755 
	#_HAVE_STRING_ARCH_°Ωbrk
 1

	)

1756 
	#°Ωbrk
(
s
, 
ac˚±
) \

1757 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1758 ? ((
ac˚±
)[0] == '\0' \

1759 ? ((Ë(
s
), (*) 0) \

1760 : ((
ac˚±
)[1] == '\0' \

1761 ? 
	`°rchr
 ((
s
), (
ac˚±
)[0]) \

1762 : 
	`__°Ωbrk_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1763 : 
	`__°Ωbrk_g
 ((
s
), (
ac˚±
))))

	)

1765 
__STRING_INLINE
 *
__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1766 
size_t
 
__ac˚±_Àn
);

1768 
__STRING_INLINE
 *

1769 
	$__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1771 
__d0
, 
__d1
, 
__d2
;

1772 *
__ªs
;

1773 
__asm__
 
__vﬁ©ûe__


1788 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1789 : "0" (
__s
), "d" (
__ac˚±
), "g" (
__ac˚±_Àn
)

1791  
__ªs
;

1792 
	}
}

1794 
__STRING_INLINE
 *
__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1795 #ifde‡
__PIC__


1797 
__STRING_INLINE
 *

1798 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1800 
__d0
, 
__d1
, 
__d2
;

1801 *
__ªs
;

1802 
__asm__
 
__vﬁ©ûe__


1823 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1824 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1826  
__ªs
;

1827 
	}
}

1829 
__STRING_INLINE
 *

1830 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1832 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1833 *
__ªs
;

1834 
__asm__
 
__vﬁ©ûe__


1853 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1854 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__ac˚±
)

1856  
__ªs
;

1857 
	}
}

1862 
	#_HAVE_STRING_ARCH_°r°r
 1

	)

1863 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1864 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
) &&  ((needle)[0]) == 1 \

1865 ? ((
√edÀ
)[0] == '\0' \

1866 ? (
hay°ack
) \

1867 : ((
√edÀ
)[1] == '\0' \

1868 ? 
	`°rchr
 ((
hay°ack
), (
√edÀ
)[0]) \

1869 : 
	`__°r°r_cg
 ((
hay°ack
), (
√edÀ
), \

1870 
	`°æí
 (
√edÀ
)))) \

1871 : 
	`__°r°r_g
 ((
hay°ack
), (
√edÀ
))))

	)

1875 
__STRING_INLINE
 *
__°r°r_cg
 (c⁄° *
__hay°ack
,

1876 c⁄° 
__√edÀ
[],

1877 
size_t
 
__√edÀ_Àn
);

1879 
__STRING_INLINE
 *

1880 
	$__°r°r_cg
 (c⁄° *
__hay°ack
, c⁄° 
__√edÀ
[],

1881 
size_t
 
__√edÀ_Àn
)

1883 
__d0
, 
__d1
, 
__d2
;

1884 *
__ªs
;

1885 
__asm__
 
__vﬁ©ûe__


1898 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1899 : "g" (
__√edÀ_Àn
), "1" (
__hay°ack
), "d" (
__√edÀ
)

1901  
__ªs
;

1902 
	}
}

1904 
__STRING_INLINE
 *
__°r°r_g
 (c⁄° *
__hay°ack
,

1905 c⁄° *
__√edÀ
);

1906 #ifde‡
__PIC__


1908 
__STRING_INLINE
 *

1909 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1911 
__d0
, 
__d1
, 
__d2
;

1912 *
__ªs
;

1913 
__asm__
 
__vﬁ©ûe__


1932 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1933 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1934 "d" (
__√edÀ
)

1936  
__ªs
;

1937 
	}
}

1939 
__STRING_INLINE
 *

1940 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1942 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1943 *
__ªs
;

1944 
__asm__
 
__vﬁ©ûe__


1961 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1962 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1963 "b" (
__√edÀ
)

1965  
__ªs
;

1966 
	}
}

1972 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1973 #ifde‡
__i686__


1974 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1975 
	#ffs
(
w‹d
Ë(
	`__buûtö_c⁄°™t_p
 (word) \

1976 ? 
	`__buûtö_ffs
 (
w‹d
) \

1977 : ({ 
__˙t
, 
__tmp
; \

1978 
__asm__
 
__vﬁ©ûe__
 \

1981 : "=&r" (
__˙t
), "Ù" (
__tmp
) \

1982 : "rm" (
w‹d
), "1" (-1)); \

1983 
__˙t
 + 1; }))

	)

1985 #i‚de‡
ff¶


1986 
	#ff¶
(
w‹d
Ë
	`ffs
(w‹d)

	)

1991 #i‚de‡
_FORCE_INLINES


1992 #unde‡
__STRING_INLINE


	@/usr/include/bits/string2.h

20 #i‚de‡
_STRING_H


24 #i‚de‡
__NO_STRING_INLINES


41 #i‚de‡
__STRING_INLINE


42 #ifde‡
__˝lu•lus


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

49 #i‡
_STRING_INLINE_u«lig√d


51 
	~<ídün.h
>

52 
	~<bôs/ty≥s.h
>

54 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


55 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

56 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

57 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

58 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

59 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

60 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

61 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

62 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

64 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

65 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

66 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1])

	)

67 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

68 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

69 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

70 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

71 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3])

	)

76 
	#__STRING2_COPY_TYPE
(
N
) \

77 °ru˘ { 
__¨r
[
N
]; } \

78 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

79 
	t__STRING2_COPY_TYPE
 (2);

80 
__STRING2_COPY_TYPE
 (3);

81 
__STRING2_COPY_TYPE
 (4);

82 
__STRING2_COPY_TYPE
 (5);

83 
__STRING2_COPY_TYPE
 (6);

84 
__STRING2_COPY_TYPE
 (7);

85 
__STRING2_COPY_TYPE
 (8);

86 #unde‡
__STRING2_COPY_TYPE


92 
	#__°rög2_1b±r_p
(
__x
) \

93 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

96 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


97 #i‡!
__GNUC_PREREQ
 (3, 0)

98 #i‡
_STRING_INLINE_u«lig√d


99 
	#mem£t
(
s
, 
c
, 
n
) \

100 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

101 ? ((
n
) == 1 \

102 ? 
	`__mem£t_1
 (
s
, 
c
) \

103 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

104 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

105 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

106 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

108 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

109 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

111 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

112 ({ *
__s
 = (
s
); \

114 
__ui
; \

115 
__usi
; \

116 
__uc
; \

117 } *
__u
 = 
__s
; \

118 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

121 (Ë(
n
)) \

124 
__u
->
__ui
 = 
__c
 * 0x01010101; \

125 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

127 
__u
->
__ui
 = 
__c
 * 0x01010101; \

128 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

130 
__u
->
__ui
 = 
__c
 * 0x01010101; \

131 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

133 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

134 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

135 
__u
->
__uc
 = (Ë
__c
; \

139 
__u
->
__ui
 = 
__c
 * 0x01010101; \

140 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

142 
__u
->
__ui
 = 
__c
 * 0x01010101; \

143 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

145 
__u
->
__ui
 = 
__c
 * 0x01010101; \

146 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

148 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

152 
__u
->
__ui
 = 
__c
 * 0x01010101; \

153 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

155 
__u
->
__ui
 = 
__c
 * 0x01010101; \

156 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

158 
__u
->
__ui
 = 
__c
 * 0x01010101; \

159 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

161 
__u
->
__uc
 = (Ë
__c
; \

165 
__u
->
__ui
 = 
__c
 * 0x01010101; \

166 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

168 
__u
->
__ui
 = 
__c
 * 0x01010101; \

169 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

171 
__u
->
__ui
 = 
__c
 * 0x01010101; \

172 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

174 
__u
->
__ui
 = 
__c
 * 0x01010101; \

179 
__s
; })

	)

181 
	#mem£t
(
s
, 
c
, 
n
) \

182 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

183 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

184 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

193 #i‡
__GNUC_PREREQ
 (2, 91)

194 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

202 #ifde‡
__USE_GNU


203 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


204 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


205 #i‡
__GNUC_PREREQ
 (3, 4)

206 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

207 #ñi‡
__GNUC_PREREQ
 (3, 0)

208 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

209 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

210 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

211 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

212 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

214 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

215 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

216 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

217 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

218 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

222 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

225 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


226 #i‡
_STRING_INLINE_u«lig√d


227 #i‚de‡
_FORCE_INLINES


228 
	#__memp˝y_¨gs
(
§c
) \

229 ((c⁄° *Ë(
§c
))[0], ((const *) (src))[2], \

230 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[6], \

231 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

236 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

237 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

238 
__uöt32_t
, 
size_t
);

239 
__STRING_INLINE
 *

240 
	$__memp˝y_smÆl
 (*
__de°1
,

241 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

242 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

243 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

244 
size_t
 
__§˛í
)

247 
__uöt32_t
 
__ui
;

248 
__uöt16_t
 
__usi
;

249 
__uc
;

250 
__c
;

251 } *
__u
 = 
__de°1
;

252 (Ë
__§˛í
)

255 
__u
->
__c
 = 
__§c0_1
;

256 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

259 
__u
->
__usi
 = 
__§c0_2
;

260 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

263 
__u
->
__usi
 = 
__§c0_2
;

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

265 
__u
->
__c
 = 
__§c2_1
;

266 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

269 
__u
->
__ui
 = 
__§c0_4
;

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

273 
__u
->
__ui
 = 
__§c0_4
;

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

275 
__u
->
__c
 = 
__§c4_1
;

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

279 
__u
->
__ui
 = 
__§c0_4
;

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

281 
__u
->
__usi
 = 
__§c4_2
;

282 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

285 
__u
->
__ui
 = 
__§c0_4
;

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

287 
__u
->
__usi
 = 
__§c4_2
;

288 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

289 
__u
->
__c
 = 
__§c6_1
;

290 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

293 
__u
->
__ui
 = 
__§c0_4
;

294 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

295 
__u
->
__ui
 = 
__§c4_4
;

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

299  (*Ë
__u
;

300 
	}
}

302 #i‚de‡
_FORCE_INLINES


303 
	#__memp˝y_¨gs
(
§c
) \

304 ((c⁄° *Ë(
§c
))[0], \

305 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

306 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1] } }), \

307 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

308 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

309 ((c⁄° *Ë(
§c
))[2] } }), \

310 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

311 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

312 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3] } }), \

313 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

314 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

315 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

316 ((c⁄° *Ë(
§c
))[4] } }), \

317 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

318 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

319 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

320 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5] } }), \

321 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

322 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

323 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

324 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

325 ((c⁄° *Ë(
§c
))[6] } }), \

326 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

327 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

328 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

329 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

330 ((c⁄° *Ë(
§c
))[6], ((c⁄° *Ë(§c))[7] } })

	)

332 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

333 
__STRING2_COPY_ARR3
,

334 
__STRING2_COPY_ARR4
,

335 
__STRING2_COPY_ARR5
,

336 
__STRING2_COPY_ARR6
,

337 
__STRING2_COPY_ARR7
,

338 
__STRING2_COPY_ARR8
, 
size_t
);

339 
__STRING_INLINE
 *

340 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

341 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

342 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

343 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

344 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

347 
__c
;

348 
__STRING2_COPY_ARR2
 
__sˇ2
;

349 
__STRING2_COPY_ARR3
 
__sˇ3
;

350 
__STRING2_COPY_ARR4
 
__sˇ4
;

351 
__STRING2_COPY_ARR5
 
__sˇ5
;

352 
__STRING2_COPY_ARR6
 
__sˇ6
;

353 
__STRING2_COPY_ARR7
 
__sˇ7
;

354 
__STRING2_COPY_ARR8
 
__sˇ8
;

355 } *
__u
 = 
__de°
;

356 (Ë
__§˛í
)

359 
__u
->
__c
 = 
__§c1
;

362 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

365 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

368 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

371 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

374 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

377 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

380 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

383  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

384 
	}
}

392 #i‚de‡
_HAVE_STRING_ARCH_°rchr


393 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

394 #i‡
__GNUC_PREREQ
 (3, 2)

395 
	#°rchr
(
s
, 
c
) \

396 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

397 && (
c
) == '\0' \

398 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

399 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

401 
	#°rchr
(
s
, 
c
) \

402 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

403 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

404 : 
	`°rchr
 (
s
, 
c
)))

	)

410 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

411 || 
deföed
 
	g_FORCE_INLINES


412 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

413 
	#°r˝y
(
de°
, 
§c
) \

414 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

415 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

416 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

417 
	`°æí
 (
§c
) + 1) \

418 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

419 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

422 #i‡
_STRING_INLINE_u«lig√d


423 #i‚de‡
_FORCE_INLINES


424 
	#__°r˝y_¨gs
(
§c
) \

425 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

430 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

431 
__uöt32_t
, __uöt32_t, 
size_t
);

432 
__STRING_INLINE
 *

433 
	$__°r˝y_smÆl
 (*
__de°
,

434 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

435 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

436 
size_t
 
__§˛í
)

439 
__uöt32_t
 
__ui
;

440 
__uöt16_t
 
__usi
;

441 
__uc
;

442 } *
__u
 = (*Ë
__de°
;

443 (Ë
__§˛í
)

446 
__u
->
__uc
 = '\0';

449 
__u
->
__usi
 = 
__§c0_2
;

452 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

454 
__u
->
__uc
 = '\0';

457 
__u
->
__ui
 = 
__§c0_4
;

460 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

462 
__u
->
__uc
 = '\0';

465 
__u
->
__ui
 = 
__§c0_4
;

466 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

467 
__u
->
__usi
 = 
__§c4_2
;

470 
__u
->
__ui
 = 
__§c0_4
;

471 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

472 
__u
->
__usi
 = 
__§c4_2
;

473 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

474 
__u
->
__uc
 = '\0';

477 
__u
->
__ui
 = 
__§c0_4
;

478 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

479 
__u
->
__ui
 = 
__§c4_4
;

482  
__de°
;

483 
	}
}

485 #i‚de‡
_FORCE_INLINES


486 
	#__°r˝y_¨gs
(
§c
) \

487 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

488 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

489 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

490 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

492 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

493 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

494 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

495 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

496 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

497 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

499 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

500 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

501 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

502 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

503 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

504 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

505 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

506 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

508 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

509 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

510 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

511 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

512 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

514 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

515 
__STRING2_COPY_ARR3
,

516 
__STRING2_COPY_ARR4
,

517 
__STRING2_COPY_ARR5
,

518 
__STRING2_COPY_ARR6
,

519 
__STRING2_COPY_ARR7
,

520 
__STRING2_COPY_ARR8
, 
size_t
);

521 
__STRING_INLINE
 *

522 
	$__°r˝y_smÆl
 (*
__de°
,

523 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

524 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

525 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

526 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

529 
__c
;

530 
__STRING2_COPY_ARR2
 
__sˇ2
;

531 
__STRING2_COPY_ARR3
 
__sˇ3
;

532 
__STRING2_COPY_ARR4
 
__sˇ4
;

533 
__STRING2_COPY_ARR5
 
__sˇ5
;

534 
__STRING2_COPY_ARR6
 
__sˇ6
;

535 
__STRING2_COPY_ARR7
 
__sˇ7
;

536 
__STRING2_COPY_ARR8
 
__sˇ8
;

537 } *
__u
 = (*Ë
__de°
;

538 (Ë
__§˛í
)

541 
__u
->
__c
 = '\0';

544 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

547 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

550 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

553 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

556 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

559 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

562 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

565  
__de°
;

566 
	}
}

572 #ifde‡
__USE_GNU


573 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


574 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


575 #i‡
__GNUC_PREREQ
 (3, 4)

576 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

577 #ñi‡
__GNUC_PREREQ
 (3, 0)

578 
	#__°p˝y
(
de°
, 
§c
) \

579 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

580 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

581 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

582 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

584 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

586 
	#__°p˝y
(
de°
, 
§c
) \

587 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

588 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

589 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

590 
	`°æí
 (
§c
) + 1) \

591 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

593 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

597 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

600 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


601 #i‡
_STRING_INLINE_u«lig√d


602 #i‚de‡
_FORCE_INLINES


603 
	#__°p˝y_¨gs
(
§c
) \

604 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

609 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

610 
__uöt32_t
, __uöt32_t, 
size_t
);

611 
__STRING_INLINE
 *

612 
	$__°p˝y_smÆl
 (*
__de°
,

613 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

614 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

615 
size_t
 
__§˛í
)

618 
__ui
;

619 
__usi
;

620 
__uc
;

621 
__c
;

622 } *
__u
 = (*Ë
__de°
;

623 (Ë
__§˛í
)

626 
__u
->
__uc
 = '\0';

629 
__u
->
__usi
 = 
__§c0_2
;

630 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

633 
__u
->
__usi
 = 
__§c0_2
;

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

635 
__u
->
__uc
 = '\0';

638 
__u
->
__ui
 = 
__§c0_4
;

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

642 
__u
->
__ui
 = 
__§c0_4
;

643 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

644 
__u
->
__uc
 = '\0';

647 
__u
->
__ui
 = 
__§c0_4
;

648 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

649 
__u
->
__usi
 = 
__§c4_2
;

650 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

653 
__u
->
__ui
 = 
__§c0_4
;

654 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

655 
__u
->
__usi
 = 
__§c4_2
;

656 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

657 
__u
->
__uc
 = '\0';

660 
__u
->
__ui
 = 
__§c0_4
;

661 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

662 
__u
->
__ui
 = 
__§c4_4
;

663 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

666  &
__u
->
__c
;

667 
	}
}

669 #i‚de‡
_FORCE_INLINES


670 
	#__°p˝y_¨gs
(
§c
) \

671 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

672 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

673 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

674 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

676 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

677 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

678 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

679 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

680 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

681 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

683 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

684 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

685 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

686 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

687 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

688 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

689 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

690 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

692 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

693 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

694 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

695 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

696 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

698 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

699 
__STRING2_COPY_ARR3
,

700 
__STRING2_COPY_ARR4
,

701 
__STRING2_COPY_ARR5
,

702 
__STRING2_COPY_ARR6
,

703 
__STRING2_COPY_ARR7
,

704 
__STRING2_COPY_ARR8
, 
size_t
);

705 
__STRING_INLINE
 *

706 
	$__°p˝y_smÆl
 (*
__de°
,

707 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

708 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

709 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

710 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

713 
__c
;

714 
__STRING2_COPY_ARR2
 
__sˇ2
;

715 
__STRING2_COPY_ARR3
 
__sˇ3
;

716 
__STRING2_COPY_ARR4
 
__sˇ4
;

717 
__STRING2_COPY_ARR5
 
__sˇ5
;

718 
__STRING2_COPY_ARR6
 
__sˇ6
;

719 
__STRING2_COPY_ARR7
 
__sˇ7
;

720 
__STRING2_COPY_ARR8
 
__sˇ8
;

721 } *
__u
 = (*Ë
__de°
;

722 (Ë
__§˛í
)

725 
__u
->
__c
 = '\0';

728 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

731 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

734 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

737 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

740 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

743 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

746 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

749  
__de°
 + 
__§˛í
 - 1;

750 
	}
}

758 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


759 #i‡
__GNUC_PREREQ
 (3, 2)

760 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

762 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

763 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

764 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

765 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

766 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

773 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


774 #ifde‡
_USE_STRING_ARCH_°rchr


775 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

776 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

777 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

778 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

779 ? 
	`°rˇt
 (
__de°
, 
§c
) \

780 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

781 
§c
, 
n
)Ë'\0', 
__de°
)) \

782 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

783 #ñi‡
__GNUC_PREREQ
 (3, 2)

784 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

786 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

787 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

788 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

789 ? 
	`°rˇt
 (
de°
, 
§c
) \

790 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

797 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


798 #i‡
__GNUC_PREREQ
 (3, 2)

799 
	#°rcmp
(
s1
, 
s2
) \

800 
__exãnsi⁄__
 \

801 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

802 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

803 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), 
__s2_Àn
 = __buûtö_°æí (
s2
), \

804 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

805 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

806 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

807 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

808 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), __s1_len < 4) \

809 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

810 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

811 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

812 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

813 && (
__s2_Àn
 = 
	`__buûtö_°æí
 (
s2
), __s2_len < 4) \

814 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

815 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

816 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

817 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

819 
	#°rcmp
(
s1
, 
s2
) \

820 
__exãnsi⁄__
 \

821 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

822 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

823 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

824 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

825 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

826 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

827 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

828 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

829 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

830 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

831 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

832 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

833 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

834 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

835 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

836 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

837 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

838 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

841 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

842 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

843 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

844 - ((c⁄° *Ë(c⁄° *)(
s2
))[0]); \

845 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

847 
__ªsu…
 = (((const *) \

848 (c⁄° *Ë(
s1
))[1] \

850 (c⁄° *Ë(
s2
))[1]); \

851 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

853 
__ªsu…
 = \

855 (c⁄° *Ë(
s1
))[2] \

857 (c⁄° *Ë(
s2
))[2]); \

858 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

859 
__ªsu…
 = \

861 (c⁄° *Ë(
s1
))[3] \

863 (c⁄° *Ë(
s2
))[3]); \

866 
__ªsu…
; }))

	)

868 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

869 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = \

870 (c⁄° *Ë(c⁄° *Ë(
s2
); \

871 
__ªsu…
 = \

872 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

873 - 
__s2
[0]); \

874 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

876 
__ªsu…
 = (((const *) \

877 (c⁄° *Ë(
s1
))[1] - 
__s2
[1]); \

878 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

880 
__ªsu…
 = (((const *) \

881 (c⁄° *Ë(
s1
))[2] - 
__s2
[2]); \

882 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

883 
__ªsu…
 = (((const *) \

884 (c⁄° *Ë(
s1
))[3] \

885 - 
__s2
[3]); \

888 
__ªsu…
; }))

	)

890 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
Ë(- 
	`__°rcmp_cg
 (s2, s1,Ü2))

	)

895 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


896 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

897 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

898 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

899 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

900 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

901 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

902 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

908 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


909 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


910 #i‡
__GNUC_PREREQ
 (3, 2)

911 
	#°rc•n
(
s
, 
ªje˘
) \

912 
__exãnsi⁄__
 \

913 ({ 
__r0
, 
__r1
, 
__r2
; \

914 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

915 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

916 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

917 : ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

918 ? 
	`°æí
 (
s
) \

919 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

920 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

921 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

922 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

923 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

924 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

925 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

926 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

928 
	#°rc•n
(
s
, 
ªje˘
) \

929 
__exãnsi⁄__
 \

930 ({ 
__r0
, 
__r1
, 
__r2
; \

931 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

932 ? ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

933 ? 
	`°æí
 (
s
) \

934 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

935 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

936 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

937 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

938 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

939 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

940 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

941 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

945 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

946 
__STRING_INLINE
 
size_t


947 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

949 
size_t
 
__ªsu…
 = 0;

950 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

951 ++
__ªsu…
;

952  
__ªsu…
;

953 
	}
}

955 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
,

956 
__ªje˘2
);

957 
__STRING_INLINE
 
size_t


958 
	$__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
)

960 
size_t
 
__ªsu…
 = 0;

961 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


962 && 
__s
[
__ªsu…
] !
__ªje˘2
)

963 ++
__ªsu…
;

964  
__ªsu…
;

965 
	}
}

967 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
,

968 
__ªje˘2
, 
__ªje˘3
);

969 
__STRING_INLINE
 
size_t


970 
	$__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
,

971 
__ªje˘3
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


975 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

976 ++
__ªsu…
;

977  
__ªsu…
;

978 
	}
}

984 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


985 #i‚de‡
_HAVE_STRING_ARCH_°r•n


986 #i‡
__GNUC_PREREQ
 (3, 2)

987 
	#°r•n
(
s
, 
ac˚±
) \

988 
__exãnsi⁄__
 \

989 ({ 
__a0
, 
__a1
, 
__a2
; \

990 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

991 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

992 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

993 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

994 ? ((Ë(
s
), (
size_t
) 0) \

995 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

996 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

997 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

998 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

999 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1000 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1001 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1002 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1004 
	#°r•n
(
s
, 
ac˚±
) \

1005 
__exãnsi⁄__
 \

1006 ({ 
__a0
, 
__a1
, 
__a2
; \

1007 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1008 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1009 ? ((Ë(
s
), (
size_t
) 0) \

1010 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1011 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1012 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1013 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1014 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1015 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1016 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1017 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1021 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1022 
__STRING_INLINE
 
size_t


1023 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1025 
size_t
 
__ªsu…
 = 0;

1027 
__s
[
__ªsu…
] =
__ac˚±
)

1028 ++
__ªsu…
;

1029  
__ªsu…
;

1030 
	}
}

1032 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1033 
__ac˚±2
);

1034 
__STRING_INLINE
 
size_t


1035 
	$__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1037 
size_t
 
__ªsu…
 = 0;

1039 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1040 ++
__ªsu…
;

1041  
__ªsu…
;

1042 
	}
}

1044 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1045 
__ac˚±2
, 
__ac˚±3
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1052 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1053 ++
__ªsu…
;

1054  
__ªsu…
;

1055 
	}
}

1060 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1061 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1062 #i‡
__GNUC_PREREQ
 (3, 2)

1063 
	#°Ωbrk
(
s
, 
ac˚±
) \

1064 
__exãnsi⁄__
 \

1065 ({ 
__a0
, 
__a1
, 
__a2
; \

1066 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1067 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1068 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1069 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1070 ? ((Ë(
s
), (*Ë
NULL
) \

1071 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1072 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1073 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1074 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1075 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1076 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1077 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1078 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1080 
	#°Ωbrk
(
s
, 
ac˚±
) \

1081 
__exãnsi⁄__
 \

1082 ({ 
__a0
, 
__a1
, 
__a2
; \

1083 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1084 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1085 ? ((Ë(
s
), (*Ë
NULL
) \

1086 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1087 ? 
	`°rchr
 (
s
, 
__a0
) \

1088 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1089 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1090 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1091 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1092 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1093 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1097 
__STRING_INLINE
 *
__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1098 
__ac˚±2
);

1099 
__STRING_INLINE
 *

1100 
	$__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1103 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1104 ++
__s
;

1105  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1106 
	}
}

1108 
__STRING_INLINE
 *
__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1109 
__ac˚±2
, 
__ac˚±3
);

1110 
__STRING_INLINE
 *

1111 
	$__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1114 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1115 && *
__s
 !
__ac˚±3
)

1116 ++
__s
;

1117  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1118 
	}
}

1124 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1125 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1126 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1127 ? (((c⁄° *Ë(
√edÀ
))[0] == '\0' \

1128 ? (*Ë(
size_t
Ë(
hay°ack
) \

1129 : (((c⁄° *Ë(
√edÀ
))[1] == '\0' \

1130 ? 
	`°rchr
 (
hay°ack
, \

1131 ((c⁄° *Ë(
√edÀ
))[0]) \

1132 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1133 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1137 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1138 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1139 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1140 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1141 && ((c⁄° *Ë(
£p
))[0] != '\0' \

1142 && ((c⁄° *Ë(
£p
))[1] == '\0' \

1143 ? 
	`__°πok_r_1c
 (
s
, ((c⁄° *Ë(
£p
))[0], 
√xç
) \

1144 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1147 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1148 
__STRING_INLINE
 *

1149 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1151 *
__ªsu…
;

1152 i‡(
__s
 =
NULL
)

1153 
__s
 = *
__√xç
;

1154 *
__s
 =
__£p
)

1155 ++
__s
;

1156 
__ªsu…
 = 
NULL
;

1157 i‡(*
__s
 != '\0')

1159 
__ªsu…
 = 
__s
++;

1160 *
__s
 != '\0')

1161 i‡(*
__s
++ =
__£p
)

1163 
__s
[-1] = '\0';

1167 *
__√xç
 = 
__s
;

1168  
__ªsu…
;

1169 
	}
}

1170 #ifde‡
__USE_POSIX


1171 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1176 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1177 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1179 *
__°r£p_g
 (**
__°rögp
, c⁄° *
__dñim
);

1180 
	#__°r£p
(
s
, 
ªje˘
) \

1181 
__exãnsi⁄__
 \

1182 ({ 
__r0
, 
__r1
, 
__r2
; \

1183 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1184 && (
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], \

1185 ((c⁄° *Ë(
ªje˘
))[0] != '\0') \

1186 ? ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], \

1187 ((c⁄° *Ë(
ªje˘
))[1] == '\0') \

1188 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1189 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

1190 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1191 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

1192 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1193 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1194 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1197 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1198 
__STRING_INLINE
 *

1199 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1201 *
__ªtvÆ
 = *
__s
;

1202 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1203 *(*
__s
)++ = '\0';

1204  
__ªtvÆ
;

1205 
	}
}

1207 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1208 
__STRING_INLINE
 *

1209 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1211 *
__ªtvÆ
 = *
__s
;

1212 i‡(
__ªtvÆ
 !
NULL
)

1214 *
__˝
 = 
__ªtvÆ
;

1217 i‡(*
__˝
 == '\0')

1219 
__˝
 = 
NULL
;

1222 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1224 *
__˝
++ = '\0';

1227 ++
__˝
;

1229 *
__s
 = 
__˝
;

1231  
__ªtvÆ
;

1232 
	}
}

1234 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1235 
__ªje˘3
);

1236 
__STRING_INLINE
 *

1237 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1239 *
__ªtvÆ
 = *
__s
;

1240 i‡(
__ªtvÆ
 !
NULL
)

1242 *
__˝
 = 
__ªtvÆ
;

1245 i‡(*
__˝
 == '\0')

1247 
__˝
 = 
NULL
;

1250 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1252 *
__˝
++ = '\0';

1255 ++
__˝
;

1257 *
__s
 = 
__˝
;

1259  
__ªtvÆ
;

1260 
	}
}

1261 #ifde‡
__USE_MISC


1262 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1269 #ifde‡
__USE_MISC


1271 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1272 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1273 
	~<°dlib.h
>

1276 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1278 *
	$__°rdup
 (c⁄° *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1279 
	#__°rdup
(
s
) \

1280 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1281 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1282 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1283 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1284 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1285 i‡(
__ªtvÆ
 !
NULL
) \

1286 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1287 
__ªtvÆ
; 
	}
})) \

1288 : 
	`__°rdup
 (
s
)))

	)

1290 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1291 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1295 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1297 *
	$__°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

1298 
__THROW
 
__©åibuã_mÆloc__
;

1299 
	#__°∫dup
(
s
, 
n
) \

1300 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1301 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1302 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1303 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1304 
size_t
 
__n
 = (
n
); \

1305 *
__ªtvÆ
; \

1306 i‡(
__n
 < 
__Àn
) \

1307 
__Àn
 = 
__n
 + 1; \

1308 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1309 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1312 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1313 
__Àn
 - 1); \

1315 
__ªtvÆ
; 
	}
})) \

1316 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1318 #ifde‡
__USE_XOPEN2K8


1319 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1325 #i‚de‡
_FORCE_INLINES


1326 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

18 #i‚de‡
_STRING_H


22 #i‡!
__GNUC_PREREQ
 (5,0)

23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

27 #i‚de‡
__˝lu•lus


31 #unde‡
mem˝y


32 #unde‡
memmove


33 #unde‡
mem£t


34 #unde‡
°rˇt


35 #unde‡
°r˝y


36 #unde‡
°∫ˇt


37 #unde‡
°∫˝y


38 #ifde‡
__USE_GNU


39 #unde‡
memp˝y


40 #unde‡
°p˝y


42 #ifde‡
__USE_MISC


43 #unde‡
bc›y


44 #unde‡
bzîo


49 
__f‹tify_fun˘i⁄
 *

50 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

51 
size_t
 
__Àn
))

53  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

54 
	}
}

56 
__f‹tify_fun˘i⁄
 *

57 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

59  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

60 
	}
}

62 #ifde‡
__USE_GNU


63 
__f‹tify_fun˘i⁄
 *

64 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

65 
size_t
 
__Àn
))

67  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

68 
	}
}

77 
__f‹tify_fun˘i⁄
 *

78 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

82 #i‡!
	`__GNUC_PREREQ
 (5,0)

83 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

84 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

86 
	`__w¨n_mem£t_zîo_Àn
 ();

87  
__de°
;

90  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

91 
	}
}

93 #ifde‡
__USE_MISC


94 
__f‹tify_fun˘i⁄
 

95 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

97 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

98 
	}
}

100 
__f‹tify_fun˘i⁄
 

101 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

103 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

104 
	}
}

107 
__f‹tify_fun˘i⁄
 *

108 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

110  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

111 
	}
}

113 #ifde‡
__USE_GNU


114 
__f‹tify_fun˘i⁄
 *

115 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

117  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

118 
	}
}

122 
__f‹tify_fun˘i⁄
 *

123 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

124 
size_t
 
__Àn
))

126  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

127 
	}
}

130 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

131 
size_t
 
__de°Àn
Ë
__THROW
;

132 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

133 
size_t
 
__n
), 
°≤˝y
);

135 
__f‹tify_fun˘i⁄
 *

136 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

138 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

139 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿> 
	`__bos
 (
__de°
)))

140  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

141  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

142 
	}
}

145 
__f‹tify_fun˘i⁄
 *

146 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

148  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

149 
	}
}

152 
__f‹tify_fun˘i⁄
 *

153 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

154 
size_t
 
__Àn
))

156  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

157 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #i‚de‡
_STDIO_H


25 #ifde‡ 
__USE_MISC


26 
sys_√º
;

27 c⁄° *c⁄° 
sys_îæi°
[];

29 #ifde‡ 
__USE_GNU


30 
_sys_√º
;

31 c⁄° *c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/termios.h

19 #i‚de‡
_TERMIOS_H


23 
	tcc_t
;

24 
	t•ìd_t
;

25 
	ttcÊag_t
;

27 
	#NCCS
 32

	)

28 
	sãrmios


30 
tcÊag_t
 
	mc_iÊag
;

31 
tcÊag_t
 
	mc_oÊag
;

32 
tcÊag_t
 
	mc_cÊag
;

33 
tcÊag_t
 
	mc_lÊag
;

34 
cc_t
 
	mc_löe
;

35 
cc_t
 
	mc_cc
[
NCCS
];

36 
•ìd_t
 
	mc_i•ìd
;

37 
•ìd_t
 
	mc_o•ìd
;

38 
	#_HAVE_STRUCT_TERMIOS_C_ISPEED
 1

	)

39 
	#_HAVE_STRUCT_TERMIOS_C_OSPEED
 1

	)

43 
	#VINTR
 0

	)

44 
	#VQUIT
 1

	)

45 
	#VERASE
 2

	)

46 
	#VKILL
 3

	)

47 
	#VEOF
 4

	)

48 
	#VTIME
 5

	)

49 
	#VMIN
 6

	)

50 
	#VSWTC
 7

	)

51 
	#VSTART
 8

	)

52 
	#VSTOP
 9

	)

53 
	#VSUSP
 10

	)

54 
	#VEOL
 11

	)

55 
	#VREPRINT
 12

	)

56 
	#VDISCARD
 13

	)

57 
	#VWERASE
 14

	)

58 
	#VLNEXT
 15

	)

59 
	#VEOL2
 16

	)

62 
	#IGNBRK
 0000001

	)

63 
	#BRKINT
 0000002

	)

64 
	#IGNPAR
 0000004

	)

65 
	#PARMRK
 0000010

	)

66 
	#INPCK
 0000020

	)

67 
	#ISTRIP
 0000040

	)

68 
	#INLCR
 0000100

	)

69 
	#IGNCR
 0000200

	)

70 
	#ICRNL
 0000400

	)

71 
	#IUCLC
 0001000

	)

72 
	#IXON
 0002000

	)

73 
	#IXANY
 0004000

	)

74 
	#IXOFF
 0010000

	)

75 
	#IMAXBEL
 0020000

	)

76 
	#IUTF8
 0040000

	)

79 
	#OPOST
 0000001

	)

80 
	#OLCUC
 0000002

	)

81 
	#ONLCR
 0000004

	)

82 
	#OCRNL
 0000010

	)

83 
	#ONOCR
 0000020

	)

84 
	#ONLRET
 0000040

	)

85 
	#OFILL
 0000100

	)

86 
	#OFDEL
 0000200

	)

87 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


88 
	#NLDLY
 0000400

	)

89 
	#NL0
 0000000

	)

90 
	#NL1
 0000400

	)

91 
	#CRDLY
 0003000

	)

92 
	#CR0
 0000000

	)

93 
	#CR1
 0001000

	)

94 
	#CR2
 0002000

	)

95 
	#CR3
 0003000

	)

96 
	#TABDLY
 0014000

	)

97 
	#TAB0
 0000000

	)

98 
	#TAB1
 0004000

	)

99 
	#TAB2
 0010000

	)

100 
	#TAB3
 0014000

	)

101 
	#BSDLY
 0020000

	)

102 
	#BS0
 0000000

	)

103 
	#BS1
 0020000

	)

104 
	#FFDLY
 0100000

	)

105 
	#FF0
 0000000

	)

106 
	#FF1
 0100000

	)

109 
	#VTDLY
 0040000

	)

110 
	#VT0
 0000000

	)

111 
	#VT1
 0040000

	)

113 #ifde‡
__USE_MISC


114 
	#XTABS
 0014000

	)

118 #ifde‡
__USE_MISC


119 
	#CBAUD
 0010017

	)

121 
	#B0
 0000000

	)

122 
	#B50
 0000001

	)

123 
	#B75
 0000002

	)

124 
	#B110
 0000003

	)

125 
	#B134
 0000004

	)

126 
	#B150
 0000005

	)

127 
	#B200
 0000006

	)

128 
	#B300
 0000007

	)

129 
	#B600
 0000010

	)

130 
	#B1200
 0000011

	)

131 
	#B1800
 0000012

	)

132 
	#B2400
 0000013

	)

133 
	#B4800
 0000014

	)

134 
	#B9600
 0000015

	)

135 
	#B19200
 0000016

	)

136 
	#B38400
 0000017

	)

137 #ifde‡
__USE_MISC


138 
	#EXTA
 
B19200


	)

139 
	#EXTB
 
B38400


	)

141 
	#CSIZE
 0000060

	)

142 
	#CS5
 0000000

	)

143 
	#CS6
 0000020

	)

144 
	#CS7
 0000040

	)

145 
	#CS8
 0000060

	)

146 
	#CSTOPB
 0000100

	)

147 
	#CREAD
 0000200

	)

148 
	#PARENB
 0000400

	)

149 
	#PARODD
 0001000

	)

150 
	#HUPCL
 0002000

	)

151 
	#CLOCAL
 0004000

	)

152 #ifde‡
__USE_MISC


153 
	#CBAUDEX
 0010000

	)

155 
	#B57600
 0010001

	)

156 
	#B115200
 0010002

	)

157 
	#B230400
 0010003

	)

158 
	#B460800
 0010004

	)

159 
	#B500000
 0010005

	)

160 
	#B576000
 0010006

	)

161 
	#B921600
 0010007

	)

162 
	#B1000000
 0010010

	)

163 
	#B1152000
 0010011

	)

164 
	#B1500000
 0010012

	)

165 
	#B2000000
 0010013

	)

166 
	#B2500000
 0010014

	)

167 
	#B3000000
 0010015

	)

168 
	#B3500000
 0010016

	)

169 
	#B4000000
 0010017

	)

170 
	#__MAX_BAUD
 
B4000000


	)

171 #ifde‡
__USE_MISC


172 
	#CIBAUD
 002003600000

	)

173 
	#CMSPAR
 010000000000

	)

174 
	#CRTSCTS
 020000000000

	)

178 
	#ISIG
 0000001

	)

179 
	#ICANON
 0000002

	)

180 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


181 
	#XCASE
 0000004

	)

183 
	#ECHO
 0000010

	)

184 
	#ECHOE
 0000020

	)

185 
	#ECHOK
 0000040

	)

186 
	#ECHONL
 0000100

	)

187 
	#NOFLSH
 0000200

	)

188 
	#TOSTOP
 0000400

	)

189 #ifde‡
__USE_MISC


190 
	#ECHOCTL
 0001000

	)

191 
	#ECHOPRT
 0002000

	)

192 
	#ECHOKE
 0004000

	)

193 
	#FLUSHO
 0010000

	)

194 
	#PENDIN
 0040000

	)

196 
	#IEXTEN
 0100000

	)

197 #ifde‡
__USE_MISC


198 
	#EXTPROC
 0200000

	)

202 
	#TCOOFF
 0

	)

203 
	#TCOON
 1

	)

204 
	#TCIOFF
 2

	)

205 
	#TCION
 3

	)

208 
	#TCIFLUSH
 0

	)

209 
	#TCOFLUSH
 1

	)

210 
	#TCIOFLUSH
 2

	)

213 
	#TCSANOW
 0

	)

214 
	#TCSADRAIN
 1

	)

215 
	#TCSAFLUSH
 2

	)

218 
	#_IOT_ãrmios
 \

219 
	`_IOT
 (
	`_IOTS
 (
cÊag_t
), 4, _IOTS (
cc_t
), 
NCCS
, _IOTS (
•ìd_t
), 2)

	)

	@/usr/include/bits/time.h

23 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


24 #i‚de‡
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bôs/ty≥s.h
>

30 
	stimevÆ


32 
__time_t
 
	mtv_£c
;

33 
__su£c⁄ds_t
 
	mtv_u£c
;

38 #i‚de‡
__√ed_timevÆ


39 #i‚de‡
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 ((
˛ock_t
Ë1000000)

	)

50 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

51 && !
deföed
 
	g__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

81 
	#CLOCK_TAI
 11

	)

84 
	#TIMER_ABSTIME
 1

	)

87 #ifde‡
__USE_GNU


88 
	~<bôs/timex.h
>

90 
__BEGIN_DECLS


93 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

95 
__END_DECLS


101 #unde‡
__√ed_timevÆ


	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

89 
	#__S16_TYPE
 

	)

90 
	#__U16_TYPE
 

	)

91 
	#__S32_TYPE
 

	)

92 
	#__U32_TYPE
 

	)

93 
	#__SLONGWORD_TYPE
 

	)

94 
	#__ULONGWORD_TYPE
 

	)

95 #i‡
__WORDSIZE
 == 32

96 
	#__SQUAD_TYPE
 
__quad_t


	)

97 
	#__UQUAD_TYPE
 
__u_quad_t


	)

98 
	#__SWORD_TYPE
 

	)

99 
	#__UWORD_TYPE
 

	)

100 
	#__SLONG32_TYPE
 

	)

101 
	#__ULONG32_TYPE
 

	)

102 
	#__S64_TYPE
 
__quad_t


	)

103 
	#__U64_TYPE
 
__u_quad_t


	)

106 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

107 #ñi‡
__WORDSIZE
 == 64

108 
	t__SQUAD_TYPE
 

	)

109 
	t__UQUAD_TYPE
 

	)

110 
	t__SWORD_TYPE
 

	)

111 
	t__UWORD_TYPE
 

	)

112 
	t__SLONG32_TYPE
 

	)

113 
	t__ULONG32_TYPE
 

	)

114 
	t__S64_TYPE
 

	)

115 
	t__U64_TYPE
 

	)

117 
	t__STD_TYPE
 

	)

121 
	~<bôs/ty≥sizes.h
>

124 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

125 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

126 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

127 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

128 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

129 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

130 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

131 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

132 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

133 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

134 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

135 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

136 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

137 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

138 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

139 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

140 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

141 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

143 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

144 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

147 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

150 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

153 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

158 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

159 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

162 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

163 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

166 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

167 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

170 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

172 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

175 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

177 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

181 
__off64_t
 
	t__loff_t
;

182 
__quad_t
 *
	t__qaddr_t
;

183 *
	t__ˇddr_t
;

186 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

189 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

192 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

19 #i‚de‡
_UNISTD_H


23 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

24 
size_t
 
__buÊí
Ë
__wur
;

25 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

26 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

27 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

29 
size_t
 
__buÊí
), 
__ªad_chk
)

30 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

33 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


34 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

39  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

41 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

42  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

44  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

45 
	}
}

47 #ifde‡
__USE_UNIX98


48 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

49 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

50 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

51 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

52 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

53 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

54 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

55 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

56 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

57 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

58 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

60 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

61 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

63 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

64 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

65 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

66 
__¥ód64_chk
)

67 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

70 #i‚de‡
__USE_FILE_OFFSET64


71 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


72 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

74 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

76 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

77  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

79 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

80  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

81 
	`__bos0
 (
__buf
));

83  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

84 
	}
}

86 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


87 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

89 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

91 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

92  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

94 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

95  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

96 
	`__bos0
 (
__buf
));

99  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

100 
	}
}

103 #ifde‡
__USE_LARGEFILE64


104 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


105 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

107 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

109 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

110  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

112 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

113  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

114 
	`__bos0
 (
__buf
));

117  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

118 
	}
}

122 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


123 
ssize_t
 
	$__ªadlök_chk
 (c⁄° *
__ª°ri˘
 
__∑th
,

124 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

125 
size_t
 
__buÊí
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

127 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

128 (c⁄° *
__ª°ri˘
 
__∑th
,

129 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

130 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

131 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

132 (c⁄° *
__ª°ri˘
 
__∑th
,

133 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

134 
size_t
 
__buÊí
), 
__ªadlök_chk
)

135 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

138 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


139 
	`__NTH
 (
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

140 
size_t
 
__Àn
))

142 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

144 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

145  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

147 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

148  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

150  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

151 
	}
}

154 #ifde‡
__USE_ATFILE


155 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

156 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

157 
size_t
 
__buÊí
)

158 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

159 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

160 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

161 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

162 
ªadlök©
)

163 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

164 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

165 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

167 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

168 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

172 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


173 
	`__NTH
 (
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

174 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

176 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

178 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

179  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

181 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

182  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

183 
	`__bos
 (
__buf
));

185  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

186 
	}
}

189 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

190 
__THROW
 
__wur
;

191 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

192 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

193 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

194 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

195 
__gëcwd_chk
)

196 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

199 
__f‹tify_fun˘i⁄
 
__wur
 *

200 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

202 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

204 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

205  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

207 i‡(
__size
 > 
	`__bos
 (
__buf
))

208  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

210  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

211 
	}
}

213 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


214 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

215 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

216 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

217 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

220 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

221 
	`__NTH
 (
	$gëwd
 (*
__buf
))

223 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

224  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

225  
	`__gëwd_w¨n
 (
__buf
);

226 
	}
}

229 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

230 
size_t
 
__buÊí
Ë
__THROW
;

231 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

232 
size_t
 
__Àn
), 
c⁄f°r
);

233 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

234 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

235 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

236 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

239 
__f‹tify_fun˘i⁄
 
size_t


240 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

242 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

244 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

245  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

247 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

248  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

250  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

251 
	}
}

254 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

255 
__THROW
 
__wur
;

256 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

257 
gëgroups
Ë
__wur
;

258 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

259 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

260 
__gëgroups_chk
)

261 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

264 
__f‹tify_fun˘i⁄
 

265 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

267 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

269 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

270  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

272 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

273  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

275  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

276 
	}
}

279 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

280 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

281 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

282 
size_t
 
__buÊí
), 
ây«me_r
)

283 
	`__n⁄nuŒ
 ((2));

284 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

285 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

286 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

287 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

290 
__f‹tify_fun˘i⁄
 

291 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

293 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

295 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

296  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

298 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

299  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

301  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

302 
	}
}

305 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


306 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

307 
	`__n⁄nuŒ
 ((1));

308 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

309 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

310 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

311 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

312 
__gëlogö_r_chk
)

313 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

316 
__f‹tify_fun˘i⁄
 

317 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

319 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

321 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

322  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

324 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

325  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

327  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

328 
	}
}

332 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_UNIX98


333 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

336 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

337 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

338 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

339 
__gëho°«me_chk
)

340 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

343 
__f‹tify_fun˘i⁄
 

344 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

346 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

349  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

351 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

352  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

354  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

355 
	}
}

359 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

360 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

361 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

362 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

363 
size_t
 
__buÊí
),

364 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

365 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

366 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

367 
__gëdomaö«me_chk
)

368 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

372 
__f‹tify_fun˘i⁄
 

373 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

375 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

377 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

378  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

380 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

381  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

383  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

384 
	}
}

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 
	#WSTOPPED
 2

	)

30 
	#WEXITED
 4

	)

31 
	#WCONTINUED
 8

	)

32 
	#WNOWAIT
 0x01000000

	)

34 
	#__WNOTHREAD
 0x20000000

	)

36 
	#__WALL
 0x40000000

	)

37 
	#__WCLONE
 0x80000000

	)

40 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


41 #i‚de‡
__ENUM_IDTYPE_T


42 
	#__ENUM_IDTYPE_T
 1

	)

46 #unde‡
P_ALL


47 #unde‡
P_PID


48 #unde‡
P_PGID


52 
	mP_ALL
,

53 
	mP_PID
,

54 
	mP_PGID


55 } 
	tidty≥_t
;

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

62 #ifdef 
__USE_MISC


64 
	~<ídün.h
>

66 
	uwaô


68 
	mw_°©us
;

71 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
	m__w_ãrmsig
:7;

73 
	m__w_c‹edump
:1;

74 
	m__w_ªtcode
:8;

77 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


79 
	m__w_ªtcode
:8;

80 
	m__w_c‹edump
:1;

81 
	m__w_ãrmsig
:7;

83 } 
	m__waô_ãrmö©ed
;

86 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


87 
	m__w_°›vÆ
:8;

88 
	m__w_°›sig
:8;

91 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


93 
	m__w_°›sig
:8;

94 
	m__w_°›vÆ
:8;

96 } 
	m__waô_°›≥d
;

99 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

100 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

101 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

102 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

103 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

33 #ifde‡
__WCHAR_MAX__


34 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #ñi‡
L
'\0' - 1 > 0

36 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 
	#__WCHAR_MAX
 (0x7ffffff‡+ 
L
'\0')

	)

41 #ifde‡
__WCHAR_MIN__


42 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #ñi‡
L
'\0' - 1 > 0

44 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/bits/xopen_lim.h

29 #i‚de‡
_XOPEN_LIM_H


30 
	#_XOPEN_LIM_H
 1

	)

32 
	#__√ed_IOV_MAX


	)

33 
	~<bôs/°dio_lim.h
>

65 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

70 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

73 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

76 
	#NL_MSGMAX
 
INT_MAX


	)

80 
	#NL_NMAX
 
INT_MAX


	)

83 
	#NL_SETMAX
 
INT_MAX


	)

86 
	#NL_TEXTMAX
 
INT_MAX


	)

89 
	#NZERO
 20

	)

93 #ifde‡
INT_MAX


94 #i‡
INT_MAX
 == 32767

95 
	#WORD_BIT
 16

	)

97 #i‡
INT_MAX
 == 2147483647

98 
	#WORD_BIT
 32

	)

101 
	#WORD_BIT
 64

	)

104 #ñi‡
deföed
 
__INT_MAX__


105 #i‡
__INT_MAX__
 == 32767

106 
	#WORD_BIT
 16

	)

108 #i‡
__INT_MAX__
 == 2147483647

109 
	#WORD_BIT
 32

	)

112 
	#WORD_BIT
 64

	)

116 
	#WORD_BIT
 32

	)

120 #ifde‡
LONG_MAX


121 #i‡
LONG_MAX
 == 2147483647

122 
	#LONG_BIT
 32

	)

125 
	#LONG_BIT
 64

	)

127 #ñi‡
deföed
 
__LONG_MAX__


128 #i‡
__LONG_MAX__
 == 2147483647

129 
	#LONG_BIT
 32

	)

132 
	#LONG_BIT
 64

	)

135 
	~<bôs/w‹dsize.h
>

136 #i‡
__WORDSIZE
 == 64

137 
	#LONG_BIT
 64

	)

139 
	#LONG_BIT
 32

	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC11


98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_ISOCXX11


101 #unde‡
__USE_POSIX


102 #unde‡
__USE_POSIX2


103 #unde‡
__USE_POSIX199309


104 #unde‡
__USE_POSIX199506


105 #unde‡
__USE_XOPEN


106 #unde‡
__USE_XOPEN_EXTENDED


107 #unde‡
__USE_UNIX98


108 #unde‡
__USE_XOPEN2K


109 #unde‡
__USE_XOPEN2KXSI


110 #unde‡
__USE_XOPEN2K8


111 #unde‡
__USE_XOPEN2K8XSI


112 #unde‡
__USE_LARGEFILE


113 #unde‡
__USE_LARGEFILE64


114 #unde‡
__USE_FILE_OFFSET64


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

146 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

147 && !
deföed
 
	g_DEFAULT_SOURCE


152 #unde‡
_DEFAULT_SOURCE


153 
	#_DEFAULT_SOURCE
 1

	)

157 #ifde‡
_GNU_SOURCE


158 #unde‡
_ISOC95_SOURCE


159 
	#_ISOC95_SOURCE
 1

	)

160 #unde‡
_ISOC99_SOURCE


161 
	#_ISOC99_SOURCE
 1

	)

162 #unde‡
_ISOC11_SOURCE


163 
	#_ISOC11_SOURCE
 1

	)

164 #unde‡
_POSIX_SOURCE


165 
	#_POSIX_SOURCE
 1

	)

166 #unde‡
_POSIX_C_SOURCE


167 
	#_POSIX_C_SOURCE
 200809L

	)

168 #unde‡
_XOPEN_SOURCE


169 
	#_XOPEN_SOURCE
 700

	)

170 #unde‡
_XOPEN_SOURCE_EXTENDED


171 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

172 #unde‡
_LARGEFILE64_SOURCE


173 
	#_LARGEFILE64_SOURCE
 1

	)

174 #unde‡
_DEFAULT_SOURCE


175 
	#_DEFAULT_SOURCE
 1

	)

176 #unde‡
_ATFILE_SOURCE


177 
	#_ATFILE_SOURCE
 1

	)

182 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

183 || (!
deföed
 
	g__STRICT_ANSI__
 \

184 && !
deföed
 
	g_ISOC99_SOURCE
 \

185 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

186 && !
deföed
 
	g_XOPEN_SOURCE
))

187 #unde‡
_DEFAULT_SOURCE


188 
	#_DEFAULT_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC11_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

194 
	#__USE_ISOC11
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

200 
	#__USE_ISOC99
 1

	)

204 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

205 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

206 
	#__USE_ISOC95
 1

	)

213 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

214 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

215 
	#__USE_ISOCXX11
 1

	)

221 #ifde‡
_DEFAULT_SOURCE


222 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


223 
	#__USE_POSIX_IMPLICITLY
 1

	)

225 #unde‡
_POSIX_SOURCE


226 
	#_POSIX_SOURCE
 1

	)

227 #unde‡
_POSIX_C_SOURCE


228 
	#_POSIX_C_SOURCE
 200809L

	)

230 #i‡((!
deföed
 
__STRICT_ANSI__
 \

231 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

232 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

233 
	#_POSIX_SOURCE
 1

	)

234 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

235 
	#_POSIX_C_SOURCE
 2

	)

236 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

237 
	#_POSIX_C_SOURCE
 199506L

	)

238 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

239 
	#_POSIX_C_SOURCE
 200112L

	)

241 
	#_POSIX_C_SOURCE
 200809L

	)

243 
	#__USE_POSIX_IMPLICITLY
 1

	)

246 #i‡(
deföed
 
_POSIX_SOURCE
 \

247 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

248 || 
deföed
 
_XOPEN_SOURCE
)

249 
	#__USE_POSIX
 1

	)

252 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


253 
	#__USE_POSIX2
 1

	)

256 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

257 
	#__USE_POSIX199309
 1

	)

260 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

261 
	#__USE_POSIX199506
 1

	)

264 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

265 
	#__USE_XOPEN2K
 1

	)

266 #unde‡
__USE_ISOC95


267 
	#__USE_ISOC95
 1

	)

268 #unde‡
__USE_ISOC99


269 
	#__USE_ISOC99
 1

	)

272 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

273 
	#__USE_XOPEN2K8
 1

	)

274 #unde‡
_ATFILE_SOURCE


275 
	#_ATFILE_SOURCE
 1

	)

278 #ifdef 
_XOPEN_SOURCE


279 
	#__USE_XOPEN
 1

	)

280 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

281 
	#__USE_XOPEN_EXTENDED
 1

	)

282 
	#__USE_UNIX98
 1

	)

283 #unde‡
_LARGEFILE_SOURCE


284 
	#_LARGEFILE_SOURCE
 1

	)

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

286 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

287 
	#__USE_XOPEN2K8
 1

	)

288 
	#__USE_XOPEN2K8XSI
 1

	)

290 
	#__USE_XOPEN2K
 1

	)

291 
	#__USE_XOPEN2KXSI
 1

	)

292 #unde‡
__USE_ISOC95


293 
	#__USE_ISOC95
 1

	)

294 #unde‡
__USE_ISOC99


295 
	#__USE_ISOC99
 1

	)

298 #ifde‡
_XOPEN_SOURCE_EXTENDED


299 
	#__USE_XOPEN_EXTENDED
 1

	)

304 #ifde‡
_LARGEFILE_SOURCE


305 
	#__USE_LARGEFILE
 1

	)

308 #ifde‡
_LARGEFILE64_SOURCE


309 
	#__USE_LARGEFILE64
 1

	)

312 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

313 
	#__USE_FILE_OFFSET64
 1

	)

316 #i‡
deföed
 
_DEFAULT_SOURCE


317 
	#__USE_MISC
 1

	)

320 #ifdef 
_ATFILE_SOURCE


321 
	#__USE_ATFILE
 1

	)

324 #ifdef 
_GNU_SOURCE


325 
	#__USE_GNU
 1

	)

328 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


329 
	#__USE_REENTRANT
 1

	)

332 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

333 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

334 #i‡
_FORTIFY_SOURCE
 > 1

335 
	#__USE_FORTIFY_LEVEL
 2

	)

337 
	#__USE_FORTIFY_LEVEL
 1

	)

340 
	#__USE_FORTIFY_LEVEL
 0

	)

345 
	~<°dc-¥edef.h
>

353 #unde‡
__GNU_LIBRARY__


354 
	#__GNU_LIBRARY__
 6

	)

358 
	#__GLIBC__
 2

	)

359 
	#__GLIBC_MINOR__
 23

	)

361 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

362 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

365 #i‚de‡
__ASSEMBLER__


366 #i‚de‡
_SYS_CDEFS_H


367 
	~<sys/cdefs.h
>

372 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


373 
	#__USE_LARGEFILE
 1

	)

374 
	#__USE_LARGEFILE64
 1

	)

380 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

381 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

382 && 
deföed
 
	g__exã∫_ölöe


383 
	#__USE_EXTERN_INLINES
 1

	)

391 
	~<gnu/°ubs.h
>

	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


150 
	t_IO_lock_t
;

156 
	s_IO_m¨kî
 {

157 
_IO_m¨kî
 *
	m_√xt
;

158 
_IO_FILE
 *
	m_sbuf
;

162 
	m_pos
;

164 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

165 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

166 
	mpublic
:

167 
°ªamm¨kî
(
°ªambuf
 *
sb
);

168 ~
°ªamm¨kî
();

169 
ßvög
(Ë{  
	m_•os
 == -2; }

170 
dñè
(
°ªamm¨kî
&);

171 
dñè
();

176 
	e__codecvt_ªsu…


178 
	m__codecvt_ok
,

179 
	m__codecvt_∑πül
,

180 
	m__codecvt_îr‹
,

181 
	m__codecvt_noc⁄v


184 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


187 
	s_IO_codecvt


189 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

190 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

191 
	m__mb°©e_t
 *,

192 c⁄° 
	mwch¨_t
 *,

193 c⁄° 
	mwch¨_t
 *,

194 c⁄° 
	mwch¨_t
 **, *,

196 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

197 
	m__mb°©e_t
 *, *,

199 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

200 
	m__mb°©e_t
 *,

202 c⁄° **, 
	mwch¨_t
 *,

203 
	mwch¨_t
 *, wchar_t **);

204 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

205 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

206 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

207 c⁄° *, c⁄° *, 
	m_IO_size_t
);

208 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

210 
_IO_ic⁄v_t
 
	m__cd_ö
;

211 
_IO_ic⁄v_t
 
	m__cd_out
;

215 
	s_IO_wide_d©a


217 
wch¨_t
 *
	m_IO_ªad_±r
;

218 
wch¨_t
 *
	m_IO_ªad_íd
;

219 
wch¨_t
 *
	m_IO_ªad_ba£
;

220 
wch¨_t
 *
	m_IO_wrôe_ba£
;

221 
wch¨_t
 *
	m_IO_wrôe_±r
;

222 
wch¨_t
 *
	m_IO_wrôe_íd
;

223 
wch¨_t
 *
	m_IO_buf_ba£
;

224 
wch¨_t
 *
	m_IO_buf_íd
;

226 
wch¨_t
 *
	m_IO_ßve_ba£
;

227 
wch¨_t
 *
	m_IO_backup_ba£
;

229 
wch¨_t
 *
	m_IO_ßve_íd
;

231 
__mb°©e_t
 
	m_IO_°©e
;

232 
__mb°©e_t
 
	m_IO_œ°_°©e
;

233 
_IO_codecvt
 
	m_codecvt
;

235 
wch¨_t
 
	m_sh‹tbuf
[1];

237 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

241 
	s_IO_FILE
 {

242 
	m_Êags
;

243 
	#_IO_fûe_Êags
 
_Êags


	)

247 * 
	m_IO_ªad_±r
;

248 * 
	m_IO_ªad_íd
;

249 * 
	m_IO_ªad_ba£
;

250 * 
	m_IO_wrôe_ba£
;

251 * 
	m_IO_wrôe_±r
;

252 * 
	m_IO_wrôe_íd
;

253 * 
	m_IO_buf_ba£
;

254 * 
	m_IO_buf_íd
;

256 *
	m_IO_ßve_ba£
;

257 *
	m_IO_backup_ba£
;

258 *
	m_IO_ßve_íd
;

260 
_IO_m¨kî
 *
	m_m¨kîs
;

262 
_IO_FILE
 *
	m_chaö
;

264 
	m_fûío
;

266 
	m_blksize
;

268 
	m_Êags2
;

270 
_IO_off_t
 
	m_ﬁd_off£t
;

272 
	#__HAVE_COLUMN


	)

274 
	m_cur_cﬁumn
;

275 sig√d 
	m_vèbÀ_off£t
;

276 
	m_sh‹tbuf
[1];

280 
_IO_lock_t
 *
	m_lock
;

281 #ifde‡
_IO_USE_OLD_IO_FILE


284 
	s_IO_FILE_com∂ëe


286 
_IO_FILE
 
	m_fûe
;

288 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

289 
_IO_off64_t
 
	m_off£t
;

290 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


292 
_IO_codecvt
 *
	m_codecvt
;

293 
_IO_wide_d©a
 *
	m_wide_d©a
;

294 
_IO_FILE
 *
	m_‰ìªs_li°
;

295 *
	m_‰ìªs_buf
;

297 *
	m__∑d1
;

298 *
	m__∑d2
;

299 *
	m__∑d3
;

300 *
	m__∑d4
;

302 
size_t
 
	m__∑d5
;

303 
	m_mode
;

305 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

309 #i‚de‡
__˝lu•lus


310 
_IO_FILE
 
	t_IO_FILE
;

313 
	g_IO_FILE_∂us
;

315 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

316 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

317 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

318 #i‚de‡
_LIBC


319 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

320 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

321 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

323 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

324 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

325 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

333 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

341 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

342 
	tsize_t
 
	t__n
);

350 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

353 
	t__io_˛o£_‚
 (*
	t__cookõ
);

356 #ifde‡
_GNU_SOURCE


358 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

359 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

360 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

361 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

366 
__io_ªad_‚
 *
	mªad
;

367 
__io_wrôe_‚
 *
	mwrôe
;

368 
__io_£ek_‚
 *
	m£ek
;

369 
__io_˛o£_‚
 *
	m˛o£
;

370 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

371 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

373 
	g_IO_cookõ_fûe
;

376 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

377 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

381 #ifde‡
__˝lu•lus


385 
__undîÊow
 (
_IO_FILE
 *);

386 
__uÊow
 (
_IO_FILE
 *);

387 
__ovîÊow
 (
_IO_FILE
 *, );

388 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


389 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

390 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

391 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

394 #i‡ 
__GNUC__
 >= 3

395 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

397 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

400 
	#_IO_gëc_u∆ocked
(
_Â
) \

401 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

402 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

403 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

404 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

405 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

406 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

407 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

408 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

409 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

410 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

412 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


413 
	#_IO_gëwc_u∆ocked
(
_Â
) \

414 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

415 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

416 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

417 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

418 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

422 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

423 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

426 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

427 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

429 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

430 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

431 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

432 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

434 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

437 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

438 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

440 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

441 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

442 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

444 #ifde‡
_IO_MTSAFE_IO


445 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

446 
	#_IO_Êockfûe
(
_Â
) \

447 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

448 
	#_IO_fu∆ockfûe
(
_Â
) \

449 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

451 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

452 
	#_IO_Êockfûe
(
_Â
Ë

	)

453 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

454 
	#_IO_·rylockfûe
(
_Â
Ë

	)

455 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

456 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

459 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

460 
_IO_va_li°
, *
__ª°ri˘
);

461 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

462 
_IO_va_li°
);

463 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

464 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

466 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

467 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

469 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

471 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


472 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

473 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

474 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

475 #i‡
__GNUC__
 >= 2

478 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


479 
	~<shlib-com∑t.h
>

480 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

481 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

482 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

483 c⁄° 
_IO_°dö_u£d
;

484 
wók_exã∫
 (
_IO_°dö_u£d
);

487 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


488 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

492 
	#_IO_fwide
(
__Â
, 
__mode
) \

493 ({ 
__ªsu…
 = (
__mode
); \

494 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

496 i‡((
__Â
)->
_mode
 == 0) \

498 (
__Â
)->
_mode
 = -1; \

499 
__ªsu…
 = (
__Â
)->
_mode
; \

501 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

502 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

504 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

505 
__ªsu…
; })

	)

508 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

509 
_IO_va_li°
, *
__ª°ri˘
);

510 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

511 
_IO_va_li°
);

512 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

513 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

516 #ifde‡
__LDBL_COMPAT


517 
	~<bôs/libio-ldbl.h
>

520 #ifde‡
__˝lu•lus


	@/usr/include/linux/filter.h

5 #i‚de‡
__LINUX_FILTER_H__


6 
	#__LINUX_FILTER_H__


	)

9 
	~<löux/ty≥s.h
>

10 
	~<löux/bpf_comm⁄.h
>

15 
	#BPF_MAJOR_VERSION
 1

	)

16 
	#BPF_MINOR_VERSION
 1

	)

23 
	ssock_fûãr
 {

24 
__u16
 
	mcode
;

25 
__u8
 
	mjt
;

26 
__u8
 
	mjf
;

27 
__u32
 
	mk
;

30 
	ssock_Ârog
 {

31 
	mÀn
;

32 
sock_fûãr
 *
	mfûãr
;

36 
	#BPF_RVAL
(
code
Ë((codeË& 0x18)

	)

37 
	#BPF_A
 0x10

	)

40 
	#BPF_MISCOP
(
code
Ë((codeË& 0xf8)

	)

41 
	#BPF_TAX
 0x00

	)

42 
	#BPF_TXA
 0x80

	)

47 #i‚de‡
BPF_STMT


48 
	#BPF_STMT
(
code
, 
k
Ë{ ()(code), 0, 0, k }

	)

50 #i‚de‡
BPF_JUMP


51 
	#BPF_JUMP
(
code
, 
k
, 
jt
, 
jf
Ë{ ()(code), jt, jf, k }

	)

57 
	#BPF_MEMWORDS
 16

	)

64 
	#SKF_AD_OFF
 (-0x1000)

	)

65 
	#SKF_AD_PROTOCOL
 0

	)

66 
	#SKF_AD_PKTTYPE
 4

	)

67 
	#SKF_AD_IFINDEX
 8

	)

68 
	#SKF_AD_NLATTR
 12

	)

69 
	#SKF_AD_NLATTR_NEST
 16

	)

70 
	#SKF_AD_MARK
 20

	)

71 
	#SKF_AD_QUEUE
 24

	)

72 
	#SKF_AD_HATYPE
 28

	)

73 
	#SKF_AD_RXHASH
 32

	)

74 
	#SKF_AD_CPU
 36

	)

75 
	#SKF_AD_ALU_XOR_X
 40

	)

76 
	#SKF_AD_VLAN_TAG
 44

	)

77 
	#SKF_AD_VLAN_TAG_PRESENT
 48

	)

78 
	#SKF_AD_PAY_OFFSET
 52

	)

79 
	#SKF_AD_RANDOM
 56

	)

80 
	#SKF_AD_VLAN_TPID
 60

	)

81 
	#SKF_AD_MAX
 64

	)

83 
	#SKF_NET_OFF
 (-0x100000)

	)

84 
	#SKF_LL_OFF
 (-0x200000)

	)

86 
	#BPF_NET_OFF
 
SKF_NET_OFF


	)

87 
	#BPF_LL_OFF
 
SKF_LL_OFF


	)

	@/usr/include/linux/if_ether.h

21 #i‚de‡
_LINUX_IF_ETHER_H


22 
	#_LINUX_IF_ETHER_H


	)

24 
	~<löux/ty≥s.h
>

31 
	#ETH_ALEN
 6

	)

32 
	#ETH_HLEN
 14

	)

33 
	#ETH_ZLEN
 60

	)

34 
	#ETH_DATA_LEN
 1500

	)

35 
	#ETH_FRAME_LEN
 1514

	)

36 
	#ETH_FCS_LEN
 4

	)

42 
	#ETH_P_LOOP
 0x0060

	)

43 
	#ETH_P_PUP
 0x0200

	)

44 
	#ETH_P_PUPAT
 0x0201

	)

45 
	#ETH_P_TSN
 0x22F0

	)

46 
	#ETH_P_IP
 0x0800

	)

47 
	#ETH_P_X25
 0x0805

	)

48 
	#ETH_P_ARP
 0x0806

	)

49 
	#ETH_P_BPQ
 0x08FF

	)

50 
	#ETH_P_IEEEPUP
 0x0a00

	)

51 
	#ETH_P_IEEEPUPAT
 0x0a01

	)

52 
	#ETH_P_BATMAN
 0x4305

	)

53 
	#ETH_P_DEC
 0x6000

	)

54 
	#ETH_P_DNA_DL
 0x6001

	)

55 
	#ETH_P_DNA_RC
 0x6002

	)

56 
	#ETH_P_DNA_RT
 0x6003

	)

57 
	#ETH_P_LAT
 0x6004

	)

58 
	#ETH_P_DIAG
 0x6005

	)

59 
	#ETH_P_CUST
 0x6006

	)

60 
	#ETH_P_SCA
 0x6007

	)

61 
	#ETH_P_TEB
 0x6558

	)

62 
	#ETH_P_RARP
 0x8035

	)

63 
	#ETH_P_ATALK
 0x809B

	)

64 
	#ETH_P_AARP
 0x80F3

	)

65 
	#ETH_P_8021Q
 0x8100

	)

66 
	#ETH_P_IPX
 0x8137

	)

67 
	#ETH_P_IPV6
 0x86DD

	)

68 
	#ETH_P_PAUSE
 0x8808

	)

69 
	#ETH_P_SLOW
 0x8809

	)

70 
	#ETH_P_WCCP
 0x883E

	)

72 
	#ETH_P_MPLS_UC
 0x8847

	)

73 
	#ETH_P_MPLS_MC
 0x8848

	)

74 
	#ETH_P_ATMMPOA
 0x884¯

	)

75 
	#ETH_P_PPP_DISC
 0x8863

	)

76 
	#ETH_P_PPP_SES
 0x8864

	)

77 
	#ETH_P_LINK_CTL
 0x886¯

	)

78 
	#ETH_P_ATMFATE
 0x8884

	)

81 
	#ETH_P_PAE
 0x888E

	)

82 
	#ETH_P_AOE
 0x88A2

	)

83 
	#ETH_P_8021AD
 0x88A8

	)

84 
	#ETH_P_802_EX1
 0x88B5

	)

85 
	#ETH_P_TIPC
 0x88CA

	)

86 
	#ETH_P_8021AH
 0x88E7

	)

87 
	#ETH_P_MVRP
 0x88F5

	)

88 
	#ETH_P_1588
 0x88F7

	)

89 
	#ETH_P_PRP
 0x88FB

	)

90 
	#ETH_P_FCOE
 0x8906

	)

91 
	#ETH_P_TDLS
 0x890D

	)

92 
	#ETH_P_FIP
 0x8914

	)

93 
	#ETH_P_80221
 0x8917

	)

94 
	#ETH_P_LOOPBACK
 0x9000

	)

95 
	#ETH_P_QINQ1
 0x9100

	)

96 
	#ETH_P_QINQ2
 0x9200

	)

97 
	#ETH_P_QINQ3
 0x9300

	)

98 
	#ETH_P_EDSA
 0xDADA

	)

99 
	#ETH_P_AF_IUCV
 0xFBFB

	)

101 
	#ETH_P_802_3_MIN
 0x0600

	)

108 
	#ETH_P_802_3
 0x0001

	)

109 
	#ETH_P_AX25
 0x0002

	)

110 
	#ETH_P_ALL
 0x0003

	)

111 
	#ETH_P_802_2
 0x0004

	)

112 
	#ETH_P_SNAP
 0x0005

	)

113 
	#ETH_P_DDCMP
 0x0006

	)

114 
	#ETH_P_WAN_PPP
 0x0007

	)

115 
	#ETH_P_PPP_MP
 0x0008

	)

116 
	#ETH_P_LOCALTALK
 0x0009

	)

117 
	#ETH_P_CAN
 0x000C

	)

118 
	#ETH_P_CANFD
 0x000D

	)

119 
	#ETH_P_PPPTALK
 0x0010

	)

120 
	#ETH_P_TR_802_2
 0x0011

	)

121 
	#ETH_P_MOBITEX
 0x0015

	)

122 
	#ETH_P_CONTROL
 0x0016

	)

123 
	#ETH_P_IRDA
 0x0017

	)

124 
	#ETH_P_ECONET
 0x0018

	)

125 
	#ETH_P_HDLC
 0x0019

	)

126 
	#ETH_P_ARCNET
 0x001A

	)

127 
	#ETH_P_DSA
 0x001B

	)

128 
	#ETH_P_TRAILER
 0x001C

	)

129 
	#ETH_P_PHONET
 0x00F5

	)

130 
	#ETH_P_IEEE802154
 0x00F6

	)

131 
	#ETH_P_CAIF
 0x00F7

	)

132 
	#ETH_P_XDSA
 0x00F8

	)

138 
	sëhhdr
 {

139 
	mh_de°
[
ETH_ALEN
];

140 
	mh_sour˚
[
ETH_ALEN
];

141 
__be16
 
	mh_¥Ÿo
;

142 } 
__©åibuã__
((
∑cked
));

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/pcap/bpf.h

72 #i‡!
deföed
(
_NET_BPF_H_
Ë&& !deföed(
_NET_BPF_H_INCLUDED
Ë&& !deföed(
_BPF_H_
Ë&& !deföed(
_H_BPF
Ë&& !deföed(
lib_pˇp_bpf_h
)

73 
	#lib_pˇp_bpf_h


	)

75 #ifde‡
__˝lu•lus


80 
	#BPF_RELEASE
 199606

	)

82 #ifde‡
MSDOS


83 
	tbpf_öt32
;

84 
	tbpf_u_öt32
;

86 
	tbpf_öt32
;

87 
u_öt
 
	tbpf_u_öt32
;

96 #i‚de‡
__NëBSD__


97 
	#BPF_ALIGNMENT
 (
bpf_öt32
)

	)

99 
	#BPF_ALIGNMENT
 ()

	)

101 
	#BPF_WORDALIGN
(
x
Ë(((x)+(
BPF_ALIGNMENT
-1))&~(BPF_ALIGNMENT-1))

	)

106 
	sbpf_¥ogøm
 {

107 
u_öt
 
bf_Àn
;

108 
bpf_ö¢
 *
bf_ö¢s
;

133 
	#DLT_NULL
 0

	)

134 
	#DLT_EN10MB
 1

	)

135 
	#DLT_EN3MB
 2

	)

136 
	#DLT_AX25
 3

	)

137 
	#DLT_PRONET
 4

	)

138 
	#DLT_CHAOS
 5

	)

139 
	#DLT_IEEE802
 6

	)

140 
	#DLT_ARCNET
 7

	)

141 
	#DLT_SLIP
 8

	)

142 
	#DLT_PPP
 9

	)

143 
	#DLT_FDDI
 10

	)

154 
	#DLT_ATM_RFC1483
 11

	)

156 #ifde‡
__O≥nBSD__


157 
	#DLT_RAW
 14

	)

159 
	#DLT_RAW
 12

	)

168 #i‡
deföed
(
__NëBSD__
Ë|| deföed(
__FªeBSD__
)

169 #i‚de‡
DLT_SLIP_BSDOS


170 
	#DLT_SLIP_BSDOS
 13

	)

171 
	#DLT_PPP_BSDOS
 14

	)

174 
	#DLT_SLIP_BSDOS
 15

	)

175 
	#DLT_PPP_BSDOS
 16

	)

206 #i‡
deföed
(
__O≥nBSD__
Ë|| deföed(
__NëBSD__
Ë|| deföed(
__Døg⁄Fly__
Ë|| deföed(
__APPLE__
)

207 
	#DLT_PFSYNC
 18

	)

210 
	#DLT_ATM_CLIP
 19

	)

216 
	#DLT_REDBACK_SMARTEDGE
 32

	)

223 
	#DLT_PPP_SERIAL
 50

	)

224 
	#DLT_PPP_ETHER
 51

	)

233 
	#DLT_SYMANTEC_FIREWALL
 99

	)

252 
	#DLT_MATCHING_MIN
 104

	)

268 
	#DLT_C_HDLC
 104

	)

269 
	#DLT_CHDLC
 
DLT_C_HDLC


	)

271 
	#DLT_IEEE802_11
 105

	)

286 
	#DLT_FRELAY
 107

	)

295 #ifde‡
__O≥nBSD__


296 
	#DLT_LOOP
 12

	)

298 
	#DLT_LOOP
 108

	)

306 #ifde‡
__O≥nBSD__


307 
	#DLT_ENC
 13

	)

309 
	#DLT_ENC
 109

	)

322 
	#DLT_LINUX_SLL
 113

	)

327 
	#DLT_LTALK
 114

	)

332 
	#DLT_ECONET
 115

	)

337 
	#DLT_IPFILTER
 116

	)

342 
	#DLT_PFLOG
 117

	)

347 
	#DLT_CISCO_IOS
 118

	)

354 
	#DLT_PRISM_HEADER
 119

	)

360 
	#DLT_AIRONET_HEADER
 120

	)

400 #ifde‡
__FªeBSD__


401 
	#DLT_PFSYNC
 121

	)

403 
	#DLT_HHDLC
 121

	)

414 
	#DLT_IP_OVER_FC
 122

	)

430 
	#DLT_SUNATM
 123

	)

436 
	#DLT_RIO
 124

	)

437 
	#DLT_PCI_EXP
 125

	)

438 
	#DLT_AURORA
 126

	)

445 
	#DLT_IEEE802_11_RADIO
 127

	)

455 
	#DLT_TZSP
 128

	)

468 
	#DLT_ARCNET_LINUX
 129

	)

476 
	#DLT_JUNIPER_MLPPP
 130

	)

477 
	#DLT_JUNIPER_MLFR
 131

	)

478 
	#DLT_JUNIPER_ES
 132

	)

479 
	#DLT_JUNIPER_GGSN
 133

	)

480 
	#DLT_JUNIPER_MFR
 134

	)

481 
	#DLT_JUNIPER_ATM2
 135

	)

482 
	#DLT_JUNIPER_SERVICES
 136

	)

483 
	#DLT_JUNIPER_ATM1
 137

	)

500 
	#DLT_APPLE_IP_OVER_IEEE1394
 138

	)

506 
	#DLT_MTP2_WITH_PHDR
 139

	)

507 
	#DLT_MTP2
 140

	)

508 
	#DLT_MTP3
 141

	)

509 
	#DLT_SCCP
 142

	)

514 
	#DLT_DOCSIS
 143

	)

531 
	#DLT_LINUX_IRDA
 144

	)

536 
	#DLT_IBM_SP
 145

	)

537 
	#DLT_IBM_SN
 146

	)

564 
	#DLT_USER0
 147

	)

565 
	#DLT_USER1
 148

	)

566 
	#DLT_USER2
 149

	)

567 
	#DLT_USER3
 150

	)

568 
	#DLT_USER4
 151

	)

569 
	#DLT_USER5
 152

	)

570 
	#DLT_USER6
 153

	)

571 
	#DLT_USER7
 154

	)

572 
	#DLT_USER8
 155

	)

573 
	#DLT_USER9
 156

	)

574 
	#DLT_USER10
 157

	)

575 
	#DLT_USER11
 158

	)

576 
	#DLT_USER12
 159

	)

577 
	#DLT_USER13
 160

	)

578 
	#DLT_USER14
 161

	)

579 
	#DLT_USER15
 162

	)

591 
	#DLT_IEEE802_11_RADIO_AVS
 163

	)

599 
	#DLT_JUNIPER_MONITOR
 164

	)

604 
	#DLT_BACNET_MS_TP
 165

	)

620 
	#DLT_PPP_PPPD
 166

	)

626 
	#DLT_PPP_WITH_DIRECTION
 
DLT_PPP_PPPD


	)

627 
	#DLT_LINUX_PPP_WITHDIRECTION
 
DLT_PPP_PPPD


	)

635 
	#DLT_JUNIPER_PPPOE
 167

	)

636 
	#DLT_JUNIPER_PPPOE_ATM
 168

	)

638 
	#DLT_GPRS_LLC
 169

	)

639 
	#DLT_GPF_T
 170

	)

640 
	#DLT_GPF_F
 171

	)

646 
	#DLT_GCOM_T1E1
 172

	)

647 
	#DLT_GCOM_SERIAL
 173

	)

654 
	#DLT_JUNIPER_PIC_PEER
 174

	)

662 
	#DLT_ERF_ETH
 175

	)

663 
	#DLT_ERF_POS
 176

	)

671 
	#DLT_LINUX_LAPD
 177

	)

680 
	#DLT_JUNIPER_ETHER
 178

	)

681 
	#DLT_JUNIPER_PPP
 179

	)

682 
	#DLT_JUNIPER_FRELAY
 180

	)

683 
	#DLT_JUNIPER_CHDLC
 181

	)

688 
	#DLT_MFR
 182

	)

696 
	#DLT_JUNIPER_VP
 183

	)

705 
	#DLT_A429
 184

	)

712 
	#DLT_A653_ICM
 185

	)

718 
	#DLT_USB
 186

	)

724 
	#DLT_BLUETOOTH_HCI_H4
 187

	)

730 
	#DLT_IEEE802_16_MAC_CPS
 188

	)

736 
	#DLT_USB_LINUX
 189

	)

745 
	#DLT_CAN20B
 190

	)

751 
	#DLT_IEEE802_15_4_LINUX
 191

	)

757 
	#DLT_PPI
 192

	)

763 
	#DLT_IEEE802_16_MAC_CPS_RADIO
 193

	)

771 
	#DLT_JUNIPER_ISM
 194

	)

779 
	#DLT_IEEE802_15_4
 195

	)

785 
	#DLT_SITA
 196

	)

792 
	#DLT_ERF
 197

	)

799 
	#DLT_RAIF1
 198

	)

806 
	#DLT_IPMB
 199

	)

813 
	#DLT_JUNIPER_ST
 200

	)

819 
	#DLT_BLUETOOTH_HCI_H4_WITH_PHDR
 201

	)

828 
	#DLT_AX25_KISS
 202

	)

835 
	#DLT_LAPD
 203

	)

843 
	#DLT_PPP_WITH_DIR
 204

	)

844 
	#DLT_C_HDLC_WITH_DIR
 205

	)

845 
	#DLT_FRELAY_WITH_DIR
 206

	)

846 
	#DLT_LAPB_WITH_DIR
 207

	)

857 
	#DLT_IPMB_LINUX
 209

	)

863 
	#DLT_FLEXRAY
 210

	)

870 
	#DLT_MOST
 211

	)

877 
	#DLT_LIN
 212

	)

883 
	#DLT_X2E_SERIAL
 213

	)

889 
	#DLT_X2E_XORAYA
 214

	)

900 
	#DLT_IEEE802_15_4_NONASK_PHY
 215

	)

908 
	#DLT_LINUX_EVDEV
 216

	)

915 
	#DLT_GSMTAP_UM
 217

	)

916 
	#DLT_GSMTAP_ABIS
 218

	)

923 
	#DLT_MPLS
 219

	)

929 
	#DLT_USB_LINUX_MMAPPED
 220

	)

935 
	#DLT_DECT
 221

	)

946 
	#DLT_AOS
 222

	)

955 
	#DLT_WIHART
 223

	)

961 
	#DLT_FC_2
 224

	)

975 
	#DLT_FC_2_WITH_FRAME_DELIMS
 225

	)

1023 
	#DLT_IPNET
 226

	)

1032 
	#DLT_CAN_SOCKETCAN
 227

	)

1038 
	#DLT_IPV4
 228

	)

1039 
	#DLT_IPV6
 229

	)

1046 
	#DLT_IEEE802_15_4_NOFCS
 230

	)

1064 
	#DLT_DBUS
 231

	)

1070 
	#DLT_JUNIPER_VS
 232

	)

1071 
	#DLT_JUNIPER_SRX_E2E
 233

	)

1072 
	#DLT_JUNIPER_FIBRECHANNEL
 234

	)

1084 
	#DLT_DVB_CI
 235

	)

1091 
	#DLT_MUX27010
 236

	)

1097 
	#DLT_STANAG_5066_D_PDU
 237

	)

1103 
	#DLT_JUNIPER_ATM_CEMIC
 238

	)

1111 
	#DLT_NFLOG
 239

	)

1121 
	#DLT_NETANALYZER
 240

	)

1132 
	#DLT_NETANALYZER_TRANSPARENT
 241

	)

1139 
	#DLT_IPOIB
 242

	)

1146 
	#DLT_MPEG_2_TS
 243

	)

1154 
	#DLT_NG40
 244

	)

1164 
	#DLT_NFC_LLCP
 245

	)

1173 #i‡!
deföed
(
__FªeBSD__
Ë&& !deföed(
__O≥nBSD__
Ë&& !deföed(
__NëBSD__
Ë&& !deföed(
__Døg⁄Fly__
Ë&& !deföed(
__APPLE__
)

1174 
	#DLT_PFSYNC
 246

	)

1182 
	#DLT_INFINIBAND
 247

	)

1189 
	#DLT_SCTP
 248

	)

1196 
	#DLT_USBPCAP
 249

	)

1204 
	#DLT_RTAC_SERIAL
 250

	)

1211 
	#DLT_BLUETOOTH_LE_LL
 251

	)

1224 
	#DLT_WIRESHARK_UPPER_PDU
 252

	)

1229 
	#DLT_NETLINK
 253

	)

1234 
	#DLT_BLUETOOTH_LINUX_MONITOR
 254

	)

1240 
	#DLT_BLUETOOTH_BREDR_BB
 255

	)

1245 
	#DLT_BLUETOOTH_LE_LL_WITH_PHDR
 256

	)

1250 
	#DLT_PROFIBUS_DL
 257

	)

1296 #ifde‡
__APPLE__


1297 
	#DLT_PKTAP
 
DLT_USER2


	)

1299 
	#DLT_PKTAP
 258

	)

1307 
	#DLT_EPON
 259

	)

1313 
	#DLT_IPMI_HPM_2
 260

	)

1318 
	#DLT_ZWAVE_R1_R2
 261

	)

1319 
	#DLT_ZWAVE_R3
 262

	)

1325 
	#DLT_WATTSTOPPER_DLM
 263

	)

1327 
	#DLT_MATCHING_MAX
 263

	)

1334 
	#DLT_CLASS
(
x
Ë((xË& 0x03ff0000)

	)

1343 
	#DLT_CLASS_NETBSD_RAWAF
 0x02240000

	)

1344 
	#DLT_NETBSD_RAWAF
(
af
Ë(
DLT_CLASS_NETBSD_RAWAF
 | (af))

	)

1345 
	#DLT_NETBSD_RAWAF_AF
(
x
Ë((xË& 0x0000ffff)

	)

1346 
	#DLT_IS_NETBSD_RAWAF
(
x
Ë(
	`DLT_CLASS
(xË=
DLT_CLASS_NETBSD_RAWAF
)

	)

1363 
	#BPF_CLASS
(
code
Ë((codeË& 0x07)

	)

1364 
	#BPF_LD
 0x00

	)

1365 
	#BPF_LDX
 0x01

	)

1366 
	#BPF_ST
 0x02

	)

1367 
	#BPF_STX
 0x03

	)

1368 
	#BPF_ALU
 0x04

	)

1369 
	#BPF_JMP
 0x05

	)

1370 
	#BPF_RET
 0x06

	)

1371 
	#BPF_MISC
 0x07

	)

1374 
	#BPF_SIZE
(
code
Ë((codeË& 0x18)

	)

1375 
	#BPF_W
 0x00

	)

1376 
	#BPF_H
 0x08

	)

1377 
	#BPF_B
 0x10

	)

1379 
	#BPF_MODE
(
code
Ë((codeË& 0xe0)

	)

1380 
	#BPF_IMM
 0x00

	)

1381 
	#BPF_ABS
 0x20

	)

1382 
	#BPF_IND
 0x40

	)

1383 
	#BPF_MEM
 0x60

	)

1384 
	#BPF_LEN
 0x80

	)

1385 
	#BPF_MSH
 0xa0

	)

1390 
	#BPF_OP
(
code
Ë((codeË& 0xf0)

	)

1391 
	#BPF_ADD
 0x00

	)

1392 
	#BPF_SUB
 0x10

	)

1393 
	#BPF_MUL
 0x20

	)

1394 
	#BPF_DIV
 0x30

	)

1395 
	#BPF_OR
 0x40

	)

1396 
	#BPF_AND
 0x50

	)

1397 
	#BPF_LSH
 0x60

	)

1398 
	#BPF_RSH
 0x70

	)

1399 
	#BPF_NEG
 0x80

	)

1400 
	#BPF_MOD
 0x90

	)

1401 
	#BPF_XOR
 0xa0

	)

1408 
	#BPF_JA
 0x00

	)

1409 
	#BPF_JEQ
 0x10

	)

1410 
	#BPF_JGT
 0x20

	)

1411 
	#BPF_JGE
 0x30

	)

1412 
	#BPF_JSET
 0x40

	)

1424 
	#BPF_SRC
(
code
Ë((codeË& 0x08)

	)

1425 
	#BPF_K
 0x00

	)

1426 
	#BPF_X
 0x08

	)

1429 
	#BPF_RVAL
(
code
Ë((codeË& 0x18)

	)

1430 
	#BPF_A
 0x10

	)

1434 
	#BPF_MISCOP
(
code
Ë((codeË& 0xf8)

	)

1435 
	#BPF_TAX
 0x00

	)

1452 
	#BPF_TXA
 0x80

	)

1472 
	sbpf_ö¢
 {

1473 
u_sh‹t
 
code
;

1474 
u_ch¨
 
jt
;

1475 
u_ch¨
 
jf
;

1476 
bpf_u_öt32
 
k
;

1484 
	sbpf_aux_d©a
 {

1485 
u_sh‹t
 
vœn_èg_¥e£¡
;

1486 
u_sh‹t
 
vœn_èg
;

1492 
	#BPF_STMT
(
code
, 
k
Ë{ (
u_sh‹t
)(code), 0, 0, k }

	)

1493 
	#BPF_JUMP
(
code
, 
k
, 
jt
, 
jf
Ë{ (
u_sh‹t
)(code), jt, jf, k }

	)

1495 #i‡
__STDC__
 || 
deföed
(
__˝lu•lus
)

1496 
bpf_vÆid©e
(c⁄° 
bpf_ö¢
 *, );

1497 
u_öt
 
bpf_fûãr
(c⁄° 
bpf_ö¢
 *, c⁄° 
u_ch¨
 *, u_int, u_int);

1498 
u_öt
 
bpf_fûãr_wôh_aux_d©a
(c⁄° 
bpf_ö¢
 *, c⁄° 
u_ch¨
 *, u_öt, u_öt, c⁄° 
bpf_aux_d©a
 *);

1500 
bpf_vÆid©e
();

1501 
u_öt
 
bpf_fûãr
();

1502 
u_öt
 
bpf_fûãr
();

1508 
	#BPF_MEMWORDS
 16

	)

1510 #ifde‡
__˝lu•lus


	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (c⁄° *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (c⁄° *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

30 #ifde‡
__USE_XOPEN2K


31 
	#__√ed_time_t


	)

32 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/sys/poll.h

19 #i‚def 
_SYS_POLL_H


20 
	#_SYS_POLL_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/pﬁl.h
>

26 #ifde‡
__USE_GNU


28 
	~<bôs/sig£t.h
>

30 
	#__√ed_time•ec


	)

31 
	~<time.h
>

36 
	tnfds_t
;

39 
	spﬁlfd


41 
	mfd
;

42 
	mevíts
;

43 
	mªvíts
;

47 
__BEGIN_DECLS


57 
pﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
);

59 #ifde‡
__USE_GNU


66 
µﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

67 c⁄° 
time•ec
 *
__timeout
,

68 c⁄° 
__sig£t_t
 *
__ss
);

71 
	g__END_DECLS


75 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


76 
	~<bôs/pﬁl2.h
>

	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/sig£t.h
>

35 #i‚de‡
__sig£t_t_deföed


36 
	#__sig£t_t_deföed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__√ed_time_t


	)

42 
	#__√ed_time•ec


	)

43 
	~<time.h
>

44 
	#__√ed_timevÆ


	)

45 
	~<bôs/time.h
>

47 #i‚de‡
__su£c⁄ds_t_deföed


48 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

49 
	#__su£c⁄ds_t_deföed


	)

54 
	t__fd_mask
;

57 #unde‡
__NFDBITS


59 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

60 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

61 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë(1UL << ((dË% 
__NFDBITS
)))

	)

68 #ifde‡
__USE_XOPEN


69 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

70 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

72 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

75 } 
	tfd_£t
;

78 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

80 #ifde‡
__USE_MISC


82 
__fd_mask
 
	tfd_mask
;

85 
	#NFDBITS
 
__NFDBITS


	)

90 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

91 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

92 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

93 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

96 
__BEGIN_DECLS


106 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

107 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

108 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

109 
timevÆ
 *
__ª°ri˘
 
__timeout
);

111 #ifde‡
__USE_XOPEN2K


118 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

119 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

120 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

121 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

122 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

127 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


128 
	~<bôs/£À˘2.h
>

131 
	g__END_DECLS


	@/usr/include/sys/socket.h

19 #i‚def 
_SYS_SOCKET_H


20 
	#_SYS_SOCKET_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


26 
	~<sys/uio.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

29 #ifde‡
__USE_GNU


31 
	~<bôs/sig£t.h
>

38 
	~<bôs/sockë.h
>

40 #ifde‡
__USE_MISC


43 
	sosockaddr


45 
	mß_Ámûy
;

46 
	mß_d©a
[14];

54 
	mSHUT_RD
 = 0,

55 
	#SHUT_RD
 
SHUT_RD


	)

56 
	mSHUT_WR
,

57 
	#SHUT_WR
 
SHUT_WR


	)

58 
	mSHUT_RDWR


59 
	#SHUT_RDWR
 
SHUT_RDWR


	)

68 #i‡
deföed
 
__˝lu•lus
 || !
__GNUC_PREREQ
 (2, 7Ë|| !deföed 
__USE_GNU


69 
	#__SOCKADDR_ARG
 
sockaddr
 *
__ª°ri˘


	)

70 
	#__CONST_SOCKADDR_ARG
 c⁄° 
sockaddr
 *

	)

74 
	#__SOCKADDR_ALLTYPES
 \

75 
	`__SOCKADDR_ONETYPE
 (
sockaddr
) \

76 
	`__SOCKADDR_ONETYPE
 (
sockaddr_©
) \

77 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ax25
) \

78 
	`__SOCKADDR_ONETYPE
 (
sockaddr_dl
) \

79 
	`__SOCKADDR_ONETYPE
 (
sockaddr_e⁄
) \

80 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö
) \

81 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö6
) \

82 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö¨p
) \

83 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ùx
) \

84 
	`__SOCKADDR_ONETYPE
 (
sockaddr_iso
) \

85 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ns
) \

86 
	`__SOCKADDR_ONETYPE
 (
sockaddr_un
) \

87 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x25
)

	)

89 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

90 uni⁄ { 
	m__SOCKADDR_ALLTYPES


91 } 
	t__SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

92 #unde‡
__SOCKADDR_ONETYPE


93 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëc⁄° ty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

94 uni⁄ { 
	m__SOCKADDR_ALLTYPES


95 } 
	t__CONST_SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

96 #unde‡
__SOCKADDR_ONETYPE


99 #ifde‡
__USE_GNU


101 
	smmsghdr


103 
msghdr
 
	mmsg_hdr
;

104 
	mmsg_Àn
;

113 
	$sockë
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
Ë
__THROW
;

119 
	$sockë∑ú
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
,

120 
__fds
[2]Ë
__THROW
;

123 
	$böd
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
)

124 
__THROW
;

127 
	$gësock«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

128 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

137 
	`c⁄√˘
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
);

141 
	$gë≥î«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

142 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

149 
ssize_t
 
	`£nd
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
, 
__Êags
);

156 
ssize_t
 
	`ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
);

163 
ssize_t
 
	`£ndto
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

164 
__Êags
, 
__CONST_SOCKADDR_ARG
 
__addr
,

165 
sockÀn_t
 
__addr_Àn
);

174 
ssize_t
 
	`ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

175 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

176 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

184 
ssize_t
 
	`£ndmsg
 (
__fd
, c⁄° 
msghdr
 *
__mesßge
,

185 
__Êags
);

187 #ifde‡
__USE_GNU


193 
	`£ndmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

194 
__vÀn
, 
__Êags
);

202 
ssize_t
 
	`ªcvmsg
 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
);

204 #ifde‡
__USE_GNU


210 
	`ªcvmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

211 
__vÀn
, 
__Êags
,

212 
time•ec
 *
__tmo
);

219 
	$gësock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

220 *
__ª°ri˘
 
__›tvÆ
,

221 
sockÀn_t
 *
__ª°ri˘
 
__›éí
Ë
__THROW
;

226 
	$£tsock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

227 c⁄° *
__›tvÆ
, 
sockÀn_t
 
__›éí
Ë
__THROW
;

233 
	$li°í
 (
__fd
, 
__n
Ë
__THROW
;

243 
	`ac˚±
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

244 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

246 #ifde‡
__USE_GNU


251 
	`ac˚±4
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

252 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
, 
__Êags
);

261 
	$shutdown
 (
__fd
, 
__how
Ë
__THROW
;

264 #ifde‡
__USE_XOPEN2K


266 
	$sock©m¨k
 (
__fd
Ë
__THROW
;

270 #ifde‡
__USE_MISC


274 
	$isfdty≥
 (
__fd
, 
__fdty≥
Ë
__THROW
;

279 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


280 
	~<bôs/sockë2.h
>

283 
__END_DECLS


	@/usr/include/sys/sysmacros.h

19 #i‚de‡
_SYS_SYSMACROS_H


20 
	#_SYS_SYSMACROS_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


26 
__exãnsi⁄__


27 
	$gnu_dev_maj‹
 (
__dev
)

28 
__THROW
 
__©åibuã_c⁄°__
;

29 
__exãnsi⁄__


30 
	$gnu_dev_mö‹
 (
__dev
)

31 
__THROW
 
__©åibuã_c⁄°__
;

32 
__exãnsi⁄__


33 
	$gnu_dev_makedev
 (
__maj‹
,

34 
__mö‹
)

35 
__THROW
 
__©åibuã_c⁄°__
;

37 #ifde‡
__USE_EXTERN_INLINES


38 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

39 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

41  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

42 
	}
}

44 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

45 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

47  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

48 
	}
}

50 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

51 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

53  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

54 | (((Ë(
__mö‹
 & ~0xff)) << 12)

55 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

56 
	}
}

58 
	g__END_DECLS


61 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

62 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

63 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/sys/ucontext.h

18 #i‚de‡
_SYS_UCONTEXT_H


19 
	#_SYS_UCONTEXT_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sig«l.h
>

26 
	~<bôs/sigc⁄ãxt.h
>

28 #ifde‡
__x86_64__


31 
__exãnsi⁄__
 
	tgªg_t
;

34 
	#NGREG
 23

	)

37 
gªg_t
 
	tgªg£t_t
[
NGREG
];

39 #ifde‡
__USE_GNU


43 
	mREG_R8
 = 0,

44 
	#REG_R8
 
REG_R8


	)

45 
	mREG_R9
,

46 
	#REG_R9
 
REG_R9


	)

47 
	mREG_R10
,

48 
	#REG_R10
 
REG_R10


	)

49 
	mREG_R11
,

50 
	#REG_R11
 
REG_R11


	)

51 
	mREG_R12
,

52 
	#REG_R12
 
REG_R12


	)

53 
	mREG_R13
,

54 
	#REG_R13
 
REG_R13


	)

55 
	mREG_R14
,

56 
	#REG_R14
 
REG_R14


	)

57 
	mREG_R15
,

58 
	#REG_R15
 
REG_R15


	)

59 
	mREG_RDI
,

60 
	#REG_RDI
 
REG_RDI


	)

61 
	mREG_RSI
,

62 
	#REG_RSI
 
REG_RSI


	)

63 
	mREG_RBP
,

64 
	#REG_RBP
 
REG_RBP


	)

65 
	mREG_RBX
,

66 
	#REG_RBX
 
REG_RBX


	)

67 
	mREG_RDX
,

68 
	#REG_RDX
 
REG_RDX


	)

69 
	mREG_RAX
,

70 
	#REG_RAX
 
REG_RAX


	)

71 
	mREG_RCX
,

72 
	#REG_RCX
 
REG_RCX


	)

73 
	mREG_RSP
,

74 
	#REG_RSP
 
REG_RSP


	)

75 
	mREG_RIP
,

76 
	#REG_RIP
 
REG_RIP


	)

77 
	mREG_EFL
,

78 
	#REG_EFL
 
REG_EFL


	)

79 
	mREG_CSGSFS
,

80 
	#REG_CSGSFS
 
REG_CSGSFS


	)

81 
	mREG_ERR
,

82 
	#REG_ERR
 
REG_ERR


	)

83 
	mREG_TRAPNO
,

84 
	#REG_TRAPNO
 
REG_TRAPNO


	)

85 
	mREG_OLDMASK
,

86 
	#REG_OLDMASK
 
REG_OLDMASK


	)

87 
	mREG_CR2


88 
	#REG_CR2
 
REG_CR2


	)

92 
	s_libc_Âxªg


94 
	msignifiˇnd
[4];

95 
	mexp⁄ít
;

96 
	m∑ddög
[3];

99 
	s_libc_xmmªg


101 
__uöt32_t
 
	mñemít
[4];

104 
	s_libc_Â°©e


107 
__uöt16_t
 
	mcwd
;

108 
__uöt16_t
 
	mswd
;

109 
__uöt16_t
 
	m·w
;

110 
__uöt16_t
 
	mf›
;

111 
__uöt64_t
 
	mrù
;

112 
__uöt64_t
 
	mrdp
;

113 
__uöt32_t
 
	mmxc§
;

114 
__uöt32_t
 
	mmx¸_mask
;

115 
_libc_Âxªg
 
	m_°
[8];

116 
_libc_xmmªg
 
	m_xmm
[16];

117 
__uöt32_t
 
	m∑ddög
[24];

121 
_libc_Â°©e
 *
	tÂªg£t_t
;

126 
gªg£t_t
 
	mgªgs
;

128 
Âªg£t_t
 
	mÂªgs
;

129 
__exãnsi⁄__
 
	m__ª£rved1
 [8];

130 } 
	tmc⁄ãxt_t
;

133 
	suc⁄ãxt


135 
	muc_Êags
;

136 
uc⁄ãxt
 *
	muc_lök
;

137 
°ack_t
 
	muc_°ack
;

138 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

139 
__sig£t_t
 
	muc_sigmask
;

140 
_libc_Â°©e
 
	m__Âªgs_mem
;

141 } 
	tuc⁄ãxt_t
;

146 
	tgªg_t
;

149 
	#NGREG
 19

	)

152 
gªg_t
 
	tgªg£t_t
[
NGREG
];

154 #ifde‡
__USE_GNU


158 
	mREG_GS
 = 0,

159 
	#REG_GS
 
REG_GS


	)

160 
	mREG_FS
,

161 
	#REG_FS
 
REG_FS


	)

162 
	mREG_ES
,

163 
	#REG_ES
 
REG_ES


	)

164 
	mREG_DS
,

165 
	#REG_DS
 
REG_DS


	)

166 
	mREG_EDI
,

167 
	#REG_EDI
 
REG_EDI


	)

168 
	mREG_ESI
,

169 
	#REG_ESI
 
REG_ESI


	)

170 
	mREG_EBP
,

171 
	#REG_EBP
 
REG_EBP


	)

172 
	mREG_ESP
,

173 
	#REG_ESP
 
REG_ESP


	)

174 
	mREG_EBX
,

175 
	#REG_EBX
 
REG_EBX


	)

176 
	mREG_EDX
,

177 
	#REG_EDX
 
REG_EDX


	)

178 
	mREG_ECX
,

179 
	#REG_ECX
 
REG_ECX


	)

180 
	mREG_EAX
,

181 
	#REG_EAX
 
REG_EAX


	)

182 
	mREG_TRAPNO
,

183 
	#REG_TRAPNO
 
REG_TRAPNO


	)

184 
	mREG_ERR
,

185 
	#REG_ERR
 
REG_ERR


	)

186 
	mREG_EIP
,

187 
	#REG_EIP
 
REG_EIP


	)

188 
	mREG_CS
,

189 
	#REG_CS
 
REG_CS


	)

190 
	mREG_EFL
,

191 
	#REG_EFL
 
REG_EFL


	)

192 
	mREG_UESP
,

193 
	#REG_UESP
 
REG_UESP


	)

194 
	mREG_SS


195 
	#REG_SS
 
REG_SS


	)

200 
	s_libc_Âªg


202 
	msignifiˇnd
[4];

203 
	mexp⁄ít
;

206 
	s_libc_Â°©e


208 
	mcw
;

209 
	msw
;

210 
	mèg
;

211 
	mùoff
;

212 
	mcs£l
;

213 
	md©aoff
;

214 
	md©a£l
;

215 
_libc_Âªg
 
	m_°
[8];

216 
	m°©us
;

220 
_libc_Â°©e
 *
	tÂªg£t_t
;

225 
gªg£t_t
 
	mgªgs
;

228 
Âªg£t_t
 
	mÂªgs
;

229 
	mﬁdmask
;

230 
	m¸2
;

231 } 
	tmc⁄ãxt_t
;

234 
	suc⁄ãxt


236 
	muc_Êags
;

237 
uc⁄ãxt
 *
	muc_lök
;

238 
°ack_t
 
	muc_°ack
;

239 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

240 
__sig£t_t
 
	muc_sigmask
;

241 
_libc_Â°©e
 
	m__Âªgs_mem
;

242 } 
	tuc⁄ãxt_t
;

	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/asm/ioctls.h

1 
	~<asm-gíîic/io˘ls.h
>

	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/fcntl-linux.h

19 #i‚def 
_FCNTL_H


37 #ifde‡
__USE_GNU


38 
	~<bôs/uio.h
>

42 
	#O_ACCMODE
 0003

	)

43 
	#O_RDONLY
 00

	)

44 
	#O_WRONLY
 01

	)

45 
	#O_RDWR
 02

	)

46 #i‚de‡
O_CREAT


47 
	#O_CREAT
 0100

	)

49 #i‚de‡
O_EXCL


50 
	#O_EXCL
 0200

	)

52 #i‚de‡
O_NOCTTY


53 
	#O_NOCTTY
 0400

	)

55 #i‚de‡
O_TRUNC


56 
	#O_TRUNC
 01000

	)

58 #i‚de‡
O_APPEND


59 
	#O_APPEND
 02000

	)

61 #i‚de‡
O_NONBLOCK


62 
	#O_NONBLOCK
 04000

	)

64 #i‚de‡
O_NDELAY


65 
	#O_NDELAY
 
O_NONBLOCK


	)

67 #i‚de‡
O_SYNC


68 
	#O_SYNC
 04010000

	)

70 
	#O_FSYNC
 
O_SYNC


	)

71 #i‚de‡
O_ASYNC


72 
	#O_ASYNC
 020000

	)

74 #i‚de‡
__O_LARGEFILE


75 
	#__O_LARGEFILE
 0100000

	)

78 #i‚de‡
__O_DIRECTORY


79 
	#__O_DIRECTORY
 0200000

	)

81 #i‚de‡
__O_NOFOLLOW


82 
	#__O_NOFOLLOW
 0400000

	)

84 #i‚de‡
__O_CLOEXEC


85 
	#__O_CLOEXEC
 02000000

	)

87 #i‚de‡
__O_DIRECT


88 
	#__O_DIRECT
 040000

	)

90 #i‚de‡
__O_NOATIME


91 
	#__O_NOATIME
 01000000

	)

93 #i‚de‡
__O_PATH


94 
	#__O_PATH
 010000000

	)

96 #i‚de‡
__O_DSYNC


97 
	#__O_DSYNC
 010000

	)

99 #i‚de‡
__O_TMPFILE


100 
	#__O_TMPFILE
 (020000000 | 
__O_DIRECTORY
)

	)

103 #i‚de‡
F_GETLK


104 #i‚de‡
__USE_FILE_OFFSET64


105 
	#F_GETLK
 5

	)

106 
	#F_SETLK
 6

	)

107 
	#F_SETLKW
 7

	)

109 
	#F_GETLK
 
F_GETLK64


	)

110 
	#F_SETLK
 
F_SETLK64


	)

111 
	#F_SETLKW
 
F_SETLKW64


	)

114 #i‚de‡
F_GETLK64


115 
	#F_GETLK64
 12

	)

116 
	#F_SETLK64
 13

	)

117 
	#F_SETLKW64
 14

	)

131 #ifde‡
__USE_GNU


132 
	#F_OFD_GETLK
 36

	)

133 
	#F_OFD_SETLK
 37

	)

134 
	#F_OFD_SETLKW
 38

	)

137 #ifde‡
__USE_LARGEFILE64


138 
	#O_LARGEFILE
 
__O_LARGEFILE


	)

141 #ifde‡
__USE_XOPEN2K8


142 
	#O_DIRECTORY
 
__O_DIRECTORY


	)

143 
	#O_NOFOLLOW
 
__O_NOFOLLOW


	)

144 
	#O_CLOEXEC
 
__O_CLOEXEC


	)

147 #ifde‡
__USE_GNU


148 
	#O_DIRECT
 
__O_DIRECT


	)

149 
	#O_NOATIME
 
__O_NOATIME


	)

150 
	#O_PATH
 
__O_PATH


	)

151 
	#O_TMPFILE
 
__O_TMPFILE


	)

157 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


158 
	#O_DSYNC
 
__O_DSYNC


	)

159 #i‡
deföed
 
__O_RSYNC


160 
	#O_RSYNC
 
__O_RSYNC


	)

162 
	#O_RSYNC
 
O_SYNC


	)

167 
	#F_DUPFD
 0

	)

168 
	#F_GETFD
 1

	)

169 
	#F_SETFD
 2

	)

170 
	#F_GETFL
 3

	)

171 
	#F_SETFL
 4

	)

173 #i‚de‡
__F_SETOWN


174 
	#__F_SETOWN
 8

	)

175 
	#__F_GETOWN
 9

	)

178 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


179 
	#F_SETOWN
 
__F_SETOWN


	)

180 
	#F_GETOWN
 
__F_GETOWN


	)

183 #i‚de‡
__F_SETSIG


184 
	#__F_SETSIG
 10

	)

185 
	#__F_GETSIG
 11

	)

187 #i‚de‡
__F_SETOWN_EX


188 
	#__F_SETOWN_EX
 15

	)

189 
	#__F_GETOWN_EX
 16

	)

192 #ifde‡
__USE_GNU


193 
	#F_SETSIG
 
__F_SETSIG


	)

194 
	#F_GETSIG
 
__F_GETSIG


	)

195 
	#F_SETOWN_EX
 
__F_SETOWN_EX


	)

196 
	#F_GETOWN_EX
 
__F_GETOWN_EX


	)

199 #ifde‡
__USE_GNU


200 
	#F_SETLEASE
 1024

	)

201 
	#F_GETLEASE
 1025

	)

202 
	#F_NOTIFY
 1026

	)

203 
	#F_SETPIPE_SZ
 1031

	)

204 
	#F_GETPIPE_SZ
 1032

	)

206 #ifde‡
__USE_XOPEN2K8


207 
	#F_DUPFD_CLOEXEC
 1030

	)

212 
	#FD_CLOEXEC
 1

	)

214 #i‚de‡
F_RDLCK


216 
	#F_RDLCK
 0

	)

217 
	#F_WRLCK
 1

	)

218 
	#F_UNLCK
 2

	)

223 #i‚de‡
F_EXLCK


224 
	#F_EXLCK
 4

	)

225 
	#F_SHLCK
 8

	)

228 #ifde‡
__USE_MISC


230 
	#LOCK_SH
 1

	)

231 
	#LOCK_EX
 2

	)

232 
	#LOCK_NB
 4

	)

234 
	#LOCK_UN
 8

	)

237 #ifde‡
__USE_GNU


238 
	#LOCK_MAND
 32

	)

239 
	#LOCK_READ
 64

	)

240 
	#LOCK_WRITE
 128

	)

241 
	#LOCK_RW
 192

	)

244 #ifde‡
__USE_GNU


246 
	#DN_ACCESS
 0x00000001

	)

247 
	#DN_MODIFY
 0x00000002

	)

248 
	#DN_CREATE
 0x00000004

	)

249 
	#DN_DELETE
 0x00000008

	)

250 
	#DN_RENAME
 0x00000010

	)

251 
	#DN_ATTRIB
 0x00000020

	)

252 
	#DN_MULTISHOT
 0x80000000

	)

256 #ifde‡
__USE_GNU


258 
	e__pid_ty≥


260 
	mF_OWNER_TID
 = 0,

261 
	mF_OWNER_PID
,

262 
	mF_OWNER_PGRP
,

263 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


267 
	sf_ow√r_ex


269 
__pid_ty≥
 
	mty≥
;

270 
__pid_t
 
	mpid
;

276 #ifdef 
__USE_MISC


277 
	#FAPPEND
 
O_APPEND


	)

278 
	#FFSYNC
 
O_FSYNC


	)

279 
	#FASYNC
 
O_ASYNC


	)

280 
	#FNONBLOCK
 
O_NONBLOCK


	)

281 
	#FNDELAY
 
O_NDELAY


	)

284 #i‚de‡
__POSIX_FADV_DONTNEED


285 
	#__POSIX_FADV_DONTNEED
 4

	)

286 
	#__POSIX_FADV_NOREUSE
 5

	)

289 #ifde‡
__USE_XOPEN2K


290 
	#POSIX_FADV_NORMAL
 0

	)

291 
	#POSIX_FADV_RANDOM
 1

	)

292 
	#POSIX_FADV_SEQUENTIAL
 2

	)

293 
	#POSIX_FADV_WILLNEED
 3

	)

294 
	#POSIX_FADV_DONTNEED
 
__POSIX_FADV_DONTNEED


	)

295 
	#POSIX_FADV_NOREUSE
 
__POSIX_FADV_NOREUSE


	)

299 #ifde‡
__USE_GNU


301 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

304 
	#SYNC_FILE_RANGE_WRITE
 2

	)

307 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

312 
	#SPLICE_F_MOVE
 1

	)

313 
	#SPLICE_F_NONBLOCK
 2

	)

316 
	#SPLICE_F_MORE
 4

	)

317 
	#SPLICE_F_GIFT
 8

	)

321 
	#FALLOC_FL_KEEP_SIZE
 1

	)

324 
	#FALLOC_FL_PUNCH_HOLE
 2

	)

325 
	#FALLOC_FL_COLLAPSE_RANGE
 8

	)

328 
	#FALLOC_FL_ZERO_RANGE
 16

	)

333 
	sfûe_h™dÀ


335 
	mh™dÀ_byãs
;

336 
	mh™dÀ_ty≥
;

338 
	mf_h™dÀ
[0];

342 
	#MAX_HANDLE_SZ
 128

	)

346 #ifde‡
__USE_ATFILE


347 
	#AT_FDCWD
 -100

	)

350 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

351 
	#AT_REMOVEDIR
 0x200

	)

353 
	#AT_SYMLINK_FOLLOW
 0x400

	)

354 #ifde‡
__USE_GNU


355 
	#AT_NO_AUTOMOUNT
 0x800

	)

357 
	#AT_EMPTY_PATH
 0x1000

	)

359 
	#AT_EACCESS
 0x200

	)

363 
	g__BEGIN_DECLS


365 #ifde‡
__USE_GNU


368 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

369 
__THROW
;

376 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

377 
__Êags
);

384 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

385 
size_t
 
__cou¡
, 
__Êags
);

391 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

392 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

393 
__Êags
);

399 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

400 
__Êags
);

406 #i‚de‡
__USE_FILE_OFFSET64


407 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

409 #ifde‡
__REDIRECT


410 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

411 
__off64_t
 
__Àn
),

412 
ÁŒoˇã64
);

414 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

417 #ifde‡
__USE_LARGEFILE64


418 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

419 
__off64_t
 
__Àn
);

424 
	$«me_to_h™dÀ_©
 (
__dfd
, c⁄° *
__«me
,

425 
fûe_h™dÀ
 *
__h™dÀ
, *
__m¡_id
,

426 
__Êags
Ë
__THROW
;

432 
	`›í_by_h™dÀ_©
 (
__mou¡dúfd
, 
fûe_h™dÀ
 *
__h™dÀ
,

433 
__Êags
);

437 
__END_DECLS


	@/usr/include/bits/libio-ldbl.h

19 #i‚de‡
_IO_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

24 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/libm-simd-decl-stubs.h

19 #i‚de‡
_MATH_H


33 #i‚de‡
_BITS_LIBM_SIMD_DECL_STUBS_H


34 
	#_BITS_LIBM_SIMD_DECL_STUBS_H
 1

	)

36 
	#__DECL_SIMD_cos


	)

37 
	#__DECL_SIMD_cosf


	)

38 
	#__DECL_SIMD_co¶


	)

40 
	#__DECL_SIMD_sö


	)

41 
	#__DECL_SIMD_söf


	)

42 
	#__DECL_SIMD_söl


	)

44 
	#__DECL_SIMD_söcos


	)

45 
	#__DECL_SIMD_söcosf


	)

46 
	#__DECL_SIMD_söco¶


	)

48 
	#__DECL_SIMD_log


	)

49 
	#__DECL_SIMD_logf


	)

50 
	#__DECL_SIMD_logl


	)

52 
	#__DECL_SIMD_exp


	)

53 
	#__DECL_SIMD_expf


	)

54 
	#__DECL_SIMD_ex∂


	)

56 
	#__DECL_SIMD_pow


	)

57 
	#__DECL_SIMD_powf


	)

58 
	#__DECL_SIMD_powl


	)

	@/usr/include/bits/local_lim.h

24 #i‚de‡
NR_OPEN


25 
	#__undef_NR_OPEN


	)

27 #i‚de‡
LINK_MAX


28 
	#__undef_LINK_MAX


	)

30 #i‚de‡
OPEN_MAX


31 
	#__undef_OPEN_MAX


	)

33 #i‚de‡
ARG_MAX


34 
	#__undef_ARG_MAX


	)

38 
	~<löux/limôs.h
>

41 #ifde‡
__undef_NR_OPEN


42 #unde‡
NR_OPEN


43 #unde‡
__undef_NR_OPEN


46 #ifde‡
__undef_LINK_MAX


47 #unde‡
LINK_MAX


48 #unde‡
__undef_LINK_MAX


51 #ifde‡
__undef_OPEN_MAX


52 #unde‡
OPEN_MAX


53 #unde‡
__undef_OPEN_MAX


56 #ifde‡
__undef_ARG_MAX


57 #unde‡
ARG_MAX


58 #unde‡
__undef_ARG_MAX


62 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

64 
	#PTHREAD_KEYS_MAX
 1024

	)

67 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

69 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

72 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

74 #unde‡
PTHREAD_THREADS_MAX


78 
	#AIO_PRIO_DELTA_MAX
 20

	)

81 
	#PTHREAD_STACK_MIN
 16384

	)

84 
	#DELAYTIMER_MAX
 2147483647

	)

87 
	#TTY_NAME_MAX
 32

	)

90 
	#LOGIN_NAME_MAX
 256

	)

93 
	#HOST_NAME_MAX
 64

	)

96 
	#MQ_PRIO_MAX
 32768

	)

99 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/poll.h

18 #i‚de‡
_SYS_POLL_H


25 
	#POLLIN
 0x001

	)

26 
	#POLLPRI
 0x002

	)

27 
	#POLLOUT
 0x004

	)

29 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


31 
	#POLLRDNORM
 0x040

	)

32 
	#POLLRDBAND
 0x080

	)

33 
	#POLLWRNORM
 0x100

	)

34 
	#POLLWRBAND
 0x200

	)

37 #ifde‡
__USE_GNU


39 
	#POLLMSG
 0x400

	)

40 
	#POLLREMOVE
 0x1000

	)

41 
	#POLLRDHUP
 0x2000

	)

47 
	#POLLERR
 0x008

	)

48 
	#POLLHUP
 0x010

	)

49 
	#POLLNVAL
 0x020

	)

	@/usr/include/bits/poll2.h

19 #i‚de‡
_SYS_POLL_H


24 
__BEGIN_DECLS


26 
__REDIRECT
 (
__pﬁl_Æüs
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

27 
__timeout
), 
pﬁl
);

28 
__pﬁl_chk
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
,

29 
__SIZE_TYPE__
 
__fd¶í
);

30 
__REDIRECT
 (
__pﬁl_chk_w¨n
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

31 
__timeout
, 
__SIZE_TYPE__
 
__fd¶í
),

32 
__pﬁl_chk
)

33 
__w¨«âr
 ("poll called with fds bufferÅoo small fileÇfdsÉntries");

35 
__f‹tify_fun˘i⁄
 

36 
	$pﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
)

38 i‡(
	`__bos
 (
__fds
Ë!(
__SIZE_TYPE__
) -1)

40 i‡(! 
	`__buûtö_c⁄°™t_p
 (
__nfds
))

41  
	`__pﬁl_chk
 (
__fds
, 
__nfds
, 
__timeout
, 
	`__bos
 (__fds));

42 i‡(
	`__bos
 (
__fds
Ë/  (*__fdsË< 
__nfds
)

43  
	`__pﬁl_chk_w¨n
 (
__fds
, 
__nfds
, 
__timeout
, 
	`__bos
 (__fds));

46  
	`__pﬁl_Æüs
 (
__fds
, 
__nfds
, 
__timeout
);

47 
	}
}

50 #ifde‡
__USE_GNU


51 
__REDIRECT
 (
__µﬁl_Æüs
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

52 c⁄° 
time•ec
 *
__timeout
,

53 c⁄° 
__sig£t_t
 *
__ss
), 
µﬁl
);

54 
__µﬁl_chk
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

55 c⁄° 
time•ec
 *
__timeout
,

56 c⁄° 
__sig£t_t
 *
__ss
, 
__SIZE_TYPE__
 
__fd¶í
);

57 
__REDIRECT
 (
__µﬁl_chk_w¨n
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

58 c⁄° 
time•ec
 *
__timeout
,

59 c⁄° 
__sig£t_t
 *
__ss
,

60 
__SIZE_TYPE__
 
__fd¶í
),

61 
__µﬁl_chk
)

62 
__w¨«âr
 ("ppoll called with fds bufferÅoo small fileÇfdsÉntries");

64 
__f‹tify_fun˘i⁄
 

65 
	$µﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, c⁄° 
time•ec
 *
__timeout
,

66 c⁄° 
__sig£t_t
 *
__ss
)

68 i‡(
	`__bos
 (
__fds
Ë!(
__SIZE_TYPE__
) -1)

70 i‡(! 
	`__buûtö_c⁄°™t_p
 (
__nfds
))

71  
	`__µﬁl_chk
 (
__fds
, 
__nfds
, 
__timeout
, 
__ss
, 
	`__bos
 (__fds));

72 i‡(
	`__bos
 (
__fds
Ë/  (*__fdsË< 
__nfds
)

73  
	`__µﬁl_chk_w¨n
 (
__fds
, 
__nfds
, 
__timeout
, 
__ss
,

74 
	`__bos
 (
__fds
));

77  
	`__µﬁl_Æüs
 (
__fds
, 
__nfds
, 
__timeout
, 
__ss
);

78 
	}
}

81 
	g__END_DECLS


	@/usr/include/bits/sched.h

20 #i‚de‡
__√ed_sched∑øm


22 #i‚de‡
_SCHED_H


28 
	#SCHED_OTHER
 0

	)

29 
	#SCHED_FIFO
 1

	)

30 
	#SCHED_RR
 2

	)

31 #ifde‡
__USE_GNU


32 
	#SCHED_BATCH
 3

	)

33 
	#SCHED_IDLE
 5

	)

35 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

38 #ifde‡
__USE_GNU


40 
	#CSIGNAL
 0x000000f‡

	)

41 
	#CLONE_VM
 0x00000100

	)

42 
	#CLONE_FS
 0x00000200

	)

43 
	#CLONE_FILES
 0x00000400

	)

44 
	#CLONE_SIGHAND
 0x00000800

	)

45 
	#CLONE_PTRACE
 0x00002000

	)

46 
	#CLONE_VFORK
 0x00004000

	)

48 
	#CLONE_PARENT
 0x00008000

	)

50 
	#CLONE_THREAD
 0x00010000

	)

51 
	#CLONE_NEWNS
 0x00020000

	)

52 
	#CLONE_SYSVSEM
 0x00040000

	)

53 
	#CLONE_SETTLS
 0x00080000

	)

54 
	#CLONE_PARENT_SETTID
 0x00100000

	)

56 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

58 
	#CLONE_DETACHED
 0x00400000

	)

59 
	#CLONE_UNTRACED
 0x00800000

	)

61 
	#CLONE_CHILD_SETTID
 0x01000000

	)

63 
	#CLONE_NEWUTS
 0x04000000

	)

64 
	#CLONE_NEWIPC
 0x08000000

	)

65 
	#CLONE_NEWUSER
 0x10000000

	)

66 
	#CLONE_NEWPID
 0x20000000

	)

67 
	#CLONE_NEWNET
 0x40000000

	)

68 
	#CLONE_IO
 0x80000000

	)

72 
	ssched_∑øm


74 
	m__sched_¥i‹ôy
;

77 
	g__BEGIN_DECLS


79 #ifde‡
__USE_GNU


81 
	$˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

82 
__Êags
, *
__¨g
, ...Ë
__THROW
;

85 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

88 
	$sched_gë˝u
 (Ë
__THROW
;

91 
	$£äs
 (
__fd
, 
__n°y≥
Ë
__THROW
;

95 
__END_DECLS


99 #i‡!
deföed
 
__deföed_sched∑øm
 \

100 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

101 
	#__deföed_sched∑øm
 1

	)

103 
	s__sched_∑øm


105 
__sched_¥i‹ôy
;

107 #unde‡
__√ed_sched∑øm


111 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


112 
	#__˝u_£t_t_deföed


	)

114 
	#__CPU_SETSIZE
 1024

	)

115 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

118 
__CPU_MASK_TYPE
 
	t__˝u_mask
;

121 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

122 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

127 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

128 } 
	t˝u_£t_t
;

131 #i‡
	`__GNUC_PREREQ
 (2, 91)

132 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

133 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

135 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

137 
size_t
 
__i
; \

138 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

139 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

140 
__i
 = 0; __ò< 
__imax
; ++__i) \

141 
__bôs
[
__i
] = 0; \

142 
	}
} 0)

	)

144 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

145 (
__exãnsi⁄__
 \

146 ({ 
size_t
 
__˝u
 = (
˝u
); \

147 
__˝u
 / 8 < (
£tsize
) \

148 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

149 |
	`__CPUMASK
 (
__˝u
)) \

150 : 0; }))

	)

151 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

152 (
__exãnsi⁄__
 \

153 ({ 
size_t
 
__˝u
 = (
˝u
); \

154 
__˝u
 / 8 < (
£tsize
) \

155 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

156 &~
	`__CPUMASK
 (
__˝u
)) \

157 : 0; }))

	)

158 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

159 (
__exãnsi⁄__
 \

160 ({ 
size_t
 
__˝u
 = (
˝u
); \

161 
__˝u
 / 8 < (
£tsize
) \

162 ? ((((c⁄° 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

163 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

164 : 0; }))

	)

166 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

167 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

169 #i‡
__GNUC_PREREQ
 (2, 91)

170 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

171 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

173 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

174 (
__exãnsi⁄__
 \

175 ({ c⁄° 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

176 c⁄° 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

177 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

178 
size_t
 
__i
; \

179 
__i
 = 0; __ò< 
__imax
; ++__i) \

180 i‡(
__¨r1
[
__i
] !
__¨r2
[__i]) \

182 
__i
 =
__imax
; }))

	)

185 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

186 (
__exãnsi⁄__
 \

187 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

188 c⁄° 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

189 c⁄° 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

190 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

191 
size_t
 
__i
; \

192 
__i
 = 0; __ò< 
__imax
; ++__i) \

193 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

194 
__de°
; }))

	)

196 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

197 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

198 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

199 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

201 
__BEGIN_DECLS


203 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

204 
__THROW
;

205 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

206 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

208 
__END_DECLS


	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/socket.h

19 #i‚de‡
__BITS_SOCKET_H


20 
	#__BITS_SOCKET_H


	)

22 #i‚de‡
_SYS_SOCKET_H


26 
	#__√ed_size_t


	)

27 
	~<°ddef.h
>

29 
	~<sys/ty≥s.h
>

32 #i‚de‡
__sockÀn_t_deföed


33 
__sockÀn_t
 
	tsockÀn_t
;

34 
	#__sockÀn_t_deföed


	)

38 
	~<bôs/sockë_ty≥.h
>

41 
	#PF_UNSPEC
 0

	)

42 
	#PF_LOCAL
 1

	)

43 
	#PF_UNIX
 
PF_LOCAL


	)

44 
	#PF_FILE
 
PF_LOCAL


	)

45 
	#PF_INET
 2

	)

46 
	#PF_AX25
 3

	)

47 
	#PF_IPX
 4

	)

48 
	#PF_APPLETALK
 5

	)

49 
	#PF_NETROM
 6

	)

50 
	#PF_BRIDGE
 7

	)

51 
	#PF_ATMPVC
 8

	)

52 
	#PF_X25
 9

	)

53 
	#PF_INET6
 10

	)

54 
	#PF_ROSE
 11

	)

55 
	#PF_DEC√t
 12

	)

56 
	#PF_NETBEUI
 13

	)

57 
	#PF_SECURITY
 14

	)

58 
	#PF_KEY
 15

	)

59 
	#PF_NETLINK
 16

	)

60 
	#PF_ROUTE
 
PF_NETLINK


	)

61 
	#PF_PACKET
 17

	)

62 
	#PF_ASH
 18

	)

63 
	#PF_ECONET
 19

	)

64 
	#PF_ATMSVC
 20

	)

65 
	#PF_RDS
 21

	)

66 
	#PF_SNA
 22

	)

67 
	#PF_IRDA
 23

	)

68 
	#PF_PPPOX
 24

	)

69 
	#PF_WANPIPE
 25

	)

70 
	#PF_LLC
 26

	)

71 
	#PF_IB
 27

	)

72 
	#PF_MPLS
 28

	)

73 
	#PF_CAN
 29

	)

74 
	#PF_TIPC
 30

	)

75 
	#PF_BLUETOOTH
 31

	)

76 
	#PF_IUCV
 32

	)

77 
	#PF_RXRPC
 33

	)

78 
	#PF_ISDN
 34

	)

79 
	#PF_PHONET
 35

	)

80 
	#PF_IEEE802154
 36

	)

81 
	#PF_CAIF
 37

	)

82 
	#PF_ALG
 38

	)

83 
	#PF_NFC
 39

	)

84 
	#PF_VSOCK
 40

	)

85 
	#PF_MAX
 41

	)

88 
	#AF_UNSPEC
 
PF_UNSPEC


	)

89 
	#AF_LOCAL
 
PF_LOCAL


	)

90 
	#AF_UNIX
 
PF_UNIX


	)

91 
	#AF_FILE
 
PF_FILE


	)

92 
	#AF_INET
 
PF_INET


	)

93 
	#AF_AX25
 
PF_AX25


	)

94 
	#AF_IPX
 
PF_IPX


	)

95 
	#AF_APPLETALK
 
PF_APPLETALK


	)

96 
	#AF_NETROM
 
PF_NETROM


	)

97 
	#AF_BRIDGE
 
PF_BRIDGE


	)

98 
	#AF_ATMPVC
 
PF_ATMPVC


	)

99 
	#AF_X25
 
PF_X25


	)

100 
	#AF_INET6
 
PF_INET6


	)

101 
	#AF_ROSE
 
PF_ROSE


	)

102 
	#AF_DEC√t
 
PF_DEC√t


	)

103 
	#AF_NETBEUI
 
PF_NETBEUI


	)

104 
	#AF_SECURITY
 
PF_SECURITY


	)

105 
	#AF_KEY
 
PF_KEY


	)

106 
	#AF_NETLINK
 
PF_NETLINK


	)

107 
	#AF_ROUTE
 
PF_ROUTE


	)

108 
	#AF_PACKET
 
PF_PACKET


	)

109 
	#AF_ASH
 
PF_ASH


	)

110 
	#AF_ECONET
 
PF_ECONET


	)

111 
	#AF_ATMSVC
 
PF_ATMSVC


	)

112 
	#AF_RDS
 
PF_RDS


	)

113 
	#AF_SNA
 
PF_SNA


	)

114 
	#AF_IRDA
 
PF_IRDA


	)

115 
	#AF_PPPOX
 
PF_PPPOX


	)

116 
	#AF_WANPIPE
 
PF_WANPIPE


	)

117 
	#AF_LLC
 
PF_LLC


	)

118 
	#AF_IB
 
PF_IB


	)

119 
	#AF_MPLS
 
PF_MPLS


	)

120 
	#AF_CAN
 
PF_CAN


	)

121 
	#AF_TIPC
 
PF_TIPC


	)

122 
	#AF_BLUETOOTH
 
PF_BLUETOOTH


	)

123 
	#AF_IUCV
 
PF_IUCV


	)

124 
	#AF_RXRPC
 
PF_RXRPC


	)

125 
	#AF_ISDN
 
PF_ISDN


	)

126 
	#AF_PHONET
 
PF_PHONET


	)

127 
	#AF_IEEE802154
 
PF_IEEE802154


	)

128 
	#AF_CAIF
 
PF_CAIF


	)

129 
	#AF_ALG
 
PF_ALG


	)

130 
	#AF_NFC
 
PF_NFC


	)

131 
	#AF_VSOCK
 
PF_VSOCK


	)

132 
	#AF_MAX
 
PF_MAX


	)

138 
	#SOL_RAW
 255

	)

139 
	#SOL_DECNET
 261

	)

140 
	#SOL_X25
 262

	)

141 
	#SOL_PACKET
 263

	)

142 
	#SOL_ATM
 264

	)

143 
	#SOL_AAL
 265

	)

144 
	#SOL_IRDA
 266

	)

147 
	#SOMAXCONN
 128

	)

150 
	~<bôs/sockaddr.h
>

153 
	ssockaddr


155 
__SOCKADDR_COMMON
 (
ß_
);

156 
	mß_d©a
[14];

162 
	#__ss_Æig¡y≥
 

	)

163 
	#_SS_PADSIZE
 \

164 (
_SS_SIZE
 - 
__SOCKADDR_COMMON_SIZE
 -  (
__ss_Æig¡y≥
))

	)

166 
	ssockaddr_°‹age


168 
__SOCKADDR_COMMON
 (
ss_
);

169 
	m__ss_∑ddög
[
_SS_PADSIZE
];

170 
__ss_Æig¡y≥
 
	m__ss_Æign
;

177 
	mMSG_OOB
 = 0x01,

178 
	#MSG_OOB
 
MSG_OOB


	)

179 
	mMSG_PEEK
 = 0x02,

180 
	#MSG_PEEK
 
MSG_PEEK


	)

181 
	mMSG_DONTROUTE
 = 0x04,

182 
	#MSG_DONTROUTE
 
MSG_DONTROUTE


	)

183 #ifde‡
__USE_GNU


185 
	mMSG_TRYHARD
 = 
MSG_DONTROUTE
,

186 
	#MSG_TRYHARD
 
MSG_DONTROUTE


	)

188 
	mMSG_CTRUNC
 = 0x08,

189 
	#MSG_CTRUNC
 
MSG_CTRUNC


	)

190 
	mMSG_PROXY
 = 0x10,

191 
	#MSG_PROXY
 
MSG_PROXY


	)

192 
	mMSG_TRUNC
 = 0x20,

193 
	#MSG_TRUNC
 
MSG_TRUNC


	)

194 
	mMSG_DONTWAIT
 = 0x40,

195 
	#MSG_DONTWAIT
 
MSG_DONTWAIT


	)

196 
	mMSG_EOR
 = 0x80,

197 
	#MSG_EOR
 
MSG_EOR


	)

198 
	mMSG_WAITALL
 = 0x100,

199 
	#MSG_WAITALL
 
MSG_WAITALL


	)

200 
	mMSG_FIN
 = 0x200,

201 
	#MSG_FIN
 
MSG_FIN


	)

202 
	mMSG_SYN
 = 0x400,

203 
	#MSG_SYN
 
MSG_SYN


	)

204 
	mMSG_CONFIRM
 = 0x800,

205 
	#MSG_CONFIRM
 
MSG_CONFIRM


	)

206 
	mMSG_RST
 = 0x1000,

207 
	#MSG_RST
 
MSG_RST


	)

208 
	mMSG_ERRQUEUE
 = 0x2000,

209 
	#MSG_ERRQUEUE
 
MSG_ERRQUEUE


	)

210 
	mMSG_NOSIGNAL
 = 0x4000,

211 
	#MSG_NOSIGNAL
 
MSG_NOSIGNAL


	)

212 
	mMSG_MORE
 = 0x8000,

213 
	#MSG_MORE
 
MSG_MORE


	)

214 
	mMSG_WAITFORONE
 = 0x10000,

215 
	#MSG_WAITFORONE
 
MSG_WAITFORONE


	)

216 
	mMSG_FASTOPEN
 = 0x20000000,

217 
	#MSG_FASTOPEN
 
MSG_FASTOPEN


	)

219 
	mMSG_CMSG_CLOEXEC
 = 0x40000000

222 
	#MSG_CMSG_CLOEXEC
 
MSG_CMSG_CLOEXEC


	)

228 
	smsghdr


230 *
	mmsg_«me
;

231 
sockÀn_t
 
	mmsg_«mñí
;

233 
iovec
 *
	mmsg_iov
;

234 
size_t
 
	mmsg_iovÀn
;

236 *
	mmsg_c⁄åﬁ
;

237 
size_t
 
	mmsg_c⁄åﬁÀn
;

242 
	mmsg_Êags
;

246 
	scmsghdr


248 
size_t
 
	mcmsg_Àn
;

253 
	mcmsg_Àvñ
;

254 
	mcmsg_ty≥
;

255 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

256 
__exãnsi⁄__
 
__cmsg_d©a
 
	m__Êex¨r
;

261 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

262 
	#CMSG_DATA
(
cmsg
Ë((cmsg)->
__cmsg_d©a
)

	)

264 
	#CMSG_DATA
(
cmsg
Ë((*Ë((
cmsghdr
 *Ë(cmsgË+ 1))

	)

266 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`__cmsg_nxthdr
 (mhdr, cmsg)

	)

267 
	#CMSG_FIRSTHDR
(
mhdr
) \

268 ((
size_t
Ë(
mhdr
)->
msg_c⁄åﬁÀn
 > (
cmsghdr
) \

269 ? (
cmsghdr
 *Ë(
mhdr
)->
msg_c⁄åﬁ
 : (cmsghd∏*Ë0)

	)

270 
	#CMSG_ALIGN
(
Àn
Ë((÷íË+  (
size_t
) - 1) \

271 & (
size_t
Ë~( (size_tË- 1))

	)

272 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
 (len) \

273 + 
	`CMSG_ALIGN
 ( (
cmsghdr
)))

	)

274 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
 ( (
cmsghdr
)Ë+ (Àn))

	)

276 
cmsghdr
 *
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
,

277 
cmsghdr
 *
__cmsg
Ë
__THROW
;

278 #ifde‡
__USE_EXTERN_INLINES


279 #i‚de‡
_EXTERN_INLINE


280 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

282 
_EXTERN_INLINE
 
cmsghdr
 *

283 
	`__NTH
 (
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
, 
cmsghdr
 *
__cmsg
))

285 i‡((
size_t
Ë
__cmsg
->
cmsg_Àn
 <  (
cmsghdr
))

287  (
cmsghdr
 *) 0;

289 
__cmsg
 = (
cmsghdr
 *) ((*) __cmsg

290 + 
	`CMSG_ALIGN
 (
__cmsg
->
cmsg_Àn
));

291 i‡((*Ë(
__cmsg
 + 1Ë> ((*Ë
__mhdr
->
msg_c⁄åﬁ


292 + 
__mhdr
->
msg_c⁄åﬁÀn
)

293 || ((*Ë
__cmsg
 + 
	`CMSG_ALIGN
 (__cmsg->
cmsg_Àn
)

294 > ((*Ë
__mhdr
->
msg_c⁄åﬁ
 + __mhdr->
msg_c⁄åﬁÀn
)))

296  (
cmsghdr
 *) 0;

297  
__cmsg
;

298 
	}
}

305 
	mSCM_RIGHTS
 = 0x01

306 
	#SCM_RIGHTS
 
SCM_RIGHTS


	)

307 #ifde‡
__USE_GNU


308 , 
	mSCM_CREDENTIALS
 = 0x02

309 
	#SCM_CREDENTIALS
 
SCM_CREDENTIALS


	)

313 #ifde‡
__USE_GNU


315 
	su¸ed


317 
pid_t
 
	mpid
;

318 
uid_t
 
	muid
;

319 
gid_t
 
	mgid
;

324 #i‚de‡
__USE_MISC


325 #i‚de‡
FIOGETOWN


326 
	#__SYS_SOCKET_H_undef_FIOGETOWN


	)

328 #i‚de‡
FIOSETOWN


329 
	#__SYS_SOCKET_H_undef_FIOSETOWN


	)

331 #i‚de‡
SIOCATMARK


332 
	#__SYS_SOCKET_H_undef_SIOCATMARK


	)

334 #i‚de‡
SIOCGPGRP


335 
	#__SYS_SOCKET_H_undef_SIOCGPGRP


	)

337 #i‚de‡
SIOCGSTAMP


338 
	#__SYS_SOCKET_H_undef_SIOCGSTAMP


	)

340 #i‚de‡
SIOCGSTAMPNS


341 
	#__SYS_SOCKET_H_undef_SIOCGSTAMPNS


	)

343 #i‚de‡
SIOCSPGRP


344 
	#__SYS_SOCKET_H_undef_SIOCSPGRP


	)

349 
	~<asm/sockë.h
>

351 #i‚de‡
__USE_MISC


352 #ifde‡
__SYS_SOCKET_H_undef_FIOGETOWN


353 #unde‡
__SYS_SOCKET_H_undef_FIOGETOWN


354 #unde‡
FIOGETOWN


356 #ifde‡
__SYS_SOCKET_H_undef_FIOSETOWN


357 #unde‡
__SYS_SOCKET_H_undef_FIOSETOWN


358 #unde‡
FIOSETOWN


360 #ifde‡
__SYS_SOCKET_H_undef_SIOCATMARK


361 #unde‡
__SYS_SOCKET_H_undef_SIOCATMARK


362 #unde‡
SIOCATMARK


364 #ifde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


365 #unde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


366 #unde‡
SIOCGPGRP


368 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


369 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


370 #unde‡
SIOCGSTAMP


372 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


373 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


374 #unde‡
SIOCGSTAMPNS


376 #ifde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


377 #unde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


378 #unde‡
SIOCSPGRP


383 
	slögî


385 
	ml_⁄off
;

386 
	ml_lögî
;

	@/usr/include/bits/socket2.h

19 #i‚de‡
_SYS_SOCKET_H


23 
ssize_t
 
__ªcv_chk
 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

24 
__Êags
);

25 
ssize_t
 
__REDIRECT
 (
__ªcv_Æüs
, (
__fd
, *
__buf
, 
size_t
 
__n
,

26 
__Êags
), 
ªcv
);

27 
ssize_t
 
__REDIRECT
 (
__ªcv_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

29 
__Êags
), 
__ªcv_chk
)

30 
__w¨«âr
 ("recv called with biggerÜengthÅhan size of destination "

33 
__f‹tify_fun˘i⁄
 
ssize_t


34 
	$ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

39  
	`__ªcv_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

41 i‡(
__n
 > 
	`__bos0
 (
__buf
))

42  
	`__ªcv_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

44  
	`__ªcv_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
);

45 
	}
}

47 
ssize_t
 
__ªcv‰om_chk
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

48 
size_t
 
__buÊí
, 
__Êags
,

49 
__SOCKADDR_ARG
 
__addr
,

50 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

51 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_Æüs
,

52 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

53 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

54 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
ªcv‰om
);

55 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_chk_w¨n
,

56 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

57 
size_t
 
__buÊí
, 
__Êags
,

58 
__SOCKADDR_ARG
 
__addr
,

59 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
__ªcv‰om_chk
)

60 
__w¨«âr
 ("recvfrom called with biggerÜengthÅhan size of "

63 
__f‹tify_fun˘i⁄
 
ssize_t


64 
	$ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
, 
__Êags
,

65 
__SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
)

67 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

70  
	`__ªcv‰om_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

71 
__addr
, 
__addr_Àn
);

72 i‡(
__n
 > 
	`__bos0
 (
__buf
))

73  
	`__ªcv‰om_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

74 
__addr
, 
__addr_Àn
);

76  
	`__ªcv‰om_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
, 
__addr
, 
__addr_Àn
);

77 
	}
}

	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

29 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

30 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

31 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

32 
	m°©us
;

33 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

34 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

35 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

36 
timevÆ
 
	mtime
;

37 
__sysˇŒ_¶⁄g_t
 
	mtick
;

38 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

39 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

40 
	mshi·
;

41 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

42 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

43 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_SETOFFSET
 0x0100

	)

64 
	#ADJ_MICRO
 0x1000

	)

65 
	#ADJ_NANO
 0x2000

	)

66 
	#ADJ_TICK
 0x4000

	)

67 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

68 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

71 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

72 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

73 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

74 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

75 
	#MOD_STATUS
 
ADJ_STATUS


	)

76 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

77 
	#MOD_CLKB
 
ADJ_TICK


	)

78 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

79 
	#MOD_TAI
 
ADJ_TAI


	)

80 
	#MOD_MICRO
 
ADJ_MICRO


	)

81 
	#MOD_NANO
 
ADJ_NANO


	)

85 
	#STA_PLL
 0x0001

	)

86 
	#STA_PPSFREQ
 0x0002

	)

87 
	#STA_PPSTIME
 0x0004

	)

88 
	#STA_FLL
 0x0008

	)

90 
	#STA_INS
 0x0010

	)

91 
	#STA_DEL
 0x0020

	)

92 
	#STA_UNSYNC
 0x0040

	)

93 
	#STA_FREQHOLD
 0x0080

	)

95 
	#STA_PPSSIGNAL
 0x0100

	)

96 
	#STA_PPSJITTER
 0x0200

	)

97 
	#STA_PPSWANDER
 0x0400

	)

98 
	#STA_PPSERROR
 0x0800

	)

100 
	#STA_CLOCKERR
 0x1000

	)

101 
	#STA_NANO
 0x2000

	)

102 
	#STA_MODE
 0x4000

	)

103 
	#STA_CLK
 0x8000

	)

106 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

107 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

74 
	#__CPU_MASK_TYPE
 
__SYSCALL_ULONG_TYPE


	)

76 #ifde‡
__x86_64__


80 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

83 
	#__INO_T_MATCHES_INO64_T
 1

	)

87 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/linux/bpf_common.h

1 #i‚de‡
__LINUX_BPF_COMMON_H__


2 
	#__LINUX_BPF_COMMON_H__


	)

5 
	#BPF_CLASS
(
code
Ë((codeË& 0x07)

	)

6 
	#BPF_LD
 0x00

	)

7 
	#BPF_LDX
 0x01

	)

8 
	#BPF_ST
 0x02

	)

9 
	#BPF_STX
 0x03

	)

10 
	#BPF_ALU
 0x04

	)

11 
	#BPF_JMP
 0x05

	)

12 
	#BPF_RET
 0x06

	)

13 
	#BPF_MISC
 0x07

	)

16 
	#BPF_SIZE
(
code
Ë((codeË& 0x18)

	)

17 
	#BPF_W
 0x00

	)

18 
	#BPF_H
 0x08

	)

19 
	#BPF_B
 0x10

	)

20 
	#BPF_MODE
(
code
Ë((codeË& 0xe0)

	)

21 
	#BPF_IMM
 0x00

	)

22 
	#BPF_ABS
 0x20

	)

23 
	#BPF_IND
 0x40

	)

24 
	#BPF_MEM
 0x60

	)

25 
	#BPF_LEN
 0x80

	)

26 
	#BPF_MSH
 0xa0

	)

29 
	#BPF_OP
(
code
Ë((codeË& 0xf0)

	)

30 
	#BPF_ADD
 0x00

	)

31 
	#BPF_SUB
 0x10

	)

32 
	#BPF_MUL
 0x20

	)

33 
	#BPF_DIV
 0x30

	)

34 
	#BPF_OR
 0x40

	)

35 
	#BPF_AND
 0x50

	)

36 
	#BPF_LSH
 0x60

	)

37 
	#BPF_RSH
 0x70

	)

38 
	#BPF_NEG
 0x80

	)

39 
	#BPF_MOD
 0x90

	)

40 
	#BPF_XOR
 0xa0

	)

42 
	#BPF_JA
 0x00

	)

43 
	#BPF_JEQ
 0x10

	)

44 
	#BPF_JGT
 0x20

	)

45 
	#BPF_JGE
 0x30

	)

46 
	#BPF_JSET
 0x40

	)

47 
	#BPF_SRC
(
code
Ë((codeË& 0x08)

	)

48 
	#BPF_K
 0x00

	)

49 
	#BPF_X
 0x08

	)

51 #i‚de‡
BPF_MAXINSNS


52 
	#BPF_MAXINSNS
 4096

	)

	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__FD_SETSIZE


22 
	#__FD_SETSIZE
 1024

	)

25 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

26 } 
	t__kî√l_fd_£t
;

29 (*
	t__kî√l_sigh™dÀr_t
)();

32 
	t__kî√l_key_t
;

33 
	t__kî√l_mqd_t
;

35 
	~<asm/posix_ty≥s.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

55 
	#__STDC_ISO_10646__
 201505L

	)

58 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/sys/cdefs.h

18 #i‚def 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #i‚de‡
_FEATURES_H


23 
	~<„©uªs.h
>

29 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


34 #unde‡
__P


35 #unde‡
__PMT


37 #ifde‡
__GNUC__


41 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


42 
	#__LEAF
 , 
__Àaf__


	)

43 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

57 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

59 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

60 
	#__THROW
 
	`throw
 ()

	)

61 
	#__THROWNL
 
	`throw
 ()

	)

62 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

64 
	#__THROW


	)

65 
	#__THROWNL


	)

66 
	#__NTH
(
f˘
Ë
	)
fct

72 
	#__ölöe


	)

74 
	#__THROW


	)

75 
	#__THROWNL


	)

76 
	#__NTH
(
f˘
Ë
	)
fct

82 
	#__P
(
¨gs
Ë
	)
args

83 
	#__PMT
(
¨gs
Ë
	)
args

88 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

89 
	#__STRING
(
x
Ë#x

	)

92 
	#__±r_t
 *

	)

93 
	#__l⁄g_doubÀ_t
 

	)

97 #ifdef 
__˝lu•lus


98 
	#__BEGIN_DECLS
 "C" {

	)

99 
	#__END_DECLS
 }

	)

101 
	#__BEGIN_DECLS


	)

102 
	#__END_DECLS


	)

111 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


112 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

113 
	#__END_NAMESPACE_STD
 }

	)

114 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

115 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

116 
	#__END_NAMESPACE_C99
 }

	)

117 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

122 
	#__BEGIN_NAMESPACE_STD


	)

123 
	#__END_NAMESPACE_STD


	)

124 
	#__USING_NAMESPACE_STD
(
«me
)

	)

125 
	#__BEGIN_NAMESPACE_C99


	)

126 
	#__END_NAMESPACE_C99


	)

127 
	#__USING_NAMESPACE_C99
(
«me
)

	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3)

136 
	#__w¨nde˛
(
«me
, 
msg
) \

137 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

138 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

139 
	#__îr‹de˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

142 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

143 
	#__w¨«âr
(
msg
)

	)

144 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

148 #i‡
__GNUC_PREREQ
 (2,97)

150 
	#__Êex¨r
 []

	)

152 #ifde‡
__GNUC__


153 
	#__Êex¨r
 [0]

	)

155 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__Êex¨r
 []

	)

159 
	#__Êex¨r
 [1]

	)

175 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 #ifde‡
__˝lu•lus


179 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

180 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

181 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

182 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

184 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

185 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

186 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

187 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

189 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

190 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

203 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

204 
	#__©åibuã__
(
xyz
Ë

	)

210 #i‡
__GNUC_PREREQ
 (2,96)

211 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

213 
	#__©åibuã_mÆloc__


	)

218 #i‡
__GNUC_PREREQ
 (4, 3)

219 
	#__©åibuã_Æloc_size__
(
∑øms
) \

220 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

222 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

228 #i‡
__GNUC_PREREQ
 (2,96)

229 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

231 
	#__©åibuã_puª__


	)

235 #i‡
__GNUC_PREREQ
 (2,5)

236 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

238 
	#__©åibuã_c⁄°__


	)

244 #i‡
__GNUC_PREREQ
 (3,1)

245 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

246 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

248 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

249 
	#__©åibuã_noölöe__


	)

253 #i‡
__GNUC_PREREQ
 (3,2)

254 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

256 
	#__©åibuã_dïªˇãd__


	)

265 #i‡
__GNUC_PREREQ
 (2,8)

266 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

268 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

275 #i‡
__GNUC_PREREQ
 (2,97)

276 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

277 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

279 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

284 #i‡
__GNUC_PREREQ
 (3,3)

285 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

287 
	#__n⁄nuŒ
(
∑øms
)

	)

292 #i‡
__GNUC_PREREQ
 (3,4)

293 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

294 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

295 #i‡
__USE_FORTIFY_LEVEL
 > 0

296 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

299 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

301 #i‚de‡
__wur


302 
	#__wur


	)

306 #i‡
__GNUC_PREREQ
 (3,2)

307 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

309 
	#__Æways_ölöe
 
__ölöe


	)

314 #i‡
__GNUC_PREREQ
 (4,3)

315 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

317 
	#__©åibuã_¨tificül__


	)

329 #i‡(!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3) \

330 || (
deföed
 
__˛™g__
 && (deföed 
__GNUC_STDC_INLINE__
 \

331 || 
deföed
 
__GNUC_GNU_INLINE__
)))

332 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


333 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

334 
	#__exã∫_Æways_ölöe
 \

335 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

337 
	#__exã∫_ölöe
 
__ölöe


	)

338 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

342 #ifde‡
__exã∫_Æways_ölöe


343 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

348 #i‡
__GNUC_PREREQ
 (4,3)

349 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

350 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

357 #i‡!
__GNUC_PREREQ
 (2,8)

358 
	#__exãnsi⁄__


	)

362 #i‡!
__GNUC_PREREQ
 (2,92)

363 
	#__ª°ri˘


	)

369 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


370 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

372 #ifde‡
__GNUC__


373 
	#__ª°ri˘_¨r


	)

375 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

376 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

379 
	#__ª°ri˘_¨r


	)

384 #i‡
__GNUC__
 >= 3

385 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

386 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

388 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

389 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

392 #i‡(!
deföed
 
_N‹ëu∫
 \

393 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

394 && !
	$__GNUC_PREREQ
 (4,7))

395 #i‡
	`__GNUC_PREREQ
 (2,8)

396 
	#_N‹ëu∫
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

	)

398 
	#_N‹ëu∫


	)

402 #i‡(!
deföed
 
_Sètic_as£π
 && !deföed 
__˝lu•lus
 \

403 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

404 && (!
	`__GNUC_PREREQ
 (4, 6Ë|| 
deföed
 
__STRICT_ANSI__
))

405 
	#_Sètic_as£π
(
ex¥
, 
dügno°ic
) \

406 (*
	`__Sètic_as£π_fun˘i⁄
 ()) \

407 [!! (°ru˘ { 
__îr‹_if_√g©ive
: (
ex¥
Ë? 2 : -1; })]

	)

410 
	~<bôs/w‹dsize.h
>

412 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


413 
	#__LDBL_COMPAT
 1

	)

414 #ifde‡
__REDIRECT


415 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

416 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

417 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

418 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

419 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

420 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

421 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

422 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

423 
	#__LDBL_REDIR_DECL
(
«me
) \

424 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

425 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

426 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

427 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

428 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

431 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


432 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

433 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

434 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

435 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

436 
	#__LDBL_REDIR_DECL
(
«me
)

	)

437 #ifde‡
__REDIRECT


438 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

439 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

440 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/uio.h

18 #i‚de‡
_SYS_UIO_H


19 
	#_SYS_UIO_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

25 
	g__BEGIN_DECLS


28 
	~<bôs/uio.h
>

39 
ssize_t
 
	$ªadv
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
)

40 
__wur
;

50 
ssize_t
 
	$wrôev
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
)

51 
__wur
;

54 #ifde‡
__USE_MISC


55 #i‚de‡
__USE_FILE_OFFSET64


65 
ssize_t
 
	$¥ódv
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

66 
__off_t
 
__off£t
Ë
__wur
;

77 
ssize_t
 
	$pwrôev
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

78 
__off_t
 
__off£t
Ë
__wur
;

80 #ifde‡
__REDIRECT


81 
ssize_t
 
	`__REDIRECT
 (
¥ódv
, (
__fd
, c⁄° 
iovec
 *
__iovec
,

82 
__cou¡
, 
__off64_t
 
__off£t
),

83 
¥ódv64
Ë
__wur
;

84 
ssize_t
 
	`__REDIRECT
 (
pwrôev
, (
__fd
, c⁄° 
iovec
 *
__iovec
,

85 
__cou¡
, 
__off64_t
 
__off£t
),

86 
pwrôev64
Ë
__wur
;

88 
	#¥ódv
 
¥ódv64


	)

89 
	#pwrôev
 
pwrôev64


	)

93 #ifde‡
__USE_LARGEFILE64


103 
ssize_t
 
	$¥ódv64
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

104 
__off64_t
 
__off£t
Ë
__wur
;

115 
ssize_t
 
	$pwrôev64
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

116 
__off64_t
 
__off£t
Ë
__wur
;

120 
__END_DECLS


	@/usr/include/asm-generic/ioctls.h

1 #i‚de‡
__ASM_GENERIC_IOCTLS_H


2 
	#__ASM_GENERIC_IOCTLS_H


	)

4 
	~<löux/io˘l.h
>

19 
	#TCGETS
 0x5401

	)

20 
	#TCSETS
 0x5402

	)

21 
	#TCSETSW
 0x5403

	)

22 
	#TCSETSF
 0x5404

	)

23 
	#TCGETA
 0x5405

	)

24 
	#TCSETA
 0x5406

	)

25 
	#TCSETAW
 0x5407

	)

26 
	#TCSETAF
 0x5408

	)

27 
	#TCSBRK
 0x5409

	)

28 
	#TCXONC
 0x540A

	)

29 
	#TCFLSH
 0x540B

	)

30 
	#TIOCEXCL
 0x540C

	)

31 
	#TIOCNXCL
 0x540D

	)

32 
	#TIOCSCTTY
 0x540E

	)

33 
	#TIOCGPGRP
 0x540F

	)

34 
	#TIOCSPGRP
 0x5410

	)

35 
	#TIOCOUTQ
 0x5411

	)

36 
	#TIOCSTI
 0x5412

	)

37 
	#TIOCGWINSZ
 0x5413

	)

38 
	#TIOCSWINSZ
 0x5414

	)

39 
	#TIOCMGET
 0x5415

	)

40 
	#TIOCMBIS
 0x5416

	)

41 
	#TIOCMBIC
 0x5417

	)

42 
	#TIOCMSET
 0x5418

	)

43 
	#TIOCGSOFTCAR
 0x5419

	)

44 
	#TIOCSSOFTCAR
 0x541A

	)

45 
	#FIONREAD
 0x541B

	)

46 
	#TIOCINQ
 
FIONREAD


	)

47 
	#TIOCLINUX
 0x541C

	)

48 
	#TIOCCONS
 0x541D

	)

49 
	#TIOCGSERIAL
 0x541E

	)

50 
	#TIOCSSERIAL
 0x541F

	)

51 
	#TIOCPKT
 0x5420

	)

52 
	#FIONBIO
 0x5421

	)

53 
	#TIOCNOTTY
 0x5422

	)

54 
	#TIOCSETD
 0x5423

	)

55 
	#TIOCGETD
 0x5424

	)

56 
	#TCSBRKP
 0x5425

	)

57 
	#TIOCSBRK
 0x5427

	)

58 
	#TIOCCBRK
 0x5428

	)

59 
	#TIOCGSID
 0x5429

	)

60 
	#TCGETS2
 
	`_IOR
('T', 0x2A, 
ãrmios2
)

	)

61 
	#TCSETS2
 
	`_IOW
('T', 0x2B, 
ãrmios2
)

	)

62 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, 
ãrmios2
)

	)

63 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, 
ãrmios2
)

	)

64 
	#TIOCGRS485
 0x542E

	)

65 #i‚de‡
TIOCSRS485


66 
	#TIOCSRS485
 0x542F

	)

68 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, Ë

	)

69 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, Ë

	)

70 
	#TIOCGDEV
 
	`_IOR
('T', 0x32, Ë

	)

71 
	#TCGETX
 0x5432

	)

72 
	#TCSETX
 0x5433

	)

73 
	#TCSETXF
 0x5434

	)

74 
	#TCSETXW
 0x5435

	)

75 
	#TIOCSIG
 
	`_IOW
('T', 0x36, Ë

	)

76 
	#TIOCVHANGUP
 0x5437

	)

77 
	#TIOCGPKT
 
	`_IOR
('T', 0x38, Ë

	)

78 
	#TIOCGPTLCK
 
	`_IOR
('T', 0x39, Ë

	)

79 
	#TIOCGEXCL
 
	`_IOR
('T', 0x40, Ë

	)

81 
	#FIONCLEX
 0x5450

	)

82 
	#FIOCLEX
 0x5451

	)

83 
	#FIOASYNC
 0x5452

	)

84 
	#TIOCSERCONFIG
 0x5453

	)

85 
	#TIOCSERGWILD
 0x5454

	)

86 
	#TIOCSERSWILD
 0x5455

	)

87 
	#TIOCGLCKTRMIOS
 0x5456

	)

88 
	#TIOCSLCKTRMIOS
 0x5457

	)

89 
	#TIOCSERGSTRUCT
 0x5458

	)

90 
	#TIOCSERGETLSR
 0x5459

	)

91 
	#TIOCSERGETMULTI
 0x545A

	)

92 
	#TIOCSERSETMULTI
 0x545B

	)

94 
	#TIOCMIWAIT
 0x545C

	)

95 
	#TIOCGICOUNT
 0x545D

	)

101 #i‚de‡
FIOQSIZE


102 
	#FIOQSIZE
 0x5460

	)

106 
	#TIOCPKT_DATA
 0

	)

107 
	#TIOCPKT_FLUSHREAD
 1

	)

108 
	#TIOCPKT_FLUSHWRITE
 2

	)

109 
	#TIOCPKT_STOP
 4

	)

110 
	#TIOCPKT_START
 8

	)

111 
	#TIOCPKT_NOSTOP
 16

	)

112 
	#TIOCPKT_DOSTOP
 32

	)

113 
	#TIOCPKT_IOCTL
 64

	)

115 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/asm-generic/types.h

1 #i‚de‡
_ASM_GENERIC_TYPES_H


2 
	#_ASM_GENERIC_TYPES_H


	)

6 
	~<asm-gíîic/öt-Œ64.h
>

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~<asm/posix_ty≥s_32.h
>

3 #ñi‡
deföed
(
__ILP32__
)

4 
	~<asm/posix_ty≥s_x32.h
>

6 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/asm/socket.h

1 
	~<asm-gíîic/sockë.h
>

	@/usr/include/bits/sockaddr.h

23 #i‚de‡
_BITS_SOCKADDR_H


24 
	#_BITS_SOCKADDR_H
 1

	)

28 
	tß_Ámûy_t
;

34 
	#__SOCKADDR_COMMON
(
ß_¥efix
) \

35 
ß_Ámûy_t
 
ß_¥efix
##
Ámûy


	)

37 
	#__SOCKADDR_COMMON_SIZE
 ( ())

	)

40 
	#_SS_SIZE
 128

	)

	@/usr/include/bits/socket_type.h

19 #i‚de‡
_SYS_SOCKET_H


24 
	e__sockë_ty≥


26 
	mSOCK_STREAM
 = 1,

28 
	#SOCK_STREAM
 
SOCK_STREAM


	)

29 
	mSOCK_DGRAM
 = 2,

31 
	#SOCK_DGRAM
 
SOCK_DGRAM


	)

32 
	mSOCK_RAW
 = 3,

33 
	#SOCK_RAW
 
SOCK_RAW


	)

34 
	mSOCK_RDM
 = 4,

35 
	#SOCK_RDM
 
SOCK_RDM


	)

36 
	mSOCK_SEQPACKET
 = 5,

38 
	#SOCK_SEQPACKET
 
SOCK_SEQPACKET


	)

39 
	mSOCK_DCCP
 = 6,

40 
	#SOCK_DCCP
 
SOCK_DCCP


	)

41 
	mSOCK_PACKET
 = 10,

44 
	#SOCK_PACKET
 
SOCK_PACKET


	)

49 
	mSOCK_CLOEXEC
 = 02000000,

51 
	#SOCK_CLOEXEC
 
SOCK_CLOEXEC


	)

52 
	mSOCK_NONBLOCK
 = 00004000

54 
	#SOCK_NONBLOCK
 
SOCK_NONBLOCK


	)

	@/usr/include/bits/uio.h

18 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_UIO_H


23 
	#_BITS_UIO_H
 1

	)

25 
	~<sys/ty≥s.h
>

39 
	#UIO_MAXIOV
 1024

	)

43 
	siovec


45 *
	miov_ba£
;

46 
size_t
 
	miov_Àn
;

52 #ifde‡
__USE_GNU


53 #i‡
deföed
 
_SYS_UIO_H
 && !deföed 
_BITS_UIO_H_FOR_SYS_UIO_H


54 
	#_BITS_UIO_H_FOR_SYS_UIO_H
 1

	)

56 
__BEGIN_DECLS


59 
ssize_t
 
	$¥o˚ss_vm_ªadv
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

60 
__liov˙t
,

61 c⁄° 
iovec
 *
__rvec
,

62 
__riov˙t
,

63 
__Êags
)

64 
__THROW
;

67 
ssize_t
 
	$¥o˚ss_vm_wrôev
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

68 
__liov˙t
,

69 c⁄° 
iovec
 *
__rvec
,

70 
__riov˙t
,

71 
__Êags
)

72 
__THROW
;

74 
__END_DECLS


	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004,

60 
	m__GCONV_TRANSLIT
 = 0x0008

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 
	s__gc⁄v_°ï


86 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

87 c⁄° *
__mod«me
;

89 
__cou¡î
;

91 *
__‰om_«me
;

92 *
__to_«me
;

94 
__gc⁄v_f˘
 
__f˘
;

95 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

96 
__gc⁄v_öô_f˘
 
__öô_f˘
;

97 
__gc⁄v_íd_f˘
 
__íd_f˘
;

101 
__mö_√eded_‰om
;

102 
__max_√eded_‰om
;

103 
__mö_√eded_to
;

104 
__max_√eded_to
;

107 
__°©eful
;

109 *
__d©a
;

114 
	s__gc⁄v_°ï_d©a


116 *
__outbuf
;

117 *
__outbu„nd
;

121 
__Êags
;

125 
__övoˇti⁄_cou¡î
;

129 
__öã∫Æ_u£
;

131 
__mb°©e_t
 *
__°©ï
;

132 
__mb°©e_t
 
__°©e
;

138 
	s__gc⁄v_öfo


140 
size_t
 
__n°ïs
;

141 
__gc⁄v_°ï
 *
__°ïs
;

142 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

143 } *
	t__gc⁄v_t
;

146 
	`__gc⁄v_å™¶ôî©e
 (
__gc⁄v_°ï
 *
°ï
,

147 
__gc⁄v_°ï_d©a
 *
°ï_d©a
,

148 c⁄° *
öbuf°¨t
,

149 c⁄° **
öbuÂ
,

150 c⁄° *
öbu„nd
,

151 **
outbuf°¨t
,

152 
size_t
 *
úªvîsibÀ
);

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_chÊags


	)

11 
	#__°ub_Áâach


	)

12 
	#__°ub_fchÊags


	)

13 
	#__°ub_fdëach


	)

14 
	#__°ub_gây


	)

15 
	#__°ub_lchmod


	)

16 
	#__°ub_ªvoke


	)

17 
	#__°ub_£éogö


	)

18 
	#__°ub_sigªtu∫


	)

19 
	#__°ub_s°k


	)

20 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___com∑t_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-x32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___com∑t_bdÊush


	)

11 
	#__°ub___com∑t_¸óã_moduÀ


	)

12 
	#__°ub___com∑t_gë_kî√l_syms


	)

13 
	#__°ub___com∑t_quîy_moduÀ


	)

14 
	#__°ub___com∑t_u£lib


	)

15 
	#__°ub_chÊags


	)

16 
	#__°ub_Áâach


	)

17 
	#__°ub_fchÊags


	)

18 
	#__°ub_fdëach


	)

19 
	#__°ub_gëmsg


	)

20 
	#__°ub_gây


	)

21 
	#__°ub_lchmod


	)

22 
	#__°ub_nfs£rv˘l


	)

23 
	#__°ub_putmsg


	)

24 
	#__°ub_ªvoke


	)

25 
	#__°ub_£éogö


	)

26 
	#__°ub_sigªtu∫


	)

27 
	#__°ub_s°k


	)

28 
	#__°ub_°ty


	)

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/stddef.h

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

149 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

152 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

157 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

158 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

159 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

161 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

163 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

166 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

169 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

170 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

171 
__END_NAMESPACE_STD


173 #ifde‡
__USE_XOPEN2K8


175 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

178 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

179 
size_t
 
__n
Ë
__THROW
;

183 
	~<xloˇÀ.h
>

185 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
__loˇÀ_t
 
__loc
Ë
__THROW
;

188 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

189 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

192 
__BEGIN_NAMESPACE_STD


195 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

199 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

200 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

201 
__END_NAMESPACE_STD


203 #ifde‡
__USE_XOPEN2K8


209 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

210 
__loˇÀ_t
 
__loc
Ë
__THROW
;

215 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

216 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

219 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

222 
__BEGIN_NAMESPACE_STD


224 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


225 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

226 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

230 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

231 
__THROW
 
__©åibuã_puª__
;

234 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


235 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

236 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

240 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

241 
__THROW
 
__©åibuã_puª__
;

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_GNU


248 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

249 
__THROW
 
__©åibuã_puª__
;

252 
__BEGIN_NAMESPACE_STD


255 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

256 
__THROW
 
__©åibuã_puª__
;

259 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

260 
__THROW
 
__©åibuã_puª__
;

262 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


263 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

265 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

266 c⁄° 
wch¨_t
 *
__ac˚±
)

267 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

269 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

270 
__THROW
 
__©åibuã_puª__
;

273 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


274 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

276 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

277 c⁄° 
wch¨_t
 *
__√edÀ
)

278 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

280 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

281 
__THROW
 
__©åibuã_puª__
;

285 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

287 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

290 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

291 
__END_NAMESPACE_STD


293 #ifde‡
__USE_XOPEN


295 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


296 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

298 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

299 c⁄° 
wch¨_t
 *
__√edÀ
)

300 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

302 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

303 
__THROW
 
__©åibuã_puª__
;

307 #ifde‡
__USE_XOPEN2K8


309 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

310 
__THROW
 
__©åibuã_puª__
;

314 
__BEGIN_NAMESPACE_STD


316 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


317 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

319 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

320 
size_t
 
__n
)

321 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

323 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

328 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

329 
__THROW
 
__©åibuã_puª__
;

332 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

333 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

337 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

338 
__THROW
;

341 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

342 
__END_NAMESPACE_STD


344 #ifde‡
__USE_GNU


347 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

348 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

349 
__THROW
;

353 
__BEGIN_NAMESPACE_STD


356 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

360 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

364 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

368 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

369 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

370 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

373 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

377 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

378 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

379 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

380 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

381 
__END_NAMESPACE_STD


383 #ifde‡
__USE_EXTERN_INLINES


389 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

390 
__exã∫_ölöe
 
wöt_t


391 
	`__NTH
 (
	$btowc
 (
__c
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

393 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

395 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

396 
__exã∫_ölöe
 

397 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

398 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

399 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

401 
__exã∫_ölöe
 
size_t


402 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

403 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

404 {  (
__ps
 !
NULL


405 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

408 
__BEGIN_NAMESPACE_STD


411 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

412 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

418 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

419 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

420 
__END_NAMESPACE_STD


423 #ifdef 
__USE_XOPEN2K8


426 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

427 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

428 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

432 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

433 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

434 
size_t
 
__nwc
, size_à
__Àn
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

440 #ifde‡
__USE_XOPEN


442 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

446 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

450 
__BEGIN_NAMESPACE_STD


453 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

454 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

455 
__END_NAMESPACE_STD


457 #ifde‡
__USE_ISOC99


458 
__BEGIN_NAMESPACE_C99


460 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

461 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

462 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

463 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

464 
__END_NAMESPACE_C99


468 
__BEGIN_NAMESPACE_STD


471 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

476 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

477 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

478 
__THROW
;

479 
__END_NAMESPACE_STD


481 #ifde‡
__USE_ISOC99


482 
__BEGIN_NAMESPACE_C99


485 
__exãnsi⁄__


486 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

487 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

488 
__THROW
;

492 
__exãnsi⁄__


493 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

494 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

495 
__ba£
Ë
__THROW
;

496 
__END_NAMESPACE_C99


499 #ifde‡
__USE_GNU


502 
__exãnsi⁄__


503 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

504 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

505 
__THROW
;

509 
__exãnsi⁄__


510 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

511 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

512 
__ba£
Ë
__THROW
;

515 #ifde‡
__USE_GNU


529 
	~<xloˇÀ.h
>

533 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

534 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

535 
__loˇÀ_t
 
__loc
Ë
__THROW
;

537 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

546 
__exãnsi⁄__


547 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

549 
__ba£
, 
__loˇÀ_t
 
__loc
)

550 
__THROW
;

552 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

553 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

554 
__THROW
;

556 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

557 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

558 
__THROW
;

560 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

561 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

562 
__loˇÀ_t
 
__loc
Ë
__THROW
;

566 #ifde‡
__USE_XOPEN2K8


569 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

570 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

574 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

575 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
;

583 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

586 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


587 
__BEGIN_NAMESPACE_STD


590 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

597 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

598 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

607 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

608 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

609 
__THROW
 ;

615 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

616 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

617 
__gnuc_va_li°
 
__¨g
)

623 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

628 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

629 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

630 
__gnuc_va_li°
 
__¨g
)

631 
__THROW
 ;

638 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

639 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

648 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

649 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

650 
__THROW
 ;

652 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

653 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

654 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

655 #ifde‡
__REDIRECT


659 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

660 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_fwsˇnf
)

663 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

664 
__isoc99_wsˇnf
)

666 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

667 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

668 ...), 
__isoc99_swsˇnf
)

671 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

673 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

674 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

675 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

676 
__THROW
;

677 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

678 
	#wsˇnf
 
__isoc99_wsˇnf


	)

679 
	#swsˇnf
 
__isoc99_swsˇnf


	)

683 
__END_NAMESPACE_STD


686 #ifde‡
__USE_ISOC99


687 
__BEGIN_NAMESPACE_C99


692 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

693 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

694 
__gnuc_va_li°
 
__¨g
)

700 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

704 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

705 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

706 
__gnuc_va_li°
 
__¨g
)

707 
__THROW
 ;

709 #i‡!
deföed
 
__USE_GNU
 \

710 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

711 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

712 #ifde‡
__REDIRECT


713 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

714 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

717 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

718 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

720 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

721 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

725 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

726 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
);

728 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
);

730 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

731 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

732 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

733 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

734 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

735 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

739 
__END_NAMESPACE_C99


743 
__BEGIN_NAMESPACE_STD


748 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

755 
wöt_t
 
	`gëwch¨
 ();

762 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

769 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

777 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

778 
__FILE
 *
__ª°ri˘
 
__°ªam
);

784 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

785 
__FILE
 *
__ª°ri˘
 
__°ªam
);

792 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

793 
__END_NAMESPACE_STD


796 #ifde‡
__USE_GNU


804 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

805 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

813 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

821 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

830 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

831 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

840 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

841 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

850 
__FILE
 *
__ª°ri˘
 
__°ªam
);

854 
__BEGIN_NAMESPACE_C99


858 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

859 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

860 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

861 
__END_NAMESPACE_C99


863 #ifde‡
__USE_GNU


864 
	~<xloˇÀ.h
>

868 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

869 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

870 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

871 
__loˇÀ_t
 
__loc
Ë
__THROW
;

880 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


881 
	#__√ed_iswxxx


	)

882 
	~<w˘y≥.h
>

886 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


887 
	~<bôs/wch¨2.h
>

890 #ifde‡
__LDBL_COMPAT


891 
	~<bôs/wch¨-ldbl.h
>

894 
__END_DECLS


902 #unde‡
__√ed_mb°©e_t


903 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

17 
	#ENOSYS
 38

	)

19 
	#ENOTEMPTY
 39

	)

20 
	#ELOOP
 40

	)

21 
	#EWOULDBLOCK
 
EAGAIN


	)

22 
	#ENOMSG
 42

	)

23 
	#EIDRM
 43

	)

24 
	#ECHRNG
 44

	)

25 
	#EL2NSYNC
 45

	)

26 
	#EL3HLT
 46

	)

27 
	#EL3RST
 47

	)

28 
	#ELNRNG
 48

	)

29 
	#EUNATCH
 49

	)

30 
	#ENOCSI
 50

	)

31 
	#EL2HLT
 51

	)

32 
	#EBADE
 52

	)

33 
	#EBADR
 53

	)

34 
	#EXFULL
 54

	)

35 
	#ENOANO
 55

	)

36 
	#EBADRQC
 56

	)

37 
	#EBADSLT
 57

	)

39 
	#EDEADLOCK
 
EDEADLK


	)

41 
	#EBFONT
 59

	)

42 
	#ENOSTR
 60

	)

43 
	#ENODATA
 61

	)

44 
	#ETIME
 62

	)

45 
	#ENOSR
 63

	)

46 
	#ENONET
 64

	)

47 
	#ENOPKG
 65

	)

48 
	#EREMOTE
 66

	)

49 
	#ENOLINK
 67

	)

50 
	#EADV
 68

	)

51 
	#ESRMNT
 69

	)

52 
	#ECOMM
 70

	)

53 
	#EPROTO
 71

	)

54 
	#EMULTIHOP
 72

	)

55 
	#EDOTDOT
 73

	)

56 
	#EBADMSG
 74

	)

57 
	#EOVERFLOW
 75

	)

58 
	#ENOTUNIQ
 76

	)

59 
	#EBADFD
 77

	)

60 
	#EREMCHG
 78

	)

61 
	#ELIBACC
 79

	)

62 
	#ELIBBAD
 80

	)

63 
	#ELIBSCN
 81

	)

64 
	#ELIBMAX
 82

	)

65 
	#ELIBEXEC
 83

	)

66 
	#EILSEQ
 84

	)

67 
	#ERESTART
 85

	)

68 
	#ESTRPIPE
 86

	)

69 
	#EUSERS
 87

	)

70 
	#ENOTSOCK
 88

	)

71 
	#EDESTADDRREQ
 89

	)

72 
	#EMSGSIZE
 90

	)

73 
	#EPROTOTYPE
 91

	)

74 
	#ENOPROTOOPT
 92

	)

75 
	#EPROTONOSUPPORT
 93

	)

76 
	#ESOCKTNOSUPPORT
 94

	)

77 
	#EOPNOTSUPP
 95

	)

78 
	#EPFNOSUPPORT
 96

	)

79 
	#EAFNOSUPPORT
 97

	)

80 
	#EADDRINUSE
 98

	)

81 
	#EADDRNOTAVAIL
 99

	)

82 
	#ENETDOWN
 100

	)

83 
	#ENETUNREACH
 101

	)

84 
	#ENETRESET
 102

	)

85 
	#ECONNABORTED
 103

	)

86 
	#ECONNRESET
 104

	)

87 
	#ENOBUFS
 105

	)

88 
	#EISCONN
 106

	)

89 
	#ENOTCONN
 107

	)

90 
	#ESHUTDOWN
 108

	)

91 
	#ETOOMANYREFS
 109

	)

92 
	#ETIMEDOUT
 110

	)

93 
	#ECONNREFUSED
 111

	)

94 
	#EHOSTDOWN
 112

	)

95 
	#EHOSTUNREACH
 113

	)

96 
	#EALREADY
 114

	)

97 
	#EINPROGRESS
 115

	)

98 
	#ESTALE
 116

	)

99 
	#EUCLEAN
 117

	)

100 
	#ENOTNAM
 118

	)

101 
	#ENAVAIL
 119

	)

102 
	#EISNAM
 120

	)

103 
	#EREMOTEIO
 121

	)

104 
	#EDQUOT
 122

	)

106 
	#ENOMEDIUM
 123

	)

107 
	#EMEDIUMTYPE
 124

	)

108 
	#ECANCELED
 125

	)

109 
	#ENOKEY
 126

	)

110 
	#EKEYEXPIRED
 127

	)

111 
	#EKEYREVOKED
 128

	)

112 
	#EKEYREJECTED
 129

	)

115 
	#EOWNERDEAD
 130

	)

116 
	#ENOTRECOVERABLE
 131

	)

118 
	#ERFKILL
 132

	)

120 
	#EHWPOISON
 133

	)

	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/asm-generic/socket.h

1 #i‚de‡
__ASM_GENERIC_SOCKET_H


2 
	#__ASM_GENERIC_SOCKET_H


	)

4 
	~<asm/sockios.h
>

7 
	#SOL_SOCKET
 1

	)

9 
	#SO_DEBUG
 1

	)

10 
	#SO_REUSEADDR
 2

	)

11 
	#SO_TYPE
 3

	)

12 
	#SO_ERROR
 4

	)

13 
	#SO_DONTROUTE
 5

	)

14 
	#SO_BROADCAST
 6

	)

15 
	#SO_SNDBUF
 7

	)

16 
	#SO_RCVBUF
 8

	)

17 
	#SO_SNDBUFFORCE
 32

	)

18 
	#SO_RCVBUFFORCE
 33

	)

19 
	#SO_KEEPALIVE
 9

	)

20 
	#SO_OOBINLINE
 10

	)

21 
	#SO_NO_CHECK
 11

	)

22 
	#SO_PRIORITY
 12

	)

23 
	#SO_LINGER
 13

	)

24 
	#SO_BSDCOMPAT
 14

	)

25 
	#SO_REUSEPORT
 15

	)

26 #i‚de‡
SO_PASSCRED


27 
	#SO_PASSCRED
 16

	)

28 
	#SO_PEERCRED
 17

	)

29 
	#SO_RCVLOWAT
 18

	)

30 
	#SO_SNDLOWAT
 19

	)

31 
	#SO_RCVTIMEO
 20

	)

32 
	#SO_SNDTIMEO
 21

	)

36 
	#SO_SECURITY_AUTHENTICATION
 22

	)

37 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

38 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

40 
	#SO_BINDTODEVICE
 25

	)

43 
	#SO_ATTACH_FILTER
 26

	)

44 
	#SO_DETACH_FILTER
 27

	)

45 
	#SO_GET_FILTER
 
SO_ATTACH_FILTER


	)

47 
	#SO_PEERNAME
 28

	)

48 
	#SO_TIMESTAMP
 29

	)

49 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

51 
	#SO_ACCEPTCONN
 30

	)

53 
	#SO_PEERSEC
 31

	)

54 
	#SO_PASSSEC
 34

	)

55 
	#SO_TIMESTAMPNS
 35

	)

56 
	#SCM_TIMESTAMPNS
 
SO_TIMESTAMPNS


	)

58 
	#SO_MARK
 36

	)

60 
	#SO_TIMESTAMPING
 37

	)

61 
	#SCM_TIMESTAMPING
 
SO_TIMESTAMPING


	)

63 
	#SO_PROTOCOL
 38

	)

64 
	#SO_DOMAIN
 39

	)

66 
	#SO_RXQ_OVFL
 40

	)

68 
	#SO_WIFI_STATUS
 41

	)

69 
	#SCM_WIFI_STATUS
 
SO_WIFI_STATUS


	)

70 
	#SO_PEEK_OFF
 42

	)

73 
	#SO_NOFCS
 43

	)

75 
	#SO_LOCK_FILTER
 44

	)

77 
	#SO_SELECT_ERR_QUEUE
 45

	)

79 
	#SO_BUSY_POLL
 46

	)

81 
	#SO_MAX_PACING_RATE
 47

	)

83 
	#SO_BPF_EXTENSIONS
 48

	)

85 
	#SO_INCOMING_CPU
 49

	)

87 
	#SO_ATTACH_BPF
 50

	)

88 
	#SO_DETACH_BPF
 
SO_DETACH_FILTER


	)

	@/usr/include/asm/posix_types_32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_32_H


2 
	#_ASM_X86_POSIX_TYPES_32_H


	)

10 
	t__kî√l_mode_t
;

11 
	#__kî√l_mode_t
 
__kî√l_mode_t


	)

13 
	t__kî√l_ùc_pid_t
;

14 
	#__kî√l_ùc_pid_t
 
__kî√l_ùc_pid_t


	)

16 
	t__kî√l_uid_t
;

17 
	t__kî√l_gid_t
;

18 
	#__kî√l_uid_t
 
__kî√l_uid_t


	)

20 
	t__kî√l_ﬁd_dev_t
;

21 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

23 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_64.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_64_H


2 
	#_ASM_X86_POSIX_TYPES_64_H


	)

10 
	t__kî√l_ﬁd_uid_t
;

11 
	t__kî√l_ﬁd_gid_t
;

12 
	#__kî√l_ﬁd_uid_t
 
__kî√l_ﬁd_uid_t


	)

14 
	t__kî√l_ﬁd_dev_t
;

15 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

17 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_x32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_X32_H


2 
	#_ASM_X86_POSIX_TYPES_X32_H


	)

13 
	t__kî√l_l⁄g_t
;

14 
	t__kî√l_ul⁄g_t
;

15 
	#__kî√l_l⁄g_t
 
__kî√l_l⁄g_t


	)

17 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/bits/wchar-ldbl.h

19 #i‚de‡
_WCHAR_H


23 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


24 
__BEGIN_NAMESPACE_C99


25 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

26 
__LDBL_REDIR_DECL
 (
w¥ötf
);

27 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

28 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
	g__REDIRECT
 \

33 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

38 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

39 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

42 
__END_NAMESPACE_C99


45 #ifde‡
__USE_ISOC99


46 
__BEGIN_NAMESPACE_C99


47 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

48 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

49 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

50 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

51 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

54 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

55 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

58 
__END_NAMESPACE_C99


61 #ifde‡
__USE_GNU


62 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

65 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


66 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

67 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

68 #i‡
__USE_FORTIFY_LEVEL
 > 1

69 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

70 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

19 #i‚de‡
_WCHAR_H


24 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

25 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

26 
size_t
 
__ns1
Ë
__THROW
;

27 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

28 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

29 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

30 
wmem˝y
);

31 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

32 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

33 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

34 
size_t
 
__ns1
), 
__wmem˝y_chk
)

35 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

38 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

39 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

40 
size_t
 
__n
))

42 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

44 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

45  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

46 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

48 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

49  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

50 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

52  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

53 
	}
}

56 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

57 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

58 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

59 c⁄° 
wch¨_t
 *
__s2
,

60 
size_t
 
__n
), 
wmemmove
);

61 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

62 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

63 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

64 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

67 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

68 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
))

70 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

72 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

73  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

74 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

76 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

77  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

78 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

80  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

81 
	}
}

84 #ifde‡
__USE_GNU


85 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

86 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

87 
size_t
 
__ns1
Ë
__THROW
;

88 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

89 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

90 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
,

91 
size_t
 
__n
), 
wmemp˝y
);

92 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

93 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

94 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

95 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

96 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

99 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

100 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

101 
size_t
 
__n
))

103 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

105 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

106  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

107 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

109 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

110  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

111 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

113  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

114 
	}
}

118 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

119 
size_t
 
__ns
Ë
__THROW
;

120 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

121 
size_t
 
__n
), 
wmem£t
);

122 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

123 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

124 
size_t
 
__ns
), 
__wmem£t_chk
)

125 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

128 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

129 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

131 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

133 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

134  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

136 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

137  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

138 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

140  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

141 
	}
}

144 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

146 
size_t
 
__n
Ë
__THROW
;

147 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

148 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

149 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

151 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

152 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

154 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

155  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

156  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

157 
	}
}

160 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

161 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

162 
size_t
 
__de°Àn
Ë
__THROW
;

163 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

164 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

165 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

167 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

168 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

170 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

171  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

172  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

173 
	}
}

176 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

177 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

178 
size_t
 
__de°Àn
Ë
__THROW
;

179 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

180 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

181 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

182 
size_t
 
__n
), 
wc¢˝y
);

183 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

184 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

185 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

186 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

187 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

190 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

191 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

192 
size_t
 
__n
))

194 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

196 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

197  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

198 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

199 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

200  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

201 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

203  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

204 
	}
}

207 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

208 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

209 
size_t
 
__de°Àn
Ë
__THROW
;

210 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

211 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

212 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

213 
size_t
 
__n
), 
w˝n˝y
);

214 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

215 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

216 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

217 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

218 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

221 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

222 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

223 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

264 
size_t
 
__n
))

266 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

267  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

268 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

269  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

270 
	}
}

273 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

274 
__Êag
, 
size_t
 
__s_Àn
,

275 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

276 
__THROW
 ;

278 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

279 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

280 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

281 
sw¥ötf
);

283 #ifde‡
__va_¨g_∑ck


284 
__f‹tify_fun˘i⁄
 

285 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

288 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

289  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

290 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

291 
__fmt
, 
	`__va_¨g_∑ck
 ());

292  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

293 
	}
}

294 #ñi‡!
deföed
 
__˝lu•lus


296 
	#sw¥ötf
(
s
, 
n
, ...) \

297 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

298 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

299 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

300 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

303 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

304 
__Êag
, 
size_t
 
__s_Àn
,

305 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

306 
__gnuc_va_li°
 
__¨g
)

307 
__THROW
 ;

309 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

310 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

311 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

312 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

314 
__f‹tify_fun˘i⁄
 

315 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

316 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

318 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

319  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

320 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

321  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

322 
	}
}

325 #i‡
__USE_FORTIFY_LEVEL
 > 1

327 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

328 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

329 
__w¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

331 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

332 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

333 
__gnuc_va_li°
 
__≠
);

334 
__vw¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

335 
__gnuc_va_li°
 
__≠
);

337 #ifde‡
__va_¨g_∑ck


338 
__f‹tify_fun˘i⁄
 

339 
	$w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

341  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

342 
	}
}

344 
__f‹tify_fun˘i⁄
 

345 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

347  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

348 
	`__va_¨g_∑ck
 ());

349 
	}
}

350 #ñi‡!
deföed
 
__˝lu•lus


351 
	#w¥ötf
(...) \

352 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

353 
	#fw¥ötf
(
°ªam
, ...) \

354 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

357 
__f‹tify_fun˘i⁄
 

358 
	$vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

360  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

361 
	}
}

363 
__f‹tify_fun˘i⁄
 

364 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

365 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

367  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

368 
	}
}

372 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

373 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

374 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

375 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

376 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

377 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

378 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

379 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

380 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

383 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

384 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

386 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

388 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

389  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

390 
__n
, 
__°ªam
);

392 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

393  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

394 
__n
, 
__°ªam
);

396  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

397 
	}
}

399 #ifde‡
__USE_GNU


400 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

401 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

402 
__wur
;

403 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

404 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

405 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

406 
__wur
;

407 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

408 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

409 
__FILE
 *
__ª°ri˘
 
__°ªam
),

410 
__fgëws_u∆ocked_chk
)

411 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

414 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

415 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

417 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

419 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

420  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

421 
__n
, 
__°ªam
);

423 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

424  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

425 
__n
, 
__°ªam
);

427  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

428 
	}
}

432 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

433 
mb°©e_t
 *
__ª°ri˘
 
__p
,

434 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

435 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

436 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

437 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

439 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


440 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

441 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

446 
	#__WCHAR_MB_LEN_MAX
 16

	)

447 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


450 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

451  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

452  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

453 
	}
}

456 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

457 c⁄° **
__ª°ri˘
 
__§c
,

458 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

459 
size_t
 
__d°Àn
Ë
__THROW
;

460 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

461 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

462 c⁄° **
__ª°ri˘
 
__§c
,

463 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

464 
mb§towcs
);

465 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

466 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

467 c⁄° **
__ª°ri˘
 
__§c
,

468 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

469 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

470 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

473 
__f‹tify_fun˘i⁄
 
size_t


474 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

475 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

477 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

479 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

480  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

481 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

483 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

484  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

485 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

487  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

488 
	}
}

491 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

492 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

493 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

494 
size_t
 
__d°Àn
Ë
__THROW
;

495 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

496 (*
__ª°ri˘
 
__d°
,

497 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

498 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

499 
wc§tombs
);

500 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

501 (*
__ª°ri˘
 
__d°
,

502 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

503 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

504 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

505 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

507 
__f‹tify_fun˘i⁄
 
size_t


508 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

509 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

511 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

513 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

514  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

517  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

519  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

520 
	}
}

523 #ifde‡
__USE_GNU


524 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

525 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

526 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

527 
size_t
 
__d°Àn
Ë
__THROW
;

528 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

529 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

530 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

531 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

532 
mb¢πowcs
);

533 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

534 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

535 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

536 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

537 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

538 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

541 
__f‹tify_fun˘i⁄
 
size_t


542 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

543 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

545 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

547 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

548  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

549 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

551 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

552  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

553 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

555  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

556 
	}
}

559 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

560 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

561 
size_t
 
__nwc
, size_à
__Àn
,

562 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

563 
__THROW
;

564 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

565 (*
__ª°ri˘
 
__d°
,

566 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

567 
size_t
 
__nwc
, size_à
__Àn
,

568 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

569 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

570 (*
__ª°ri˘
 
__d°
,

571 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

572 
size_t
 
__nwc
, size_à
__Àn
,

573 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

574 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

575 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

577 
__f‹tify_fun˘i⁄
 
size_t


578 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

579 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

581 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

583 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

584  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

585 
	`__bos
 (
__d°
));

587 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

588  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

589 
	`__bos
 (
__d°
));

591  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

592 
	}
}

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm-generic/posix_types.h

1 #i‚de‡
__ASM_GENERIC_POSIX_TYPES_H


2 
	#__ASM_GENERIC_POSIX_TYPES_H


	)

4 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__kî√l_l⁄g_t


14 
	t__kî√l_l⁄g_t
;

15 
	t__kî√l_ul⁄g_t
;

18 #i‚de‡
__kî√l_öo_t


19 
__kî√l_ul⁄g_t
 
	t__kî√l_öo_t
;

22 #i‚de‡
__kî√l_mode_t


23 
	t__kî√l_mode_t
;

26 #i‚de‡
__kî√l_pid_t


27 
	t__kî√l_pid_t
;

30 #i‚de‡
__kî√l_ùc_pid_t


31 
	t__kî√l_ùc_pid_t
;

34 #i‚de‡
__kî√l_uid_t


35 
	t__kî√l_uid_t
;

36 
	t__kî√l_gid_t
;

39 #i‚de‡
__kî√l_su£c⁄ds_t


40 
__kî√l_l⁄g_t
 
	t__kî√l_su£c⁄ds_t
;

43 #i‚de‡
__kî√l_daddr_t


44 
	t__kî√l_daddr_t
;

47 #i‚de‡
__kî√l_uid32_t


48 
	t__kî√l_uid32_t
;

49 
	t__kî√l_gid32_t
;

52 #i‚de‡
__kî√l_ﬁd_uid_t


53 
__kî√l_uid_t
 
	t__kî√l_ﬁd_uid_t
;

54 
__kî√l_gid_t
 
	t__kî√l_ﬁd_gid_t
;

57 #i‚de‡
__kî√l_ﬁd_dev_t


58 
	t__kî√l_ﬁd_dev_t
;

65 #i‚de‡
__kî√l_size_t


66 #i‡
__BITS_PER_LONG
 != 64

67 
	t__kî√l_size_t
;

68 
	t__kî√l_ssize_t
;

69 
	t__kî√l_±rdiff_t
;

71 
__kî√l_ul⁄g_t
 
	t__kî√l_size_t
;

72 
__kî√l_l⁄g_t
 
	t__kî√l_ssize_t
;

73 
__kî√l_l⁄g_t
 
	t__kî√l_±rdiff_t
;

77 #i‚de‡
__kî√l_fsid_t


79 
	mvÆ
[2];

80 } 
	t__kî√l_fsid_t
;

86 
__kî√l_l⁄g_t
 
	t__kî√l_off_t
;

87 
	t__kî√l_loff_t
;

88 
__kî√l_l⁄g_t
 
	t__kî√l_time_t
;

89 
__kî√l_l⁄g_t
 
	t__kî√l_˛ock_t
;

90 
	t__kî√l_timî_t
;

91 
	t__kî√l_˛ockid_t
;

92 * 
	t__kî√l_ˇddr_t
;

93 
	t__kî√l_uid16_t
;

94 
	t__kî√l_gid16_t
;

	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
__ASM_X86_BITSPERLONG_H


2 
	#__ASM_X86_BITSPERLONG_H


	)

4 #i‡
deföed
(
__x86_64__
Ë&& !deföed(
__ILP32__
)

5 
	#__BITS_PER_LONG
 64

	)

7 
	#__BITS_PER_LONG
 32

	)

10 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/asm/sockios.h

1 
	~<asm-gíîic/sockios.h
>

	@/usr/include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #i‚de‡
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #i‚de‡
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

53 #i‚de‡
_IOC_NONE


54 
	#_IOC_NONE
 0U

	)

57 #i‚de‡
_IOC_WRITE


58 
	#_IOC_WRITE
 1U

	)

61 #i‚de‡
_IOC_READ


62 
	#_IOC_READ
 2U

	)

65 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

66 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

67 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

68 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

69 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

71 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

74 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

75 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

76 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

77 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

78 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

79 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

80 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

83 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

84 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

85 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

86 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

90 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

91 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

92 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

93 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

94 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/asm-generic/sockios.h

1 #i‚de‡
__ASM_GENERIC_SOCKIOS_H


2 
	#__ASM_GENERIC_SOCKIOS_H


	)

5 
	#FIOSETOWN
 0x8901

	)

6 
	#SIOCSPGRP
 0x8902

	)

7 
	#FIOGETOWN
 0x8903

	)

8 
	#SIOCGPGRP
 0x8904

	)

9 
	#SIOCATMARK
 0x8905

	)

10 
	#SIOCGSTAMP
 0x8906

	)

11 
	#SIOCGSTAMPNS
 0x8907

	)

	@
1
.
1
/usr/include
415
11158
app/cli-functions.c
app/cli-functions.h
app/lpktgenlib.c
app/lpktgenlib.h
app/pktgen-arp.c
app/pktgen-arp.h
app/pktgen-capture.c
app/pktgen-capture.h
app/pktgen-cfg.c
app/pktgen-cfg.h
app/pktgen-cmds.c
app/pktgen-cmds.h
app/pktgen-constants.h
app/pktgen-cpu.c
app/pktgen-cpu.h
app/pktgen-display.c
app/pktgen-display.h
app/pktgen-dump.c
app/pktgen-dump.h
app/pktgen-ether.c
app/pktgen-ether.h
app/pktgen-gre.c
app/pktgen-gre.h
app/pktgen-gtpu.c
app/pktgen-gtpu.h
app/pktgen-ipv4.c
app/pktgen-ipv4.h
app/pktgen-ipv6.c
app/pktgen-ipv6.h
app/pktgen-latency.c
app/pktgen-latency.h
app/pktgen-log.c
app/pktgen-log.h
app/pktgen-main.c
app/pktgen-main.h
app/pktgen-pcap.c
app/pktgen-pcap.h
app/pktgen-port-cfg.c
app/pktgen-port-cfg.h
app/pktgen-random.c
app/pktgen-random.h
app/pktgen-range.c
app/pktgen-range.h
app/pktgen-seq.c
app/pktgen-seq.h
app/pktgen-stats.c
app/pktgen-stats.h
app/pktgen-tcp.c
app/pktgen-tcp.h
app/pktgen-udp.c
app/pktgen-udp.h
app/pktgen-vlan.c
app/pktgen-vlan.h
app/pktgen.c
app/pktgen.h
app/xorshift64star.h
gui/pktgen-gui-cfg.h
gui/pktgen-gui-misc.c
gui/pktgen-gui-streams.c
gui/pktgen-gui-streams.h
gui/pktgen-gui.c
gui/pktgen-gui.h
lib/archive/lua-5.3.0/src/lapi.c
lib/archive/lua-5.3.0/src/lapi.h
lib/archive/lua-5.3.0/src/lauxlib.c
lib/archive/lua-5.3.0/src/lauxlib.h
lib/archive/lua-5.3.0/src/lbaselib.c
lib/archive/lua-5.3.0/src/lbitlib.c
lib/archive/lua-5.3.0/src/lcode.c
lib/archive/lua-5.3.0/src/lcode.h
lib/archive/lua-5.3.0/src/lcorolib.c
lib/archive/lua-5.3.0/src/lctype.c
lib/archive/lua-5.3.0/src/lctype.h
lib/archive/lua-5.3.0/src/ldblib.c
lib/archive/lua-5.3.0/src/ldebug.c
lib/archive/lua-5.3.0/src/ldebug.h
lib/archive/lua-5.3.0/src/ldo.c
lib/archive/lua-5.3.0/src/ldo.h
lib/archive/lua-5.3.0/src/ldump.c
lib/archive/lua-5.3.0/src/lfunc.c
lib/archive/lua-5.3.0/src/lfunc.h
lib/archive/lua-5.3.0/src/lgc.c
lib/archive/lua-5.3.0/src/lgc.h
lib/archive/lua-5.3.0/src/linit.c
lib/archive/lua-5.3.0/src/liolib.c
lib/archive/lua-5.3.0/src/llex.c
lib/archive/lua-5.3.0/src/llex.h
lib/archive/lua-5.3.0/src/llimits.h
lib/archive/lua-5.3.0/src/lmathlib.c
lib/archive/lua-5.3.0/src/lmem.c
lib/archive/lua-5.3.0/src/lmem.h
lib/archive/lua-5.3.0/src/loadlib.c
lib/archive/lua-5.3.0/src/lobject.c
lib/archive/lua-5.3.0/src/lobject.h
lib/archive/lua-5.3.0/src/lopcodes.c
lib/archive/lua-5.3.0/src/lopcodes.h
lib/archive/lua-5.3.0/src/loslib.c
lib/archive/lua-5.3.0/src/lparser.c
lib/archive/lua-5.3.0/src/lparser.h
lib/archive/lua-5.3.0/src/lprefix.h
lib/archive/lua-5.3.0/src/lstate.c
lib/archive/lua-5.3.0/src/lstate.h
lib/archive/lua-5.3.0/src/lstring.c
lib/archive/lua-5.3.0/src/lstring.h
lib/archive/lua-5.3.0/src/lstrlib.c
lib/archive/lua-5.3.0/src/ltable.c
lib/archive/lua-5.3.0/src/ltable.h
lib/archive/lua-5.3.0/src/ltablib.c
lib/archive/lua-5.3.0/src/ltm.c
lib/archive/lua-5.3.0/src/ltm.h
lib/archive/lua-5.3.0/src/lua-socket.c
lib/archive/lua-5.3.0/src/lua-socket.h
lib/archive/lua-5.3.0/src/lua.c
lib/archive/lua-5.3.0/src/lua.h
lib/archive/lua-5.3.0/src/lua.hpp
lib/archive/lua-5.3.0/src/lua_shell.c
lib/archive/lua-5.3.0/src/lua_shell.h
lib/archive/lua-5.3.0/src/luac.c
lib/archive/lua-5.3.0/src/luaconf.h
lib/archive/lua-5.3.0/src/lualib.h
lib/archive/lua-5.3.0/src/lundump.c
lib/archive/lua-5.3.0/src/lundump.h
lib/archive/lua-5.3.0/src/lutf8lib.c
lib/archive/lua-5.3.0/src/lvm.c
lib/archive/lua-5.3.0/src/lvm.h
lib/archive/lua-5.3.0/src/lzio.c
lib/archive/lua-5.3.0/src/lzio.h
lib/cli/cli.c
lib/cli/cli.h
lib/cli/cli_auto_complete.c
lib/cli/cli_auto_complete.h
lib/cli/cli_cmap.c
lib/cli/cli_cmap.h
lib/cli/cli_cmds.c
lib/cli/cli_cmds.h
lib/cli/cli_common.h
lib/cli/cli_env.c
lib/cli/cli_env.h
lib/cli/cli_file.c
lib/cli/cli_file.h
lib/cli/cli_gapbuf.c
lib/cli/cli_gapbuf.h
lib/cli/cli_help.c
lib/cli/cli_help.h
lib/cli/cli_history.c
lib/cli/cli_history.h
lib/cli/cli_input.c
lib/cli/cli_input.h
lib/cli/cli_map.c
lib/cli/cli_map.h
lib/cli/cli_scrn.c
lib/cli/cli_scrn.h
lib/cli/cli_search.c
lib/cli/cli_search.h
lib/cli/cli_string_fns.c
lib/cli/cli_string_fns.h
lib/cli/cli_vt100.c
lib/common/_pcap.c
lib/common/_pcap.h
lib/common/cksum.c
lib/common/cksum.h
lib/common/cmdline_parse_args.c
lib/common/cmdline_parse_args.h
lib/common/copyright_info.c
lib/common/copyright_info.h
lib/common/core_info.c
lib/common/core_info.h
lib/common/coremap.c
lib/common/coremap.h
lib/common/cycles.h
lib/common/l2p.c
lib/common/l2p.h
lib/common/lscpu.c
lib/common/lscpu.h
lib/common/mbuf.h
lib/common/pg_ether.h
lib/common/pg_inet.c
lib/common/pg_inet.h
lib/common/port_config.c
lib/common/port_config.h
lib/common/utils.c
lib/common/utils.h
lib/lua/lua-5.3.4/src/lapi.c
lib/lua/lua-5.3.4/src/lapi.h
lib/lua/lua-5.3.4/src/lauxlib.c
lib/lua/lua-5.3.4/src/lauxlib.h
lib/lua/lua-5.3.4/src/lbaselib.c
lib/lua/lua-5.3.4/src/lbitlib.c
lib/lua/lua-5.3.4/src/lcode.c
lib/lua/lua-5.3.4/src/lcode.h
lib/lua/lua-5.3.4/src/lcorolib.c
lib/lua/lua-5.3.4/src/lctype.c
lib/lua/lua-5.3.4/src/lctype.h
lib/lua/lua-5.3.4/src/ldblib.c
lib/lua/lua-5.3.4/src/ldebug.c
lib/lua/lua-5.3.4/src/ldebug.h
lib/lua/lua-5.3.4/src/ldo.c
lib/lua/lua-5.3.4/src/ldo.h
lib/lua/lua-5.3.4/src/ldump.c
lib/lua/lua-5.3.4/src/lfunc.c
lib/lua/lua-5.3.4/src/lfunc.h
lib/lua/lua-5.3.4/src/lgc.c
lib/lua/lua-5.3.4/src/lgc.h
lib/lua/lua-5.3.4/src/linit.c
lib/lua/lua-5.3.4/src/liolib.c
lib/lua/lua-5.3.4/src/llex.c
lib/lua/lua-5.3.4/src/llex.h
lib/lua/lua-5.3.4/src/llimits.h
lib/lua/lua-5.3.4/src/lmathlib.c
lib/lua/lua-5.3.4/src/lmem.c
lib/lua/lua-5.3.4/src/lmem.h
lib/lua/lua-5.3.4/src/loadlib.c
lib/lua/lua-5.3.4/src/lobject.c
lib/lua/lua-5.3.4/src/lobject.h
lib/lua/lua-5.3.4/src/lopcodes.c
lib/lua/lua-5.3.4/src/lopcodes.h
lib/lua/lua-5.3.4/src/loslib.c
lib/lua/lua-5.3.4/src/lparser.c
lib/lua/lua-5.3.4/src/lparser.h
lib/lua/lua-5.3.4/src/lprefix.h
lib/lua/lua-5.3.4/src/lstate.c
lib/lua/lua-5.3.4/src/lstate.h
lib/lua/lua-5.3.4/src/lstring.c
lib/lua/lua-5.3.4/src/lstring.h
lib/lua/lua-5.3.4/src/lstrlib.c
lib/lua/lua-5.3.4/src/ltable.c
lib/lua/lua-5.3.4/src/ltable.h
lib/lua/lua-5.3.4/src/ltablib.c
lib/lua/lua-5.3.4/src/ltm.c
lib/lua/lua-5.3.4/src/ltm.h
lib/lua/lua-5.3.4/src/lua-socket.c
lib/lua/lua-5.3.4/src/lua-socket.h
lib/lua/lua-5.3.4/src/lua.c
lib/lua/lua-5.3.4/src/lua.h
lib/lua/lua-5.3.4/src/lua.hpp
lib/lua/lua-5.3.4/src/lua_shell.c
lib/lua/lua-5.3.4/src/lua_shell.h
lib/lua/lua-5.3.4/src/luac.c
lib/lua/lua-5.3.4/src/luaconf.h
lib/lua/lua-5.3.4/src/lualib.h
lib/lua/lua-5.3.4/src/lundump.c
lib/lua/lua-5.3.4/src/lundump.h
lib/lua/lua-5.3.4/src/lutf8lib.c
lib/lua/lua-5.3.4/src/lvm.c
lib/lua/lua-5.3.4/src/lvm.h
lib/lua/lua-5.3.4/src/lzio.c
lib/lua/lua-5.3.4/src/lzio.h
/usr/include/arpa/inet.h
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/dlfcn.h
/usr/include/errno.h
/usr/include/execinfo.h
/usr/include/fcntl.h
/usr/include/fnmatch.h
/usr/include/getopt.h
/usr/include/inttypes.h
/usr/include/libgen.h
/usr/include/limits.h
/usr/include/linux/if_tun.h
/usr/include/locale.h
/usr/include/math.h
/usr/include/net/if.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/pcap/pcap.h
/usr/include/poll.h
/usr/include/pthread.h
/usr/include/setjmp.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/ioctl.h
/usr/include/sys/queue.h
/usr/include/sys/stat.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/sys/wait.h
/usr/include/termios.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/bits/byteswap.h
/usr/include/bits/confname.h
/usr/include/bits/dlfcn.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/huge_val.h
/usr/include/bits/huge_valf.h
/usr/include/bits/huge_vall.h
/usr/include/bits/in.h
/usr/include/bits/inf.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/locale.h
/usr/include/bits/math-finite.h
/usr/include/bits/math-vector.h
/usr/include/bits/mathcalls.h
/usr/include/bits/mathdef.h
/usr/include/bits/mathinline.h
/usr/include/bits/nan.h
/usr/include/bits/netdb.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/setjmp.h
/usr/include/bits/setjmp2.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-bsearch.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/termios.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/libio.h
/usr/include/linux/filter.h
/usr/include/linux/if_ether.h
/usr/include/linux/types.h
/usr/include/pcap/bpf.h
/usr/include/rpc/netdb.h
/usr/include/sched.h
/usr/include/sys/poll.h
/usr/include/sys/select.h
/usr/include/sys/socket.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ttydefaults.h
/usr/include/sys/ucontext.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/asm/ioctls.h
/usr/include/asm/types.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/endian.h
/usr/include/bits/fcntl-linux.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/libm-simd-decl-stubs.h
/usr/include/bits/local_lim.h
/usr/include/bits/poll.h
/usr/include/bits/poll2.h
/usr/include/bits/sched.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/socket.h
/usr/include/bits/socket2.h
/usr/include/bits/timex.h
/usr/include/bits/typesizes.h
/usr/include/gnu/stubs.h
/usr/include/linux/bpf_common.h
/usr/include/linux/errno.h
/usr/include/linux/posix_types.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/usr/include/sys/uio.h
/usr/include/asm-generic/ioctls.h
/usr/include/asm-generic/types.h
/usr/include/asm/errno.h
/usr/include/asm/posix_types.h
/usr/include/asm/socket.h
/usr/include/bits/sockaddr.h
/usr/include/bits/socket_type.h
/usr/include/bits/uio.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/gnu/stubs-x32.h
/usr/include/linux/limits.h
/usr/include/linux/stddef.h
/usr/include/wchar.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm-generic/socket.h
/usr/include/asm/posix_types_32.h
/usr/include/asm/posix_types_64.h
/usr/include/asm/posix_types_x32.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/linux/ioctl.h
/usr/include/wctype.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm-generic/posix_types.h
/usr/include/asm/bitsperlong.h
/usr/include/asm/ioctl.h
/usr/include/asm/sockios.h
/usr/include/asm-generic/bitsperlong.h
/usr/include/asm-generic/ioctl.h
/usr/include/asm-generic/sockios.h
